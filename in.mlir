builtin.module attributes  {"sym_name" = "ir"} {
  "mini.prelude"() : () -> ()
  "mini.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
  "mini.typedef"() {"class_name" = "Iterator", "methods" = [], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Iterator], "offset_tbl" = [9 : i32, 0 : i32, 9 : i32, 9 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 8673632051301757104 : i64, "base_typ" = !llvm.struct<()>, "size_fn" = "_size_Iterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Iterable", "methods" = [], "hash_tbl" = [18446744073709551615 : i64, @Iterable, @any_typ, @Object], "offset_tbl" = [0 : i32, 9 : i32, 9 : i32, 11 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 3037712219555723519 : i64, "base_typ" = !llvm.struct<()>, "size_fn" = "_size_Iterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Representable", "methods" = [@Representable_B_repr_, @Representable_repr_], "hash_tbl" = [@Representable, 18446744073709551615 : i64, @any_typ, @Object], "offset_tbl" = [9 : i32, 0 : i32, 9 : i32, 11 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 11185903432579561498 : i64, "base_typ" = !llvm.struct<()>, "size_fn" = "_size_Representable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "String", "methods" = [@String_field_bytes, @String_field_length, @String_field_capacity, @String_B_init_, @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, @String_B_length_, @String_B_capacity_, @String_B_bytes_, @String_B_append_xPtri8, @String_B_extend_strString, @String_B__index_xPtri32, @String_B__EQ_otherString, @String_B_pop_, @String_B_copy_, @String_B_c_string_, @String_B_iterator_, @String_B_repr_, @String_init_, @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, @String_length_, @String_capacity_, @String_bytes_, @String_append_xPtri8, @String_extend_strString, @String__index_xPtri32, @String__EQ_otherString, @String_pop_, @String_copy_, @String_c_string_, @String_iterator_, @String_repr_, @String_B_iterator_, @String_iterator_, @String_B_repr_, @String_repr_], "hash_tbl" = [@any_typ, 18446744073709551615 : i64, @String, @Representable, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [9 : i32, 0 : i32, 9 : i32, 42 : i32, 42 : i32, 0 : i32, 0 : i32, 40 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 6499063144389013426 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "size_fn" = "_size_String", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Character", "methods" = [@Character_field_byte, @Character_B_byte_, @Character_B_init_bytePtri8, @Character_byte_, @Character_init_bytePtri8], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Character], "offset_tbl" = [14 : i32, 0 : i32, 9 : i32, 9 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 6681222582356018452 : i64, "base_typ" = !llvm.struct<(i8)>, "size_fn" = "_size_Character", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "StringIterator", "methods" = [@StringIterator_field_str, @StringIterator_field_index, @StringIterator_B_init_strString, @StringIterator_B_next_, @StringIterator_init_strString, @StringIterator_next_], "hash_tbl" = [@StringIterator, @Object, @any_typ, @Iterator], "offset_tbl" = [9 : i32, 15 : i32, 9 : i32, 15 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 11186173084763598986 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "size_fn" = "_size_StringIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Exception", "methods" = [@Exception_field_line_number, @Exception_field_file_name, @Exception_field_message, @Exception_B_init_messageString, @Exception_B_init_, @Exception_B_set_info_line_numberPtri32_file_nameString, @Exception_B_report_, @Exception_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberPtri32_file_nameString, @Exception_report_, @Exception_print_message_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Exception], "offset_tbl" = [22 : i32, 0 : i32, 9 : i32, 9 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 9027164862567808692 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "size_fn" = "_size_Exception", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IO", "methods" = [@IO_B__Self_print_xPtri8__Self_print_xPtri64__Self_print_xCharacter__Self_print_xPtrf64__Self_print_xPtri1__Self_print_xNil__Self_print_xPtri32__Self_print_xString__Self_print_xRepresentable, @IO__Self_print_xPtri8, @IO__Self_print_xPtri64, @IO__Self_print_xCharacter, @IO__Self_print_xPtrf64, @IO__Self_print_xPtri1, @IO__Self_print_xNil, @IO__Self_print_xPtri32, @IO__Self_print_xString, @IO__Self_print_xRepresentable], "hash_tbl" = [@any_typ, @IO, 18446744073709551615 : i64, @Object], "offset_tbl" = [9 : i32, 9 : i32, 0 : i32, 19 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 5359822646784595218 : i64, "base_typ" = !llvm.struct<()>, "size_fn" = "_size_IO", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Blocking", "methods" = [@Blocking_B_init_, @Blocking_init_], "hash_tbl" = [@Object, @any_typ, @Blocking, 18446744073709551615 : i64], "offset_tbl" = [11 : i32, 9 : i32, 9 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 847773162914674935 : i64, "base_typ" = !llvm.struct<()>, "size_fn" = "_size_Blocking", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Channel", "methods" = [@Channel_field_value, @Channel_B_init_, @Channel_B_get_, @Channel_B_put_new_valuePtri32, @Channel_init_, @Channel_get_, @Channel_put_new_valuePtri32], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Channel], "offset_tbl" = [16 : i32, 9 : i32, 0 : i32, 9 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 14778625957069801166 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i32)>)>, "size_fn" = "_size_Channel", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IntIterator", "methods" = [], "hash_tbl" = [@any_typ, @Iterator, @IntIterator, @Object], "offset_tbl" = [9 : i32, 11 : i32, 9 : i32, 11 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 17513659798052893061 : i64, "base_typ" = !llvm.struct<()>, "size_fn" = "_size_IntIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IntIterable", "methods" = [], "hash_tbl" = [@any_typ, @Iterable, @IntIterable, @Object], "offset_tbl" = [9 : i32, 31 : i32, 9 : i32, 33 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 10461781953294393041 : i64, "base_typ" = !llvm.struct<()>, "size_fn" = "_size_IntIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "MapIterable", "methods" = [@MapIterable_field_iterable, @MapIterable_field_f, @MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, @MapIterable_B_each_fFunctionPtri32_to_Nothing, @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @MapIterable_B_all_fFunctionPtri32_to_Ptri1, @MapIterable_B_any_fFunctionPtri32_to_Ptri1, @MapIterable_B_map_fFunctionPtri32_to_Ptri32, @MapIterable_B_filter_fFunctionPtri32_to_Ptri1, @MapIterable_B_chain_otherIntIterable, @MapIterable_B_interleave_otherIntIterable, @MapIterable_B_zip_otherIntIterable, @MapIterable_B_product_otherIntIterable, @MapIterable_B_iterator_, @MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @MapIterable_iterator_, @MapIterable_B_each_fFunctionPtri32_to_Nothing, @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @MapIterable_B_all_fFunctionPtri32_to_Ptri1, @MapIterable_B_any_fFunctionPtri32_to_Ptri1, @MapIterable_B_map_fFunctionPtri32_to_Ptri32, @MapIterable_B_filter_fFunctionPtri32_to_Ptri1, @MapIterable_B_chain_otherIntIterable, @MapIterable_B_interleave_otherIntIterable, @MapIterable_B_zip_otherIntIterable, @MapIterable_B_product_otherIntIterable, @MapIterable_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @MapIterable_iterator_, @MapIterable_B_iterator_, @MapIterable_iterator_, @MapIterable_B_iterator_, @MapIterable_iterator_], "hash_tbl" = [@IntIterable, @MapIterable, @Object, 18446744073709551615 : i64, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [35 : i32, 9 : i32, 61 : i32, 0 : i32, 9 : i32, 0 : i32, 0 : i32, 59 : i32], "prime" = 4611686018427388291 : i64, "hash_id" = 10957973502106259894 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "size_fn" = "_size_MapIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "MapIterator", "methods" = [@MapIterator_field_iterator, @MapIterator_field_f, @MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, @MapIterator_B_next_, @MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, @MapIterator_next_, @MapIterator_B_next_, @MapIterator_next_], "hash_tbl" = [@Object, @any_typ, @MapIterator, @IntIterator, 18446744073709551615 : i64, @Iterator, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [17 : i32, 9 : i32, 9 : i32, 15 : i32, 0 : i32, 17 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 18300190591082816834 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "size_fn" = "_size_MapIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FilterIterable", "methods" = [@FilterIterable_field_iterable, @FilterIterable_field_f, @FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, @FilterIterable_B_each_fFunctionPtri32_to_Nothing, @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @FilterIterable_B_all_fFunctionPtri32_to_Ptri1, @FilterIterable_B_any_fFunctionPtri32_to_Ptri1, @FilterIterable_B_map_fFunctionPtri32_to_Ptri32, @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, @FilterIterable_B_chain_otherIntIterable, @FilterIterable_B_interleave_otherIntIterable, @FilterIterable_B_zip_otherIntIterable, @FilterIterable_B_product_otherIntIterable, @FilterIterable_B_iterator_, @FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @FilterIterable_iterator_, @FilterIterable_B_each_fFunctionPtri32_to_Nothing, @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @FilterIterable_B_all_fFunctionPtri32_to_Ptri1, @FilterIterable_B_any_fFunctionPtri32_to_Ptri1, @FilterIterable_B_map_fFunctionPtri32_to_Ptri32, @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, @FilterIterable_B_chain_otherIntIterable, @FilterIterable_B_interleave_otherIntIterable, @FilterIterable_B_zip_otherIntIterable, @FilterIterable_B_product_otherIntIterable, @FilterIterable_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @FilterIterable_iterator_, @FilterIterable_B_iterator_, @FilterIterable_iterator_, @FilterIterable_B_iterator_, @FilterIterable_iterator_], "hash_tbl" = [@IntIterable, 18446744073709551615 : i64, @Object, @FilterIterable, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [35 : i32, 0 : i32, 61 : i32, 9 : i32, 9 : i32, 0 : i32, 0 : i32, 59 : i32], "prime" = 4611686018427388291 : i64, "hash_id" = 8498466713076104350 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "size_fn" = "_size_FilterIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FilterIterator", "methods" = [@FilterIterator_field_iterator, @FilterIterator_field_f, @FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, @FilterIterator_B_next_, @FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, @FilterIterator_next_, @FilterIterator_B_next_, @FilterIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @IntIterator, 18446744073709551615 : i64, @Iterator, @FilterIterator, 18446744073709551615 : i64], "offset_tbl" = [17 : i32, 9 : i32, 0 : i32, 15 : i32, 0 : i32, 17 : i32, 9 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 17225378576809247733 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "size_fn" = "_size_FilterIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ChainIterable", "methods" = [@ChainIterable_field_first, @ChainIterable_field_second, @ChainIterable_B_init_firstIntIterable_secondIntIterable, @ChainIterable_B_each_fFunctionPtri32_to_Nothing, @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @ChainIterable_B_all_fFunctionPtri32_to_Ptri1, @ChainIterable_B_any_fFunctionPtri32_to_Ptri1, @ChainIterable_B_map_fFunctionPtri32_to_Ptri32, @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, @ChainIterable_B_chain_otherIntIterable, @ChainIterable_B_interleave_otherIntIterable, @ChainIterable_B_zip_otherIntIterable, @ChainIterable_B_product_otherIntIterable, @ChainIterable_B_iterator_, @ChainIterable_init_firstIntIterable_secondIntIterable, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @ChainIterable_iterator_, @ChainIterable_B_each_fFunctionPtri32_to_Nothing, @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @ChainIterable_B_all_fFunctionPtri32_to_Ptri1, @ChainIterable_B_any_fFunctionPtri32_to_Ptri1, @ChainIterable_B_map_fFunctionPtri32_to_Ptri32, @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, @ChainIterable_B_chain_otherIntIterable, @ChainIterable_B_interleave_otherIntIterable, @ChainIterable_B_zip_otherIntIterable, @ChainIterable_B_product_otherIntIterable, @ChainIterable_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @ChainIterable_iterator_, @ChainIterable_B_iterator_, @ChainIterable_iterator_, @ChainIterable_B_iterator_, @ChainIterable_iterator_], "hash_tbl" = [@any_typ, @Iterable, @IntIterable, @ChainIterable, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, @Object], "offset_tbl" = [9 : i32, 59 : i32, 35 : i32, 9 : i32, 0 : i32, 0 : i32, 0 : i32, 61 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 16076497015278503801 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "size_fn" = "_size_ChainIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ChainIterator", "methods" = [@ChainIterator_field_first, @ChainIterator_field_second, @ChainIterator_field_on_first, @ChainIterator_B_init_firstIntIterator_secondIntIterator, @ChainIterator_B_next_, @ChainIterator_init_firstIntIterator_secondIntIterator, @ChainIterator_next_, @ChainIterator_B_next_, @ChainIterator_next_], "hash_tbl" = [@any_typ, @ChainIterator, 18446744073709551615 : i64, @Iterator, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, @IntIterator], "offset_tbl" = [9 : i32, 9 : i32, 0 : i32, 18 : i32, 18 : i32, 0 : i32, 0 : i32, 16 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 6043157723929225452 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "size_fn" = "_size_ChainIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "InterleaveIterable", "methods" = [@InterleaveIterable_field_first, @InterleaveIterable_field_second, @InterleaveIterable_B_init_firstIntIterable_secondIntIterable, @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_chain_otherIntIterable, @InterleaveIterable_B_interleave_otherIntIterable, @InterleaveIterable_B_zip_otherIntIterable, @InterleaveIterable_B_product_otherIntIterable, @InterleaveIterable_B_iterator_, @InterleaveIterable_init_firstIntIterable_secondIntIterable, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @InterleaveIterable_iterator_, @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_chain_otherIntIterable, @InterleaveIterable_B_interleave_otherIntIterable, @InterleaveIterable_B_zip_otherIntIterable, @InterleaveIterable_B_product_otherIntIterable, @InterleaveIterable_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @InterleaveIterable_iterator_, @InterleaveIterable_B_iterator_, @InterleaveIterable_iterator_, @InterleaveIterable_B_iterator_, @InterleaveIterable_iterator_], "hash_tbl" = [@IntIterable, @InterleaveIterable, @Object, 18446744073709551615 : i64, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [35 : i32, 9 : i32, 61 : i32, 0 : i32, 9 : i32, 0 : i32, 0 : i32, 59 : i32], "prime" = 4611686018427388291 : i64, "hash_id" = 4936782714255954462 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "size_fn" = "_size_InterleaveIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "InterleaveIterator", "methods" = [@InterleaveIterator_field_first, @InterleaveIterator_field_second, @InterleaveIterator_field_on_first, @InterleaveIterator_B_init_firstIntIterator_secondIntIterator, @InterleaveIterator_B_next_, @InterleaveIterator_init_firstIntIterator_secondIntIterator, @InterleaveIterator_next_, @InterleaveIterator_B_next_, @InterleaveIterator_next_], "hash_tbl" = [@any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterator, @Object, 18446744073709551615 : i64, @InterleaveIterator, @IntIterator], "offset_tbl" = [9 : i32, 0 : i32, 0 : i32, 18 : i32, 18 : i32, 0 : i32, 9 : i32, 16 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 14522079715461027111 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "size_fn" = "_size_InterleaveIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IntTupleIterable", "methods" = [], "hash_tbl" = [@any_typ, @Iterable, @IntTupleIterable, @Object], "offset_tbl" = [9 : i32, 11 : i32, 9 : i32, 13 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 1135628454346210518 : i64, "base_typ" = !llvm.struct<()>, "size_fn" = "_size_IntTupleIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IntTupleIterator", "methods" = [], "hash_tbl" = [@any_typ, @Object, @Iterator, @IntTupleIterator], "offset_tbl" = [9 : i32, 11 : i32, 11 : i32, 9 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 8926924731480624460 : i64, "base_typ" = !llvm.struct<()>, "size_fn" = "_size_IntTupleIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ZipIterable", "methods" = [@ZipIterable_field_first, @ZipIterable_field_second, @ZipIterable_B_init_firstIntIterable_secondIntIterable, @ZipIterable_B_iterator_, @ZipIterable_init_firstIntIterable_secondIntIterable, @ZipIterable_iterator_, @ZipIterable_B_iterator_, @ZipIterable_iterator_, @ZipIterable_B_iterator_, @ZipIterable_iterator_, @ZipIterable_B_iterator_, @ZipIterable_iterator_], "hash_tbl" = [@any_typ, 18446744073709551615 : i64, @IntTupleIterable, 18446744073709551615 : i64, @Object, @ZipIterable, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [9 : i32, 0 : i32, 15 : i32, 0 : i32, 21 : i32, 9 : i32, 0 : i32, 19 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 35232740166152944 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "size_fn" = "_size_ZipIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ZipIterator", "methods" = [@ZipIterator_field_first, @ZipIterator_field_second, @ZipIterator_B_init_firstIntIterator_secondIntIterator, @ZipIterator_B_next_, @ZipIterator_init_firstIntIterator_secondIntIterator, @ZipIterator_next_, @ZipIterator_B_next_, @ZipIterator_next_], "hash_tbl" = [@IntTupleIterator, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterator, @Object, 18446744073709551615 : i64, @any_typ, @ZipIterator], "offset_tbl" = [15 : i32, 0 : i32, 0 : i32, 17 : i32, 17 : i32, 0 : i32, 9 : i32, 9 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 16305629627969966298 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "size_fn" = "_size_ZipIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ProductIterable", "methods" = [@ProductIterable_field_first, @ProductIterable_field_second, @ProductIterable_B_init_firstIntIterable_secondIntIterable, @ProductIterable_B_iterator_, @ProductIterable_init_firstIntIterable_secondIntIterable, @ProductIterable_iterator_, @ProductIterable_B_iterator_, @ProductIterable_iterator_, @ProductIterable_B_iterator_, @ProductIterable_iterator_, @ProductIterable_B_iterator_, @ProductIterable_iterator_], "hash_tbl" = [@any_typ, @ProductIterable, @IntTupleIterable, 18446744073709551615 : i64, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [9 : i32, 9 : i32, 15 : i32, 0 : i32, 21 : i32, 0 : i32, 0 : i32, 19 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 4128338911757318636 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "size_fn" = "_size_ProductIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ProductIterator", "methods" = [@ProductIterator_field_first_iterator, @ProductIterator_field_second_iterator, @ProductIterator_field_second_iterable, @ProductIterator_field_current_first, @ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable, @ProductIterator_B_next_, @ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable, @ProductIterator_next_], "hash_tbl" = [@any_typ, @Object, @Iterator, @ProductIterator], "offset_tbl" = [9 : i32, 17 : i32, 17 : i32, 9 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 1697250377212095568 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>)>, "size_fn" = "_size_ProductIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Range", "methods" = [@Range_field_start, @Range_field_end, @Range_field_step, @Range_B_init_endPtri32, @Range_B_init_startPtri32_endPtri32, @Range_B_step_stepPtri32, @Range_B_each_fFunctionPtri32_to_Nothing, @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @Range_B_all_fFunctionPtri32_to_Ptri1, @Range_B_any_fFunctionPtri32_to_Ptri1, @Range_B_map_fFunctionPtri32_to_Ptri32, @Range_B_filter_fFunctionPtri32_to_Ptri1, @Range_B_chain_otherIntIterable, @Range_B_interleave_otherIntIterable, @Range_B_zip_otherIntIterable, @Range_B_product_otherIntIterable, @Range_B_iterator_, @Range_init_endPtri32, @Range_init_startPtri32_endPtri32, @Range_step_stepPtri32, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @Range_iterator_, @Range_B_each_fFunctionPtri32_to_Nothing, @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @Range_B_all_fFunctionPtri32_to_Ptri1, @Range_B_any_fFunctionPtri32_to_Ptri1, @Range_B_map_fFunctionPtri32_to_Ptri32, @Range_B_filter_fFunctionPtri32_to_Ptri1, @Range_B_chain_otherIntIterable, @Range_B_interleave_otherIntIterable, @Range_B_zip_otherIntIterable, @Range_B_product_otherIntIterable, @Range_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @Range_iterator_, @Range_B_iterator_, @Range_iterator_, @Range_B_iterator_, @Range_iterator_], "hash_tbl" = [@IntIterable, @Range, @Object, 18446744073709551615 : i64, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable], "offset_tbl" = [40 : i32, 9 : i32, 66 : i32, 0 : i32, 9 : i32, 0 : i32, 0 : i32, 64 : i32], "prime" = 4611686018427388291 : i64, "hash_id" = 5490049236840671069 : i64, "base_typ" = !llvm.struct<(i32, i32, i32)>, "size_fn" = "_size_Range", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "RangeIterator", "methods" = [@RangeIterator_field_counter, @RangeIterator_field_end, @RangeIterator_field_step, @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32, @RangeIterator_B_next_, @RangeIterator_init_counterPtri32_endPtri32_stepPtri32, @RangeIterator_next_, @RangeIterator_B_next_, @RangeIterator_next_], "hash_tbl" = [@RangeIterator, @IntIterator, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @Iterator, 18446744073709551615 : i64, @Object], "offset_tbl" = [9 : i32, 16 : i32, 9 : i32, 0 : i32, 0 : i32, 18 : i32, 0 : i32, 18 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 17533181587765144941 : i64, "base_typ" = !llvm.struct<(i32, i32, i32)>, "size_fn" = "_size_RangeIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "OutOfBoundsDetails", "methods" = [@OutOfBoundsDetails_field_bounds, @OutOfBoundsDetails_field_index, @OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32, @OutOfBoundsDetails_B_report_, @OutOfBoundsDetails_init_boundsPtri32_indexPtri32, @OutOfBoundsDetails_report_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @OutOfBoundsDetails], "offset_tbl" = [15 : i32, 0 : i32, 9 : i32, 9 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 4650630525701360429 : i64, "base_typ" = !llvm.struct<(i32, i32)>, "size_fn" = "_size_OutOfBoundsDetails", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "OutOfBounds", "methods" = [@OutOfBounds_field_details, @OutOfBounds_field_line_number, @OutOfBounds_field_file_name, @OutOfBounds_field_message, @OutOfBounds_B_init_boundsPtri32_indexPtri32, @OutOfBounds_B_init_messageString, @OutOfBounds_B_init_, @OutOfBounds_B_set_info_line_numberPtri32_file_nameString, @OutOfBounds_B_report_, @OutOfBounds_B_print_message_, @OutOfBounds_init_boundsPtri32_indexPtri32, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberPtri32_file_nameString, @Exception_report_, @OutOfBounds_print_message_, @OutOfBounds_field_line_number, @OutOfBounds_field_file_name, @OutOfBounds_field_message, @OutOfBounds_B_init_messageString, @OutOfBounds_B_init_, @OutOfBounds_B_set_info_line_numberPtri32_file_nameString, @OutOfBounds_B_report_, @OutOfBounds_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberPtri32_file_nameString, @Exception_report_, @OutOfBounds_print_message_], "hash_tbl" = [@any_typ, @Exception, @OutOfBounds, @Object], "offset_tbl" = [9 : i32, 25 : i32, 9 : i32, 38 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 5348403617834207535 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "size_fn" = "_size_OutOfBounds", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IntArray", "methods" = [@IntArray_field_buffer, @IntArray_field_length, @IntArray_field_capacity, @IntArray_B__Self_from_iterable_iterableIntIterable, @IntArray_B_init_, @IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, @IntArray_B_length_, @IntArray_B_capacity_, @IntArray_B_buffer_, @IntArray_B_append_xPtri32, @IntArray_B_extend_aryIntArray, @IntArray_B__index_xPtri32, @IntArray_B_pop_, @IntArray_B_copy_, @IntArray_B_each_fFunctionPtri32_to_Nothing, @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntArray_B_all_fFunctionPtri32_to_Ptri1, @IntArray_B_any_fFunctionPtri32_to_Ptri1, @IntArray_B_map_fFunctionPtri32_to_Ptri32, @IntArray_B_filter_fFunctionPtri32_to_Ptri1, @IntArray_B_chain_otherIntIterable, @IntArray_B_interleave_otherIntIterable, @IntArray_B_zip_otherIntIterable, @IntArray_B_product_otherIntIterable, @IntArray_B_iterator_, @IntArray_B_repr_, @IntArray__Self_from_iterable_iterableIntIterable, @IntArray_init_, @IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, @IntArray_length_, @IntArray_capacity_, @IntArray_buffer_, @IntArray_append_xPtri32, @IntArray_extend_aryIntArray, @IntArray__index_xPtri32, @IntArray_pop_, @IntArray_copy_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntArray_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @IntArray_iterator_, @Representable_repr_, @IntArray_B_each_fFunctionPtri32_to_Nothing, @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntArray_B_all_fFunctionPtri32_to_Ptri1, @IntArray_B_any_fFunctionPtri32_to_Ptri1, @IntArray_B_map_fFunctionPtri32_to_Ptri32, @IntArray_B_filter_fFunctionPtri32_to_Ptri1, @IntArray_B_chain_otherIntIterable, @IntArray_B_interleave_otherIntIterable, @IntArray_B_zip_otherIntIterable, @IntArray_B_product_otherIntIterable, @IntArray_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntArray_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @IntArray_iterator_, @IntArray_B_iterator_, @IntArray_iterator_, @IntArray_B_iterator_, @IntArray_iterator_, @IntArray_B_repr_, @Representable_repr_], "hash_tbl" = [@Representable, @Iterable, @any_typ, 18446744073709551615 : i64, 18446744073709551615 : i64, @IntIterable, @IntArray, @Object], "offset_tbl" = [84 : i32, 82 : i32, 9 : i32, 0 : i32, 0 : i32, 58 : i32, 9 : i32, 84 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 7629948565578263212 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "size_fn" = "_size_IntArray", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IntArrayIterator", "methods" = [@IntArrayIterator_field_array, @IntArrayIterator_field_index, @IntArrayIterator_B_init_arrayIntArray, @IntArrayIterator_B_next_, @IntArrayIterator_init_arrayIntArray, @IntArrayIterator_next_, @IntArrayIterator_B_next_, @IntArrayIterator_next_], "hash_tbl" = [18446744073709551615 : i64, @IntIterator, @any_typ, 18446744073709551615 : i64, @IntArrayIterator, @Iterator, 18446744073709551615 : i64, @Object], "offset_tbl" = [0 : i32, 15 : i32, 9 : i32, 0 : i32, 9 : i32, 17 : i32, 0 : i32, 17 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 5577199879563532693 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "size_fn" = "_size_IntArrayIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Pair", "methods" = [@Pair_field_Pair_0, @Pair_field_Pair_1, @Pair_field_first, @Pair_field_second, @Pair_B_init_firstT_secondU, @Pair_B_first_, @Pair_B_second_, @Pair_init_firstT_secondU, @Pair_first_, @Pair_second_], "hash_tbl" = [@Object, @any_typ, @Pair, 18446744073709551615 : i64], "offset_tbl" = [19 : i32, 9 : i32, 9 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 9197944775169318296 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "size_fn" = "_size_Pair", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Iterator2", "methods" = [], "hash_tbl" = [@Object, @any_typ, @Iterator2, 18446744073709551615 : i64], "offset_tbl" = [12 : i32, 9 : i32, 9 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 4189192806087951739 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "size_fn" = "_size_Iterator2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Iterable2", "methods" = [], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Iterable2], "offset_tbl" = [32 : i32, 0 : i32, 9 : i32, 9 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 5693646204635713916 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "size_fn" = "_size_Iterable2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Array", "methods" = [@Array_field_Array_0, @Array_field_buffer, @Array_field_length, @Array_field_capacity, @Array_B__Self_from_iterable_iterableIterable2T, @Array_B_init_, @Array_B_init_capacityPtri32, @Array_B_length_, @Array_B_capacity_, @Array_B_append_xT, @Array_B_grow_, @Array_B__index_xPtri32, @Array_B_throw_oob_xPtri32, @Array_B_unsafe_index_xPtri32, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Ptri1, @Array_B_any_fFunctionT_to_Ptri1, @Array_B_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Ptri1, @Array_B_chain_otherIterable2T, @Array_B_interleave_otherIterable2T, @Array_B_zip_otherIterable2U, @Array_B_product_otherIterable2U, @Array__Self_from_iterable_iterableIterable2T, @Array_init_, @Array_init_capacityPtri32, @Array_length_, @Array_capacity_, @Array_append_xT, @Array_grow_, @Array__index_xPtri32, @Array_throw_oob_xPtri32, @Array_unsafe_index_xPtri32, @Array_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Ptri1, @Array_B_any_fFunctionT_to_Ptri1, @Array_B_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Ptri1, @Array_B_chain_otherIterable2T, @Array_B_interleave_otherIterable2T, @Array_B_zip_otherIterable2U, @Array_B_product_otherIterable2U, @Array_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Object, @Iterable2, @Array, @any_typ], "offset_tbl" = [78 : i32, 55 : i32, 9 : i32, 9 : i32], "prime" = 4611686018427388721 : i64, "hash_id" = 13185201323315417072 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "size_fn" = "_size_Array", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ArrayIterator", "methods" = [@ArrayIterator_field_ArrayIterator_0, @ArrayIterator_field_array, @ArrayIterator_field_index, @ArrayIterator_B_init_arrayArrayT, @ArrayIterator_B_next_, @ArrayIterator_init_arrayArrayT, @ArrayIterator_next_, @ArrayIterator_field_ArrayIterator_0, @ArrayIterator_B_next_, @ArrayIterator_next_], "hash_tbl" = [@ArrayIterator, @Object, @any_typ, @Iterator2], "offset_tbl" = [9 : i32, 19 : i32, 9 : i32, 16 : i32], "prime" = 4611686018427388181 : i64, "hash_id" = 3447345754186651411 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "size_fn" = "_size_ArrayIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "MapIterable2", "methods" = [@MapIterable2_field_MapIterable2_0, @MapIterable2_field_MapIterable2_1, @MapIterable2_field_iterable, @MapIterable2_field_f, @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U, @MapIterable2_B_iterator_, @MapIterable2_B_each_fFunctionT_to_Nothing, @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapIterable2_B_all_fFunctionT_to_Ptri1, @MapIterable2_B_any_fFunctionT_to_Ptri1, @MapIterable2_B_map_fFunctionT_to_U, @MapIterable2_B_filter_fFunctionT_to_Ptri1, @MapIterable2_B_chain_otherIterable2T, @MapIterable2_B_interleave_otherIterable2T, @MapIterable2_B_zip_otherIterable2U, @MapIterable2_B_product_otherIterable2U, @MapIterable2_init_iterableIterable2T_fFunctionT_to_U, @MapIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @MapIterable2_field_MapIterable2_1, @MapIterable2_B_iterator_, @MapIterable2_B_each_fFunctionT_to_Nothing, @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapIterable2_B_all_fFunctionT_to_Ptri1, @MapIterable2_B_any_fFunctionT_to_Ptri1, @MapIterable2_B_map_fFunctionT_to_U, @MapIterable2_B_filter_fFunctionT_to_Ptri1, @MapIterable2_B_chain_otherIterable2T, @MapIterable2_B_interleave_otherIterable2T, @MapIterable2_B_zip_otherIterable2U, @MapIterable2_B_product_otherIterable2U, @MapIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Object, @MapIterable2, @any_typ, @Iterable2], "offset_tbl" = [60 : i32, 9 : i32, 9 : i32, 37 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 16721884939112659687 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "size_fn" = "_size_MapIterable2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "MapIterator2", "methods" = [@MapIterator2_field_MapIterator2_0, @MapIterator2_field_MapIterator2_1, @MapIterator2_field_iterator, @MapIterator2_field_f, @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U, @MapIterator2_B_next_, @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U, @MapIterator2_next_, @MapIterator2_field_MapIterator2_1, @MapIterator2_B_next_, @MapIterator2_next_], "hash_tbl" = [@Object, @Iterator2, @MapIterator2, @any_typ], "offset_tbl" = [20 : i32, 17 : i32, 9 : i32, 9 : i32], "prime" = 4611686018427388279 : i64, "hash_id" = 18436488126000279116 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "size_fn" = "_size_MapIterator2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FilterIterable2", "methods" = [@FilterIterable2_field_FilterIterable2_0, @FilterIterable2_field_iterable, @FilterIterable2_field_f, @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1, @FilterIterable2_B_iterator_, @FilterIterable2_B_each_fFunctionT_to_Nothing, @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @FilterIterable2_B_all_fFunctionT_to_Ptri1, @FilterIterable2_B_any_fFunctionT_to_Ptri1, @FilterIterable2_B_map_fFunctionT_to_U, @FilterIterable2_B_filter_fFunctionT_to_Ptri1, @FilterIterable2_B_chain_otherIterable2T, @FilterIterable2_B_interleave_otherIterable2T, @FilterIterable2_B_zip_otherIterable2U, @FilterIterable2_B_product_otherIterable2U, @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1, @FilterIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @FilterIterable2_field_FilterIterable2_0, @FilterIterable2_B_iterator_, @FilterIterable2_B_each_fFunctionT_to_Nothing, @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @FilterIterable2_B_all_fFunctionT_to_Ptri1, @FilterIterable2_B_any_fFunctionT_to_Ptri1, @FilterIterable2_B_map_fFunctionT_to_U, @FilterIterable2_B_filter_fFunctionT_to_Ptri1, @FilterIterable2_B_chain_otherIterable2T, @FilterIterable2_B_interleave_otherIterable2T, @FilterIterable2_B_zip_otherIterable2U, @FilterIterable2_B_product_otherIterable2U, @FilterIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Iterable2, @FilterIterable2, @any_typ, @Object], "offset_tbl" = [36 : i32, 9 : i32, 9 : i32, 59 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 1178467452958968374 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "size_fn" = "_size_FilterIterable2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FilterIterator2", "methods" = [@FilterIterator2_field_FilterIterator2_0, @FilterIterator2_field_iterator, @FilterIterator2_field_f, @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1, @FilterIterator2_B_next_, @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1, @FilterIterator2_next_, @FilterIterator2_field_FilterIterator2_0, @FilterIterator2_B_next_, @FilterIterator2_next_], "hash_tbl" = [@any_typ, @Object, @Iterator2, @FilterIterator2], "offset_tbl" = [9 : i32, 19 : i32, 16 : i32, 9 : i32], "prime" = 4611686018427388387 : i64, "hash_id" = 8213847504843366470 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "size_fn" = "_size_FilterIterator2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ChainIterable2", "methods" = [@ChainIterable2_field_ChainIterable2_0, @ChainIterable2_field_first, @ChainIterable2_field_second, @ChainIterable2_B_init_firstIterable2T_secondIterable2T, @ChainIterable2_B_iterator_, @ChainIterable2_B_each_fFunctionT_to_Nothing, @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainIterable2_B_all_fFunctionT_to_Ptri1, @ChainIterable2_B_any_fFunctionT_to_Ptri1, @ChainIterable2_B_map_fFunctionT_to_U, @ChainIterable2_B_filter_fFunctionT_to_Ptri1, @ChainIterable2_B_chain_otherIterable2T, @ChainIterable2_B_interleave_otherIterable2T, @ChainIterable2_B_zip_otherIterable2U, @ChainIterable2_B_product_otherIterable2U, @ChainIterable2_init_firstIterable2T_secondIterable2T, @ChainIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @ChainIterable2_field_ChainIterable2_0, @ChainIterable2_B_iterator_, @ChainIterable2_B_each_fFunctionT_to_Nothing, @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainIterable2_B_all_fFunctionT_to_Ptri1, @ChainIterable2_B_any_fFunctionT_to_Ptri1, @ChainIterable2_B_map_fFunctionT_to_U, @ChainIterable2_B_filter_fFunctionT_to_Ptri1, @ChainIterable2_B_chain_otherIterable2T, @ChainIterable2_B_interleave_otherIterable2T, @ChainIterable2_B_zip_otherIterable2U, @ChainIterable2_B_product_otherIterable2U, @ChainIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Object, @Iterable2, @ChainIterable2, @any_typ], "offset_tbl" = [59 : i32, 36 : i32, 9 : i32, 9 : i32], "prime" = 4611686018427388279 : i64, "hash_id" = 13213446000764521556 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "size_fn" = "_size_ChainIterable2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ChainIterator2", "methods" = [@ChainIterator2_field_ChainIterator2_0, @ChainIterator2_field_first, @ChainIterator2_field_second, @ChainIterator2_field_on_first, @ChainIterator2_B_init_firstIterator2T_secondIterator2T, @ChainIterator2_B_next_, @ChainIterator2_init_firstIterator2T_secondIterator2T, @ChainIterator2_next_, @ChainIterator2_field_ChainIterator2_0, @ChainIterator2_B_next_, @ChainIterator2_next_], "hash_tbl" = [@Object, @any_typ, @Iterator2, @ChainIterator2], "offset_tbl" = [20 : i32, 9 : i32, 17 : i32, 9 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 18218476088649089842 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "size_fn" = "_size_ChainIterator2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "InterleaveIterable2", "methods" = [@InterleaveIterable2_field_InterleaveIterable2_0, @InterleaveIterable2_field_first, @InterleaveIterable2_field_second, @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T, @InterleaveIterable2_B_iterator_, @InterleaveIterable2_B_each_fFunctionT_to_Nothing, @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, @InterleaveIterable2_B_map_fFunctionT_to_U, @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, @InterleaveIterable2_B_chain_otherIterable2T, @InterleaveIterable2_B_interleave_otherIterable2T, @InterleaveIterable2_B_zip_otherIterable2U, @InterleaveIterable2_B_product_otherIterable2U, @InterleaveIterable2_init_firstIterable2T_secondIterable2T, @InterleaveIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @InterleaveIterable2_field_InterleaveIterable2_0, @InterleaveIterable2_B_iterator_, @InterleaveIterable2_B_each_fFunctionT_to_Nothing, @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, @InterleaveIterable2_B_map_fFunctionT_to_U, @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, @InterleaveIterable2_B_chain_otherIterable2T, @InterleaveIterable2_B_interleave_otherIterable2T, @InterleaveIterable2_B_zip_otherIterable2U, @InterleaveIterable2_B_product_otherIterable2U, @InterleaveIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Iterable2, @InterleaveIterable2, @any_typ, @Object], "offset_tbl" = [36 : i32, 9 : i32, 9 : i32, 59 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 12188512388494089841 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "size_fn" = "_size_InterleaveIterable2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "InterleaveIterator2", "methods" = [@InterleaveIterator2_field_InterleaveIterator2_0, @InterleaveIterator2_field_first, @InterleaveIterator2_field_second, @InterleaveIterator2_field_on_first, @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T, @InterleaveIterator2_B_next_, @InterleaveIterator2_init_firstIterator2T_secondIterator2T, @InterleaveIterator2_next_, @InterleaveIterator2_field_InterleaveIterator2_0, @InterleaveIterator2_B_next_, @InterleaveIterator2_next_], "hash_tbl" = [@Object, @Iterator2, @InterleaveIterator2, @any_typ], "offset_tbl" = [20 : i32, 17 : i32, 9 : i32, 9 : i32], "prime" = 4611686018427388279 : i64, "hash_id" = 6709847746581360093 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "size_fn" = "_size_InterleaveIterator2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ZipIterable2", "methods" = [@ZipIterable2_field_ZipIterable2_0, @ZipIterable2_field_ZipIterable2_1, @ZipIterable2_field_ZipIterable2_2, @ZipIterable2_field_first, @ZipIterable2_field_second, @ZipIterable2_B_init_firstIterable2T_secondIterable2U, @ZipIterable2_B_iterator_, @ZipIterable2_B_each_fFunctionT_to_Nothing, @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZipIterable2_B_all_fFunctionT_to_Ptri1, @ZipIterable2_B_any_fFunctionT_to_Ptri1, @ZipIterable2_B_map_fFunctionT_to_U, @ZipIterable2_B_filter_fFunctionT_to_Ptri1, @ZipIterable2_B_chain_otherIterable2T, @ZipIterable2_B_interleave_otherIterable2T, @ZipIterable2_B_zip_otherIterable2U, @ZipIterable2_B_product_otherIterable2U, @ZipIterable2_init_firstIterable2T_secondIterable2U, @ZipIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @ZipIterable2_field_ZipIterable2_2, @ZipIterable2_B_iterator_, @ZipIterable2_B_each_fFunctionT_to_Nothing, @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZipIterable2_B_all_fFunctionT_to_Ptri1, @ZipIterable2_B_any_fFunctionT_to_Ptri1, @ZipIterable2_B_map_fFunctionT_to_U, @ZipIterable2_B_filter_fFunctionT_to_Ptri1, @ZipIterable2_B_chain_otherIterable2T, @ZipIterable2_B_interleave_otherIterable2T, @ZipIterable2_B_zip_otherIterable2U, @ZipIterable2_B_product_otherIterable2U, @ZipIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@any_typ, @ZipIterable2, @Iterable2, @Object], "offset_tbl" = [9 : i32, 9 : i32, 38 : i32, 61 : i32], "prime" = 4611686018427388289 : i64, "hash_id" = 15227793494662031801 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "size_fn" = "_size_ZipIterable2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ZipIterator2", "methods" = [@ZipIterator2_field_ZipIterator2_0, @ZipIterator2_field_ZipIterator2_1, @ZipIterator2_field_ZipIterator2_2, @ZipIterator2_field_first, @ZipIterator2_field_second, @ZipIterator2_B_init_firstIterator2T_secondIterator2U, @ZipIterator2_B_next_, @ZipIterator2_init_firstIterator2T_secondIterator2U, @ZipIterator2_next_, @ZipIterator2_field_ZipIterator2_2, @ZipIterator2_B_next_, @ZipIterator2_next_], "hash_tbl" = [@Object, @any_typ, @Iterator2, @ZipIterator2], "offset_tbl" = [21 : i32, 9 : i32, 18 : i32, 9 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5502728639611621286 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "size_fn" = "_size_ZipIterator2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ProductIterable2", "methods" = [@ProductIterable2_field_ProductIterable2_0, @ProductIterable2_field_ProductIterable2_1, @ProductIterable2_field_ProductIterable2_2, @ProductIterable2_field_first, @ProductIterable2_field_second, @ProductIterable2_B_init_firstIterable2T_secondIterable2U, @ProductIterable2_B_iterator_, @ProductIterable2_B_each_fFunctionT_to_Nothing, @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductIterable2_B_all_fFunctionT_to_Ptri1, @ProductIterable2_B_any_fFunctionT_to_Ptri1, @ProductIterable2_B_map_fFunctionT_to_U, @ProductIterable2_B_filter_fFunctionT_to_Ptri1, @ProductIterable2_B_chain_otherIterable2T, @ProductIterable2_B_interleave_otherIterable2T, @ProductIterable2_B_zip_otherIterable2U, @ProductIterable2_B_product_otherIterable2U, @ProductIterable2_init_firstIterable2T_secondIterable2U, @ProductIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @ProductIterable2_field_ProductIterable2_2, @ProductIterable2_B_iterator_, @ProductIterable2_B_each_fFunctionT_to_Nothing, @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductIterable2_B_all_fFunctionT_to_Ptri1, @ProductIterable2_B_any_fFunctionT_to_Ptri1, @ProductIterable2_B_map_fFunctionT_to_U, @ProductIterable2_B_filter_fFunctionT_to_Ptri1, @ProductIterable2_B_chain_otherIterable2T, @ProductIterable2_B_interleave_otherIterable2T, @ProductIterable2_B_zip_otherIterable2U, @ProductIterable2_B_product_otherIterable2U, @ProductIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@ProductIterable2, @Object, @any_typ, @Iterable2], "offset_tbl" = [9 : i32, 61 : i32, 9 : i32, 38 : i32], "prime" = 4611686018427388319 : i64, "hash_id" = 7827074759551300494 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "size_fn" = "_size_ProductIterable2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ProductIterator2", "methods" = [@ProductIterator2_field_ProductIterator2_0, @ProductIterator2_field_ProductIterator2_1, @ProductIterator2_field_ProductIterator2_2, @ProductIterator2_field_first_iterator, @ProductIterator2_field_second_iterator, @ProductIterator2_field_second_iterable, @ProductIterator2_field_current_first, @ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U, @ProductIterator2_B_next_, @ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U, @ProductIterator2_next_, @ProductIterator2_field_ProductIterator2_2, @ProductIterator2_B_next_, @ProductIterator2_next_], "hash_tbl" = [@ProductIterator2, @Iterator2, @any_typ, @Object], "offset_tbl" = [9 : i32, 20 : i32, 9 : i32, 23 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 4440657219728359865 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "size_fn" = "_size_ProductIterator2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Math", "methods" = [@Math_B__Self_sqrt_xPtrf64, @Math_B__Self_abs_xPtri32__Self_abs_xPtrf64, @Math_B__Self_max_aPtri32_bPtri32__Self_max_aPtrf64_bPtrf64, @Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64, @Math_B__Self_round_xPtrf64, @Math_B__Self_floor_xPtrf64, @Math_B__Self_ceiling_xPtrf64, @Math__Self_sqrt_xPtrf64, @Math__Self_abs_xPtri32, @Math__Self_abs_xPtrf64, @Math__Self_max_aPtri32_bPtri32, @Math__Self_max_aPtrf64_bPtrf64, @Math__Self_min_aPtri32_bPtri32, @Math__Self_min_aPtrf64_bPtrf64, @Math__Self_round_xPtrf64, @Math__Self_floor_xPtrf64, @Math__Self_ceiling_xPtrf64], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Math], "offset_tbl" = [26 : i32, 0 : i32, 9 : i32, 9 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 8094150130346788308 : i64, "base_typ" = !llvm.struct<()>, "size_fn" = "_size_Math", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Integer", "methods" = [@Integer_field_value, @Integer_B_init_valuePtri32, @Integer_B__ADD_otherPtri32, @Integer_B__SUB_otherPtri32, @Integer_B__MUL_otherPtri32, @Integer_B__DIV_otherPtri32, @Integer_B_print_, @Integer_init_valuePtri32, @Integer__ADD_otherPtri32, @Integer__SUB_otherPtri32, @Integer__MUL_otherPtri32, @Integer__DIV_otherPtri32, @Integer_print_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Integer], "offset_tbl" = [22 : i32, 9 : i32, 0 : i32, 9 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 17711596130900473384 : i64, "base_typ" = !llvm.struct<(i32)>, "size_fn" = "_size_Integer", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "BigBoy", "methods" = [@BigBoy_B_introduce_, @BigBoy_B_repr_, @BigBoy_introduce_, @Representable_repr_, @BigBoy_B_repr_, @Representable_repr_], "hash_tbl" = [@Representable, @Object, @any_typ, @BigBoy], "offset_tbl" = [13 : i32, 15 : i32, 9 : i32, 9 : i32], "prime" = 4611686018427388361 : i64, "hash_id" = 3069357308562348185 : i64, "base_typ" = !llvm.struct<()>, "size_fn" = "_size_BigBoy", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Integer2", "methods" = [@Integer2_field_value, @Integer2_B_value_, @Integer2_B_init_valuePtri32, @Integer2_B__ADD_otherPtri32, @Integer2_B__SUB_otherPtri32, @Integer2_B__MUL_otherPtri32, @Integer2_B__DIV_otherPtri32, @Integer2_B_print_, @Integer2_B_introduce_, @Integer2_B_repr_, @Integer2_value_, @Integer_init_valuePtri32, @Integer__ADD_otherPtri32, @Integer__SUB_otherPtri32, @Integer__MUL_otherPtri32, @Integer__DIV_otherPtri32, @Integer_print_, @BigBoy_introduce_, @Integer2_repr_, @Integer2_field_value, @Integer2_B_init_valuePtri32, @Integer2_B__ADD_otherPtri32, @Integer2_B__SUB_otherPtri32, @Integer2_B__MUL_otherPtri32, @Integer2_B__DIV_otherPtri32, @Integer2_B_print_, @Integer_init_valuePtri32, @Integer__ADD_otherPtri32, @Integer__SUB_otherPtri32, @Integer__MUL_otherPtri32, @Integer__DIV_otherPtri32, @Integer_print_, @Integer2_B_introduce_, @Integer2_B_repr_, @BigBoy_introduce_, @Integer2_repr_, @Integer2_B_repr_, @Integer2_repr_, @Integer2_B_repr_, @Integer2_repr_], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @Integer2, @Integer, @Representable, 18446744073709551615 : i64, @BigBoy], "offset_tbl" = [0 : i32, 41 : i32, 9 : i32, 9 : i32, 28 : i32, 47 : i32, 0 : i32, 41 : i32], "prime" = 4611686018427388181 : i64, "hash_id" = 1844024195090879880 : i64, "base_typ" = !llvm.struct<(i32)>, "size_fn" = "_size_Integer2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Animal", "methods" = [@Animal_field_age, @Animal_field_hp, @Animal_field_skill, @Animal_B_init_agePtri32_hpPtrf64_skillPtri32, @Animal_B_say_age_, @Animal_B_say_skill_, @Animal_B_say_messagePtri32, @Animal_B_do_nothing_, @Animal_init_agePtri32_hpPtrf64_skillPtri32, @Animal_say_age_, @Animal_say_skill_, @Animal_say_messagePtri32, @Animal_do_nothing_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Animal], "offset_tbl" = [22 : i32, 0 : i32, 9 : i32, 9 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 1075018126824711487 : i64, "base_typ" = !llvm.struct<(i32, f64, i32)>, "size_fn" = "_size_Animal", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Beaver", "methods" = [@Beaver_field_color, @Beaver_field_name, @Beaver_B_init_colorPtri32_namePtrf64, @Beaver_B__ADD_xPtri32, @Beaver_B_say_color_, @Beaver_init_colorPtri32_namePtrf64, @Beaver__ADD_xPtri32, @Beaver_say_color_], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @Beaver], "offset_tbl" = [0 : i32, 17 : i32, 9 : i32, 9 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 12321971123808713154 : i64, "base_typ" = !llvm.struct<(i32, f64)>, "size_fn" = "_size_Beaver", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ListNode", "methods" = [@ListNode_field_data, @ListNode_field_next, @ListNode_B_init_dataPtri32, @ListNode_B_push_nextListNode, @ListNode_B_next_, @ListNode_B_data_, @ListNode_B_iterator_, @ListNode_init_dataPtri32, @ListNode_push_nextListNode, @ListNode_next_, @ListNode_data_, @ListNode_iterator_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @ListNode], "offset_tbl" = [21 : i32, 9 : i32, 0 : i32, 9 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 16690719123176460140 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "size_fn" = "_size_ListNode", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ListIterator", "methods" = [@ListIterator_field_node, @ListIterator_B_init_nodeListNode, @ListIterator_B_next_, @ListIterator_init_nodeListNode, @ListIterator_next_], "hash_tbl" = [@Object, @any_typ, @ListIterator, 18446744073709551615 : i64], "offset_tbl" = [14 : i32, 9 : i32, 9 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 12608044127096990237 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "size_fn" = "_size_ListIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Bard", "methods" = [@Bard_B_init_, @Bard_B_take_aAnimal_bBeaver_take_aPtri32_bPtrf64_take_aPtrf64_bPtrf64_take_aPtri32_bPtri32, @Bard_init_, @Bard_take_aAnimal_bBeaver, @Bard_take_aPtri32_bPtrf64, @Bard_take_aPtrf64_bPtrf64, @Bard_take_aPtri32_bPtri32], "hash_tbl" = [@Object, @any_typ, @Bard, 18446744073709551615 : i64], "offset_tbl" = [16 : i32, 9 : i32, 9 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 10466828736622358523 : i64, "base_typ" = !llvm.struct<()>, "size_fn" = "_size_Bard", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default"} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Iterator", "types" = []} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Iterable", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.ptr):
    %2 = "mini.invariant"(%1) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1] : () -> ()
  ^bb1:
    %4 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%4, %3) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb2] : () -> ()
  ^bb2:
    %5 = "llvm.extractvalue"(%0) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6 = "llvm.load"(%3) : (!llvm.ptr) -> i32
    %7 = "llvm.getelementptr"(%5, %6) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9 = "llvm.getelementptr"(%7, %8) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Representable", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb3(%10 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12 : !llvm.ptr):
    %13 = "mini.wrap"(%10) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Representable">
    %14 = "mini.to_fat_ptr"(%13) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Representable", "to_typ_name" = "Representable", "invariant"} : (!mini.fatptr<"Representable">) -> !mini.fatptr<"Representable">
    %15 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %16 = "mini.create_buffer"(%15) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %17 = builtin.unrealized_conversion_cast %16 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %18 = "mini.refer"(%17) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %19 = "mini.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "Object"} : () -> !llvm.ptr
    %20 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%18, %20, %19) {"typ" = !llvm.array<6 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %21 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %22 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %23 = "mini.unwrap"(%18) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %24 = "mini.unwrap"(%21) : (!mini.ptr<i32>) -> i32
    %25 = "mini.unwrap"(%22) : (!mini.ptr<i32>) -> i32
    %26 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %27 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %28 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %29 = builtin.unrealized_conversion_cast %18 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %30 = "mini.unwrap"(%29) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %31 = builtin.unrealized_conversion_cast %27 : !mini.ptr<i32> to !mini.ptr<i32>
    %32 = "mini.unwrap"(%31) : (!mini.ptr<i32>) -> i32
    %33 = builtin.unrealized_conversion_cast %28 : !mini.ptr<i32> to !mini.ptr<i32>
    %34 = "mini.unwrap"(%33) : (!mini.ptr<i32>) -> i32
    %35 = "mini.unwrap"(%26) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %36 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %37 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %38 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %39 = "mini.parameterizations_array"(%36, %37, %38) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%39, %35, %30, %32, %34) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %40 = "mini.to_fat_ptr"(%26) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%40) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "Representable_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb4(%41 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %42 : !llvm.ptr):
    %43 = "mini.invariant"(%42) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %44 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb5] : () -> ()
  ^bb5:
    %45 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%45, %44) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb6] : () -> ()
  ^bb6:
    %46 = "llvm.extractvalue"(%41) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %47 = "llvm.load"(%44) : (!llvm.ptr) -> i32
    %48 = "llvm.getelementptr"(%46, %47) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %49 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %50 = "llvm.getelementptr"(%48, %49) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%50) : (!llvm.ptr) -> ()
  }) {"func_name" = "Representable_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_String", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "String_getter_bytes", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferPtri8"} : () -> ()
  "mini.setter_def"() {"meth_name" = "String_setter_bytes", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferPtri8"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "String_field_bytes", "getter_name" = "String_getter_bytes", "setter_name" = "String_setter_bytes"} : () -> ()
  "mini.getter_def"() {"meth_name" = "String_getter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "String_setter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "String_field_length", "getter_name" = "String_getter_length", "setter_name" = "String_setter_length"} : () -> ()
  "mini.getter_def"() {"meth_name" = "String_getter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "String_setter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "String_field_capacity", "getter_name" = "String_getter_capacity", "setter_name" = "String_setter_capacity"} : () -> ()
  "mini.func"() ({
  ^bb7(%51 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %52 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %53 : !llvm.ptr):
    %54 = "mini.wrap"(%51) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %55 = "mini.to_fat_ptr"(%54) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %56 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %57 = "mini.create_buffer"(%56) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %58 = builtin.unrealized_conversion_cast %57 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    "mini.set_field"(%55, %58) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">, !mini.buffer<!mini.ptr<i8>>) -> ()
    %59 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %60 = builtin.unrealized_conversion_cast %59 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%55, %60) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %61 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %62 = builtin.unrealized_conversion_cast %61 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%55, %62) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "String_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb8(%63 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %64 : !llvm.ptr):
    %65 = "mini.invariant"(%64) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %66 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb9] : () -> ()
  ^bb9:
    %67 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%67, %66) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb10] : () -> ()
  ^bb10:
    %68 = "llvm.extractvalue"(%63) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %69 = "llvm.load"(%66) : (!llvm.ptr) -> i32
    %70 = "llvm.getelementptr"(%68, %69) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %71 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %72 = "llvm.getelementptr"(%70, %71) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%72) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb11(%73 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %74 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %75 : !llvm.ptr, %76 : !llvm.struct<(!llvm.ptr)>, %77 : i32, %78 : i32):
    %79 = "mini.wrap"(%73) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %80 = "mini.to_fat_ptr"(%79) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %81 = "mini.wrap"(%76) : (!llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i8>>
    %82 = builtin.unrealized_conversion_cast %81 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %83 = builtin.unrealized_conversion_cast %82 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    "mini.set_field"(%80, %83) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">, !mini.buffer<!mini.ptr<i8>>) -> ()
    %84 = "mini.wrap"(%77) : (i32) -> !mini.ptr<i32>
    %85 = builtin.unrealized_conversion_cast %84 : !mini.ptr<i32> to !mini.ptr<i32>
    %86 = builtin.unrealized_conversion_cast %85 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%80, %86) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %87 = "mini.wrap"(%78) : (i32) -> !mini.ptr<i32>
    %88 = builtin.unrealized_conversion_cast %87 : !mini.ptr<i32> to !mini.ptr<i32>
    %89 = builtin.unrealized_conversion_cast %88 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%80, %89) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb12(%90 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %91 : !llvm.ptr):
    %92 = "mini.invariant"(%91) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %93 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb13] : () -> ()
  ^bb14:
    %94 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%94, %93) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb15] : () -> ()
  ^bb16:
    %95 = "llvm.getelementptr"(%91) <{"rawConstantIndices" = array<i32: 0, 2>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %96 = "llvm.load"(%95) : (!llvm.ptr) -> !llvm.ptr
    %97 = "llvm.getelementptr"(%96) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %98 = "llvm.getelementptr"(%96) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %99 = "llvm.getelementptr"(%96) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %100 = "llvm.getelementptr"(%96) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %101 = "llvm.load"(%97) : (!llvm.ptr) -> i64
    %102 = "llvm.load"(%98) : (!llvm.ptr) -> i64
    %103 = "llvm.load"(%99) : (!llvm.ptr) -> !llvm.ptr
    %104 = "llvm.load"(%100) : (!llvm.ptr) -> !llvm.ptr
    %105 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %106 = "llvm.ptrtoint"(%105) : (!llvm.ptr) -> i64
    %107 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %108 = "mini.subtype"(%103, %102, %101, %107, %106, %104) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%108) [^bb14, ^bb14] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb17:
    %109 = "llvm.getelementptr"(%91) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %110 = "llvm.load"(%109) : (!llvm.ptr) -> !llvm.ptr
    %111 = "llvm.getelementptr"(%110) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %112 = "llvm.getelementptr"(%110) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %113 = "llvm.getelementptr"(%110) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %114 = "llvm.getelementptr"(%110) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %115 = "llvm.load"(%111) : (!llvm.ptr) -> i64
    %116 = "llvm.load"(%112) : (!llvm.ptr) -> i64
    %117 = "llvm.load"(%113) : (!llvm.ptr) -> !llvm.ptr
    %118 = "llvm.load"(%114) : (!llvm.ptr) -> !llvm.ptr
    %119 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %120 = "llvm.ptrtoint"(%119) : (!llvm.ptr) -> i64
    %121 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %122 = "mini.subtype"(%117, %116, %115, %121, %120, %118) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%122) [^bb16, ^bb16] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb13:
    %123 = "llvm.getelementptr"(%91) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %124 = "llvm.load"(%123) : (!llvm.ptr) -> !llvm.ptr
    %125 = "llvm.getelementptr"(%124) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %126 = "llvm.getelementptr"(%124) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %127 = "llvm.getelementptr"(%124) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %128 = "llvm.getelementptr"(%124) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %129 = "llvm.load"(%125) : (!llvm.ptr) -> i64
    %130 = "llvm.load"(%126) : (!llvm.ptr) -> i64
    %131 = "llvm.load"(%127) : (!llvm.ptr) -> !llvm.ptr
    %132 = "llvm.load"(%128) : (!llvm.ptr) -> !llvm.ptr
    %133 = "mini.addr_of"() {"global_name" = @buffer_typ} : () -> !llvm.ptr
    %134 = "llvm.ptrtoint"(%133) : (!llvm.ptr) -> i64
    %135 = "llvm.mlir.constant"() <{"value" = 18128551326514141379 : i64}> : () -> i64
    %136 = "mini.subtype"(%131, %130, %129, %135, %134, %132) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%136) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb15:
    %137 = "llvm.extractvalue"(%90) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %138 = "llvm.load"(%93) : (!llvm.ptr) -> i32
    %139 = "llvm.getelementptr"(%137, %138) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %140 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %141 = "llvm.getelementptr"(%139, %140) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%141) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb18(%142 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %143 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %144 : !llvm.ptr):
    %145 = "mini.wrap"(%142) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %146 = "mini.to_fat_ptr"(%145) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %147 = "mini.get_field"(%146) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %148 = builtin.unrealized_conversion_cast %147 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%148) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "String_length_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb19(%149 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %150 : !llvm.ptr):
    %151 = "mini.invariant"(%150) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %152 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb20] : () -> ()
  ^bb20:
    %153 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%153, %152) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb21] : () -> ()
  ^bb21:
    %154 = "llvm.extractvalue"(%149) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %155 = "llvm.load"(%152) : (!llvm.ptr) -> i32
    %156 = "llvm.getelementptr"(%154, %155) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %157 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %158 = "llvm.getelementptr"(%156, %157) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%158) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_length_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb22(%159 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %160 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %161 : !llvm.ptr):
    %162 = "mini.wrap"(%159) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %163 = "mini.to_fat_ptr"(%162) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %164 = "mini.get_field"(%163) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %165 = builtin.unrealized_conversion_cast %164 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%165) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "String_capacity_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb23(%166 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %167 : !llvm.ptr):
    %168 = "mini.invariant"(%167) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %169 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb24] : () -> ()
  ^bb24:
    %170 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%170, %169) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb25] : () -> ()
  ^bb25:
    %171 = "llvm.extractvalue"(%166) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %172 = "llvm.load"(%169) : (!llvm.ptr) -> i32
    %173 = "llvm.getelementptr"(%171, %172) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %174 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %175 = "llvm.getelementptr"(%173, %174) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%175) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb26(%176 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %177 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %178 : !llvm.ptr):
    %179 = "mini.wrap"(%176) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %180 = "mini.to_fat_ptr"(%179) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %181 = "mini.get_field"(%180) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %182 = builtin.unrealized_conversion_cast %181 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    "mini.return"(%182) : (!mini.buffer<!mini.ptr<i8>>) -> ()
  }) {"func_name" = "String_bytes_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb27(%183 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %184 : !llvm.ptr):
    %185 = "mini.invariant"(%184) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %186 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb28] : () -> ()
  ^bb28:
    %187 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%187, %186) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb29] : () -> ()
  ^bb29:
    %188 = "llvm.extractvalue"(%183) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %189 = "llvm.load"(%186) : (!llvm.ptr) -> i32
    %190 = "llvm.getelementptr"(%188, %189) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %191 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %192 = "llvm.getelementptr"(%190, %191) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%192) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_bytes_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb30(%193 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %194 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %195 : !llvm.ptr, %196 : i8):
    %197 = "mini.wrap"(%193) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %198 = "mini.to_fat_ptr"(%197) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %199 = "mini.wrap"(%196) : (i8) -> !mini.ptr<i8>
    %200 = builtin.unrealized_conversion_cast %199 : !mini.ptr<i8> to !mini.ptr<i8>
    %201 = "mini.get_field"(%198) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %202 = "mini.get_field"(%198) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %203 = "mini.unwrap"(%201) : (!mini.ptr<i32>) -> i32
    %204 = "mini.unwrap"(%202) : (!mini.ptr<i32>) -> i32
    %205 = "mini.comparison"(%203, %204) {"op" = "LT"} : (i32, i32) -> i1
    %206 = "mini.wrap"(%205) : (i1) -> !mini.ptr<i32>
    %207 = "mini.unwrap"(%206) : (!mini.ptr<i32>) -> i1
    "mini.if"(%207) ({
      %208 = "mini.get_field"(%198) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %209 = "mini.get_field"(%198) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %210 = builtin.unrealized_conversion_cast %200 : !mini.ptr<i8> to !mini.ptr<i8>
      "mini.buffer_set"(%208, %209, %210) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %211 = "mini.get_field"(%198) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %212 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %213 = "mini.unwrap"(%211) : (!mini.ptr<i32>) -> i32
      %214 = "mini.unwrap"(%212) : (!mini.ptr<i32>) -> i32
      %215 = "mini.arithmetic"(%213, %214) {"op" = "ADD"} : (i32, i32) -> i32
      %216 = "mini.wrap"(%215) : (i32) -> !mini.ptr<i32>
      %217 = builtin.unrealized_conversion_cast %216 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.set_field"(%198, %217) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
      %218 = "mini.to_fat_ptr"(%198) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      "mini.return"(%218) : (!mini.fatptr<"String">) -> ()
    }) : (i1) -> ()
    %219 = "mini.get_field"(%198) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %220 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %221 = "mini.unwrap"(%219) : (!mini.ptr<i32>) -> i32
    %222 = "mini.unwrap"(%220) : (!mini.ptr<i32>) -> i32
    %223 = "mini.arithmetic"(%221, %222) {"op" = "MUL"} : (i32, i32) -> i32
    %224 = "mini.wrap"(%223) : (i32) -> !mini.ptr<i32>
    %225 = builtin.unrealized_conversion_cast %224 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%198, %225) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %226 = "mini.get_field"(%198) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %227 = builtin.unrealized_conversion_cast %226 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %228 = "mini.refer"(%227) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %229 = "mini.get_field"(%198) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %230 = "mini.create_buffer"(%229) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %231 = builtin.unrealized_conversion_cast %230 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    "mini.set_field"(%198, %231) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">, !mini.buffer<!mini.ptr<i8>>) -> ()
    %232 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %233 = "mini.get_field"(%198) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %234 = "mini.unwrap"(%232) : (!mini.ptr<i32>) -> i32
      %235 = "mini.unwrap"(%233) : (!mini.ptr<i32>) -> i32
      %236 = "mini.comparison"(%234, %235) {"op" = "LT"} : (i32, i32) -> i1
      %237 = "mini.wrap"(%236) : (i1) -> !mini.ptr<i32>
      %238 = "mini.unwrap"(%237) : (!mini.ptr<i32>) -> i1
    }, {
      %239 = "mini.buffer_get"(%228, %232) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %240 = "mini.get_field"(%198) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %241 = builtin.unrealized_conversion_cast %239 : !mini.ptr<i8> to !mini.ptr<i8>
      "mini.buffer_set"(%240, %232, %241) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %242 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %243 = "mini.unwrap"(%232) : (!mini.ptr<i32>) -> i32
      %244 = "mini.unwrap"(%242) : (!mini.ptr<i32>) -> i32
      %245 = "mini.arithmetic"(%243, %244) {"op" = "ADD"} : (i32, i32) -> i32
      %246 = "mini.wrap"(%245) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%232, %246) ({
        %247 = builtin.unrealized_conversion_cast %246 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %248 = "mini.get_field"(%198) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %249 = "mini.get_field"(%198) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %250 = builtin.unrealized_conversion_cast %200 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.buffer_set"(%248, %249, %250) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
    %251 = "mini.get_field"(%198) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %252 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %253 = "mini.unwrap"(%251) : (!mini.ptr<i32>) -> i32
    %254 = "mini.unwrap"(%252) : (!mini.ptr<i32>) -> i32
    %255 = "mini.arithmetic"(%253, %254) {"op" = "ADD"} : (i32, i32) -> i32
    %256 = "mini.wrap"(%255) : (i32) -> !mini.ptr<i32>
    %257 = builtin.unrealized_conversion_cast %256 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%198, %257) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %258 = "mini.to_fat_ptr"(%198) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%258) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_append_xPtri8", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb31(%259 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %260 : !llvm.ptr):
    %261 = "mini.invariant"(%260) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %262 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb32] : () -> ()
  ^bb33:
    %263 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%263, %262) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb34] : () -> ()
  ^bb32:
    %264 = "llvm.getelementptr"(%260) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %265 = "llvm.load"(%264) : (!llvm.ptr) -> !llvm.ptr
    %266 = "llvm.getelementptr"(%265) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %267 = "llvm.getelementptr"(%265) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %268 = "llvm.getelementptr"(%265) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %269 = "llvm.getelementptr"(%265) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %270 = "llvm.load"(%266) : (!llvm.ptr) -> i64
    %271 = "llvm.load"(%267) : (!llvm.ptr) -> i64
    %272 = "llvm.load"(%268) : (!llvm.ptr) -> !llvm.ptr
    %273 = "llvm.load"(%269) : (!llvm.ptr) -> !llvm.ptr
    %274 = "mini.addr_of"() {"global_name" = @i8_typ} : () -> !llvm.ptr
    %275 = "llvm.ptrtoint"(%274) : (!llvm.ptr) -> i64
    %276 = "llvm.mlir.constant"() <{"value" = 2582149688529881115 : i64}> : () -> i64
    %277 = "mini.subtype"(%272, %271, %270, %276, %275, %273) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%277) [^bb33, ^bb33] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb34:
    %278 = "llvm.extractvalue"(%259) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %279 = "llvm.load"(%262) : (!llvm.ptr) -> i32
    %280 = "llvm.getelementptr"(%278, %279) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %281 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %282 = "llvm.getelementptr"(%280, %281) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%282) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_append_xPtri8", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb35(%283 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %284 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %285 : !llvm.ptr, %286 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %287 = "mini.wrap"(%283) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %288 = "mini.to_fat_ptr"(%287) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %289 = "mini.wrap"(%286) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %290 = "mini.to_fat_ptr"(%289) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %291 = "mini.unwrap"(%290) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %292 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %293 = "mini.method_call"(%292, %291) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %294 = builtin.unrealized_conversion_cast %293 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %295 = builtin.unrealized_conversion_cast %294 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %296 = "mini.refer"(%295) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %297 = "mini.unwrap"(%290) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %298 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %299 = "mini.method_call"(%298, %297) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %300 = builtin.unrealized_conversion_cast %299 : !mini.ptr<i32> to !mini.ptr<i32>
    %301 = "mini.get_field"(%288) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %302 = "mini.unwrap"(%301) : (!mini.ptr<i32>) -> i32
    %303 = "mini.unwrap"(%300) : (!mini.ptr<i32>) -> i32
    %304 = "mini.arithmetic"(%302, %303) {"op" = "ADD"} : (i32, i32) -> i32
    %305 = "mini.wrap"(%304) : (i32) -> !mini.ptr<i32>
    %306 = "mini.get_field"(%288) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %307 = "mini.unwrap"(%305) : (!mini.ptr<i32>) -> i32
    %308 = "mini.unwrap"(%306) : (!mini.ptr<i32>) -> i32
    %309 = "mini.comparison"(%307, %308) {"op" = "LT"} : (i32, i32) -> i1
    %310 = "mini.wrap"(%309) : (i1) -> !mini.ptr<i32>
    %311 = "mini.unwrap"(%310) : (!mini.ptr<i32>) -> i1
    "mini.if"(%311) ({
      %312 = "mini.get_field"(%288) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %313 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      "mini.while"() ({
        %314 = "mini.get_field"(%288) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
        %315 = "mini.unwrap"(%314) : (!mini.ptr<i32>) -> i32
        %316 = "mini.unwrap"(%300) : (!mini.ptr<i32>) -> i32
        %317 = "mini.arithmetic"(%315, %316) {"op" = "ADD"} : (i32, i32) -> i32
        %318 = "mini.wrap"(%317) : (i32) -> !mini.ptr<i32>
        %319 = "mini.unwrap"(%312) : (!mini.ptr<i32>) -> i32
        %320 = "mini.unwrap"(%318) : (!mini.ptr<i32>) -> i32
        %321 = "mini.comparison"(%319, %320) {"op" = "LT"} : (i32, i32) -> i1
        %322 = "mini.wrap"(%321) : (i1) -> !mini.ptr<i32>
        %323 = "mini.unwrap"(%322) : (!mini.ptr<i32>) -> i1
      }, {
        %324 = "mini.buffer_get"(%296, %313) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
        %325 = "mini.get_field"(%288) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
        %326 = builtin.unrealized_conversion_cast %324 : !mini.ptr<i8> to !mini.ptr<i8>
        "mini.buffer_set"(%325, %312, %326) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
        %327 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %328 = "mini.unwrap"(%312) : (!mini.ptr<i32>) -> i32
        %329 = "mini.unwrap"(%327) : (!mini.ptr<i32>) -> i32
        %330 = "mini.arithmetic"(%328, %329) {"op" = "ADD"} : (i32, i32) -> i32
        %331 = "mini.wrap"(%330) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%312, %331) ({
          %332 = builtin.unrealized_conversion_cast %331 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        %333 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %334 = "mini.unwrap"(%313) : (!mini.ptr<i32>) -> i32
        %335 = "mini.unwrap"(%333) : (!mini.ptr<i32>) -> i32
        %336 = "mini.arithmetic"(%334, %335) {"op" = "ADD"} : (i32, i32) -> i32
        %337 = "mini.wrap"(%336) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%313, %337) ({
          %338 = builtin.unrealized_conversion_cast %337 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      }) : () -> ()
      %339 = "mini.get_field"(%288) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %340 = "mini.unwrap"(%339) : (!mini.ptr<i32>) -> i32
      %341 = "mini.unwrap"(%300) : (!mini.ptr<i32>) -> i32
      %342 = "mini.arithmetic"(%340, %341) {"op" = "ADD"} : (i32, i32) -> i32
      %343 = "mini.wrap"(%342) : (i32) -> !mini.ptr<i32>
      %344 = builtin.unrealized_conversion_cast %343 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.set_field"(%288, %344) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
      %345 = "mini.to_fat_ptr"(%288) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      "mini.return"(%345) : (!mini.fatptr<"String">) -> ()
    }) : (i1) -> ()
    %346 = "mini.get_field"(%288) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %347 = "mini.unwrap"(%346) : (!mini.ptr<i32>) -> i32
    %348 = "mini.unwrap"(%300) : (!mini.ptr<i32>) -> i32
    %349 = "mini.arithmetic"(%347, %348) {"op" = "ADD"} : (i32, i32) -> i32
    %350 = "mini.wrap"(%349) : (i32) -> !mini.ptr<i32>
    %351 = builtin.unrealized_conversion_cast %350 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%288, %351) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %352 = "mini.get_field"(%288) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %353 = builtin.unrealized_conversion_cast %352 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %354 = "mini.refer"(%353) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %355 = "mini.get_field"(%288) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %356 = "mini.create_buffer"(%355) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %357 = builtin.unrealized_conversion_cast %356 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    "mini.set_field"(%288, %357) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">, !mini.buffer<!mini.ptr<i8>>) -> ()
    %358 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %359 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %360 = "mini.get_field"(%288) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %361 = "mini.unwrap"(%360) : (!mini.ptr<i32>) -> i32
      %362 = "mini.unwrap"(%300) : (!mini.ptr<i32>) -> i32
      %363 = "mini.arithmetic"(%361, %362) {"op" = "ADD"} : (i32, i32) -> i32
      %364 = "mini.wrap"(%363) : (i32) -> !mini.ptr<i32>
      %365 = "mini.unwrap"(%358) : (!mini.ptr<i32>) -> i32
      %366 = "mini.unwrap"(%364) : (!mini.ptr<i32>) -> i32
      %367 = "mini.comparison"(%365, %366) {"op" = "LT"} : (i32, i32) -> i1
      %368 = "mini.wrap"(%367) : (i1) -> !mini.ptr<i32>
      %369 = "mini.unwrap"(%368) : (!mini.ptr<i32>) -> i1
    }, {
      %370 = "mini.get_field"(%288) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %371 = "mini.unwrap"(%358) : (!mini.ptr<i32>) -> i32
      %372 = "mini.unwrap"(%370) : (!mini.ptr<i32>) -> i32
      %373 = "mini.comparison"(%371, %372) {"op" = "LT"} : (i32, i32) -> i1
      %374 = "mini.wrap"(%373) : (i1) -> !mini.ptr<i32>
      %375 = "mini.unwrap"(%374) : (!mini.ptr<i32>) -> i1
      "mini.if"(%375) ({
        %376 = "mini.buffer_get"(%354, %358) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
        %377 = "mini.get_field"(%288) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
        %378 = builtin.unrealized_conversion_cast %376 : !mini.ptr<i8> to !mini.ptr<i8>
        "mini.buffer_set"(%377, %358, %378) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
        %379 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %380 = "mini.unwrap"(%358) : (!mini.ptr<i32>) -> i32
        %381 = "mini.unwrap"(%379) : (!mini.ptr<i32>) -> i32
        %382 = "mini.arithmetic"(%380, %381) {"op" = "ADD"} : (i32, i32) -> i32
        %383 = "mini.wrap"(%382) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%358, %383) ({
          %384 = builtin.unrealized_conversion_cast %383 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        "mini.continue"() [^bb36] : () -> ()
      }) : (i1) -> ()
      %385 = "mini.buffer_get"(%296, %359) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %386 = "mini.get_field"(%288) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %387 = builtin.unrealized_conversion_cast %385 : !mini.ptr<i8> to !mini.ptr<i8>
      "mini.buffer_set"(%386, %358, %387) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %388 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %389 = "mini.unwrap"(%358) : (!mini.ptr<i32>) -> i32
      %390 = "mini.unwrap"(%388) : (!mini.ptr<i32>) -> i32
      %391 = "mini.arithmetic"(%389, %390) {"op" = "ADD"} : (i32, i32) -> i32
      %392 = "mini.wrap"(%391) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%358, %392) ({
        %393 = builtin.unrealized_conversion_cast %392 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %394 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %395 = "mini.unwrap"(%359) : (!mini.ptr<i32>) -> i32
      %396 = "mini.unwrap"(%394) : (!mini.ptr<i32>) -> i32
      %397 = "mini.arithmetic"(%395, %396) {"op" = "ADD"} : (i32, i32) -> i32
      %398 = "mini.wrap"(%397) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%359, %398) ({
        %399 = builtin.unrealized_conversion_cast %398 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %400 = "mini.get_field"(%288) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %401 = "mini.unwrap"(%400) : (!mini.ptr<i32>) -> i32
    %402 = "mini.unwrap"(%300) : (!mini.ptr<i32>) -> i32
    %403 = "mini.arithmetic"(%401, %402) {"op" = "ADD"} : (i32, i32) -> i32
    %404 = "mini.wrap"(%403) : (i32) -> !mini.ptr<i32>
    %405 = builtin.unrealized_conversion_cast %404 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%288, %405) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %406 = "mini.to_fat_ptr"(%288) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%406) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_extend_strString", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb37(%407 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %408 : !llvm.ptr):
    %409 = "mini.invariant"(%408) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %410 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb38] : () -> ()
  ^bb39:
    %411 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%411, %410) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb40] : () -> ()
  ^bb38:
    %412 = "llvm.getelementptr"(%408) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %413 = "llvm.load"(%412) : (!llvm.ptr) -> !llvm.ptr
    %414 = "llvm.getelementptr"(%413) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %415 = "llvm.getelementptr"(%413) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %416 = "llvm.getelementptr"(%413) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %417 = "llvm.getelementptr"(%413) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %418 = "llvm.load"(%414) : (!llvm.ptr) -> i64
    %419 = "llvm.load"(%415) : (!llvm.ptr) -> i64
    %420 = "llvm.load"(%416) : (!llvm.ptr) -> !llvm.ptr
    %421 = "llvm.load"(%417) : (!llvm.ptr) -> !llvm.ptr
    %422 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %423 = "llvm.ptrtoint"(%422) : (!llvm.ptr) -> i64
    %424 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %425 = "mini.subtype"(%420, %419, %418, %424, %423, %421) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%425) [^bb39, ^bb39] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb40:
    %426 = "llvm.extractvalue"(%407) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %427 = "llvm.load"(%410) : (!llvm.ptr) -> i32
    %428 = "llvm.getelementptr"(%426, %427) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %429 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %430 = "llvm.getelementptr"(%428, %429) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%430) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_extend_strString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb41(%431 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %432 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %433 : !llvm.ptr, %434 : i32):
    %435 = "mini.wrap"(%431) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %436 = "mini.to_fat_ptr"(%435) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %437 = "mini.wrap"(%434) : (i32) -> !mini.ptr<i32>
    %438 = builtin.unrealized_conversion_cast %437 : !mini.ptr<i32> to !mini.ptr<i32>
    %439 = "mini.get_field"(%436) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %440 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %441 = "mini.unwrap"(%439) : (!mini.ptr<i32>) -> i32
    %442 = "mini.unwrap"(%440) : (!mini.ptr<i32>) -> i32
    %443 = "mini.arithmetic"(%441, %442) {"op" = "SUB"} : (i32, i32) -> i32
    %444 = "mini.wrap"(%443) : (i32) -> !mini.ptr<i32>
    %445 = "mini.unwrap"(%438) : (!mini.ptr<i32>) -> i32
    %446 = "mini.unwrap"(%444) : (!mini.ptr<i32>) -> i32
    %447 = "mini.comparison"(%445, %446) {"op" = "GT"} : (i32, i32) -> i1
    %448 = "mini.wrap"(%447) : (i1) -> !mini.ptr<i32>
    %449 = "mini.unwrap"(%448) : (!mini.ptr<i32>) -> i1
    "mini.if"(%449) ({
      "mini.coro_yield"() : () -> ()
    }) : (i1) -> ()
    %450 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %451 = "mini.unwrap"(%438) : (!mini.ptr<i32>) -> i32
    %452 = "mini.unwrap"(%450) : (!mini.ptr<i32>) -> i32
    %453 = "mini.comparison"(%451, %452) {"op" = "GE"} : (i32, i32) -> i1
    %454 = "mini.wrap"(%453) : (i1) -> !mini.ptr<i32>
    %455 = "mini.unwrap"(%454) : (!mini.ptr<i32>) -> i1
    "mini.if"(%455) ({
      %456 = "mini.get_field"(%436) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %457 = "mini.buffer_get"(%456, %438) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %458 = builtin.unrealized_conversion_cast %457 : !mini.ptr<i8> to !mini.ptr<i8>
      "mini.return"(%458) : (!mini.ptr<i8>) -> ()
    }) : (i1) -> ()
    %459 = "mini.get_field"(%436) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %460 = "mini.unwrap"(%459) : (!mini.ptr<i32>) -> i32
    %461 = "mini.unwrap"(%438) : (!mini.ptr<i32>) -> i32
    %462 = "mini.arithmetic"(%460, %461) {"op" = "ADD"} : (i32, i32) -> i32
    %463 = "mini.wrap"(%462) : (i32) -> !mini.ptr<i32>
    %464 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %465 = "mini.unwrap"(%463) : (!mini.ptr<i32>) -> i32
    %466 = "mini.unwrap"(%464) : (!mini.ptr<i32>) -> i32
    %467 = "mini.comparison"(%465, %466) {"op" = "LT"} : (i32, i32) -> i1
    %468 = "mini.wrap"(%467) : (i1) -> !mini.ptr<i32>
    %469 = "mini.unwrap"(%468) : (!mini.ptr<i32>) -> i1
    "mini.if"(%469) ({
      "mini.coro_yield"() : () -> ()
    }) : (i1) -> ()
    %470 = "mini.get_field"(%436) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %471 = "mini.get_field"(%436) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %472 = "mini.unwrap"(%471) : (!mini.ptr<i32>) -> i32
    %473 = "mini.unwrap"(%438) : (!mini.ptr<i32>) -> i32
    %474 = "mini.arithmetic"(%472, %473) {"op" = "ADD"} : (i32, i32) -> i32
    %475 = "mini.wrap"(%474) : (i32) -> !mini.ptr<i32>
    %476 = "mini.buffer_get"(%470, %475) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
    %477 = builtin.unrealized_conversion_cast %476 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.return"(%477) : (!mini.ptr<i8>) -> ()
  }) {"func_name" = "String__index_xPtri32", "result_type" = i8, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb42(%478 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %479 : !llvm.ptr):
    %480 = "mini.invariant"(%479) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %481 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb43] : () -> ()
  ^bb44:
    %482 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%482, %481) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb45] : () -> ()
  ^bb43:
    %483 = "llvm.getelementptr"(%479) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %484 = "llvm.load"(%483) : (!llvm.ptr) -> !llvm.ptr
    %485 = "llvm.getelementptr"(%484) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %486 = "llvm.getelementptr"(%484) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %487 = "llvm.getelementptr"(%484) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %488 = "llvm.getelementptr"(%484) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %489 = "llvm.load"(%485) : (!llvm.ptr) -> i64
    %490 = "llvm.load"(%486) : (!llvm.ptr) -> i64
    %491 = "llvm.load"(%487) : (!llvm.ptr) -> !llvm.ptr
    %492 = "llvm.load"(%488) : (!llvm.ptr) -> !llvm.ptr
    %493 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %494 = "llvm.ptrtoint"(%493) : (!llvm.ptr) -> i64
    %495 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %496 = "mini.subtype"(%491, %490, %489, %495, %494, %492) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%496) [^bb44, ^bb44] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb45:
    %497 = "llvm.extractvalue"(%478) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %498 = "llvm.load"(%481) : (!llvm.ptr) -> i32
    %499 = "llvm.getelementptr"(%497, %498) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %500 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %501 = "llvm.getelementptr"(%499, %500) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%501) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B__index_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb46(%502 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %503 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %504 : !llvm.ptr, %505 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %506 = "mini.wrap"(%502) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %507 = "mini.to_fat_ptr"(%506) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %508 = "mini.wrap"(%505) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %509 = "mini.to_fat_ptr"(%508) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %510 = "mini.get_field"(%507) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %511 = "mini.unwrap"(%509) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %512 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %513 = "mini.method_call"(%512, %511) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %514 = builtin.unrealized_conversion_cast %513 : !mini.ptr<i32> to !mini.ptr<i32>
    %515 = "mini.unwrap"(%510) : (!mini.ptr<i32>) -> i32
    %516 = "mini.unwrap"(%514) : (!mini.ptr<i32>) -> i32
    %517 = "mini.comparison"(%515, %516) {"op" = "NEQ"} : (i32, i32) -> i1
    %518 = "mini.wrap"(%517) : (i1) -> !mini.ptr<i32>
    %519 = "mini.unwrap"(%518) : (!mini.ptr<i32>) -> i1
    "mini.if"(%519) ({
      %520 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %521 = builtin.unrealized_conversion_cast %520 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.return"(%521) : (!mini.ptr<i1>) -> ()
    }) : (i1) -> ()
    %522 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %523 = "mini.get_field"(%507) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %524 = "mini.unwrap"(%522) : (!mini.ptr<i32>) -> i32
      %525 = "mini.unwrap"(%523) : (!mini.ptr<i32>) -> i32
      %526 = "mini.comparison"(%524, %525) {"op" = "LT"} : (i32, i32) -> i1
      %527 = "mini.wrap"(%526) : (i1) -> !mini.ptr<i32>
      %528 = "mini.unwrap"(%527) : (!mini.ptr<i32>) -> i1
    }, {
      %529 = "mini.get_field"(%507) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %530 = "mini.buffer_get"(%529, %522) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %531 = "mini.unwrap"(%509) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %532 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %533 = "mini.method_call"(%532, %531) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %534 = builtin.unrealized_conversion_cast %533 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %535 = "mini.buffer_get"(%534, %522) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %536 = "mini.unwrap"(%530) : (!mini.ptr<i8>) -> i8
      %537 = "mini.unwrap"(%535) : (!mini.ptr<i8>) -> i8
      %538 = "mini.comparison"(%536, %537) {"op" = "NEQ"} : (i8, i8) -> i1
      %539 = "mini.wrap"(%538) : (i1) -> !mini.ptr<i8>
      %540 = "mini.unwrap"(%539) : (!mini.ptr<i8>) -> i1
      "mini.if"(%540) ({
        %541 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
        %542 = builtin.unrealized_conversion_cast %541 : !mini.ptr<i1> to !mini.ptr<i1>
        "mini.return"(%542) : (!mini.ptr<i1>) -> ()
      }) : (i1) -> ()
      %543 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %544 = "mini.unwrap"(%522) : (!mini.ptr<i32>) -> i32
      %545 = "mini.unwrap"(%543) : (!mini.ptr<i32>) -> i32
      %546 = "mini.arithmetic"(%544, %545) {"op" = "ADD"} : (i32, i32) -> i32
      %547 = "mini.wrap"(%546) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%522, %547) ({
        %548 = builtin.unrealized_conversion_cast %547 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %549 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %550 = builtin.unrealized_conversion_cast %549 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%550) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "String__EQ_otherString", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb47(%551 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %552 : !llvm.ptr):
    %553 = "mini.invariant"(%552) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %554 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb48] : () -> ()
  ^bb49:
    %555 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%555, %554) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb50] : () -> ()
  ^bb48:
    %556 = "llvm.getelementptr"(%552) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %557 = "llvm.load"(%556) : (!llvm.ptr) -> !llvm.ptr
    %558 = "llvm.getelementptr"(%557) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %559 = "llvm.getelementptr"(%557) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %560 = "llvm.getelementptr"(%557) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %561 = "llvm.getelementptr"(%557) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %562 = "llvm.load"(%558) : (!llvm.ptr) -> i64
    %563 = "llvm.load"(%559) : (!llvm.ptr) -> i64
    %564 = "llvm.load"(%560) : (!llvm.ptr) -> !llvm.ptr
    %565 = "llvm.load"(%561) : (!llvm.ptr) -> !llvm.ptr
    %566 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %567 = "llvm.ptrtoint"(%566) : (!llvm.ptr) -> i64
    %568 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %569 = "mini.subtype"(%564, %563, %562, %568, %567, %565) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%569) [^bb49, ^bb49] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb50:
    %570 = "llvm.extractvalue"(%551) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %571 = "llvm.load"(%554) : (!llvm.ptr) -> i32
    %572 = "llvm.getelementptr"(%570, %571) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %573 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %574 = "llvm.getelementptr"(%572, %573) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%574) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B__EQ_otherString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb51(%575 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %576 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %577 : !llvm.ptr):
    %578 = "mini.wrap"(%575) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %579 = "mini.to_fat_ptr"(%578) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %580 = "mini.get_field"(%579) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %581 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %582 = "mini.unwrap"(%580) : (!mini.ptr<i32>) -> i32
    %583 = "mini.unwrap"(%581) : (!mini.ptr<i32>) -> i32
    %584 = "mini.comparison"(%582, %583) {"op" = "EQ"} : (i32, i32) -> i1
    %585 = "mini.wrap"(%584) : (i1) -> !mini.ptr<i32>
    %586 = "mini.unwrap"(%585) : (!mini.ptr<i32>) -> i1
    "mini.if"(%586) ({
      %587 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %588 = "mini.unionize"(%587) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i8)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
      "mini.return"(%588) : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %589 = "mini.get_field"(%579) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %590 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %591 = "mini.unwrap"(%589) : (!mini.ptr<i32>) -> i32
    %592 = "mini.unwrap"(%590) : (!mini.ptr<i32>) -> i32
    %593 = "mini.arithmetic"(%591, %592) {"op" = "SUB"} : (i32, i32) -> i32
    %594 = "mini.wrap"(%593) : (i32) -> !mini.ptr<i32>
    %595 = builtin.unrealized_conversion_cast %594 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%579, %595) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %596 = "mini.get_field"(%579) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %597 = "mini.get_field"(%579) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %598 = "mini.buffer_get"(%596, %597) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
    %599 = "mini.unionize"(%598) {"from_typ" = i8, "to_typ" = !llvm.struct<(!llvm.ptr, i8)>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i8>) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
    "mini.return"(%599) : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> ()
  }) {"func_name" = "String_pop_", "result_type" = !llvm.struct<(!llvm.ptr, i8)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb52(%600 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %601 : !llvm.ptr):
    %602 = "mini.invariant"(%601) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %603 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb53] : () -> ()
  ^bb53:
    %604 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%604, %603) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb54] : () -> ()
  ^bb54:
    %605 = "llvm.extractvalue"(%600) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %606 = "llvm.load"(%603) : (!llvm.ptr) -> i32
    %607 = "llvm.getelementptr"(%605, %606) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %608 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %609 = "llvm.getelementptr"(%607, %608) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%609) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_pop_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb55(%610 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %611 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %612 : !llvm.ptr):
    %613 = "mini.wrap"(%610) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %614 = "mini.to_fat_ptr"(%613) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %615 = "mini.get_field"(%614) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %616 = "mini.create_buffer"(%615) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %617 = builtin.unrealized_conversion_cast %616 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %618 = "mini.refer"(%617) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %619 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %620 = "mini.get_field"(%614) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %621 = "mini.unwrap"(%619) : (!mini.ptr<i32>) -> i32
      %622 = "mini.unwrap"(%620) : (!mini.ptr<i32>) -> i32
      %623 = "mini.comparison"(%621, %622) {"op" = "LT"} : (i32, i32) -> i1
      %624 = "mini.wrap"(%623) : (i1) -> !mini.ptr<i32>
      %625 = "mini.unwrap"(%624) : (!mini.ptr<i32>) -> i1
    }, {
      %626 = "mini.get_field"(%614) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %627 = "mini.buffer_get"(%626, %619) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %628 = builtin.unrealized_conversion_cast %627 : !mini.ptr<i8> to !mini.ptr<i8>
      "mini.buffer_set"(%618, %619, %628) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %629 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %630 = "mini.unwrap"(%619) : (!mini.ptr<i32>) -> i32
      %631 = "mini.unwrap"(%629) : (!mini.ptr<i32>) -> i32
      %632 = "mini.arithmetic"(%630, %631) {"op" = "ADD"} : (i32, i32) -> i32
      %633 = "mini.wrap"(%632) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%619, %633) ({
        %634 = builtin.unrealized_conversion_cast %633 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %635 = "mini.get_field"(%614) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %636 = "mini.get_field"(%614) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %637 = "mini.unwrap"(%618) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %638 = "mini.unwrap"(%635) : (!mini.ptr<i32>) -> i32
    %639 = "mini.unwrap"(%636) : (!mini.ptr<i32>) -> i32
    %640 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %641 = "mini.get_field"(%614) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %642 = "mini.get_field"(%614) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %643 = builtin.unrealized_conversion_cast %618 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %644 = "mini.unwrap"(%643) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %645 = builtin.unrealized_conversion_cast %641 : !mini.ptr<i32> to !mini.ptr<i32>
    %646 = "mini.unwrap"(%645) : (!mini.ptr<i32>) -> i32
    %647 = builtin.unrealized_conversion_cast %642 : !mini.ptr<i32> to !mini.ptr<i32>
    %648 = "mini.unwrap"(%647) : (!mini.ptr<i32>) -> i32
    %649 = "mini.unwrap"(%640) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %650 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %651 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %652 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %653 = "mini.parameterizations_array"(%650, %651, %652) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%653, %649, %644, %646, %648) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %654 = "mini.to_fat_ptr"(%640) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %655 = "mini.refer"(%654) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %656 = "mini.to_fat_ptr"(%655) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%656) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_copy_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb56(%657 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %658 : !llvm.ptr):
    %659 = "mini.invariant"(%658) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %660 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb57] : () -> ()
  ^bb57:
    %661 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%661, %660) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb58] : () -> ()
  ^bb58:
    %662 = "llvm.extractvalue"(%657) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %663 = "llvm.load"(%660) : (!llvm.ptr) -> i32
    %664 = "llvm.getelementptr"(%662, %663) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %665 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %666 = "llvm.getelementptr"(%664, %665) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%666) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_copy_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb59(%667 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %668 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %669 : !llvm.ptr):
    %670 = "mini.wrap"(%667) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %671 = "mini.to_fat_ptr"(%670) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %672 = "mini.get_field"(%671) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %673 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %674 = "mini.unwrap"(%672) : (!mini.ptr<i32>) -> i32
    %675 = "mini.unwrap"(%673) : (!mini.ptr<i32>) -> i32
    %676 = "mini.arithmetic"(%674, %675) {"op" = "ADD"} : (i32, i32) -> i32
    %677 = "mini.wrap"(%676) : (i32) -> !mini.ptr<i32>
    %678 = "mini.create_buffer"(%677) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %679 = builtin.unrealized_conversion_cast %678 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %680 = "mini.refer"(%679) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %681 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %682 = "mini.get_field"(%671) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %683 = "mini.unwrap"(%681) : (!mini.ptr<i32>) -> i32
      %684 = "mini.unwrap"(%682) : (!mini.ptr<i32>) -> i32
      %685 = "mini.comparison"(%683, %684) {"op" = "LT"} : (i32, i32) -> i1
      %686 = "mini.wrap"(%685) : (i1) -> !mini.ptr<i32>
      %687 = "mini.unwrap"(%686) : (!mini.ptr<i32>) -> i1
    }, {
      %688 = "mini.get_field"(%671) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %689 = "mini.buffer_get"(%688, %681) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %690 = builtin.unrealized_conversion_cast %689 : !mini.ptr<i8> to !mini.ptr<i8>
      "mini.buffer_set"(%680, %681, %690) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %691 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %692 = "mini.unwrap"(%681) : (!mini.ptr<i32>) -> i32
      %693 = "mini.unwrap"(%691) : (!mini.ptr<i32>) -> i32
      %694 = "mini.arithmetic"(%692, %693) {"op" = "ADD"} : (i32, i32) -> i32
      %695 = "mini.wrap"(%694) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%681, %695) ({
        %696 = builtin.unrealized_conversion_cast %695 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %697 = "mini.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %698 = builtin.unrealized_conversion_cast %697 : !mini.ptr<i8> to !mini.ptr<i8>
    %699 = "mini.get_field"(%671) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %700 = builtin.unrealized_conversion_cast %698 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.buffer_set"(%680, %699, %700) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
    %701 = builtin.unrealized_conversion_cast %680 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    "mini.return"(%701) : (!mini.buffer<!mini.ptr<i8>>) -> ()
  }) {"func_name" = "String_c_string_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb60(%702 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %703 : !llvm.ptr):
    %704 = "mini.invariant"(%703) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %705 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb61] : () -> ()
  ^bb61:
    %706 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%706, %705) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb62] : () -> ()
  ^bb62:
    %707 = "llvm.extractvalue"(%702) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %708 = "llvm.load"(%705) : (!llvm.ptr) -> i32
    %709 = "llvm.getelementptr"(%707, %708) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %710 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %711 = "llvm.getelementptr"(%709, %710) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%711) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_c_string_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb63(%712 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %713 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %714 : !llvm.ptr):
    %715 = "mini.wrap"(%712) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %716 = "mini.to_fat_ptr"(%715) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %717 = "mini.unwrap"(%716) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %718 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "StringIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"StringIterator">
    %719 = "mini.to_fat_ptr"(%716) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %720 = "mini.unwrap"(%719) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %721 = "mini.unwrap"(%718) : (!mini.fatptr<"StringIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %722 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %723 = "mini.parameterizations_array"(%722) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%723, %721, %720) {"offset" = 2 : i32, "vptrs" = [#none], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %724 = "mini.to_fat_ptr"(%718) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "StringIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%724) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "String_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb64(%725 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %726 : !llvm.ptr):
    %727 = "mini.invariant"(%726) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %728 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb65] : () -> ()
  ^bb65:
    %729 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
    "llvm.store"(%729, %728) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb66] : () -> ()
  ^bb66:
    %730 = "llvm.extractvalue"(%725) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %731 = "llvm.load"(%728) : (!llvm.ptr) -> i32
    %732 = "llvm.getelementptr"(%730, %731) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %733 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %734 = "llvm.getelementptr"(%732, %733) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%734) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb67(%735 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %736 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %737 : !llvm.ptr):
    %738 = "mini.wrap"(%735) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %739 = "mini.to_fat_ptr"(%738) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %740 = "mini.to_fat_ptr"(%739) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%740) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb68(%741 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %742 : !llvm.ptr):
    %743 = "mini.invariant"(%742) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %744 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb69] : () -> ()
  ^bb69:
    %745 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
    "llvm.store"(%745, %744) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb70] : () -> ()
  ^bb70:
    %746 = "llvm.extractvalue"(%741) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %747 = "llvm.load"(%744) : (!llvm.ptr) -> i32
    %748 = "llvm.getelementptr"(%746, %747) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %749 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %750 = "llvm.getelementptr"(%748, %749) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%750) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Character", "types" = [i8]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Character_getter_byte", "types" = [i8], "offset" = 0 : i64, "original_type" = i8, "specialized_name" = "i8_typ", "parameterization" = "_parameterization_Ptri8"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Character_setter_byte", "types" = [i8], "offset" = 0 : i64, "original_type" = i8, "specialized_name" = "i8_typ", "parameterization" = "_parameterization_Ptri8"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Character_field_byte", "getter_name" = "Character_getter_byte", "setter_name" = "Character_setter_byte"} : () -> ()
  "mini.func"() ({
  ^bb71(%751 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %752 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %753 : !llvm.ptr):
    %754 = "mini.wrap"(%751) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Character">
    %755 = "mini.to_fat_ptr"(%754) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Character", "to_typ_name" = "Character", "invariant"} : (!mini.fatptr<"Character">) -> !mini.fatptr<"Character">
    %756 = "mini.get_field"(%755) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i8} : (!mini.fatptr<"Character">) -> !mini.ptr<i8>
    %757 = builtin.unrealized_conversion_cast %756 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.return"(%757) : (!mini.ptr<i8>) -> ()
  }) {"func_name" = "Character_byte_", "result_type" = i8, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb72(%758 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %759 : !llvm.ptr):
    %760 = "mini.invariant"(%759) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %761 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb73] : () -> ()
  ^bb73:
    %762 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%762, %761) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb74] : () -> ()
  ^bb74:
    %763 = "llvm.extractvalue"(%758) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %764 = "llvm.load"(%761) : (!llvm.ptr) -> i32
    %765 = "llvm.getelementptr"(%763, %764) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %766 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %767 = "llvm.getelementptr"(%765, %766) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%767) : (!llvm.ptr) -> ()
  }) {"func_name" = "Character_B_byte_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb75(%768 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %769 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %770 : !llvm.ptr, %771 : i8):
    %772 = "mini.wrap"(%768) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Character">
    %773 = "mini.to_fat_ptr"(%772) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Character", "to_typ_name" = "Character", "invariant"} : (!mini.fatptr<"Character">) -> !mini.fatptr<"Character">
    %774 = "mini.wrap"(%771) : (i8) -> !mini.ptr<i8>
    %775 = builtin.unrealized_conversion_cast %774 : !mini.ptr<i8> to !mini.ptr<i8>
    %776 = builtin.unrealized_conversion_cast %775 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.set_field"(%773, %776) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i8} : (!mini.fatptr<"Character">, !mini.ptr<i8>) -> ()
  }) {"func_name" = "Character_init_bytePtri8", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb76(%777 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %778 : !llvm.ptr):
    %779 = "mini.invariant"(%778) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %780 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb77] : () -> ()
  ^bb78:
    %781 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%781, %780) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb79] : () -> ()
  ^bb77:
    %782 = "llvm.getelementptr"(%778) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %783 = "llvm.load"(%782) : (!llvm.ptr) -> !llvm.ptr
    %784 = "llvm.getelementptr"(%783) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %785 = "llvm.getelementptr"(%783) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %786 = "llvm.getelementptr"(%783) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %787 = "llvm.getelementptr"(%783) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %788 = "llvm.load"(%784) : (!llvm.ptr) -> i64
    %789 = "llvm.load"(%785) : (!llvm.ptr) -> i64
    %790 = "llvm.load"(%786) : (!llvm.ptr) -> !llvm.ptr
    %791 = "llvm.load"(%787) : (!llvm.ptr) -> !llvm.ptr
    %792 = "mini.addr_of"() {"global_name" = @i8_typ} : () -> !llvm.ptr
    %793 = "llvm.ptrtoint"(%792) : (!llvm.ptr) -> i64
    %794 = "llvm.mlir.constant"() <{"value" = 2582149688529881115 : i64}> : () -> i64
    %795 = "mini.subtype"(%790, %789, %788, %794, %793, %791) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%795) [^bb78, ^bb78] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb79:
    %796 = "llvm.extractvalue"(%777) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %797 = "llvm.load"(%780) : (!llvm.ptr) -> i32
    %798 = "llvm.getelementptr"(%796, %797) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %799 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %800 = "llvm.getelementptr"(%798, %799) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%800) : (!llvm.ptr) -> ()
  }) {"func_name" = "Character_B_init_bytePtri8", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_StringIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "StringIterator_getter_str", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "StringIterator_setter_str", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "StringIterator_field_str", "getter_name" = "StringIterator_getter_str", "setter_name" = "StringIterator_setter_str"} : () -> ()
  "mini.getter_def"() {"meth_name" = "StringIterator_getter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "StringIterator_setter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "StringIterator_field_index", "getter_name" = "StringIterator_getter_index", "setter_name" = "StringIterator_setter_index"} : () -> ()
  "mini.func"() ({
  ^bb80(%801 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %802 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %803 : !llvm.ptr, %804 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %805 = "mini.wrap"(%801) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"StringIterator">
    %806 = "mini.to_fat_ptr"(%805) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator", "invariant"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    %807 = "mini.wrap"(%804) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %808 = "mini.to_fat_ptr"(%807) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %809 = "mini.to_fat_ptr"(%808) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%806, %809) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"StringIterator">, !mini.fatptr<"String">) -> ()
    %810 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %811 = builtin.unrealized_conversion_cast %810 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%806, %811) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "StringIterator_init_strString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb81(%812 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %813 : !llvm.ptr):
    %814 = "mini.invariant"(%813) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %815 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb82] : () -> ()
  ^bb83:
    %816 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%816, %815) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb84] : () -> ()
  ^bb82:
    %817 = "llvm.getelementptr"(%813) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %818 = "llvm.load"(%817) : (!llvm.ptr) -> !llvm.ptr
    %819 = "llvm.getelementptr"(%818) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %820 = "llvm.getelementptr"(%818) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %821 = "llvm.getelementptr"(%818) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %822 = "llvm.getelementptr"(%818) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %823 = "llvm.load"(%819) : (!llvm.ptr) -> i64
    %824 = "llvm.load"(%820) : (!llvm.ptr) -> i64
    %825 = "llvm.load"(%821) : (!llvm.ptr) -> !llvm.ptr
    %826 = "llvm.load"(%822) : (!llvm.ptr) -> !llvm.ptr
    %827 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %828 = "llvm.ptrtoint"(%827) : (!llvm.ptr) -> i64
    %829 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %830 = "mini.subtype"(%825, %824, %823, %829, %828, %826) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%830) [^bb83, ^bb83] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb84:
    %831 = "llvm.extractvalue"(%812) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %832 = "llvm.load"(%815) : (!llvm.ptr) -> i32
    %833 = "llvm.getelementptr"(%831, %832) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %834 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %835 = "llvm.getelementptr"(%833, %834) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%835) : (!llvm.ptr) -> ()
  }) {"func_name" = "StringIterator_B_init_strString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb85(%836 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %837 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %838 : !llvm.ptr):
    %839 = "mini.wrap"(%836) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"StringIterator">
    %840 = "mini.to_fat_ptr"(%839) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator", "invariant"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    %841 = "mini.get_field"(%840) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
    %842 = "mini.get_field"(%840) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"String">
    %843 = "mini.unwrap"(%842) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %844 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %845 = "mini.method_call"(%844, %843) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %846 = builtin.unrealized_conversion_cast %845 : !mini.ptr<i32> to !mini.ptr<i32>
    %847 = "mini.unwrap"(%841) : (!mini.ptr<i32>) -> i32
    %848 = "mini.unwrap"(%846) : (!mini.ptr<i32>) -> i32
    %849 = "mini.comparison"(%847, %848) {"op" = "LT"} : (i32, i32) -> i1
    %850 = "mini.wrap"(%849) : (i1) -> !mini.ptr<i32>
    %851 = "mini.unwrap"(%850) : (!mini.ptr<i32>) -> i1
    "mini.if"(%851) ({
      %852 = "mini.get_field"(%840) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
      %853 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %854 = "mini.unwrap"(%852) : (!mini.ptr<i32>) -> i32
      %855 = "mini.unwrap"(%853) : (!mini.ptr<i32>) -> i32
      %856 = "mini.arithmetic"(%854, %855) {"op" = "ADD"} : (i32, i32) -> i32
      %857 = "mini.wrap"(%856) : (i32) -> !mini.ptr<i32>
      %858 = builtin.unrealized_conversion_cast %857 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.set_field"(%840, %858) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">, !mini.ptr<i32>) -> ()
      %859 = "mini.get_field"(%840) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"String">
      %860 = "mini.unwrap"(%859) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %861 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %862 = "mini.method_call"(%861, %860) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %863 = builtin.unrealized_conversion_cast %862 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %864 = "mini.get_field"(%840) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
      %865 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %866 = "mini.unwrap"(%864) : (!mini.ptr<i32>) -> i32
      %867 = "mini.unwrap"(%865) : (!mini.ptr<i32>) -> i32
      %868 = "mini.arithmetic"(%866, %867) {"op" = "SUB"} : (i32, i32) -> i32
      %869 = "mini.wrap"(%868) : (i32) -> !mini.ptr<i32>
      %870 = "mini.buffer_get"(%863, %869) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %871 = "mini.unwrap"(%870) : (!mini.ptr<i8>) -> i8
      %872 = "mini.new"() {"typ" = !llvm.struct<(i8)>, "class_name" = "Character", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Character">
      %873 = "mini.get_field"(%840) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"String">
      %874 = "mini.unwrap"(%873) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %875 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %876 = "mini.method_call"(%875, %874) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %877 = builtin.unrealized_conversion_cast %876 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %878 = "mini.get_field"(%840) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
      %879 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %880 = "mini.unwrap"(%878) : (!mini.ptr<i32>) -> i32
      %881 = "mini.unwrap"(%879) : (!mini.ptr<i32>) -> i32
      %882 = "mini.arithmetic"(%880, %881) {"op" = "SUB"} : (i32, i32) -> i32
      %883 = "mini.wrap"(%882) : (i32) -> !mini.ptr<i32>
      %884 = "mini.buffer_get"(%877, %883) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %885 = builtin.unrealized_conversion_cast %884 : !mini.ptr<i8> to !mini.ptr<i8>
      %886 = "mini.unwrap"(%885) : (!mini.ptr<i8>) -> i8
      %887 = "mini.unwrap"(%872) : (!mini.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %888 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["Ptri8"]} : () -> !llvm.ptr
      %889 = "mini.parameterizations_array"(%888) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%889, %887, %886) {"offset" = 2 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i8) -> ()
      %890 = builtin.unrealized_conversion_cast %872 : !mini.fatptr<"Character"> to !mini.union<[!mini.fatptr<"Character">, !mini.nil]>
      "mini.return"(%890) : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %891 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %892 = "mini.unionize"(%891) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.fatptr<"Character">, !mini.nil]>
    "mini.return"(%892) : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>) -> ()
  }) {"func_name" = "StringIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb86(%893 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %894 : !llvm.ptr):
    %895 = "mini.invariant"(%894) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %896 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb87] : () -> ()
  ^bb87:
    %897 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%897, %896) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb88] : () -> ()
  ^bb88:
    %898 = "llvm.extractvalue"(%893) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %899 = "llvm.load"(%896) : (!llvm.ptr) -> i32
    %900 = "llvm.getelementptr"(%898, %899) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %901 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %902 = "llvm.getelementptr"(%900, %901) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%902) : (!llvm.ptr) -> ()
  }) {"func_name" = "StringIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Exception", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Exception_getter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Exception_setter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Exception_field_line_number", "getter_name" = "Exception_getter_line_number", "setter_name" = "Exception_setter_line_number"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Exception_getter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Exception_setter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Exception_field_file_name", "getter_name" = "Exception_getter_file_name", "setter_name" = "Exception_setter_file_name"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Exception_getter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Exception_setter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Exception_field_message", "getter_name" = "Exception_getter_message", "setter_name" = "Exception_setter_message"} : () -> ()
  "mini.func"() ({
  ^bb89(%903 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %904 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %905 : !llvm.ptr, %906 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %907 = "mini.wrap"(%903) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %908 = "mini.to_fat_ptr"(%907) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception", "invariant"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %909 = "mini.wrap"(%906) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %910 = "mini.to_fat_ptr"(%909) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %911 = "mini.to_fat_ptr"(%910) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%908, %911) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
    %912 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %913 = builtin.unrealized_conversion_cast %912 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%908, %913) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Exception">, !mini.ptr<i32>) -> ()
    %914 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %915 = "mini.create_buffer"(%914) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %916 = builtin.unrealized_conversion_cast %915 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %917 = "mini.refer"(%916) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %918 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %919 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%917, %919, %918) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %920 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %921 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %922 = "mini.unwrap"(%917) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %923 = "mini.unwrap"(%920) : (!mini.ptr<i32>) -> i32
    %924 = "mini.unwrap"(%921) : (!mini.ptr<i32>) -> i32
    %925 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %926 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %927 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %928 = builtin.unrealized_conversion_cast %917 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %929 = "mini.unwrap"(%928) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %930 = builtin.unrealized_conversion_cast %926 : !mini.ptr<i32> to !mini.ptr<i32>
    %931 = "mini.unwrap"(%930) : (!mini.ptr<i32>) -> i32
    %932 = builtin.unrealized_conversion_cast %927 : !mini.ptr<i32> to !mini.ptr<i32>
    %933 = "mini.unwrap"(%932) : (!mini.ptr<i32>) -> i32
    %934 = "mini.unwrap"(%925) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %935 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %936 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %937 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %938 = "mini.parameterizations_array"(%935, %936, %937) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%938, %934, %929, %931, %933) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %939 = "mini.to_fat_ptr"(%925) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%908, %939) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "Exception_init_messageString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb90(%940 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %941 : !llvm.ptr):
    %942 = "mini.invariant"(%941) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %943 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb91] : () -> ()
  ^bb92:
    %944 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%944, %943) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb93] : () -> ()
  ^bb91:
    %945 = "llvm.getelementptr"(%941) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %946 = "llvm.load"(%945) : (!llvm.ptr) -> !llvm.ptr
    %947 = "llvm.getelementptr"(%946) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %948 = "llvm.getelementptr"(%946) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %949 = "llvm.getelementptr"(%946) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %950 = "llvm.getelementptr"(%946) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %951 = "llvm.load"(%947) : (!llvm.ptr) -> i64
    %952 = "llvm.load"(%948) : (!llvm.ptr) -> i64
    %953 = "llvm.load"(%949) : (!llvm.ptr) -> !llvm.ptr
    %954 = "llvm.load"(%950) : (!llvm.ptr) -> !llvm.ptr
    %955 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %956 = "llvm.ptrtoint"(%955) : (!llvm.ptr) -> i64
    %957 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %958 = "mini.subtype"(%953, %952, %951, %957, %956, %954) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%958) [^bb92, ^bb92] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb93:
    %959 = "llvm.extractvalue"(%940) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %960 = "llvm.load"(%943) : (!llvm.ptr) -> i32
    %961 = "llvm.getelementptr"(%959, %960) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %962 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %963 = "llvm.getelementptr"(%961, %962) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%963) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb94(%964 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %965 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %966 : !llvm.ptr):
    %967 = "mini.wrap"(%964) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %968 = "mini.to_fat_ptr"(%967) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception", "invariant"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %969 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %970 = builtin.unrealized_conversion_cast %969 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%968, %970) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Exception">, !mini.ptr<i32>) -> ()
    %971 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %972 = "mini.create_buffer"(%971) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %973 = builtin.unrealized_conversion_cast %972 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %974 = "mini.refer"(%973) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %975 = "mini.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "<None>"} : () -> !llvm.ptr
    %976 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%974, %976, %975) {"typ" = !llvm.array<6 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %977 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %978 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %979 = "mini.unwrap"(%974) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %980 = "mini.unwrap"(%977) : (!mini.ptr<i32>) -> i32
    %981 = "mini.unwrap"(%978) : (!mini.ptr<i32>) -> i32
    %982 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %983 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %984 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %985 = builtin.unrealized_conversion_cast %974 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %986 = "mini.unwrap"(%985) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %987 = builtin.unrealized_conversion_cast %983 : !mini.ptr<i32> to !mini.ptr<i32>
    %988 = "mini.unwrap"(%987) : (!mini.ptr<i32>) -> i32
    %989 = builtin.unrealized_conversion_cast %984 : !mini.ptr<i32> to !mini.ptr<i32>
    %990 = "mini.unwrap"(%989) : (!mini.ptr<i32>) -> i32
    %991 = "mini.unwrap"(%982) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %992 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %993 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %994 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %995 = "mini.parameterizations_array"(%992, %993, %994) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%995, %991, %986, %988, %990) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %996 = "mini.to_fat_ptr"(%982) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%968, %996) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
    %997 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %998 = "mini.create_buffer"(%997) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %999 = builtin.unrealized_conversion_cast %998 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1000 = "mini.refer"(%999) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1001 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %1002 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%1000, %1002, %1001) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %1003 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1004 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1005 = "mini.unwrap"(%1000) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1006 = "mini.unwrap"(%1003) : (!mini.ptr<i32>) -> i32
    %1007 = "mini.unwrap"(%1004) : (!mini.ptr<i32>) -> i32
    %1008 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %1009 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1010 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1011 = builtin.unrealized_conversion_cast %1000 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1012 = "mini.unwrap"(%1011) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1013 = builtin.unrealized_conversion_cast %1009 : !mini.ptr<i32> to !mini.ptr<i32>
    %1014 = "mini.unwrap"(%1013) : (!mini.ptr<i32>) -> i32
    %1015 = builtin.unrealized_conversion_cast %1010 : !mini.ptr<i32> to !mini.ptr<i32>
    %1016 = "mini.unwrap"(%1015) : (!mini.ptr<i32>) -> i32
    %1017 = "mini.unwrap"(%1008) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1018 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1019 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1020 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1021 = "mini.parameterizations_array"(%1018, %1019, %1020) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1021, %1017, %1012, %1014, %1016) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1022 = "mini.to_fat_ptr"(%1008) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%968, %1022) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "Exception_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb95(%1023 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1024 : !llvm.ptr):
    %1025 = "mini.invariant"(%1024) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1026 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb96] : () -> ()
  ^bb96:
    %1027 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%1027, %1026) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb97] : () -> ()
  ^bb97:
    %1028 = "llvm.extractvalue"(%1023) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1029 = "llvm.load"(%1026) : (!llvm.ptr) -> i32
    %1030 = "llvm.getelementptr"(%1028, %1029) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1031 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %1032 = "llvm.getelementptr"(%1030, %1031) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1032) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb98(%1033 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1034 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1035 : !llvm.ptr, %1036 : i32, %1037 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %1038 = "mini.wrap"(%1033) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %1039 = "mini.to_fat_ptr"(%1038) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception", "invariant"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %1040 = "mini.wrap"(%1036) : (i32) -> !mini.ptr<i32>
    %1041 = builtin.unrealized_conversion_cast %1040 : !mini.ptr<i32> to !mini.ptr<i32>
    %1042 = builtin.unrealized_conversion_cast %1041 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%1039, %1042) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Exception">, !mini.ptr<i32>) -> ()
    %1043 = "mini.wrap"(%1037) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %1044 = "mini.to_fat_ptr"(%1043) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %1045 = "mini.to_fat_ptr"(%1044) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%1039, %1045) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "Exception_set_info_line_numberPtri32_file_nameString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb99(%1046 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1047 : !llvm.ptr):
    %1048 = "mini.invariant"(%1047) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1049 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb100] : () -> ()
  ^bb101:
    %1050 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%1050, %1049) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb102] : () -> ()
  ^bb103:
    %1051 = "llvm.getelementptr"(%1047) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1052 = "llvm.load"(%1051) : (!llvm.ptr) -> !llvm.ptr
    %1053 = "llvm.getelementptr"(%1052) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1054 = "llvm.getelementptr"(%1052) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1055 = "llvm.getelementptr"(%1052) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1056 = "llvm.getelementptr"(%1052) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1057 = "llvm.load"(%1053) : (!llvm.ptr) -> i64
    %1058 = "llvm.load"(%1054) : (!llvm.ptr) -> i64
    %1059 = "llvm.load"(%1055) : (!llvm.ptr) -> !llvm.ptr
    %1060 = "llvm.load"(%1056) : (!llvm.ptr) -> !llvm.ptr
    %1061 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %1062 = "llvm.ptrtoint"(%1061) : (!llvm.ptr) -> i64
    %1063 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %1064 = "mini.subtype"(%1059, %1058, %1057, %1063, %1062, %1060) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1064) [^bb101, ^bb101] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb100:
    %1065 = "llvm.getelementptr"(%1047) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1066 = "llvm.load"(%1065) : (!llvm.ptr) -> !llvm.ptr
    %1067 = "llvm.getelementptr"(%1066) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1068 = "llvm.getelementptr"(%1066) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1069 = "llvm.getelementptr"(%1066) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1070 = "llvm.getelementptr"(%1066) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1071 = "llvm.load"(%1067) : (!llvm.ptr) -> i64
    %1072 = "llvm.load"(%1068) : (!llvm.ptr) -> i64
    %1073 = "llvm.load"(%1069) : (!llvm.ptr) -> !llvm.ptr
    %1074 = "llvm.load"(%1070) : (!llvm.ptr) -> !llvm.ptr
    %1075 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %1076 = "llvm.ptrtoint"(%1075) : (!llvm.ptr) -> i64
    %1077 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %1078 = "mini.subtype"(%1073, %1072, %1071, %1077, %1076, %1074) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1078) [^bb103, ^bb103] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb102:
    %1079 = "llvm.extractvalue"(%1046) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1080 = "llvm.load"(%1049) : (!llvm.ptr) -> i32
    %1081 = "llvm.getelementptr"(%1079, %1080) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1082 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %1083 = "llvm.getelementptr"(%1081, %1082) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1083) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_set_info_line_numberPtri32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb104(%1084 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1085 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1086 : !llvm.ptr):
    %1087 = "mini.wrap"(%1084) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %1088 = "mini.to_fat_ptr"(%1087) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception", "invariant"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %1089 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1090 = "mini.create_buffer"(%1089) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %1091 = builtin.unrealized_conversion_cast %1090 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1092 = "mini.refer"(%1091) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1093 = "mini.literal"() {"typ" = !llvm.array<9 x i8>, "value" = "---------"} : () -> !llvm.ptr
    %1094 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%1092, %1094, %1093) {"typ" = !llvm.array<9 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %1095 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1096 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1097 = "mini.unwrap"(%1092) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1098 = "mini.unwrap"(%1095) : (!mini.ptr<i32>) -> i32
    %1099 = "mini.unwrap"(%1096) : (!mini.ptr<i32>) -> i32
    %1100 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %1101 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1102 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1103 = builtin.unrealized_conversion_cast %1092 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1104 = "mini.unwrap"(%1103) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1105 = builtin.unrealized_conversion_cast %1101 : !mini.ptr<i32> to !mini.ptr<i32>
    %1106 = "mini.unwrap"(%1105) : (!mini.ptr<i32>) -> i32
    %1107 = builtin.unrealized_conversion_cast %1102 : !mini.ptr<i32> to !mini.ptr<i32>
    %1108 = "mini.unwrap"(%1107) : (!mini.ptr<i32>) -> i32
    %1109 = "mini.unwrap"(%1100) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1110 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1111 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1112 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1113 = "mini.parameterizations_array"(%1110, %1111, %1112) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1113, %1109, %1104, %1106, %1108) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1114 = "mini.unwrap"(%1100) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1115 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1116 = "mini.method_call"(%1115, %1114) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1117 = builtin.unrealized_conversion_cast %1116 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1118 = "mini.print"(%1117) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %1119 = "mini.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1120 = "mini.create_buffer"(%1119) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %1121 = builtin.unrealized_conversion_cast %1120 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1122 = "mini.refer"(%1121) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1123 = "mini.literal"() {"typ" = !llvm.array<26 x i8>, "value" = "Exception thrown from file"} : () -> !llvm.ptr
    %1124 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%1122, %1124, %1123) {"typ" = !llvm.array<26 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %1125 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1126 = "mini.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1127 = "mini.unwrap"(%1122) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1128 = "mini.unwrap"(%1125) : (!mini.ptr<i32>) -> i32
    %1129 = "mini.unwrap"(%1126) : (!mini.ptr<i32>) -> i32
    %1130 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %1131 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1132 = "mini.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1133 = builtin.unrealized_conversion_cast %1122 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1134 = "mini.unwrap"(%1133) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1135 = builtin.unrealized_conversion_cast %1131 : !mini.ptr<i32> to !mini.ptr<i32>
    %1136 = "mini.unwrap"(%1135) : (!mini.ptr<i32>) -> i32
    %1137 = builtin.unrealized_conversion_cast %1132 : !mini.ptr<i32> to !mini.ptr<i32>
    %1138 = "mini.unwrap"(%1137) : (!mini.ptr<i32>) -> i32
    %1139 = "mini.unwrap"(%1130) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1140 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1141 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1142 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1143 = "mini.parameterizations_array"(%1140, %1141, %1142) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1143, %1139, %1134, %1136, %1138) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1144 = "mini.unwrap"(%1130) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1145 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1146 = "mini.method_call"(%1145, %1144) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1147 = builtin.unrealized_conversion_cast %1146 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1148 = "mini.print"(%1147) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %1149 = "mini.get_field"(%1088) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"String">
    %1150 = "mini.unwrap"(%1149) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1151 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1152 = "mini.method_call"(%1151, %1150) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1153 = builtin.unrealized_conversion_cast %1152 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1154 = "mini.print"(%1153) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %1155 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1156 = "mini.create_buffer"(%1155) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %1157 = builtin.unrealized_conversion_cast %1156 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1158 = "mini.refer"(%1157) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1159 = "mini.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "At line"} : () -> !llvm.ptr
    %1160 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%1158, %1160, %1159) {"typ" = !llvm.array<7 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %1161 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1162 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1163 = "mini.unwrap"(%1158) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1164 = "mini.unwrap"(%1161) : (!mini.ptr<i32>) -> i32
    %1165 = "mini.unwrap"(%1162) : (!mini.ptr<i32>) -> i32
    %1166 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %1167 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1168 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1169 = builtin.unrealized_conversion_cast %1158 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1170 = "mini.unwrap"(%1169) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1171 = builtin.unrealized_conversion_cast %1167 : !mini.ptr<i32> to !mini.ptr<i32>
    %1172 = "mini.unwrap"(%1171) : (!mini.ptr<i32>) -> i32
    %1173 = builtin.unrealized_conversion_cast %1168 : !mini.ptr<i32> to !mini.ptr<i32>
    %1174 = "mini.unwrap"(%1173) : (!mini.ptr<i32>) -> i32
    %1175 = "mini.unwrap"(%1166) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1176 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1177 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1178 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1179 = "mini.parameterizations_array"(%1176, %1177, %1178) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1179, %1175, %1170, %1172, %1174) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1180 = "mini.unwrap"(%1166) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1181 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1182 = "mini.method_call"(%1181, %1180) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1183 = builtin.unrealized_conversion_cast %1182 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1184 = "mini.print"(%1183) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %1185 = "mini.get_field"(%1088) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Exception">) -> !mini.ptr<i32>
    %1186 = "mini.print"(%1185) {"typ" = i32} : (!mini.ptr<i32>) -> i32
    %1187 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1188 = "mini.create_buffer"(%1187) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %1189 = builtin.unrealized_conversion_cast %1188 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1190 = "mini.refer"(%1189) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1191 = "mini.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "With message"} : () -> !llvm.ptr
    %1192 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%1190, %1192, %1191) {"typ" = !llvm.array<12 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %1193 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1194 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1195 = "mini.unwrap"(%1190) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1196 = "mini.unwrap"(%1193) : (!mini.ptr<i32>) -> i32
    %1197 = "mini.unwrap"(%1194) : (!mini.ptr<i32>) -> i32
    %1198 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %1199 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1200 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1201 = builtin.unrealized_conversion_cast %1190 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1202 = "mini.unwrap"(%1201) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1203 = builtin.unrealized_conversion_cast %1199 : !mini.ptr<i32> to !mini.ptr<i32>
    %1204 = "mini.unwrap"(%1203) : (!mini.ptr<i32>) -> i32
    %1205 = builtin.unrealized_conversion_cast %1200 : !mini.ptr<i32> to !mini.ptr<i32>
    %1206 = "mini.unwrap"(%1205) : (!mini.ptr<i32>) -> i32
    %1207 = "mini.unwrap"(%1198) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1208 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1209 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1210 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1211 = "mini.parameterizations_array"(%1208, %1209, %1210) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1211, %1207, %1202, %1204, %1206) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1212 = "mini.unwrap"(%1198) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1213 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1214 = "mini.method_call"(%1213, %1212) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1215 = builtin.unrealized_conversion_cast %1214 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1216 = "mini.print"(%1215) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %1217 = "mini.unwrap"(%1088) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1218 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%1218, %1217) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %1219 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1220 = "mini.create_buffer"(%1219) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %1221 = builtin.unrealized_conversion_cast %1220 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1222 = "mini.refer"(%1221) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1223 = "mini.literal"() {"typ" = !llvm.array<9 x i8>, "value" = "---------"} : () -> !llvm.ptr
    %1224 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%1222, %1224, %1223) {"typ" = !llvm.array<9 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %1225 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1226 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1227 = "mini.unwrap"(%1222) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1228 = "mini.unwrap"(%1225) : (!mini.ptr<i32>) -> i32
    %1229 = "mini.unwrap"(%1226) : (!mini.ptr<i32>) -> i32
    %1230 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %1231 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1232 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1233 = builtin.unrealized_conversion_cast %1222 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1234 = "mini.unwrap"(%1233) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1235 = builtin.unrealized_conversion_cast %1231 : !mini.ptr<i32> to !mini.ptr<i32>
    %1236 = "mini.unwrap"(%1235) : (!mini.ptr<i32>) -> i32
    %1237 = builtin.unrealized_conversion_cast %1232 : !mini.ptr<i32> to !mini.ptr<i32>
    %1238 = "mini.unwrap"(%1237) : (!mini.ptr<i32>) -> i32
    %1239 = "mini.unwrap"(%1230) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1240 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1241 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1242 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1243 = "mini.parameterizations_array"(%1240, %1241, %1242) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1243, %1239, %1234, %1236, %1238) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1244 = "mini.unwrap"(%1230) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1245 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1246 = "mini.method_call"(%1245, %1244) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1247 = builtin.unrealized_conversion_cast %1246 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1248 = "mini.print"(%1247) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "Exception_report_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb105(%1249 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1250 : !llvm.ptr):
    %1251 = "mini.invariant"(%1250) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1252 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb106] : () -> ()
  ^bb106:
    %1253 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%1253, %1252) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb107] : () -> ()
  ^bb107:
    %1254 = "llvm.extractvalue"(%1249) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1255 = "llvm.load"(%1252) : (!llvm.ptr) -> i32
    %1256 = "llvm.getelementptr"(%1254, %1255) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1257 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %1258 = "llvm.getelementptr"(%1256, %1257) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1258) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_report_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb108(%1259 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1260 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1261 : !llvm.ptr):
    %1262 = "mini.wrap"(%1259) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %1263 = "mini.to_fat_ptr"(%1262) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception", "invariant"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %1264 = "mini.get_field"(%1263) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"String">
    %1265 = "mini.unwrap"(%1264) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1266 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1267 = "mini.method_call"(%1266, %1265) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1268 = builtin.unrealized_conversion_cast %1267 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1269 = "mini.print"(%1268) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "Exception_print_message_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb109(%1270 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1271 : !llvm.ptr):
    %1272 = "mini.invariant"(%1271) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1273 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb110] : () -> ()
  ^bb110:
    %1274 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%1274, %1273) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb111] : () -> ()
  ^bb111:
    %1275 = "llvm.extractvalue"(%1270) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1276 = "llvm.load"(%1273) : (!llvm.ptr) -> i32
    %1277 = "llvm.getelementptr"(%1275, %1276) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1278 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %1279 = "llvm.getelementptr"(%1277, %1278) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1279) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb112(%1280 : !llvm.struct<(!llvm.ptr)>):
    %1281 = "mini.wrap"(%1280) : (!llvm.struct<(!llvm.ptr)>) -> !mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>
    %1282 = builtin.unrealized_conversion_cast %1281 : !mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">> to !mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>
    %1283 = "llvm.load"(%1282) : (!mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>) -> !llvm.ptr
    %1284 = "mini.coro_get_result"(%1283) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i160)>
    %1285 = "mini.wrap"(%1284) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %1286 = "mini.checkflag"(%1285) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> i1
    %1287 = "mini.unwrap"(%1286) : (i1) -> i1
    %1288 = builtin.unrealized_conversion_cast %1285 : !mini.union<[!mini.fatptr<"Exception">, !mini.nil]> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    "mini.if"(%1287) ({
      %1289 = "mini.to_fat_ptr"(%1288) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Exception", "invariant"} : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !mini.fatptr<"Exception">
      %1290 = "mini.unwrap"(%1289) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1291 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%1291, %1290) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      "mini.castassign"(%1288, %1289) ({
        %1292 = builtin.unrealized_conversion_cast %1289 : !mini.fatptr<"Exception"> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.fatptr<"Exception">) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "report_exception", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_IO", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb113(%1293 : !llvm.ptr, %1294 : !llvm.struct<(!llvm.ptr, i160)>):
    %1295 = "mini.wrap"(%1294) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %1296 = "mini.narrow"(%1295) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i8, "from_typ_name" = "union_typ", "to_typ_name" = "i8_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !mini.ptr<i8>
    %1297 = "mini.print"(%1296) {"typ" = i8} : (!mini.ptr<i8>) -> i32
  }) {"func_name" = "IO__Self_print_xPtri8", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb114(%1298 : !llvm.ptr, %1299 : !llvm.struct<(!llvm.ptr, i160)>):
    %1300 = "mini.wrap"(%1299) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %1301 = "mini.narrow"(%1300) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i64, "from_typ_name" = "union_typ", "to_typ_name" = "i64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !mini.ptr<i64>
    %1302 = "mini.print"(%1301) {"typ" = i64} : (!mini.ptr<i64>) -> i32
  }) {"func_name" = "IO__Self_print_xPtri64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb115(%1303 : !llvm.ptr, %1304 : !llvm.struct<(!llvm.ptr, i160)>):
    %1305 = "mini.wrap"(%1304) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %1306 = "mini.to_fat_ptr"(%1305) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Character", "invariant"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !mini.fatptr<"Character">
    %1307 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1308 = "mini.create_buffer"(%1307) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %1309 = builtin.unrealized_conversion_cast %1308 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1310 = "mini.refer"(%1309) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1311 = "mini.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %1312 = builtin.unrealized_conversion_cast %1311 : !mini.ptr<i8> to !mini.ptr<i8>
    %1313 = "mini.unwrap"(%1306) : (!mini.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1314 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1315 = "mini.method_call"(%1314, %1313) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i8>
    %1316 = builtin.unrealized_conversion_cast %1315 : !mini.ptr<i8> to !mini.ptr<i8>
    %1317 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1318 = builtin.unrealized_conversion_cast %1316 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.buffer_set"(%1310, %1317, %1318) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
    %1319 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1320 = builtin.unrealized_conversion_cast %1312 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.buffer_set"(%1310, %1319, %1320) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
    %1321 = "mini.print"(%1310) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xCharacter", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb116(%1322 : !llvm.ptr, %1323 : !llvm.struct<(!llvm.ptr, i160)>):
    %1324 = "mini.wrap"(%1323) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %1325 = "mini.narrow"(%1324) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !mini.ptr<f64>
    %1326 = "mini.print"(%1325) {"typ" = f64} : (!mini.ptr<f64>) -> i32
  }) {"func_name" = "IO__Self_print_xPtrf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb117(%1327 : !llvm.ptr, %1328 : !llvm.struct<(!llvm.ptr, i160)>):
    %1329 = "mini.wrap"(%1328) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %1330 = "mini.narrow"(%1329) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i1, "from_typ_name" = "union_typ", "to_typ_name" = "bool_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !mini.ptr<i1>
    %1331 = "mini.unwrap"(%1330) : (!mini.ptr<i1>) -> i1
    "mini.if"(%1331) ({
      %1332 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1333 = "mini.create_buffer"(%1332) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %1334 = builtin.unrealized_conversion_cast %1333 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %1335 = "mini.refer"(%1334) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %1336 = "mini.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "true"} : () -> !llvm.ptr
      %1337 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%1335, %1337, %1336) {"typ" = !llvm.array<4 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %1338 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1339 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1340 = "mini.unwrap"(%1335) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %1341 = "mini.unwrap"(%1338) : (!mini.ptr<i32>) -> i32
      %1342 = "mini.unwrap"(%1339) : (!mini.ptr<i32>) -> i32
      %1343 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %1344 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1345 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1346 = builtin.unrealized_conversion_cast %1335 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %1347 = "mini.unwrap"(%1346) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %1348 = builtin.unrealized_conversion_cast %1344 : !mini.ptr<i32> to !mini.ptr<i32>
      %1349 = "mini.unwrap"(%1348) : (!mini.ptr<i32>) -> i32
      %1350 = builtin.unrealized_conversion_cast %1345 : !mini.ptr<i32> to !mini.ptr<i32>
      %1351 = "mini.unwrap"(%1350) : (!mini.ptr<i32>) -> i32
      %1352 = "mini.unwrap"(%1343) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1353 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %1354 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %1355 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %1356 = "mini.parameterizations_array"(%1353, %1354, %1355) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%1356, %1352, %1347, %1349, %1351) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1357 = "mini.unwrap"(%1343) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1358 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1359 = "mini.method_call"(%1358, %1357) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %1360 = builtin.unrealized_conversion_cast %1359 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %1361 = "mini.print"(%1360) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    }, {
      %1362 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1363 = "mini.create_buffer"(%1362) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %1364 = builtin.unrealized_conversion_cast %1363 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %1365 = "mini.refer"(%1364) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %1366 = "mini.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "false"} : () -> !llvm.ptr
      %1367 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%1365, %1367, %1366) {"typ" = !llvm.array<5 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %1368 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1369 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1370 = "mini.unwrap"(%1365) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %1371 = "mini.unwrap"(%1368) : (!mini.ptr<i32>) -> i32
      %1372 = "mini.unwrap"(%1369) : (!mini.ptr<i32>) -> i32
      %1373 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %1374 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1375 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1376 = builtin.unrealized_conversion_cast %1365 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %1377 = "mini.unwrap"(%1376) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %1378 = builtin.unrealized_conversion_cast %1374 : !mini.ptr<i32> to !mini.ptr<i32>
      %1379 = "mini.unwrap"(%1378) : (!mini.ptr<i32>) -> i32
      %1380 = builtin.unrealized_conversion_cast %1375 : !mini.ptr<i32> to !mini.ptr<i32>
      %1381 = "mini.unwrap"(%1380) : (!mini.ptr<i32>) -> i32
      %1382 = "mini.unwrap"(%1373) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1383 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %1384 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %1385 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %1386 = "mini.parameterizations_array"(%1383, %1384, %1385) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%1386, %1382, %1377, %1379, %1381) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1387 = "mini.unwrap"(%1373) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1388 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1389 = "mini.method_call"(%1388, %1387) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %1390 = builtin.unrealized_conversion_cast %1389 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %1391 = "mini.print"(%1390) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    }) : (i1) -> ()
  }) {"func_name" = "IO__Self_print_xPtri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb118(%1392 : !llvm.ptr, %1393 : !llvm.struct<(!llvm.ptr, i160)>):
    %1394 = "mini.wrap"(%1393) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %1395 = "mini.narrow"(%1394) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.array<0 x i8>, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !mini.nil
    %1396 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1397 = "mini.create_buffer"(%1396) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %1398 = builtin.unrealized_conversion_cast %1397 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1399 = "mini.refer"(%1398) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1400 = "mini.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "nil"} : () -> !llvm.ptr
    %1401 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%1399, %1401, %1400) {"typ" = !llvm.array<3 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %1402 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1403 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1404 = "mini.unwrap"(%1399) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1405 = "mini.unwrap"(%1402) : (!mini.ptr<i32>) -> i32
    %1406 = "mini.unwrap"(%1403) : (!mini.ptr<i32>) -> i32
    %1407 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %1408 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1409 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1410 = builtin.unrealized_conversion_cast %1399 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1411 = "mini.unwrap"(%1410) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1412 = builtin.unrealized_conversion_cast %1408 : !mini.ptr<i32> to !mini.ptr<i32>
    %1413 = "mini.unwrap"(%1412) : (!mini.ptr<i32>) -> i32
    %1414 = builtin.unrealized_conversion_cast %1409 : !mini.ptr<i32> to !mini.ptr<i32>
    %1415 = "mini.unwrap"(%1414) : (!mini.ptr<i32>) -> i32
    %1416 = "mini.unwrap"(%1407) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1417 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1418 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1419 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1420 = "mini.parameterizations_array"(%1417, %1418, %1419) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1420, %1416, %1411, %1413, %1415) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1421 = "mini.unwrap"(%1407) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1422 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1423 = "mini.method_call"(%1422, %1421) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1424 = builtin.unrealized_conversion_cast %1423 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1425 = "mini.print"(%1424) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xNil", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb119(%1426 : !llvm.ptr, %1427 : !llvm.struct<(!llvm.ptr, i160)>):
    %1428 = "mini.wrap"(%1427) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %1429 = "mini.narrow"(%1428) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !mini.ptr<i32>
    %1430 = "mini.print"(%1429) {"typ" = i32} : (!mini.ptr<i32>) -> i32
  }) {"func_name" = "IO__Self_print_xPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb120(%1431 : !llvm.ptr, %1432 : !llvm.struct<(!llvm.ptr, i160)>):
    %1433 = "mini.wrap"(%1432) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %1434 = "mini.to_fat_ptr"(%1433) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "String", "invariant"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !mini.fatptr<"String">
    %1435 = "mini.unwrap"(%1434) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1436 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1437 = "mini.method_call"(%1436, %1435) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1438 = builtin.unrealized_conversion_cast %1437 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1439 = "mini.print"(%1438) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb121(%1440 : !llvm.ptr, %1441 : !llvm.struct<(!llvm.ptr, i160)>):
    %1442 = "mini.wrap"(%1441) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %1443 = "mini.to_fat_ptr"(%1442) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Representable", "invariant"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !mini.fatptr<"Representable">
    %1444 = "mini.unwrap"(%1443) : (!mini.fatptr<"Representable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1445 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1446 = "mini.method_call"(%1445, %1444) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %1447 = "mini.to_fat_ptr"(%1446) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %1448 = "mini.unwrap"(%1447) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1449 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1450 = "mini.method_call"(%1449, %1448) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1451 = builtin.unrealized_conversion_cast %1450 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1452 = "mini.print"(%1451) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xRepresentable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb122(%1453 : !llvm.ptr):
    %1454 = "mini.invariant"(%1453) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1455 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb123] : () -> ()
  ^bb124:
    %1456 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%1456, %1455) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb126:
    %1457 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%1457, %1455) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb127:
    %1458 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%1458, %1455) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb128:
    %1459 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%1459, %1455) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb129:
    %1460 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%1460, %1455) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb130:
    %1461 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%1461, %1455) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb131:
    %1462 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%1462, %1455) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb132:
    %1463 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%1463, %1455) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb133:
    %1464 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%1464, %1455) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb123:
    %1465 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1466 = "llvm.load"(%1465) : (!llvm.ptr) -> !llvm.ptr
    %1467 = "llvm.getelementptr"(%1466) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1468 = "llvm.getelementptr"(%1466) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1469 = "llvm.getelementptr"(%1466) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1470 = "llvm.getelementptr"(%1466) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1471 = "llvm.load"(%1467) : (!llvm.ptr) -> i64
    %1472 = "llvm.load"(%1468) : (!llvm.ptr) -> i64
    %1473 = "llvm.load"(%1469) : (!llvm.ptr) -> !llvm.ptr
    %1474 = "llvm.load"(%1470) : (!llvm.ptr) -> !llvm.ptr
    %1475 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %1476 = "llvm.ptrtoint"(%1475) : (!llvm.ptr) -> i64
    %1477 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %1478 = "mini.subtype"(%1473, %1472, %1471, %1477, %1476, %1474) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1478) [^bb124, ^bb134] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb134:
    %1479 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1480 = "llvm.load"(%1479) : (!llvm.ptr) -> !llvm.ptr
    %1481 = "llvm.getelementptr"(%1480) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1482 = "llvm.getelementptr"(%1480) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1483 = "llvm.getelementptr"(%1480) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1484 = "llvm.getelementptr"(%1480) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1485 = "llvm.load"(%1481) : (!llvm.ptr) -> i64
    %1486 = "llvm.load"(%1482) : (!llvm.ptr) -> i64
    %1487 = "llvm.load"(%1483) : (!llvm.ptr) -> !llvm.ptr
    %1488 = "llvm.load"(%1484) : (!llvm.ptr) -> !llvm.ptr
    %1489 = "mini.addr_of"() {"global_name" = @i8_typ} : () -> !llvm.ptr
    %1490 = "llvm.ptrtoint"(%1489) : (!llvm.ptr) -> i64
    %1491 = "llvm.mlir.constant"() <{"value" = 2582149688529881115 : i64}> : () -> i64
    %1492 = "mini.subtype"(%1487, %1486, %1485, %1491, %1490, %1488) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1492) [^bb126, ^bb135] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb135:
    %1493 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1494 = "llvm.load"(%1493) : (!llvm.ptr) -> !llvm.ptr
    %1495 = "llvm.getelementptr"(%1494) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1496 = "llvm.getelementptr"(%1494) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1497 = "llvm.getelementptr"(%1494) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1498 = "llvm.getelementptr"(%1494) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1499 = "llvm.load"(%1495) : (!llvm.ptr) -> i64
    %1500 = "llvm.load"(%1496) : (!llvm.ptr) -> i64
    %1501 = "llvm.load"(%1497) : (!llvm.ptr) -> !llvm.ptr
    %1502 = "llvm.load"(%1498) : (!llvm.ptr) -> !llvm.ptr
    %1503 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %1504 = "llvm.ptrtoint"(%1503) : (!llvm.ptr) -> i64
    %1505 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %1506 = "mini.subtype"(%1501, %1500, %1499, %1505, %1504, %1502) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1506) [^bb127, ^bb136] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb136:
    %1507 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1508 = "llvm.load"(%1507) : (!llvm.ptr) -> !llvm.ptr
    %1509 = "llvm.getelementptr"(%1508) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1510 = "llvm.getelementptr"(%1508) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1511 = "llvm.getelementptr"(%1508) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1512 = "llvm.getelementptr"(%1508) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1513 = "llvm.load"(%1509) : (!llvm.ptr) -> i64
    %1514 = "llvm.load"(%1510) : (!llvm.ptr) -> i64
    %1515 = "llvm.load"(%1511) : (!llvm.ptr) -> !llvm.ptr
    %1516 = "llvm.load"(%1512) : (!llvm.ptr) -> !llvm.ptr
    %1517 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %1518 = "llvm.ptrtoint"(%1517) : (!llvm.ptr) -> i64
    %1519 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %1520 = "mini.subtype"(%1515, %1514, %1513, %1519, %1518, %1516) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1520) [^bb137, ^bb138] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb137:
    %1521 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1522 = "llvm.load"(%1521) : (!llvm.ptr) -> !llvm.ptr
    %1523 = "llvm.getelementptr"(%1522) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1524 = "llvm.getelementptr"(%1522) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1525 = "llvm.getelementptr"(%1522) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1526 = "llvm.getelementptr"(%1522) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1527 = "llvm.load"(%1523) : (!llvm.ptr) -> i64
    %1528 = "llvm.load"(%1524) : (!llvm.ptr) -> i64
    %1529 = "llvm.load"(%1525) : (!llvm.ptr) -> !llvm.ptr
    %1530 = "llvm.load"(%1526) : (!llvm.ptr) -> !llvm.ptr
    %1531 = "mini.addr_of"() {"global_name" = @Character} : () -> !llvm.ptr
    %1532 = "llvm.ptrtoint"(%1531) : (!llvm.ptr) -> i64
    %1533 = "llvm.mlir.constant"() <{"value" = 6681222582356018452 : i64}> : () -> i64
    %1534 = "mini.subtype"(%1529, %1528, %1527, %1533, %1532, %1530) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1534) [^bb138, ^bb128] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb138:
    %1535 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1536 = "llvm.load"(%1535) : (!llvm.ptr) -> !llvm.ptr
    %1537 = "llvm.getelementptr"(%1536) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1538 = "llvm.getelementptr"(%1536) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1539 = "llvm.getelementptr"(%1536) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1540 = "llvm.getelementptr"(%1536) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1541 = "llvm.load"(%1537) : (!llvm.ptr) -> i64
    %1542 = "llvm.load"(%1538) : (!llvm.ptr) -> i64
    %1543 = "llvm.load"(%1539) : (!llvm.ptr) -> !llvm.ptr
    %1544 = "llvm.load"(%1540) : (!llvm.ptr) -> !llvm.ptr
    %1545 = "mini.addr_of"() {"global_name" = @bool_typ} : () -> !llvm.ptr
    %1546 = "llvm.ptrtoint"(%1545) : (!llvm.ptr) -> i64
    %1547 = "llvm.mlir.constant"() <{"value" = 5801531371504802705 : i64}> : () -> i64
    %1548 = "mini.subtype"(%1543, %1542, %1541, %1547, %1546, %1544) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1548) [^bb129, ^bb139] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb139:
    %1549 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1550 = "llvm.load"(%1549) : (!llvm.ptr) -> !llvm.ptr
    %1551 = "llvm.getelementptr"(%1550) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1552 = "llvm.getelementptr"(%1550) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1553 = "llvm.getelementptr"(%1550) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1554 = "llvm.getelementptr"(%1550) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1555 = "llvm.load"(%1551) : (!llvm.ptr) -> i64
    %1556 = "llvm.load"(%1552) : (!llvm.ptr) -> i64
    %1557 = "llvm.load"(%1553) : (!llvm.ptr) -> !llvm.ptr
    %1558 = "llvm.load"(%1554) : (!llvm.ptr) -> !llvm.ptr
    %1559 = "mini.addr_of"() {"global_name" = @nil_typ} : () -> !llvm.ptr
    %1560 = "llvm.ptrtoint"(%1559) : (!llvm.ptr) -> i64
    %1561 = "llvm.mlir.constant"() <{"value" = 13319937214253225933 : i64}> : () -> i64
    %1562 = llvm.mlir.zero : i64
    %1563 = "llvm.ptrtoint"(%1550) : (!llvm.ptr) -> i64
    %1564 = "mini.comparison"(%1563, %1562) {"op" = "EQ"} : (i64, i64) -> i1
    "cf.cond_br"(%1564) [^bb130, ^bb140] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb140:
    %1565 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1566 = "llvm.load"(%1565) : (!llvm.ptr) -> !llvm.ptr
    %1567 = "llvm.getelementptr"(%1566) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1568 = "llvm.getelementptr"(%1566) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1569 = "llvm.getelementptr"(%1566) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1570 = "llvm.getelementptr"(%1566) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1571 = "llvm.load"(%1567) : (!llvm.ptr) -> i64
    %1572 = "llvm.load"(%1568) : (!llvm.ptr) -> i64
    %1573 = "llvm.load"(%1569) : (!llvm.ptr) -> !llvm.ptr
    %1574 = "llvm.load"(%1570) : (!llvm.ptr) -> !llvm.ptr
    %1575 = "mini.addr_of"() {"global_name" = @i64_typ} : () -> !llvm.ptr
    %1576 = "llvm.ptrtoint"(%1575) : (!llvm.ptr) -> i64
    %1577 = "llvm.mlir.constant"() <{"value" = 10976946829247779694 : i64}> : () -> i64
    %1578 = "mini.subtype"(%1573, %1572, %1571, %1577, %1576, %1574) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1578) [^bb131, ^bb141] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb141:
    %1579 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1580 = "llvm.load"(%1579) : (!llvm.ptr) -> !llvm.ptr
    %1581 = "llvm.getelementptr"(%1580) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1582 = "llvm.getelementptr"(%1580) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1583 = "llvm.getelementptr"(%1580) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1584 = "llvm.getelementptr"(%1580) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1585 = "llvm.load"(%1581) : (!llvm.ptr) -> i64
    %1586 = "llvm.load"(%1582) : (!llvm.ptr) -> i64
    %1587 = "llvm.load"(%1583) : (!llvm.ptr) -> !llvm.ptr
    %1588 = "llvm.load"(%1584) : (!llvm.ptr) -> !llvm.ptr
    %1589 = "mini.addr_of"() {"global_name" = @Representable} : () -> !llvm.ptr
    %1590 = "llvm.ptrtoint"(%1589) : (!llvm.ptr) -> i64
    %1591 = "llvm.mlir.constant"() <{"value" = 11185903432579561498 : i64}> : () -> i64
    %1592 = "mini.subtype"(%1587, %1586, %1585, %1591, %1590, %1588) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1592) [^bb142, ^bb143] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb142:
    %1593 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1594 = "llvm.load"(%1593) : (!llvm.ptr) -> !llvm.ptr
    %1595 = "llvm.getelementptr"(%1594) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1596 = "llvm.getelementptr"(%1594) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1597 = "llvm.getelementptr"(%1594) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1598 = "llvm.getelementptr"(%1594) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1599 = "llvm.load"(%1595) : (!llvm.ptr) -> i64
    %1600 = "llvm.load"(%1596) : (!llvm.ptr) -> i64
    %1601 = "llvm.load"(%1597) : (!llvm.ptr) -> !llvm.ptr
    %1602 = "llvm.load"(%1598) : (!llvm.ptr) -> !llvm.ptr
    %1603 = "mini.addr_of"() {"global_name" = @Character} : () -> !llvm.ptr
    %1604 = "llvm.ptrtoint"(%1603) : (!llvm.ptr) -> i64
    %1605 = "llvm.mlir.constant"() <{"value" = 6681222582356018452 : i64}> : () -> i64
    %1606 = "mini.subtype"(%1601, %1600, %1599, %1605, %1604, %1602) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1606) [^bb143, ^bb144] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb144:
    %1607 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1608 = "llvm.load"(%1607) : (!llvm.ptr) -> !llvm.ptr
    %1609 = "llvm.getelementptr"(%1608) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1610 = "llvm.getelementptr"(%1608) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1611 = "llvm.getelementptr"(%1608) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1612 = "llvm.getelementptr"(%1608) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1613 = "llvm.load"(%1609) : (!llvm.ptr) -> i64
    %1614 = "llvm.load"(%1610) : (!llvm.ptr) -> i64
    %1615 = "llvm.load"(%1611) : (!llvm.ptr) -> !llvm.ptr
    %1616 = "llvm.load"(%1612) : (!llvm.ptr) -> !llvm.ptr
    %1617 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %1618 = "llvm.ptrtoint"(%1617) : (!llvm.ptr) -> i64
    %1619 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %1620 = "mini.subtype"(%1615, %1614, %1613, %1619, %1618, %1616) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1620) [^bb143, ^bb132] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb143:
    %1621 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1622 = "llvm.load"(%1621) : (!llvm.ptr) -> !llvm.ptr
    %1623 = "llvm.getelementptr"(%1622) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1624 = "llvm.getelementptr"(%1622) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1625 = "llvm.getelementptr"(%1622) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1626 = "llvm.getelementptr"(%1622) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1627 = "llvm.load"(%1623) : (!llvm.ptr) -> i64
    %1628 = "llvm.load"(%1624) : (!llvm.ptr) -> i64
    %1629 = "llvm.load"(%1625) : (!llvm.ptr) -> !llvm.ptr
    %1630 = "llvm.load"(%1626) : (!llvm.ptr) -> !llvm.ptr
    %1631 = "mini.addr_of"() {"global_name" = @Character} : () -> !llvm.ptr
    %1632 = "llvm.ptrtoint"(%1631) : (!llvm.ptr) -> i64
    %1633 = "llvm.mlir.constant"() <{"value" = 6681222582356018452 : i64}> : () -> i64
    %1634 = "mini.subtype"(%1629, %1628, %1627, %1633, %1632, %1630) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1634) [^bb145, ^bb133] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb145:
    %1635 = "llvm.getelementptr"(%1453) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1636 = "llvm.load"(%1635) : (!llvm.ptr) -> !llvm.ptr
    %1637 = "llvm.getelementptr"(%1636) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1638 = "llvm.getelementptr"(%1636) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1639 = "llvm.getelementptr"(%1636) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1640 = "llvm.getelementptr"(%1636) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1641 = "llvm.load"(%1637) : (!llvm.ptr) -> i64
    %1642 = "llvm.load"(%1638) : (!llvm.ptr) -> i64
    %1643 = "llvm.load"(%1639) : (!llvm.ptr) -> !llvm.ptr
    %1644 = "llvm.load"(%1640) : (!llvm.ptr) -> !llvm.ptr
    %1645 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %1646 = "llvm.ptrtoint"(%1645) : (!llvm.ptr) -> i64
    %1647 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %1648 = "mini.subtype"(%1643, %1642, %1641, %1647, %1646, %1644) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1648) [^bb133, ^bb133] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb125:
    %1649 = "mini.addr_of"() {"global_name" = @IO} : () -> !llvm.ptr
    %1650 = "llvm.load"(%1455) : (!llvm.ptr) -> i32
    %1651 = "llvm.getelementptr"(%1649, %1650) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1652 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %1653 = "llvm.getelementptr"(%1651, %1652) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1653) : (!llvm.ptr) -> ()
  }) {"func_name" = "IO_B__Self_print_xPtri8__Self_print_xPtri64__Self_print_xCharacter__Self_print_xPtrf64__Self_print_xPtri1__Self_print_xNil__Self_print_xPtri32__Self_print_xString__Self_print_xRepresentable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Blocking", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb146(%1654 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1655 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1656 : !llvm.ptr):
    %1657 = "mini.wrap"(%1654) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Blocking">
    %1658 = "mini.to_fat_ptr"(%1657) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Blocking", "to_typ_name" = "Blocking", "invariant"} : (!mini.fatptr<"Blocking">) -> !mini.fatptr<"Blocking">
  }) {"func_name" = "Blocking_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb147(%1659 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1660 : !llvm.ptr):
    %1661 = "mini.invariant"(%1660) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1662 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb148] : () -> ()
  ^bb148:
    %1663 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%1663, %1662) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb149] : () -> ()
  ^bb149:
    %1664 = "llvm.extractvalue"(%1659) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1665 = "llvm.load"(%1662) : (!llvm.ptr) -> i32
    %1666 = "llvm.getelementptr"(%1664, %1665) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1667 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %1668 = "llvm.getelementptr"(%1666, %1667) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1668) : (!llvm.ptr) -> ()
  }) {"func_name" = "Blocking_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Channel", "types" = [!llvm.struct<(!llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Channel_getter_value", "types" = [!llvm.struct<(!llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i32)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Ptri32_or_Nil"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Channel_setter_value", "types" = [!llvm.struct<(!llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i32)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Ptri32_or_Nil"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Channel_field_value", "getter_name" = "Channel_getter_value", "setter_name" = "Channel_setter_value"} : () -> ()
  "mini.func"() ({
  ^bb150(%1669 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1670 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1671 : !llvm.ptr):
    %1672 = "mini.wrap"(%1669) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel">
    %1673 = "mini.to_fat_ptr"(%1672) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Channel", "to_typ_name" = "Channel", "invariant"} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    %1674 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %1675 = "mini.unionize"(%1674) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.set_field"(%1673, %1675) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"Channel">, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "Channel_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb151(%1676 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1677 : !llvm.ptr):
    %1678 = "mini.invariant"(%1677) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1679 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb152] : () -> ()
  ^bb152:
    %1680 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%1680, %1679) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb153] : () -> ()
  ^bb153:
    %1681 = "llvm.extractvalue"(%1676) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1682 = "llvm.load"(%1679) : (!llvm.ptr) -> i32
    %1683 = "llvm.getelementptr"(%1681, %1682) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1684 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %1685 = "llvm.getelementptr"(%1683, %1684) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1685) : (!llvm.ptr) -> ()
  }) {"func_name" = "Channel_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb154(%1686 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1687 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1688 : !llvm.ptr):
    %1689 = "mini.wrap"(%1686) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel">
    %1690 = "mini.to_fat_ptr"(%1689) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Channel", "to_typ_name" = "Channel", "invariant"} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    "mini.while"() ({
      %1691 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
      %1692 = "mini.unwrap"(%1691) : (!mini.ptr<i1>) -> i1
    }, {
      %1693 = "mini.get_field"(%1690) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"Channel">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1694 = "mini.checkflag"(%1693) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %1695 = "mini.unwrap"(%1694) : (i1) -> i1
      %1696 = builtin.unrealized_conversion_cast %1693 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%1695) ({
        %1697 = "mini.narrow"(%1696) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %1698 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %1699 = "mini.unionize"(%1698) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        "mini.set_field"(%1690, %1699) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"Channel">, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
        %1700 = builtin.unrealized_conversion_cast %1697 : !mini.ptr<i32> to !mini.ptr<i32>
        "mini.return"(%1700) : (!mini.ptr<i32>) -> ()
        "mini.castassign"(%1696, %1697) ({
          %1701 = "mini.unionize"(%1697) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
      %1702 = "mini.new"() {"typ" = !llvm.struct<()>, "class_name" = "Blocking", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Blocking">
      %1703 = "mini.unwrap"(%1702) : (!mini.fatptr<"Blocking">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1704 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%1704, %1703) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1705 = builtin.unrealized_conversion_cast %1702 : !mini.fatptr<"Blocking"> to !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
      %1706 = "mini.unwrap"(%1705) : (!mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1707 = "mini.coro_yield"(%1706) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1708 = "mini.wrap"(%1707) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
    }) : () -> ()
  }) {"func_name" = "Channel_get_", "result_type" = i32, "yield_type" = !mini.fatptr<"Blocking">} : () -> ()
  "mini.func"() ({
  ^bb155(%1709 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1710 : !llvm.ptr):
    %1711 = "mini.invariant"(%1710) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1712 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb156] : () -> ()
  ^bb156:
    %1713 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%1713, %1712) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb157] : () -> ()
  ^bb157:
    %1714 = "llvm.extractvalue"(%1709) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1715 = "llvm.load"(%1712) : (!llvm.ptr) -> i32
    %1716 = "llvm.getelementptr"(%1714, %1715) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1717 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %1718 = "llvm.getelementptr"(%1716, %1717) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1718) : (!llvm.ptr) -> ()
  }) {"func_name" = "Channel_B_get_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb158(%1719 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1720 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1721 : !llvm.ptr, %1722 : i32):
    %1723 = "mini.wrap"(%1719) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel">
    %1724 = "mini.to_fat_ptr"(%1723) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Channel", "to_typ_name" = "Channel", "invariant"} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    %1725 = "mini.wrap"(%1722) : (i32) -> !mini.ptr<i32>
    %1726 = builtin.unrealized_conversion_cast %1725 : !mini.ptr<i32> to !mini.ptr<i32>
    %1727 = "mini.get_field"(%1724) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"Channel">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %1728 = builtin.unrealized_conversion_cast %1727 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.while"() ({
      %1729 = "mini.checkflag"(%1728) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %1730 = "mini.unwrap"(%1729) : (i1) -> i1
    }, {
      %1731 = "mini.narrow"(%1728) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %1732 = "mini.new"() {"typ" = !llvm.struct<()>, "class_name" = "Blocking", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Blocking">
      %1733 = "mini.unwrap"(%1732) : (!mini.fatptr<"Blocking">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1734 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%1734, %1733) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1735 = builtin.unrealized_conversion_cast %1732 : !mini.fatptr<"Blocking"> to !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
      %1736 = "mini.unwrap"(%1735) : (!mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1737 = "mini.coro_yield"(%1736) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1738 = "mini.wrap"(%1737) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
      %1739 = "mini.get_field"(%1724) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"Channel">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.castassign"(%1728, %1739) ({
        %1740 = builtin.unrealized_conversion_cast %1739 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : () -> ()
    %1741 = "mini.unionize"(%1726) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.set_field"(%1724, %1741) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"Channel">, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "Channel_put_new_valuePtri32", "result_type" = !llvm.void, "yield_type" = !mini.fatptr<"Blocking">} : () -> ()
  "mini.func"() ({
  ^bb159(%1742 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1743 : !llvm.ptr):
    %1744 = "mini.invariant"(%1743) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1745 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb160] : () -> ()
  ^bb161:
    %1746 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%1746, %1745) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb162] : () -> ()
  ^bb160:
    %1747 = "llvm.getelementptr"(%1743) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1748 = "llvm.load"(%1747) : (!llvm.ptr) -> !llvm.ptr
    %1749 = "llvm.getelementptr"(%1748) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1750 = "llvm.getelementptr"(%1748) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1751 = "llvm.getelementptr"(%1748) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1752 = "llvm.getelementptr"(%1748) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1753 = "llvm.load"(%1749) : (!llvm.ptr) -> i64
    %1754 = "llvm.load"(%1750) : (!llvm.ptr) -> i64
    %1755 = "llvm.load"(%1751) : (!llvm.ptr) -> !llvm.ptr
    %1756 = "llvm.load"(%1752) : (!llvm.ptr) -> !llvm.ptr
    %1757 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %1758 = "llvm.ptrtoint"(%1757) : (!llvm.ptr) -> i64
    %1759 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %1760 = "mini.subtype"(%1755, %1754, %1753, %1759, %1758, %1756) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1760) [^bb161, ^bb161] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb162:
    %1761 = "llvm.extractvalue"(%1742) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1762 = "llvm.load"(%1745) : (!llvm.ptr) -> i32
    %1763 = "llvm.getelementptr"(%1761, %1762) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1764 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %1765 = "llvm.getelementptr"(%1763, %1764) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1765) : (!llvm.ptr) -> ()
  }) {"func_name" = "Channel_B_put_new_valuePtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_IntIterator", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb163(%1766 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1767 : !llvm.ptr):
    %1768 = "mini.invariant"(%1767) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1769 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb164] : () -> ()
  ^bb164:
    %1770 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%1770, %1769) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb165] : () -> ()
  ^bb165:
    %1771 = "llvm.extractvalue"(%1766) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1772 = "llvm.load"(%1769) : (!llvm.ptr) -> i32
    %1773 = "llvm.getelementptr"(%1771, %1772) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1774 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %1775 = "llvm.getelementptr"(%1773, %1774) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1775) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_IntIterable", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb166(%1776 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1777 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1778 : !llvm.ptr, %1779 : !llvm.struct<(!llvm.ptr)>):
    %1780 = "mini.wrap"(%1776) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1781 = "mini.to_fat_ptr"(%1780) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1782 = "mini.wrap"(%1779) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>
    %1783 = builtin.unrealized_conversion_cast %1782 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>
    %1784 = "mini.unwrap"(%1781) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1785 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1786 = "mini.method_call"(%1785, %1784) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %1787 = "mini.to_fat_ptr"(%1786) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %1788 = "mini.to_fat_ptr"(%1787) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %1789 = "mini.refer"(%1788) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %1790 = "mini.unwrap"(%1789) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1791 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1792 = "mini.method_call"(%1791, %1790) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1793 = builtin.unrealized_conversion_cast %1792 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1794 = "mini.checkflag"(%1793) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %1795 = "mini.unwrap"(%1794) : (i1) -> i1
    }, {
      %1796 = "mini.narrow"(%1793) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %1797 = builtin.unrealized_conversion_cast %1796 : !mini.ptr<i32> to !mini.ptr<i32>
      %1798 = "mini.unwrap"(%1797) : (!mini.ptr<i32>) -> i32
      %1799 = "mini.unwrap"(%1783) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>) -> !llvm.ptr
      "mini.fptr_call"(%1799, %1798) {"ret_type" = !llvm.void} : (!llvm.ptr, i32) -> ()
      "mini.castassign"(%1793, %1796) ({
        %1800 = builtin.unrealized_conversion_cast %1796 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
  }) {"func_name" = "IntIterable_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb167(%1801 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1802 : !llvm.ptr):
    %1803 = "mini.invariant"(%1802) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1804 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb168] : () -> ()
  ^bb169:
    %1805 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%1805, %1804) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb170] : () -> ()
  ^bb168:
    %1806 = "llvm.getelementptr"(%1802) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1807 = "llvm.load"(%1806) : (!llvm.ptr) -> !llvm.ptr
    %1808 = "llvm.getelementptr"(%1807) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1809 = "llvm.getelementptr"(%1807) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1810 = "llvm.getelementptr"(%1807) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1811 = "llvm.getelementptr"(%1807) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1812 = "llvm.load"(%1808) : (!llvm.ptr) -> i64
    %1813 = "llvm.load"(%1809) : (!llvm.ptr) -> i64
    %1814 = "llvm.load"(%1810) : (!llvm.ptr) -> !llvm.ptr
    %1815 = "llvm.load"(%1811) : (!llvm.ptr) -> !llvm.ptr
    %1816 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %1817 = "llvm.ptrtoint"(%1816) : (!llvm.ptr) -> i64
    %1818 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %1819 = "mini.subtype"(%1814, %1813, %1812, %1818, %1817, %1815) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1819) [^bb169, ^bb169] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb170:
    %1820 = "llvm.extractvalue"(%1801) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1821 = "llvm.load"(%1804) : (!llvm.ptr) -> i32
    %1822 = "llvm.getelementptr"(%1820, %1821) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1823 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %1824 = "llvm.getelementptr"(%1822, %1823) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1824) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb171(%1825 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1826 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1827 : !llvm.ptr, %1828 : i32, %1829 : !llvm.struct<(!llvm.ptr)>):
    %1830 = "mini.wrap"(%1825) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1831 = "mini.to_fat_ptr"(%1830) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1832 = "mini.wrap"(%1828) : (i32) -> !mini.ptr<i32>
    %1833 = builtin.unrealized_conversion_cast %1832 : !mini.ptr<i32> to !mini.ptr<i32>
    %1834 = "mini.wrap"(%1829) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %1835 = builtin.unrealized_conversion_cast %1834 : !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %1836 = "mini.unwrap"(%1831) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1837 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1838 = "mini.method_call"(%1837, %1836) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %1839 = "mini.to_fat_ptr"(%1838) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %1840 = "mini.to_fat_ptr"(%1839) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %1841 = "mini.refer"(%1840) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %1842 = "mini.unwrap"(%1841) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1843 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1844 = "mini.method_call"(%1843, %1842) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1845 = builtin.unrealized_conversion_cast %1844 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1846 = "mini.checkflag"(%1845) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %1847 = "mini.unwrap"(%1846) : (i1) -> i1
    }, {
      %1848 = "mini.narrow"(%1845) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %1849 = builtin.unrealized_conversion_cast %1833 : !mini.ptr<i32> to !mini.ptr<i32>
      %1850 = "mini.unwrap"(%1849) : (!mini.ptr<i32>) -> i32
      %1851 = builtin.unrealized_conversion_cast %1848 : !mini.ptr<i32> to !mini.ptr<i32>
      %1852 = "mini.unwrap"(%1851) : (!mini.ptr<i32>) -> i32
      %1853 = "mini.unwrap"(%1835) : (!mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.ptr
      %1854 = "mini.fptr_call"(%1853, %1850, %1852) {"ret_type" = i32} : (!llvm.ptr, i32, i32) -> !mini.ptr<i32>
      "mini.castassign"(%1833, %1854) ({
        %1855 = builtin.unrealized_conversion_cast %1854 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      "mini.castassign"(%1845, %1848) ({
        %1856 = builtin.unrealized_conversion_cast %1848 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %1857 = builtin.unrealized_conversion_cast %1833 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%1857) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb172(%1858 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1859 : !llvm.ptr):
    %1860 = "mini.invariant"(%1859) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1861 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb173] : () -> ()
  ^bb174:
    %1862 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%1862, %1861) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb175] : () -> ()
  ^bb176:
    %1863 = "llvm.getelementptr"(%1859) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1864 = "llvm.load"(%1863) : (!llvm.ptr) -> !llvm.ptr
    %1865 = "llvm.getelementptr"(%1864) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1866 = "llvm.getelementptr"(%1864) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1867 = "llvm.getelementptr"(%1864) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1868 = "llvm.getelementptr"(%1864) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1869 = "llvm.load"(%1865) : (!llvm.ptr) -> i64
    %1870 = "llvm.load"(%1866) : (!llvm.ptr) -> i64
    %1871 = "llvm.load"(%1867) : (!llvm.ptr) -> !llvm.ptr
    %1872 = "llvm.load"(%1868) : (!llvm.ptr) -> !llvm.ptr
    %1873 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %1874 = "llvm.ptrtoint"(%1873) : (!llvm.ptr) -> i64
    %1875 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %1876 = "mini.subtype"(%1871, %1870, %1869, %1875, %1874, %1872) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1876) [^bb174, ^bb174] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb173:
    %1877 = "llvm.getelementptr"(%1859) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1878 = "llvm.load"(%1877) : (!llvm.ptr) -> !llvm.ptr
    %1879 = "llvm.getelementptr"(%1878) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1880 = "llvm.getelementptr"(%1878) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1881 = "llvm.getelementptr"(%1878) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1882 = "llvm.getelementptr"(%1878) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1883 = "llvm.load"(%1879) : (!llvm.ptr) -> i64
    %1884 = "llvm.load"(%1880) : (!llvm.ptr) -> i64
    %1885 = "llvm.load"(%1881) : (!llvm.ptr) -> !llvm.ptr
    %1886 = "llvm.load"(%1882) : (!llvm.ptr) -> !llvm.ptr
    %1887 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %1888 = "llvm.ptrtoint"(%1887) : (!llvm.ptr) -> i64
    %1889 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %1890 = "mini.subtype"(%1885, %1884, %1883, %1889, %1888, %1886) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1890) [^bb176, ^bb176] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb175:
    %1891 = "llvm.extractvalue"(%1858) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1892 = "llvm.load"(%1861) : (!llvm.ptr) -> i32
    %1893 = "llvm.getelementptr"(%1891, %1892) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1894 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %1895 = "llvm.getelementptr"(%1893, %1894) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1895) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb177(%1896 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1897 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1898 : !llvm.ptr, %1899 : !llvm.struct<(!llvm.ptr)>):
    %1900 = "mini.wrap"(%1896) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1901 = "mini.to_fat_ptr"(%1900) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1902 = "mini.wrap"(%1899) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %1903 = builtin.unrealized_conversion_cast %1902 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %1904 = "mini.unwrap"(%1901) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1905 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1906 = "mini.method_call"(%1905, %1904) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %1907 = "mini.to_fat_ptr"(%1906) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %1908 = "mini.to_fat_ptr"(%1907) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %1909 = "mini.refer"(%1908) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %1910 = "mini.unwrap"(%1909) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1911 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1912 = "mini.method_call"(%1911, %1910) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1913 = builtin.unrealized_conversion_cast %1912 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1914 = "mini.checkflag"(%1913) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %1915 = "mini.unwrap"(%1914) : (i1) -> i1
    }, {
      %1916 = "mini.narrow"(%1913) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %1917 = builtin.unrealized_conversion_cast %1916 : !mini.ptr<i32> to !mini.ptr<i32>
      %1918 = "mini.unwrap"(%1917) : (!mini.ptr<i32>) -> i32
      %1919 = "mini.unwrap"(%1903) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %1920 = "mini.fptr_call"(%1919, %1918) {"ret_type" = i1} : (!llvm.ptr, i32) -> !mini.ptr<i1>
      %1921 = "mini.unwrap"(%1920) : (!mini.ptr<i1>) -> i1
      "mini.if"(%1921) ({
        "mini.continue"() [^bb178] : () -> ()
      }) : (i1) -> ()
      %1922 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %1923 = builtin.unrealized_conversion_cast %1922 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.return"(%1923) : (!mini.ptr<i1>) -> ()
      "mini.castassign"(%1913, %1916) ({
        %1924 = builtin.unrealized_conversion_cast %1916 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %1925 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %1926 = builtin.unrealized_conversion_cast %1925 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%1926) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "IntIterable_all_fFunctionPtri32_to_Ptri1", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb179(%1927 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1928 : !llvm.ptr):
    %1929 = "mini.invariant"(%1928) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1930 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb180] : () -> ()
  ^bb181:
    %1931 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%1931, %1930) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb182] : () -> ()
  ^bb180:
    %1932 = "llvm.getelementptr"(%1928) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1933 = "llvm.load"(%1932) : (!llvm.ptr) -> !llvm.ptr
    %1934 = "llvm.getelementptr"(%1933) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1935 = "llvm.getelementptr"(%1933) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1936 = "llvm.getelementptr"(%1933) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1937 = "llvm.getelementptr"(%1933) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1938 = "llvm.load"(%1934) : (!llvm.ptr) -> i64
    %1939 = "llvm.load"(%1935) : (!llvm.ptr) -> i64
    %1940 = "llvm.load"(%1936) : (!llvm.ptr) -> !llvm.ptr
    %1941 = "llvm.load"(%1937) : (!llvm.ptr) -> !llvm.ptr
    %1942 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %1943 = "llvm.ptrtoint"(%1942) : (!llvm.ptr) -> i64
    %1944 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %1945 = "mini.subtype"(%1940, %1939, %1938, %1944, %1943, %1941) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1945) [^bb181, ^bb181] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb182:
    %1946 = "llvm.extractvalue"(%1927) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1947 = "llvm.load"(%1930) : (!llvm.ptr) -> i32
    %1948 = "llvm.getelementptr"(%1946, %1947) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1949 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %1950 = "llvm.getelementptr"(%1948, %1949) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1950) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb183(%1951 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1952 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1953 : !llvm.ptr, %1954 : !llvm.struct<(!llvm.ptr)>):
    %1955 = "mini.wrap"(%1951) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1956 = "mini.to_fat_ptr"(%1955) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1957 = "mini.wrap"(%1954) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %1958 = builtin.unrealized_conversion_cast %1957 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %1959 = "mini.unwrap"(%1956) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1960 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1961 = "mini.method_call"(%1960, %1959) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %1962 = "mini.to_fat_ptr"(%1961) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %1963 = "mini.to_fat_ptr"(%1962) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %1964 = "mini.refer"(%1963) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %1965 = "mini.unwrap"(%1964) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1966 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1967 = "mini.method_call"(%1966, %1965) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1968 = builtin.unrealized_conversion_cast %1967 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1969 = "mini.checkflag"(%1968) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %1970 = "mini.unwrap"(%1969) : (i1) -> i1
    }, {
      %1971 = "mini.narrow"(%1968) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %1972 = builtin.unrealized_conversion_cast %1971 : !mini.ptr<i32> to !mini.ptr<i32>
      %1973 = "mini.unwrap"(%1972) : (!mini.ptr<i32>) -> i32
      %1974 = "mini.unwrap"(%1958) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %1975 = "mini.fptr_call"(%1974, %1973) {"ret_type" = i1} : (!llvm.ptr, i32) -> !mini.ptr<i1>
      %1976 = "mini.unwrap"(%1975) : (!mini.ptr<i1>) -> i1
      "mini.if"(%1976) ({
        %1977 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
        %1978 = builtin.unrealized_conversion_cast %1977 : !mini.ptr<i1> to !mini.ptr<i1>
        "mini.return"(%1978) : (!mini.ptr<i1>) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%1968, %1971) ({
        %1979 = builtin.unrealized_conversion_cast %1971 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %1980 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %1981 = builtin.unrealized_conversion_cast %1980 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%1981) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "IntIterable_any_fFunctionPtri32_to_Ptri1", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb184(%1982 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1983 : !llvm.ptr):
    %1984 = "mini.invariant"(%1983) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1985 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb185] : () -> ()
  ^bb186:
    %1986 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%1986, %1985) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb187] : () -> ()
  ^bb185:
    %1987 = "llvm.getelementptr"(%1983) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %1988 = "llvm.load"(%1987) : (!llvm.ptr) -> !llvm.ptr
    %1989 = "llvm.getelementptr"(%1988) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1990 = "llvm.getelementptr"(%1988) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1991 = "llvm.getelementptr"(%1988) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1992 = "llvm.getelementptr"(%1988) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1993 = "llvm.load"(%1989) : (!llvm.ptr) -> i64
    %1994 = "llvm.load"(%1990) : (!llvm.ptr) -> i64
    %1995 = "llvm.load"(%1991) : (!llvm.ptr) -> !llvm.ptr
    %1996 = "llvm.load"(%1992) : (!llvm.ptr) -> !llvm.ptr
    %1997 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %1998 = "llvm.ptrtoint"(%1997) : (!llvm.ptr) -> i64
    %1999 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2000 = "mini.subtype"(%1995, %1994, %1993, %1999, %1998, %1996) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2000) [^bb186, ^bb186] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb187:
    %2001 = "llvm.extractvalue"(%1982) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2002 = "llvm.load"(%1985) : (!llvm.ptr) -> i32
    %2003 = "llvm.getelementptr"(%2001, %2002) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2004 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2005 = "llvm.getelementptr"(%2003, %2004) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2005) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb188(%2006 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2007 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2008 : !llvm.ptr, %2009 : !llvm.struct<(!llvm.ptr)>):
    %2010 = "mini.wrap"(%2006) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2011 = "mini.to_fat_ptr"(%2010) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2012 = "mini.wrap"(%2009) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2013 = builtin.unrealized_conversion_cast %2012 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2014 = "mini.unwrap"(%2011) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2015 = "mini.unwrap"(%2013) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %2016 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"MapIterable">
    %2017 = "mini.to_fat_ptr"(%2011) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2018 = "mini.unwrap"(%2017) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2019 = builtin.unrealized_conversion_cast %2013 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2020 = "mini.unwrap"(%2019) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %2021 = "mini.unwrap"(%2016) : (!mini.fatptr<"MapIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2022 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2023 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri32", ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %2024 = "mini.parameterizations_array"(%2022, %2023) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2024, %2021, %2018, %2020) {"offset" = 2 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %2025 = "mini.to_fat_ptr"(%2016) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%2025) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntIterable_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb189(%2026 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2027 : !llvm.ptr):
    %2028 = "mini.invariant"(%2027) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2029 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb190] : () -> ()
  ^bb191:
    %2030 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%2030, %2029) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb192] : () -> ()
  ^bb190:
    %2031 = "llvm.getelementptr"(%2027) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2032 = "llvm.load"(%2031) : (!llvm.ptr) -> !llvm.ptr
    %2033 = "llvm.getelementptr"(%2032) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2034 = "llvm.getelementptr"(%2032) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2035 = "llvm.getelementptr"(%2032) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2036 = "llvm.getelementptr"(%2032) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2037 = "llvm.load"(%2033) : (!llvm.ptr) -> i64
    %2038 = "llvm.load"(%2034) : (!llvm.ptr) -> i64
    %2039 = "llvm.load"(%2035) : (!llvm.ptr) -> !llvm.ptr
    %2040 = "llvm.load"(%2036) : (!llvm.ptr) -> !llvm.ptr
    %2041 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2042 = "llvm.ptrtoint"(%2041) : (!llvm.ptr) -> i64
    %2043 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2044 = "mini.subtype"(%2039, %2038, %2037, %2043, %2042, %2040) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2044) [^bb191, ^bb191] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb192:
    %2045 = "llvm.extractvalue"(%2026) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2046 = "llvm.load"(%2029) : (!llvm.ptr) -> i32
    %2047 = "llvm.getelementptr"(%2045, %2046) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2048 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2049 = "llvm.getelementptr"(%2047, %2048) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2049) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb193(%2050 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2051 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2052 : !llvm.ptr, %2053 : !llvm.struct<(!llvm.ptr)>):
    %2054 = "mini.wrap"(%2050) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2055 = "mini.to_fat_ptr"(%2054) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2056 = "mini.wrap"(%2053) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2057 = builtin.unrealized_conversion_cast %2056 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2058 = "mini.unwrap"(%2055) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2059 = "mini.unwrap"(%2057) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %2060 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"FilterIterable">
    %2061 = "mini.to_fat_ptr"(%2055) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2062 = "mini.unwrap"(%2061) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2063 = builtin.unrealized_conversion_cast %2057 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2064 = "mini.unwrap"(%2063) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %2065 = "mini.unwrap"(%2060) : (!mini.fatptr<"FilterIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2066 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2067 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri1", ["Ptri1"], ["Ptri32"]]} : () -> !llvm.ptr
    %2068 = "mini.parameterizations_array"(%2066, %2067) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2068, %2065, %2062, %2064) {"offset" = 2 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %2069 = "mini.to_fat_ptr"(%2060) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%2069) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntIterable_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb194(%2070 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2071 : !llvm.ptr):
    %2072 = "mini.invariant"(%2071) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2073 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb195] : () -> ()
  ^bb196:
    %2074 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%2074, %2073) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb197] : () -> ()
  ^bb195:
    %2075 = "llvm.getelementptr"(%2071) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2076 = "llvm.load"(%2075) : (!llvm.ptr) -> !llvm.ptr
    %2077 = "llvm.getelementptr"(%2076) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2078 = "llvm.getelementptr"(%2076) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2079 = "llvm.getelementptr"(%2076) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2080 = "llvm.getelementptr"(%2076) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2081 = "llvm.load"(%2077) : (!llvm.ptr) -> i64
    %2082 = "llvm.load"(%2078) : (!llvm.ptr) -> i64
    %2083 = "llvm.load"(%2079) : (!llvm.ptr) -> !llvm.ptr
    %2084 = "llvm.load"(%2080) : (!llvm.ptr) -> !llvm.ptr
    %2085 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2086 = "llvm.ptrtoint"(%2085) : (!llvm.ptr) -> i64
    %2087 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2088 = "mini.subtype"(%2083, %2082, %2081, %2087, %2086, %2084) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2088) [^bb196, ^bb196] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb197:
    %2089 = "llvm.extractvalue"(%2070) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2090 = "llvm.load"(%2073) : (!llvm.ptr) -> i32
    %2091 = "llvm.getelementptr"(%2089, %2090) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2092 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2093 = "llvm.getelementptr"(%2091, %2092) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2093) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb198(%2094 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2095 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2096 : !llvm.ptr, %2097 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2098 = "mini.wrap"(%2094) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2099 = "mini.to_fat_ptr"(%2098) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2100 = "mini.wrap"(%2097) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2101 = "mini.to_fat_ptr"(%2100) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2102 = "mini.unwrap"(%2099) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2103 = "mini.unwrap"(%2101) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2104 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ChainIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ChainIterable">
    %2105 = "mini.to_fat_ptr"(%2099) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2106 = "mini.unwrap"(%2105) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2107 = "mini.to_fat_ptr"(%2101) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2108 = "mini.unwrap"(%2107) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2109 = "mini.unwrap"(%2104) : (!mini.fatptr<"ChainIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2110 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2111 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2112 = "mini.parameterizations_array"(%2110, %2111) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2112, %2109, %2106, %2108) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %2113 = "mini.to_fat_ptr"(%2104) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%2113) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntIterable_chain_otherIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb199(%2114 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2115 : !llvm.ptr):
    %2116 = "mini.invariant"(%2115) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2117 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb200] : () -> ()
  ^bb201:
    %2118 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%2118, %2117) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb202] : () -> ()
  ^bb200:
    %2119 = "llvm.getelementptr"(%2115) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2120 = "llvm.load"(%2119) : (!llvm.ptr) -> !llvm.ptr
    %2121 = "llvm.getelementptr"(%2120) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2122 = "llvm.getelementptr"(%2120) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2123 = "llvm.getelementptr"(%2120) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2124 = "llvm.getelementptr"(%2120) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2125 = "llvm.load"(%2121) : (!llvm.ptr) -> i64
    %2126 = "llvm.load"(%2122) : (!llvm.ptr) -> i64
    %2127 = "llvm.load"(%2123) : (!llvm.ptr) -> !llvm.ptr
    %2128 = "llvm.load"(%2124) : (!llvm.ptr) -> !llvm.ptr
    %2129 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2130 = "llvm.ptrtoint"(%2129) : (!llvm.ptr) -> i64
    %2131 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2132 = "mini.subtype"(%2127, %2126, %2125, %2131, %2130, %2128) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2132) [^bb201, ^bb201] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb202:
    %2133 = "llvm.extractvalue"(%2114) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2134 = "llvm.load"(%2117) : (!llvm.ptr) -> i32
    %2135 = "llvm.getelementptr"(%2133, %2134) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2136 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2137 = "llvm.getelementptr"(%2135, %2136) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2137) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb203(%2138 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2139 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2140 : !llvm.ptr, %2141 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2142 = "mini.wrap"(%2138) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2143 = "mini.to_fat_ptr"(%2142) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2144 = "mini.wrap"(%2141) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2145 = "mini.to_fat_ptr"(%2144) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2146 = "mini.unwrap"(%2143) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2147 = "mini.unwrap"(%2145) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2148 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "InterleaveIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"InterleaveIterable">
    %2149 = "mini.to_fat_ptr"(%2143) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2150 = "mini.unwrap"(%2149) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2151 = "mini.to_fat_ptr"(%2145) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2152 = "mini.unwrap"(%2151) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2153 = "mini.unwrap"(%2148) : (!mini.fatptr<"InterleaveIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2154 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2155 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2156 = "mini.parameterizations_array"(%2154, %2155) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2156, %2153, %2150, %2152) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %2157 = "mini.to_fat_ptr"(%2148) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%2157) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntIterable_interleave_otherIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb204(%2158 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2159 : !llvm.ptr):
    %2160 = "mini.invariant"(%2159) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2161 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb205] : () -> ()
  ^bb206:
    %2162 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%2162, %2161) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb207] : () -> ()
  ^bb205:
    %2163 = "llvm.getelementptr"(%2159) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2164 = "llvm.load"(%2163) : (!llvm.ptr) -> !llvm.ptr
    %2165 = "llvm.getelementptr"(%2164) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2166 = "llvm.getelementptr"(%2164) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2167 = "llvm.getelementptr"(%2164) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2168 = "llvm.getelementptr"(%2164) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2169 = "llvm.load"(%2165) : (!llvm.ptr) -> i64
    %2170 = "llvm.load"(%2166) : (!llvm.ptr) -> i64
    %2171 = "llvm.load"(%2167) : (!llvm.ptr) -> !llvm.ptr
    %2172 = "llvm.load"(%2168) : (!llvm.ptr) -> !llvm.ptr
    %2173 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2174 = "llvm.ptrtoint"(%2173) : (!llvm.ptr) -> i64
    %2175 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2176 = "mini.subtype"(%2171, %2170, %2169, %2175, %2174, %2172) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2176) [^bb206, ^bb206] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb207:
    %2177 = "llvm.extractvalue"(%2158) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2178 = "llvm.load"(%2161) : (!llvm.ptr) -> i32
    %2179 = "llvm.getelementptr"(%2177, %2178) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2180 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2181 = "llvm.getelementptr"(%2179, %2180) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2181) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb208(%2182 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2183 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2184 : !llvm.ptr, %2185 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2186 = "mini.wrap"(%2182) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2187 = "mini.to_fat_ptr"(%2186) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2188 = "mini.wrap"(%2185) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2189 = "mini.to_fat_ptr"(%2188) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2190 = "mini.unwrap"(%2187) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2191 = "mini.unwrap"(%2189) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2192 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ZipIterable">
    %2193 = "mini.to_fat_ptr"(%2187) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2194 = "mini.unwrap"(%2193) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2195 = "mini.to_fat_ptr"(%2189) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2196 = "mini.unwrap"(%2195) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2197 = "mini.unwrap"(%2192) : (!mini.fatptr<"ZipIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2198 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2199 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2200 = "mini.parameterizations_array"(%2198, %2199) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2200, %2197, %2194, %2196) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %2201 = "mini.to_fat_ptr"(%2192) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable", "invariant"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"ZipIterable">
    "mini.return"(%2201) : (!mini.fatptr<"ZipIterable">) -> ()
  }) {"func_name" = "IntIterable_zip_otherIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb209(%2202 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2203 : !llvm.ptr):
    %2204 = "mini.invariant"(%2203) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2205 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb210] : () -> ()
  ^bb211:
    %2206 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%2206, %2205) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb212] : () -> ()
  ^bb210:
    %2207 = "llvm.getelementptr"(%2203) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2208 = "llvm.load"(%2207) : (!llvm.ptr) -> !llvm.ptr
    %2209 = "llvm.getelementptr"(%2208) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2210 = "llvm.getelementptr"(%2208) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2211 = "llvm.getelementptr"(%2208) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2212 = "llvm.getelementptr"(%2208) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2213 = "llvm.load"(%2209) : (!llvm.ptr) -> i64
    %2214 = "llvm.load"(%2210) : (!llvm.ptr) -> i64
    %2215 = "llvm.load"(%2211) : (!llvm.ptr) -> !llvm.ptr
    %2216 = "llvm.load"(%2212) : (!llvm.ptr) -> !llvm.ptr
    %2217 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2218 = "llvm.ptrtoint"(%2217) : (!llvm.ptr) -> i64
    %2219 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2220 = "mini.subtype"(%2215, %2214, %2213, %2219, %2218, %2216) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2220) [^bb211, ^bb211] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb212:
    %2221 = "llvm.extractvalue"(%2202) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2222 = "llvm.load"(%2205) : (!llvm.ptr) -> i32
    %2223 = "llvm.getelementptr"(%2221, %2222) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2224 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2225 = "llvm.getelementptr"(%2223, %2224) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2225) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb213(%2226 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2227 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2228 : !llvm.ptr, %2229 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2230 = "mini.wrap"(%2226) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2231 = "mini.to_fat_ptr"(%2230) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2232 = "mini.wrap"(%2229) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2233 = "mini.to_fat_ptr"(%2232) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2234 = "mini.unwrap"(%2231) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2235 = "mini.unwrap"(%2233) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2236 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ProductIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ProductIterable">
    %2237 = "mini.to_fat_ptr"(%2231) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2238 = "mini.unwrap"(%2237) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2239 = "mini.to_fat_ptr"(%2233) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2240 = "mini.unwrap"(%2239) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2241 = "mini.unwrap"(%2236) : (!mini.fatptr<"ProductIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2242 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2243 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2244 = "mini.parameterizations_array"(%2242, %2243) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2244, %2241, %2238, %2240) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %2245 = "mini.to_fat_ptr"(%2236) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable", "invariant"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"ProductIterable">
    "mini.return"(%2245) : (!mini.fatptr<"ProductIterable">) -> ()
  }) {"func_name" = "IntIterable_product_otherIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb214(%2246 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2247 : !llvm.ptr):
    %2248 = "mini.invariant"(%2247) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2249 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb215] : () -> ()
  ^bb216:
    %2250 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%2250, %2249) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb217] : () -> ()
  ^bb215:
    %2251 = "llvm.getelementptr"(%2247) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2252 = "llvm.load"(%2251) : (!llvm.ptr) -> !llvm.ptr
    %2253 = "llvm.getelementptr"(%2252) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2254 = "llvm.getelementptr"(%2252) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2255 = "llvm.getelementptr"(%2252) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2256 = "llvm.getelementptr"(%2252) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2257 = "llvm.load"(%2253) : (!llvm.ptr) -> i64
    %2258 = "llvm.load"(%2254) : (!llvm.ptr) -> i64
    %2259 = "llvm.load"(%2255) : (!llvm.ptr) -> !llvm.ptr
    %2260 = "llvm.load"(%2256) : (!llvm.ptr) -> !llvm.ptr
    %2261 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2262 = "llvm.ptrtoint"(%2261) : (!llvm.ptr) -> i64
    %2263 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2264 = "mini.subtype"(%2259, %2258, %2257, %2263, %2262, %2260) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2264) [^bb216, ^bb216] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb217:
    %2265 = "llvm.extractvalue"(%2246) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2266 = "llvm.load"(%2249) : (!llvm.ptr) -> i32
    %2267 = "llvm.getelementptr"(%2265, %2266) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2268 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2269 = "llvm.getelementptr"(%2267, %2268) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2269) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb218(%2270 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2271 : !llvm.ptr):
    %2272 = "mini.invariant"(%2271) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2273 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb219] : () -> ()
  ^bb219:
    %2274 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%2274, %2273) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb220] : () -> ()
  ^bb220:
    %2275 = "llvm.extractvalue"(%2270) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2276 = "llvm.load"(%2273) : (!llvm.ptr) -> i32
    %2277 = "llvm.getelementptr"(%2275, %2276) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2278 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2279 = "llvm.getelementptr"(%2277, %2278) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2279) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_MapIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterable_getter_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterable_setter_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterable_field_iterable", "getter_name" = "MapIterable_getter_iterable", "setter_name" = "MapIterable_setter_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterable_getter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterable_setter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterable_field_f", "getter_name" = "MapIterable_getter_f", "setter_name" = "MapIterable_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb221(%2280 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2281 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2282 : !llvm.ptr, %2283 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2284 : !llvm.struct<(!llvm.ptr)>):
    %2285 = "mini.wrap"(%2280) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterable">
    %2286 = "mini.to_fat_ptr"(%2285) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable", "invariant"} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"MapIterable">
    %2287 = "mini.wrap"(%2283) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2288 = "mini.to_fat_ptr"(%2287) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2289 = "mini.to_fat_ptr"(%2288) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%2286, %2289) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"MapIterable">, !mini.fatptr<"IntIterable">) -> ()
    %2290 = "mini.wrap"(%2284) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2291 = builtin.unrealized_conversion_cast %2290 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2292 = builtin.unrealized_conversion_cast %2291 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    "mini.set_field"(%2286, %2292) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable">, !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> ()
  }) {"func_name" = "MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb222(%2293 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2294 : !llvm.ptr):
    %2295 = "mini.invariant"(%2294) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2296 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb223] : () -> ()
  ^bb224:
    %2297 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%2297, %2296) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb225] : () -> ()
  ^bb226:
    %2298 = "llvm.getelementptr"(%2294) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2299 = "llvm.load"(%2298) : (!llvm.ptr) -> !llvm.ptr
    %2300 = "llvm.getelementptr"(%2299) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2301 = "llvm.getelementptr"(%2299) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2302 = "llvm.getelementptr"(%2299) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2303 = "llvm.getelementptr"(%2299) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2304 = "llvm.load"(%2300) : (!llvm.ptr) -> i64
    %2305 = "llvm.load"(%2301) : (!llvm.ptr) -> i64
    %2306 = "llvm.load"(%2302) : (!llvm.ptr) -> !llvm.ptr
    %2307 = "llvm.load"(%2303) : (!llvm.ptr) -> !llvm.ptr
    %2308 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2309 = "llvm.ptrtoint"(%2308) : (!llvm.ptr) -> i64
    %2310 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2311 = "mini.subtype"(%2306, %2305, %2304, %2310, %2309, %2307) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2311) [^bb224, ^bb224] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb223:
    %2312 = "llvm.getelementptr"(%2294) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2313 = "llvm.load"(%2312) : (!llvm.ptr) -> !llvm.ptr
    %2314 = "llvm.getelementptr"(%2313) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2315 = "llvm.getelementptr"(%2313) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2316 = "llvm.getelementptr"(%2313) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2317 = "llvm.getelementptr"(%2313) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2318 = "llvm.load"(%2314) : (!llvm.ptr) -> i64
    %2319 = "llvm.load"(%2315) : (!llvm.ptr) -> i64
    %2320 = "llvm.load"(%2316) : (!llvm.ptr) -> !llvm.ptr
    %2321 = "llvm.load"(%2317) : (!llvm.ptr) -> !llvm.ptr
    %2322 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2323 = "llvm.ptrtoint"(%2322) : (!llvm.ptr) -> i64
    %2324 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2325 = "mini.subtype"(%2320, %2319, %2318, %2324, %2323, %2321) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2325) [^bb226, ^bb226] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb225:
    %2326 = "llvm.extractvalue"(%2293) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2327 = "llvm.load"(%2296) : (!llvm.ptr) -> i32
    %2328 = "llvm.getelementptr"(%2326, %2327) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2329 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2330 = "llvm.getelementptr"(%2328, %2329) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2330) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb227(%2331 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2332 : !llvm.ptr):
    %2333 = "mini.invariant"(%2332) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2334 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb228] : () -> ()
  ^bb229:
    %2335 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%2335, %2334) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb230] : () -> ()
  ^bb228:
    %2336 = "llvm.getelementptr"(%2332) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2337 = "llvm.load"(%2336) : (!llvm.ptr) -> !llvm.ptr
    %2338 = "llvm.getelementptr"(%2337) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2339 = "llvm.getelementptr"(%2337) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2340 = "llvm.getelementptr"(%2337) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2341 = "llvm.getelementptr"(%2337) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2342 = "llvm.load"(%2338) : (!llvm.ptr) -> i64
    %2343 = "llvm.load"(%2339) : (!llvm.ptr) -> i64
    %2344 = "llvm.load"(%2340) : (!llvm.ptr) -> !llvm.ptr
    %2345 = "llvm.load"(%2341) : (!llvm.ptr) -> !llvm.ptr
    %2346 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2347 = "llvm.ptrtoint"(%2346) : (!llvm.ptr) -> i64
    %2348 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2349 = "mini.subtype"(%2344, %2343, %2342, %2348, %2347, %2345) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2349) [^bb229, ^bb229] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb230:
    %2350 = "llvm.extractvalue"(%2331) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2351 = "llvm.load"(%2334) : (!llvm.ptr) -> i32
    %2352 = "llvm.getelementptr"(%2350, %2351) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2353 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2354 = "llvm.getelementptr"(%2352, %2353) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2354) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb231(%2355 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2356 : !llvm.ptr):
    %2357 = "mini.invariant"(%2356) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2358 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb232] : () -> ()
  ^bb233:
    %2359 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%2359, %2358) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb234] : () -> ()
  ^bb235:
    %2360 = "llvm.getelementptr"(%2356) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2361 = "llvm.load"(%2360) : (!llvm.ptr) -> !llvm.ptr
    %2362 = "llvm.getelementptr"(%2361) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2363 = "llvm.getelementptr"(%2361) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2364 = "llvm.getelementptr"(%2361) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2365 = "llvm.getelementptr"(%2361) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2366 = "llvm.load"(%2362) : (!llvm.ptr) -> i64
    %2367 = "llvm.load"(%2363) : (!llvm.ptr) -> i64
    %2368 = "llvm.load"(%2364) : (!llvm.ptr) -> !llvm.ptr
    %2369 = "llvm.load"(%2365) : (!llvm.ptr) -> !llvm.ptr
    %2370 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2371 = "llvm.ptrtoint"(%2370) : (!llvm.ptr) -> i64
    %2372 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2373 = "mini.subtype"(%2368, %2367, %2366, %2372, %2371, %2369) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2373) [^bb233, ^bb233] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb232:
    %2374 = "llvm.getelementptr"(%2356) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2375 = "llvm.load"(%2374) : (!llvm.ptr) -> !llvm.ptr
    %2376 = "llvm.getelementptr"(%2375) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2377 = "llvm.getelementptr"(%2375) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2378 = "llvm.getelementptr"(%2375) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2379 = "llvm.getelementptr"(%2375) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2380 = "llvm.load"(%2376) : (!llvm.ptr) -> i64
    %2381 = "llvm.load"(%2377) : (!llvm.ptr) -> i64
    %2382 = "llvm.load"(%2378) : (!llvm.ptr) -> !llvm.ptr
    %2383 = "llvm.load"(%2379) : (!llvm.ptr) -> !llvm.ptr
    %2384 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %2385 = "llvm.ptrtoint"(%2384) : (!llvm.ptr) -> i64
    %2386 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %2387 = "mini.subtype"(%2382, %2381, %2380, %2386, %2385, %2383) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2387) [^bb235, ^bb235] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb234:
    %2388 = "llvm.extractvalue"(%2355) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2389 = "llvm.load"(%2358) : (!llvm.ptr) -> i32
    %2390 = "llvm.getelementptr"(%2388, %2389) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2391 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2392 = "llvm.getelementptr"(%2390, %2391) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2392) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb236(%2393 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2394 : !llvm.ptr):
    %2395 = "mini.invariant"(%2394) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2396 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb237] : () -> ()
  ^bb238:
    %2397 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%2397, %2396) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb239] : () -> ()
  ^bb237:
    %2398 = "llvm.getelementptr"(%2394) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2399 = "llvm.load"(%2398) : (!llvm.ptr) -> !llvm.ptr
    %2400 = "llvm.getelementptr"(%2399) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2401 = "llvm.getelementptr"(%2399) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2402 = "llvm.getelementptr"(%2399) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2403 = "llvm.getelementptr"(%2399) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2404 = "llvm.load"(%2400) : (!llvm.ptr) -> i64
    %2405 = "llvm.load"(%2401) : (!llvm.ptr) -> i64
    %2406 = "llvm.load"(%2402) : (!llvm.ptr) -> !llvm.ptr
    %2407 = "llvm.load"(%2403) : (!llvm.ptr) -> !llvm.ptr
    %2408 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2409 = "llvm.ptrtoint"(%2408) : (!llvm.ptr) -> i64
    %2410 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2411 = "mini.subtype"(%2406, %2405, %2404, %2410, %2409, %2407) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2411) [^bb238, ^bb238] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb239:
    %2412 = "llvm.extractvalue"(%2393) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2413 = "llvm.load"(%2396) : (!llvm.ptr) -> i32
    %2414 = "llvm.getelementptr"(%2412, %2413) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2415 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2416 = "llvm.getelementptr"(%2414, %2415) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2416) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb240(%2417 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2418 : !llvm.ptr):
    %2419 = "mini.invariant"(%2418) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2420 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb241] : () -> ()
  ^bb242:
    %2421 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%2421, %2420) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb243] : () -> ()
  ^bb241:
    %2422 = "llvm.getelementptr"(%2418) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2423 = "llvm.load"(%2422) : (!llvm.ptr) -> !llvm.ptr
    %2424 = "llvm.getelementptr"(%2423) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2425 = "llvm.getelementptr"(%2423) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2426 = "llvm.getelementptr"(%2423) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2427 = "llvm.getelementptr"(%2423) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2428 = "llvm.load"(%2424) : (!llvm.ptr) -> i64
    %2429 = "llvm.load"(%2425) : (!llvm.ptr) -> i64
    %2430 = "llvm.load"(%2426) : (!llvm.ptr) -> !llvm.ptr
    %2431 = "llvm.load"(%2427) : (!llvm.ptr) -> !llvm.ptr
    %2432 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2433 = "llvm.ptrtoint"(%2432) : (!llvm.ptr) -> i64
    %2434 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2435 = "mini.subtype"(%2430, %2429, %2428, %2434, %2433, %2431) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2435) [^bb242, ^bb242] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb243:
    %2436 = "llvm.extractvalue"(%2417) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2437 = "llvm.load"(%2420) : (!llvm.ptr) -> i32
    %2438 = "llvm.getelementptr"(%2436, %2437) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2439 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2440 = "llvm.getelementptr"(%2438, %2439) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2440) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb244(%2441 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2442 : !llvm.ptr):
    %2443 = "mini.invariant"(%2442) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2444 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb245] : () -> ()
  ^bb246:
    %2445 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%2445, %2444) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb247] : () -> ()
  ^bb245:
    %2446 = "llvm.getelementptr"(%2442) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2447 = "llvm.load"(%2446) : (!llvm.ptr) -> !llvm.ptr
    %2448 = "llvm.getelementptr"(%2447) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2449 = "llvm.getelementptr"(%2447) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2450 = "llvm.getelementptr"(%2447) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2451 = "llvm.getelementptr"(%2447) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2452 = "llvm.load"(%2448) : (!llvm.ptr) -> i64
    %2453 = "llvm.load"(%2449) : (!llvm.ptr) -> i64
    %2454 = "llvm.load"(%2450) : (!llvm.ptr) -> !llvm.ptr
    %2455 = "llvm.load"(%2451) : (!llvm.ptr) -> !llvm.ptr
    %2456 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2457 = "llvm.ptrtoint"(%2456) : (!llvm.ptr) -> i64
    %2458 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2459 = "mini.subtype"(%2454, %2453, %2452, %2458, %2457, %2455) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2459) [^bb246, ^bb246] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb247:
    %2460 = "llvm.extractvalue"(%2441) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2461 = "llvm.load"(%2444) : (!llvm.ptr) -> i32
    %2462 = "llvm.getelementptr"(%2460, %2461) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2463 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2464 = "llvm.getelementptr"(%2462, %2463) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2464) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb248(%2465 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2466 : !llvm.ptr):
    %2467 = "mini.invariant"(%2466) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2468 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb249] : () -> ()
  ^bb250:
    %2469 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%2469, %2468) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb251] : () -> ()
  ^bb249:
    %2470 = "llvm.getelementptr"(%2466) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2471 = "llvm.load"(%2470) : (!llvm.ptr) -> !llvm.ptr
    %2472 = "llvm.getelementptr"(%2471) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2473 = "llvm.getelementptr"(%2471) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2474 = "llvm.getelementptr"(%2471) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2475 = "llvm.getelementptr"(%2471) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2476 = "llvm.load"(%2472) : (!llvm.ptr) -> i64
    %2477 = "llvm.load"(%2473) : (!llvm.ptr) -> i64
    %2478 = "llvm.load"(%2474) : (!llvm.ptr) -> !llvm.ptr
    %2479 = "llvm.load"(%2475) : (!llvm.ptr) -> !llvm.ptr
    %2480 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2481 = "llvm.ptrtoint"(%2480) : (!llvm.ptr) -> i64
    %2482 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2483 = "mini.subtype"(%2478, %2477, %2476, %2482, %2481, %2479) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2483) [^bb250, ^bb250] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb251:
    %2484 = "llvm.extractvalue"(%2465) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2485 = "llvm.load"(%2468) : (!llvm.ptr) -> i32
    %2486 = "llvm.getelementptr"(%2484, %2485) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2487 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2488 = "llvm.getelementptr"(%2486, %2487) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2488) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb252(%2489 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2490 : !llvm.ptr):
    %2491 = "mini.invariant"(%2490) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2492 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb253] : () -> ()
  ^bb254:
    %2493 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%2493, %2492) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb255] : () -> ()
  ^bb253:
    %2494 = "llvm.getelementptr"(%2490) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2495 = "llvm.load"(%2494) : (!llvm.ptr) -> !llvm.ptr
    %2496 = "llvm.getelementptr"(%2495) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2497 = "llvm.getelementptr"(%2495) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2498 = "llvm.getelementptr"(%2495) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2499 = "llvm.getelementptr"(%2495) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2500 = "llvm.load"(%2496) : (!llvm.ptr) -> i64
    %2501 = "llvm.load"(%2497) : (!llvm.ptr) -> i64
    %2502 = "llvm.load"(%2498) : (!llvm.ptr) -> !llvm.ptr
    %2503 = "llvm.load"(%2499) : (!llvm.ptr) -> !llvm.ptr
    %2504 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2505 = "llvm.ptrtoint"(%2504) : (!llvm.ptr) -> i64
    %2506 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2507 = "mini.subtype"(%2502, %2501, %2500, %2506, %2505, %2503) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2507) [^bb254, ^bb254] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb255:
    %2508 = "llvm.extractvalue"(%2489) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2509 = "llvm.load"(%2492) : (!llvm.ptr) -> i32
    %2510 = "llvm.getelementptr"(%2508, %2509) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2511 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2512 = "llvm.getelementptr"(%2510, %2511) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2512) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb256(%2513 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2514 : !llvm.ptr):
    %2515 = "mini.invariant"(%2514) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2516 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb257] : () -> ()
  ^bb258:
    %2517 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%2517, %2516) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb259] : () -> ()
  ^bb257:
    %2518 = "llvm.getelementptr"(%2514) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2519 = "llvm.load"(%2518) : (!llvm.ptr) -> !llvm.ptr
    %2520 = "llvm.getelementptr"(%2519) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2521 = "llvm.getelementptr"(%2519) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2522 = "llvm.getelementptr"(%2519) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2523 = "llvm.getelementptr"(%2519) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2524 = "llvm.load"(%2520) : (!llvm.ptr) -> i64
    %2525 = "llvm.load"(%2521) : (!llvm.ptr) -> i64
    %2526 = "llvm.load"(%2522) : (!llvm.ptr) -> !llvm.ptr
    %2527 = "llvm.load"(%2523) : (!llvm.ptr) -> !llvm.ptr
    %2528 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2529 = "llvm.ptrtoint"(%2528) : (!llvm.ptr) -> i64
    %2530 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2531 = "mini.subtype"(%2526, %2525, %2524, %2530, %2529, %2527) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2531) [^bb258, ^bb258] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb259:
    %2532 = "llvm.extractvalue"(%2513) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2533 = "llvm.load"(%2516) : (!llvm.ptr) -> i32
    %2534 = "llvm.getelementptr"(%2532, %2533) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2535 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2536 = "llvm.getelementptr"(%2534, %2535) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2536) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb260(%2537 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2538 : !llvm.ptr):
    %2539 = "mini.invariant"(%2538) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2540 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb261] : () -> ()
  ^bb262:
    %2541 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%2541, %2540) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb263] : () -> ()
  ^bb261:
    %2542 = "llvm.getelementptr"(%2538) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2543 = "llvm.load"(%2542) : (!llvm.ptr) -> !llvm.ptr
    %2544 = "llvm.getelementptr"(%2543) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2545 = "llvm.getelementptr"(%2543) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2546 = "llvm.getelementptr"(%2543) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2547 = "llvm.getelementptr"(%2543) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2548 = "llvm.load"(%2544) : (!llvm.ptr) -> i64
    %2549 = "llvm.load"(%2545) : (!llvm.ptr) -> i64
    %2550 = "llvm.load"(%2546) : (!llvm.ptr) -> !llvm.ptr
    %2551 = "llvm.load"(%2547) : (!llvm.ptr) -> !llvm.ptr
    %2552 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2553 = "llvm.ptrtoint"(%2552) : (!llvm.ptr) -> i64
    %2554 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2555 = "mini.subtype"(%2550, %2549, %2548, %2554, %2553, %2551) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2555) [^bb262, ^bb262] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb263:
    %2556 = "llvm.extractvalue"(%2537) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2557 = "llvm.load"(%2540) : (!llvm.ptr) -> i32
    %2558 = "llvm.getelementptr"(%2556, %2557) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2559 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2560 = "llvm.getelementptr"(%2558, %2559) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2560) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb264(%2561 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2562 : !llvm.ptr):
    %2563 = "mini.invariant"(%2562) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2564 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb265] : () -> ()
  ^bb266:
    %2565 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%2565, %2564) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb267] : () -> ()
  ^bb265:
    %2566 = "llvm.getelementptr"(%2562) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2567 = "llvm.load"(%2566) : (!llvm.ptr) -> !llvm.ptr
    %2568 = "llvm.getelementptr"(%2567) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2569 = "llvm.getelementptr"(%2567) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2570 = "llvm.getelementptr"(%2567) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2571 = "llvm.getelementptr"(%2567) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2572 = "llvm.load"(%2568) : (!llvm.ptr) -> i64
    %2573 = "llvm.load"(%2569) : (!llvm.ptr) -> i64
    %2574 = "llvm.load"(%2570) : (!llvm.ptr) -> !llvm.ptr
    %2575 = "llvm.load"(%2571) : (!llvm.ptr) -> !llvm.ptr
    %2576 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2577 = "llvm.ptrtoint"(%2576) : (!llvm.ptr) -> i64
    %2578 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2579 = "mini.subtype"(%2574, %2573, %2572, %2578, %2577, %2575) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2579) [^bb266, ^bb266] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb267:
    %2580 = "llvm.extractvalue"(%2561) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2581 = "llvm.load"(%2564) : (!llvm.ptr) -> i32
    %2582 = "llvm.getelementptr"(%2580, %2581) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2583 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2584 = "llvm.getelementptr"(%2582, %2583) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2584) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb268(%2585 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2586 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2587 : !llvm.ptr):
    %2588 = "mini.wrap"(%2585) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterable">
    %2589 = "mini.to_fat_ptr"(%2588) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable", "invariant"} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"MapIterable">
    %2590 = "mini.get_field"(%2589) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"IntIterable">
    %2591 = "mini.unwrap"(%2590) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2592 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2593 = "mini.method_call"(%2592, %2591) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2594 = "mini.to_fat_ptr"(%2593) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2595 = "mini.get_field"(%2589) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2596 = "mini.unwrap"(%2594) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2597 = "mini.unwrap"(%2595) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %2598 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"MapIterator">
    %2599 = "mini.get_field"(%2589) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"IntIterable">
    %2600 = "mini.unwrap"(%2599) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2601 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2602 = "mini.method_call"(%2601, %2600) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2603 = "mini.to_fat_ptr"(%2602) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2604 = "mini.get_field"(%2589) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2605 = "mini.to_fat_ptr"(%2603) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2606 = "mini.unwrap"(%2605) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2607 = builtin.unrealized_conversion_cast %2604 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2608 = "mini.unwrap"(%2607) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %2609 = "mini.unwrap"(%2598) : (!mini.fatptr<"MapIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2610 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %2611 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri32", ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %2612 = "mini.parameterizations_array"(%2610, %2611) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2612, %2609, %2606, %2608) {"offset" = 2 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %2613 = "mini.to_fat_ptr"(%2598) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"MapIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%2613) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "MapIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb269(%2614 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2615 : !llvm.ptr):
    %2616 = "mini.invariant"(%2615) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2617 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb270] : () -> ()
  ^bb270:
    %2618 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%2618, %2617) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb271] : () -> ()
  ^bb271:
    %2619 = "llvm.extractvalue"(%2614) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2620 = "llvm.load"(%2617) : (!llvm.ptr) -> i32
    %2621 = "llvm.getelementptr"(%2619, %2620) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2622 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2623 = "llvm.getelementptr"(%2621, %2622) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2623) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_MapIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterator_getter_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterator_setter_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterator_field_iterator", "getter_name" = "MapIterator_getter_iterator", "setter_name" = "MapIterator_setter_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterator_getter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterator_setter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterator_field_f", "getter_name" = "MapIterator_getter_f", "setter_name" = "MapIterator_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb272(%2624 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2625 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2626 : !llvm.ptr, %2627 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2628 : !llvm.struct<(!llvm.ptr)>):
    %2629 = "mini.wrap"(%2624) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterator">
    %2630 = "mini.to_fat_ptr"(%2629) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator", "to_typ_name" = "MapIterator", "invariant"} : (!mini.fatptr<"MapIterator">) -> !mini.fatptr<"MapIterator">
    %2631 = "mini.wrap"(%2627) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %2632 = "mini.to_fat_ptr"(%2631) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2633 = "mini.to_fat_ptr"(%2632) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%2630, %2633) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"MapIterator">, !mini.fatptr<"IntIterator">) -> ()
    %2634 = "mini.wrap"(%2628) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2635 = builtin.unrealized_conversion_cast %2634 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2636 = builtin.unrealized_conversion_cast %2635 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    "mini.set_field"(%2630, %2636) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterator">, !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> ()
  }) {"func_name" = "MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb273(%2637 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2638 : !llvm.ptr):
    %2639 = "mini.invariant"(%2638) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2640 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb274] : () -> ()
  ^bb275:
    %2641 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%2641, %2640) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb276] : () -> ()
  ^bb277:
    %2642 = "llvm.getelementptr"(%2638) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2643 = "llvm.load"(%2642) : (!llvm.ptr) -> !llvm.ptr
    %2644 = "llvm.getelementptr"(%2643) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2645 = "llvm.getelementptr"(%2643) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2646 = "llvm.getelementptr"(%2643) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2647 = "llvm.getelementptr"(%2643) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2648 = "llvm.load"(%2644) : (!llvm.ptr) -> i64
    %2649 = "llvm.load"(%2645) : (!llvm.ptr) -> i64
    %2650 = "llvm.load"(%2646) : (!llvm.ptr) -> !llvm.ptr
    %2651 = "llvm.load"(%2647) : (!llvm.ptr) -> !llvm.ptr
    %2652 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2653 = "llvm.ptrtoint"(%2652) : (!llvm.ptr) -> i64
    %2654 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2655 = "mini.subtype"(%2650, %2649, %2648, %2654, %2653, %2651) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2655) [^bb275, ^bb275] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb274:
    %2656 = "llvm.getelementptr"(%2638) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2657 = "llvm.load"(%2656) : (!llvm.ptr) -> !llvm.ptr
    %2658 = "llvm.getelementptr"(%2657) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2659 = "llvm.getelementptr"(%2657) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2660 = "llvm.getelementptr"(%2657) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2661 = "llvm.getelementptr"(%2657) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2662 = "llvm.load"(%2658) : (!llvm.ptr) -> i64
    %2663 = "llvm.load"(%2659) : (!llvm.ptr) -> i64
    %2664 = "llvm.load"(%2660) : (!llvm.ptr) -> !llvm.ptr
    %2665 = "llvm.load"(%2661) : (!llvm.ptr) -> !llvm.ptr
    %2666 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %2667 = "llvm.ptrtoint"(%2666) : (!llvm.ptr) -> i64
    %2668 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %2669 = "mini.subtype"(%2664, %2663, %2662, %2668, %2667, %2665) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2669) [^bb277, ^bb277] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb276:
    %2670 = "llvm.extractvalue"(%2637) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2671 = "llvm.load"(%2640) : (!llvm.ptr) -> i32
    %2672 = "llvm.getelementptr"(%2670, %2671) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2673 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2674 = "llvm.getelementptr"(%2672, %2673) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2674) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb278(%2675 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2676 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2677 : !llvm.ptr):
    %2678 = "mini.wrap"(%2675) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterator">
    %2679 = "mini.to_fat_ptr"(%2678) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator", "to_typ_name" = "MapIterator", "invariant"} : (!mini.fatptr<"MapIterator">) -> !mini.fatptr<"MapIterator">
    %2680 = "mini.get_field"(%2679) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"MapIterator">) -> !mini.fatptr<"IntIterator">
    %2681 = "mini.unwrap"(%2680) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2682 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2683 = "mini.method_call"(%2682, %2681) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %2684 = builtin.unrealized_conversion_cast %2683 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %2685 = "mini.checkflag"(%2684) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
    %2686 = "mini.unwrap"(%2685) : (i1) -> i1
    %2687 = builtin.unrealized_conversion_cast %2684 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.if"(%2686) ({
      %2688 = "mini.narrow"(%2687) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %2689 = builtin.unrealized_conversion_cast %2688 : !mini.ptr<i32> to !mini.ptr<i32>
      %2690 = "mini.unwrap"(%2689) : (!mini.ptr<i32>) -> i32
      %2691 = "mini.get_field"(%2679) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterator">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
      %2692 = "mini.unwrap"(%2691) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.ptr
      %2693 = "mini.fptr_call"(%2692, %2690) {"ret_type" = i32} : (!llvm.ptr, i32) -> !mini.ptr<i32>
      %2694 = "mini.unionize"(%2693) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%2694) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
      "mini.castassign"(%2687, %2688) ({
        %2695 = "mini.unionize"(%2688) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %2696 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %2697 = "mini.unionize"(%2696) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%2697) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "MapIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb279(%2698 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2699 : !llvm.ptr):
    %2700 = "mini.invariant"(%2699) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2701 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb280] : () -> ()
  ^bb280:
    %2702 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%2702, %2701) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb281] : () -> ()
  ^bb281:
    %2703 = "llvm.extractvalue"(%2698) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2704 = "llvm.load"(%2701) : (!llvm.ptr) -> i32
    %2705 = "llvm.getelementptr"(%2703, %2704) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2706 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2707 = "llvm.getelementptr"(%2705, %2706) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2707) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_FilterIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterable_getter_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterable_setter_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterable_field_iterable", "getter_name" = "FilterIterable_getter_iterable", "setter_name" = "FilterIterable_setter_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterable_getter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterable_setter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterable_field_f", "getter_name" = "FilterIterable_getter_f", "setter_name" = "FilterIterable_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb282(%2708 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2709 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2710 : !llvm.ptr, %2711 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2712 : !llvm.struct<(!llvm.ptr)>):
    %2713 = "mini.wrap"(%2708) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterable">
    %2714 = "mini.to_fat_ptr"(%2713) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable", "to_typ_name" = "FilterIterable", "invariant"} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"FilterIterable">
    %2715 = "mini.wrap"(%2711) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2716 = "mini.to_fat_ptr"(%2715) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2717 = "mini.to_fat_ptr"(%2716) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%2714, %2717) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"FilterIterable">, !mini.fatptr<"IntIterable">) -> ()
    %2718 = "mini.wrap"(%2712) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2719 = builtin.unrealized_conversion_cast %2718 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2720 = builtin.unrealized_conversion_cast %2719 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    "mini.set_field"(%2714, %2720) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable">, !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> ()
  }) {"func_name" = "FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb283(%2721 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2722 : !llvm.ptr):
    %2723 = "mini.invariant"(%2722) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2724 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb284] : () -> ()
  ^bb285:
    %2725 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%2725, %2724) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb286] : () -> ()
  ^bb287:
    %2726 = "llvm.getelementptr"(%2722) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2727 = "llvm.load"(%2726) : (!llvm.ptr) -> !llvm.ptr
    %2728 = "llvm.getelementptr"(%2727) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2729 = "llvm.getelementptr"(%2727) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2730 = "llvm.getelementptr"(%2727) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2731 = "llvm.getelementptr"(%2727) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2732 = "llvm.load"(%2728) : (!llvm.ptr) -> i64
    %2733 = "llvm.load"(%2729) : (!llvm.ptr) -> i64
    %2734 = "llvm.load"(%2730) : (!llvm.ptr) -> !llvm.ptr
    %2735 = "llvm.load"(%2731) : (!llvm.ptr) -> !llvm.ptr
    %2736 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2737 = "llvm.ptrtoint"(%2736) : (!llvm.ptr) -> i64
    %2738 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2739 = "mini.subtype"(%2734, %2733, %2732, %2738, %2737, %2735) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2739) [^bb285, ^bb285] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb284:
    %2740 = "llvm.getelementptr"(%2722) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2741 = "llvm.load"(%2740) : (!llvm.ptr) -> !llvm.ptr
    %2742 = "llvm.getelementptr"(%2741) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2743 = "llvm.getelementptr"(%2741) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2744 = "llvm.getelementptr"(%2741) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2745 = "llvm.getelementptr"(%2741) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2746 = "llvm.load"(%2742) : (!llvm.ptr) -> i64
    %2747 = "llvm.load"(%2743) : (!llvm.ptr) -> i64
    %2748 = "llvm.load"(%2744) : (!llvm.ptr) -> !llvm.ptr
    %2749 = "llvm.load"(%2745) : (!llvm.ptr) -> !llvm.ptr
    %2750 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2751 = "llvm.ptrtoint"(%2750) : (!llvm.ptr) -> i64
    %2752 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2753 = "mini.subtype"(%2748, %2747, %2746, %2752, %2751, %2749) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2753) [^bb287, ^bb287] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb286:
    %2754 = "llvm.extractvalue"(%2721) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2755 = "llvm.load"(%2724) : (!llvm.ptr) -> i32
    %2756 = "llvm.getelementptr"(%2754, %2755) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2757 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2758 = "llvm.getelementptr"(%2756, %2757) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2758) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb288(%2759 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2760 : !llvm.ptr):
    %2761 = "mini.invariant"(%2760) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2762 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb289] : () -> ()
  ^bb290:
    %2763 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%2763, %2762) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb291] : () -> ()
  ^bb289:
    %2764 = "llvm.getelementptr"(%2760) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2765 = "llvm.load"(%2764) : (!llvm.ptr) -> !llvm.ptr
    %2766 = "llvm.getelementptr"(%2765) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2767 = "llvm.getelementptr"(%2765) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2768 = "llvm.getelementptr"(%2765) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2769 = "llvm.getelementptr"(%2765) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2770 = "llvm.load"(%2766) : (!llvm.ptr) -> i64
    %2771 = "llvm.load"(%2767) : (!llvm.ptr) -> i64
    %2772 = "llvm.load"(%2768) : (!llvm.ptr) -> !llvm.ptr
    %2773 = "llvm.load"(%2769) : (!llvm.ptr) -> !llvm.ptr
    %2774 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2775 = "llvm.ptrtoint"(%2774) : (!llvm.ptr) -> i64
    %2776 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2777 = "mini.subtype"(%2772, %2771, %2770, %2776, %2775, %2773) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2777) [^bb290, ^bb290] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb291:
    %2778 = "llvm.extractvalue"(%2759) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2779 = "llvm.load"(%2762) : (!llvm.ptr) -> i32
    %2780 = "llvm.getelementptr"(%2778, %2779) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2781 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2782 = "llvm.getelementptr"(%2780, %2781) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2782) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb292(%2783 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2784 : !llvm.ptr):
    %2785 = "mini.invariant"(%2784) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2786 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb293] : () -> ()
  ^bb294:
    %2787 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%2787, %2786) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb295] : () -> ()
  ^bb296:
    %2788 = "llvm.getelementptr"(%2784) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2789 = "llvm.load"(%2788) : (!llvm.ptr) -> !llvm.ptr
    %2790 = "llvm.getelementptr"(%2789) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2791 = "llvm.getelementptr"(%2789) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2792 = "llvm.getelementptr"(%2789) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2793 = "llvm.getelementptr"(%2789) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2794 = "llvm.load"(%2790) : (!llvm.ptr) -> i64
    %2795 = "llvm.load"(%2791) : (!llvm.ptr) -> i64
    %2796 = "llvm.load"(%2792) : (!llvm.ptr) -> !llvm.ptr
    %2797 = "llvm.load"(%2793) : (!llvm.ptr) -> !llvm.ptr
    %2798 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2799 = "llvm.ptrtoint"(%2798) : (!llvm.ptr) -> i64
    %2800 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2801 = "mini.subtype"(%2796, %2795, %2794, %2800, %2799, %2797) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2801) [^bb294, ^bb294] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb293:
    %2802 = "llvm.getelementptr"(%2784) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2803 = "llvm.load"(%2802) : (!llvm.ptr) -> !llvm.ptr
    %2804 = "llvm.getelementptr"(%2803) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2805 = "llvm.getelementptr"(%2803) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2806 = "llvm.getelementptr"(%2803) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2807 = "llvm.getelementptr"(%2803) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2808 = "llvm.load"(%2804) : (!llvm.ptr) -> i64
    %2809 = "llvm.load"(%2805) : (!llvm.ptr) -> i64
    %2810 = "llvm.load"(%2806) : (!llvm.ptr) -> !llvm.ptr
    %2811 = "llvm.load"(%2807) : (!llvm.ptr) -> !llvm.ptr
    %2812 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %2813 = "llvm.ptrtoint"(%2812) : (!llvm.ptr) -> i64
    %2814 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %2815 = "mini.subtype"(%2810, %2809, %2808, %2814, %2813, %2811) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2815) [^bb296, ^bb296] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb295:
    %2816 = "llvm.extractvalue"(%2783) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2817 = "llvm.load"(%2786) : (!llvm.ptr) -> i32
    %2818 = "llvm.getelementptr"(%2816, %2817) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2819 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2820 = "llvm.getelementptr"(%2818, %2819) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2820) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb297(%2821 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2822 : !llvm.ptr):
    %2823 = "mini.invariant"(%2822) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2824 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb298] : () -> ()
  ^bb299:
    %2825 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%2825, %2824) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb300] : () -> ()
  ^bb298:
    %2826 = "llvm.getelementptr"(%2822) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2827 = "llvm.load"(%2826) : (!llvm.ptr) -> !llvm.ptr
    %2828 = "llvm.getelementptr"(%2827) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2829 = "llvm.getelementptr"(%2827) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2830 = "llvm.getelementptr"(%2827) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2831 = "llvm.getelementptr"(%2827) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2832 = "llvm.load"(%2828) : (!llvm.ptr) -> i64
    %2833 = "llvm.load"(%2829) : (!llvm.ptr) -> i64
    %2834 = "llvm.load"(%2830) : (!llvm.ptr) -> !llvm.ptr
    %2835 = "llvm.load"(%2831) : (!llvm.ptr) -> !llvm.ptr
    %2836 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2837 = "llvm.ptrtoint"(%2836) : (!llvm.ptr) -> i64
    %2838 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2839 = "mini.subtype"(%2834, %2833, %2832, %2838, %2837, %2835) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2839) [^bb299, ^bb299] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb300:
    %2840 = "llvm.extractvalue"(%2821) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2841 = "llvm.load"(%2824) : (!llvm.ptr) -> i32
    %2842 = "llvm.getelementptr"(%2840, %2841) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2843 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2844 = "llvm.getelementptr"(%2842, %2843) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2844) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb301(%2845 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2846 : !llvm.ptr):
    %2847 = "mini.invariant"(%2846) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2848 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb302] : () -> ()
  ^bb303:
    %2849 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%2849, %2848) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb304] : () -> ()
  ^bb302:
    %2850 = "llvm.getelementptr"(%2846) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2851 = "llvm.load"(%2850) : (!llvm.ptr) -> !llvm.ptr
    %2852 = "llvm.getelementptr"(%2851) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2853 = "llvm.getelementptr"(%2851) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2854 = "llvm.getelementptr"(%2851) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2855 = "llvm.getelementptr"(%2851) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2856 = "llvm.load"(%2852) : (!llvm.ptr) -> i64
    %2857 = "llvm.load"(%2853) : (!llvm.ptr) -> i64
    %2858 = "llvm.load"(%2854) : (!llvm.ptr) -> !llvm.ptr
    %2859 = "llvm.load"(%2855) : (!llvm.ptr) -> !llvm.ptr
    %2860 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2861 = "llvm.ptrtoint"(%2860) : (!llvm.ptr) -> i64
    %2862 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2863 = "mini.subtype"(%2858, %2857, %2856, %2862, %2861, %2859) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2863) [^bb303, ^bb303] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb304:
    %2864 = "llvm.extractvalue"(%2845) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2865 = "llvm.load"(%2848) : (!llvm.ptr) -> i32
    %2866 = "llvm.getelementptr"(%2864, %2865) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2867 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2868 = "llvm.getelementptr"(%2866, %2867) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2868) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb305(%2869 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2870 : !llvm.ptr):
    %2871 = "mini.invariant"(%2870) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2872 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb306] : () -> ()
  ^bb307:
    %2873 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%2873, %2872) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb308] : () -> ()
  ^bb306:
    %2874 = "llvm.getelementptr"(%2870) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2875 = "llvm.load"(%2874) : (!llvm.ptr) -> !llvm.ptr
    %2876 = "llvm.getelementptr"(%2875) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2877 = "llvm.getelementptr"(%2875) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2878 = "llvm.getelementptr"(%2875) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2879 = "llvm.getelementptr"(%2875) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2880 = "llvm.load"(%2876) : (!llvm.ptr) -> i64
    %2881 = "llvm.load"(%2877) : (!llvm.ptr) -> i64
    %2882 = "llvm.load"(%2878) : (!llvm.ptr) -> !llvm.ptr
    %2883 = "llvm.load"(%2879) : (!llvm.ptr) -> !llvm.ptr
    %2884 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2885 = "llvm.ptrtoint"(%2884) : (!llvm.ptr) -> i64
    %2886 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2887 = "mini.subtype"(%2882, %2881, %2880, %2886, %2885, %2883) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2887) [^bb307, ^bb307] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb308:
    %2888 = "llvm.extractvalue"(%2869) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2889 = "llvm.load"(%2872) : (!llvm.ptr) -> i32
    %2890 = "llvm.getelementptr"(%2888, %2889) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2891 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2892 = "llvm.getelementptr"(%2890, %2891) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2892) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb309(%2893 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2894 : !llvm.ptr):
    %2895 = "mini.invariant"(%2894) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2896 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb310] : () -> ()
  ^bb311:
    %2897 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%2897, %2896) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb312] : () -> ()
  ^bb310:
    %2898 = "llvm.getelementptr"(%2894) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2899 = "llvm.load"(%2898) : (!llvm.ptr) -> !llvm.ptr
    %2900 = "llvm.getelementptr"(%2899) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2901 = "llvm.getelementptr"(%2899) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2902 = "llvm.getelementptr"(%2899) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2903 = "llvm.getelementptr"(%2899) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2904 = "llvm.load"(%2900) : (!llvm.ptr) -> i64
    %2905 = "llvm.load"(%2901) : (!llvm.ptr) -> i64
    %2906 = "llvm.load"(%2902) : (!llvm.ptr) -> !llvm.ptr
    %2907 = "llvm.load"(%2903) : (!llvm.ptr) -> !llvm.ptr
    %2908 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2909 = "llvm.ptrtoint"(%2908) : (!llvm.ptr) -> i64
    %2910 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2911 = "mini.subtype"(%2906, %2905, %2904, %2910, %2909, %2907) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2911) [^bb311, ^bb311] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb312:
    %2912 = "llvm.extractvalue"(%2893) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2913 = "llvm.load"(%2896) : (!llvm.ptr) -> i32
    %2914 = "llvm.getelementptr"(%2912, %2913) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2915 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2916 = "llvm.getelementptr"(%2914, %2915) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2916) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb313(%2917 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2918 : !llvm.ptr):
    %2919 = "mini.invariant"(%2918) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2920 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb314] : () -> ()
  ^bb315:
    %2921 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%2921, %2920) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb316] : () -> ()
  ^bb314:
    %2922 = "llvm.getelementptr"(%2918) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2923 = "llvm.load"(%2922) : (!llvm.ptr) -> !llvm.ptr
    %2924 = "llvm.getelementptr"(%2923) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2925 = "llvm.getelementptr"(%2923) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2926 = "llvm.getelementptr"(%2923) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2927 = "llvm.getelementptr"(%2923) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2928 = "llvm.load"(%2924) : (!llvm.ptr) -> i64
    %2929 = "llvm.load"(%2925) : (!llvm.ptr) -> i64
    %2930 = "llvm.load"(%2926) : (!llvm.ptr) -> !llvm.ptr
    %2931 = "llvm.load"(%2927) : (!llvm.ptr) -> !llvm.ptr
    %2932 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2933 = "llvm.ptrtoint"(%2932) : (!llvm.ptr) -> i64
    %2934 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2935 = "mini.subtype"(%2930, %2929, %2928, %2934, %2933, %2931) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2935) [^bb315, ^bb315] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb316:
    %2936 = "llvm.extractvalue"(%2917) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2937 = "llvm.load"(%2920) : (!llvm.ptr) -> i32
    %2938 = "llvm.getelementptr"(%2936, %2937) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2939 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2940 = "llvm.getelementptr"(%2938, %2939) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2940) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb317(%2941 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2942 : !llvm.ptr):
    %2943 = "mini.invariant"(%2942) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2944 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb318] : () -> ()
  ^bb319:
    %2945 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%2945, %2944) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb320] : () -> ()
  ^bb318:
    %2946 = "llvm.getelementptr"(%2942) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2947 = "llvm.load"(%2946) : (!llvm.ptr) -> !llvm.ptr
    %2948 = "llvm.getelementptr"(%2947) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2949 = "llvm.getelementptr"(%2947) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2950 = "llvm.getelementptr"(%2947) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2951 = "llvm.getelementptr"(%2947) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2952 = "llvm.load"(%2948) : (!llvm.ptr) -> i64
    %2953 = "llvm.load"(%2949) : (!llvm.ptr) -> i64
    %2954 = "llvm.load"(%2950) : (!llvm.ptr) -> !llvm.ptr
    %2955 = "llvm.load"(%2951) : (!llvm.ptr) -> !llvm.ptr
    %2956 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2957 = "llvm.ptrtoint"(%2956) : (!llvm.ptr) -> i64
    %2958 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2959 = "mini.subtype"(%2954, %2953, %2952, %2958, %2957, %2955) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2959) [^bb319, ^bb319] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb320:
    %2960 = "llvm.extractvalue"(%2941) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2961 = "llvm.load"(%2944) : (!llvm.ptr) -> i32
    %2962 = "llvm.getelementptr"(%2960, %2961) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2963 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2964 = "llvm.getelementptr"(%2962, %2963) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2964) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb321(%2965 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2966 : !llvm.ptr):
    %2967 = "mini.invariant"(%2966) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2968 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb322] : () -> ()
  ^bb323:
    %2969 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%2969, %2968) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb324] : () -> ()
  ^bb322:
    %2970 = "llvm.getelementptr"(%2966) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2971 = "llvm.load"(%2970) : (!llvm.ptr) -> !llvm.ptr
    %2972 = "llvm.getelementptr"(%2971) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2973 = "llvm.getelementptr"(%2971) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2974 = "llvm.getelementptr"(%2971) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2975 = "llvm.getelementptr"(%2971) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2976 = "llvm.load"(%2972) : (!llvm.ptr) -> i64
    %2977 = "llvm.load"(%2973) : (!llvm.ptr) -> i64
    %2978 = "llvm.load"(%2974) : (!llvm.ptr) -> !llvm.ptr
    %2979 = "llvm.load"(%2975) : (!llvm.ptr) -> !llvm.ptr
    %2980 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2981 = "llvm.ptrtoint"(%2980) : (!llvm.ptr) -> i64
    %2982 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2983 = "mini.subtype"(%2978, %2977, %2976, %2982, %2981, %2979) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2983) [^bb323, ^bb323] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb324:
    %2984 = "llvm.extractvalue"(%2965) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2985 = "llvm.load"(%2968) : (!llvm.ptr) -> i32
    %2986 = "llvm.getelementptr"(%2984, %2985) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2987 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %2988 = "llvm.getelementptr"(%2986, %2987) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2988) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb325(%2989 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2990 : !llvm.ptr):
    %2991 = "mini.invariant"(%2990) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2992 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb326] : () -> ()
  ^bb327:
    %2993 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%2993, %2992) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb328] : () -> ()
  ^bb326:
    %2994 = "llvm.getelementptr"(%2990) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %2995 = "llvm.load"(%2994) : (!llvm.ptr) -> !llvm.ptr
    %2996 = "llvm.getelementptr"(%2995) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2997 = "llvm.getelementptr"(%2995) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2998 = "llvm.getelementptr"(%2995) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2999 = "llvm.getelementptr"(%2995) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3000 = "llvm.load"(%2996) : (!llvm.ptr) -> i64
    %3001 = "llvm.load"(%2997) : (!llvm.ptr) -> i64
    %3002 = "llvm.load"(%2998) : (!llvm.ptr) -> !llvm.ptr
    %3003 = "llvm.load"(%2999) : (!llvm.ptr) -> !llvm.ptr
    %3004 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3005 = "llvm.ptrtoint"(%3004) : (!llvm.ptr) -> i64
    %3006 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3007 = "mini.subtype"(%3002, %3001, %3000, %3006, %3005, %3003) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3007) [^bb327, ^bb327] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb328:
    %3008 = "llvm.extractvalue"(%2989) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3009 = "llvm.load"(%2992) : (!llvm.ptr) -> i32
    %3010 = "llvm.getelementptr"(%3008, %3009) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3011 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3012 = "llvm.getelementptr"(%3010, %3011) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3012) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb329(%3013 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3014 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3015 : !llvm.ptr):
    %3016 = "mini.wrap"(%3013) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterable">
    %3017 = "mini.to_fat_ptr"(%3016) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable", "to_typ_name" = "FilterIterable", "invariant"} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"FilterIterable">
    %3018 = "mini.get_field"(%3017) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"IntIterable">
    %3019 = "mini.unwrap"(%3018) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3020 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3021 = "mini.method_call"(%3020, %3019) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3022 = "mini.to_fat_ptr"(%3021) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3023 = "mini.get_field"(%3017) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %3024 = "mini.unwrap"(%3022) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3025 = "mini.unwrap"(%3023) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %3026 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"FilterIterator">
    %3027 = "mini.get_field"(%3017) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"IntIterable">
    %3028 = "mini.unwrap"(%3027) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3029 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3030 = "mini.method_call"(%3029, %3028) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3031 = "mini.to_fat_ptr"(%3030) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3032 = "mini.get_field"(%3017) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %3033 = "mini.to_fat_ptr"(%3031) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3034 = "mini.unwrap"(%3033) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3035 = builtin.unrealized_conversion_cast %3032 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %3036 = "mini.unwrap"(%3035) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %3037 = "mini.unwrap"(%3026) : (!mini.fatptr<"FilterIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3038 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %3039 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri1", ["Ptri1"], ["Ptri32"]]} : () -> !llvm.ptr
    %3040 = "mini.parameterizations_array"(%3038, %3039) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3040, %3037, %3034, %3036) {"offset" = 2 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %3041 = "mini.to_fat_ptr"(%3026) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%3041) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "FilterIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb330(%3042 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3043 : !llvm.ptr):
    %3044 = "mini.invariant"(%3043) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3045 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb331] : () -> ()
  ^bb331:
    %3046 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%3046, %3045) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb332] : () -> ()
  ^bb332:
    %3047 = "llvm.extractvalue"(%3042) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3048 = "llvm.load"(%3045) : (!llvm.ptr) -> i32
    %3049 = "llvm.getelementptr"(%3047, %3048) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3050 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3051 = "llvm.getelementptr"(%3049, %3050) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3051) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_FilterIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterator_getter_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterator_setter_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterator_field_iterator", "getter_name" = "FilterIterator_getter_iterator", "setter_name" = "FilterIterator_setter_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterator_getter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterator_setter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionPtri32_to_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterator_field_f", "getter_name" = "FilterIterator_getter_f", "setter_name" = "FilterIterator_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb333(%3052 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3053 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3054 : !llvm.ptr, %3055 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3056 : !llvm.struct<(!llvm.ptr)>):
    %3057 = "mini.wrap"(%3052) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterator">
    %3058 = "mini.to_fat_ptr"(%3057) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator", "to_typ_name" = "FilterIterator", "invariant"} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"FilterIterator">
    %3059 = "mini.wrap"(%3055) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %3060 = "mini.to_fat_ptr"(%3059) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3061 = "mini.to_fat_ptr"(%3060) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%3058, %3061) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"FilterIterator">, !mini.fatptr<"IntIterator">) -> ()
    %3062 = "mini.wrap"(%3056) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %3063 = builtin.unrealized_conversion_cast %3062 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %3064 = builtin.unrealized_conversion_cast %3063 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    "mini.set_field"(%3058, %3064) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterator">, !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> ()
  }) {"func_name" = "FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb334(%3065 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3066 : !llvm.ptr):
    %3067 = "mini.invariant"(%3066) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3068 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb335] : () -> ()
  ^bb336:
    %3069 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%3069, %3068) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb337] : () -> ()
  ^bb338:
    %3070 = "llvm.getelementptr"(%3066) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3071 = "llvm.load"(%3070) : (!llvm.ptr) -> !llvm.ptr
    %3072 = "llvm.getelementptr"(%3071) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3073 = "llvm.getelementptr"(%3071) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3074 = "llvm.getelementptr"(%3071) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3075 = "llvm.getelementptr"(%3071) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3076 = "llvm.load"(%3072) : (!llvm.ptr) -> i64
    %3077 = "llvm.load"(%3073) : (!llvm.ptr) -> i64
    %3078 = "llvm.load"(%3074) : (!llvm.ptr) -> !llvm.ptr
    %3079 = "llvm.load"(%3075) : (!llvm.ptr) -> !llvm.ptr
    %3080 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3081 = "llvm.ptrtoint"(%3080) : (!llvm.ptr) -> i64
    %3082 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3083 = "mini.subtype"(%3078, %3077, %3076, %3082, %3081, %3079) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3083) [^bb336, ^bb336] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb335:
    %3084 = "llvm.getelementptr"(%3066) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3085 = "llvm.load"(%3084) : (!llvm.ptr) -> !llvm.ptr
    %3086 = "llvm.getelementptr"(%3085) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3087 = "llvm.getelementptr"(%3085) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3088 = "llvm.getelementptr"(%3085) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3089 = "llvm.getelementptr"(%3085) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3090 = "llvm.load"(%3086) : (!llvm.ptr) -> i64
    %3091 = "llvm.load"(%3087) : (!llvm.ptr) -> i64
    %3092 = "llvm.load"(%3088) : (!llvm.ptr) -> !llvm.ptr
    %3093 = "llvm.load"(%3089) : (!llvm.ptr) -> !llvm.ptr
    %3094 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %3095 = "llvm.ptrtoint"(%3094) : (!llvm.ptr) -> i64
    %3096 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %3097 = "mini.subtype"(%3092, %3091, %3090, %3096, %3095, %3093) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3097) [^bb338, ^bb338] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb337:
    %3098 = "llvm.extractvalue"(%3065) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3099 = "llvm.load"(%3068) : (!llvm.ptr) -> i32
    %3100 = "llvm.getelementptr"(%3098, %3099) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3101 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3102 = "llvm.getelementptr"(%3100, %3101) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3102) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb339(%3103 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3104 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3105 : !llvm.ptr):
    %3106 = "mini.wrap"(%3103) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterator">
    %3107 = "mini.to_fat_ptr"(%3106) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator", "to_typ_name" = "FilterIterator", "invariant"} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"FilterIterator">
    %3108 = "mini.get_field"(%3107) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"IntIterator">
    %3109 = "mini.unwrap"(%3108) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3110 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3111 = "mini.method_call"(%3110, %3109) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3112 = builtin.unrealized_conversion_cast %3111 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3113 = builtin.unrealized_conversion_cast %3112 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.while"() ({
      %3114 = "mini.checkflag"(%3113) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %3115 = "mini.unwrap"(%3114) : (i1) -> i1
    }, {
      %3116 = "mini.narrow"(%3113) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %3117 = builtin.unrealized_conversion_cast %3116 : !mini.ptr<i32> to !mini.ptr<i32>
      %3118 = "mini.unwrap"(%3117) : (!mini.ptr<i32>) -> i32
      %3119 = "mini.get_field"(%3107) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterator">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
      %3120 = "mini.unwrap"(%3119) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %3121 = "mini.fptr_call"(%3120, %3118) {"ret_type" = i1} : (!llvm.ptr, i32) -> !mini.ptr<i1>
      %3122 = "mini.unwrap"(%3121) : (!mini.ptr<i1>) -> i1
      "mini.if"(%3122) ({
        %3123 = "mini.unionize"(%3116) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        "mini.return"(%3123) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
      }) : (i1) -> ()
      %3124 = "mini.get_field"(%3107) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"IntIterator">
      %3125 = "mini.unwrap"(%3124) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3126 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %3127 = "mini.method_call"(%3126, %3125) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %3128 = builtin.unrealized_conversion_cast %3127 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.castassign"(%3113, %3128) ({
        %3129 = builtin.unrealized_conversion_cast %3128 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : () -> ()
    %3130 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %3131 = "mini.unionize"(%3130) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%3131) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "FilterIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb340(%3132 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3133 : !llvm.ptr):
    %3134 = "mini.invariant"(%3133) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3135 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb341] : () -> ()
  ^bb341:
    %3136 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%3136, %3135) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb342] : () -> ()
  ^bb342:
    %3137 = "llvm.extractvalue"(%3132) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3138 = "llvm.load"(%3135) : (!llvm.ptr) -> i32
    %3139 = "llvm.getelementptr"(%3137, %3138) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3140 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3141 = "llvm.getelementptr"(%3139, %3140) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3141) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ChainIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterable_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterable_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterable_field_first", "getter_name" = "ChainIterable_getter_first", "setter_name" = "ChainIterable_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterable_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterable_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterable_field_second", "getter_name" = "ChainIterable_getter_second", "setter_name" = "ChainIterable_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb343(%3142 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3143 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3144 : !llvm.ptr, %3145 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3146 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3147 = "mini.wrap"(%3142) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterable">
    %3148 = "mini.to_fat_ptr"(%3147) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable", "to_typ_name" = "ChainIterable", "invariant"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"ChainIterable">
    %3149 = "mini.wrap"(%3145) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %3150 = "mini.to_fat_ptr"(%3149) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3151 = "mini.to_fat_ptr"(%3150) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%3148, %3151) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterable">, !mini.fatptr<"IntIterable">) -> ()
    %3152 = "mini.wrap"(%3146) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %3153 = "mini.to_fat_ptr"(%3152) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3154 = "mini.to_fat_ptr"(%3153) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%3148, %3154) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterable">, !mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "ChainIterable_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb344(%3155 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3156 : !llvm.ptr):
    %3157 = "mini.invariant"(%3156) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3158 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb345] : () -> ()
  ^bb346:
    %3159 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%3159, %3158) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb347] : () -> ()
  ^bb348:
    %3160 = "llvm.getelementptr"(%3156) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3161 = "llvm.load"(%3160) : (!llvm.ptr) -> !llvm.ptr
    %3162 = "llvm.getelementptr"(%3161) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3163 = "llvm.getelementptr"(%3161) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3164 = "llvm.getelementptr"(%3161) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3165 = "llvm.getelementptr"(%3161) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3166 = "llvm.load"(%3162) : (!llvm.ptr) -> i64
    %3167 = "llvm.load"(%3163) : (!llvm.ptr) -> i64
    %3168 = "llvm.load"(%3164) : (!llvm.ptr) -> !llvm.ptr
    %3169 = "llvm.load"(%3165) : (!llvm.ptr) -> !llvm.ptr
    %3170 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3171 = "llvm.ptrtoint"(%3170) : (!llvm.ptr) -> i64
    %3172 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3173 = "mini.subtype"(%3168, %3167, %3166, %3172, %3171, %3169) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3173) [^bb346, ^bb346] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb345:
    %3174 = "llvm.getelementptr"(%3156) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3175 = "llvm.load"(%3174) : (!llvm.ptr) -> !llvm.ptr
    %3176 = "llvm.getelementptr"(%3175) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3177 = "llvm.getelementptr"(%3175) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3178 = "llvm.getelementptr"(%3175) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3179 = "llvm.getelementptr"(%3175) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3180 = "llvm.load"(%3176) : (!llvm.ptr) -> i64
    %3181 = "llvm.load"(%3177) : (!llvm.ptr) -> i64
    %3182 = "llvm.load"(%3178) : (!llvm.ptr) -> !llvm.ptr
    %3183 = "llvm.load"(%3179) : (!llvm.ptr) -> !llvm.ptr
    %3184 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3185 = "llvm.ptrtoint"(%3184) : (!llvm.ptr) -> i64
    %3186 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3187 = "mini.subtype"(%3182, %3181, %3180, %3186, %3185, %3183) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3187) [^bb348, ^bb348] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb347:
    %3188 = "llvm.extractvalue"(%3155) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3189 = "llvm.load"(%3158) : (!llvm.ptr) -> i32
    %3190 = "llvm.getelementptr"(%3188, %3189) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3191 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3192 = "llvm.getelementptr"(%3190, %3191) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3192) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb349(%3193 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3194 : !llvm.ptr):
    %3195 = "mini.invariant"(%3194) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3196 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb350] : () -> ()
  ^bb351:
    %3197 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%3197, %3196) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb352] : () -> ()
  ^bb350:
    %3198 = "llvm.getelementptr"(%3194) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3199 = "llvm.load"(%3198) : (!llvm.ptr) -> !llvm.ptr
    %3200 = "llvm.getelementptr"(%3199) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3201 = "llvm.getelementptr"(%3199) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3202 = "llvm.getelementptr"(%3199) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3203 = "llvm.getelementptr"(%3199) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3204 = "llvm.load"(%3200) : (!llvm.ptr) -> i64
    %3205 = "llvm.load"(%3201) : (!llvm.ptr) -> i64
    %3206 = "llvm.load"(%3202) : (!llvm.ptr) -> !llvm.ptr
    %3207 = "llvm.load"(%3203) : (!llvm.ptr) -> !llvm.ptr
    %3208 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3209 = "llvm.ptrtoint"(%3208) : (!llvm.ptr) -> i64
    %3210 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3211 = "mini.subtype"(%3206, %3205, %3204, %3210, %3209, %3207) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3211) [^bb351, ^bb351] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb352:
    %3212 = "llvm.extractvalue"(%3193) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3213 = "llvm.load"(%3196) : (!llvm.ptr) -> i32
    %3214 = "llvm.getelementptr"(%3212, %3213) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3215 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3216 = "llvm.getelementptr"(%3214, %3215) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3216) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb353(%3217 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3218 : !llvm.ptr):
    %3219 = "mini.invariant"(%3218) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3220 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb354] : () -> ()
  ^bb355:
    %3221 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%3221, %3220) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb356] : () -> ()
  ^bb357:
    %3222 = "llvm.getelementptr"(%3218) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3223 = "llvm.load"(%3222) : (!llvm.ptr) -> !llvm.ptr
    %3224 = "llvm.getelementptr"(%3223) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3225 = "llvm.getelementptr"(%3223) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3226 = "llvm.getelementptr"(%3223) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3227 = "llvm.getelementptr"(%3223) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3228 = "llvm.load"(%3224) : (!llvm.ptr) -> i64
    %3229 = "llvm.load"(%3225) : (!llvm.ptr) -> i64
    %3230 = "llvm.load"(%3226) : (!llvm.ptr) -> !llvm.ptr
    %3231 = "llvm.load"(%3227) : (!llvm.ptr) -> !llvm.ptr
    %3232 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3233 = "llvm.ptrtoint"(%3232) : (!llvm.ptr) -> i64
    %3234 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3235 = "mini.subtype"(%3230, %3229, %3228, %3234, %3233, %3231) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3235) [^bb355, ^bb355] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb354:
    %3236 = "llvm.getelementptr"(%3218) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3237 = "llvm.load"(%3236) : (!llvm.ptr) -> !llvm.ptr
    %3238 = "llvm.getelementptr"(%3237) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3239 = "llvm.getelementptr"(%3237) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3240 = "llvm.getelementptr"(%3237) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3241 = "llvm.getelementptr"(%3237) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3242 = "llvm.load"(%3238) : (!llvm.ptr) -> i64
    %3243 = "llvm.load"(%3239) : (!llvm.ptr) -> i64
    %3244 = "llvm.load"(%3240) : (!llvm.ptr) -> !llvm.ptr
    %3245 = "llvm.load"(%3241) : (!llvm.ptr) -> !llvm.ptr
    %3246 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %3247 = "llvm.ptrtoint"(%3246) : (!llvm.ptr) -> i64
    %3248 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %3249 = "mini.subtype"(%3244, %3243, %3242, %3248, %3247, %3245) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3249) [^bb357, ^bb357] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb356:
    %3250 = "llvm.extractvalue"(%3217) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3251 = "llvm.load"(%3220) : (!llvm.ptr) -> i32
    %3252 = "llvm.getelementptr"(%3250, %3251) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3253 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3254 = "llvm.getelementptr"(%3252, %3253) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3254) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb358(%3255 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3256 : !llvm.ptr):
    %3257 = "mini.invariant"(%3256) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3258 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb359] : () -> ()
  ^bb360:
    %3259 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%3259, %3258) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb361] : () -> ()
  ^bb359:
    %3260 = "llvm.getelementptr"(%3256) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3261 = "llvm.load"(%3260) : (!llvm.ptr) -> !llvm.ptr
    %3262 = "llvm.getelementptr"(%3261) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3263 = "llvm.getelementptr"(%3261) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3264 = "llvm.getelementptr"(%3261) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3265 = "llvm.getelementptr"(%3261) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3266 = "llvm.load"(%3262) : (!llvm.ptr) -> i64
    %3267 = "llvm.load"(%3263) : (!llvm.ptr) -> i64
    %3268 = "llvm.load"(%3264) : (!llvm.ptr) -> !llvm.ptr
    %3269 = "llvm.load"(%3265) : (!llvm.ptr) -> !llvm.ptr
    %3270 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3271 = "llvm.ptrtoint"(%3270) : (!llvm.ptr) -> i64
    %3272 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3273 = "mini.subtype"(%3268, %3267, %3266, %3272, %3271, %3269) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3273) [^bb360, ^bb360] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb361:
    %3274 = "llvm.extractvalue"(%3255) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3275 = "llvm.load"(%3258) : (!llvm.ptr) -> i32
    %3276 = "llvm.getelementptr"(%3274, %3275) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3277 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3278 = "llvm.getelementptr"(%3276, %3277) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3278) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb362(%3279 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3280 : !llvm.ptr):
    %3281 = "mini.invariant"(%3280) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3282 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb363] : () -> ()
  ^bb364:
    %3283 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%3283, %3282) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb365] : () -> ()
  ^bb363:
    %3284 = "llvm.getelementptr"(%3280) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3285 = "llvm.load"(%3284) : (!llvm.ptr) -> !llvm.ptr
    %3286 = "llvm.getelementptr"(%3285) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3287 = "llvm.getelementptr"(%3285) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3288 = "llvm.getelementptr"(%3285) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3289 = "llvm.getelementptr"(%3285) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3290 = "llvm.load"(%3286) : (!llvm.ptr) -> i64
    %3291 = "llvm.load"(%3287) : (!llvm.ptr) -> i64
    %3292 = "llvm.load"(%3288) : (!llvm.ptr) -> !llvm.ptr
    %3293 = "llvm.load"(%3289) : (!llvm.ptr) -> !llvm.ptr
    %3294 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3295 = "llvm.ptrtoint"(%3294) : (!llvm.ptr) -> i64
    %3296 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3297 = "mini.subtype"(%3292, %3291, %3290, %3296, %3295, %3293) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3297) [^bb364, ^bb364] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb365:
    %3298 = "llvm.extractvalue"(%3279) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3299 = "llvm.load"(%3282) : (!llvm.ptr) -> i32
    %3300 = "llvm.getelementptr"(%3298, %3299) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3301 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3302 = "llvm.getelementptr"(%3300, %3301) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3302) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb366(%3303 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3304 : !llvm.ptr):
    %3305 = "mini.invariant"(%3304) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3306 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb367] : () -> ()
  ^bb368:
    %3307 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%3307, %3306) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb369] : () -> ()
  ^bb367:
    %3308 = "llvm.getelementptr"(%3304) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3309 = "llvm.load"(%3308) : (!llvm.ptr) -> !llvm.ptr
    %3310 = "llvm.getelementptr"(%3309) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3311 = "llvm.getelementptr"(%3309) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3312 = "llvm.getelementptr"(%3309) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3313 = "llvm.getelementptr"(%3309) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3314 = "llvm.load"(%3310) : (!llvm.ptr) -> i64
    %3315 = "llvm.load"(%3311) : (!llvm.ptr) -> i64
    %3316 = "llvm.load"(%3312) : (!llvm.ptr) -> !llvm.ptr
    %3317 = "llvm.load"(%3313) : (!llvm.ptr) -> !llvm.ptr
    %3318 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3319 = "llvm.ptrtoint"(%3318) : (!llvm.ptr) -> i64
    %3320 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3321 = "mini.subtype"(%3316, %3315, %3314, %3320, %3319, %3317) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3321) [^bb368, ^bb368] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb369:
    %3322 = "llvm.extractvalue"(%3303) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3323 = "llvm.load"(%3306) : (!llvm.ptr) -> i32
    %3324 = "llvm.getelementptr"(%3322, %3323) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3325 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3326 = "llvm.getelementptr"(%3324, %3325) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3326) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb370(%3327 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3328 : !llvm.ptr):
    %3329 = "mini.invariant"(%3328) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3330 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb371] : () -> ()
  ^bb372:
    %3331 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%3331, %3330) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb373] : () -> ()
  ^bb371:
    %3332 = "llvm.getelementptr"(%3328) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3333 = "llvm.load"(%3332) : (!llvm.ptr) -> !llvm.ptr
    %3334 = "llvm.getelementptr"(%3333) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3335 = "llvm.getelementptr"(%3333) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3336 = "llvm.getelementptr"(%3333) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3337 = "llvm.getelementptr"(%3333) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3338 = "llvm.load"(%3334) : (!llvm.ptr) -> i64
    %3339 = "llvm.load"(%3335) : (!llvm.ptr) -> i64
    %3340 = "llvm.load"(%3336) : (!llvm.ptr) -> !llvm.ptr
    %3341 = "llvm.load"(%3337) : (!llvm.ptr) -> !llvm.ptr
    %3342 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3343 = "llvm.ptrtoint"(%3342) : (!llvm.ptr) -> i64
    %3344 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3345 = "mini.subtype"(%3340, %3339, %3338, %3344, %3343, %3341) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3345) [^bb372, ^bb372] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb373:
    %3346 = "llvm.extractvalue"(%3327) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3347 = "llvm.load"(%3330) : (!llvm.ptr) -> i32
    %3348 = "llvm.getelementptr"(%3346, %3347) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3349 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3350 = "llvm.getelementptr"(%3348, %3349) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3350) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb374(%3351 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3352 : !llvm.ptr):
    %3353 = "mini.invariant"(%3352) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3354 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb375] : () -> ()
  ^bb376:
    %3355 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%3355, %3354) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb377] : () -> ()
  ^bb375:
    %3356 = "llvm.getelementptr"(%3352) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3357 = "llvm.load"(%3356) : (!llvm.ptr) -> !llvm.ptr
    %3358 = "llvm.getelementptr"(%3357) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3359 = "llvm.getelementptr"(%3357) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3360 = "llvm.getelementptr"(%3357) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3361 = "llvm.getelementptr"(%3357) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3362 = "llvm.load"(%3358) : (!llvm.ptr) -> i64
    %3363 = "llvm.load"(%3359) : (!llvm.ptr) -> i64
    %3364 = "llvm.load"(%3360) : (!llvm.ptr) -> !llvm.ptr
    %3365 = "llvm.load"(%3361) : (!llvm.ptr) -> !llvm.ptr
    %3366 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3367 = "llvm.ptrtoint"(%3366) : (!llvm.ptr) -> i64
    %3368 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3369 = "mini.subtype"(%3364, %3363, %3362, %3368, %3367, %3365) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3369) [^bb376, ^bb376] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb377:
    %3370 = "llvm.extractvalue"(%3351) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3371 = "llvm.load"(%3354) : (!llvm.ptr) -> i32
    %3372 = "llvm.getelementptr"(%3370, %3371) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3373 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3374 = "llvm.getelementptr"(%3372, %3373) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3374) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb378(%3375 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3376 : !llvm.ptr):
    %3377 = "mini.invariant"(%3376) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3378 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb379] : () -> ()
  ^bb380:
    %3379 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%3379, %3378) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb381] : () -> ()
  ^bb379:
    %3380 = "llvm.getelementptr"(%3376) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3381 = "llvm.load"(%3380) : (!llvm.ptr) -> !llvm.ptr
    %3382 = "llvm.getelementptr"(%3381) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3383 = "llvm.getelementptr"(%3381) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3384 = "llvm.getelementptr"(%3381) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3385 = "llvm.getelementptr"(%3381) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3386 = "llvm.load"(%3382) : (!llvm.ptr) -> i64
    %3387 = "llvm.load"(%3383) : (!llvm.ptr) -> i64
    %3388 = "llvm.load"(%3384) : (!llvm.ptr) -> !llvm.ptr
    %3389 = "llvm.load"(%3385) : (!llvm.ptr) -> !llvm.ptr
    %3390 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3391 = "llvm.ptrtoint"(%3390) : (!llvm.ptr) -> i64
    %3392 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3393 = "mini.subtype"(%3388, %3387, %3386, %3392, %3391, %3389) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3393) [^bb380, ^bb380] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb381:
    %3394 = "llvm.extractvalue"(%3375) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3395 = "llvm.load"(%3378) : (!llvm.ptr) -> i32
    %3396 = "llvm.getelementptr"(%3394, %3395) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3397 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3398 = "llvm.getelementptr"(%3396, %3397) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3398) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb382(%3399 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3400 : !llvm.ptr):
    %3401 = "mini.invariant"(%3400) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3402 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb383] : () -> ()
  ^bb384:
    %3403 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%3403, %3402) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb385] : () -> ()
  ^bb383:
    %3404 = "llvm.getelementptr"(%3400) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3405 = "llvm.load"(%3404) : (!llvm.ptr) -> !llvm.ptr
    %3406 = "llvm.getelementptr"(%3405) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3407 = "llvm.getelementptr"(%3405) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3408 = "llvm.getelementptr"(%3405) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3409 = "llvm.getelementptr"(%3405) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3410 = "llvm.load"(%3406) : (!llvm.ptr) -> i64
    %3411 = "llvm.load"(%3407) : (!llvm.ptr) -> i64
    %3412 = "llvm.load"(%3408) : (!llvm.ptr) -> !llvm.ptr
    %3413 = "llvm.load"(%3409) : (!llvm.ptr) -> !llvm.ptr
    %3414 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3415 = "llvm.ptrtoint"(%3414) : (!llvm.ptr) -> i64
    %3416 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3417 = "mini.subtype"(%3412, %3411, %3410, %3416, %3415, %3413) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3417) [^bb384, ^bb384] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb385:
    %3418 = "llvm.extractvalue"(%3399) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3419 = "llvm.load"(%3402) : (!llvm.ptr) -> i32
    %3420 = "llvm.getelementptr"(%3418, %3419) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3421 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3422 = "llvm.getelementptr"(%3420, %3421) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3422) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb386(%3423 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3424 : !llvm.ptr):
    %3425 = "mini.invariant"(%3424) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3426 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb387] : () -> ()
  ^bb388:
    %3427 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%3427, %3426) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb389] : () -> ()
  ^bb387:
    %3428 = "llvm.getelementptr"(%3424) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3429 = "llvm.load"(%3428) : (!llvm.ptr) -> !llvm.ptr
    %3430 = "llvm.getelementptr"(%3429) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3431 = "llvm.getelementptr"(%3429) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3432 = "llvm.getelementptr"(%3429) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3433 = "llvm.getelementptr"(%3429) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3434 = "llvm.load"(%3430) : (!llvm.ptr) -> i64
    %3435 = "llvm.load"(%3431) : (!llvm.ptr) -> i64
    %3436 = "llvm.load"(%3432) : (!llvm.ptr) -> !llvm.ptr
    %3437 = "llvm.load"(%3433) : (!llvm.ptr) -> !llvm.ptr
    %3438 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3439 = "llvm.ptrtoint"(%3438) : (!llvm.ptr) -> i64
    %3440 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3441 = "mini.subtype"(%3436, %3435, %3434, %3440, %3439, %3437) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3441) [^bb388, ^bb388] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb389:
    %3442 = "llvm.extractvalue"(%3423) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3443 = "llvm.load"(%3426) : (!llvm.ptr) -> i32
    %3444 = "llvm.getelementptr"(%3442, %3443) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3445 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3446 = "llvm.getelementptr"(%3444, %3445) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3446) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb390(%3447 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3448 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3449 : !llvm.ptr):
    %3450 = "mini.wrap"(%3447) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterable">
    %3451 = "mini.to_fat_ptr"(%3450) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable", "to_typ_name" = "ChainIterable", "invariant"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"ChainIterable">
    %3452 = "mini.get_field"(%3451) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    %3453 = "mini.unwrap"(%3452) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3454 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3455 = "mini.method_call"(%3454, %3453) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3456 = "mini.to_fat_ptr"(%3455) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3457 = "mini.get_field"(%3451) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    %3458 = "mini.unwrap"(%3457) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3459 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3460 = "mini.method_call"(%3459, %3458) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3461 = "mini.to_fat_ptr"(%3460) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3462 = "mini.unwrap"(%3456) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3463 = "mini.unwrap"(%3461) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3464 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "ChainIterator", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ChainIterator">
    %3465 = "mini.get_field"(%3451) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    %3466 = "mini.unwrap"(%3465) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3467 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3468 = "mini.method_call"(%3467, %3466) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3469 = "mini.to_fat_ptr"(%3468) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3470 = "mini.get_field"(%3451) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    %3471 = "mini.unwrap"(%3470) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3472 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3473 = "mini.method_call"(%3472, %3471) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3474 = "mini.to_fat_ptr"(%3473) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3475 = "mini.to_fat_ptr"(%3469) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3476 = "mini.unwrap"(%3475) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3477 = "mini.to_fat_ptr"(%3474) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3478 = "mini.unwrap"(%3477) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3479 = "mini.unwrap"(%3464) : (!mini.fatptr<"ChainIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3480 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %3481 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %3482 = "mini.parameterizations_array"(%3480, %3481) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3482, %3479, %3476, %3478) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 9 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %3483 = "mini.to_fat_ptr"(%3464) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%3483) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "ChainIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb391(%3484 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3485 : !llvm.ptr):
    %3486 = "mini.invariant"(%3485) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3487 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb392] : () -> ()
  ^bb392:
    %3488 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%3488, %3487) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb393] : () -> ()
  ^bb393:
    %3489 = "llvm.extractvalue"(%3484) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3490 = "llvm.load"(%3487) : (!llvm.ptr) -> i32
    %3491 = "llvm.getelementptr"(%3489, %3490) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3492 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3493 = "llvm.getelementptr"(%3491, %3492) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3493) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ChainIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator_field_first", "getter_name" = "ChainIterator_getter_first", "setter_name" = "ChainIterator_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator_field_second", "getter_name" = "ChainIterator_getter_second", "setter_name" = "ChainIterator_setter_second"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator_getter_on_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator_setter_on_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator_field_on_first", "getter_name" = "ChainIterator_getter_on_first", "setter_name" = "ChainIterator_setter_on_first"} : () -> ()
  "mini.func"() ({
  ^bb394(%3494 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3495 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3496 : !llvm.ptr, %3497 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3498 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3499 = "mini.wrap"(%3494) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterator">
    %3500 = "mini.to_fat_ptr"(%3499) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator", "to_typ_name" = "ChainIterator", "invariant"} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"ChainIterator">
    %3501 = "mini.wrap"(%3497) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %3502 = "mini.to_fat_ptr"(%3501) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3503 = "mini.to_fat_ptr"(%3502) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%3500, %3503) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterator">, !mini.fatptr<"IntIterator">) -> ()
    %3504 = "mini.wrap"(%3498) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %3505 = "mini.to_fat_ptr"(%3504) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3506 = "mini.to_fat_ptr"(%3505) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%3500, %3506) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterator">, !mini.fatptr<"IntIterator">) -> ()
    %3507 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %3508 = builtin.unrealized_conversion_cast %3507 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.set_field"(%3500, %3508) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator">, !mini.ptr<i1>) -> ()
  }) {"func_name" = "ChainIterator_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb395(%3509 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3510 : !llvm.ptr):
    %3511 = "mini.invariant"(%3510) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3512 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb396] : () -> ()
  ^bb397:
    %3513 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%3513, %3512) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb398] : () -> ()
  ^bb399:
    %3514 = "llvm.getelementptr"(%3510) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3515 = "llvm.load"(%3514) : (!llvm.ptr) -> !llvm.ptr
    %3516 = "llvm.getelementptr"(%3515) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3517 = "llvm.getelementptr"(%3515) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3518 = "llvm.getelementptr"(%3515) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3519 = "llvm.getelementptr"(%3515) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3520 = "llvm.load"(%3516) : (!llvm.ptr) -> i64
    %3521 = "llvm.load"(%3517) : (!llvm.ptr) -> i64
    %3522 = "llvm.load"(%3518) : (!llvm.ptr) -> !llvm.ptr
    %3523 = "llvm.load"(%3519) : (!llvm.ptr) -> !llvm.ptr
    %3524 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %3525 = "llvm.ptrtoint"(%3524) : (!llvm.ptr) -> i64
    %3526 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %3527 = "mini.subtype"(%3522, %3521, %3520, %3526, %3525, %3523) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3527) [^bb397, ^bb397] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb396:
    %3528 = "llvm.getelementptr"(%3510) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3529 = "llvm.load"(%3528) : (!llvm.ptr) -> !llvm.ptr
    %3530 = "llvm.getelementptr"(%3529) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3531 = "llvm.getelementptr"(%3529) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3532 = "llvm.getelementptr"(%3529) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3533 = "llvm.getelementptr"(%3529) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3534 = "llvm.load"(%3530) : (!llvm.ptr) -> i64
    %3535 = "llvm.load"(%3531) : (!llvm.ptr) -> i64
    %3536 = "llvm.load"(%3532) : (!llvm.ptr) -> !llvm.ptr
    %3537 = "llvm.load"(%3533) : (!llvm.ptr) -> !llvm.ptr
    %3538 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %3539 = "llvm.ptrtoint"(%3538) : (!llvm.ptr) -> i64
    %3540 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %3541 = "mini.subtype"(%3536, %3535, %3534, %3540, %3539, %3537) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3541) [^bb399, ^bb399] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb398:
    %3542 = "llvm.extractvalue"(%3509) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3543 = "llvm.load"(%3512) : (!llvm.ptr) -> i32
    %3544 = "llvm.getelementptr"(%3542, %3543) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3545 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3546 = "llvm.getelementptr"(%3544, %3545) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3546) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterator_B_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb400(%3547 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3548 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3549 : !llvm.ptr):
    %3550 = "mini.wrap"(%3547) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterator">
    %3551 = "mini.to_fat_ptr"(%3550) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator", "to_typ_name" = "ChainIterator", "invariant"} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"ChainIterator">
    %3552 = "mini.get_field"(%3551) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator">) -> !mini.ptr<i1>
    %3553 = "mini.unwrap"(%3552) : (!mini.ptr<i1>) -> i1
    "mini.if"(%3553) ({
      %3554 = "mini.get_field"(%3551) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"IntIterator">
      %3555 = "mini.unwrap"(%3554) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3556 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %3557 = "mini.method_call"(%3556, %3555) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %3558 = builtin.unrealized_conversion_cast %3557 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %3559 = "mini.checkflag"(%3558) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %3560 = "mini.unwrap"(%3559) : (i1) -> i1
      %3561 = builtin.unrealized_conversion_cast %3558 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%3560) ({
        %3562 = "mini.narrow"(%3561) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %3563 = "mini.unionize"(%3562) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        "mini.return"(%3563) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
        "mini.castassign"(%3561, %3562) ({
          %3564 = "mini.unionize"(%3562) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
      %3565 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %3566 = builtin.unrealized_conversion_cast %3565 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.set_field"(%3551, %3566) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator">, !mini.ptr<i1>) -> ()
    }) : (i1) -> ()
    %3567 = "mini.get_field"(%3551) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"IntIterator">
    %3568 = "mini.unwrap"(%3567) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3569 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3570 = "mini.method_call"(%3569, %3568) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3571 = builtin.unrealized_conversion_cast %3570 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3572 = builtin.unrealized_conversion_cast %3571 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%3572) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "ChainIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb401(%3573 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3574 : !llvm.ptr):
    %3575 = "mini.invariant"(%3574) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3576 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb402] : () -> ()
  ^bb402:
    %3577 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%3577, %3576) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb403] : () -> ()
  ^bb403:
    %3578 = "llvm.extractvalue"(%3573) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3579 = "llvm.load"(%3576) : (!llvm.ptr) -> i32
    %3580 = "llvm.getelementptr"(%3578, %3579) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3581 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3582 = "llvm.getelementptr"(%3580, %3581) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3582) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_InterleaveIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterable_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterable_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterable_field_first", "getter_name" = "InterleaveIterable_getter_first", "setter_name" = "InterleaveIterable_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterable_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterable_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterable_field_second", "getter_name" = "InterleaveIterable_getter_second", "setter_name" = "InterleaveIterable_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb404(%3583 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3584 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3585 : !llvm.ptr, %3586 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3587 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3588 = "mini.wrap"(%3583) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterable">
    %3589 = "mini.to_fat_ptr"(%3588) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "InterleaveIterable", "invariant"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"InterleaveIterable">
    %3590 = "mini.wrap"(%3586) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %3591 = "mini.to_fat_ptr"(%3590) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3592 = "mini.to_fat_ptr"(%3591) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%3589, %3592) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterable">, !mini.fatptr<"IntIterable">) -> ()
    %3593 = "mini.wrap"(%3587) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %3594 = "mini.to_fat_ptr"(%3593) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3595 = "mini.to_fat_ptr"(%3594) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%3589, %3595) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterable">, !mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "InterleaveIterable_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb405(%3596 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3597 : !llvm.ptr):
    %3598 = "mini.invariant"(%3597) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3599 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb406] : () -> ()
  ^bb407:
    %3600 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%3600, %3599) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb408] : () -> ()
  ^bb409:
    %3601 = "llvm.getelementptr"(%3597) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3602 = "llvm.load"(%3601) : (!llvm.ptr) -> !llvm.ptr
    %3603 = "llvm.getelementptr"(%3602) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3604 = "llvm.getelementptr"(%3602) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3605 = "llvm.getelementptr"(%3602) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3606 = "llvm.getelementptr"(%3602) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3607 = "llvm.load"(%3603) : (!llvm.ptr) -> i64
    %3608 = "llvm.load"(%3604) : (!llvm.ptr) -> i64
    %3609 = "llvm.load"(%3605) : (!llvm.ptr) -> !llvm.ptr
    %3610 = "llvm.load"(%3606) : (!llvm.ptr) -> !llvm.ptr
    %3611 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3612 = "llvm.ptrtoint"(%3611) : (!llvm.ptr) -> i64
    %3613 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3614 = "mini.subtype"(%3609, %3608, %3607, %3613, %3612, %3610) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3614) [^bb407, ^bb407] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb406:
    %3615 = "llvm.getelementptr"(%3597) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3616 = "llvm.load"(%3615) : (!llvm.ptr) -> !llvm.ptr
    %3617 = "llvm.getelementptr"(%3616) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3618 = "llvm.getelementptr"(%3616) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3619 = "llvm.getelementptr"(%3616) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3620 = "llvm.getelementptr"(%3616) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3621 = "llvm.load"(%3617) : (!llvm.ptr) -> i64
    %3622 = "llvm.load"(%3618) : (!llvm.ptr) -> i64
    %3623 = "llvm.load"(%3619) : (!llvm.ptr) -> !llvm.ptr
    %3624 = "llvm.load"(%3620) : (!llvm.ptr) -> !llvm.ptr
    %3625 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3626 = "llvm.ptrtoint"(%3625) : (!llvm.ptr) -> i64
    %3627 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3628 = "mini.subtype"(%3623, %3622, %3621, %3627, %3626, %3624) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3628) [^bb409, ^bb409] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb408:
    %3629 = "llvm.extractvalue"(%3596) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3630 = "llvm.load"(%3599) : (!llvm.ptr) -> i32
    %3631 = "llvm.getelementptr"(%3629, %3630) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3632 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3633 = "llvm.getelementptr"(%3631, %3632) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3633) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb410(%3634 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3635 : !llvm.ptr):
    %3636 = "mini.invariant"(%3635) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3637 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb411] : () -> ()
  ^bb412:
    %3638 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%3638, %3637) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb413] : () -> ()
  ^bb411:
    %3639 = "llvm.getelementptr"(%3635) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3640 = "llvm.load"(%3639) : (!llvm.ptr) -> !llvm.ptr
    %3641 = "llvm.getelementptr"(%3640) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3642 = "llvm.getelementptr"(%3640) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3643 = "llvm.getelementptr"(%3640) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3644 = "llvm.getelementptr"(%3640) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3645 = "llvm.load"(%3641) : (!llvm.ptr) -> i64
    %3646 = "llvm.load"(%3642) : (!llvm.ptr) -> i64
    %3647 = "llvm.load"(%3643) : (!llvm.ptr) -> !llvm.ptr
    %3648 = "llvm.load"(%3644) : (!llvm.ptr) -> !llvm.ptr
    %3649 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3650 = "llvm.ptrtoint"(%3649) : (!llvm.ptr) -> i64
    %3651 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3652 = "mini.subtype"(%3647, %3646, %3645, %3651, %3650, %3648) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3652) [^bb412, ^bb412] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb413:
    %3653 = "llvm.extractvalue"(%3634) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3654 = "llvm.load"(%3637) : (!llvm.ptr) -> i32
    %3655 = "llvm.getelementptr"(%3653, %3654) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3656 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3657 = "llvm.getelementptr"(%3655, %3656) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3657) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb414(%3658 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3659 : !llvm.ptr):
    %3660 = "mini.invariant"(%3659) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3661 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb415] : () -> ()
  ^bb416:
    %3662 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%3662, %3661) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb417] : () -> ()
  ^bb418:
    %3663 = "llvm.getelementptr"(%3659) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3664 = "llvm.load"(%3663) : (!llvm.ptr) -> !llvm.ptr
    %3665 = "llvm.getelementptr"(%3664) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3666 = "llvm.getelementptr"(%3664) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3667 = "llvm.getelementptr"(%3664) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3668 = "llvm.getelementptr"(%3664) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3669 = "llvm.load"(%3665) : (!llvm.ptr) -> i64
    %3670 = "llvm.load"(%3666) : (!llvm.ptr) -> i64
    %3671 = "llvm.load"(%3667) : (!llvm.ptr) -> !llvm.ptr
    %3672 = "llvm.load"(%3668) : (!llvm.ptr) -> !llvm.ptr
    %3673 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3674 = "llvm.ptrtoint"(%3673) : (!llvm.ptr) -> i64
    %3675 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3676 = "mini.subtype"(%3671, %3670, %3669, %3675, %3674, %3672) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3676) [^bb416, ^bb416] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb415:
    %3677 = "llvm.getelementptr"(%3659) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3678 = "llvm.load"(%3677) : (!llvm.ptr) -> !llvm.ptr
    %3679 = "llvm.getelementptr"(%3678) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3680 = "llvm.getelementptr"(%3678) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3681 = "llvm.getelementptr"(%3678) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3682 = "llvm.getelementptr"(%3678) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3683 = "llvm.load"(%3679) : (!llvm.ptr) -> i64
    %3684 = "llvm.load"(%3680) : (!llvm.ptr) -> i64
    %3685 = "llvm.load"(%3681) : (!llvm.ptr) -> !llvm.ptr
    %3686 = "llvm.load"(%3682) : (!llvm.ptr) -> !llvm.ptr
    %3687 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %3688 = "llvm.ptrtoint"(%3687) : (!llvm.ptr) -> i64
    %3689 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %3690 = "mini.subtype"(%3685, %3684, %3683, %3689, %3688, %3686) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3690) [^bb418, ^bb418] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb417:
    %3691 = "llvm.extractvalue"(%3658) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3692 = "llvm.load"(%3661) : (!llvm.ptr) -> i32
    %3693 = "llvm.getelementptr"(%3691, %3692) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3694 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3695 = "llvm.getelementptr"(%3693, %3694) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3695) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb419(%3696 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3697 : !llvm.ptr):
    %3698 = "mini.invariant"(%3697) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3699 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb420] : () -> ()
  ^bb421:
    %3700 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%3700, %3699) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb422] : () -> ()
  ^bb420:
    %3701 = "llvm.getelementptr"(%3697) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3702 = "llvm.load"(%3701) : (!llvm.ptr) -> !llvm.ptr
    %3703 = "llvm.getelementptr"(%3702) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3704 = "llvm.getelementptr"(%3702) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3705 = "llvm.getelementptr"(%3702) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3706 = "llvm.getelementptr"(%3702) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3707 = "llvm.load"(%3703) : (!llvm.ptr) -> i64
    %3708 = "llvm.load"(%3704) : (!llvm.ptr) -> i64
    %3709 = "llvm.load"(%3705) : (!llvm.ptr) -> !llvm.ptr
    %3710 = "llvm.load"(%3706) : (!llvm.ptr) -> !llvm.ptr
    %3711 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3712 = "llvm.ptrtoint"(%3711) : (!llvm.ptr) -> i64
    %3713 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3714 = "mini.subtype"(%3709, %3708, %3707, %3713, %3712, %3710) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3714) [^bb421, ^bb421] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb422:
    %3715 = "llvm.extractvalue"(%3696) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3716 = "llvm.load"(%3699) : (!llvm.ptr) -> i32
    %3717 = "llvm.getelementptr"(%3715, %3716) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3718 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3719 = "llvm.getelementptr"(%3717, %3718) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3719) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb423(%3720 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3721 : !llvm.ptr):
    %3722 = "mini.invariant"(%3721) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3723 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb424] : () -> ()
  ^bb425:
    %3724 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%3724, %3723) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb426] : () -> ()
  ^bb424:
    %3725 = "llvm.getelementptr"(%3721) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3726 = "llvm.load"(%3725) : (!llvm.ptr) -> !llvm.ptr
    %3727 = "llvm.getelementptr"(%3726) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3728 = "llvm.getelementptr"(%3726) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3729 = "llvm.getelementptr"(%3726) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3730 = "llvm.getelementptr"(%3726) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3731 = "llvm.load"(%3727) : (!llvm.ptr) -> i64
    %3732 = "llvm.load"(%3728) : (!llvm.ptr) -> i64
    %3733 = "llvm.load"(%3729) : (!llvm.ptr) -> !llvm.ptr
    %3734 = "llvm.load"(%3730) : (!llvm.ptr) -> !llvm.ptr
    %3735 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3736 = "llvm.ptrtoint"(%3735) : (!llvm.ptr) -> i64
    %3737 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3738 = "mini.subtype"(%3733, %3732, %3731, %3737, %3736, %3734) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3738) [^bb425, ^bb425] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb426:
    %3739 = "llvm.extractvalue"(%3720) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3740 = "llvm.load"(%3723) : (!llvm.ptr) -> i32
    %3741 = "llvm.getelementptr"(%3739, %3740) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3742 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3743 = "llvm.getelementptr"(%3741, %3742) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3743) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb427(%3744 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3745 : !llvm.ptr):
    %3746 = "mini.invariant"(%3745) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3747 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb428] : () -> ()
  ^bb429:
    %3748 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%3748, %3747) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb430] : () -> ()
  ^bb428:
    %3749 = "llvm.getelementptr"(%3745) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3750 = "llvm.load"(%3749) : (!llvm.ptr) -> !llvm.ptr
    %3751 = "llvm.getelementptr"(%3750) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3752 = "llvm.getelementptr"(%3750) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3753 = "llvm.getelementptr"(%3750) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3754 = "llvm.getelementptr"(%3750) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3755 = "llvm.load"(%3751) : (!llvm.ptr) -> i64
    %3756 = "llvm.load"(%3752) : (!llvm.ptr) -> i64
    %3757 = "llvm.load"(%3753) : (!llvm.ptr) -> !llvm.ptr
    %3758 = "llvm.load"(%3754) : (!llvm.ptr) -> !llvm.ptr
    %3759 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3760 = "llvm.ptrtoint"(%3759) : (!llvm.ptr) -> i64
    %3761 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3762 = "mini.subtype"(%3757, %3756, %3755, %3761, %3760, %3758) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3762) [^bb429, ^bb429] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb430:
    %3763 = "llvm.extractvalue"(%3744) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3764 = "llvm.load"(%3747) : (!llvm.ptr) -> i32
    %3765 = "llvm.getelementptr"(%3763, %3764) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3766 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3767 = "llvm.getelementptr"(%3765, %3766) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3767) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb431(%3768 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3769 : !llvm.ptr):
    %3770 = "mini.invariant"(%3769) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3771 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb432] : () -> ()
  ^bb433:
    %3772 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%3772, %3771) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb434] : () -> ()
  ^bb432:
    %3773 = "llvm.getelementptr"(%3769) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3774 = "llvm.load"(%3773) : (!llvm.ptr) -> !llvm.ptr
    %3775 = "llvm.getelementptr"(%3774) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3776 = "llvm.getelementptr"(%3774) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3777 = "llvm.getelementptr"(%3774) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3778 = "llvm.getelementptr"(%3774) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3779 = "llvm.load"(%3775) : (!llvm.ptr) -> i64
    %3780 = "llvm.load"(%3776) : (!llvm.ptr) -> i64
    %3781 = "llvm.load"(%3777) : (!llvm.ptr) -> !llvm.ptr
    %3782 = "llvm.load"(%3778) : (!llvm.ptr) -> !llvm.ptr
    %3783 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3784 = "llvm.ptrtoint"(%3783) : (!llvm.ptr) -> i64
    %3785 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3786 = "mini.subtype"(%3781, %3780, %3779, %3785, %3784, %3782) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3786) [^bb433, ^bb433] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb434:
    %3787 = "llvm.extractvalue"(%3768) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3788 = "llvm.load"(%3771) : (!llvm.ptr) -> i32
    %3789 = "llvm.getelementptr"(%3787, %3788) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3790 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3791 = "llvm.getelementptr"(%3789, %3790) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3791) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb435(%3792 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3793 : !llvm.ptr):
    %3794 = "mini.invariant"(%3793) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3795 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb436] : () -> ()
  ^bb437:
    %3796 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%3796, %3795) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb438] : () -> ()
  ^bb436:
    %3797 = "llvm.getelementptr"(%3793) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3798 = "llvm.load"(%3797) : (!llvm.ptr) -> !llvm.ptr
    %3799 = "llvm.getelementptr"(%3798) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3800 = "llvm.getelementptr"(%3798) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3801 = "llvm.getelementptr"(%3798) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3802 = "llvm.getelementptr"(%3798) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3803 = "llvm.load"(%3799) : (!llvm.ptr) -> i64
    %3804 = "llvm.load"(%3800) : (!llvm.ptr) -> i64
    %3805 = "llvm.load"(%3801) : (!llvm.ptr) -> !llvm.ptr
    %3806 = "llvm.load"(%3802) : (!llvm.ptr) -> !llvm.ptr
    %3807 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3808 = "llvm.ptrtoint"(%3807) : (!llvm.ptr) -> i64
    %3809 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3810 = "mini.subtype"(%3805, %3804, %3803, %3809, %3808, %3806) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3810) [^bb437, ^bb437] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb438:
    %3811 = "llvm.extractvalue"(%3792) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3812 = "llvm.load"(%3795) : (!llvm.ptr) -> i32
    %3813 = "llvm.getelementptr"(%3811, %3812) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3814 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3815 = "llvm.getelementptr"(%3813, %3814) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3815) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb439(%3816 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3817 : !llvm.ptr):
    %3818 = "mini.invariant"(%3817) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3819 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb440] : () -> ()
  ^bb441:
    %3820 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%3820, %3819) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb442] : () -> ()
  ^bb440:
    %3821 = "llvm.getelementptr"(%3817) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3822 = "llvm.load"(%3821) : (!llvm.ptr) -> !llvm.ptr
    %3823 = "llvm.getelementptr"(%3822) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3824 = "llvm.getelementptr"(%3822) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3825 = "llvm.getelementptr"(%3822) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3826 = "llvm.getelementptr"(%3822) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3827 = "llvm.load"(%3823) : (!llvm.ptr) -> i64
    %3828 = "llvm.load"(%3824) : (!llvm.ptr) -> i64
    %3829 = "llvm.load"(%3825) : (!llvm.ptr) -> !llvm.ptr
    %3830 = "llvm.load"(%3826) : (!llvm.ptr) -> !llvm.ptr
    %3831 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3832 = "llvm.ptrtoint"(%3831) : (!llvm.ptr) -> i64
    %3833 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3834 = "mini.subtype"(%3829, %3828, %3827, %3833, %3832, %3830) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3834) [^bb441, ^bb441] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb442:
    %3835 = "llvm.extractvalue"(%3816) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3836 = "llvm.load"(%3819) : (!llvm.ptr) -> i32
    %3837 = "llvm.getelementptr"(%3835, %3836) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3838 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3839 = "llvm.getelementptr"(%3837, %3838) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3839) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb443(%3840 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3841 : !llvm.ptr):
    %3842 = "mini.invariant"(%3841) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3843 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb444] : () -> ()
  ^bb445:
    %3844 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%3844, %3843) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb446] : () -> ()
  ^bb444:
    %3845 = "llvm.getelementptr"(%3841) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3846 = "llvm.load"(%3845) : (!llvm.ptr) -> !llvm.ptr
    %3847 = "llvm.getelementptr"(%3846) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3848 = "llvm.getelementptr"(%3846) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3849 = "llvm.getelementptr"(%3846) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3850 = "llvm.getelementptr"(%3846) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3851 = "llvm.load"(%3847) : (!llvm.ptr) -> i64
    %3852 = "llvm.load"(%3848) : (!llvm.ptr) -> i64
    %3853 = "llvm.load"(%3849) : (!llvm.ptr) -> !llvm.ptr
    %3854 = "llvm.load"(%3850) : (!llvm.ptr) -> !llvm.ptr
    %3855 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3856 = "llvm.ptrtoint"(%3855) : (!llvm.ptr) -> i64
    %3857 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3858 = "mini.subtype"(%3853, %3852, %3851, %3857, %3856, %3854) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3858) [^bb445, ^bb445] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb446:
    %3859 = "llvm.extractvalue"(%3840) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3860 = "llvm.load"(%3843) : (!llvm.ptr) -> i32
    %3861 = "llvm.getelementptr"(%3859, %3860) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3862 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3863 = "llvm.getelementptr"(%3861, %3862) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3863) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb447(%3864 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3865 : !llvm.ptr):
    %3866 = "mini.invariant"(%3865) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3867 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb448] : () -> ()
  ^bb449:
    %3868 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%3868, %3867) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb450] : () -> ()
  ^bb448:
    %3869 = "llvm.getelementptr"(%3865) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3870 = "llvm.load"(%3869) : (!llvm.ptr) -> !llvm.ptr
    %3871 = "llvm.getelementptr"(%3870) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3872 = "llvm.getelementptr"(%3870) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3873 = "llvm.getelementptr"(%3870) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3874 = "llvm.getelementptr"(%3870) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3875 = "llvm.load"(%3871) : (!llvm.ptr) -> i64
    %3876 = "llvm.load"(%3872) : (!llvm.ptr) -> i64
    %3877 = "llvm.load"(%3873) : (!llvm.ptr) -> !llvm.ptr
    %3878 = "llvm.load"(%3874) : (!llvm.ptr) -> !llvm.ptr
    %3879 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3880 = "llvm.ptrtoint"(%3879) : (!llvm.ptr) -> i64
    %3881 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3882 = "mini.subtype"(%3877, %3876, %3875, %3881, %3880, %3878) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3882) [^bb449, ^bb449] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb450:
    %3883 = "llvm.extractvalue"(%3864) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3884 = "llvm.load"(%3867) : (!llvm.ptr) -> i32
    %3885 = "llvm.getelementptr"(%3883, %3884) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3886 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3887 = "llvm.getelementptr"(%3885, %3886) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3887) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb451(%3888 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3889 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3890 : !llvm.ptr):
    %3891 = "mini.wrap"(%3888) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterable">
    %3892 = "mini.to_fat_ptr"(%3891) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "InterleaveIterable", "invariant"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"InterleaveIterable">
    %3893 = "mini.get_field"(%3892) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    %3894 = "mini.unwrap"(%3893) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3895 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3896 = "mini.method_call"(%3895, %3894) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3897 = "mini.to_fat_ptr"(%3896) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3898 = "mini.get_field"(%3892) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    %3899 = "mini.unwrap"(%3898) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3900 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3901 = "mini.method_call"(%3900, %3899) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3902 = "mini.to_fat_ptr"(%3901) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3903 = "mini.unwrap"(%3897) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3904 = "mini.unwrap"(%3902) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3905 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "InterleaveIterator", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"InterleaveIterator">
    %3906 = "mini.get_field"(%3892) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    %3907 = "mini.unwrap"(%3906) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3908 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3909 = "mini.method_call"(%3908, %3907) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3910 = "mini.to_fat_ptr"(%3909) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3911 = "mini.get_field"(%3892) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    %3912 = "mini.unwrap"(%3911) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3913 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3914 = "mini.method_call"(%3913, %3912) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3915 = "mini.to_fat_ptr"(%3914) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3916 = "mini.to_fat_ptr"(%3910) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3917 = "mini.unwrap"(%3916) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3918 = "mini.to_fat_ptr"(%3915) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3919 = "mini.unwrap"(%3918) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3920 = "mini.unwrap"(%3905) : (!mini.fatptr<"InterleaveIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3921 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %3922 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %3923 = "mini.parameterizations_array"(%3921, %3922) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3923, %3920, %3917, %3919) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 9 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %3924 = "mini.to_fat_ptr"(%3905) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%3924) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "InterleaveIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb452(%3925 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3926 : !llvm.ptr):
    %3927 = "mini.invariant"(%3926) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3928 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb453] : () -> ()
  ^bb453:
    %3929 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%3929, %3928) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb454] : () -> ()
  ^bb454:
    %3930 = "llvm.extractvalue"(%3925) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3931 = "llvm.load"(%3928) : (!llvm.ptr) -> i32
    %3932 = "llvm.getelementptr"(%3930, %3931) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3933 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3934 = "llvm.getelementptr"(%3932, %3933) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3934) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_InterleaveIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator_field_first", "getter_name" = "InterleaveIterator_getter_first", "setter_name" = "InterleaveIterator_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator_field_second", "getter_name" = "InterleaveIterator_getter_second", "setter_name" = "InterleaveIterator_setter_second"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator_getter_on_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator_setter_on_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator_field_on_first", "getter_name" = "InterleaveIterator_getter_on_first", "setter_name" = "InterleaveIterator_setter_on_first"} : () -> ()
  "mini.func"() ({
  ^bb455(%3935 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3936 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3937 : !llvm.ptr, %3938 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3939 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3940 = "mini.wrap"(%3935) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterator">
    %3941 = "mini.to_fat_ptr"(%3940) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "InterleaveIterator", "invariant"} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"InterleaveIterator">
    %3942 = "mini.wrap"(%3938) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %3943 = "mini.to_fat_ptr"(%3942) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3944 = "mini.to_fat_ptr"(%3943) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%3941, %3944) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterator">, !mini.fatptr<"IntIterator">) -> ()
    %3945 = "mini.wrap"(%3939) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %3946 = "mini.to_fat_ptr"(%3945) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3947 = "mini.to_fat_ptr"(%3946) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%3941, %3947) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterator">, !mini.fatptr<"IntIterator">) -> ()
    %3948 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %3949 = builtin.unrealized_conversion_cast %3948 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.set_field"(%3941, %3949) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator">, !mini.ptr<i1>) -> ()
  }) {"func_name" = "InterleaveIterator_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb456(%3950 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3951 : !llvm.ptr):
    %3952 = "mini.invariant"(%3951) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3953 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb457] : () -> ()
  ^bb458:
    %3954 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%3954, %3953) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb459] : () -> ()
  ^bb460:
    %3955 = "llvm.getelementptr"(%3951) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3956 = "llvm.load"(%3955) : (!llvm.ptr) -> !llvm.ptr
    %3957 = "llvm.getelementptr"(%3956) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3958 = "llvm.getelementptr"(%3956) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3959 = "llvm.getelementptr"(%3956) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3960 = "llvm.getelementptr"(%3956) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3961 = "llvm.load"(%3957) : (!llvm.ptr) -> i64
    %3962 = "llvm.load"(%3958) : (!llvm.ptr) -> i64
    %3963 = "llvm.load"(%3959) : (!llvm.ptr) -> !llvm.ptr
    %3964 = "llvm.load"(%3960) : (!llvm.ptr) -> !llvm.ptr
    %3965 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %3966 = "llvm.ptrtoint"(%3965) : (!llvm.ptr) -> i64
    %3967 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %3968 = "mini.subtype"(%3963, %3962, %3961, %3967, %3966, %3964) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3968) [^bb458, ^bb458] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb457:
    %3969 = "llvm.getelementptr"(%3951) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %3970 = "llvm.load"(%3969) : (!llvm.ptr) -> !llvm.ptr
    %3971 = "llvm.getelementptr"(%3970) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3972 = "llvm.getelementptr"(%3970) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3973 = "llvm.getelementptr"(%3970) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3974 = "llvm.getelementptr"(%3970) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3975 = "llvm.load"(%3971) : (!llvm.ptr) -> i64
    %3976 = "llvm.load"(%3972) : (!llvm.ptr) -> i64
    %3977 = "llvm.load"(%3973) : (!llvm.ptr) -> !llvm.ptr
    %3978 = "llvm.load"(%3974) : (!llvm.ptr) -> !llvm.ptr
    %3979 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %3980 = "llvm.ptrtoint"(%3979) : (!llvm.ptr) -> i64
    %3981 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %3982 = "mini.subtype"(%3977, %3976, %3975, %3981, %3980, %3978) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3982) [^bb460, ^bb460] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb459:
    %3983 = "llvm.extractvalue"(%3950) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3984 = "llvm.load"(%3953) : (!llvm.ptr) -> i32
    %3985 = "llvm.getelementptr"(%3983, %3984) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3986 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %3987 = "llvm.getelementptr"(%3985, %3986) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3987) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterator_B_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb461(%3988 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3989 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3990 : !llvm.ptr):
    %3991 = "mini.wrap"(%3988) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterator">
    %3992 = "mini.to_fat_ptr"(%3991) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "InterleaveIterator", "invariant"} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"InterleaveIterator">
    %3993 = "mini.get_field"(%3992) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator">) -> !mini.ptr<i1>
    %3994 = "mini.unwrap"(%3993) : (!mini.ptr<i1>) -> i1
    "mini.if"(%3994) ({
      %3995 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %3996 = builtin.unrealized_conversion_cast %3995 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.set_field"(%3992, %3996) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator">, !mini.ptr<i1>) -> ()
      %3997 = "mini.get_field"(%3992) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"IntIterator">
      %3998 = "mini.unwrap"(%3997) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3999 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %4000 = "mini.method_call"(%3999, %3998) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %4001 = builtin.unrealized_conversion_cast %4000 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %4002 = builtin.unrealized_conversion_cast %4001 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%4002) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %4003 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %4004 = builtin.unrealized_conversion_cast %4003 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.set_field"(%3992, %4004) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator">, !mini.ptr<i1>) -> ()
    %4005 = "mini.get_field"(%3992) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"IntIterator">
    %4006 = "mini.unwrap"(%4005) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4007 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4008 = "mini.method_call"(%4007, %4006) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4009 = builtin.unrealized_conversion_cast %4008 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4010 = builtin.unrealized_conversion_cast %4009 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%4010) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "InterleaveIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb462(%4011 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4012 : !llvm.ptr):
    %4013 = "mini.invariant"(%4012) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4014 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb463] : () -> ()
  ^bb463:
    %4015 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%4015, %4014) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb464] : () -> ()
  ^bb464:
    %4016 = "llvm.extractvalue"(%4011) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4017 = "llvm.load"(%4014) : (!llvm.ptr) -> i32
    %4018 = "llvm.getelementptr"(%4016, %4017) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4019 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4020 = "llvm.getelementptr"(%4018, %4019) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4020) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_IntTupleIterable", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb465(%4021 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4022 : !llvm.ptr):
    %4023 = "mini.invariant"(%4022) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4024 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb466] : () -> ()
  ^bb466:
    %4025 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%4025, %4024) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb467] : () -> ()
  ^bb467:
    %4026 = "llvm.extractvalue"(%4021) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4027 = "llvm.load"(%4024) : (!llvm.ptr) -> i32
    %4028 = "llvm.getelementptr"(%4026, %4027) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<4 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4029 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4030 = "llvm.getelementptr"(%4028, %4029) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4030) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntTupleIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_IntTupleIterator", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb468(%4031 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4032 : !llvm.ptr):
    %4033 = "mini.invariant"(%4032) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4034 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb469] : () -> ()
  ^bb469:
    %4035 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%4035, %4034) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb470] : () -> ()
  ^bb470:
    %4036 = "llvm.extractvalue"(%4031) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4037 = "llvm.load"(%4034) : (!llvm.ptr) -> i32
    %4038 = "llvm.getelementptr"(%4036, %4037) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4039 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4040 = "llvm.getelementptr"(%4038, %4039) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4040) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntTupleIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ZipIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterable_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterable_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterable_field_first", "getter_name" = "ZipIterable_getter_first", "setter_name" = "ZipIterable_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterable_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterable_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterable_field_second", "getter_name" = "ZipIterable_getter_second", "setter_name" = "ZipIterable_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb471(%4041 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4042 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4043 : !llvm.ptr, %4044 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4045 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4046 = "mini.wrap"(%4041) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterable">
    %4047 = "mini.to_fat_ptr"(%4046) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable", "invariant"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"ZipIterable">
    %4048 = "mini.wrap"(%4044) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %4049 = "mini.to_fat_ptr"(%4048) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4050 = "mini.to_fat_ptr"(%4049) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%4047, %4050) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterable">, !mini.fatptr<"IntIterable">) -> ()
    %4051 = "mini.wrap"(%4045) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %4052 = "mini.to_fat_ptr"(%4051) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4053 = "mini.to_fat_ptr"(%4052) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%4047, %4053) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterable">, !mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "ZipIterable_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb472(%4054 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4055 : !llvm.ptr):
    %4056 = "mini.invariant"(%4055) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4057 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb473] : () -> ()
  ^bb474:
    %4058 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%4058, %4057) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb475] : () -> ()
  ^bb476:
    %4059 = "llvm.getelementptr"(%4055) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4060 = "llvm.load"(%4059) : (!llvm.ptr) -> !llvm.ptr
    %4061 = "llvm.getelementptr"(%4060) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4062 = "llvm.getelementptr"(%4060) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4063 = "llvm.getelementptr"(%4060) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4064 = "llvm.getelementptr"(%4060) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4065 = "llvm.load"(%4061) : (!llvm.ptr) -> i64
    %4066 = "llvm.load"(%4062) : (!llvm.ptr) -> i64
    %4067 = "llvm.load"(%4063) : (!llvm.ptr) -> !llvm.ptr
    %4068 = "llvm.load"(%4064) : (!llvm.ptr) -> !llvm.ptr
    %4069 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4070 = "llvm.ptrtoint"(%4069) : (!llvm.ptr) -> i64
    %4071 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4072 = "mini.subtype"(%4067, %4066, %4065, %4071, %4070, %4068) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4072) [^bb474, ^bb474] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb473:
    %4073 = "llvm.getelementptr"(%4055) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4074 = "llvm.load"(%4073) : (!llvm.ptr) -> !llvm.ptr
    %4075 = "llvm.getelementptr"(%4074) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4076 = "llvm.getelementptr"(%4074) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4077 = "llvm.getelementptr"(%4074) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4078 = "llvm.getelementptr"(%4074) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4079 = "llvm.load"(%4075) : (!llvm.ptr) -> i64
    %4080 = "llvm.load"(%4076) : (!llvm.ptr) -> i64
    %4081 = "llvm.load"(%4077) : (!llvm.ptr) -> !llvm.ptr
    %4082 = "llvm.load"(%4078) : (!llvm.ptr) -> !llvm.ptr
    %4083 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4084 = "llvm.ptrtoint"(%4083) : (!llvm.ptr) -> i64
    %4085 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4086 = "mini.subtype"(%4081, %4080, %4079, %4085, %4084, %4082) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4086) [^bb476, ^bb476] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb475:
    %4087 = "llvm.extractvalue"(%4054) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4088 = "llvm.load"(%4057) : (!llvm.ptr) -> i32
    %4089 = "llvm.getelementptr"(%4087, %4088) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4090 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4091 = "llvm.getelementptr"(%4089, %4090) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4091) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb477(%4092 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4093 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4094 : !llvm.ptr):
    %4095 = "mini.wrap"(%4092) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterable">
    %4096 = "mini.to_fat_ptr"(%4095) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable", "invariant"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"ZipIterable">
    %4097 = "mini.get_field"(%4096) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"IntIterable">
    %4098 = "mini.unwrap"(%4097) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4099 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4100 = "mini.method_call"(%4099, %4098) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4101 = "mini.to_fat_ptr"(%4100) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4102 = "mini.get_field"(%4096) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"IntIterable">
    %4103 = "mini.unwrap"(%4102) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4104 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4105 = "mini.method_call"(%4104, %4103) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4106 = "mini.to_fat_ptr"(%4105) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4107 = "mini.unwrap"(%4101) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4108 = "mini.unwrap"(%4106) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4109 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ZipIterator">
    %4110 = "mini.get_field"(%4096) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"IntIterable">
    %4111 = "mini.unwrap"(%4110) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4112 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4113 = "mini.method_call"(%4112, %4111) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4114 = "mini.to_fat_ptr"(%4113) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4115 = "mini.get_field"(%4096) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"IntIterable">
    %4116 = "mini.unwrap"(%4115) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4117 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4118 = "mini.method_call"(%4117, %4116) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4119 = "mini.to_fat_ptr"(%4118) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4120 = "mini.to_fat_ptr"(%4114) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %4121 = "mini.unwrap"(%4120) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4122 = "mini.to_fat_ptr"(%4119) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %4123 = "mini.unwrap"(%4122) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4124 = "mini.unwrap"(%4109) : (!mini.fatptr<"ZipIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4125 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %4126 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %4127 = "mini.parameterizations_array"(%4125, %4126) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%4127, %4124, %4121, %4123) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %4128 = "mini.to_fat_ptr"(%4109) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%4128) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "ZipIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb478(%4129 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4130 : !llvm.ptr):
    %4131 = "mini.invariant"(%4130) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4132 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb479] : () -> ()
  ^bb479:
    %4133 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%4133, %4132) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb480] : () -> ()
  ^bb480:
    %4134 = "llvm.extractvalue"(%4129) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4135 = "llvm.load"(%4132) : (!llvm.ptr) -> i32
    %4136 = "llvm.getelementptr"(%4134, %4135) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4137 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4138 = "llvm.getelementptr"(%4136, %4137) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4138) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ZipIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterator_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterator_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterator_field_first", "getter_name" = "ZipIterator_getter_first", "setter_name" = "ZipIterator_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterator_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterator_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterator_field_second", "getter_name" = "ZipIterator_getter_second", "setter_name" = "ZipIterator_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb481(%4139 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4140 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4141 : !llvm.ptr, %4142 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4143 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4144 = "mini.wrap"(%4139) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterator">
    %4145 = "mini.to_fat_ptr"(%4144) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator", "to_typ_name" = "ZipIterator", "invariant"} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"ZipIterator">
    %4146 = "mini.wrap"(%4142) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %4147 = "mini.to_fat_ptr"(%4146) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %4148 = "mini.to_fat_ptr"(%4147) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%4145, %4148) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterator">, !mini.fatptr<"IntIterator">) -> ()
    %4149 = "mini.wrap"(%4143) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %4150 = "mini.to_fat_ptr"(%4149) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %4151 = "mini.to_fat_ptr"(%4150) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%4145, %4151) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterator">, !mini.fatptr<"IntIterator">) -> ()
  }) {"func_name" = "ZipIterator_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb482(%4152 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4153 : !llvm.ptr):
    %4154 = "mini.invariant"(%4153) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4155 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb483] : () -> ()
  ^bb484:
    %4156 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%4156, %4155) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb485] : () -> ()
  ^bb486:
    %4157 = "llvm.getelementptr"(%4153) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4158 = "llvm.load"(%4157) : (!llvm.ptr) -> !llvm.ptr
    %4159 = "llvm.getelementptr"(%4158) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4160 = "llvm.getelementptr"(%4158) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4161 = "llvm.getelementptr"(%4158) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4162 = "llvm.getelementptr"(%4158) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4163 = "llvm.load"(%4159) : (!llvm.ptr) -> i64
    %4164 = "llvm.load"(%4160) : (!llvm.ptr) -> i64
    %4165 = "llvm.load"(%4161) : (!llvm.ptr) -> !llvm.ptr
    %4166 = "llvm.load"(%4162) : (!llvm.ptr) -> !llvm.ptr
    %4167 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %4168 = "llvm.ptrtoint"(%4167) : (!llvm.ptr) -> i64
    %4169 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %4170 = "mini.subtype"(%4165, %4164, %4163, %4169, %4168, %4166) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4170) [^bb484, ^bb484] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb483:
    %4171 = "llvm.getelementptr"(%4153) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4172 = "llvm.load"(%4171) : (!llvm.ptr) -> !llvm.ptr
    %4173 = "llvm.getelementptr"(%4172) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4174 = "llvm.getelementptr"(%4172) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4175 = "llvm.getelementptr"(%4172) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4176 = "llvm.getelementptr"(%4172) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4177 = "llvm.load"(%4173) : (!llvm.ptr) -> i64
    %4178 = "llvm.load"(%4174) : (!llvm.ptr) -> i64
    %4179 = "llvm.load"(%4175) : (!llvm.ptr) -> !llvm.ptr
    %4180 = "llvm.load"(%4176) : (!llvm.ptr) -> !llvm.ptr
    %4181 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %4182 = "llvm.ptrtoint"(%4181) : (!llvm.ptr) -> i64
    %4183 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %4184 = "mini.subtype"(%4179, %4178, %4177, %4183, %4182, %4180) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4184) [^bb486, ^bb486] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb485:
    %4185 = "llvm.extractvalue"(%4152) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4186 = "llvm.load"(%4155) : (!llvm.ptr) -> i32
    %4187 = "llvm.getelementptr"(%4185, %4186) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4188 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4189 = "llvm.getelementptr"(%4187, %4188) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4189) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterator_B_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb487(%4190 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4191 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4192 : !llvm.ptr):
    %4193 = "mini.wrap"(%4190) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterator">
    %4194 = "mini.to_fat_ptr"(%4193) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator", "to_typ_name" = "ZipIterator", "invariant"} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"ZipIterator">
    %4195 = "mini.get_field"(%4194) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"IntIterator">
    %4196 = "mini.unwrap"(%4195) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4197 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4198 = "mini.method_call"(%4197, %4196) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4199 = builtin.unrealized_conversion_cast %4198 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4200 = "mini.get_field"(%4194) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"IntIterator">
    %4201 = "mini.unwrap"(%4200) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4202 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4203 = "mini.method_call"(%4202, %4201) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4204 = builtin.unrealized_conversion_cast %4203 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4205 = "mini.checkflag"(%4199) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
    %4206 = "mini.unwrap"(%4205) : (i1) -> i1
    %4207 = builtin.unrealized_conversion_cast %4199 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.if"(%4206) ({
      %4208 = "mini.narrow"(%4207) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %4209 = "mini.checkflag"(%4204) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %4210 = "mini.unwrap"(%4209) : (i1) -> i1
      %4211 = builtin.unrealized_conversion_cast %4204 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%4210) ({
        %4212 = "mini.narrow"(%4211) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %4213 = "mini.unwrap"(%4208) : (!mini.ptr<i32>) -> i32
        %4214 = "mini.unwrap"(%4212) : (!mini.ptr<i32>) -> i32
        %4215 = "mini.create_tuple"(%4213, %4214) {"typ" = !llvm.struct<(i32, i32)>} : (i32, i32) -> !mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>
        %4216 = "mini.unionize"(%4215) {"from_typ" = !llvm.struct<(i32, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "tuple_typ", "to_typ_name" = "union_typ"} : (!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>) -> !mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>
        "mini.return"(%4216) : (!mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>) -> ()
        "mini.castassign"(%4211, %4212) ({
          %4217 = "mini.unionize"(%4212) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%4207, %4208) ({
        %4218 = "mini.unionize"(%4208) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %4219 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %4220 = "mini.unionize"(%4219) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>
    "mini.return"(%4220) : (!mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>) -> ()
  }) {"func_name" = "ZipIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb488(%4221 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4222 : !llvm.ptr):
    %4223 = "mini.invariant"(%4222) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4224 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb489] : () -> ()
  ^bb489:
    %4225 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%4225, %4224) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb490] : () -> ()
  ^bb490:
    %4226 = "llvm.extractvalue"(%4221) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4227 = "llvm.load"(%4224) : (!llvm.ptr) -> i32
    %4228 = "llvm.getelementptr"(%4226, %4227) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4229 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4230 = "llvm.getelementptr"(%4228, %4229) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4230) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ProductIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterable_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterable_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterable_field_first", "getter_name" = "ProductIterable_getter_first", "setter_name" = "ProductIterable_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterable_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterable_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterable_field_second", "getter_name" = "ProductIterable_getter_second", "setter_name" = "ProductIterable_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb491(%4231 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4232 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4233 : !llvm.ptr, %4234 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4235 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4236 = "mini.wrap"(%4231) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterable">
    %4237 = "mini.to_fat_ptr"(%4236) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable", "invariant"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"ProductIterable">
    %4238 = "mini.wrap"(%4234) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %4239 = "mini.to_fat_ptr"(%4238) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4240 = "mini.to_fat_ptr"(%4239) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%4237, %4240) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterable">, !mini.fatptr<"IntIterable">) -> ()
    %4241 = "mini.wrap"(%4235) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %4242 = "mini.to_fat_ptr"(%4241) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4243 = "mini.to_fat_ptr"(%4242) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%4237, %4243) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterable">, !mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "ProductIterable_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb492(%4244 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4245 : !llvm.ptr):
    %4246 = "mini.invariant"(%4245) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4247 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb493] : () -> ()
  ^bb494:
    %4248 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%4248, %4247) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb495] : () -> ()
  ^bb496:
    %4249 = "llvm.getelementptr"(%4245) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4250 = "llvm.load"(%4249) : (!llvm.ptr) -> !llvm.ptr
    %4251 = "llvm.getelementptr"(%4250) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4252 = "llvm.getelementptr"(%4250) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4253 = "llvm.getelementptr"(%4250) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4254 = "llvm.getelementptr"(%4250) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4255 = "llvm.load"(%4251) : (!llvm.ptr) -> i64
    %4256 = "llvm.load"(%4252) : (!llvm.ptr) -> i64
    %4257 = "llvm.load"(%4253) : (!llvm.ptr) -> !llvm.ptr
    %4258 = "llvm.load"(%4254) : (!llvm.ptr) -> !llvm.ptr
    %4259 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4260 = "llvm.ptrtoint"(%4259) : (!llvm.ptr) -> i64
    %4261 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4262 = "mini.subtype"(%4257, %4256, %4255, %4261, %4260, %4258) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4262) [^bb494, ^bb494] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb493:
    %4263 = "llvm.getelementptr"(%4245) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4264 = "llvm.load"(%4263) : (!llvm.ptr) -> !llvm.ptr
    %4265 = "llvm.getelementptr"(%4264) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4266 = "llvm.getelementptr"(%4264) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4267 = "llvm.getelementptr"(%4264) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4268 = "llvm.getelementptr"(%4264) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4269 = "llvm.load"(%4265) : (!llvm.ptr) -> i64
    %4270 = "llvm.load"(%4266) : (!llvm.ptr) -> i64
    %4271 = "llvm.load"(%4267) : (!llvm.ptr) -> !llvm.ptr
    %4272 = "llvm.load"(%4268) : (!llvm.ptr) -> !llvm.ptr
    %4273 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4274 = "llvm.ptrtoint"(%4273) : (!llvm.ptr) -> i64
    %4275 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4276 = "mini.subtype"(%4271, %4270, %4269, %4275, %4274, %4272) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4276) [^bb496, ^bb496] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb495:
    %4277 = "llvm.extractvalue"(%4244) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4278 = "llvm.load"(%4247) : (!llvm.ptr) -> i32
    %4279 = "llvm.getelementptr"(%4277, %4278) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4280 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4281 = "llvm.getelementptr"(%4279, %4280) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4281) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb497(%4282 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4283 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4284 : !llvm.ptr):
    %4285 = "mini.wrap"(%4282) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterable">
    %4286 = "mini.to_fat_ptr"(%4285) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable", "invariant"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"ProductIterable">
    %4287 = "mini.get_field"(%4286) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"IntIterable">
    %4288 = "mini.get_field"(%4286) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"IntIterable">
    %4289 = "mini.unwrap"(%4287) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4290 = "mini.unwrap"(%4288) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4291 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>)>, "class_name" = "ProductIterator", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ProductIterator">
    %4292 = "mini.get_field"(%4286) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"IntIterable">
    %4293 = "mini.get_field"(%4286) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"IntIterable">
    %4294 = "mini.to_fat_ptr"(%4292) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4295 = "mini.unwrap"(%4294) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4296 = "mini.to_fat_ptr"(%4293) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4297 = "mini.unwrap"(%4296) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4298 = "mini.unwrap"(%4291) : (!mini.fatptr<"ProductIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4299 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %4300 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %4301 = "mini.parameterizations_array"(%4299, %4300) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%4301, %4298, %4295, %4297) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %4302 = "mini.to_fat_ptr"(%4291) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%4302) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "ProductIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb498(%4303 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4304 : !llvm.ptr):
    %4305 = "mini.invariant"(%4304) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4306 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb499] : () -> ()
  ^bb499:
    %4307 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%4307, %4306) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb500] : () -> ()
  ^bb500:
    %4308 = "llvm.extractvalue"(%4303) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4309 = "llvm.load"(%4306) : (!llvm.ptr) -> i32
    %4310 = "llvm.getelementptr"(%4308, %4309) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4311 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4312 = "llvm.getelementptr"(%4310, %4311) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4312) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ProductIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator_getter_first_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator_setter_first_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator_field_first_iterator", "getter_name" = "ProductIterator_getter_first_iterator", "setter_name" = "ProductIterator_setter_first_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator_getter_second_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator_setter_second_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterator", "parameterization" = "_parameterization_IntIterator"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator_field_second_iterator", "getter_name" = "ProductIterator_getter_second_iterator", "setter_name" = "ProductIterator_setter_second_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator_getter_second_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator_setter_second_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntIterable", "parameterization" = "_parameterization_IntIterable"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator_field_second_iterable", "getter_name" = "ProductIterator_getter_second_iterable", "setter_name" = "ProductIterator_setter_second_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator_getter_current_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i32)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Ptri32_or_Nil"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator_setter_current_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i32)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Ptri32_or_Nil"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator_field_current_first", "getter_name" = "ProductIterator_getter_current_first", "setter_name" = "ProductIterator_setter_current_first"} : () -> ()
  "mini.func"() ({
  ^bb501(%4313 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4314 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4315 : !llvm.ptr, %4316 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4317 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4318 = "mini.wrap"(%4313) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterator">
    %4319 = "mini.to_fat_ptr"(%4318) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator", "to_typ_name" = "ProductIterator", "invariant"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"ProductIterator">
    %4320 = "mini.wrap"(%4316) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %4321 = "mini.to_fat_ptr"(%4320) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4322 = "mini.wrap"(%4317) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %4323 = "mini.to_fat_ptr"(%4322) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4324 = "mini.to_fat_ptr"(%4323) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    "mini.set_field"(%4319, %4324) {"offset" = 2 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">, !mini.fatptr<"IntIterable">) -> ()
    %4325 = "mini.unwrap"(%4321) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4326 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4327 = "mini.method_call"(%4326, %4325) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4328 = "mini.to_fat_ptr"(%4327) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4329 = "mini.to_fat_ptr"(%4328) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%4319, %4329) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">, !mini.fatptr<"IntIterator">) -> ()
    %4330 = "mini.get_field"(%4319) {"offset" = 2 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterable">
    %4331 = "mini.unwrap"(%4330) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4332 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4333 = "mini.method_call"(%4332, %4331) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4334 = "mini.to_fat_ptr"(%4333) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4335 = "mini.to_fat_ptr"(%4334) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.set_field"(%4319, %4335) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">, !mini.fatptr<"IntIterator">) -> ()
    %4336 = "mini.get_field"(%4319) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterator">
    %4337 = "mini.unwrap"(%4336) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4338 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4339 = "mini.method_call"(%4338, %4337) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4340 = builtin.unrealized_conversion_cast %4339 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4341 = builtin.unrealized_conversion_cast %4340 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.set_field"(%4319, %4341) {"offset" = 3 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb502(%4342 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4343 : !llvm.ptr):
    %4344 = "mini.invariant"(%4343) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4345 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb503] : () -> ()
  ^bb504:
    %4346 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%4346, %4345) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb505] : () -> ()
  ^bb506:
    %4347 = "llvm.getelementptr"(%4343) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4348 = "llvm.load"(%4347) : (!llvm.ptr) -> !llvm.ptr
    %4349 = "llvm.getelementptr"(%4348) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4350 = "llvm.getelementptr"(%4348) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4351 = "llvm.getelementptr"(%4348) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4352 = "llvm.getelementptr"(%4348) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4353 = "llvm.load"(%4349) : (!llvm.ptr) -> i64
    %4354 = "llvm.load"(%4350) : (!llvm.ptr) -> i64
    %4355 = "llvm.load"(%4351) : (!llvm.ptr) -> !llvm.ptr
    %4356 = "llvm.load"(%4352) : (!llvm.ptr) -> !llvm.ptr
    %4357 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4358 = "llvm.ptrtoint"(%4357) : (!llvm.ptr) -> i64
    %4359 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4360 = "mini.subtype"(%4355, %4354, %4353, %4359, %4358, %4356) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4360) [^bb504, ^bb504] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb503:
    %4361 = "llvm.getelementptr"(%4343) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4362 = "llvm.load"(%4361) : (!llvm.ptr) -> !llvm.ptr
    %4363 = "llvm.getelementptr"(%4362) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4364 = "llvm.getelementptr"(%4362) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4365 = "llvm.getelementptr"(%4362) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4366 = "llvm.getelementptr"(%4362) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4367 = "llvm.load"(%4363) : (!llvm.ptr) -> i64
    %4368 = "llvm.load"(%4364) : (!llvm.ptr) -> i64
    %4369 = "llvm.load"(%4365) : (!llvm.ptr) -> !llvm.ptr
    %4370 = "llvm.load"(%4366) : (!llvm.ptr) -> !llvm.ptr
    %4371 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4372 = "llvm.ptrtoint"(%4371) : (!llvm.ptr) -> i64
    %4373 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4374 = "mini.subtype"(%4369, %4368, %4367, %4373, %4372, %4370) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4374) [^bb506, ^bb506] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb505:
    %4375 = "llvm.extractvalue"(%4342) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4376 = "llvm.load"(%4345) : (!llvm.ptr) -> i32
    %4377 = "llvm.getelementptr"(%4375, %4376) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4378 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4379 = "llvm.getelementptr"(%4377, %4378) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4379) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb507(%4380 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4381 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4382 : !llvm.ptr):
    %4383 = "mini.wrap"(%4380) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterator">
    %4384 = "mini.to_fat_ptr"(%4383) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator", "to_typ_name" = "ProductIterator", "invariant"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"ProductIterator">
    %4385 = "mini.get_field"(%4384) {"offset" = 3 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4386 = builtin.unrealized_conversion_cast %4385 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.while"() ({
      %4387 = "mini.checkflag"(%4386) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %4388 = "mini.unwrap"(%4387) : (i1) -> i1
    }, {
      %4389 = "mini.narrow"(%4386) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %4390 = "mini.get_field"(%4384) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterator">
      %4391 = "mini.unwrap"(%4390) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4392 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %4393 = "mini.method_call"(%4392, %4391) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %4394 = builtin.unrealized_conversion_cast %4393 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %4395 = "mini.checkflag"(%4394) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %4396 = "mini.unwrap"(%4395) : (i1) -> i1
      %4397 = builtin.unrealized_conversion_cast %4394 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%4396) ({
        %4398 = "mini.narrow"(%4397) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %4399 = "mini.unwrap"(%4389) : (!mini.ptr<i32>) -> i32
        %4400 = "mini.unwrap"(%4398) : (!mini.ptr<i32>) -> i32
        %4401 = "mini.create_tuple"(%4399, %4400) {"typ" = !llvm.struct<(i32, i32)>} : (i32, i32) -> !mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>
        %4402 = "mini.unionize"(%4401) {"from_typ" = !llvm.struct<(i32, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "tuple_typ", "to_typ_name" = "union_typ"} : (!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>) -> !mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>
        "mini.return"(%4402) : (!mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>) -> ()
        "mini.castassign"(%4397, %4398) ({
          %4403 = "mini.unionize"(%4398) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
      %4404 = "mini.get_field"(%4384) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterator"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterator">
      %4405 = "mini.unwrap"(%4404) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4406 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %4407 = "mini.method_call"(%4406, %4405) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %4408 = builtin.unrealized_conversion_cast %4407 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %4409 = builtin.unrealized_conversion_cast %4408 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.set_field"(%4384, %4409) {"offset" = 3 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
      %4410 = "mini.get_field"(%4384) {"offset" = 2 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntIterable"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterable">
      %4411 = "mini.unwrap"(%4410) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4412 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %4413 = "mini.method_call"(%4412, %4411) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
      %4414 = "mini.to_fat_ptr"(%4413) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
      %4415 = "mini.to_fat_ptr"(%4414) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
      "mini.set_field"(%4384, %4415) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">, !mini.fatptr<"IntIterator">) -> ()
      %4416 = "mini.get_field"(%4384) {"offset" = 3 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.castassign"(%4386, %4416) ({
        %4417 = builtin.unrealized_conversion_cast %4416 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : () -> ()
    %4418 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %4419 = "mini.unionize"(%4418) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>
    "mini.return"(%4419) : (!mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>) -> ()
  }) {"func_name" = "ProductIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb508(%4420 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4421 : !llvm.ptr):
    %4422 = "mini.invariant"(%4421) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4423 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb509] : () -> ()
  ^bb509:
    %4424 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%4424, %4423) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb510] : () -> ()
  ^bb510:
    %4425 = "llvm.extractvalue"(%4420) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4426 = "llvm.load"(%4423) : (!llvm.ptr) -> i32
    %4427 = "llvm.getelementptr"(%4425, %4426) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4428 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4429 = "llvm.getelementptr"(%4427, %4428) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4429) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Range", "types" = [i32, i32, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Range_getter_start", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Range_setter_start", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Range_field_start", "getter_name" = "Range_getter_start", "setter_name" = "Range_setter_start"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Range_getter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Range_setter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Range_field_end", "getter_name" = "Range_getter_end", "setter_name" = "Range_setter_end"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Range_getter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Range_setter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Range_field_step", "getter_name" = "Range_getter_step", "setter_name" = "Range_setter_step"} : () -> ()
  "mini.func"() ({
  ^bb511(%4430 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4431 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4432 : !llvm.ptr, %4433 : i32):
    %4434 = "mini.wrap"(%4430) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %4435 = "mini.to_fat_ptr"(%4434) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range", "invariant"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %4436 = "mini.wrap"(%4433) : (i32) -> !mini.ptr<i32>
    %4437 = builtin.unrealized_conversion_cast %4436 : !mini.ptr<i32> to !mini.ptr<i32>
    %4438 = builtin.unrealized_conversion_cast %4437 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4435, %4438) {"offset" = 1 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %4439 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4440 = builtin.unrealized_conversion_cast %4439 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4435, %4440) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %4441 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4442 = builtin.unrealized_conversion_cast %4441 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4435, %4442) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Range_init_endPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb512(%4443 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4444 : !llvm.ptr):
    %4445 = "mini.invariant"(%4444) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4446 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb513] : () -> ()
  ^bb514:
    %4447 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%4447, %4446) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb515] : () -> ()
  ^bb513:
    %4448 = "llvm.getelementptr"(%4444) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4449 = "llvm.load"(%4448) : (!llvm.ptr) -> !llvm.ptr
    %4450 = "llvm.getelementptr"(%4449) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4451 = "llvm.getelementptr"(%4449) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4452 = "llvm.getelementptr"(%4449) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4453 = "llvm.getelementptr"(%4449) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4454 = "llvm.load"(%4450) : (!llvm.ptr) -> i64
    %4455 = "llvm.load"(%4451) : (!llvm.ptr) -> i64
    %4456 = "llvm.load"(%4452) : (!llvm.ptr) -> !llvm.ptr
    %4457 = "llvm.load"(%4453) : (!llvm.ptr) -> !llvm.ptr
    %4458 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4459 = "llvm.ptrtoint"(%4458) : (!llvm.ptr) -> i64
    %4460 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4461 = "mini.subtype"(%4456, %4455, %4454, %4460, %4459, %4457) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4461) [^bb514, ^bb514] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb515:
    %4462 = "llvm.extractvalue"(%4443) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4463 = "llvm.load"(%4446) : (!llvm.ptr) -> i32
    %4464 = "llvm.getelementptr"(%4462, %4463) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4465 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4466 = "llvm.getelementptr"(%4464, %4465) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4466) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_init_endPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb516(%4467 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4468 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4469 : !llvm.ptr, %4470 : i32, %4471 : i32):
    %4472 = "mini.wrap"(%4467) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %4473 = "mini.to_fat_ptr"(%4472) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range", "invariant"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %4474 = "mini.wrap"(%4470) : (i32) -> !mini.ptr<i32>
    %4475 = builtin.unrealized_conversion_cast %4474 : !mini.ptr<i32> to !mini.ptr<i32>
    %4476 = builtin.unrealized_conversion_cast %4475 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4473, %4476) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %4477 = "mini.wrap"(%4471) : (i32) -> !mini.ptr<i32>
    %4478 = builtin.unrealized_conversion_cast %4477 : !mini.ptr<i32> to !mini.ptr<i32>
    %4479 = builtin.unrealized_conversion_cast %4478 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4473, %4479) {"offset" = 1 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %4480 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4481 = builtin.unrealized_conversion_cast %4480 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4473, %4481) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Range_init_startPtri32_endPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb517(%4482 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4483 : !llvm.ptr):
    %4484 = "mini.invariant"(%4483) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4485 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb518] : () -> ()
  ^bb519:
    %4486 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%4486, %4485) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb520] : () -> ()
  ^bb521:
    %4487 = "llvm.getelementptr"(%4483) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4488 = "llvm.load"(%4487) : (!llvm.ptr) -> !llvm.ptr
    %4489 = "llvm.getelementptr"(%4488) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4490 = "llvm.getelementptr"(%4488) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4491 = "llvm.getelementptr"(%4488) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4492 = "llvm.getelementptr"(%4488) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4493 = "llvm.load"(%4489) : (!llvm.ptr) -> i64
    %4494 = "llvm.load"(%4490) : (!llvm.ptr) -> i64
    %4495 = "llvm.load"(%4491) : (!llvm.ptr) -> !llvm.ptr
    %4496 = "llvm.load"(%4492) : (!llvm.ptr) -> !llvm.ptr
    %4497 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4498 = "llvm.ptrtoint"(%4497) : (!llvm.ptr) -> i64
    %4499 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4500 = "mini.subtype"(%4495, %4494, %4493, %4499, %4498, %4496) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4500) [^bb519, ^bb519] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb518:
    %4501 = "llvm.getelementptr"(%4483) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4502 = "llvm.load"(%4501) : (!llvm.ptr) -> !llvm.ptr
    %4503 = "llvm.getelementptr"(%4502) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4504 = "llvm.getelementptr"(%4502) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4505 = "llvm.getelementptr"(%4502) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4506 = "llvm.getelementptr"(%4502) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4507 = "llvm.load"(%4503) : (!llvm.ptr) -> i64
    %4508 = "llvm.load"(%4504) : (!llvm.ptr) -> i64
    %4509 = "llvm.load"(%4505) : (!llvm.ptr) -> !llvm.ptr
    %4510 = "llvm.load"(%4506) : (!llvm.ptr) -> !llvm.ptr
    %4511 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4512 = "llvm.ptrtoint"(%4511) : (!llvm.ptr) -> i64
    %4513 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4514 = "mini.subtype"(%4509, %4508, %4507, %4513, %4512, %4510) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4514) [^bb521, ^bb521] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb520:
    %4515 = "llvm.extractvalue"(%4482) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4516 = "llvm.load"(%4485) : (!llvm.ptr) -> i32
    %4517 = "llvm.getelementptr"(%4515, %4516) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4518 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4519 = "llvm.getelementptr"(%4517, %4518) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4519) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_init_startPtri32_endPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb522(%4520 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4521 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4522 : !llvm.ptr, %4523 : i32):
    %4524 = "mini.wrap"(%4520) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %4525 = "mini.to_fat_ptr"(%4524) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range", "invariant"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %4526 = "mini.wrap"(%4523) : (i32) -> !mini.ptr<i32>
    %4527 = builtin.unrealized_conversion_cast %4526 : !mini.ptr<i32> to !mini.ptr<i32>
    %4528 = builtin.unrealized_conversion_cast %4527 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4525, %4528) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %4529 = "mini.to_fat_ptr"(%4525) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range", "invariant"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    "mini.return"(%4529) : (!mini.fatptr<"Range">) -> ()
  }) {"func_name" = "Range_step_stepPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb523(%4530 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4531 : !llvm.ptr):
    %4532 = "mini.invariant"(%4531) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4533 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb524] : () -> ()
  ^bb525:
    %4534 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%4534, %4533) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb526] : () -> ()
  ^bb524:
    %4535 = "llvm.getelementptr"(%4531) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4536 = "llvm.load"(%4535) : (!llvm.ptr) -> !llvm.ptr
    %4537 = "llvm.getelementptr"(%4536) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4538 = "llvm.getelementptr"(%4536) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4539 = "llvm.getelementptr"(%4536) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4540 = "llvm.getelementptr"(%4536) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4541 = "llvm.load"(%4537) : (!llvm.ptr) -> i64
    %4542 = "llvm.load"(%4538) : (!llvm.ptr) -> i64
    %4543 = "llvm.load"(%4539) : (!llvm.ptr) -> !llvm.ptr
    %4544 = "llvm.load"(%4540) : (!llvm.ptr) -> !llvm.ptr
    %4545 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4546 = "llvm.ptrtoint"(%4545) : (!llvm.ptr) -> i64
    %4547 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4548 = "mini.subtype"(%4543, %4542, %4541, %4547, %4546, %4544) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4548) [^bb525, ^bb525] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb526:
    %4549 = "llvm.extractvalue"(%4530) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4550 = "llvm.load"(%4533) : (!llvm.ptr) -> i32
    %4551 = "llvm.getelementptr"(%4549, %4550) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4552 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4553 = "llvm.getelementptr"(%4551, %4552) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4553) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_step_stepPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb527(%4554 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4555 : !llvm.ptr):
    %4556 = "mini.invariant"(%4555) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4557 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb528] : () -> ()
  ^bb529:
    %4558 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%4558, %4557) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb530] : () -> ()
  ^bb528:
    %4559 = "llvm.getelementptr"(%4555) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4560 = "llvm.load"(%4559) : (!llvm.ptr) -> !llvm.ptr
    %4561 = "llvm.getelementptr"(%4560) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4562 = "llvm.getelementptr"(%4560) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4563 = "llvm.getelementptr"(%4560) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4564 = "llvm.getelementptr"(%4560) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4565 = "llvm.load"(%4561) : (!llvm.ptr) -> i64
    %4566 = "llvm.load"(%4562) : (!llvm.ptr) -> i64
    %4567 = "llvm.load"(%4563) : (!llvm.ptr) -> !llvm.ptr
    %4568 = "llvm.load"(%4564) : (!llvm.ptr) -> !llvm.ptr
    %4569 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %4570 = "llvm.ptrtoint"(%4569) : (!llvm.ptr) -> i64
    %4571 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %4572 = "mini.subtype"(%4567, %4566, %4565, %4571, %4570, %4568) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4572) [^bb529, ^bb529] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb530:
    %4573 = "llvm.extractvalue"(%4554) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4574 = "llvm.load"(%4557) : (!llvm.ptr) -> i32
    %4575 = "llvm.getelementptr"(%4573, %4574) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4576 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4577 = "llvm.getelementptr"(%4575, %4576) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4577) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb531(%4578 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4579 : !llvm.ptr):
    %4580 = "mini.invariant"(%4579) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4581 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb532] : () -> ()
  ^bb533:
    %4582 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%4582, %4581) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb534] : () -> ()
  ^bb535:
    %4583 = "llvm.getelementptr"(%4579) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4584 = "llvm.load"(%4583) : (!llvm.ptr) -> !llvm.ptr
    %4585 = "llvm.getelementptr"(%4584) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4586 = "llvm.getelementptr"(%4584) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4587 = "llvm.getelementptr"(%4584) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4588 = "llvm.getelementptr"(%4584) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4589 = "llvm.load"(%4585) : (!llvm.ptr) -> i64
    %4590 = "llvm.load"(%4586) : (!llvm.ptr) -> i64
    %4591 = "llvm.load"(%4587) : (!llvm.ptr) -> !llvm.ptr
    %4592 = "llvm.load"(%4588) : (!llvm.ptr) -> !llvm.ptr
    %4593 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %4594 = "llvm.ptrtoint"(%4593) : (!llvm.ptr) -> i64
    %4595 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %4596 = "mini.subtype"(%4591, %4590, %4589, %4595, %4594, %4592) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4596) [^bb533, ^bb533] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb532:
    %4597 = "llvm.getelementptr"(%4579) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4598 = "llvm.load"(%4597) : (!llvm.ptr) -> !llvm.ptr
    %4599 = "llvm.getelementptr"(%4598) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4600 = "llvm.getelementptr"(%4598) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4601 = "llvm.getelementptr"(%4598) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4602 = "llvm.getelementptr"(%4598) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4603 = "llvm.load"(%4599) : (!llvm.ptr) -> i64
    %4604 = "llvm.load"(%4600) : (!llvm.ptr) -> i64
    %4605 = "llvm.load"(%4601) : (!llvm.ptr) -> !llvm.ptr
    %4606 = "llvm.load"(%4602) : (!llvm.ptr) -> !llvm.ptr
    %4607 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4608 = "llvm.ptrtoint"(%4607) : (!llvm.ptr) -> i64
    %4609 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4610 = "mini.subtype"(%4605, %4604, %4603, %4609, %4608, %4606) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4610) [^bb535, ^bb535] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb534:
    %4611 = "llvm.extractvalue"(%4578) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4612 = "llvm.load"(%4581) : (!llvm.ptr) -> i32
    %4613 = "llvm.getelementptr"(%4611, %4612) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4614 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4615 = "llvm.getelementptr"(%4613, %4614) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4615) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb536(%4616 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4617 : !llvm.ptr):
    %4618 = "mini.invariant"(%4617) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4619 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb537] : () -> ()
  ^bb538:
    %4620 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%4620, %4619) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb539] : () -> ()
  ^bb537:
    %4621 = "llvm.getelementptr"(%4617) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4622 = "llvm.load"(%4621) : (!llvm.ptr) -> !llvm.ptr
    %4623 = "llvm.getelementptr"(%4622) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4624 = "llvm.getelementptr"(%4622) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4625 = "llvm.getelementptr"(%4622) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4626 = "llvm.getelementptr"(%4622) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4627 = "llvm.load"(%4623) : (!llvm.ptr) -> i64
    %4628 = "llvm.load"(%4624) : (!llvm.ptr) -> i64
    %4629 = "llvm.load"(%4625) : (!llvm.ptr) -> !llvm.ptr
    %4630 = "llvm.load"(%4626) : (!llvm.ptr) -> !llvm.ptr
    %4631 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %4632 = "llvm.ptrtoint"(%4631) : (!llvm.ptr) -> i64
    %4633 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %4634 = "mini.subtype"(%4629, %4628, %4627, %4633, %4632, %4630) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4634) [^bb538, ^bb538] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb539:
    %4635 = "llvm.extractvalue"(%4616) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4636 = "llvm.load"(%4619) : (!llvm.ptr) -> i32
    %4637 = "llvm.getelementptr"(%4635, %4636) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4638 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4639 = "llvm.getelementptr"(%4637, %4638) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4639) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb540(%4640 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4641 : !llvm.ptr):
    %4642 = "mini.invariant"(%4641) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4643 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb541] : () -> ()
  ^bb542:
    %4644 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%4644, %4643) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb543] : () -> ()
  ^bb541:
    %4645 = "llvm.getelementptr"(%4641) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4646 = "llvm.load"(%4645) : (!llvm.ptr) -> !llvm.ptr
    %4647 = "llvm.getelementptr"(%4646) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4648 = "llvm.getelementptr"(%4646) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4649 = "llvm.getelementptr"(%4646) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4650 = "llvm.getelementptr"(%4646) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4651 = "llvm.load"(%4647) : (!llvm.ptr) -> i64
    %4652 = "llvm.load"(%4648) : (!llvm.ptr) -> i64
    %4653 = "llvm.load"(%4649) : (!llvm.ptr) -> !llvm.ptr
    %4654 = "llvm.load"(%4650) : (!llvm.ptr) -> !llvm.ptr
    %4655 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %4656 = "llvm.ptrtoint"(%4655) : (!llvm.ptr) -> i64
    %4657 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %4658 = "mini.subtype"(%4653, %4652, %4651, %4657, %4656, %4654) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4658) [^bb542, ^bb542] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb543:
    %4659 = "llvm.extractvalue"(%4640) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4660 = "llvm.load"(%4643) : (!llvm.ptr) -> i32
    %4661 = "llvm.getelementptr"(%4659, %4660) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4662 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4663 = "llvm.getelementptr"(%4661, %4662) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4663) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb544(%4664 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4665 : !llvm.ptr):
    %4666 = "mini.invariant"(%4665) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4667 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb545] : () -> ()
  ^bb546:
    %4668 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%4668, %4667) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb547] : () -> ()
  ^bb545:
    %4669 = "llvm.getelementptr"(%4665) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4670 = "llvm.load"(%4669) : (!llvm.ptr) -> !llvm.ptr
    %4671 = "llvm.getelementptr"(%4670) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4672 = "llvm.getelementptr"(%4670) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4673 = "llvm.getelementptr"(%4670) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4674 = "llvm.getelementptr"(%4670) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4675 = "llvm.load"(%4671) : (!llvm.ptr) -> i64
    %4676 = "llvm.load"(%4672) : (!llvm.ptr) -> i64
    %4677 = "llvm.load"(%4673) : (!llvm.ptr) -> !llvm.ptr
    %4678 = "llvm.load"(%4674) : (!llvm.ptr) -> !llvm.ptr
    %4679 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %4680 = "llvm.ptrtoint"(%4679) : (!llvm.ptr) -> i64
    %4681 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %4682 = "mini.subtype"(%4677, %4676, %4675, %4681, %4680, %4678) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4682) [^bb546, ^bb546] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb547:
    %4683 = "llvm.extractvalue"(%4664) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4684 = "llvm.load"(%4667) : (!llvm.ptr) -> i32
    %4685 = "llvm.getelementptr"(%4683, %4684) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4686 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4687 = "llvm.getelementptr"(%4685, %4686) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4687) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb548(%4688 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4689 : !llvm.ptr):
    %4690 = "mini.invariant"(%4689) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4691 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb549] : () -> ()
  ^bb550:
    %4692 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%4692, %4691) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb551] : () -> ()
  ^bb549:
    %4693 = "llvm.getelementptr"(%4689) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4694 = "llvm.load"(%4693) : (!llvm.ptr) -> !llvm.ptr
    %4695 = "llvm.getelementptr"(%4694) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4696 = "llvm.getelementptr"(%4694) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4697 = "llvm.getelementptr"(%4694) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4698 = "llvm.getelementptr"(%4694) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4699 = "llvm.load"(%4695) : (!llvm.ptr) -> i64
    %4700 = "llvm.load"(%4696) : (!llvm.ptr) -> i64
    %4701 = "llvm.load"(%4697) : (!llvm.ptr) -> !llvm.ptr
    %4702 = "llvm.load"(%4698) : (!llvm.ptr) -> !llvm.ptr
    %4703 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %4704 = "llvm.ptrtoint"(%4703) : (!llvm.ptr) -> i64
    %4705 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %4706 = "mini.subtype"(%4701, %4700, %4699, %4705, %4704, %4702) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4706) [^bb550, ^bb550] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb551:
    %4707 = "llvm.extractvalue"(%4688) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4708 = "llvm.load"(%4691) : (!llvm.ptr) -> i32
    %4709 = "llvm.getelementptr"(%4707, %4708) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4710 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4711 = "llvm.getelementptr"(%4709, %4710) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4711) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb552(%4712 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4713 : !llvm.ptr):
    %4714 = "mini.invariant"(%4713) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4715 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb553] : () -> ()
  ^bb554:
    %4716 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%4716, %4715) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb555] : () -> ()
  ^bb553:
    %4717 = "llvm.getelementptr"(%4713) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4718 = "llvm.load"(%4717) : (!llvm.ptr) -> !llvm.ptr
    %4719 = "llvm.getelementptr"(%4718) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4720 = "llvm.getelementptr"(%4718) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4721 = "llvm.getelementptr"(%4718) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4722 = "llvm.getelementptr"(%4718) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4723 = "llvm.load"(%4719) : (!llvm.ptr) -> i64
    %4724 = "llvm.load"(%4720) : (!llvm.ptr) -> i64
    %4725 = "llvm.load"(%4721) : (!llvm.ptr) -> !llvm.ptr
    %4726 = "llvm.load"(%4722) : (!llvm.ptr) -> !llvm.ptr
    %4727 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4728 = "llvm.ptrtoint"(%4727) : (!llvm.ptr) -> i64
    %4729 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4730 = "mini.subtype"(%4725, %4724, %4723, %4729, %4728, %4726) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4730) [^bb554, ^bb554] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb555:
    %4731 = "llvm.extractvalue"(%4712) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4732 = "llvm.load"(%4715) : (!llvm.ptr) -> i32
    %4733 = "llvm.getelementptr"(%4731, %4732) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4734 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4735 = "llvm.getelementptr"(%4733, %4734) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4735) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb556(%4736 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4737 : !llvm.ptr):
    %4738 = "mini.invariant"(%4737) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4739 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb557] : () -> ()
  ^bb558:
    %4740 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%4740, %4739) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb559] : () -> ()
  ^bb557:
    %4741 = "llvm.getelementptr"(%4737) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4742 = "llvm.load"(%4741) : (!llvm.ptr) -> !llvm.ptr
    %4743 = "llvm.getelementptr"(%4742) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4744 = "llvm.getelementptr"(%4742) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4745 = "llvm.getelementptr"(%4742) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4746 = "llvm.getelementptr"(%4742) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4747 = "llvm.load"(%4743) : (!llvm.ptr) -> i64
    %4748 = "llvm.load"(%4744) : (!llvm.ptr) -> i64
    %4749 = "llvm.load"(%4745) : (!llvm.ptr) -> !llvm.ptr
    %4750 = "llvm.load"(%4746) : (!llvm.ptr) -> !llvm.ptr
    %4751 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4752 = "llvm.ptrtoint"(%4751) : (!llvm.ptr) -> i64
    %4753 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4754 = "mini.subtype"(%4749, %4748, %4747, %4753, %4752, %4750) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4754) [^bb558, ^bb558] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb559:
    %4755 = "llvm.extractvalue"(%4736) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4756 = "llvm.load"(%4739) : (!llvm.ptr) -> i32
    %4757 = "llvm.getelementptr"(%4755, %4756) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4758 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4759 = "llvm.getelementptr"(%4757, %4758) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4759) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb560(%4760 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4761 : !llvm.ptr):
    %4762 = "mini.invariant"(%4761) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4763 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb561] : () -> ()
  ^bb562:
    %4764 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%4764, %4763) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb563] : () -> ()
  ^bb561:
    %4765 = "llvm.getelementptr"(%4761) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4766 = "llvm.load"(%4765) : (!llvm.ptr) -> !llvm.ptr
    %4767 = "llvm.getelementptr"(%4766) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4768 = "llvm.getelementptr"(%4766) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4769 = "llvm.getelementptr"(%4766) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4770 = "llvm.getelementptr"(%4766) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4771 = "llvm.load"(%4767) : (!llvm.ptr) -> i64
    %4772 = "llvm.load"(%4768) : (!llvm.ptr) -> i64
    %4773 = "llvm.load"(%4769) : (!llvm.ptr) -> !llvm.ptr
    %4774 = "llvm.load"(%4770) : (!llvm.ptr) -> !llvm.ptr
    %4775 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4776 = "llvm.ptrtoint"(%4775) : (!llvm.ptr) -> i64
    %4777 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4778 = "mini.subtype"(%4773, %4772, %4771, %4777, %4776, %4774) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4778) [^bb562, ^bb562] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb563:
    %4779 = "llvm.extractvalue"(%4760) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4780 = "llvm.load"(%4763) : (!llvm.ptr) -> i32
    %4781 = "llvm.getelementptr"(%4779, %4780) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4782 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4783 = "llvm.getelementptr"(%4781, %4782) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4783) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb564(%4784 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4785 : !llvm.ptr):
    %4786 = "mini.invariant"(%4785) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4787 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb565] : () -> ()
  ^bb566:
    %4788 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
    "llvm.store"(%4788, %4787) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb567] : () -> ()
  ^bb565:
    %4789 = "llvm.getelementptr"(%4785) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4790 = "llvm.load"(%4789) : (!llvm.ptr) -> !llvm.ptr
    %4791 = "llvm.getelementptr"(%4790) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4792 = "llvm.getelementptr"(%4790) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4793 = "llvm.getelementptr"(%4790) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4794 = "llvm.getelementptr"(%4790) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4795 = "llvm.load"(%4791) : (!llvm.ptr) -> i64
    %4796 = "llvm.load"(%4792) : (!llvm.ptr) -> i64
    %4797 = "llvm.load"(%4793) : (!llvm.ptr) -> !llvm.ptr
    %4798 = "llvm.load"(%4794) : (!llvm.ptr) -> !llvm.ptr
    %4799 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4800 = "llvm.ptrtoint"(%4799) : (!llvm.ptr) -> i64
    %4801 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4802 = "mini.subtype"(%4797, %4796, %4795, %4801, %4800, %4798) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4802) [^bb566, ^bb566] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb567:
    %4803 = "llvm.extractvalue"(%4784) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4804 = "llvm.load"(%4787) : (!llvm.ptr) -> i32
    %4805 = "llvm.getelementptr"(%4803, %4804) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4806 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4807 = "llvm.getelementptr"(%4805, %4806) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4807) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb568(%4808 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4809 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4810 : !llvm.ptr):
    %4811 = "mini.wrap"(%4808) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %4812 = "mini.to_fat_ptr"(%4811) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range", "invariant"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %4813 = "mini.get_field"(%4812) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %4814 = "mini.get_field"(%4812) {"offset" = 1 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %4815 = "mini.get_field"(%4812) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %4816 = "mini.unwrap"(%4813) : (!mini.ptr<i32>) -> i32
    %4817 = "mini.unwrap"(%4814) : (!mini.ptr<i32>) -> i32
    %4818 = "mini.unwrap"(%4815) : (!mini.ptr<i32>) -> i32
    %4819 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "RangeIterator", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"RangeIterator">
    %4820 = "mini.get_field"(%4812) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %4821 = "mini.get_field"(%4812) {"offset" = 1 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %4822 = "mini.get_field"(%4812) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %4823 = builtin.unrealized_conversion_cast %4820 : !mini.ptr<i32> to !mini.ptr<i32>
    %4824 = "mini.unwrap"(%4823) : (!mini.ptr<i32>) -> i32
    %4825 = builtin.unrealized_conversion_cast %4821 : !mini.ptr<i32> to !mini.ptr<i32>
    %4826 = "mini.unwrap"(%4825) : (!mini.ptr<i32>) -> i32
    %4827 = builtin.unrealized_conversion_cast %4822 : !mini.ptr<i32> to !mini.ptr<i32>
    %4828 = "mini.unwrap"(%4827) : (!mini.ptr<i32>) -> i32
    %4829 = "mini.unwrap"(%4819) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4830 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %4831 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %4832 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %4833 = "mini.parameterizations_array"(%4830, %4831, %4832) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%4833, %4829, %4824, %4826, %4828) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 9 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32, i32) -> ()
    %4834 = "mini.to_fat_ptr"(%4819) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%4834) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "Range_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb569(%4835 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4836 : !llvm.ptr):
    %4837 = "mini.invariant"(%4836) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4838 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb570] : () -> ()
  ^bb570:
    %4839 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
    "llvm.store"(%4839, %4838) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb571] : () -> ()
  ^bb571:
    %4840 = "llvm.extractvalue"(%4835) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4841 = "llvm.load"(%4838) : (!llvm.ptr) -> i32
    %4842 = "llvm.getelementptr"(%4840, %4841) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4843 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4844 = "llvm.getelementptr"(%4842, %4843) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4844) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_RangeIterator", "types" = [i32, i32, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "RangeIterator_getter_counter", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "RangeIterator_setter_counter", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "RangeIterator_field_counter", "getter_name" = "RangeIterator_getter_counter", "setter_name" = "RangeIterator_setter_counter"} : () -> ()
  "mini.getter_def"() {"meth_name" = "RangeIterator_getter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "RangeIterator_setter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "RangeIterator_field_end", "getter_name" = "RangeIterator_getter_end", "setter_name" = "RangeIterator_setter_end"} : () -> ()
  "mini.getter_def"() {"meth_name" = "RangeIterator_getter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "RangeIterator_setter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "RangeIterator_field_step", "getter_name" = "RangeIterator_getter_step", "setter_name" = "RangeIterator_setter_step"} : () -> ()
  "mini.func"() ({
  ^bb572(%4845 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4846 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4847 : !llvm.ptr, %4848 : i32, %4849 : i32, %4850 : i32):
    %4851 = "mini.wrap"(%4845) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"RangeIterator">
    %4852 = "mini.to_fat_ptr"(%4851) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %4853 = "mini.wrap"(%4848) : (i32) -> !mini.ptr<i32>
    %4854 = builtin.unrealized_conversion_cast %4853 : !mini.ptr<i32> to !mini.ptr<i32>
    %4855 = builtin.unrealized_conversion_cast %4854 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4852, %4855) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">, !mini.ptr<i32>) -> ()
    %4856 = "mini.wrap"(%4849) : (i32) -> !mini.ptr<i32>
    %4857 = builtin.unrealized_conversion_cast %4856 : !mini.ptr<i32> to !mini.ptr<i32>
    %4858 = builtin.unrealized_conversion_cast %4857 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4852, %4858) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">, !mini.ptr<i32>) -> ()
    %4859 = "mini.wrap"(%4850) : (i32) -> !mini.ptr<i32>
    %4860 = builtin.unrealized_conversion_cast %4859 : !mini.ptr<i32> to !mini.ptr<i32>
    %4861 = builtin.unrealized_conversion_cast %4860 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4852, %4861) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "RangeIterator_init_counterPtri32_endPtri32_stepPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb573(%4862 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4863 : !llvm.ptr):
    %4864 = "mini.invariant"(%4863) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4865 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb574] : () -> ()
  ^bb575:
    %4866 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%4866, %4865) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb576] : () -> ()
  ^bb577:
    %4867 = "llvm.getelementptr"(%4863) <{"rawConstantIndices" = array<i32: 0, 2>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4868 = "llvm.load"(%4867) : (!llvm.ptr) -> !llvm.ptr
    %4869 = "llvm.getelementptr"(%4868) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4870 = "llvm.getelementptr"(%4868) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4871 = "llvm.getelementptr"(%4868) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4872 = "llvm.getelementptr"(%4868) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4873 = "llvm.load"(%4869) : (!llvm.ptr) -> i64
    %4874 = "llvm.load"(%4870) : (!llvm.ptr) -> i64
    %4875 = "llvm.load"(%4871) : (!llvm.ptr) -> !llvm.ptr
    %4876 = "llvm.load"(%4872) : (!llvm.ptr) -> !llvm.ptr
    %4877 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4878 = "llvm.ptrtoint"(%4877) : (!llvm.ptr) -> i64
    %4879 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4880 = "mini.subtype"(%4875, %4874, %4873, %4879, %4878, %4876) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4880) [^bb575, ^bb575] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb578:
    %4881 = "llvm.getelementptr"(%4863) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4882 = "llvm.load"(%4881) : (!llvm.ptr) -> !llvm.ptr
    %4883 = "llvm.getelementptr"(%4882) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4884 = "llvm.getelementptr"(%4882) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4885 = "llvm.getelementptr"(%4882) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4886 = "llvm.getelementptr"(%4882) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4887 = "llvm.load"(%4883) : (!llvm.ptr) -> i64
    %4888 = "llvm.load"(%4884) : (!llvm.ptr) -> i64
    %4889 = "llvm.load"(%4885) : (!llvm.ptr) -> !llvm.ptr
    %4890 = "llvm.load"(%4886) : (!llvm.ptr) -> !llvm.ptr
    %4891 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4892 = "llvm.ptrtoint"(%4891) : (!llvm.ptr) -> i64
    %4893 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4894 = "mini.subtype"(%4889, %4888, %4887, %4893, %4892, %4890) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4894) [^bb577, ^bb577] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb574:
    %4895 = "llvm.getelementptr"(%4863) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4896 = "llvm.load"(%4895) : (!llvm.ptr) -> !llvm.ptr
    %4897 = "llvm.getelementptr"(%4896) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4898 = "llvm.getelementptr"(%4896) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4899 = "llvm.getelementptr"(%4896) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4900 = "llvm.getelementptr"(%4896) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4901 = "llvm.load"(%4897) : (!llvm.ptr) -> i64
    %4902 = "llvm.load"(%4898) : (!llvm.ptr) -> i64
    %4903 = "llvm.load"(%4899) : (!llvm.ptr) -> !llvm.ptr
    %4904 = "llvm.load"(%4900) : (!llvm.ptr) -> !llvm.ptr
    %4905 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4906 = "llvm.ptrtoint"(%4905) : (!llvm.ptr) -> i64
    %4907 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4908 = "mini.subtype"(%4903, %4902, %4901, %4907, %4906, %4904) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4908) [^bb578, ^bb578] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb576:
    %4909 = "llvm.extractvalue"(%4862) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4910 = "llvm.load"(%4865) : (!llvm.ptr) -> i32
    %4911 = "llvm.getelementptr"(%4909, %4910) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4912 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4913 = "llvm.getelementptr"(%4911, %4912) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4913) : (!llvm.ptr) -> ()
  }) {"func_name" = "RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb579(%4914 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4915 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4916 : !llvm.ptr):
    %4917 = "mini.wrap"(%4914) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"RangeIterator">
    %4918 = "mini.to_fat_ptr"(%4917) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %4919 = "mini.get_field"(%4918) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %4920 = "mini.get_field"(%4918) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %4921 = "mini.unwrap"(%4919) : (!mini.ptr<i32>) -> i32
    %4922 = "mini.unwrap"(%4920) : (!mini.ptr<i32>) -> i32
    %4923 = "mini.comparison"(%4921, %4922) {"op" = "GT"} : (i32, i32) -> i1
    %4924 = "mini.wrap"(%4923) : (i1) -> !mini.ptr<i32>
    %4925 = "mini.unwrap"(%4924) : (!mini.ptr<i32>) -> i1
    "mini.if"(%4925) ({
      %4926 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %4927 = "mini.unionize"(%4926) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%4927) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %4928 = "mini.get_field"(%4918) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %4929 = "mini.get_field"(%4918) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %4930 = "mini.unwrap"(%4928) : (!mini.ptr<i32>) -> i32
    %4931 = "mini.unwrap"(%4929) : (!mini.ptr<i32>) -> i32
    %4932 = "mini.arithmetic"(%4930, %4931) {"op" = "ADD"} : (i32, i32) -> i32
    %4933 = "mini.wrap"(%4932) : (i32) -> !mini.ptr<i32>
    %4934 = builtin.unrealized_conversion_cast %4933 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4918, %4934) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">, !mini.ptr<i32>) -> ()
    %4935 = "mini.get_field"(%4918) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %4936 = "mini.get_field"(%4918) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %4937 = "mini.unwrap"(%4935) : (!mini.ptr<i32>) -> i32
    %4938 = "mini.unwrap"(%4936) : (!mini.ptr<i32>) -> i32
    %4939 = "mini.arithmetic"(%4937, %4938) {"op" = "SUB"} : (i32, i32) -> i32
    %4940 = "mini.wrap"(%4939) : (i32) -> !mini.ptr<i32>
    %4941 = "mini.unionize"(%4940) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%4941) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "RangeIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb580(%4942 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4943 : !llvm.ptr):
    %4944 = "mini.invariant"(%4943) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4945 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb581] : () -> ()
  ^bb581:
    %4946 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%4946, %4945) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb582] : () -> ()
  ^bb582:
    %4947 = "llvm.extractvalue"(%4942) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4948 = "llvm.load"(%4945) : (!llvm.ptr) -> i32
    %4949 = "llvm.getelementptr"(%4947, %4948) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4950 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %4951 = "llvm.getelementptr"(%4949, %4950) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4951) : (!llvm.ptr) -> ()
  }) {"func_name" = "RangeIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_OutOfBoundsDetails", "types" = [i32, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "OutOfBoundsDetails_getter_bounds", "types" = [i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "OutOfBoundsDetails_setter_bounds", "types" = [i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "OutOfBoundsDetails_field_bounds", "getter_name" = "OutOfBoundsDetails_getter_bounds", "setter_name" = "OutOfBoundsDetails_setter_bounds"} : () -> ()
  "mini.getter_def"() {"meth_name" = "OutOfBoundsDetails_getter_index", "types" = [i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "OutOfBoundsDetails_setter_index", "types" = [i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "OutOfBoundsDetails_field_index", "getter_name" = "OutOfBoundsDetails_getter_index", "setter_name" = "OutOfBoundsDetails_setter_index"} : () -> ()
  "mini.func"() ({
  ^bb583(%4952 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4953 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4954 : !llvm.ptr, %4955 : i32, %4956 : i32):
    %4957 = "mini.wrap"(%4952) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"OutOfBoundsDetails">
    %4958 = "mini.to_fat_ptr"(%4957) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "OutOfBoundsDetails", "invariant"} : (!mini.fatptr<"OutOfBoundsDetails">) -> !mini.fatptr<"OutOfBoundsDetails">
    %4959 = "mini.wrap"(%4955) : (i32) -> !mini.ptr<i32>
    %4960 = builtin.unrealized_conversion_cast %4959 : !mini.ptr<i32> to !mini.ptr<i32>
    %4961 = builtin.unrealized_conversion_cast %4960 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4958, %4961) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"OutOfBoundsDetails">, !mini.ptr<i32>) -> ()
    %4962 = "mini.wrap"(%4956) : (i32) -> !mini.ptr<i32>
    %4963 = builtin.unrealized_conversion_cast %4962 : !mini.ptr<i32> to !mini.ptr<i32>
    %4964 = builtin.unrealized_conversion_cast %4963 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%4958, %4964) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"OutOfBoundsDetails">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "OutOfBoundsDetails_init_boundsPtri32_indexPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb584(%4965 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4966 : !llvm.ptr):
    %4967 = "mini.invariant"(%4966) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4968 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb585] : () -> ()
  ^bb586:
    %4969 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%4969, %4968) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb587] : () -> ()
  ^bb588:
    %4970 = "llvm.getelementptr"(%4966) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4971 = "llvm.load"(%4970) : (!llvm.ptr) -> !llvm.ptr
    %4972 = "llvm.getelementptr"(%4971) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4973 = "llvm.getelementptr"(%4971) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4974 = "llvm.getelementptr"(%4971) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4975 = "llvm.getelementptr"(%4971) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4976 = "llvm.load"(%4972) : (!llvm.ptr) -> i64
    %4977 = "llvm.load"(%4973) : (!llvm.ptr) -> i64
    %4978 = "llvm.load"(%4974) : (!llvm.ptr) -> !llvm.ptr
    %4979 = "llvm.load"(%4975) : (!llvm.ptr) -> !llvm.ptr
    %4980 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4981 = "llvm.ptrtoint"(%4980) : (!llvm.ptr) -> i64
    %4982 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4983 = "mini.subtype"(%4978, %4977, %4976, %4982, %4981, %4979) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4983) [^bb586, ^bb586] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb585:
    %4984 = "llvm.getelementptr"(%4966) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %4985 = "llvm.load"(%4984) : (!llvm.ptr) -> !llvm.ptr
    %4986 = "llvm.getelementptr"(%4985) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4987 = "llvm.getelementptr"(%4985) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4988 = "llvm.getelementptr"(%4985) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4989 = "llvm.getelementptr"(%4985) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4990 = "llvm.load"(%4986) : (!llvm.ptr) -> i64
    %4991 = "llvm.load"(%4987) : (!llvm.ptr) -> i64
    %4992 = "llvm.load"(%4988) : (!llvm.ptr) -> !llvm.ptr
    %4993 = "llvm.load"(%4989) : (!llvm.ptr) -> !llvm.ptr
    %4994 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4995 = "llvm.ptrtoint"(%4994) : (!llvm.ptr) -> i64
    %4996 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4997 = "mini.subtype"(%4992, %4991, %4990, %4996, %4995, %4993) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4997) [^bb588, ^bb588] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb587:
    %4998 = "llvm.extractvalue"(%4965) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4999 = "llvm.load"(%4968) : (!llvm.ptr) -> i32
    %5000 = "llvm.getelementptr"(%4998, %4999) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5001 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5002 = "llvm.getelementptr"(%5000, %5001) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5002) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb589(%5003 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5004 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5005 : !llvm.ptr):
    %5006 = "mini.wrap"(%5003) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"OutOfBoundsDetails">
    %5007 = "mini.to_fat_ptr"(%5006) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "OutOfBoundsDetails", "invariant"} : (!mini.fatptr<"OutOfBoundsDetails">) -> !mini.fatptr<"OutOfBoundsDetails">
    %5008 = "mini.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5009 = "mini.create_buffer"(%5008) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %5010 = builtin.unrealized_conversion_cast %5009 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %5011 = "mini.refer"(%5010) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5012 = "mini.literal"() {"typ" = !llvm.array<44 x i8>, "value" = "The size of the collection being indexed was"} : () -> !llvm.ptr
    %5013 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%5011, %5013, %5012) {"typ" = !llvm.array<44 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %5014 = "mini.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5015 = "mini.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5016 = "mini.unwrap"(%5011) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5017 = "mini.unwrap"(%5014) : (!mini.ptr<i32>) -> i32
    %5018 = "mini.unwrap"(%5015) : (!mini.ptr<i32>) -> i32
    %5019 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %5020 = "mini.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5021 = "mini.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5022 = builtin.unrealized_conversion_cast %5011 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %5023 = "mini.unwrap"(%5022) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5024 = builtin.unrealized_conversion_cast %5020 : !mini.ptr<i32> to !mini.ptr<i32>
    %5025 = "mini.unwrap"(%5024) : (!mini.ptr<i32>) -> i32
    %5026 = builtin.unrealized_conversion_cast %5021 : !mini.ptr<i32> to !mini.ptr<i32>
    %5027 = "mini.unwrap"(%5026) : (!mini.ptr<i32>) -> i32
    %5028 = "mini.unwrap"(%5019) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5029 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %5030 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5031 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5032 = "mini.parameterizations_array"(%5029, %5030, %5031) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5032, %5028, %5023, %5025, %5027) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %5033 = builtin.unrealized_conversion_cast %5019 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %5034 = "mini.unwrap"(%5033) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %5035 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %5036 = "mini.parameterizations_array"(%5035) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%5036, %5034) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %5037 = "mini.get_field"(%5007) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"OutOfBoundsDetails">) -> !mini.ptr<i32>
    %5038 = "mini.unionize"(%5037) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %5039 = "mini.unwrap"(%5038) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %5040 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5041 = "mini.parameterizations_array"(%5040) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%5041, %5039) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %5042 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5043 = "mini.create_buffer"(%5042) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %5044 = builtin.unrealized_conversion_cast %5043 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %5045 = "mini.refer"(%5044) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5046 = "mini.literal"() {"typ" = !llvm.array<25 x i8>, "value" = "The indexing argument was"} : () -> !llvm.ptr
    %5047 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%5045, %5047, %5046) {"typ" = !llvm.array<25 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %5048 = "mini.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5049 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5050 = "mini.unwrap"(%5045) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5051 = "mini.unwrap"(%5048) : (!mini.ptr<i32>) -> i32
    %5052 = "mini.unwrap"(%5049) : (!mini.ptr<i32>) -> i32
    %5053 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %5054 = "mini.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5055 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5056 = builtin.unrealized_conversion_cast %5045 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %5057 = "mini.unwrap"(%5056) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5058 = builtin.unrealized_conversion_cast %5054 : !mini.ptr<i32> to !mini.ptr<i32>
    %5059 = "mini.unwrap"(%5058) : (!mini.ptr<i32>) -> i32
    %5060 = builtin.unrealized_conversion_cast %5055 : !mini.ptr<i32> to !mini.ptr<i32>
    %5061 = "mini.unwrap"(%5060) : (!mini.ptr<i32>) -> i32
    %5062 = "mini.unwrap"(%5053) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5063 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %5064 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5065 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5066 = "mini.parameterizations_array"(%5063, %5064, %5065) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5066, %5062, %5057, %5059, %5061) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %5067 = builtin.unrealized_conversion_cast %5053 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %5068 = "mini.unwrap"(%5067) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %5069 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %5070 = "mini.parameterizations_array"(%5069) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%5070, %5068) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %5071 = "mini.get_field"(%5007) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!mini.fatptr<"OutOfBoundsDetails">) -> !mini.ptr<i32>
    %5072 = "mini.unionize"(%5071) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %5073 = "mini.unwrap"(%5072) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %5074 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5075 = "mini.parameterizations_array"(%5074) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%5075, %5073) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "OutOfBoundsDetails_report_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb590(%5076 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5077 : !llvm.ptr):
    %5078 = "mini.invariant"(%5077) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5079 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb591] : () -> ()
  ^bb591:
    %5080 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%5080, %5079) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb592] : () -> ()
  ^bb592:
    %5081 = "llvm.extractvalue"(%5076) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5082 = "llvm.load"(%5079) : (!llvm.ptr) -> i32
    %5083 = "llvm.getelementptr"(%5081, %5082) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5084 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5085 = "llvm.getelementptr"(%5083, %5084) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5085) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBoundsDetails_B_report_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_OutOfBounds", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "OutOfBounds_getter_details", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_OutOfBoundsDetails_or_Nil"} : () -> ()
  "mini.setter_def"() {"meth_name" = "OutOfBounds_setter_details", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_OutOfBoundsDetails_or_Nil"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "OutOfBounds_field_details", "getter_name" = "OutOfBounds_getter_details", "setter_name" = "OutOfBounds_setter_details"} : () -> ()
  "mini.getter_def"() {"meth_name" = "OutOfBounds_getter_line_number", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "OutOfBounds_setter_line_number", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "OutOfBounds_field_line_number", "getter_name" = "OutOfBounds_getter_line_number", "setter_name" = "OutOfBounds_setter_line_number"} : () -> ()
  "mini.getter_def"() {"meth_name" = "OutOfBounds_getter_file_name", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "OutOfBounds_setter_file_name", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "OutOfBounds_field_file_name", "getter_name" = "OutOfBounds_getter_file_name", "setter_name" = "OutOfBounds_setter_file_name"} : () -> ()
  "mini.getter_def"() {"meth_name" = "OutOfBounds_getter_message", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "OutOfBounds_setter_message", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "OutOfBounds_field_message", "getter_name" = "OutOfBounds_getter_message", "setter_name" = "OutOfBounds_setter_message"} : () -> ()
  "mini.func"() ({
  ^bb593(%5086 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5087 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5088 : !llvm.ptr, %5089 : i32, %5090 : i32):
    %5091 = "mini.wrap"(%5086) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"OutOfBounds">
    %5092 = "mini.to_fat_ptr"(%5091) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "OutOfBounds", "to_typ_name" = "OutOfBounds", "invariant"} : (!mini.fatptr<"OutOfBounds">) -> !mini.fatptr<"OutOfBounds">
    %5093 = "mini.wrap"(%5089) : (i32) -> !mini.ptr<i32>
    %5094 = builtin.unrealized_conversion_cast %5093 : !mini.ptr<i32> to !mini.ptr<i32>
    %5095 = "mini.wrap"(%5090) : (i32) -> !mini.ptr<i32>
    %5096 = builtin.unrealized_conversion_cast %5095 : !mini.ptr<i32> to !mini.ptr<i32>
    %5097 = "mini.unwrap"(%5094) : (!mini.ptr<i32>) -> i32
    %5098 = "mini.unwrap"(%5096) : (!mini.ptr<i32>) -> i32
    %5099 = "mini.new"() {"typ" = !llvm.struct<(i32, i32)>, "class_name" = "OutOfBoundsDetails", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"OutOfBoundsDetails">
    %5100 = builtin.unrealized_conversion_cast %5094 : !mini.ptr<i32> to !mini.ptr<i32>
    %5101 = "mini.unwrap"(%5100) : (!mini.ptr<i32>) -> i32
    %5102 = builtin.unrealized_conversion_cast %5096 : !mini.ptr<i32> to !mini.ptr<i32>
    %5103 = "mini.unwrap"(%5102) : (!mini.ptr<i32>) -> i32
    %5104 = "mini.unwrap"(%5099) : (!mini.fatptr<"OutOfBoundsDetails">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5105 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5106 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5107 = "mini.parameterizations_array"(%5105, %5106) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5107, %5104, %5101, %5103) {"offset" = 2 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %5108 = builtin.unrealized_conversion_cast %5099 : !mini.fatptr<"OutOfBoundsDetails"> to !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>
    "mini.set_field"(%5092, %5108) {"offset" = 0 : i64, "vtable_bytes" = 232 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"OutOfBounds">, !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>) -> ()
    %5109 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5110 = builtin.unrealized_conversion_cast %5109 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5092, %5110) {"offset" = 1 : i64, "vtable_bytes" = 232 : i32, "original_type" = i32} : (!mini.fatptr<"OutOfBounds">, !mini.ptr<i32>) -> ()
    %5111 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5112 = "mini.create_buffer"(%5111) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %5113 = builtin.unrealized_conversion_cast %5112 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %5114 = "mini.refer"(%5113) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5115 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %5116 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%5114, %5116, %5115) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %5117 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5118 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5119 = "mini.unwrap"(%5114) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5120 = "mini.unwrap"(%5117) : (!mini.ptr<i32>) -> i32
    %5121 = "mini.unwrap"(%5118) : (!mini.ptr<i32>) -> i32
    %5122 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %5123 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5124 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5125 = builtin.unrealized_conversion_cast %5114 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %5126 = "mini.unwrap"(%5125) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5127 = builtin.unrealized_conversion_cast %5123 : !mini.ptr<i32> to !mini.ptr<i32>
    %5128 = "mini.unwrap"(%5127) : (!mini.ptr<i32>) -> i32
    %5129 = builtin.unrealized_conversion_cast %5124 : !mini.ptr<i32> to !mini.ptr<i32>
    %5130 = "mini.unwrap"(%5129) : (!mini.ptr<i32>) -> i32
    %5131 = "mini.unwrap"(%5122) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5132 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %5133 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5134 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5135 = "mini.parameterizations_array"(%5132, %5133, %5134) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5135, %5131, %5126, %5128, %5130) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %5136 = "mini.to_fat_ptr"(%5122) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%5092, %5136) {"offset" = 2 : i64, "vtable_bytes" = 232 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"OutOfBounds">, !mini.fatptr<"String">) -> ()
    %5137 = "mini.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5138 = "mini.create_buffer"(%5137) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %5139 = builtin.unrealized_conversion_cast %5138 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %5140 = "mini.refer"(%5139) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5141 = "mini.literal"() {"typ" = !llvm.array<65 x i8>, "value" = "An out-of-bounds error occurred while indexing into a collection."} : () -> !llvm.ptr
    %5142 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%5140, %5142, %5141) {"typ" = !llvm.array<65 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %5143 = "mini.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5144 = "mini.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5145 = "mini.unwrap"(%5140) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5146 = "mini.unwrap"(%5143) : (!mini.ptr<i32>) -> i32
    %5147 = "mini.unwrap"(%5144) : (!mini.ptr<i32>) -> i32
    %5148 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %5149 = "mini.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5150 = "mini.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5151 = builtin.unrealized_conversion_cast %5140 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %5152 = "mini.unwrap"(%5151) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5153 = builtin.unrealized_conversion_cast %5149 : !mini.ptr<i32> to !mini.ptr<i32>
    %5154 = "mini.unwrap"(%5153) : (!mini.ptr<i32>) -> i32
    %5155 = builtin.unrealized_conversion_cast %5150 : !mini.ptr<i32> to !mini.ptr<i32>
    %5156 = "mini.unwrap"(%5155) : (!mini.ptr<i32>) -> i32
    %5157 = "mini.unwrap"(%5148) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5158 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %5159 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5160 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5161 = "mini.parameterizations_array"(%5158, %5159, %5160) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5161, %5157, %5152, %5154, %5156) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %5162 = "mini.to_fat_ptr"(%5148) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%5092, %5162) {"offset" = 3 : i64, "vtable_bytes" = 232 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"OutOfBounds">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "OutOfBounds_init_boundsPtri32_indexPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb594(%5163 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5164 : !llvm.ptr):
    %5165 = "mini.invariant"(%5164) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5166 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb595] : () -> ()
  ^bb596:
    %5167 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%5167, %5166) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb597] : () -> ()
  ^bb598:
    %5168 = "llvm.getelementptr"(%5164) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %5169 = "llvm.load"(%5168) : (!llvm.ptr) -> !llvm.ptr
    %5170 = "llvm.getelementptr"(%5169) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5171 = "llvm.getelementptr"(%5169) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5172 = "llvm.getelementptr"(%5169) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5173 = "llvm.getelementptr"(%5169) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5174 = "llvm.load"(%5170) : (!llvm.ptr) -> i64
    %5175 = "llvm.load"(%5171) : (!llvm.ptr) -> i64
    %5176 = "llvm.load"(%5172) : (!llvm.ptr) -> !llvm.ptr
    %5177 = "llvm.load"(%5173) : (!llvm.ptr) -> !llvm.ptr
    %5178 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5179 = "llvm.ptrtoint"(%5178) : (!llvm.ptr) -> i64
    %5180 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5181 = "mini.subtype"(%5176, %5175, %5174, %5180, %5179, %5177) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5181) [^bb596, ^bb596] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb595:
    %5182 = "llvm.getelementptr"(%5164) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %5183 = "llvm.load"(%5182) : (!llvm.ptr) -> !llvm.ptr
    %5184 = "llvm.getelementptr"(%5183) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5185 = "llvm.getelementptr"(%5183) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5186 = "llvm.getelementptr"(%5183) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5187 = "llvm.getelementptr"(%5183) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5188 = "llvm.load"(%5184) : (!llvm.ptr) -> i64
    %5189 = "llvm.load"(%5185) : (!llvm.ptr) -> i64
    %5190 = "llvm.load"(%5186) : (!llvm.ptr) -> !llvm.ptr
    %5191 = "llvm.load"(%5187) : (!llvm.ptr) -> !llvm.ptr
    %5192 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5193 = "llvm.ptrtoint"(%5192) : (!llvm.ptr) -> i64
    %5194 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5195 = "mini.subtype"(%5190, %5189, %5188, %5194, %5193, %5191) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5195) [^bb598, ^bb598] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb597:
    %5196 = "llvm.extractvalue"(%5163) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5197 = "llvm.load"(%5166) : (!llvm.ptr) -> i32
    %5198 = "llvm.getelementptr"(%5196, %5197) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5199 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5200 = "llvm.getelementptr"(%5198, %5199) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5200) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_init_boundsPtri32_indexPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb599(%5201 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5202 : !llvm.ptr):
    %5203 = "mini.invariant"(%5202) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5204 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb600] : () -> ()
  ^bb601:
    %5205 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%5205, %5204) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb602] : () -> ()
  ^bb600:
    %5206 = "llvm.getelementptr"(%5202) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %5207 = "llvm.load"(%5206) : (!llvm.ptr) -> !llvm.ptr
    %5208 = "llvm.getelementptr"(%5207) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5209 = "llvm.getelementptr"(%5207) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5210 = "llvm.getelementptr"(%5207) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5211 = "llvm.getelementptr"(%5207) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5212 = "llvm.load"(%5208) : (!llvm.ptr) -> i64
    %5213 = "llvm.load"(%5209) : (!llvm.ptr) -> i64
    %5214 = "llvm.load"(%5210) : (!llvm.ptr) -> !llvm.ptr
    %5215 = "llvm.load"(%5211) : (!llvm.ptr) -> !llvm.ptr
    %5216 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %5217 = "llvm.ptrtoint"(%5216) : (!llvm.ptr) -> i64
    %5218 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %5219 = "mini.subtype"(%5214, %5213, %5212, %5218, %5217, %5215) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5219) [^bb601, ^bb601] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb602:
    %5220 = "llvm.extractvalue"(%5201) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5221 = "llvm.load"(%5204) : (!llvm.ptr) -> i32
    %5222 = "llvm.getelementptr"(%5220, %5221) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5223 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5224 = "llvm.getelementptr"(%5222, %5223) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5224) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb603(%5225 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5226 : !llvm.ptr):
    %5227 = "mini.invariant"(%5226) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5228 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb604] : () -> ()
  ^bb604:
    %5229 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%5229, %5228) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb605] : () -> ()
  ^bb605:
    %5230 = "llvm.extractvalue"(%5225) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5231 = "llvm.load"(%5228) : (!llvm.ptr) -> i32
    %5232 = "llvm.getelementptr"(%5230, %5231) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5233 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5234 = "llvm.getelementptr"(%5232, %5233) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5234) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb606(%5235 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5236 : !llvm.ptr):
    %5237 = "mini.invariant"(%5236) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5238 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb607] : () -> ()
  ^bb608:
    %5239 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%5239, %5238) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb609] : () -> ()
  ^bb610:
    %5240 = "llvm.getelementptr"(%5236) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %5241 = "llvm.load"(%5240) : (!llvm.ptr) -> !llvm.ptr
    %5242 = "llvm.getelementptr"(%5241) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5243 = "llvm.getelementptr"(%5241) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5244 = "llvm.getelementptr"(%5241) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5245 = "llvm.getelementptr"(%5241) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5246 = "llvm.load"(%5242) : (!llvm.ptr) -> i64
    %5247 = "llvm.load"(%5243) : (!llvm.ptr) -> i64
    %5248 = "llvm.load"(%5244) : (!llvm.ptr) -> !llvm.ptr
    %5249 = "llvm.load"(%5245) : (!llvm.ptr) -> !llvm.ptr
    %5250 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %5251 = "llvm.ptrtoint"(%5250) : (!llvm.ptr) -> i64
    %5252 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %5253 = "mini.subtype"(%5248, %5247, %5246, %5252, %5251, %5249) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5253) [^bb608, ^bb608] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb607:
    %5254 = "llvm.getelementptr"(%5236) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %5255 = "llvm.load"(%5254) : (!llvm.ptr) -> !llvm.ptr
    %5256 = "llvm.getelementptr"(%5255) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5257 = "llvm.getelementptr"(%5255) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5258 = "llvm.getelementptr"(%5255) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5259 = "llvm.getelementptr"(%5255) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5260 = "llvm.load"(%5256) : (!llvm.ptr) -> i64
    %5261 = "llvm.load"(%5257) : (!llvm.ptr) -> i64
    %5262 = "llvm.load"(%5258) : (!llvm.ptr) -> !llvm.ptr
    %5263 = "llvm.load"(%5259) : (!llvm.ptr) -> !llvm.ptr
    %5264 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5265 = "llvm.ptrtoint"(%5264) : (!llvm.ptr) -> i64
    %5266 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5267 = "mini.subtype"(%5262, %5261, %5260, %5266, %5265, %5263) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5267) [^bb610, ^bb610] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb609:
    %5268 = "llvm.extractvalue"(%5235) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5269 = "llvm.load"(%5238) : (!llvm.ptr) -> i32
    %5270 = "llvm.getelementptr"(%5268, %5269) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5271 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5272 = "llvm.getelementptr"(%5270, %5271) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5272) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_set_info_line_numberPtri32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb611(%5273 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5274 : !llvm.ptr):
    %5275 = "mini.invariant"(%5274) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5276 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb612] : () -> ()
  ^bb612:
    %5277 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%5277, %5276) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb613] : () -> ()
  ^bb613:
    %5278 = "llvm.extractvalue"(%5273) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5279 = "llvm.load"(%5276) : (!llvm.ptr) -> i32
    %5280 = "llvm.getelementptr"(%5278, %5279) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5281 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5282 = "llvm.getelementptr"(%5280, %5281) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5282) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_report_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb614(%5283 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5284 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5285 : !llvm.ptr):
    %5286 = "mini.wrap"(%5283) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"OutOfBounds">
    %5287 = "mini.to_fat_ptr"(%5286) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "OutOfBounds", "to_typ_name" = "OutOfBounds", "invariant"} : (!mini.fatptr<"OutOfBounds">) -> !mini.fatptr<"OutOfBounds">
    %5288 = "mini.get_field"(%5287) {"offset" = 3 : i64, "vtable_bytes" = 232 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"OutOfBounds">) -> !mini.fatptr<"String">
    %5289 = builtin.unrealized_conversion_cast %5288 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %5290 = "mini.unwrap"(%5289) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %5291 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %5292 = "mini.parameterizations_array"(%5291) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%5292, %5290) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %5293 = "mini.get_field"(%5287) {"offset" = 0 : i64, "vtable_bytes" = 232 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"OutOfBounds">) -> !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>
    %5294 = "mini.checkflag"(%5293) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>) -> i1
    %5295 = "mini.unwrap"(%5294) : (i1) -> i1
    %5296 = builtin.unrealized_conversion_cast %5293 : !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]> to !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>
    "mini.if"(%5295) ({
      %5297 = "mini.to_fat_ptr"(%5296) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "OutOfBoundsDetails", "invariant"} : (!mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>) -> !mini.fatptr<"OutOfBoundsDetails">
      %5298 = "mini.unwrap"(%5297) : (!mini.fatptr<"OutOfBoundsDetails">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5299 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%5299, %5298) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      "mini.castassign"(%5296, %5297) ({
        %5300 = builtin.unrealized_conversion_cast %5297 : !mini.fatptr<"OutOfBoundsDetails"> to !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>, !mini.fatptr<"OutOfBoundsDetails">) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "OutOfBounds_print_message_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb615(%5301 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5302 : !llvm.ptr):
    %5303 = "mini.invariant"(%5302) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5304 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb616] : () -> ()
  ^bb616:
    %5305 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%5305, %5304) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb617] : () -> ()
  ^bb617:
    %5306 = "llvm.extractvalue"(%5301) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5307 = "llvm.load"(%5304) : (!llvm.ptr) -> i32
    %5308 = "llvm.getelementptr"(%5306, %5307) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5309 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5310 = "llvm.getelementptr"(%5308, %5309) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5310) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_IntArray", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "IntArray_getter_buffer", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferPtri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "IntArray_setter_buffer", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferPtri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "IntArray_field_buffer", "getter_name" = "IntArray_getter_buffer", "setter_name" = "IntArray_setter_buffer"} : () -> ()
  "mini.getter_def"() {"meth_name" = "IntArray_getter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "IntArray_setter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "IntArray_field_length", "getter_name" = "IntArray_getter_length", "setter_name" = "IntArray_setter_length"} : () -> ()
  "mini.getter_def"() {"meth_name" = "IntArray_getter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "IntArray_setter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "IntArray_field_capacity", "getter_name" = "IntArray_getter_capacity", "setter_name" = "IntArray_setter_capacity"} : () -> ()
  "mini.func"() ({
  ^bb618(%5311 : !llvm.ptr, %5312 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5313 = "mini.wrap"(%5312) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %5314 = "mini.to_fat_ptr"(%5313) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %5315 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5316 = "mini.create_buffer"(%5315) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %5317 = builtin.unrealized_conversion_cast %5316 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %5318 = "mini.refer"(%5317) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %5319 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5320 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5321 = "mini.unwrap"(%5318) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %5322 = "mini.unwrap"(%5319) : (!mini.ptr<i32>) -> i32
    %5323 = "mini.unwrap"(%5320) : (!mini.ptr<i32>) -> i32
    %5324 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %5325 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5326 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5327 = builtin.unrealized_conversion_cast %5318 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %5328 = "mini.unwrap"(%5327) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %5329 = builtin.unrealized_conversion_cast %5325 : !mini.ptr<i32> to !mini.ptr<i32>
    %5330 = "mini.unwrap"(%5329) : (!mini.ptr<i32>) -> i32
    %5331 = builtin.unrealized_conversion_cast %5326 : !mini.ptr<i32> to !mini.ptr<i32>
    %5332 = "mini.unwrap"(%5331) : (!mini.ptr<i32>) -> i32
    %5333 = "mini.unwrap"(%5324) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5334 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %5335 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5336 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5337 = "mini.parameterizations_array"(%5334, %5335, %5336) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5337, %5333, %5328, %5330, %5332) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %5338 = "mini.to_fat_ptr"(%5324) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5339 = "mini.refer"(%5338) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5340 = "mini.unwrap"(%5314) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5341 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5342 = "mini.method_call"(%5341, %5340) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %5343 = "mini.to_fat_ptr"(%5342) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %5344 = "mini.to_fat_ptr"(%5343) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %5345 = "mini.refer"(%5344) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %5346 = "mini.unwrap"(%5345) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5347 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %5348 = "mini.method_call"(%5347, %5346) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %5349 = builtin.unrealized_conversion_cast %5348 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %5350 = "mini.checkflag"(%5349) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %5351 = "mini.unwrap"(%5350) : (i1) -> i1
    }, {
      %5352 = "mini.narrow"(%5349) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %5353 = builtin.unrealized_conversion_cast %5352 : !mini.ptr<i32> to !mini.ptr<i32>
      %5354 = "mini.unwrap"(%5353) : (!mini.ptr<i32>) -> i32
      %5355 = "mini.unwrap"(%5339) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5356 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %5357 = "mini.parameterizations_array"(%5356) : (!llvm.ptr) -> !llvm.ptr
      %5358 = "mini.method_call"(%5357, %5355, %5354) {"offset" = 9 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.fatptr<"IntArray">
      %5359 = "mini.to_fat_ptr"(%5358) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
      "mini.castassign"(%5349, %5352) ({
        %5360 = builtin.unrealized_conversion_cast %5352 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %5361 = "mini.to_fat_ptr"(%5339) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    "mini.return"(%5361) : (!mini.fatptr<"IntArray">) -> ()
  }) {"func_name" = "IntArray__Self_from_iterable_iterableIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb619(%5362 : !llvm.ptr):
    %5363 = "mini.invariant"(%5362) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5364 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb620] : () -> ()
  ^bb621:
    %5365 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%5365, %5364) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb622] : () -> ()
  ^bb620:
    %5366 = "llvm.getelementptr"(%5362) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %5367 = "llvm.load"(%5366) : (!llvm.ptr) -> !llvm.ptr
    %5368 = "llvm.getelementptr"(%5367) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5369 = "llvm.getelementptr"(%5367) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5370 = "llvm.getelementptr"(%5367) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5371 = "llvm.getelementptr"(%5367) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5372 = "llvm.load"(%5368) : (!llvm.ptr) -> i64
    %5373 = "llvm.load"(%5369) : (!llvm.ptr) -> i64
    %5374 = "llvm.load"(%5370) : (!llvm.ptr) -> !llvm.ptr
    %5375 = "llvm.load"(%5371) : (!llvm.ptr) -> !llvm.ptr
    %5376 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %5377 = "llvm.ptrtoint"(%5376) : (!llvm.ptr) -> i64
    %5378 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %5379 = "mini.subtype"(%5374, %5373, %5372, %5378, %5377, %5375) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5379) [^bb621, ^bb621] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb622:
    %5380 = "mini.addr_of"() {"global_name" = @IntArray} : () -> !llvm.ptr
    %5381 = "llvm.load"(%5364) : (!llvm.ptr) -> i32
    %5382 = "llvm.getelementptr"(%5380, %5381) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5383 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5384 = "llvm.getelementptr"(%5382, %5383) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5384) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B__Self_from_iterable_iterableIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb623(%5385 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5386 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5387 : !llvm.ptr):
    %5388 = "mini.wrap"(%5385) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5389 = "mini.to_fat_ptr"(%5388) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5390 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5391 = "mini.create_buffer"(%5390) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %5392 = builtin.unrealized_conversion_cast %5391 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    "mini.set_field"(%5389, %5392) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">, !mini.buffer<!mini.ptr<i32>>) -> ()
    %5393 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5394 = builtin.unrealized_conversion_cast %5393 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5389, %5394) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
    %5395 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5396 = builtin.unrealized_conversion_cast %5395 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5389, %5396) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb624(%5397 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5398 : !llvm.ptr):
    %5399 = "mini.invariant"(%5398) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5400 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb625] : () -> ()
  ^bb625:
    %5401 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%5401, %5400) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb626] : () -> ()
  ^bb626:
    %5402 = "llvm.extractvalue"(%5397) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5403 = "llvm.load"(%5400) : (!llvm.ptr) -> i32
    %5404 = "llvm.getelementptr"(%5402, %5403) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5405 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5406 = "llvm.getelementptr"(%5404, %5405) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5406) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb627(%5407 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5408 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5409 : !llvm.ptr, %5410 : !llvm.struct<(!llvm.ptr)>, %5411 : i32, %5412 : i32):
    %5413 = "mini.wrap"(%5407) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5414 = "mini.to_fat_ptr"(%5413) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5415 = "mini.wrap"(%5410) : (!llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i32>>
    %5416 = builtin.unrealized_conversion_cast %5415 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %5417 = builtin.unrealized_conversion_cast %5416 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    "mini.set_field"(%5414, %5417) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">, !mini.buffer<!mini.ptr<i32>>) -> ()
    %5418 = "mini.wrap"(%5411) : (i32) -> !mini.ptr<i32>
    %5419 = builtin.unrealized_conversion_cast %5418 : !mini.ptr<i32> to !mini.ptr<i32>
    %5420 = builtin.unrealized_conversion_cast %5419 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5414, %5420) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
    %5421 = "mini.wrap"(%5412) : (i32) -> !mini.ptr<i32>
    %5422 = builtin.unrealized_conversion_cast %5421 : !mini.ptr<i32> to !mini.ptr<i32>
    %5423 = builtin.unrealized_conversion_cast %5422 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5414, %5423) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb628(%5424 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5425 : !llvm.ptr):
    %5426 = "mini.invariant"(%5425) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5427 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb629] : () -> ()
  ^bb630:
    %5428 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%5428, %5427) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb631] : () -> ()
  ^bb632:
    %5429 = "llvm.getelementptr"(%5425) <{"rawConstantIndices" = array<i32: 0, 2>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %5430 = "llvm.load"(%5429) : (!llvm.ptr) -> !llvm.ptr
    %5431 = "llvm.getelementptr"(%5430) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5432 = "llvm.getelementptr"(%5430) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5433 = "llvm.getelementptr"(%5430) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5434 = "llvm.getelementptr"(%5430) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5435 = "llvm.load"(%5431) : (!llvm.ptr) -> i64
    %5436 = "llvm.load"(%5432) : (!llvm.ptr) -> i64
    %5437 = "llvm.load"(%5433) : (!llvm.ptr) -> !llvm.ptr
    %5438 = "llvm.load"(%5434) : (!llvm.ptr) -> !llvm.ptr
    %5439 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5440 = "llvm.ptrtoint"(%5439) : (!llvm.ptr) -> i64
    %5441 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5442 = "mini.subtype"(%5437, %5436, %5435, %5441, %5440, %5438) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5442) [^bb630, ^bb630] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb633:
    %5443 = "llvm.getelementptr"(%5425) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %5444 = "llvm.load"(%5443) : (!llvm.ptr) -> !llvm.ptr
    %5445 = "llvm.getelementptr"(%5444) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5446 = "llvm.getelementptr"(%5444) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5447 = "llvm.getelementptr"(%5444) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5448 = "llvm.getelementptr"(%5444) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5449 = "llvm.load"(%5445) : (!llvm.ptr) -> i64
    %5450 = "llvm.load"(%5446) : (!llvm.ptr) -> i64
    %5451 = "llvm.load"(%5447) : (!llvm.ptr) -> !llvm.ptr
    %5452 = "llvm.load"(%5448) : (!llvm.ptr) -> !llvm.ptr
    %5453 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5454 = "llvm.ptrtoint"(%5453) : (!llvm.ptr) -> i64
    %5455 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5456 = "mini.subtype"(%5451, %5450, %5449, %5455, %5454, %5452) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5456) [^bb632, ^bb632] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb629:
    %5457 = "llvm.getelementptr"(%5425) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %5458 = "llvm.load"(%5457) : (!llvm.ptr) -> !llvm.ptr
    %5459 = "llvm.getelementptr"(%5458) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5460 = "llvm.getelementptr"(%5458) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5461 = "llvm.getelementptr"(%5458) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5462 = "llvm.getelementptr"(%5458) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5463 = "llvm.load"(%5459) : (!llvm.ptr) -> i64
    %5464 = "llvm.load"(%5460) : (!llvm.ptr) -> i64
    %5465 = "llvm.load"(%5461) : (!llvm.ptr) -> !llvm.ptr
    %5466 = "llvm.load"(%5462) : (!llvm.ptr) -> !llvm.ptr
    %5467 = "mini.addr_of"() {"global_name" = @buffer_typ} : () -> !llvm.ptr
    %5468 = "llvm.ptrtoint"(%5467) : (!llvm.ptr) -> i64
    %5469 = "llvm.mlir.constant"() <{"value" = 18128551326514141379 : i64}> : () -> i64
    %5470 = "mini.subtype"(%5465, %5464, %5463, %5469, %5468, %5466) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5470) [^bb633, ^bb633] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb631:
    %5471 = "llvm.extractvalue"(%5424) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5472 = "llvm.load"(%5427) : (!llvm.ptr) -> i32
    %5473 = "llvm.getelementptr"(%5471, %5472) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5474 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5475 = "llvm.getelementptr"(%5473, %5474) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5475) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb634(%5476 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5477 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5478 : !llvm.ptr):
    %5479 = "mini.wrap"(%5476) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5480 = "mini.to_fat_ptr"(%5479) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5481 = "mini.get_field"(%5480) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5482 = builtin.unrealized_conversion_cast %5481 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%5482) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray_length_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb635(%5483 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5484 : !llvm.ptr):
    %5485 = "mini.invariant"(%5484) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5486 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb636] : () -> ()
  ^bb636:
    %5487 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
    "llvm.store"(%5487, %5486) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb637] : () -> ()
  ^bb637:
    %5488 = "llvm.extractvalue"(%5483) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5489 = "llvm.load"(%5486) : (!llvm.ptr) -> i32
    %5490 = "llvm.getelementptr"(%5488, %5489) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5491 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5492 = "llvm.getelementptr"(%5490, %5491) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5492) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_length_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb638(%5493 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5494 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5495 : !llvm.ptr):
    %5496 = "mini.wrap"(%5493) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5497 = "mini.to_fat_ptr"(%5496) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5498 = "mini.get_field"(%5497) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5499 = builtin.unrealized_conversion_cast %5498 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%5499) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray_capacity_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb639(%5500 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5501 : !llvm.ptr):
    %5502 = "mini.invariant"(%5501) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5503 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb640] : () -> ()
  ^bb640:
    %5504 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
    "llvm.store"(%5504, %5503) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb641] : () -> ()
  ^bb641:
    %5505 = "llvm.extractvalue"(%5500) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5506 = "llvm.load"(%5503) : (!llvm.ptr) -> i32
    %5507 = "llvm.getelementptr"(%5505, %5506) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5508 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5509 = "llvm.getelementptr"(%5507, %5508) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5509) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb642(%5510 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5511 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5512 : !llvm.ptr):
    %5513 = "mini.wrap"(%5510) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5514 = "mini.to_fat_ptr"(%5513) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5515 = "mini.get_field"(%5514) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %5516 = builtin.unrealized_conversion_cast %5515 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    "mini.return"(%5516) : (!mini.buffer<!mini.ptr<i32>>) -> ()
  }) {"func_name" = "IntArray_buffer_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb643(%5517 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5518 : !llvm.ptr):
    %5519 = "mini.invariant"(%5518) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5520 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb644] : () -> ()
  ^bb644:
    %5521 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
    "llvm.store"(%5521, %5520) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb645] : () -> ()
  ^bb645:
    %5522 = "llvm.extractvalue"(%5517) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5523 = "llvm.load"(%5520) : (!llvm.ptr) -> i32
    %5524 = "llvm.getelementptr"(%5522, %5523) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5525 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5526 = "llvm.getelementptr"(%5524, %5525) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5526) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_buffer_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb646(%5527 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5528 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5529 : !llvm.ptr, %5530 : i32):
    %5531 = "mini.wrap"(%5527) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5532 = "mini.to_fat_ptr"(%5531) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5533 = "mini.wrap"(%5530) : (i32) -> !mini.ptr<i32>
    %5534 = builtin.unrealized_conversion_cast %5533 : !mini.ptr<i32> to !mini.ptr<i32>
    %5535 = "mini.get_field"(%5532) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5536 = "mini.get_field"(%5532) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5537 = "mini.unwrap"(%5535) : (!mini.ptr<i32>) -> i32
    %5538 = "mini.unwrap"(%5536) : (!mini.ptr<i32>) -> i32
    %5539 = "mini.comparison"(%5537, %5538) {"op" = "LT"} : (i32, i32) -> i1
    %5540 = "mini.wrap"(%5539) : (i1) -> !mini.ptr<i32>
    %5541 = "mini.unwrap"(%5540) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5541) ({
      %5542 = "mini.get_field"(%5532) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %5543 = "mini.get_field"(%5532) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5544 = builtin.unrealized_conversion_cast %5534 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.buffer_set"(%5542, %5543, %5544) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %5545 = "mini.get_field"(%5532) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5546 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5547 = "mini.unwrap"(%5545) : (!mini.ptr<i32>) -> i32
      %5548 = "mini.unwrap"(%5546) : (!mini.ptr<i32>) -> i32
      %5549 = "mini.arithmetic"(%5547, %5548) {"op" = "ADD"} : (i32, i32) -> i32
      %5550 = "mini.wrap"(%5549) : (i32) -> !mini.ptr<i32>
      %5551 = builtin.unrealized_conversion_cast %5550 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.set_field"(%5532, %5551) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
      %5552 = "mini.to_fat_ptr"(%5532) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
      "mini.return"(%5552) : (!mini.fatptr<"IntArray">) -> ()
    }) : (i1) -> ()
    %5553 = "mini.get_field"(%5532) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5554 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5555 = "mini.unwrap"(%5553) : (!mini.ptr<i32>) -> i32
    %5556 = "mini.unwrap"(%5554) : (!mini.ptr<i32>) -> i32
    %5557 = "mini.arithmetic"(%5555, %5556) {"op" = "MUL"} : (i32, i32) -> i32
    %5558 = "mini.wrap"(%5557) : (i32) -> !mini.ptr<i32>
    %5559 = builtin.unrealized_conversion_cast %5558 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5532, %5559) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
    %5560 = "mini.get_field"(%5532) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %5561 = builtin.unrealized_conversion_cast %5560 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %5562 = "mini.refer"(%5561) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %5563 = "mini.get_field"(%5532) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5564 = "mini.create_buffer"(%5563) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %5565 = builtin.unrealized_conversion_cast %5564 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    "mini.set_field"(%5532, %5565) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">, !mini.buffer<!mini.ptr<i32>>) -> ()
    %5566 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %5567 = "mini.get_field"(%5532) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5568 = "mini.unwrap"(%5566) : (!mini.ptr<i32>) -> i32
      %5569 = "mini.unwrap"(%5567) : (!mini.ptr<i32>) -> i32
      %5570 = "mini.comparison"(%5568, %5569) {"op" = "LT"} : (i32, i32) -> i1
      %5571 = "mini.wrap"(%5570) : (i1) -> !mini.ptr<i32>
      %5572 = "mini.unwrap"(%5571) : (!mini.ptr<i32>) -> i1
    }, {
      %5573 = "mini.buffer_get"(%5562, %5566) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %5574 = "mini.get_field"(%5532) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %5575 = builtin.unrealized_conversion_cast %5573 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.buffer_set"(%5574, %5566, %5575) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %5576 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5577 = "mini.unwrap"(%5566) : (!mini.ptr<i32>) -> i32
      %5578 = "mini.unwrap"(%5576) : (!mini.ptr<i32>) -> i32
      %5579 = "mini.arithmetic"(%5577, %5578) {"op" = "ADD"} : (i32, i32) -> i32
      %5580 = "mini.wrap"(%5579) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%5566, %5580) ({
        %5581 = builtin.unrealized_conversion_cast %5580 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %5582 = "mini.get_field"(%5532) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %5583 = "mini.get_field"(%5532) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5584 = builtin.unrealized_conversion_cast %5534 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.buffer_set"(%5582, %5583, %5584) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %5585 = "mini.get_field"(%5532) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5586 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5587 = "mini.unwrap"(%5585) : (!mini.ptr<i32>) -> i32
    %5588 = "mini.unwrap"(%5586) : (!mini.ptr<i32>) -> i32
    %5589 = "mini.arithmetic"(%5587, %5588) {"op" = "ADD"} : (i32, i32) -> i32
    %5590 = "mini.wrap"(%5589) : (i32) -> !mini.ptr<i32>
    %5591 = builtin.unrealized_conversion_cast %5590 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5532, %5591) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
    %5592 = "mini.to_fat_ptr"(%5532) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    "mini.return"(%5592) : (!mini.fatptr<"IntArray">) -> ()
  }) {"func_name" = "IntArray_append_xPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb647(%5593 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5594 : !llvm.ptr):
    %5595 = "mini.invariant"(%5594) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5596 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb648] : () -> ()
  ^bb649:
    %5597 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
    "llvm.store"(%5597, %5596) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb650] : () -> ()
  ^bb648:
    %5598 = "llvm.getelementptr"(%5594) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %5599 = "llvm.load"(%5598) : (!llvm.ptr) -> !llvm.ptr
    %5600 = "llvm.getelementptr"(%5599) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5601 = "llvm.getelementptr"(%5599) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5602 = "llvm.getelementptr"(%5599) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5603 = "llvm.getelementptr"(%5599) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5604 = "llvm.load"(%5600) : (!llvm.ptr) -> i64
    %5605 = "llvm.load"(%5601) : (!llvm.ptr) -> i64
    %5606 = "llvm.load"(%5602) : (!llvm.ptr) -> !llvm.ptr
    %5607 = "llvm.load"(%5603) : (!llvm.ptr) -> !llvm.ptr
    %5608 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5609 = "llvm.ptrtoint"(%5608) : (!llvm.ptr) -> i64
    %5610 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5611 = "mini.subtype"(%5606, %5605, %5604, %5610, %5609, %5607) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5611) [^bb649, ^bb649] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb650:
    %5612 = "llvm.extractvalue"(%5593) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5613 = "llvm.load"(%5596) : (!llvm.ptr) -> i32
    %5614 = "llvm.getelementptr"(%5612, %5613) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5615 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5616 = "llvm.getelementptr"(%5614, %5615) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5616) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_append_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb651(%5617 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5618 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5619 : !llvm.ptr, %5620 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5621 = "mini.wrap"(%5617) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5622 = "mini.to_fat_ptr"(%5621) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5623 = "mini.wrap"(%5620) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5624 = "mini.to_fat_ptr"(%5623) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5625 = "mini.unwrap"(%5624) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5626 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5627 = "mini.method_call"(%5626, %5625) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i32>>
    %5628 = builtin.unrealized_conversion_cast %5627 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %5629 = builtin.unrealized_conversion_cast %5628 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %5630 = "mini.refer"(%5629) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %5631 = "mini.unwrap"(%5624) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5632 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5633 = "mini.method_call"(%5632, %5631) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %5634 = builtin.unrealized_conversion_cast %5633 : !mini.ptr<i32> to !mini.ptr<i32>
    %5635 = "mini.get_field"(%5622) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5636 = "mini.unwrap"(%5635) : (!mini.ptr<i32>) -> i32
    %5637 = "mini.unwrap"(%5634) : (!mini.ptr<i32>) -> i32
    %5638 = "mini.arithmetic"(%5636, %5637) {"op" = "ADD"} : (i32, i32) -> i32
    %5639 = "mini.wrap"(%5638) : (i32) -> !mini.ptr<i32>
    %5640 = "mini.get_field"(%5622) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5641 = "mini.unwrap"(%5639) : (!mini.ptr<i32>) -> i32
    %5642 = "mini.unwrap"(%5640) : (!mini.ptr<i32>) -> i32
    %5643 = "mini.comparison"(%5641, %5642) {"op" = "LT"} : (i32, i32) -> i1
    %5644 = "mini.wrap"(%5643) : (i1) -> !mini.ptr<i32>
    %5645 = "mini.unwrap"(%5644) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5645) ({
      %5646 = "mini.get_field"(%5622) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5647 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      "mini.while"() ({
        %5648 = "mini.get_field"(%5622) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
        %5649 = "mini.unwrap"(%5648) : (!mini.ptr<i32>) -> i32
        %5650 = "mini.unwrap"(%5634) : (!mini.ptr<i32>) -> i32
        %5651 = "mini.arithmetic"(%5649, %5650) {"op" = "ADD"} : (i32, i32) -> i32
        %5652 = "mini.wrap"(%5651) : (i32) -> !mini.ptr<i32>
        %5653 = "mini.unwrap"(%5646) : (!mini.ptr<i32>) -> i32
        %5654 = "mini.unwrap"(%5652) : (!mini.ptr<i32>) -> i32
        %5655 = "mini.comparison"(%5653, %5654) {"op" = "LT"} : (i32, i32) -> i1
        %5656 = "mini.wrap"(%5655) : (i1) -> !mini.ptr<i32>
        %5657 = "mini.unwrap"(%5656) : (!mini.ptr<i32>) -> i1
      }, {
        %5658 = "mini.buffer_get"(%5630, %5647) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
        %5659 = "mini.get_field"(%5622) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
        %5660 = builtin.unrealized_conversion_cast %5658 : !mini.ptr<i32> to !mini.ptr<i32>
        "mini.buffer_set"(%5659, %5646, %5660) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
        %5661 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %5662 = "mini.unwrap"(%5646) : (!mini.ptr<i32>) -> i32
        %5663 = "mini.unwrap"(%5661) : (!mini.ptr<i32>) -> i32
        %5664 = "mini.arithmetic"(%5662, %5663) {"op" = "ADD"} : (i32, i32) -> i32
        %5665 = "mini.wrap"(%5664) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%5646, %5665) ({
          %5666 = builtin.unrealized_conversion_cast %5665 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        %5667 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %5668 = "mini.unwrap"(%5647) : (!mini.ptr<i32>) -> i32
        %5669 = "mini.unwrap"(%5667) : (!mini.ptr<i32>) -> i32
        %5670 = "mini.arithmetic"(%5668, %5669) {"op" = "ADD"} : (i32, i32) -> i32
        %5671 = "mini.wrap"(%5670) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%5647, %5671) ({
          %5672 = builtin.unrealized_conversion_cast %5671 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      }) : () -> ()
      %5673 = "mini.get_field"(%5622) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5674 = "mini.unwrap"(%5673) : (!mini.ptr<i32>) -> i32
      %5675 = "mini.unwrap"(%5634) : (!mini.ptr<i32>) -> i32
      %5676 = "mini.arithmetic"(%5674, %5675) {"op" = "ADD"} : (i32, i32) -> i32
      %5677 = "mini.wrap"(%5676) : (i32) -> !mini.ptr<i32>
      %5678 = builtin.unrealized_conversion_cast %5677 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.set_field"(%5622, %5678) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
      %5679 = "mini.to_fat_ptr"(%5622) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
      "mini.return"(%5679) : (!mini.fatptr<"IntArray">) -> ()
    }) : (i1) -> ()
    %5680 = "mini.get_field"(%5622) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5681 = "mini.unwrap"(%5680) : (!mini.ptr<i32>) -> i32
    %5682 = "mini.unwrap"(%5634) : (!mini.ptr<i32>) -> i32
    %5683 = "mini.arithmetic"(%5681, %5682) {"op" = "ADD"} : (i32, i32) -> i32
    %5684 = "mini.wrap"(%5683) : (i32) -> !mini.ptr<i32>
    %5685 = builtin.unrealized_conversion_cast %5684 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5622, %5685) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
    %5686 = "mini.get_field"(%5622) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %5687 = builtin.unrealized_conversion_cast %5686 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %5688 = "mini.refer"(%5687) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %5689 = "mini.get_field"(%5622) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5690 = "mini.create_buffer"(%5689) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %5691 = builtin.unrealized_conversion_cast %5690 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    "mini.set_field"(%5622, %5691) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">, !mini.buffer<!mini.ptr<i32>>) -> ()
    %5692 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5693 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %5694 = "mini.get_field"(%5622) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5695 = "mini.unwrap"(%5694) : (!mini.ptr<i32>) -> i32
      %5696 = "mini.unwrap"(%5634) : (!mini.ptr<i32>) -> i32
      %5697 = "mini.arithmetic"(%5695, %5696) {"op" = "ADD"} : (i32, i32) -> i32
      %5698 = "mini.wrap"(%5697) : (i32) -> !mini.ptr<i32>
      %5699 = "mini.unwrap"(%5692) : (!mini.ptr<i32>) -> i32
      %5700 = "mini.unwrap"(%5698) : (!mini.ptr<i32>) -> i32
      %5701 = "mini.comparison"(%5699, %5700) {"op" = "LT"} : (i32, i32) -> i1
      %5702 = "mini.wrap"(%5701) : (i1) -> !mini.ptr<i32>
      %5703 = "mini.unwrap"(%5702) : (!mini.ptr<i32>) -> i1
    }, {
      %5704 = "mini.get_field"(%5622) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5705 = "mini.unwrap"(%5692) : (!mini.ptr<i32>) -> i32
      %5706 = "mini.unwrap"(%5704) : (!mini.ptr<i32>) -> i32
      %5707 = "mini.comparison"(%5705, %5706) {"op" = "LT"} : (i32, i32) -> i1
      %5708 = "mini.wrap"(%5707) : (i1) -> !mini.ptr<i32>
      %5709 = "mini.unwrap"(%5708) : (!mini.ptr<i32>) -> i1
      "mini.if"(%5709) ({
        %5710 = "mini.buffer_get"(%5688, %5692) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
        %5711 = "mini.get_field"(%5622) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
        %5712 = builtin.unrealized_conversion_cast %5710 : !mini.ptr<i32> to !mini.ptr<i32>
        "mini.buffer_set"(%5711, %5692, %5712) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
        %5713 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %5714 = "mini.unwrap"(%5692) : (!mini.ptr<i32>) -> i32
        %5715 = "mini.unwrap"(%5713) : (!mini.ptr<i32>) -> i32
        %5716 = "mini.arithmetic"(%5714, %5715) {"op" = "ADD"} : (i32, i32) -> i32
        %5717 = "mini.wrap"(%5716) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%5692, %5717) ({
          %5718 = builtin.unrealized_conversion_cast %5717 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        "mini.continue"() [^bb652] : () -> ()
      }) : (i1) -> ()
      %5719 = "mini.buffer_get"(%5630, %5693) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %5720 = "mini.get_field"(%5622) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %5721 = builtin.unrealized_conversion_cast %5719 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.buffer_set"(%5720, %5692, %5721) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %5722 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5723 = "mini.unwrap"(%5692) : (!mini.ptr<i32>) -> i32
      %5724 = "mini.unwrap"(%5722) : (!mini.ptr<i32>) -> i32
      %5725 = "mini.arithmetic"(%5723, %5724) {"op" = "ADD"} : (i32, i32) -> i32
      %5726 = "mini.wrap"(%5725) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%5692, %5726) ({
        %5727 = builtin.unrealized_conversion_cast %5726 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %5728 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5729 = "mini.unwrap"(%5693) : (!mini.ptr<i32>) -> i32
      %5730 = "mini.unwrap"(%5728) : (!mini.ptr<i32>) -> i32
      %5731 = "mini.arithmetic"(%5729, %5730) {"op" = "ADD"} : (i32, i32) -> i32
      %5732 = "mini.wrap"(%5731) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%5693, %5732) ({
        %5733 = builtin.unrealized_conversion_cast %5732 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %5734 = "mini.get_field"(%5622) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5735 = "mini.unwrap"(%5734) : (!mini.ptr<i32>) -> i32
    %5736 = "mini.unwrap"(%5634) : (!mini.ptr<i32>) -> i32
    %5737 = "mini.arithmetic"(%5735, %5736) {"op" = "ADD"} : (i32, i32) -> i32
    %5738 = "mini.wrap"(%5737) : (i32) -> !mini.ptr<i32>
    %5739 = builtin.unrealized_conversion_cast %5738 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5622, %5739) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
    %5740 = "mini.to_fat_ptr"(%5622) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    "mini.return"(%5740) : (!mini.fatptr<"IntArray">) -> ()
  }) {"func_name" = "IntArray_extend_aryIntArray", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb653(%5741 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5742 : !llvm.ptr):
    %5743 = "mini.invariant"(%5742) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5744 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb654] : () -> ()
  ^bb655:
    %5745 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
    "llvm.store"(%5745, %5744) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb656] : () -> ()
  ^bb654:
    %5746 = "llvm.getelementptr"(%5742) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %5747 = "llvm.load"(%5746) : (!llvm.ptr) -> !llvm.ptr
    %5748 = "llvm.getelementptr"(%5747) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5749 = "llvm.getelementptr"(%5747) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5750 = "llvm.getelementptr"(%5747) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5751 = "llvm.getelementptr"(%5747) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5752 = "llvm.load"(%5748) : (!llvm.ptr) -> i64
    %5753 = "llvm.load"(%5749) : (!llvm.ptr) -> i64
    %5754 = "llvm.load"(%5750) : (!llvm.ptr) -> !llvm.ptr
    %5755 = "llvm.load"(%5751) : (!llvm.ptr) -> !llvm.ptr
    %5756 = "mini.addr_of"() {"global_name" = @IntArray} : () -> !llvm.ptr
    %5757 = "llvm.ptrtoint"(%5756) : (!llvm.ptr) -> i64
    %5758 = "llvm.mlir.constant"() <{"value" = 7629948565578263212 : i64}> : () -> i64
    %5759 = "mini.subtype"(%5754, %5753, %5752, %5758, %5757, %5755) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5759) [^bb655, ^bb655] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb656:
    %5760 = "llvm.extractvalue"(%5741) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5761 = "llvm.load"(%5744) : (!llvm.ptr) -> i32
    %5762 = "llvm.getelementptr"(%5760, %5761) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5763 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5764 = "llvm.getelementptr"(%5762, %5763) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5764) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_extend_aryIntArray", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb657(%5765 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5766 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5767 : !llvm.ptr, %5768 : i32):
    %5769 = "mini.wrap"(%5765) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5770 = "mini.to_fat_ptr"(%5769) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5771 = "mini.wrap"(%5768) : (i32) -> !mini.ptr<i32>
    %5772 = builtin.unrealized_conversion_cast %5771 : !mini.ptr<i32> to !mini.ptr<i32>
    %5773 = "mini.get_field"(%5770) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5774 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5775 = "mini.unwrap"(%5773) : (!mini.ptr<i32>) -> i32
    %5776 = "mini.unwrap"(%5774) : (!mini.ptr<i32>) -> i32
    %5777 = "mini.arithmetic"(%5775, %5776) {"op" = "SUB"} : (i32, i32) -> i32
    %5778 = "mini.wrap"(%5777) : (i32) -> !mini.ptr<i32>
    %5779 = "mini.unwrap"(%5772) : (!mini.ptr<i32>) -> i32
    %5780 = "mini.unwrap"(%5778) : (!mini.ptr<i32>) -> i32
    %5781 = "mini.comparison"(%5779, %5780) {"op" = "GT"} : (i32, i32) -> i1
    %5782 = "mini.wrap"(%5781) : (i1) -> !mini.ptr<i32>
    %5783 = "mini.unwrap"(%5782) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5783) ({
      %5784 = "mini.get_field"(%5770) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5785 = "mini.unwrap"(%5784) : (!mini.ptr<i32>) -> i32
      %5786 = "mini.unwrap"(%5772) : (!mini.ptr<i32>) -> i32
      %5787 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "OutOfBounds", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !mini.fatptr<"OutOfBounds">
      %5788 = "mini.get_field"(%5770) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5789 = builtin.unrealized_conversion_cast %5788 : !mini.ptr<i32> to !mini.ptr<i32>
      %5790 = "mini.unwrap"(%5789) : (!mini.ptr<i32>) -> i32
      %5791 = builtin.unrealized_conversion_cast %5772 : !mini.ptr<i32> to !mini.ptr<i32>
      %5792 = "mini.unwrap"(%5791) : (!mini.ptr<i32>) -> i32
      %5793 = "mini.unwrap"(%5787) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5794 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %5795 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %5796 = "mini.parameterizations_array"(%5794, %5795) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%5796, %5793, %5790, %5792) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %5797 = "mini.literal"() {"value" = 618 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5798 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5799 = "mini.create_buffer"(%5798) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %5800 = builtin.unrealized_conversion_cast %5799 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %5801 = "mini.refer"(%5800) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %5802 = "mini.literal"() {"typ" = !llvm.array<10 x i8>, "value" = "tests.mini"} : () -> !llvm.ptr
      %5803 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%5801, %5803, %5802) {"typ" = !llvm.array<10 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %5804 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5805 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5806 = "mini.unwrap"(%5801) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %5807 = "mini.unwrap"(%5804) : (!mini.ptr<i32>) -> i32
      %5808 = "mini.unwrap"(%5805) : (!mini.ptr<i32>) -> i32
      %5809 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %5810 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5811 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5812 = builtin.unrealized_conversion_cast %5801 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %5813 = "mini.unwrap"(%5812) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %5814 = builtin.unrealized_conversion_cast %5810 : !mini.ptr<i32> to !mini.ptr<i32>
      %5815 = "mini.unwrap"(%5814) : (!mini.ptr<i32>) -> i32
      %5816 = builtin.unrealized_conversion_cast %5811 : !mini.ptr<i32> to !mini.ptr<i32>
      %5817 = "mini.unwrap"(%5816) : (!mini.ptr<i32>) -> i32
      %5818 = "mini.unwrap"(%5809) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5819 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %5820 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %5821 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %5822 = "mini.parameterizations_array"(%5819, %5820, %5821) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%5822, %5818, %5813, %5815, %5817) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %5823 = builtin.unrealized_conversion_cast %5797 : !mini.ptr<i32> to !mini.ptr<i32>
      %5824 = "mini.unwrap"(%5823) : (!mini.ptr<i32>) -> i32
      %5825 = "mini.to_fat_ptr"(%5809) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      %5826 = "mini.unwrap"(%5825) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5827 = "mini.unwrap"(%5787) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5828 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %5829 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %5830 = "mini.parameterizations_array"(%5828, %5829) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%5830, %5827, %5824, %5826) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %5831 = builtin.unrealized_conversion_cast %5787 : !mini.fatptr<"OutOfBounds"> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
      %5832 = "mini.unwrap"(%5831) : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %5833 = "mini.coro_yield"(%5832) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %5834 = "mini.wrap"(%5833) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>
    }) : (i1) -> ()
    %5835 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5836 = "mini.unwrap"(%5772) : (!mini.ptr<i32>) -> i32
    %5837 = "mini.unwrap"(%5835) : (!mini.ptr<i32>) -> i32
    %5838 = "mini.comparison"(%5836, %5837) {"op" = "GE"} : (i32, i32) -> i1
    %5839 = "mini.wrap"(%5838) : (i1) -> !mini.ptr<i32>
    %5840 = "mini.unwrap"(%5839) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5840) ({
      %5841 = "mini.get_field"(%5770) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %5842 = "mini.buffer_get"(%5841, %5772) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %5843 = builtin.unrealized_conversion_cast %5842 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%5843) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %5844 = "mini.get_field"(%5770) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5845 = "mini.unwrap"(%5844) : (!mini.ptr<i32>) -> i32
    %5846 = "mini.unwrap"(%5772) : (!mini.ptr<i32>) -> i32
    %5847 = "mini.arithmetic"(%5845, %5846) {"op" = "ADD"} : (i32, i32) -> i32
    %5848 = "mini.wrap"(%5847) : (i32) -> !mini.ptr<i32>
    %5849 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5850 = "mini.unwrap"(%5848) : (!mini.ptr<i32>) -> i32
    %5851 = "mini.unwrap"(%5849) : (!mini.ptr<i32>) -> i32
    %5852 = "mini.comparison"(%5850, %5851) {"op" = "LT"} : (i32, i32) -> i1
    %5853 = "mini.wrap"(%5852) : (i1) -> !mini.ptr<i32>
    %5854 = "mini.unwrap"(%5853) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5854) ({
      %5855 = "mini.get_field"(%5770) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5856 = "mini.unwrap"(%5855) : (!mini.ptr<i32>) -> i32
      %5857 = "mini.unwrap"(%5772) : (!mini.ptr<i32>) -> i32
      %5858 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "OutOfBounds", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !mini.fatptr<"OutOfBounds">
      %5859 = "mini.get_field"(%5770) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5860 = builtin.unrealized_conversion_cast %5859 : !mini.ptr<i32> to !mini.ptr<i32>
      %5861 = "mini.unwrap"(%5860) : (!mini.ptr<i32>) -> i32
      %5862 = builtin.unrealized_conversion_cast %5772 : !mini.ptr<i32> to !mini.ptr<i32>
      %5863 = "mini.unwrap"(%5862) : (!mini.ptr<i32>) -> i32
      %5864 = "mini.unwrap"(%5858) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5865 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %5866 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %5867 = "mini.parameterizations_array"(%5865, %5866) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%5867, %5864, %5861, %5863) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %5868 = "mini.literal"() {"value" = 620 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5869 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5870 = "mini.create_buffer"(%5869) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %5871 = builtin.unrealized_conversion_cast %5870 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %5872 = "mini.refer"(%5871) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %5873 = "mini.literal"() {"typ" = !llvm.array<10 x i8>, "value" = "tests.mini"} : () -> !llvm.ptr
      %5874 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%5872, %5874, %5873) {"typ" = !llvm.array<10 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %5875 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5876 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5877 = "mini.unwrap"(%5872) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %5878 = "mini.unwrap"(%5875) : (!mini.ptr<i32>) -> i32
      %5879 = "mini.unwrap"(%5876) : (!mini.ptr<i32>) -> i32
      %5880 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %5881 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5882 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5883 = builtin.unrealized_conversion_cast %5872 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %5884 = "mini.unwrap"(%5883) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %5885 = builtin.unrealized_conversion_cast %5881 : !mini.ptr<i32> to !mini.ptr<i32>
      %5886 = "mini.unwrap"(%5885) : (!mini.ptr<i32>) -> i32
      %5887 = builtin.unrealized_conversion_cast %5882 : !mini.ptr<i32> to !mini.ptr<i32>
      %5888 = "mini.unwrap"(%5887) : (!mini.ptr<i32>) -> i32
      %5889 = "mini.unwrap"(%5880) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5890 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %5891 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %5892 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %5893 = "mini.parameterizations_array"(%5890, %5891, %5892) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%5893, %5889, %5884, %5886, %5888) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %5894 = builtin.unrealized_conversion_cast %5868 : !mini.ptr<i32> to !mini.ptr<i32>
      %5895 = "mini.unwrap"(%5894) : (!mini.ptr<i32>) -> i32
      %5896 = "mini.to_fat_ptr"(%5880) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      %5897 = "mini.unwrap"(%5896) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5898 = "mini.unwrap"(%5858) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5899 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %5900 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %5901 = "mini.parameterizations_array"(%5899, %5900) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%5901, %5898, %5895, %5897) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %5902 = builtin.unrealized_conversion_cast %5858 : !mini.fatptr<"OutOfBounds"> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
      %5903 = "mini.unwrap"(%5902) : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %5904 = "mini.coro_yield"(%5903) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %5905 = "mini.wrap"(%5904) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>
    }) : (i1) -> ()
    %5906 = "mini.get_field"(%5770) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %5907 = "mini.get_field"(%5770) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5908 = "mini.unwrap"(%5907) : (!mini.ptr<i32>) -> i32
    %5909 = "mini.unwrap"(%5772) : (!mini.ptr<i32>) -> i32
    %5910 = "mini.arithmetic"(%5908, %5909) {"op" = "ADD"} : (i32, i32) -> i32
    %5911 = "mini.wrap"(%5910) : (i32) -> !mini.ptr<i32>
    %5912 = "mini.buffer_get"(%5906, %5911) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    %5913 = builtin.unrealized_conversion_cast %5912 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%5913) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray__index_xPtri32", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb658(%5914 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5915 : !llvm.ptr):
    %5916 = "mini.invariant"(%5915) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5917 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb659] : () -> ()
  ^bb660:
    %5918 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
    "llvm.store"(%5918, %5917) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb661] : () -> ()
  ^bb659:
    %5919 = "llvm.getelementptr"(%5915) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %5920 = "llvm.load"(%5919) : (!llvm.ptr) -> !llvm.ptr
    %5921 = "llvm.getelementptr"(%5920) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5922 = "llvm.getelementptr"(%5920) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5923 = "llvm.getelementptr"(%5920) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5924 = "llvm.getelementptr"(%5920) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5925 = "llvm.load"(%5921) : (!llvm.ptr) -> i64
    %5926 = "llvm.load"(%5922) : (!llvm.ptr) -> i64
    %5927 = "llvm.load"(%5923) : (!llvm.ptr) -> !llvm.ptr
    %5928 = "llvm.load"(%5924) : (!llvm.ptr) -> !llvm.ptr
    %5929 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5930 = "llvm.ptrtoint"(%5929) : (!llvm.ptr) -> i64
    %5931 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5932 = "mini.subtype"(%5927, %5926, %5925, %5931, %5930, %5928) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5932) [^bb660, ^bb660] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb661:
    %5933 = "llvm.extractvalue"(%5914) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5934 = "llvm.load"(%5917) : (!llvm.ptr) -> i32
    %5935 = "llvm.getelementptr"(%5933, %5934) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5936 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5937 = "llvm.getelementptr"(%5935, %5936) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5937) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B__index_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb662(%5938 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5939 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5940 : !llvm.ptr):
    %5941 = "mini.wrap"(%5938) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5942 = "mini.to_fat_ptr"(%5941) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5943 = "mini.get_field"(%5942) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5944 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5945 = "mini.unwrap"(%5943) : (!mini.ptr<i32>) -> i32
    %5946 = "mini.unwrap"(%5944) : (!mini.ptr<i32>) -> i32
    %5947 = "mini.comparison"(%5945, %5946) {"op" = "EQ"} : (i32, i32) -> i1
    %5948 = "mini.wrap"(%5947) : (i1) -> !mini.ptr<i32>
    %5949 = "mini.unwrap"(%5948) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5949) ({
      %5950 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %5951 = "mini.unionize"(%5950) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%5951) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %5952 = "mini.get_field"(%5942) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5953 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5954 = "mini.unwrap"(%5952) : (!mini.ptr<i32>) -> i32
    %5955 = "mini.unwrap"(%5953) : (!mini.ptr<i32>) -> i32
    %5956 = "mini.arithmetic"(%5954, %5955) {"op" = "SUB"} : (i32, i32) -> i32
    %5957 = "mini.wrap"(%5956) : (i32) -> !mini.ptr<i32>
    %5958 = builtin.unrealized_conversion_cast %5957 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%5942, %5958) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">, !mini.ptr<i32>) -> ()
    %5959 = "mini.get_field"(%5942) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %5960 = "mini.get_field"(%5942) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5961 = "mini.buffer_get"(%5959, %5960) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    %5962 = "mini.unionize"(%5961) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%5962) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "IntArray_pop_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb663(%5963 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5964 : !llvm.ptr):
    %5965 = "mini.invariant"(%5964) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5966 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb664] : () -> ()
  ^bb664:
    %5967 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
    "llvm.store"(%5967, %5966) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb665] : () -> ()
  ^bb665:
    %5968 = "llvm.extractvalue"(%5963) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5969 = "llvm.load"(%5966) : (!llvm.ptr) -> i32
    %5970 = "llvm.getelementptr"(%5968, %5969) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5971 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %5972 = "llvm.getelementptr"(%5970, %5971) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5972) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_pop_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb666(%5973 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5974 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5975 : !llvm.ptr):
    %5976 = "mini.wrap"(%5973) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5977 = "mini.to_fat_ptr"(%5976) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5978 = "mini.get_field"(%5977) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5979 = "mini.create_buffer"(%5978) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %5980 = builtin.unrealized_conversion_cast %5979 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %5981 = "mini.refer"(%5980) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %5982 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %5983 = "mini.get_field"(%5977) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5984 = "mini.unwrap"(%5982) : (!mini.ptr<i32>) -> i32
      %5985 = "mini.unwrap"(%5983) : (!mini.ptr<i32>) -> i32
      %5986 = "mini.comparison"(%5984, %5985) {"op" = "LT"} : (i32, i32) -> i1
      %5987 = "mini.wrap"(%5986) : (i1) -> !mini.ptr<i32>
      %5988 = "mini.unwrap"(%5987) : (!mini.ptr<i32>) -> i1
    }, {
      %5989 = "mini.get_field"(%5977) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %5990 = "mini.buffer_get"(%5989, %5982) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %5991 = builtin.unrealized_conversion_cast %5990 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.buffer_set"(%5981, %5982, %5991) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %5992 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5993 = "mini.unwrap"(%5982) : (!mini.ptr<i32>) -> i32
      %5994 = "mini.unwrap"(%5992) : (!mini.ptr<i32>) -> i32
      %5995 = "mini.arithmetic"(%5993, %5994) {"op" = "ADD"} : (i32, i32) -> i32
      %5996 = "mini.wrap"(%5995) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%5982, %5996) ({
        %5997 = builtin.unrealized_conversion_cast %5996 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %5998 = "mini.get_field"(%5977) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5999 = "mini.get_field"(%5977) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6000 = "mini.unwrap"(%5981) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %6001 = "mini.unwrap"(%5998) : (!mini.ptr<i32>) -> i32
    %6002 = "mini.unwrap"(%5999) : (!mini.ptr<i32>) -> i32
    %6003 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %6004 = "mini.get_field"(%5977) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6005 = "mini.get_field"(%5977) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6006 = builtin.unrealized_conversion_cast %5981 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %6007 = "mini.unwrap"(%6006) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %6008 = builtin.unrealized_conversion_cast %6004 : !mini.ptr<i32> to !mini.ptr<i32>
    %6009 = "mini.unwrap"(%6008) : (!mini.ptr<i32>) -> i32
    %6010 = builtin.unrealized_conversion_cast %6005 : !mini.ptr<i32> to !mini.ptr<i32>
    %6011 = "mini.unwrap"(%6010) : (!mini.ptr<i32>) -> i32
    %6012 = "mini.unwrap"(%6003) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6013 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %6014 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %6015 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %6016 = "mini.parameterizations_array"(%6013, %6014, %6015) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6016, %6012, %6007, %6009, %6011) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %6017 = "mini.to_fat_ptr"(%6003) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6018 = "mini.refer"(%6017) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6019 = "mini.to_fat_ptr"(%6018) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    "mini.return"(%6019) : (!mini.fatptr<"IntArray">) -> ()
  }) {"func_name" = "IntArray_copy_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb667(%6020 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6021 : !llvm.ptr):
    %6022 = "mini.invariant"(%6021) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6023 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb668] : () -> ()
  ^bb668:
    %6024 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
    "llvm.store"(%6024, %6023) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb669] : () -> ()
  ^bb669:
    %6025 = "llvm.extractvalue"(%6020) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6026 = "llvm.load"(%6023) : (!llvm.ptr) -> i32
    %6027 = "llvm.getelementptr"(%6025, %6026) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6028 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6029 = "llvm.getelementptr"(%6027, %6028) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6029) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_copy_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb670(%6030 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6031 : !llvm.ptr):
    %6032 = "mini.invariant"(%6031) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6033 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb671] : () -> ()
  ^bb672:
    %6034 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
    "llvm.store"(%6034, %6033) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb673] : () -> ()
  ^bb671:
    %6035 = "llvm.getelementptr"(%6031) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6036 = "llvm.load"(%6035) : (!llvm.ptr) -> !llvm.ptr
    %6037 = "llvm.getelementptr"(%6036) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6038 = "llvm.getelementptr"(%6036) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6039 = "llvm.getelementptr"(%6036) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6040 = "llvm.getelementptr"(%6036) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6041 = "llvm.load"(%6037) : (!llvm.ptr) -> i64
    %6042 = "llvm.load"(%6038) : (!llvm.ptr) -> i64
    %6043 = "llvm.load"(%6039) : (!llvm.ptr) -> !llvm.ptr
    %6044 = "llvm.load"(%6040) : (!llvm.ptr) -> !llvm.ptr
    %6045 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6046 = "llvm.ptrtoint"(%6045) : (!llvm.ptr) -> i64
    %6047 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6048 = "mini.subtype"(%6043, %6042, %6041, %6047, %6046, %6044) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6048) [^bb672, ^bb672] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb673:
    %6049 = "llvm.extractvalue"(%6030) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6050 = "llvm.load"(%6033) : (!llvm.ptr) -> i32
    %6051 = "llvm.getelementptr"(%6049, %6050) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6052 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6053 = "llvm.getelementptr"(%6051, %6052) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6053) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb674(%6054 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6055 : !llvm.ptr):
    %6056 = "mini.invariant"(%6055) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6057 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb675] : () -> ()
  ^bb676:
    %6058 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
    "llvm.store"(%6058, %6057) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb677] : () -> ()
  ^bb678:
    %6059 = "llvm.getelementptr"(%6055) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6060 = "llvm.load"(%6059) : (!llvm.ptr) -> !llvm.ptr
    %6061 = "llvm.getelementptr"(%6060) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6062 = "llvm.getelementptr"(%6060) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6063 = "llvm.getelementptr"(%6060) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6064 = "llvm.getelementptr"(%6060) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6065 = "llvm.load"(%6061) : (!llvm.ptr) -> i64
    %6066 = "llvm.load"(%6062) : (!llvm.ptr) -> i64
    %6067 = "llvm.load"(%6063) : (!llvm.ptr) -> !llvm.ptr
    %6068 = "llvm.load"(%6064) : (!llvm.ptr) -> !llvm.ptr
    %6069 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6070 = "llvm.ptrtoint"(%6069) : (!llvm.ptr) -> i64
    %6071 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6072 = "mini.subtype"(%6067, %6066, %6065, %6071, %6070, %6068) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6072) [^bb676, ^bb676] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb675:
    %6073 = "llvm.getelementptr"(%6055) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6074 = "llvm.load"(%6073) : (!llvm.ptr) -> !llvm.ptr
    %6075 = "llvm.getelementptr"(%6074) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6076 = "llvm.getelementptr"(%6074) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6077 = "llvm.getelementptr"(%6074) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6078 = "llvm.getelementptr"(%6074) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6079 = "llvm.load"(%6075) : (!llvm.ptr) -> i64
    %6080 = "llvm.load"(%6076) : (!llvm.ptr) -> i64
    %6081 = "llvm.load"(%6077) : (!llvm.ptr) -> !llvm.ptr
    %6082 = "llvm.load"(%6078) : (!llvm.ptr) -> !llvm.ptr
    %6083 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %6084 = "llvm.ptrtoint"(%6083) : (!llvm.ptr) -> i64
    %6085 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %6086 = "mini.subtype"(%6081, %6080, %6079, %6085, %6084, %6082) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6086) [^bb678, ^bb678] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb677:
    %6087 = "llvm.extractvalue"(%6054) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6088 = "llvm.load"(%6057) : (!llvm.ptr) -> i32
    %6089 = "llvm.getelementptr"(%6087, %6088) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6090 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6091 = "llvm.getelementptr"(%6089, %6090) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6091) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb679(%6092 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6093 : !llvm.ptr):
    %6094 = "mini.invariant"(%6093) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6095 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb680] : () -> ()
  ^bb681:
    %6096 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
    "llvm.store"(%6096, %6095) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb682] : () -> ()
  ^bb680:
    %6097 = "llvm.getelementptr"(%6093) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6098 = "llvm.load"(%6097) : (!llvm.ptr) -> !llvm.ptr
    %6099 = "llvm.getelementptr"(%6098) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6100 = "llvm.getelementptr"(%6098) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6101 = "llvm.getelementptr"(%6098) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6102 = "llvm.getelementptr"(%6098) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6103 = "llvm.load"(%6099) : (!llvm.ptr) -> i64
    %6104 = "llvm.load"(%6100) : (!llvm.ptr) -> i64
    %6105 = "llvm.load"(%6101) : (!llvm.ptr) -> !llvm.ptr
    %6106 = "llvm.load"(%6102) : (!llvm.ptr) -> !llvm.ptr
    %6107 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6108 = "llvm.ptrtoint"(%6107) : (!llvm.ptr) -> i64
    %6109 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6110 = "mini.subtype"(%6105, %6104, %6103, %6109, %6108, %6106) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6110) [^bb681, ^bb681] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb682:
    %6111 = "llvm.extractvalue"(%6092) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6112 = "llvm.load"(%6095) : (!llvm.ptr) -> i32
    %6113 = "llvm.getelementptr"(%6111, %6112) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6114 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6115 = "llvm.getelementptr"(%6113, %6114) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6115) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb683(%6116 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6117 : !llvm.ptr):
    %6118 = "mini.invariant"(%6117) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6119 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb684] : () -> ()
  ^bb685:
    %6120 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
    "llvm.store"(%6120, %6119) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb686] : () -> ()
  ^bb684:
    %6121 = "llvm.getelementptr"(%6117) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6122 = "llvm.load"(%6121) : (!llvm.ptr) -> !llvm.ptr
    %6123 = "llvm.getelementptr"(%6122) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6124 = "llvm.getelementptr"(%6122) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6125 = "llvm.getelementptr"(%6122) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6126 = "llvm.getelementptr"(%6122) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6127 = "llvm.load"(%6123) : (!llvm.ptr) -> i64
    %6128 = "llvm.load"(%6124) : (!llvm.ptr) -> i64
    %6129 = "llvm.load"(%6125) : (!llvm.ptr) -> !llvm.ptr
    %6130 = "llvm.load"(%6126) : (!llvm.ptr) -> !llvm.ptr
    %6131 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6132 = "llvm.ptrtoint"(%6131) : (!llvm.ptr) -> i64
    %6133 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6134 = "mini.subtype"(%6129, %6128, %6127, %6133, %6132, %6130) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6134) [^bb685, ^bb685] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb686:
    %6135 = "llvm.extractvalue"(%6116) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6136 = "llvm.load"(%6119) : (!llvm.ptr) -> i32
    %6137 = "llvm.getelementptr"(%6135, %6136) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6138 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6139 = "llvm.getelementptr"(%6137, %6138) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6139) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb687(%6140 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6141 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6142 : !llvm.ptr, %6143 : !llvm.struct<(!llvm.ptr)>):
    %6144 = "mini.wrap"(%6140) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %6145 = "mini.to_fat_ptr"(%6144) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6146 = "mini.wrap"(%6143) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %6147 = builtin.unrealized_conversion_cast %6146 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %6148 = "mini.get_field"(%6145) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6149 = "mini.create_buffer"(%6148) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %6150 = builtin.unrealized_conversion_cast %6149 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %6151 = "mini.refer"(%6150) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %6152 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %6153 = "mini.get_field"(%6145) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %6154 = "mini.unwrap"(%6152) : (!mini.ptr<i32>) -> i32
      %6155 = "mini.unwrap"(%6153) : (!mini.ptr<i32>) -> i32
      %6156 = "mini.comparison"(%6154, %6155) {"op" = "LT"} : (i32, i32) -> i1
      %6157 = "mini.wrap"(%6156) : (i1) -> !mini.ptr<i32>
      %6158 = "mini.unwrap"(%6157) : (!mini.ptr<i32>) -> i1
    }, {
      %6159 = "mini.get_field"(%6145) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %6160 = "mini.buffer_get"(%6159, %6152) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %6161 = builtin.unrealized_conversion_cast %6160 : !mini.ptr<i32> to !mini.ptr<i32>
      %6162 = "mini.unwrap"(%6161) : (!mini.ptr<i32>) -> i32
      %6163 = "mini.unwrap"(%6147) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.ptr
      %6164 = "mini.fptr_call"(%6163, %6162) {"ret_type" = i32} : (!llvm.ptr, i32) -> !mini.ptr<i32>
      %6165 = builtin.unrealized_conversion_cast %6164 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.buffer_set"(%6151, %6152, %6165) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %6166 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6167 = "mini.unwrap"(%6152) : (!mini.ptr<i32>) -> i32
      %6168 = "mini.unwrap"(%6166) : (!mini.ptr<i32>) -> i32
      %6169 = "mini.arithmetic"(%6167, %6168) {"op" = "ADD"} : (i32, i32) -> i32
      %6170 = "mini.wrap"(%6169) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%6152, %6170) ({
        %6171 = builtin.unrealized_conversion_cast %6170 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %6172 = "mini.get_field"(%6145) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6173 = "mini.get_field"(%6145) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6174 = "mini.unwrap"(%6151) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %6175 = "mini.unwrap"(%6172) : (!mini.ptr<i32>) -> i32
    %6176 = "mini.unwrap"(%6173) : (!mini.ptr<i32>) -> i32
    %6177 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %6178 = "mini.get_field"(%6145) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6179 = "mini.get_field"(%6145) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6180 = builtin.unrealized_conversion_cast %6151 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %6181 = "mini.unwrap"(%6180) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %6182 = builtin.unrealized_conversion_cast %6178 : !mini.ptr<i32> to !mini.ptr<i32>
    %6183 = "mini.unwrap"(%6182) : (!mini.ptr<i32>) -> i32
    %6184 = builtin.unrealized_conversion_cast %6179 : !mini.ptr<i32> to !mini.ptr<i32>
    %6185 = "mini.unwrap"(%6184) : (!mini.ptr<i32>) -> i32
    %6186 = "mini.unwrap"(%6177) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6187 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %6188 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %6189 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %6190 = "mini.parameterizations_array"(%6187, %6188, %6189) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6190, %6186, %6181, %6183, %6185) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %6191 = "mini.to_fat_ptr"(%6177) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6192 = "mini.refer"(%6191) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6193 = "mini.to_fat_ptr"(%6192) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%6193) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntArray_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb688(%6194 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6195 : !llvm.ptr):
    %6196 = "mini.invariant"(%6195) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6197 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb689] : () -> ()
  ^bb690:
    %6198 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
    "llvm.store"(%6198, %6197) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb691] : () -> ()
  ^bb689:
    %6199 = "llvm.getelementptr"(%6195) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6200 = "llvm.load"(%6199) : (!llvm.ptr) -> !llvm.ptr
    %6201 = "llvm.getelementptr"(%6200) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6202 = "llvm.getelementptr"(%6200) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6203 = "llvm.getelementptr"(%6200) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6204 = "llvm.getelementptr"(%6200) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6205 = "llvm.load"(%6201) : (!llvm.ptr) -> i64
    %6206 = "llvm.load"(%6202) : (!llvm.ptr) -> i64
    %6207 = "llvm.load"(%6203) : (!llvm.ptr) -> !llvm.ptr
    %6208 = "llvm.load"(%6204) : (!llvm.ptr) -> !llvm.ptr
    %6209 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6210 = "llvm.ptrtoint"(%6209) : (!llvm.ptr) -> i64
    %6211 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6212 = "mini.subtype"(%6207, %6206, %6205, %6211, %6210, %6208) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6212) [^bb690, ^bb690] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb691:
    %6213 = "llvm.extractvalue"(%6194) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6214 = "llvm.load"(%6197) : (!llvm.ptr) -> i32
    %6215 = "llvm.getelementptr"(%6213, %6214) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6216 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6217 = "llvm.getelementptr"(%6215, %6216) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6217) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb692(%6218 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6219 : !llvm.ptr):
    %6220 = "mini.invariant"(%6219) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6221 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb693] : () -> ()
  ^bb694:
    %6222 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
    "llvm.store"(%6222, %6221) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb695] : () -> ()
  ^bb693:
    %6223 = "llvm.getelementptr"(%6219) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6224 = "llvm.load"(%6223) : (!llvm.ptr) -> !llvm.ptr
    %6225 = "llvm.getelementptr"(%6224) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6226 = "llvm.getelementptr"(%6224) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6227 = "llvm.getelementptr"(%6224) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6228 = "llvm.getelementptr"(%6224) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6229 = "llvm.load"(%6225) : (!llvm.ptr) -> i64
    %6230 = "llvm.load"(%6226) : (!llvm.ptr) -> i64
    %6231 = "llvm.load"(%6227) : (!llvm.ptr) -> !llvm.ptr
    %6232 = "llvm.load"(%6228) : (!llvm.ptr) -> !llvm.ptr
    %6233 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6234 = "llvm.ptrtoint"(%6233) : (!llvm.ptr) -> i64
    %6235 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6236 = "mini.subtype"(%6231, %6230, %6229, %6235, %6234, %6232) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6236) [^bb694, ^bb694] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb695:
    %6237 = "llvm.extractvalue"(%6218) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6238 = "llvm.load"(%6221) : (!llvm.ptr) -> i32
    %6239 = "llvm.getelementptr"(%6237, %6238) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6240 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6241 = "llvm.getelementptr"(%6239, %6240) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6241) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb696(%6242 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6243 : !llvm.ptr):
    %6244 = "mini.invariant"(%6243) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6245 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb697] : () -> ()
  ^bb698:
    %6246 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
    "llvm.store"(%6246, %6245) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb699] : () -> ()
  ^bb697:
    %6247 = "llvm.getelementptr"(%6243) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6248 = "llvm.load"(%6247) : (!llvm.ptr) -> !llvm.ptr
    %6249 = "llvm.getelementptr"(%6248) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6250 = "llvm.getelementptr"(%6248) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6251 = "llvm.getelementptr"(%6248) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6252 = "llvm.getelementptr"(%6248) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6253 = "llvm.load"(%6249) : (!llvm.ptr) -> i64
    %6254 = "llvm.load"(%6250) : (!llvm.ptr) -> i64
    %6255 = "llvm.load"(%6251) : (!llvm.ptr) -> !llvm.ptr
    %6256 = "llvm.load"(%6252) : (!llvm.ptr) -> !llvm.ptr
    %6257 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %6258 = "llvm.ptrtoint"(%6257) : (!llvm.ptr) -> i64
    %6259 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %6260 = "mini.subtype"(%6255, %6254, %6253, %6259, %6258, %6256) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6260) [^bb698, ^bb698] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb699:
    %6261 = "llvm.extractvalue"(%6242) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6262 = "llvm.load"(%6245) : (!llvm.ptr) -> i32
    %6263 = "llvm.getelementptr"(%6261, %6262) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6264 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6265 = "llvm.getelementptr"(%6263, %6264) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6265) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb700(%6266 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6267 : !llvm.ptr):
    %6268 = "mini.invariant"(%6267) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6269 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb701] : () -> ()
  ^bb702:
    %6270 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
    "llvm.store"(%6270, %6269) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb703] : () -> ()
  ^bb701:
    %6271 = "llvm.getelementptr"(%6267) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6272 = "llvm.load"(%6271) : (!llvm.ptr) -> !llvm.ptr
    %6273 = "llvm.getelementptr"(%6272) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6274 = "llvm.getelementptr"(%6272) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6275 = "llvm.getelementptr"(%6272) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6276 = "llvm.getelementptr"(%6272) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6277 = "llvm.load"(%6273) : (!llvm.ptr) -> i64
    %6278 = "llvm.load"(%6274) : (!llvm.ptr) -> i64
    %6279 = "llvm.load"(%6275) : (!llvm.ptr) -> !llvm.ptr
    %6280 = "llvm.load"(%6276) : (!llvm.ptr) -> !llvm.ptr
    %6281 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %6282 = "llvm.ptrtoint"(%6281) : (!llvm.ptr) -> i64
    %6283 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %6284 = "mini.subtype"(%6279, %6278, %6277, %6283, %6282, %6280) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6284) [^bb702, ^bb702] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb703:
    %6285 = "llvm.extractvalue"(%6266) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6286 = "llvm.load"(%6269) : (!llvm.ptr) -> i32
    %6287 = "llvm.getelementptr"(%6285, %6286) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6288 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6289 = "llvm.getelementptr"(%6287, %6288) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6289) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb704(%6290 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6291 : !llvm.ptr):
    %6292 = "mini.invariant"(%6291) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6293 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb705] : () -> ()
  ^bb706:
    %6294 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
    "llvm.store"(%6294, %6293) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb707] : () -> ()
  ^bb705:
    %6295 = "llvm.getelementptr"(%6291) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6296 = "llvm.load"(%6295) : (!llvm.ptr) -> !llvm.ptr
    %6297 = "llvm.getelementptr"(%6296) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6298 = "llvm.getelementptr"(%6296) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6299 = "llvm.getelementptr"(%6296) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6300 = "llvm.getelementptr"(%6296) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6301 = "llvm.load"(%6297) : (!llvm.ptr) -> i64
    %6302 = "llvm.load"(%6298) : (!llvm.ptr) -> i64
    %6303 = "llvm.load"(%6299) : (!llvm.ptr) -> !llvm.ptr
    %6304 = "llvm.load"(%6300) : (!llvm.ptr) -> !llvm.ptr
    %6305 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %6306 = "llvm.ptrtoint"(%6305) : (!llvm.ptr) -> i64
    %6307 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %6308 = "mini.subtype"(%6303, %6302, %6301, %6307, %6306, %6304) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6308) [^bb706, ^bb706] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb707:
    %6309 = "llvm.extractvalue"(%6290) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6310 = "llvm.load"(%6293) : (!llvm.ptr) -> i32
    %6311 = "llvm.getelementptr"(%6309, %6310) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6312 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6313 = "llvm.getelementptr"(%6311, %6312) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6313) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb708(%6314 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6315 : !llvm.ptr):
    %6316 = "mini.invariant"(%6315) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6317 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb709] : () -> ()
  ^bb710:
    %6318 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
    "llvm.store"(%6318, %6317) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb711] : () -> ()
  ^bb709:
    %6319 = "llvm.getelementptr"(%6315) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6320 = "llvm.load"(%6319) : (!llvm.ptr) -> !llvm.ptr
    %6321 = "llvm.getelementptr"(%6320) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6322 = "llvm.getelementptr"(%6320) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6323 = "llvm.getelementptr"(%6320) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6324 = "llvm.getelementptr"(%6320) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6325 = "llvm.load"(%6321) : (!llvm.ptr) -> i64
    %6326 = "llvm.load"(%6322) : (!llvm.ptr) -> i64
    %6327 = "llvm.load"(%6323) : (!llvm.ptr) -> !llvm.ptr
    %6328 = "llvm.load"(%6324) : (!llvm.ptr) -> !llvm.ptr
    %6329 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %6330 = "llvm.ptrtoint"(%6329) : (!llvm.ptr) -> i64
    %6331 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %6332 = "mini.subtype"(%6327, %6326, %6325, %6331, %6330, %6328) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6332) [^bb710, ^bb710] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb711:
    %6333 = "llvm.extractvalue"(%6314) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6334 = "llvm.load"(%6317) : (!llvm.ptr) -> i32
    %6335 = "llvm.getelementptr"(%6333, %6334) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6336 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6337 = "llvm.getelementptr"(%6335, %6336) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6337) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb712(%6338 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6339 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6340 : !llvm.ptr):
    %6341 = "mini.wrap"(%6338) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %6342 = "mini.to_fat_ptr"(%6341) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6343 = "mini.unwrap"(%6342) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6344 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "IntArrayIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArrayIterator">
    %6345 = "mini.to_fat_ptr"(%6342) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6346 = "mini.unwrap"(%6345) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6347 = "mini.unwrap"(%6344) : (!mini.fatptr<"IntArrayIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6348 = "mini.parameterization"() {"id_hierarchy" = ["IntArray"], "name_hierarchy" = ["IntArray"]} : () -> !llvm.ptr
    %6349 = "mini.parameterizations_array"(%6348) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6349, %6347, %6346) {"offset" = 2 : i32, "vptrs" = [#none], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %6350 = "mini.to_fat_ptr"(%6344) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArrayIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%6350) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "IntArray_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb713(%6351 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6352 : !llvm.ptr):
    %6353 = "mini.invariant"(%6352) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6354 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb714] : () -> ()
  ^bb714:
    %6355 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
    "llvm.store"(%6355, %6354) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb715] : () -> ()
  ^bb715:
    %6356 = "llvm.extractvalue"(%6351) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6357 = "llvm.load"(%6354) : (!llvm.ptr) -> i32
    %6358 = "llvm.getelementptr"(%6356, %6357) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6359 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6360 = "llvm.getelementptr"(%6358, %6359) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6360) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb716(%6361 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6362 : !llvm.ptr):
    %6363 = "mini.invariant"(%6362) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6364 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb717] : () -> ()
  ^bb717:
    %6365 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
    "llvm.store"(%6365, %6364) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb718] : () -> ()
  ^bb718:
    %6366 = "llvm.extractvalue"(%6361) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6367 = "llvm.load"(%6364) : (!llvm.ptr) -> i32
    %6368 = "llvm.getelementptr"(%6366, %6367) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6369 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6370 = "llvm.getelementptr"(%6368, %6369) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6370) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_IntArrayIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "IntArrayIterator_getter_array", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntArray", "parameterization" = "_parameterization_IntArray"} : () -> ()
  "mini.setter_def"() {"meth_name" = "IntArrayIterator_setter_array", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "IntArray", "parameterization" = "_parameterization_IntArray"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "IntArrayIterator_field_array", "getter_name" = "IntArrayIterator_getter_array", "setter_name" = "IntArrayIterator_setter_array"} : () -> ()
  "mini.getter_def"() {"meth_name" = "IntArrayIterator_getter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "IntArrayIterator_setter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "IntArrayIterator_field_index", "getter_name" = "IntArrayIterator_getter_index", "setter_name" = "IntArrayIterator_setter_index"} : () -> ()
  "mini.func"() ({
  ^bb719(%6371 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6372 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6373 : !llvm.ptr, %6374 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6375 = "mini.wrap"(%6371) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArrayIterator">
    %6376 = "mini.to_fat_ptr"(%6375) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArrayIterator", "to_typ_name" = "IntArrayIterator", "invariant"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArrayIterator">
    %6377 = "mini.wrap"(%6374) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %6378 = "mini.to_fat_ptr"(%6377) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6379 = "mini.to_fat_ptr"(%6378) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    "mini.set_field"(%6376, %6379) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArrayIterator">, !mini.fatptr<"IntArray">) -> ()
    %6380 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6381 = builtin.unrealized_conversion_cast %6380 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%6376, %6381) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"IntArrayIterator">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArrayIterator_init_arrayIntArray", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb720(%6382 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6383 : !llvm.ptr):
    %6384 = "mini.invariant"(%6383) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6385 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb721] : () -> ()
  ^bb722:
    %6386 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%6386, %6385) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb723] : () -> ()
  ^bb721:
    %6387 = "llvm.getelementptr"(%6383) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6388 = "llvm.load"(%6387) : (!llvm.ptr) -> !llvm.ptr
    %6389 = "llvm.getelementptr"(%6388) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6390 = "llvm.getelementptr"(%6388) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6391 = "llvm.getelementptr"(%6388) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6392 = "llvm.getelementptr"(%6388) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6393 = "llvm.load"(%6389) : (!llvm.ptr) -> i64
    %6394 = "llvm.load"(%6390) : (!llvm.ptr) -> i64
    %6395 = "llvm.load"(%6391) : (!llvm.ptr) -> !llvm.ptr
    %6396 = "llvm.load"(%6392) : (!llvm.ptr) -> !llvm.ptr
    %6397 = "mini.addr_of"() {"global_name" = @IntArray} : () -> !llvm.ptr
    %6398 = "llvm.ptrtoint"(%6397) : (!llvm.ptr) -> i64
    %6399 = "llvm.mlir.constant"() <{"value" = 7629948565578263212 : i64}> : () -> i64
    %6400 = "mini.subtype"(%6395, %6394, %6393, %6399, %6398, %6396) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6400) [^bb722, ^bb722] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb723:
    %6401 = "llvm.extractvalue"(%6382) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6402 = "llvm.load"(%6385) : (!llvm.ptr) -> i32
    %6403 = "llvm.getelementptr"(%6401, %6402) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6404 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6405 = "llvm.getelementptr"(%6403, %6404) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6405) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArrayIterator_B_init_arrayIntArray", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb724(%6406 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6407 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6408 : !llvm.ptr):
    %6409 = "mini.wrap"(%6406) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArrayIterator">
    %6410 = "mini.to_fat_ptr"(%6409) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArrayIterator", "to_typ_name" = "IntArrayIterator", "invariant"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArrayIterator">
    %6411 = "mini.get_field"(%6410) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"IntArrayIterator">) -> !mini.ptr<i32>
    %6412 = "mini.get_field"(%6410) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntArray"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArray">
    %6413 = "mini.unwrap"(%6412) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6414 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6415 = "mini.method_call"(%6414, %6413) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %6416 = builtin.unrealized_conversion_cast %6415 : !mini.ptr<i32> to !mini.ptr<i32>
    %6417 = "mini.unwrap"(%6411) : (!mini.ptr<i32>) -> i32
    %6418 = "mini.unwrap"(%6416) : (!mini.ptr<i32>) -> i32
    %6419 = "mini.comparison"(%6417, %6418) {"op" = "LT"} : (i32, i32) -> i1
    %6420 = "mini.wrap"(%6419) : (i1) -> !mini.ptr<i32>
    %6421 = "mini.unwrap"(%6420) : (!mini.ptr<i32>) -> i1
    "mini.if"(%6421) ({
      %6422 = "mini.get_field"(%6410) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"IntArrayIterator">) -> !mini.ptr<i32>
      %6423 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6424 = "mini.unwrap"(%6422) : (!mini.ptr<i32>) -> i32
      %6425 = "mini.unwrap"(%6423) : (!mini.ptr<i32>) -> i32
      %6426 = "mini.arithmetic"(%6424, %6425) {"op" = "ADD"} : (i32, i32) -> i32
      %6427 = "mini.wrap"(%6426) : (i32) -> !mini.ptr<i32>
      %6428 = builtin.unrealized_conversion_cast %6427 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.set_field"(%6410, %6428) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"IntArrayIterator">, !mini.ptr<i32>) -> ()
      %6429 = "mini.get_field"(%6410) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "IntArray"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArray">
      %6430 = "mini.unwrap"(%6429) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6431 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %6432 = "mini.method_call"(%6431, %6430) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i32>>
      %6433 = builtin.unrealized_conversion_cast %6432 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
      %6434 = "mini.get_field"(%6410) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"IntArrayIterator">) -> !mini.ptr<i32>
      %6435 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6436 = "mini.unwrap"(%6434) : (!mini.ptr<i32>) -> i32
      %6437 = "mini.unwrap"(%6435) : (!mini.ptr<i32>) -> i32
      %6438 = "mini.arithmetic"(%6436, %6437) {"op" = "SUB"} : (i32, i32) -> i32
      %6439 = "mini.wrap"(%6438) : (i32) -> !mini.ptr<i32>
      %6440 = "mini.buffer_get"(%6433, %6439) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %6441 = "mini.unionize"(%6440) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%6441) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %6442 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %6443 = "mini.unionize"(%6442) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%6443) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "IntArrayIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb725(%6444 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6445 : !llvm.ptr):
    %6446 = "mini.invariant"(%6445) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6447 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb726] : () -> ()
  ^bb726:
    %6448 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%6448, %6447) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb727] : () -> ()
  ^bb727:
    %6449 = "llvm.extractvalue"(%6444) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6450 = "llvm.load"(%6447) : (!llvm.ptr) -> i32
    %6451 = "llvm.getelementptr"(%6449, %6450) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6452 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6453 = "llvm.getelementptr"(%6451, %6452) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6453) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArrayIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Pair", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Pair_field_Pair_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Pair_field_Pair_1"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Pair_getter_first", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Pair_setter_first", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Pair_field_first", "getter_name" = "Pair_getter_first", "setter_name" = "Pair_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Pair_getter_second", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Pair_setter_second", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Pair_field_second", "getter_name" = "Pair_getter_second", "setter_name" = "Pair_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb728(%6454 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6455 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6456 : !llvm.ptr, %6457 : !llvm.struct<(!llvm.ptr, i160)>, %6458 : !llvm.struct<(!llvm.ptr, i160)>):
    %6459 = "mini.wrap"(%6454) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %6460 = "mini.to_fat_ptr"(%6459) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Pair", "to_typ_name" = "Pair", "invariant"} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %6461 = "mini.wrap"(%6457) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Pair">
    %6462 = "mini.to_fat_ptr"(%6461) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Pair">) -> !mini.type_param<"T", !mini.any, "Pair">
    %6463 = "mini.to_fat_ptr"(%6462) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Pair">) -> !mini.type_param<"T", !mini.any, "Pair">
    "mini.set_field"(%6460, %6463) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>, !mini.type_param<"T", !mini.any, "Pair">) -> ()
    %6464 = "mini.wrap"(%6458) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"U", !mini.any, "Pair">
    %6465 = "mini.to_fat_ptr"(%6464) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "Pair">) -> !mini.type_param<"U", !mini.any, "Pair">
    %6466 = "mini.to_fat_ptr"(%6465) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "Pair">) -> !mini.type_param<"U", !mini.any, "Pair">
    "mini.set_field"(%6460, %6466) {"offset" = 3 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>, !mini.type_param<"U", !mini.any, "Pair">) -> ()
  }) {"func_name" = "Pair_init_firstT_secondU", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb729(%6467 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6468 : !llvm.ptr):
    %6469 = "mini.invariant"(%6468) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6470 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb730] : () -> ()
  ^bb731:
    %6471 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%6471, %6470) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb732] : () -> ()
  ^bb733:
    %6472 = "llvm.getelementptr"(%6468) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6473 = "llvm.load"(%6472) : (!llvm.ptr) -> !llvm.ptr
    %6474 = "llvm.getelementptr"(%6473) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6475 = "llvm.getelementptr"(%6473) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6476 = "llvm.getelementptr"(%6473) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6477 = "llvm.getelementptr"(%6473) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6478 = "llvm.load"(%6474) : (!llvm.ptr) -> i64
    %6479 = "llvm.load"(%6475) : (!llvm.ptr) -> i64
    %6480 = "llvm.load"(%6476) : (!llvm.ptr) -> !llvm.ptr
    %6481 = "llvm.load"(%6477) : (!llvm.ptr) -> !llvm.ptr
    %6482 = "mini.addr_of"() {"global_name" = @any_typ} : () -> !llvm.ptr
    %6483 = "llvm.ptrtoint"(%6482) : (!llvm.ptr) -> i64
    %6484 = "llvm.mlir.constant"() <{"value" = 3084208142191802847 : i64}> : () -> i64
    %6485 = "mini.subtype"(%6480, %6479, %6478, %6484, %6483, %6481) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6485) [^bb731, ^bb731] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb730:
    %6486 = "llvm.getelementptr"(%6468) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6487 = "llvm.load"(%6486) : (!llvm.ptr) -> !llvm.ptr
    %6488 = "llvm.getelementptr"(%6487) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6489 = "llvm.getelementptr"(%6487) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6490 = "llvm.getelementptr"(%6487) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6491 = "llvm.getelementptr"(%6487) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6492 = "llvm.load"(%6488) : (!llvm.ptr) -> i64
    %6493 = "llvm.load"(%6489) : (!llvm.ptr) -> i64
    %6494 = "llvm.load"(%6490) : (!llvm.ptr) -> !llvm.ptr
    %6495 = "llvm.load"(%6491) : (!llvm.ptr) -> !llvm.ptr
    %6496 = "mini.addr_of"() {"global_name" = @any_typ} : () -> !llvm.ptr
    %6497 = "llvm.ptrtoint"(%6496) : (!llvm.ptr) -> i64
    %6498 = "llvm.mlir.constant"() <{"value" = 3084208142191802847 : i64}> : () -> i64
    %6499 = "mini.subtype"(%6494, %6493, %6492, %6498, %6497, %6495) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6499) [^bb733, ^bb733] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb732:
    %6500 = "llvm.extractvalue"(%6467) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6501 = "llvm.load"(%6470) : (!llvm.ptr) -> i32
    %6502 = "llvm.getelementptr"(%6500, %6501) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6503 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6504 = "llvm.getelementptr"(%6502, %6503) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6504) : (!llvm.ptr) -> ()
  }) {"func_name" = "Pair_B_init_firstT_secondU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb734(%6505 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6506 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6507 : !llvm.ptr):
    %6508 = "mini.wrap"(%6505) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %6509 = "mini.to_fat_ptr"(%6508) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Pair", "to_typ_name" = "Pair", "invariant"} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %6510 = "mini.get_field"(%6509) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.type_param<"T", !mini.any, "Pair">
    %6511 = "mini.to_fat_ptr"(%6510) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Pair">) -> !mini.type_param<"T", !mini.any, "Pair">
    %6512 = "mini.to_fat_ptr"(%6511) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Pair">) -> !mini.type_param<"T", !mini.any, "Pair">
    "mini.return"(%6512) : (!mini.type_param<"T", !mini.any, "Pair">) -> ()
  }) {"func_name" = "Pair_first_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb735(%6513 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6514 : !llvm.ptr):
    %6515 = "mini.invariant"(%6514) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6516 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb736] : () -> ()
  ^bb736:
    %6517 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%6517, %6516) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb737] : () -> ()
  ^bb737:
    %6518 = "llvm.extractvalue"(%6513) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6519 = "llvm.load"(%6516) : (!llvm.ptr) -> i32
    %6520 = "llvm.getelementptr"(%6518, %6519) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6521 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6522 = "llvm.getelementptr"(%6520, %6521) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6522) : (!llvm.ptr) -> ()
  }) {"func_name" = "Pair_B_first_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb738(%6523 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6524 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6525 : !llvm.ptr):
    %6526 = "mini.wrap"(%6523) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %6527 = "mini.to_fat_ptr"(%6526) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Pair", "to_typ_name" = "Pair", "invariant"} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %6528 = "mini.get_field"(%6527) {"offset" = 3 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.type_param<"U", !mini.any, "Pair">
    %6529 = "mini.to_fat_ptr"(%6528) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "Pair">) -> !mini.type_param<"U", !mini.any, "Pair">
    %6530 = "mini.to_fat_ptr"(%6529) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "Pair">) -> !mini.type_param<"U", !mini.any, "Pair">
    "mini.return"(%6530) : (!mini.type_param<"U", !mini.any, "Pair">) -> ()
  }) {"func_name" = "Pair_second_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb739(%6531 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6532 : !llvm.ptr):
    %6533 = "mini.invariant"(%6532) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6534 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb740] : () -> ()
  ^bb740:
    %6535 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%6535, %6534) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb741] : () -> ()
  ^bb741:
    %6536 = "llvm.extractvalue"(%6531) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6537 = "llvm.load"(%6534) : (!llvm.ptr) -> i32
    %6538 = "llvm.getelementptr"(%6536, %6537) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6539 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6540 = "llvm.getelementptr"(%6538, %6539) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6540) : (!llvm.ptr) -> ()
  }) {"func_name" = "Pair_B_second_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Iterator2", "types" = [!llvm.ptr]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Iterator2_field_Iterator2_0"} : () -> ()
  "mini.func"() ({
  ^bb742(%6541 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6542 : !llvm.ptr):
    %6543 = "mini.invariant"(%6542) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6544 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb743] : () -> ()
  ^bb743:
    %6545 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%6545, %6544) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb744] : () -> ()
  ^bb744:
    %6546 = "llvm.extractvalue"(%6541) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6547 = "llvm.load"(%6544) : (!llvm.ptr) -> i32
    %6548 = "llvm.getelementptr"(%6546, %6547) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6549 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6550 = "llvm.getelementptr"(%6548, %6549) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6550) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Iterable2", "types" = [!llvm.ptr]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Iterable2_field_Iterable2_0"} : () -> ()
  "mini.func"() ({
  ^bb745(%6551 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6552 : !llvm.ptr):
    %6553 = "mini.invariant"(%6552) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6554 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb746] : () -> ()
  ^bb746:
    %6555 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%6555, %6554) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb747] : () -> ()
  ^bb747:
    %6556 = "llvm.extractvalue"(%6551) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6557 = "llvm.load"(%6554) : (!llvm.ptr) -> i32
    %6558 = "llvm.getelementptr"(%6556, %6557) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6559 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6560 = "llvm.getelementptr"(%6558, %6559) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6560) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb748(%6561 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6562 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6563 : !llvm.ptr, %6564 : !llvm.struct<(!llvm.ptr)>):
    %6565 = "mini.wrap"(%6561) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6566 = "mini.to_fat_ptr"(%6565) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6567 = "mini.wrap"(%6564) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.nothing>
    %6568 = builtin.unrealized_conversion_cast %6567 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.nothing> to !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.nothing>
    %6569 = "mini.unwrap"(%6566) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6570 = "mini.get_type_field"(%6566) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %6571 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6572 = "mini.method_call"(%6571, %6569) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6573 = "mini.to_fat_ptr"(%6572) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6574 = "mini.to_fat_ptr"(%6573) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6575 = "mini.refer"(%6574) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.while"() ({
      %6576 = "mini.unwrap"(%6575) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6577 = "mini.get_type_field"(%6566) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
      %6578 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %6579 = "mini.method_call"(%6578, %6576) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
      %6580 = builtin.unrealized_conversion_cast %6579 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>
      %6581 = "mini.checkflag"(%6580) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>) -> i1
      %6582 = "mini.unwrap"(%6581) : (i1) -> i1
    }, {
      %6583 = "mini.to_fat_ptr"(%6580) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %6584 = "mini.to_fat_ptr"(%6583) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %6585 = "mini.unwrap"(%6584) : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %6586 = "mini.unwrap"(%6568) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.nothing>) -> !llvm.ptr
      "mini.fptr_call"(%6586, %6585) {"ret_type" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%6580, %6583) ({
        %6587 = "mini.to_fat_ptr"(%6583) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>, !mini.type_param<"T", !mini.any, "Iterable2">) -> ()
    }) : () -> ()
  }) {"func_name" = "Iterable2_each_fFunctionT_to_Nothing", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb749(%6588 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6589 : !llvm.ptr):
    %6590 = "mini.invariant"(%6589) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6591 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb750] : () -> ()
  ^bb751:
    %6592 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%6592, %6591) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb752] : () -> ()
  ^bb750:
    %6593 = "llvm.getelementptr"(%6589) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6594 = "llvm.load"(%6593) : (!llvm.ptr) -> !llvm.ptr
    %6595 = "llvm.getelementptr"(%6594) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6596 = "llvm.getelementptr"(%6594) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6597 = "llvm.getelementptr"(%6594) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6598 = "llvm.getelementptr"(%6594) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6599 = "llvm.load"(%6595) : (!llvm.ptr) -> i64
    %6600 = "llvm.load"(%6596) : (!llvm.ptr) -> i64
    %6601 = "llvm.load"(%6597) : (!llvm.ptr) -> !llvm.ptr
    %6602 = "llvm.load"(%6598) : (!llvm.ptr) -> !llvm.ptr
    %6603 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6604 = "llvm.ptrtoint"(%6603) : (!llvm.ptr) -> i64
    %6605 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6606 = "mini.subtype"(%6601, %6600, %6599, %6605, %6604, %6602) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6606) [^bb751, ^bb751] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb752:
    %6607 = "llvm.extractvalue"(%6588) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6608 = "llvm.load"(%6591) : (!llvm.ptr) -> i32
    %6609 = "llvm.getelementptr"(%6607, %6608) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6610 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6611 = "llvm.getelementptr"(%6609, %6610) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6611) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb753(%6612 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6613 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6614 : !llvm.ptr, %6615 : !llvm.struct<(!llvm.ptr, i160)>, %6616 : !llvm.struct<(!llvm.ptr)>):
    %6617 = "mini.wrap"(%6612) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6618 = "mini.to_fat_ptr"(%6617) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6619 = "mini.wrap"(%6615) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Iterable2">
    %6620 = "mini.to_fat_ptr"(%6619) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
    %6621 = "mini.wrap"(%6616) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable2">>
    %6622 = builtin.unrealized_conversion_cast %6621 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable2">> to !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable2">>
    %6623 = "mini.unwrap"(%6618) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6624 = "mini.get_type_field"(%6618) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %6625 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6626 = "mini.method_call"(%6625, %6623) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6627 = "mini.to_fat_ptr"(%6626) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6628 = "mini.to_fat_ptr"(%6627) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6629 = "mini.refer"(%6628) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.while"() ({
      %6630 = "mini.unwrap"(%6629) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6631 = "mini.get_type_field"(%6618) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
      %6632 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %6633 = "mini.method_call"(%6632, %6630) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
      %6634 = builtin.unrealized_conversion_cast %6633 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>
      %6635 = "mini.checkflag"(%6634) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>) -> i1
      %6636 = "mini.unwrap"(%6635) : (i1) -> i1
    }, {
      %6637 = "mini.to_fat_ptr"(%6634) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %6638 = "mini.to_fat_ptr"(%6620) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %6639 = "mini.unwrap"(%6638) : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %6640 = "mini.to_fat_ptr"(%6637) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %6641 = "mini.unwrap"(%6640) : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %6642 = "mini.unwrap"(%6622) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable2">>) -> !llvm.ptr
      %6643 = "mini.fptr_call"(%6642, %6639, %6641) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Iterable2">
      "mini.castassign"(%6620, %6643) ({
        %6644 = "mini.to_fat_ptr"(%6643) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"T", !mini.any, "Iterable2">) -> ()
      "mini.castassign"(%6634, %6637) ({
        %6645 = "mini.to_fat_ptr"(%6637) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>, !mini.type_param<"T", !mini.any, "Iterable2">) -> ()
    }) : () -> ()
    %6646 = "mini.to_fat_ptr"(%6620) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
    "mini.return"(%6646) : (!mini.type_param<"T", !mini.any, "Iterable2">) -> ()
  }) {"func_name" = "Iterable2_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb754(%6647 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6648 : !llvm.ptr):
    %6649 = "mini.invariant"(%6648) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6650 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb755] : () -> ()
  ^bb756:
    %6651 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%6651, %6650) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb757] : () -> ()
  ^bb758:
    %6652 = "llvm.getelementptr"(%6648) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6653 = "llvm.load"(%6652) : (!llvm.ptr) -> !llvm.ptr
    %6654 = "llvm.getelementptr"(%6653) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6655 = "llvm.getelementptr"(%6653) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6656 = "llvm.getelementptr"(%6653) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6657 = "llvm.getelementptr"(%6653) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6658 = "llvm.load"(%6654) : (!llvm.ptr) -> i64
    %6659 = "llvm.load"(%6655) : (!llvm.ptr) -> i64
    %6660 = "llvm.load"(%6656) : (!llvm.ptr) -> !llvm.ptr
    %6661 = "llvm.load"(%6657) : (!llvm.ptr) -> !llvm.ptr
    %6662 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6663 = "llvm.ptrtoint"(%6662) : (!llvm.ptr) -> i64
    %6664 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6665 = "mini.subtype"(%6660, %6659, %6658, %6664, %6663, %6661) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6665) [^bb756, ^bb756] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb755:
    %6666 = "llvm.getelementptr"(%6648) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6667 = "llvm.load"(%6666) : (!llvm.ptr) -> !llvm.ptr
    %6668 = "llvm.getelementptr"(%6667) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6669 = "llvm.getelementptr"(%6667) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6670 = "llvm.getelementptr"(%6667) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6671 = "llvm.getelementptr"(%6667) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6672 = "llvm.load"(%6668) : (!llvm.ptr) -> i64
    %6673 = "llvm.load"(%6669) : (!llvm.ptr) -> i64
    %6674 = "llvm.load"(%6670) : (!llvm.ptr) -> !llvm.ptr
    %6675 = "llvm.load"(%6671) : (!llvm.ptr) -> !llvm.ptr
    %6676 = "mini.addr_of"() {"global_name" = @any_typ} : () -> !llvm.ptr
    %6677 = "llvm.ptrtoint"(%6676) : (!llvm.ptr) -> i64
    %6678 = "llvm.mlir.constant"() <{"value" = 3084208142191802847 : i64}> : () -> i64
    %6679 = "mini.subtype"(%6674, %6673, %6672, %6678, %6677, %6675) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6679) [^bb758, ^bb758] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb757:
    %6680 = "llvm.extractvalue"(%6647) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6681 = "llvm.load"(%6650) : (!llvm.ptr) -> i32
    %6682 = "llvm.getelementptr"(%6680, %6681) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6683 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6684 = "llvm.getelementptr"(%6682, %6683) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6684) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb759(%6685 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6686 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6687 : !llvm.ptr, %6688 : !llvm.struct<(!llvm.ptr)>):
    %6689 = "mini.wrap"(%6685) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6690 = "mini.to_fat_ptr"(%6689) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6691 = "mini.wrap"(%6688) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %6692 = builtin.unrealized_conversion_cast %6691 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %6693 = "mini.unwrap"(%6690) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6694 = "mini.get_type_field"(%6690) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %6695 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6696 = "mini.method_call"(%6695, %6693) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6697 = "mini.to_fat_ptr"(%6696) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6698 = "mini.to_fat_ptr"(%6697) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6699 = "mini.refer"(%6698) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.while"() ({
      %6700 = "mini.unwrap"(%6699) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6701 = "mini.get_type_field"(%6690) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
      %6702 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %6703 = "mini.method_call"(%6702, %6700) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
      %6704 = builtin.unrealized_conversion_cast %6703 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>
      %6705 = "mini.checkflag"(%6704) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>) -> i1
      %6706 = "mini.unwrap"(%6705) : (i1) -> i1
    }, {
      %6707 = "mini.to_fat_ptr"(%6704) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %6708 = "mini.to_fat_ptr"(%6707) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %6709 = "mini.unwrap"(%6708) : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %6710 = "mini.unwrap"(%6692) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %6711 = "mini.fptr_call"(%6710, %6709) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.ptr<i1>
      %6712 = "mini.unwrap"(%6711) : (!mini.ptr<i1>) -> i1
      "mini.if"(%6712) ({
        "mini.continue"() [^bb760] : () -> ()
      }) : (i1) -> ()
      %6713 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %6714 = builtin.unrealized_conversion_cast %6713 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.return"(%6714) : (!mini.ptr<i1>) -> ()
      "mini.castassign"(%6704, %6707) ({
        %6715 = "mini.to_fat_ptr"(%6707) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>, !mini.type_param<"T", !mini.any, "Iterable2">) -> ()
    }) : () -> ()
    %6716 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %6717 = builtin.unrealized_conversion_cast %6716 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%6717) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "Iterable2_all_fFunctionT_to_Ptri1", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb761(%6718 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6719 : !llvm.ptr):
    %6720 = "mini.invariant"(%6719) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6721 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb762] : () -> ()
  ^bb763:
    %6722 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%6722, %6721) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb764] : () -> ()
  ^bb762:
    %6723 = "llvm.getelementptr"(%6719) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6724 = "llvm.load"(%6723) : (!llvm.ptr) -> !llvm.ptr
    %6725 = "llvm.getelementptr"(%6724) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6726 = "llvm.getelementptr"(%6724) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6727 = "llvm.getelementptr"(%6724) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6728 = "llvm.getelementptr"(%6724) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6729 = "llvm.load"(%6725) : (!llvm.ptr) -> i64
    %6730 = "llvm.load"(%6726) : (!llvm.ptr) -> i64
    %6731 = "llvm.load"(%6727) : (!llvm.ptr) -> !llvm.ptr
    %6732 = "llvm.load"(%6728) : (!llvm.ptr) -> !llvm.ptr
    %6733 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6734 = "llvm.ptrtoint"(%6733) : (!llvm.ptr) -> i64
    %6735 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6736 = "mini.subtype"(%6731, %6730, %6729, %6735, %6734, %6732) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6736) [^bb763, ^bb763] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb764:
    %6737 = "llvm.extractvalue"(%6718) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6738 = "llvm.load"(%6721) : (!llvm.ptr) -> i32
    %6739 = "llvm.getelementptr"(%6737, %6738) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6740 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6741 = "llvm.getelementptr"(%6739, %6740) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6741) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb765(%6742 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6743 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6744 : !llvm.ptr, %6745 : !llvm.struct<(!llvm.ptr)>):
    %6746 = "mini.wrap"(%6742) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6747 = "mini.to_fat_ptr"(%6746) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6748 = "mini.wrap"(%6745) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %6749 = builtin.unrealized_conversion_cast %6748 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %6750 = "mini.unwrap"(%6747) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6751 = "mini.get_type_field"(%6747) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %6752 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6753 = "mini.method_call"(%6752, %6750) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6754 = "mini.to_fat_ptr"(%6753) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6755 = "mini.to_fat_ptr"(%6754) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6756 = "mini.refer"(%6755) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.while"() ({
      %6757 = "mini.unwrap"(%6756) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6758 = "mini.get_type_field"(%6747) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
      %6759 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %6760 = "mini.method_call"(%6759, %6757) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
      %6761 = builtin.unrealized_conversion_cast %6760 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>
      %6762 = "mini.checkflag"(%6761) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>) -> i1
      %6763 = "mini.unwrap"(%6762) : (i1) -> i1
    }, {
      %6764 = "mini.to_fat_ptr"(%6761) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %6765 = "mini.to_fat_ptr"(%6764) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      %6766 = "mini.unwrap"(%6765) : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %6767 = "mini.unwrap"(%6749) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %6768 = "mini.fptr_call"(%6767, %6766) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.ptr<i1>
      %6769 = "mini.unwrap"(%6768) : (!mini.ptr<i1>) -> i1
      "mini.if"(%6769) ({
        %6770 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
        %6771 = builtin.unrealized_conversion_cast %6770 : !mini.ptr<i1> to !mini.ptr<i1>
        "mini.return"(%6771) : (!mini.ptr<i1>) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%6761, %6764) ({
        %6772 = "mini.to_fat_ptr"(%6764) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable2">) -> !mini.type_param<"T", !mini.any, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Iterable2">]>, !mini.type_param<"T", !mini.any, "Iterable2">) -> ()
    }) : () -> ()
    %6773 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %6774 = builtin.unrealized_conversion_cast %6773 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%6774) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "Iterable2_any_fFunctionT_to_Ptri1", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb766(%6775 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6776 : !llvm.ptr):
    %6777 = "mini.invariant"(%6776) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6778 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb767] : () -> ()
  ^bb768:
    %6779 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%6779, %6778) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb769] : () -> ()
  ^bb767:
    %6780 = "llvm.getelementptr"(%6776) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6781 = "llvm.load"(%6780) : (!llvm.ptr) -> !llvm.ptr
    %6782 = "llvm.getelementptr"(%6781) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6783 = "llvm.getelementptr"(%6781) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6784 = "llvm.getelementptr"(%6781) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6785 = "llvm.getelementptr"(%6781) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6786 = "llvm.load"(%6782) : (!llvm.ptr) -> i64
    %6787 = "llvm.load"(%6783) : (!llvm.ptr) -> i64
    %6788 = "llvm.load"(%6784) : (!llvm.ptr) -> !llvm.ptr
    %6789 = "llvm.load"(%6785) : (!llvm.ptr) -> !llvm.ptr
    %6790 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6791 = "llvm.ptrtoint"(%6790) : (!llvm.ptr) -> i64
    %6792 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6793 = "mini.subtype"(%6788, %6787, %6786, %6792, %6791, %6789) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6793) [^bb768, ^bb768] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb769:
    %6794 = "llvm.extractvalue"(%6775) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6795 = "llvm.load"(%6778) : (!llvm.ptr) -> i32
    %6796 = "llvm.getelementptr"(%6794, %6795) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6797 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6798 = "llvm.getelementptr"(%6796, %6797) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6798) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb770(%6799 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6800 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6801 : !llvm.ptr, %6802 : !llvm.struct<(!llvm.ptr)>):
    %6803 = "mini.wrap"(%6799) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6804 = "mini.to_fat_ptr"(%6803) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6805 = "mini.wrap"(%6802) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable2">>
    %6806 = builtin.unrealized_conversion_cast %6805 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable2">> to !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable2">>
    %6807 = "mini.unwrap"(%6804) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6808 = "mini.unwrap"(%6806) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable2">>) -> !llvm.struct<(!llvm.ptr)>
    %6809 = "mini.get_type_field"(%6804) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %6810 = "llvm.getelementptr"(%6801) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6811 = "llvm.load"(%6810) : (!llvm.ptr) -> !llvm.ptr
    %6812 = "mini.parameterization_indexation"(%6811) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
    %6813 = "mini.parameterization"(%6809, %6812) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["Iterable2.T_subtype_Any"]} : (!mini.reified_type, !llvm.ptr) -> !llvm.ptr
    %6814 = "mini.parameterization"(%6809, %6812) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["Iterable2.U_subtype_Any"]} : (!mini.reified_type, !llvm.ptr) -> !llvm.ptr
    %6815 = "mini.new"(%6813, %6814) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterable2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>
    %6816 = "mini.to_fat_ptr"(%6804) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    %6817 = "mini.unwrap"(%6816) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6818 = builtin.unrealized_conversion_cast %6806 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable2">> to !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>
    %6819 = "mini.unwrap"(%6818) : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>) -> !llvm.struct<(!llvm.ptr)>
    %6820 = "mini.unwrap"(%6815) : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6821 = "mini.get_type_field"(%6804) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %6822 = "llvm.getelementptr"(%6801) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6823 = "llvm.load"(%6822) : (!llvm.ptr) -> !llvm.ptr
    %6824 = "mini.parameterization_indexation"(%6823) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
    %6825 = "mini.parameterization"(%6821, %6824) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Any", ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type, !llvm.ptr) -> !llvm.ptr
    %6826 = "mini.parameterization"(%6821, %6824) {"id_hierarchy" = ["function_typ", [1 : i32], [0 : i32]], "name_hierarchy" = ["FunctionIterable2.T_subtype_Any_to_Iterable2.U_subtype_Any", ["Iterable2.U_subtype_Any"], ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type, !llvm.ptr) -> !llvm.ptr
    %6827 = "mini.parameterizations_array"(%6825, %6826) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6827, %6820, %6817, %6819) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 51 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %6828 = "mini.to_fat_ptr"(%6815) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>
    "mini.return"(%6828) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_map_fFunctionT_to_U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb771(%6829 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6830 : !llvm.ptr):
    %6831 = "mini.invariant"(%6830) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6832 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb772] : () -> ()
  ^bb773:
    %6833 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%6833, %6832) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb774] : () -> ()
  ^bb772:
    %6834 = "llvm.getelementptr"(%6830) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6835 = "llvm.load"(%6834) : (!llvm.ptr) -> !llvm.ptr
    %6836 = "llvm.getelementptr"(%6835) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6837 = "llvm.getelementptr"(%6835) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6838 = "llvm.getelementptr"(%6835) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6839 = "llvm.getelementptr"(%6835) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6840 = "llvm.load"(%6836) : (!llvm.ptr) -> i64
    %6841 = "llvm.load"(%6837) : (!llvm.ptr) -> i64
    %6842 = "llvm.load"(%6838) : (!llvm.ptr) -> !llvm.ptr
    %6843 = "llvm.load"(%6839) : (!llvm.ptr) -> !llvm.ptr
    %6844 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6845 = "llvm.ptrtoint"(%6844) : (!llvm.ptr) -> i64
    %6846 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6847 = "mini.subtype"(%6842, %6841, %6840, %6846, %6845, %6843) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6847) [^bb773, ^bb773] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb774:
    %6848 = "llvm.extractvalue"(%6829) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6849 = "llvm.load"(%6832) : (!llvm.ptr) -> i32
    %6850 = "llvm.getelementptr"(%6848, %6849) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6851 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6852 = "llvm.getelementptr"(%6850, %6851) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6852) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb775(%6853 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6854 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6855 : !llvm.ptr, %6856 : !llvm.struct<(!llvm.ptr)>):
    %6857 = "mini.wrap"(%6853) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6858 = "mini.to_fat_ptr"(%6857) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6859 = "mini.wrap"(%6856) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %6860 = builtin.unrealized_conversion_cast %6859 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %6861 = "mini.unwrap"(%6858) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6862 = "mini.unwrap"(%6860) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %6863 = "mini.get_type_field"(%6858) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %6864 = "mini.parameterization"(%6863) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["Iterable2.T_subtype_Any"]} : (!mini.reified_type) -> !llvm.ptr
    %6865 = "mini.new"(%6864) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterable2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6866 = "mini.to_fat_ptr"(%6858) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %6867 = "mini.unwrap"(%6866) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6868 = builtin.unrealized_conversion_cast %6860 : !mini.function<[!mini.type_param<"T", !mini.any, "Iterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %6869 = "mini.unwrap"(%6868) : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %6870 = "mini.unwrap"(%6865) : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6871 = "mini.get_type_field"(%6858) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %6872 = "mini.parameterization"(%6871) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Any", ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %6873 = "mini.parameterization"(%6871) {"id_hierarchy" = ["function_typ", ["bool_typ"], [0 : i32]], "name_hierarchy" = ["FunctionIterable2.T_subtype_Any_to_Ptri1", ["Ptri1"], ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %6874 = "mini.parameterizations_array"(%6872, %6873) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6874, %6870, %6867, %6869) {"offset" = 3 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 50 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %6875 = "mini.to_fat_ptr"(%6865) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%6875) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb776(%6876 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6877 : !llvm.ptr):
    %6878 = "mini.invariant"(%6877) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6879 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb777] : () -> ()
  ^bb778:
    %6880 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%6880, %6879) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb779] : () -> ()
  ^bb777:
    %6881 = "llvm.getelementptr"(%6877) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6882 = "llvm.load"(%6881) : (!llvm.ptr) -> !llvm.ptr
    %6883 = "llvm.getelementptr"(%6882) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6884 = "llvm.getelementptr"(%6882) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6885 = "llvm.getelementptr"(%6882) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6886 = "llvm.getelementptr"(%6882) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6887 = "llvm.load"(%6883) : (!llvm.ptr) -> i64
    %6888 = "llvm.load"(%6884) : (!llvm.ptr) -> i64
    %6889 = "llvm.load"(%6885) : (!llvm.ptr) -> !llvm.ptr
    %6890 = "llvm.load"(%6886) : (!llvm.ptr) -> !llvm.ptr
    %6891 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6892 = "llvm.ptrtoint"(%6891) : (!llvm.ptr) -> i64
    %6893 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6894 = "mini.subtype"(%6889, %6888, %6887, %6893, %6892, %6890) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6894) [^bb778, ^bb778] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb779:
    %6895 = "llvm.extractvalue"(%6876) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6896 = "llvm.load"(%6879) : (!llvm.ptr) -> i32
    %6897 = "llvm.getelementptr"(%6895, %6896) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6898 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6899 = "llvm.getelementptr"(%6897, %6898) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6899) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb780(%6900 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6901 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6902 : !llvm.ptr, %6903 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6904 = "mini.wrap"(%6900) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6905 = "mini.to_fat_ptr"(%6904) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6906 = "mini.wrap"(%6903) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6907 = "mini.to_fat_ptr"(%6906) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6908 = "mini.unwrap"(%6905) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6909 = "mini.unwrap"(%6907) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6910 = "mini.get_type_field"(%6905) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %6911 = "mini.parameterization"(%6910) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["Iterable2.T_subtype_Any"]} : (!mini.reified_type) -> !llvm.ptr
    %6912 = "mini.new"(%6911) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ChainIterable2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6913 = "mini.to_fat_ptr"(%6905) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6914 = "mini.unwrap"(%6913) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6915 = "mini.to_fat_ptr"(%6907) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %6916 = "mini.unwrap"(%6915) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6917 = "mini.unwrap"(%6912) : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6918 = "mini.get_type_field"(%6905) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %6919 = "mini.parameterization"(%6918) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Any", ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %6920 = "mini.parameterization"(%6918) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Any", ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %6921 = "mini.parameterizations_array"(%6919, %6920) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6921, %6917, %6914, %6916) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 50 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %6922 = "mini.to_fat_ptr"(%6912) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%6922) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_chain_otherIterable2T", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb781(%6923 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6924 : !llvm.ptr):
    %6925 = "mini.invariant"(%6924) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6926 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb782] : () -> ()
  ^bb783:
    %6927 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%6927, %6926) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb784] : () -> ()
  ^bb782:
    %6928 = "llvm.getelementptr"(%6924) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6929 = "llvm.load"(%6928) : (!llvm.ptr) -> !llvm.ptr
    %6930 = "llvm.getelementptr"(%6929) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6931 = "llvm.getelementptr"(%6929) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6932 = "llvm.getelementptr"(%6929) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6933 = "llvm.getelementptr"(%6929) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6934 = "llvm.load"(%6930) : (!llvm.ptr) -> i64
    %6935 = "llvm.load"(%6931) : (!llvm.ptr) -> i64
    %6936 = "llvm.load"(%6932) : (!llvm.ptr) -> !llvm.ptr
    %6937 = "llvm.load"(%6933) : (!llvm.ptr) -> !llvm.ptr
    %6938 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %6939 = "llvm.ptrtoint"(%6938) : (!llvm.ptr) -> i64
    %6940 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %6941 = "mini.subtype"(%6936, %6935, %6934, %6940, %6939, %6937) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6941) [^bb783, ^bb783] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb784:
    %6942 = "llvm.extractvalue"(%6923) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6943 = "llvm.load"(%6926) : (!llvm.ptr) -> i32
    %6944 = "llvm.getelementptr"(%6942, %6943) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6945 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6946 = "llvm.getelementptr"(%6944, %6945) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6946) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb785(%6947 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6948 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6949 : !llvm.ptr, %6950 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6951 = "mini.wrap"(%6947) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6952 = "mini.to_fat_ptr"(%6951) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6953 = "mini.wrap"(%6950) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6954 = "mini.to_fat_ptr"(%6953) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6955 = "mini.unwrap"(%6952) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6956 = "mini.unwrap"(%6954) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6957 = "mini.get_type_field"(%6952) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %6958 = "mini.parameterization"(%6957) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["Iterable2.T_subtype_Any"]} : (!mini.reified_type) -> !llvm.ptr
    %6959 = "mini.new"(%6958) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "InterleaveIterable2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6960 = "mini.to_fat_ptr"(%6952) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6961 = "mini.unwrap"(%6960) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6962 = "mini.to_fat_ptr"(%6954) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %6963 = "mini.unwrap"(%6962) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6964 = "mini.unwrap"(%6959) : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6965 = "mini.get_type_field"(%6952) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %6966 = "mini.parameterization"(%6965) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Any", ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %6967 = "mini.parameterization"(%6965) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Any", ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %6968 = "mini.parameterizations_array"(%6966, %6967) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6968, %6964, %6961, %6963) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 50 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %6969 = "mini.to_fat_ptr"(%6959) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%6969) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_interleave_otherIterable2T", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb786(%6970 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6971 : !llvm.ptr):
    %6972 = "mini.invariant"(%6971) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6973 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb787] : () -> ()
  ^bb788:
    %6974 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%6974, %6973) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb789] : () -> ()
  ^bb787:
    %6975 = "llvm.getelementptr"(%6971) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %6976 = "llvm.load"(%6975) : (!llvm.ptr) -> !llvm.ptr
    %6977 = "llvm.getelementptr"(%6976) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6978 = "llvm.getelementptr"(%6976) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6979 = "llvm.getelementptr"(%6976) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6980 = "llvm.getelementptr"(%6976) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6981 = "llvm.load"(%6977) : (!llvm.ptr) -> i64
    %6982 = "llvm.load"(%6978) : (!llvm.ptr) -> i64
    %6983 = "llvm.load"(%6979) : (!llvm.ptr) -> !llvm.ptr
    %6984 = "llvm.load"(%6980) : (!llvm.ptr) -> !llvm.ptr
    %6985 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %6986 = "llvm.ptrtoint"(%6985) : (!llvm.ptr) -> i64
    %6987 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %6988 = "mini.subtype"(%6983, %6982, %6981, %6987, %6986, %6984) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6988) [^bb788, ^bb788] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb789:
    %6989 = "llvm.extractvalue"(%6970) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6990 = "llvm.load"(%6973) : (!llvm.ptr) -> i32
    %6991 = "llvm.getelementptr"(%6989, %6990) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6992 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %6993 = "llvm.getelementptr"(%6991, %6992) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6993) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb790(%6994 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6995 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6996 : !llvm.ptr, %6997 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6998 = "mini.wrap"(%6994) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %6999 = "mini.to_fat_ptr"(%6998) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %7000 = "mini.wrap"(%6997) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>
    %7001 = "mini.to_fat_ptr"(%7000) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>
    %7002 = "mini.unwrap"(%6999) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7003 = "mini.unwrap"(%7001) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7004 = "mini.get_type_field"(%6999) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %7005 = "mini.wrap"(%6997) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7006 = "mini.get_type_field"(%7005) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %7007 = "mini.parameterization"(%7004, %7006) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["Iterable2.T_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %7008 = "mini.parameterization"(%7004, %7006) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["Iterable2.U_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %7009 = "mini.parameterization"(%7004, %7006) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairIterable2.T_subtype_Any._Iterable2.U_subtype_Any", ["Iterable2.T_subtype_Any"], ["Iterable2.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %7010 = "mini.new"(%7007, %7008, %7009) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterable2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>
    %7011 = "mini.to_fat_ptr"(%6999) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    %7012 = "mini.unwrap"(%7011) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7013 = "mini.to_fat_ptr"(%7001) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %7014 = "mini.unwrap"(%7013) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7015 = "mini.unwrap"(%7010) : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7016 = "mini.get_type_field"(%6999) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %7017 = "mini.wrap"(%6997) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7018 = "mini.get_type_field"(%7017) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %7019 = "mini.parameterization"(%7016, %7018) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Any", ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %7020 = "mini.parameterization"(%7016, %7018) {"id_hierarchy" = ["Iterable2", [1 : i32]], "name_hierarchy" = ["Iterable2Iterable2.U_subtype_Any", ["Iterable2.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %7021 = "mini.parameterizations_array"(%7019, %7020) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7021, %7015, %7012, %7014) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7022 = "mini.to_fat_ptr"(%7010) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable2", "to_typ_name" = "ZipIterable2", "invariant"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>
    "mini.return"(%7022) : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_zip_otherIterable2U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb791(%7023 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7024 : !llvm.ptr):
    %7025 = "mini.invariant"(%7024) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7026 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb792] : () -> ()
  ^bb793:
    %7027 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%7027, %7026) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb794] : () -> ()
  ^bb792:
    %7028 = "llvm.getelementptr"(%7024) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7029 = "llvm.load"(%7028) : (!llvm.ptr) -> !llvm.ptr
    %7030 = "llvm.getelementptr"(%7029) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7031 = "llvm.getelementptr"(%7029) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7032 = "llvm.getelementptr"(%7029) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7033 = "llvm.getelementptr"(%7029) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7034 = "llvm.load"(%7030) : (!llvm.ptr) -> i64
    %7035 = "llvm.load"(%7031) : (!llvm.ptr) -> i64
    %7036 = "llvm.load"(%7032) : (!llvm.ptr) -> !llvm.ptr
    %7037 = "llvm.load"(%7033) : (!llvm.ptr) -> !llvm.ptr
    %7038 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %7039 = "llvm.ptrtoint"(%7038) : (!llvm.ptr) -> i64
    %7040 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %7041 = "mini.subtype"(%7036, %7035, %7034, %7040, %7039, %7037) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7041) [^bb793, ^bb793] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb794:
    %7042 = "llvm.extractvalue"(%7023) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7043 = "llvm.load"(%7026) : (!llvm.ptr) -> i32
    %7044 = "llvm.getelementptr"(%7042, %7043) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7045 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7046 = "llvm.getelementptr"(%7044, %7045) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7046) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb795(%7047 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7048 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7049 : !llvm.ptr, %7050 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7051 = "mini.wrap"(%7047) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %7052 = "mini.to_fat_ptr"(%7051) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %7053 = "mini.wrap"(%7050) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>
    %7054 = "mini.to_fat_ptr"(%7053) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>
    %7055 = "mini.unwrap"(%7052) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7056 = "mini.unwrap"(%7054) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7057 = "mini.get_type_field"(%7052) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %7058 = "mini.wrap"(%7050) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7059 = "mini.get_type_field"(%7058) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %7060 = "mini.parameterization"(%7057, %7059) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["Iterable2.T_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %7061 = "mini.parameterization"(%7057, %7059) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["Iterable2.U_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %7062 = "mini.parameterization"(%7057, %7059) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairIterable2.T_subtype_Any._Iterable2.U_subtype_Any", ["Iterable2.T_subtype_Any"], ["Iterable2.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %7063 = "mini.new"(%7060, %7061, %7062) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ProductIterable2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>
    %7064 = "mini.to_fat_ptr"(%7052) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>
    %7065 = "mini.unwrap"(%7064) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7066 = "mini.to_fat_ptr"(%7054) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %7067 = "mini.unwrap"(%7066) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7068 = "mini.unwrap"(%7063) : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7069 = "mini.get_type_field"(%7052) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.reified_type
    %7070 = "mini.wrap"(%7050) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7071 = "mini.get_type_field"(%7070) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %7072 = "mini.parameterization"(%7069, %7071) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Any", ["Iterable2.T_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %7073 = "mini.parameterization"(%7069, %7071) {"id_hierarchy" = ["Iterable2", [1 : i32]], "name_hierarchy" = ["Iterable2Iterable2.U_subtype_Any", ["Iterable2.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %7074 = "mini.parameterizations_array"(%7072, %7073) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7074, %7068, %7065, %7067) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7075 = "mini.to_fat_ptr"(%7063) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable2", "to_typ_name" = "ProductIterable2", "invariant"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>
    "mini.return"(%7075) : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "Iterable2">, !mini.type_param<"U", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_product_otherIterable2U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb796(%7076 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7077 : !llvm.ptr):
    %7078 = "mini.invariant"(%7077) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7079 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb797] : () -> ()
  ^bb798:
    %7080 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%7080, %7079) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb799] : () -> ()
  ^bb797:
    %7081 = "llvm.getelementptr"(%7077) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7082 = "llvm.load"(%7081) : (!llvm.ptr) -> !llvm.ptr
    %7083 = "llvm.getelementptr"(%7082) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7084 = "llvm.getelementptr"(%7082) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7085 = "llvm.getelementptr"(%7082) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7086 = "llvm.getelementptr"(%7082) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7087 = "llvm.load"(%7083) : (!llvm.ptr) -> i64
    %7088 = "llvm.load"(%7084) : (!llvm.ptr) -> i64
    %7089 = "llvm.load"(%7085) : (!llvm.ptr) -> !llvm.ptr
    %7090 = "llvm.load"(%7086) : (!llvm.ptr) -> !llvm.ptr
    %7091 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %7092 = "llvm.ptrtoint"(%7091) : (!llvm.ptr) -> i64
    %7093 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %7094 = "mini.subtype"(%7089, %7088, %7087, %7093, %7092, %7090) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7094) [^bb798, ^bb798] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb799:
    %7095 = "llvm.extractvalue"(%7076) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7096 = "llvm.load"(%7079) : (!llvm.ptr) -> i32
    %7097 = "llvm.getelementptr"(%7095, %7096) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7098 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7099 = "llvm.getelementptr"(%7097, %7098) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7099) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Array_field_Array_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Array_getter_buffer", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferT"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Array_setter_buffer", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferT"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Array_field_buffer", "getter_name" = "Array_getter_buffer", "setter_name" = "Array_setter_buffer"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Array_getter_length", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Array_setter_length", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Array_field_length", "getter_name" = "Array_getter_length", "setter_name" = "Array_setter_length"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Array_getter_capacity", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Array_setter_capacity", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Array_field_capacity", "getter_name" = "Array_getter_capacity", "setter_name" = "Array_setter_capacity"} : () -> ()
  "mini.func"() ({
  ^bb800(%7100 : !llvm.ptr, %7101 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7102 = "mini.wrap"(%7101) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Array">]>
    %7103 = "mini.to_fat_ptr"(%7102) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Array">]>
    %7104 = "mini.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T_subtype_Any"]} : () -> !llvm.ptr
    %7105 = "mini.new"(%7104) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7106 = "mini.unwrap"(%7105) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7107 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%7107, %7106) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 69 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7108 = "mini.to_fat_ptr"(%7105) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7109 = "mini.refer"(%7108) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7110 = "mini.unwrap"(%7103) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7111 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7112 = "mini.method_call"(%7111, %7110) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %7113 = "mini.to_fat_ptr"(%7112) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Array">]>
    %7114 = "mini.to_fat_ptr"(%7113) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Array">]>
    %7115 = "mini.refer"(%7114) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Array">]>
    "mini.while"() ({
      %7116 = "mini.unwrap"(%7115) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7117 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %7118 = "mini.method_call"(%7117, %7116) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
      %7119 = builtin.unrealized_conversion_cast %7118 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "Array">, !mini.nil]>
      %7120 = "mini.checkflag"(%7119) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Array">, !mini.nil]>) -> i1
      %7121 = "mini.unwrap"(%7120) : (i1) -> i1
    }, {
      %7122 = "mini.to_fat_ptr"(%7119) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Array">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "Array">
      %7123 = "mini.to_fat_ptr"(%7122) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
      %7124 = "mini.unwrap"(%7123) : (!mini.type_param<"T", !mini.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
      %7125 = "mini.unwrap"(%7109) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7126 = "mini.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T_subtype_Any"]} : () -> !llvm.ptr
      %7127 = "mini.parameterizations_array"(%7126) : (!llvm.ptr) -> !llvm.ptr
      %7128 = "mini.method_call"(%7127, %7125, %7124) {"offset" = 9 : i32, "vptrs" = ["any_typ"], "vtable_size" = 69 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
      %7129 = "mini.to_fat_ptr"(%7128) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
      "mini.castassign"(%7119, %7122) ({
        %7130 = "mini.to_fat_ptr"(%7122) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Array">, !mini.nil]>, !mini.type_param<"T", !mini.any, "Array">) -> ()
    }) : () -> ()
    %7131 = "mini.to_fat_ptr"(%7109) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    "mini.return"(%7131) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> ()
  }) {"func_name" = "Array__Self_from_iterable_iterableIterable2T", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb801(%7132 : !llvm.ptr):
    %7133 = "mini.invariant"(%7132) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7134 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb802] : () -> ()
  ^bb803:
    %7135 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%7135, %7134) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb804] : () -> ()
  ^bb802:
    %7136 = "llvm.getelementptr"(%7132) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7137 = "llvm.load"(%7136) : (!llvm.ptr) -> !llvm.ptr
    %7138 = "llvm.getelementptr"(%7137) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7139 = "llvm.getelementptr"(%7137) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7140 = "llvm.getelementptr"(%7137) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7141 = "llvm.getelementptr"(%7137) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7142 = "llvm.load"(%7138) : (!llvm.ptr) -> i64
    %7143 = "llvm.load"(%7139) : (!llvm.ptr) -> i64
    %7144 = "llvm.load"(%7140) : (!llvm.ptr) -> !llvm.ptr
    %7145 = "llvm.load"(%7141) : (!llvm.ptr) -> !llvm.ptr
    %7146 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %7147 = "llvm.ptrtoint"(%7146) : (!llvm.ptr) -> i64
    %7148 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %7149 = "mini.subtype"(%7144, %7143, %7142, %7148, %7147, %7145) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7149) [^bb803, ^bb803] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb804:
    %7150 = "mini.addr_of"() {"global_name" = @Array} : () -> !llvm.ptr
    %7151 = "llvm.load"(%7134) : (!llvm.ptr) -> i32
    %7152 = "llvm.getelementptr"(%7150, %7151) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7153 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7154 = "llvm.getelementptr"(%7152, %7153) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7154) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B__Self_from_iterable_iterableIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb805(%7155 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7156 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7157 : !llvm.ptr):
    %7158 = "mini.wrap"(%7155) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7159 = "mini.to_fat_ptr"(%7158) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7160 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7161 = "mini.create_buffer"(%7160) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7162 = builtin.unrealized_conversion_cast %7161 : !llvm.ptr to !mini.buffer<!mini.fatptr<"T">>
    "mini.set_field"(%7159, %7162) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.buffer<!mini.fatptr<"T">>) -> ()
    %7163 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7164 = builtin.unrealized_conversion_cast %7163 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%7159, %7164) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %7165 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7166 = builtin.unrealized_conversion_cast %7165 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%7159, %7166) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb806(%7167 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7168 : !llvm.ptr):
    %7169 = "mini.invariant"(%7168) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7170 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb807] : () -> ()
  ^bb807:
    %7171 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%7171, %7170) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb808] : () -> ()
  ^bb808:
    %7172 = "llvm.extractvalue"(%7167) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7173 = "llvm.load"(%7170) : (!llvm.ptr) -> i32
    %7174 = "llvm.getelementptr"(%7172, %7173) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7175 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7176 = "llvm.getelementptr"(%7174, %7175) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7176) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb809(%7177 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7178 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7179 : !llvm.ptr, %7180 : i32):
    %7181 = "mini.wrap"(%7177) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7182 = "mini.to_fat_ptr"(%7181) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7183 = "mini.wrap"(%7180) : (i32) -> !mini.ptr<i32>
    %7184 = builtin.unrealized_conversion_cast %7183 : !mini.ptr<i32> to !mini.ptr<i32>
    %7185 = builtin.unrealized_conversion_cast %7184 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%7182, %7185) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %7186 = "mini.get_field"(%7182) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %7187 = "mini.create_buffer"(%7186) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7188 = builtin.unrealized_conversion_cast %7187 : !llvm.ptr to !mini.buffer<!mini.fatptr<"T">>
    "mini.set_field"(%7182, %7188) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.buffer<!mini.fatptr<"T">>) -> ()
    %7189 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7190 = builtin.unrealized_conversion_cast %7189 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%7182, %7190) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_init_capacityPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb810(%7191 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7192 : !llvm.ptr):
    %7193 = "mini.invariant"(%7192) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7194 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb811] : () -> ()
  ^bb812:
    %7195 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%7195, %7194) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb813] : () -> ()
  ^bb811:
    %7196 = "llvm.getelementptr"(%7192) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7197 = "llvm.load"(%7196) : (!llvm.ptr) -> !llvm.ptr
    %7198 = "llvm.getelementptr"(%7197) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7199 = "llvm.getelementptr"(%7197) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7200 = "llvm.getelementptr"(%7197) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7201 = "llvm.getelementptr"(%7197) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7202 = "llvm.load"(%7198) : (!llvm.ptr) -> i64
    %7203 = "llvm.load"(%7199) : (!llvm.ptr) -> i64
    %7204 = "llvm.load"(%7200) : (!llvm.ptr) -> !llvm.ptr
    %7205 = "llvm.load"(%7201) : (!llvm.ptr) -> !llvm.ptr
    %7206 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %7207 = "llvm.ptrtoint"(%7206) : (!llvm.ptr) -> i64
    %7208 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %7209 = "mini.subtype"(%7204, %7203, %7202, %7208, %7207, %7205) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7209) [^bb812, ^bb812] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb813:
    %7210 = "llvm.extractvalue"(%7191) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7211 = "llvm.load"(%7194) : (!llvm.ptr) -> i32
    %7212 = "llvm.getelementptr"(%7210, %7211) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7213 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7214 = "llvm.getelementptr"(%7212, %7213) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7214) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_init_capacityPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb814(%7215 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7216 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7217 : !llvm.ptr):
    %7218 = "mini.wrap"(%7215) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7219 = "mini.to_fat_ptr"(%7218) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7220 = "mini.get_field"(%7219) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %7221 = builtin.unrealized_conversion_cast %7220 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%7221) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_length_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb815(%7222 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7223 : !llvm.ptr):
    %7224 = "mini.invariant"(%7223) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7225 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb816] : () -> ()
  ^bb816:
    %7226 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%7226, %7225) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb817] : () -> ()
  ^bb817:
    %7227 = "llvm.extractvalue"(%7222) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7228 = "llvm.load"(%7225) : (!llvm.ptr) -> i32
    %7229 = "llvm.getelementptr"(%7227, %7228) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7230 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7231 = "llvm.getelementptr"(%7229, %7230) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7231) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_length_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb818(%7232 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7233 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7234 : !llvm.ptr):
    %7235 = "mini.wrap"(%7232) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7236 = "mini.to_fat_ptr"(%7235) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7237 = "mini.get_field"(%7236) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %7238 = builtin.unrealized_conversion_cast %7237 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%7238) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_capacity_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb819(%7239 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7240 : !llvm.ptr):
    %7241 = "mini.invariant"(%7240) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7242 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb820] : () -> ()
  ^bb820:
    %7243 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
    "llvm.store"(%7243, %7242) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb821] : () -> ()
  ^bb821:
    %7244 = "llvm.extractvalue"(%7239) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7245 = "llvm.load"(%7242) : (!llvm.ptr) -> i32
    %7246 = "llvm.getelementptr"(%7244, %7245) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7247 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7248 = "llvm.getelementptr"(%7246, %7247) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7248) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb822(%7249 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7250 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7251 : !llvm.ptr, %7252 : !llvm.struct<(!llvm.ptr, i160)>):
    %7253 = "mini.wrap"(%7249) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7254 = "mini.to_fat_ptr"(%7253) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7255 = "mini.wrap"(%7252) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Array">
    %7256 = "mini.to_fat_ptr"(%7255) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    %7257 = "mini.get_field"(%7254) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %7258 = "mini.get_field"(%7254) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %7259 = "mini.unwrap"(%7257) : (!mini.ptr<i32>) -> i32
    %7260 = "mini.unwrap"(%7258) : (!mini.ptr<i32>) -> i32
    %7261 = "mini.comparison"(%7259, %7260) {"op" = "GE"} : (i32, i32) -> i1
    %7262 = "mini.wrap"(%7261) : (i1) -> !mini.ptr<i32>
    %7263 = "mini.unwrap"(%7262) : (!mini.ptr<i32>) -> i1
    "mini.if"(%7263) ({
      %7264 = "mini.unwrap"(%7254) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7265 = "mini.get_type_field"(%7254) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
      %7266 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%7266, %7264) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 69 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    }) : (i1) -> ()
    %7267 = "mini.get_field"(%7254) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    %7268 = "mini.get_field"(%7254) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %7269 = "mini.to_fat_ptr"(%7256) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    "mini.buffer_set"(%7267, %7268, %7269) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>, !mini.type_param<"T", !mini.any, "Array">) -> ()
    %7270 = "mini.get_field"(%7254) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %7271 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7272 = "mini.unwrap"(%7270) : (!mini.ptr<i32>) -> i32
    %7273 = "mini.unwrap"(%7271) : (!mini.ptr<i32>) -> i32
    %7274 = "mini.arithmetic"(%7272, %7273) {"op" = "ADD"} : (i32, i32) -> i32
    %7275 = "mini.wrap"(%7274) : (i32) -> !mini.ptr<i32>
    %7276 = builtin.unrealized_conversion_cast %7275 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%7254, %7276) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %7277 = "mini.to_fat_ptr"(%7254) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    "mini.return"(%7277) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> ()
  }) {"func_name" = "Array_append_xT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb823(%7278 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7279 : !llvm.ptr):
    %7280 = "mini.invariant"(%7279) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7281 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb824] : () -> ()
  ^bb825:
    %7282 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
    "llvm.store"(%7282, %7281) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb826] : () -> ()
  ^bb824:
    %7283 = "llvm.getelementptr"(%7279) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7284 = "llvm.load"(%7283) : (!llvm.ptr) -> !llvm.ptr
    %7285 = "llvm.getelementptr"(%7284) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7286 = "llvm.getelementptr"(%7284) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7287 = "llvm.getelementptr"(%7284) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7288 = "llvm.getelementptr"(%7284) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7289 = "llvm.load"(%7285) : (!llvm.ptr) -> i64
    %7290 = "llvm.load"(%7286) : (!llvm.ptr) -> i64
    %7291 = "llvm.load"(%7287) : (!llvm.ptr) -> !llvm.ptr
    %7292 = "llvm.load"(%7288) : (!llvm.ptr) -> !llvm.ptr
    %7293 = "mini.addr_of"() {"global_name" = @any_typ} : () -> !llvm.ptr
    %7294 = "llvm.ptrtoint"(%7293) : (!llvm.ptr) -> i64
    %7295 = "llvm.mlir.constant"() <{"value" = 3084208142191802847 : i64}> : () -> i64
    %7296 = "mini.subtype"(%7291, %7290, %7289, %7295, %7294, %7292) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7296) [^bb825, ^bb825] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb826:
    %7297 = "llvm.extractvalue"(%7278) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7298 = "llvm.load"(%7281) : (!llvm.ptr) -> i32
    %7299 = "llvm.getelementptr"(%7297, %7298) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7300 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7301 = "llvm.getelementptr"(%7299, %7300) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7301) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_append_xT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb827(%7302 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7303 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7304 : !llvm.ptr):
    %7305 = "mini.wrap"(%7302) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7306 = "mini.to_fat_ptr"(%7305) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7307 = "mini.get_field"(%7306) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %7308 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7309 = "mini.unwrap"(%7307) : (!mini.ptr<i32>) -> i32
    %7310 = "mini.unwrap"(%7308) : (!mini.ptr<i32>) -> i32
    %7311 = "mini.arithmetic"(%7309, %7310) {"op" = "MUL"} : (i32, i32) -> i32
    %7312 = "mini.wrap"(%7311) : (i32) -> !mini.ptr<i32>
    %7313 = builtin.unrealized_conversion_cast %7312 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%7306, %7313) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %7314 = "mini.get_field"(%7306) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    %7315 = builtin.unrealized_conversion_cast %7314 : !mini.buffer<!mini.fatptr<"T">> to !mini.buffer<!mini.fatptr<"T">>
    %7316 = "mini.refer"(%7315) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.fatptr<"T">>) -> !mini.buffer<!mini.fatptr<"T">>
    %7317 = "mini.get_field"(%7306) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %7318 = "mini.create_buffer"(%7317) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7319 = builtin.unrealized_conversion_cast %7318 : !llvm.ptr to !mini.buffer<!mini.fatptr<"T">>
    "mini.set_field"(%7306, %7319) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.buffer<!mini.fatptr<"T">>) -> ()
    %7320 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %7321 = "mini.get_field"(%7306) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
      %7322 = "mini.unwrap"(%7320) : (!mini.ptr<i32>) -> i32
      %7323 = "mini.unwrap"(%7321) : (!mini.ptr<i32>) -> i32
      %7324 = "mini.comparison"(%7322, %7323) {"op" = "LT"} : (i32, i32) -> i1
      %7325 = "mini.wrap"(%7324) : (i1) -> !mini.ptr<i32>
      %7326 = "mini.unwrap"(%7325) : (!mini.ptr<i32>) -> i1
    }, {
      %7327 = "mini.buffer_get"(%7316, %7320) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>) -> !mini.type_param<"T", !mini.any, "Array">
      %7328 = "mini.get_field"(%7306) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
      %7329 = "mini.to_fat_ptr"(%7327) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
      "mini.buffer_set"(%7328, %7320, %7329) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>, !mini.type_param<"T", !mini.any, "Array">) -> ()
      %7330 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %7331 = "mini.unwrap"(%7320) : (!mini.ptr<i32>) -> i32
      %7332 = "mini.unwrap"(%7330) : (!mini.ptr<i32>) -> i32
      %7333 = "mini.arithmetic"(%7331, %7332) {"op" = "ADD"} : (i32, i32) -> i32
      %7334 = "mini.wrap"(%7333) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%7320, %7334) ({
        %7335 = builtin.unrealized_conversion_cast %7334 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
  }) {"func_name" = "Array_grow_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb828(%7336 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7337 : !llvm.ptr):
    %7338 = "mini.invariant"(%7337) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7339 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb829] : () -> ()
  ^bb829:
    %7340 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
    "llvm.store"(%7340, %7339) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb830] : () -> ()
  ^bb830:
    %7341 = "llvm.extractvalue"(%7336) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7342 = "llvm.load"(%7339) : (!llvm.ptr) -> i32
    %7343 = "llvm.getelementptr"(%7341, %7342) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7344 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7345 = "llvm.getelementptr"(%7343, %7344) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7345) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_grow_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb831(%7346 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7347 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7348 : !llvm.ptr, %7349 : i32):
    %7350 = "mini.wrap"(%7346) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7351 = "mini.to_fat_ptr"(%7350) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7352 = "mini.wrap"(%7349) : (i32) -> !mini.ptr<i32>
    %7353 = builtin.unrealized_conversion_cast %7352 : !mini.ptr<i32> to !mini.ptr<i32>
    %7354 = "mini.get_field"(%7351) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %7355 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7356 = "mini.unwrap"(%7354) : (!mini.ptr<i32>) -> i32
    %7357 = "mini.unwrap"(%7355) : (!mini.ptr<i32>) -> i32
    %7358 = "mini.arithmetic"(%7356, %7357) {"op" = "SUB"} : (i32, i32) -> i32
    %7359 = "mini.wrap"(%7358) : (i32) -> !mini.ptr<i32>
    %7360 = "mini.unwrap"(%7353) : (!mini.ptr<i32>) -> i32
    %7361 = "mini.unwrap"(%7359) : (!mini.ptr<i32>) -> i32
    %7362 = "mini.comparison"(%7360, %7361) {"op" = "GT"} : (i32, i32) -> i1
    %7363 = "mini.wrap"(%7362) : (i1) -> !mini.ptr<i32>
    %7364 = "mini.get_field"(%7351) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %7365 = "mini.unwrap"(%7364) : (!mini.ptr<i32>) -> i32
    %7366 = "mini.unwrap"(%7353) : (!mini.ptr<i32>) -> i32
    %7367 = "mini.arithmetic"(%7365, %7366) {"op" = "ADD"} : (i32, i32) -> i32
    %7368 = "mini.wrap"(%7367) : (i32) -> !mini.ptr<i32>
    %7369 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7370 = "mini.unwrap"(%7368) : (!mini.ptr<i32>) -> i32
    %7371 = "mini.unwrap"(%7369) : (!mini.ptr<i32>) -> i32
    %7372 = "mini.comparison"(%7370, %7371) {"op" = "LT"} : (i32, i32) -> i1
    %7373 = "mini.wrap"(%7372) : (i1) -> !mini.ptr<i32>
    %7374 = "mini.unwrap"(%7363) : (!mini.ptr<i32>) -> i1
    %7375 = "mini.unwrap"(%7373) : (!mini.ptr<i32>) -> i1
    %7376 = "mini.logical"(%7374, %7375) {"op" = "or"} : (i1, i1) -> i1
    %7377 = "mini.wrap"(%7376) : (i1) -> !mini.ptr<i1>
    %7378 = "mini.unwrap"(%7377) : (!mini.ptr<i1>) -> i1
    "mini.if"(%7378) ({
      %7379 = builtin.unrealized_conversion_cast %7353 : !mini.ptr<i32> to !mini.ptr<i32>
      %7380 = "mini.unwrap"(%7379) : (!mini.ptr<i32>) -> i32
      %7381 = "mini.unwrap"(%7351) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7382 = "mini.get_type_field"(%7351) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
      %7383 = "mini.parameterization"(%7382) {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : (!mini.reified_type) -> !llvm.ptr
      %7384 = "mini.parameterizations_array"(%7383) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%7384, %7381, %7380) {"offset" = 12 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 69 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    }) : (i1) -> ()
    %7385 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7386 = "mini.unwrap"(%7353) : (!mini.ptr<i32>) -> i32
    %7387 = "mini.unwrap"(%7385) : (!mini.ptr<i32>) -> i32
    %7388 = "mini.comparison"(%7386, %7387) {"op" = "LT"} : (i32, i32) -> i1
    %7389 = "mini.wrap"(%7388) : (i1) -> !mini.ptr<i32>
    %7390 = "mini.unwrap"(%7389) : (!mini.ptr<i32>) -> i1
    "mini.if"(%7390) ({
      %7391 = "mini.get_field"(%7351) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
      %7392 = "mini.unwrap"(%7391) : (!mini.ptr<i32>) -> i32
      %7393 = "mini.unwrap"(%7353) : (!mini.ptr<i32>) -> i32
      %7394 = "mini.arithmetic"(%7392, %7393) {"op" = "ADD"} : (i32, i32) -> i32
      %7395 = "mini.wrap"(%7394) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%7353, %7395) ({
        %7396 = builtin.unrealized_conversion_cast %7395 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %7397 = "mini.get_field"(%7351) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    %7398 = "mini.buffer_get"(%7397, %7353) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>) -> !mini.type_param<"T", !mini.any, "Array">
    %7399 = "mini.to_fat_ptr"(%7398) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    "mini.return"(%7399) : (!mini.type_param<"T", !mini.any, "Array">) -> ()
  }) {"func_name" = "Array__index_xPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb832(%7400 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7401 : !llvm.ptr):
    %7402 = "mini.invariant"(%7401) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7403 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb833] : () -> ()
  ^bb834:
    %7404 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
    "llvm.store"(%7404, %7403) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb835] : () -> ()
  ^bb833:
    %7405 = "llvm.getelementptr"(%7401) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7406 = "llvm.load"(%7405) : (!llvm.ptr) -> !llvm.ptr
    %7407 = "llvm.getelementptr"(%7406) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7408 = "llvm.getelementptr"(%7406) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7409 = "llvm.getelementptr"(%7406) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7410 = "llvm.getelementptr"(%7406) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7411 = "llvm.load"(%7407) : (!llvm.ptr) -> i64
    %7412 = "llvm.load"(%7408) : (!llvm.ptr) -> i64
    %7413 = "llvm.load"(%7409) : (!llvm.ptr) -> !llvm.ptr
    %7414 = "llvm.load"(%7410) : (!llvm.ptr) -> !llvm.ptr
    %7415 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %7416 = "llvm.ptrtoint"(%7415) : (!llvm.ptr) -> i64
    %7417 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %7418 = "mini.subtype"(%7413, %7412, %7411, %7417, %7416, %7414) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7418) [^bb834, ^bb834] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb835:
    %7419 = "llvm.extractvalue"(%7400) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7420 = "llvm.load"(%7403) : (!llvm.ptr) -> i32
    %7421 = "llvm.getelementptr"(%7419, %7420) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7422 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7423 = "llvm.getelementptr"(%7421, %7422) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7423) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B__index_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb836(%7424 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7425 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7426 : !llvm.ptr, %7427 : i32):
    %7428 = "mini.wrap"(%7424) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7429 = "mini.to_fat_ptr"(%7428) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7430 = "mini.wrap"(%7427) : (i32) -> !mini.ptr<i32>
    %7431 = builtin.unrealized_conversion_cast %7430 : !mini.ptr<i32> to !mini.ptr<i32>
    %7432 = "mini.get_field"(%7429) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %7433 = "mini.unwrap"(%7432) : (!mini.ptr<i32>) -> i32
    %7434 = "mini.unwrap"(%7431) : (!mini.ptr<i32>) -> i32
    %7435 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "OutOfBounds", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !mini.fatptr<"OutOfBounds">
    %7436 = "mini.get_field"(%7429) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %7437 = builtin.unrealized_conversion_cast %7436 : !mini.ptr<i32> to !mini.ptr<i32>
    %7438 = "mini.unwrap"(%7437) : (!mini.ptr<i32>) -> i32
    %7439 = builtin.unrealized_conversion_cast %7431 : !mini.ptr<i32> to !mini.ptr<i32>
    %7440 = "mini.unwrap"(%7439) : (!mini.ptr<i32>) -> i32
    %7441 = "mini.unwrap"(%7435) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7442 = "mini.get_type_field"(%7429) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %7443 = "mini.parameterization"(%7442) {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : (!mini.reified_type) -> !llvm.ptr
    %7444 = "mini.parameterization"(%7442) {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : (!mini.reified_type) -> !llvm.ptr
    %7445 = "mini.parameterizations_array"(%7443, %7444) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7445, %7441, %7438, %7440) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %7446 = "mini.literal"() {"value" = 774 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7447 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7448 = "mini.create_buffer"(%7447) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7449 = builtin.unrealized_conversion_cast %7448 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %7450 = "mini.refer"(%7449) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7451 = "mini.literal"() {"typ" = !llvm.array<10 x i8>, "value" = "tests.mini"} : () -> !llvm.ptr
    %7452 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%7450, %7452, %7451) {"typ" = !llvm.array<10 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %7453 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7454 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7455 = "mini.unwrap"(%7450) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7456 = "mini.unwrap"(%7453) : (!mini.ptr<i32>) -> i32
    %7457 = "mini.unwrap"(%7454) : (!mini.ptr<i32>) -> i32
    %7458 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %7459 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7460 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7461 = builtin.unrealized_conversion_cast %7450 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %7462 = "mini.unwrap"(%7461) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7463 = builtin.unrealized_conversion_cast %7459 : !mini.ptr<i32> to !mini.ptr<i32>
    %7464 = "mini.unwrap"(%7463) : (!mini.ptr<i32>) -> i32
    %7465 = builtin.unrealized_conversion_cast %7460 : !mini.ptr<i32> to !mini.ptr<i32>
    %7466 = "mini.unwrap"(%7465) : (!mini.ptr<i32>) -> i32
    %7467 = "mini.unwrap"(%7458) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7468 = "mini.get_type_field"(%7429) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %7469 = "mini.parameterization"(%7468) {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : (!mini.reified_type) -> !llvm.ptr
    %7470 = "mini.parameterization"(%7468) {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : (!mini.reified_type) -> !llvm.ptr
    %7471 = "mini.parameterization"(%7468) {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : (!mini.reified_type) -> !llvm.ptr
    %7472 = "mini.parameterizations_array"(%7469, %7470, %7471) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7472, %7467, %7462, %7464, %7466) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %7473 = builtin.unrealized_conversion_cast %7446 : !mini.ptr<i32> to !mini.ptr<i32>
    %7474 = "mini.unwrap"(%7473) : (!mini.ptr<i32>) -> i32
    %7475 = "mini.to_fat_ptr"(%7458) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %7476 = "mini.unwrap"(%7475) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7477 = "mini.unwrap"(%7435) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7478 = "mini.get_type_field"(%7429) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %7479 = "mini.parameterization"(%7478) {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : (!mini.reified_type) -> !llvm.ptr
    %7480 = "mini.parameterization"(%7478) {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : (!mini.reified_type) -> !llvm.ptr
    %7481 = "mini.parameterizations_array"(%7479, %7480) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7481, %7477, %7474, %7476) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7482 = builtin.unrealized_conversion_cast %7435 : !mini.fatptr<"OutOfBounds"> to !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>
    %7483 = "mini.unwrap"(%7482) : (!mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7484 = "mini.coro_yield"(%7483) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7485 = "mini.wrap"(%7484) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>
  }) {"func_name" = "Array_throw_oob_xPtri32", "result_type" = !llvm.void, "yield_type" = !mini.fatptr<"OutOfBounds">} : () -> ()
  "mini.func"() ({
  ^bb837(%7486 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7487 : !llvm.ptr):
    %7488 = "mini.invariant"(%7487) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7489 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb838] : () -> ()
  ^bb839:
    %7490 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
    "llvm.store"(%7490, %7489) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb840] : () -> ()
  ^bb838:
    %7491 = "llvm.getelementptr"(%7487) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7492 = "llvm.load"(%7491) : (!llvm.ptr) -> !llvm.ptr
    %7493 = "llvm.getelementptr"(%7492) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7494 = "llvm.getelementptr"(%7492) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7495 = "llvm.getelementptr"(%7492) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7496 = "llvm.getelementptr"(%7492) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7497 = "llvm.load"(%7493) : (!llvm.ptr) -> i64
    %7498 = "llvm.load"(%7494) : (!llvm.ptr) -> i64
    %7499 = "llvm.load"(%7495) : (!llvm.ptr) -> !llvm.ptr
    %7500 = "llvm.load"(%7496) : (!llvm.ptr) -> !llvm.ptr
    %7501 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %7502 = "llvm.ptrtoint"(%7501) : (!llvm.ptr) -> i64
    %7503 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %7504 = "mini.subtype"(%7499, %7498, %7497, %7503, %7502, %7500) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7504) [^bb839, ^bb839] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb840:
    %7505 = "llvm.extractvalue"(%7486) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7506 = "llvm.load"(%7489) : (!llvm.ptr) -> i32
    %7507 = "llvm.getelementptr"(%7505, %7506) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7508 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7509 = "llvm.getelementptr"(%7507, %7508) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7509) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_throw_oob_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb841(%7510 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7511 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7512 : !llvm.ptr, %7513 : i32):
    %7514 = "mini.wrap"(%7510) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7515 = "mini.to_fat_ptr"(%7514) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7516 = "mini.wrap"(%7513) : (i32) -> !mini.ptr<i32>
    %7517 = builtin.unrealized_conversion_cast %7516 : !mini.ptr<i32> to !mini.ptr<i32>
    %7518 = "mini.get_field"(%7515) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    %7519 = "mini.buffer_get"(%7518, %7517) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>) -> !mini.type_param<"T", !mini.any, "Array">
    %7520 = "mini.to_fat_ptr"(%7519) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    "mini.return"(%7520) : (!mini.type_param<"T", !mini.any, "Array">) -> ()
  }) {"func_name" = "Array_unsafe_index_xPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb842(%7521 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7522 : !llvm.ptr):
    %7523 = "mini.invariant"(%7522) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7524 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb843] : () -> ()
  ^bb844:
    %7525 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
    "llvm.store"(%7525, %7524) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb845] : () -> ()
  ^bb843:
    %7526 = "llvm.getelementptr"(%7522) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7527 = "llvm.load"(%7526) : (!llvm.ptr) -> !llvm.ptr
    %7528 = "llvm.getelementptr"(%7527) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7529 = "llvm.getelementptr"(%7527) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7530 = "llvm.getelementptr"(%7527) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7531 = "llvm.getelementptr"(%7527) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7532 = "llvm.load"(%7528) : (!llvm.ptr) -> i64
    %7533 = "llvm.load"(%7529) : (!llvm.ptr) -> i64
    %7534 = "llvm.load"(%7530) : (!llvm.ptr) -> !llvm.ptr
    %7535 = "llvm.load"(%7531) : (!llvm.ptr) -> !llvm.ptr
    %7536 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %7537 = "llvm.ptrtoint"(%7536) : (!llvm.ptr) -> i64
    %7538 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %7539 = "mini.subtype"(%7534, %7533, %7532, %7538, %7537, %7535) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7539) [^bb844, ^bb844] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb845:
    %7540 = "llvm.extractvalue"(%7521) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7541 = "llvm.load"(%7524) : (!llvm.ptr) -> i32
    %7542 = "llvm.getelementptr"(%7540, %7541) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7543 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7544 = "llvm.getelementptr"(%7542, %7543) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7544) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_unsafe_index_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb846(%7545 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7546 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7547 : !llvm.ptr):
    %7548 = "mini.wrap"(%7545) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7549 = "mini.to_fat_ptr"(%7548) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7550 = "mini.unwrap"(%7549) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7551 = "mini.get_type_field"(%7549) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %7552 = "mini.parameterization"(%7551) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["Array.T_subtype_Any"]} : (!mini.reified_type) -> !llvm.ptr
    %7553 = "mini.new"(%7552) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "ArrayIterator", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "Array">]>
    %7554 = "mini.to_fat_ptr"(%7549) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %7555 = "mini.unwrap"(%7554) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7556 = "mini.unwrap"(%7553) : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7557 = "mini.get_type_field"(%7549) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %7558 = "mini.parameterization"(%7557) {"id_hierarchy" = ["Array", [0 : i32]], "name_hierarchy" = ["ArrayArray.T_subtype_Any", ["Array.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %7559 = "mini.parameterizations_array"(%7558) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7559, %7556, %7555) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7560 = "mini.to_fat_ptr"(%7553) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%7560) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "Array_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb847(%7561 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7562 : !llvm.ptr):
    %7563 = "mini.invariant"(%7562) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7564 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb848] : () -> ()
  ^bb848:
    %7565 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
    "llvm.store"(%7565, %7564) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb849] : () -> ()
  ^bb849:
    %7566 = "llvm.extractvalue"(%7561) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7567 = "llvm.load"(%7564) : (!llvm.ptr) -> i32
    %7568 = "llvm.getelementptr"(%7566, %7567) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7569 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7570 = "llvm.getelementptr"(%7568, %7569) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7570) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb850(%7571 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7572 : !llvm.ptr):
    %7573 = "mini.invariant"(%7572) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7574 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb851] : () -> ()
  ^bb852:
    %7575 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
    "llvm.store"(%7575, %7574) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb853] : () -> ()
  ^bb851:
    %7576 = "llvm.getelementptr"(%7572) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7577 = "llvm.load"(%7576) : (!llvm.ptr) -> !llvm.ptr
    %7578 = "llvm.getelementptr"(%7577) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7579 = "llvm.getelementptr"(%7577) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7580 = "llvm.getelementptr"(%7577) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7581 = "llvm.getelementptr"(%7577) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7582 = "llvm.load"(%7578) : (!llvm.ptr) -> i64
    %7583 = "llvm.load"(%7579) : (!llvm.ptr) -> i64
    %7584 = "llvm.load"(%7580) : (!llvm.ptr) -> !llvm.ptr
    %7585 = "llvm.load"(%7581) : (!llvm.ptr) -> !llvm.ptr
    %7586 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %7587 = "llvm.ptrtoint"(%7586) : (!llvm.ptr) -> i64
    %7588 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %7589 = "mini.subtype"(%7584, %7583, %7582, %7588, %7587, %7585) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7589) [^bb852, ^bb852] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb853:
    %7590 = "llvm.extractvalue"(%7571) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7591 = "llvm.load"(%7574) : (!llvm.ptr) -> i32
    %7592 = "llvm.getelementptr"(%7590, %7591) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7593 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7594 = "llvm.getelementptr"(%7592, %7593) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7594) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb854(%7595 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7596 : !llvm.ptr):
    %7597 = "mini.invariant"(%7596) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7598 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb855] : () -> ()
  ^bb856:
    %7599 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
    "llvm.store"(%7599, %7598) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb857] : () -> ()
  ^bb858:
    %7600 = "llvm.getelementptr"(%7596) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7601 = "llvm.load"(%7600) : (!llvm.ptr) -> !llvm.ptr
    %7602 = "llvm.getelementptr"(%7601) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7603 = "llvm.getelementptr"(%7601) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7604 = "llvm.getelementptr"(%7601) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7605 = "llvm.getelementptr"(%7601) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7606 = "llvm.load"(%7602) : (!llvm.ptr) -> i64
    %7607 = "llvm.load"(%7603) : (!llvm.ptr) -> i64
    %7608 = "llvm.load"(%7604) : (!llvm.ptr) -> !llvm.ptr
    %7609 = "llvm.load"(%7605) : (!llvm.ptr) -> !llvm.ptr
    %7610 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %7611 = "llvm.ptrtoint"(%7610) : (!llvm.ptr) -> i64
    %7612 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %7613 = "mini.subtype"(%7608, %7607, %7606, %7612, %7611, %7609) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7613) [^bb856, ^bb856] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb855:
    %7614 = "llvm.getelementptr"(%7596) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7615 = "llvm.load"(%7614) : (!llvm.ptr) -> !llvm.ptr
    %7616 = "llvm.getelementptr"(%7615) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7617 = "llvm.getelementptr"(%7615) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7618 = "llvm.getelementptr"(%7615) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7619 = "llvm.getelementptr"(%7615) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7620 = "llvm.load"(%7616) : (!llvm.ptr) -> i64
    %7621 = "llvm.load"(%7617) : (!llvm.ptr) -> i64
    %7622 = "llvm.load"(%7618) : (!llvm.ptr) -> !llvm.ptr
    %7623 = "llvm.load"(%7619) : (!llvm.ptr) -> !llvm.ptr
    %7624 = "mini.addr_of"() {"global_name" = @any_typ} : () -> !llvm.ptr
    %7625 = "llvm.ptrtoint"(%7624) : (!llvm.ptr) -> i64
    %7626 = "llvm.mlir.constant"() <{"value" = 3084208142191802847 : i64}> : () -> i64
    %7627 = "mini.subtype"(%7622, %7621, %7620, %7626, %7625, %7623) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7627) [^bb858, ^bb858] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb857:
    %7628 = "llvm.extractvalue"(%7595) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7629 = "llvm.load"(%7598) : (!llvm.ptr) -> i32
    %7630 = "llvm.getelementptr"(%7628, %7629) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7631 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7632 = "llvm.getelementptr"(%7630, %7631) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7632) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb859(%7633 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7634 : !llvm.ptr):
    %7635 = "mini.invariant"(%7634) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7636 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb860] : () -> ()
  ^bb861:
    %7637 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
    "llvm.store"(%7637, %7636) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb862] : () -> ()
  ^bb860:
    %7638 = "llvm.getelementptr"(%7634) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7639 = "llvm.load"(%7638) : (!llvm.ptr) -> !llvm.ptr
    %7640 = "llvm.getelementptr"(%7639) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7641 = "llvm.getelementptr"(%7639) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7642 = "llvm.getelementptr"(%7639) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7643 = "llvm.getelementptr"(%7639) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7644 = "llvm.load"(%7640) : (!llvm.ptr) -> i64
    %7645 = "llvm.load"(%7641) : (!llvm.ptr) -> i64
    %7646 = "llvm.load"(%7642) : (!llvm.ptr) -> !llvm.ptr
    %7647 = "llvm.load"(%7643) : (!llvm.ptr) -> !llvm.ptr
    %7648 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %7649 = "llvm.ptrtoint"(%7648) : (!llvm.ptr) -> i64
    %7650 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %7651 = "mini.subtype"(%7646, %7645, %7644, %7650, %7649, %7647) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7651) [^bb861, ^bb861] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb862:
    %7652 = "llvm.extractvalue"(%7633) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7653 = "llvm.load"(%7636) : (!llvm.ptr) -> i32
    %7654 = "llvm.getelementptr"(%7652, %7653) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7655 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7656 = "llvm.getelementptr"(%7654, %7655) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7656) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb863(%7657 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7658 : !llvm.ptr):
    %7659 = "mini.invariant"(%7658) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7660 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb864] : () -> ()
  ^bb865:
    %7661 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
    "llvm.store"(%7661, %7660) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb866] : () -> ()
  ^bb864:
    %7662 = "llvm.getelementptr"(%7658) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7663 = "llvm.load"(%7662) : (!llvm.ptr) -> !llvm.ptr
    %7664 = "llvm.getelementptr"(%7663) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7665 = "llvm.getelementptr"(%7663) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7666 = "llvm.getelementptr"(%7663) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7667 = "llvm.getelementptr"(%7663) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7668 = "llvm.load"(%7664) : (!llvm.ptr) -> i64
    %7669 = "llvm.load"(%7665) : (!llvm.ptr) -> i64
    %7670 = "llvm.load"(%7666) : (!llvm.ptr) -> !llvm.ptr
    %7671 = "llvm.load"(%7667) : (!llvm.ptr) -> !llvm.ptr
    %7672 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %7673 = "llvm.ptrtoint"(%7672) : (!llvm.ptr) -> i64
    %7674 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %7675 = "mini.subtype"(%7670, %7669, %7668, %7674, %7673, %7671) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7675) [^bb865, ^bb865] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb866:
    %7676 = "llvm.extractvalue"(%7657) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7677 = "llvm.load"(%7660) : (!llvm.ptr) -> i32
    %7678 = "llvm.getelementptr"(%7676, %7677) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7679 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7680 = "llvm.getelementptr"(%7678, %7679) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7680) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb867(%7681 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7682 : !llvm.ptr):
    %7683 = "mini.invariant"(%7682) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7684 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb868] : () -> ()
  ^bb869:
    %7685 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
    "llvm.store"(%7685, %7684) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb870] : () -> ()
  ^bb868:
    %7686 = "llvm.getelementptr"(%7682) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7687 = "llvm.load"(%7686) : (!llvm.ptr) -> !llvm.ptr
    %7688 = "llvm.getelementptr"(%7687) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7689 = "llvm.getelementptr"(%7687) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7690 = "llvm.getelementptr"(%7687) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7691 = "llvm.getelementptr"(%7687) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7692 = "llvm.load"(%7688) : (!llvm.ptr) -> i64
    %7693 = "llvm.load"(%7689) : (!llvm.ptr) -> i64
    %7694 = "llvm.load"(%7690) : (!llvm.ptr) -> !llvm.ptr
    %7695 = "llvm.load"(%7691) : (!llvm.ptr) -> !llvm.ptr
    %7696 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %7697 = "llvm.ptrtoint"(%7696) : (!llvm.ptr) -> i64
    %7698 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %7699 = "mini.subtype"(%7694, %7693, %7692, %7698, %7697, %7695) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7699) [^bb869, ^bb869] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb870:
    %7700 = "llvm.extractvalue"(%7681) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7701 = "llvm.load"(%7684) : (!llvm.ptr) -> i32
    %7702 = "llvm.getelementptr"(%7700, %7701) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7703 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7704 = "llvm.getelementptr"(%7702, %7703) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7704) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb871(%7705 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7706 : !llvm.ptr):
    %7707 = "mini.invariant"(%7706) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7708 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb872] : () -> ()
  ^bb873:
    %7709 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
    "llvm.store"(%7709, %7708) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb874] : () -> ()
  ^bb872:
    %7710 = "llvm.getelementptr"(%7706) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7711 = "llvm.load"(%7710) : (!llvm.ptr) -> !llvm.ptr
    %7712 = "llvm.getelementptr"(%7711) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7713 = "llvm.getelementptr"(%7711) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7714 = "llvm.getelementptr"(%7711) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7715 = "llvm.getelementptr"(%7711) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7716 = "llvm.load"(%7712) : (!llvm.ptr) -> i64
    %7717 = "llvm.load"(%7713) : (!llvm.ptr) -> i64
    %7718 = "llvm.load"(%7714) : (!llvm.ptr) -> !llvm.ptr
    %7719 = "llvm.load"(%7715) : (!llvm.ptr) -> !llvm.ptr
    %7720 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %7721 = "llvm.ptrtoint"(%7720) : (!llvm.ptr) -> i64
    %7722 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %7723 = "mini.subtype"(%7718, %7717, %7716, %7722, %7721, %7719) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7723) [^bb873, ^bb873] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb874:
    %7724 = "llvm.extractvalue"(%7705) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7725 = "llvm.load"(%7708) : (!llvm.ptr) -> i32
    %7726 = "llvm.getelementptr"(%7724, %7725) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7727 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7728 = "llvm.getelementptr"(%7726, %7727) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7728) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb875(%7729 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7730 : !llvm.ptr):
    %7731 = "mini.invariant"(%7730) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7732 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb876] : () -> ()
  ^bb877:
    %7733 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
    "llvm.store"(%7733, %7732) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb878] : () -> ()
  ^bb876:
    %7734 = "llvm.getelementptr"(%7730) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7735 = "llvm.load"(%7734) : (!llvm.ptr) -> !llvm.ptr
    %7736 = "llvm.getelementptr"(%7735) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7737 = "llvm.getelementptr"(%7735) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7738 = "llvm.getelementptr"(%7735) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7739 = "llvm.getelementptr"(%7735) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7740 = "llvm.load"(%7736) : (!llvm.ptr) -> i64
    %7741 = "llvm.load"(%7737) : (!llvm.ptr) -> i64
    %7742 = "llvm.load"(%7738) : (!llvm.ptr) -> !llvm.ptr
    %7743 = "llvm.load"(%7739) : (!llvm.ptr) -> !llvm.ptr
    %7744 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %7745 = "llvm.ptrtoint"(%7744) : (!llvm.ptr) -> i64
    %7746 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %7747 = "mini.subtype"(%7742, %7741, %7740, %7746, %7745, %7743) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7747) [^bb877, ^bb877] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb878:
    %7748 = "llvm.extractvalue"(%7729) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7749 = "llvm.load"(%7732) : (!llvm.ptr) -> i32
    %7750 = "llvm.getelementptr"(%7748, %7749) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7751 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7752 = "llvm.getelementptr"(%7750, %7751) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7752) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb879(%7753 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7754 : !llvm.ptr):
    %7755 = "mini.invariant"(%7754) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7756 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb880] : () -> ()
  ^bb881:
    %7757 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
    "llvm.store"(%7757, %7756) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb882] : () -> ()
  ^bb880:
    %7758 = "llvm.getelementptr"(%7754) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7759 = "llvm.load"(%7758) : (!llvm.ptr) -> !llvm.ptr
    %7760 = "llvm.getelementptr"(%7759) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7761 = "llvm.getelementptr"(%7759) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7762 = "llvm.getelementptr"(%7759) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7763 = "llvm.getelementptr"(%7759) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7764 = "llvm.load"(%7760) : (!llvm.ptr) -> i64
    %7765 = "llvm.load"(%7761) : (!llvm.ptr) -> i64
    %7766 = "llvm.load"(%7762) : (!llvm.ptr) -> !llvm.ptr
    %7767 = "llvm.load"(%7763) : (!llvm.ptr) -> !llvm.ptr
    %7768 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %7769 = "llvm.ptrtoint"(%7768) : (!llvm.ptr) -> i64
    %7770 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %7771 = "mini.subtype"(%7766, %7765, %7764, %7770, %7769, %7767) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7771) [^bb881, ^bb881] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb882:
    %7772 = "llvm.extractvalue"(%7753) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7773 = "llvm.load"(%7756) : (!llvm.ptr) -> i32
    %7774 = "llvm.getelementptr"(%7772, %7773) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7775 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7776 = "llvm.getelementptr"(%7774, %7775) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7776) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb883(%7777 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7778 : !llvm.ptr):
    %7779 = "mini.invariant"(%7778) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7780 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb884] : () -> ()
  ^bb885:
    %7781 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
    "llvm.store"(%7781, %7780) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb886] : () -> ()
  ^bb884:
    %7782 = "llvm.getelementptr"(%7778) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7783 = "llvm.load"(%7782) : (!llvm.ptr) -> !llvm.ptr
    %7784 = "llvm.getelementptr"(%7783) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7785 = "llvm.getelementptr"(%7783) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7786 = "llvm.getelementptr"(%7783) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7787 = "llvm.getelementptr"(%7783) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7788 = "llvm.load"(%7784) : (!llvm.ptr) -> i64
    %7789 = "llvm.load"(%7785) : (!llvm.ptr) -> i64
    %7790 = "llvm.load"(%7786) : (!llvm.ptr) -> !llvm.ptr
    %7791 = "llvm.load"(%7787) : (!llvm.ptr) -> !llvm.ptr
    %7792 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %7793 = "llvm.ptrtoint"(%7792) : (!llvm.ptr) -> i64
    %7794 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %7795 = "mini.subtype"(%7790, %7789, %7788, %7794, %7793, %7791) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7795) [^bb885, ^bb885] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb886:
    %7796 = "llvm.extractvalue"(%7777) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7797 = "llvm.load"(%7780) : (!llvm.ptr) -> i32
    %7798 = "llvm.getelementptr"(%7796, %7797) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7799 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7800 = "llvm.getelementptr"(%7798, %7799) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7800) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb887(%7801 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7802 : !llvm.ptr):
    %7803 = "mini.invariant"(%7802) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7804 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb888] : () -> ()
  ^bb889:
    %7805 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
    "llvm.store"(%7805, %7804) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb890] : () -> ()
  ^bb888:
    %7806 = "llvm.getelementptr"(%7802) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7807 = "llvm.load"(%7806) : (!llvm.ptr) -> !llvm.ptr
    %7808 = "llvm.getelementptr"(%7807) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7809 = "llvm.getelementptr"(%7807) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7810 = "llvm.getelementptr"(%7807) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7811 = "llvm.getelementptr"(%7807) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7812 = "llvm.load"(%7808) : (!llvm.ptr) -> i64
    %7813 = "llvm.load"(%7809) : (!llvm.ptr) -> i64
    %7814 = "llvm.load"(%7810) : (!llvm.ptr) -> !llvm.ptr
    %7815 = "llvm.load"(%7811) : (!llvm.ptr) -> !llvm.ptr
    %7816 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %7817 = "llvm.ptrtoint"(%7816) : (!llvm.ptr) -> i64
    %7818 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %7819 = "mini.subtype"(%7814, %7813, %7812, %7818, %7817, %7815) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7819) [^bb889, ^bb889] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb890:
    %7820 = "llvm.extractvalue"(%7801) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7821 = "llvm.load"(%7804) : (!llvm.ptr) -> i32
    %7822 = "llvm.getelementptr"(%7820, %7821) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7823 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7824 = "llvm.getelementptr"(%7822, %7823) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7824) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ArrayIterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ArrayIterator_field_ArrayIterator_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ArrayIterator_getter_array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Array", "parameterization" = "_parameterization_ArrayArrayIterator.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ArrayIterator_setter_array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Array", "parameterization" = "_parameterization_ArrayArrayIterator.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ArrayIterator_field_array", "getter_name" = "ArrayIterator_getter_array", "setter_name" = "ArrayIterator_setter_array"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ArrayIterator_getter_index", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ArrayIterator_setter_index", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ArrayIterator_field_index", "getter_name" = "ArrayIterator_getter_index", "setter_name" = "ArrayIterator_setter_index"} : () -> ()
  "mini.func"() ({
  ^bb891(%7825 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7826 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7827 : !llvm.ptr, %7828 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7829 = "mini.wrap"(%7825) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %7830 = "mini.to_fat_ptr"(%7829) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator", "invariant"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %7831 = "mini.wrap"(%7828) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %7832 = "mini.to_fat_ptr"(%7831) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %7833 = "mini.to_fat_ptr"(%7832) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    "mini.set_field"(%7830, %7833) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> ()
    %7834 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7835 = builtin.unrealized_conversion_cast %7834 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%7830, %7835) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "ArrayIterator_init_arrayArrayT", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb892(%7836 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7837 : !llvm.ptr):
    %7838 = "mini.invariant"(%7837) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7839 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb893] : () -> ()
  ^bb894:
    %7840 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%7840, %7839) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb895] : () -> ()
  ^bb893:
    %7841 = "llvm.getelementptr"(%7837) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7842 = "llvm.load"(%7841) : (!llvm.ptr) -> !llvm.ptr
    %7843 = "llvm.getelementptr"(%7842) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7844 = "llvm.getelementptr"(%7842) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7845 = "llvm.getelementptr"(%7842) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7846 = "llvm.getelementptr"(%7842) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7847 = "llvm.load"(%7843) : (!llvm.ptr) -> i64
    %7848 = "llvm.load"(%7844) : (!llvm.ptr) -> i64
    %7849 = "llvm.load"(%7845) : (!llvm.ptr) -> !llvm.ptr
    %7850 = "llvm.load"(%7846) : (!llvm.ptr) -> !llvm.ptr
    %7851 = "mini.addr_of"() {"global_name" = @Array} : () -> !llvm.ptr
    %7852 = "llvm.ptrtoint"(%7851) : (!llvm.ptr) -> i64
    %7853 = "llvm.mlir.constant"() <{"value" = 13185201323315417072 : i64}> : () -> i64
    %7854 = "mini.subtype"(%7849, %7848, %7847, %7853, %7852, %7850) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7854) [^bb894, ^bb894] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb895:
    %7855 = "llvm.extractvalue"(%7836) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7856 = "llvm.load"(%7839) : (!llvm.ptr) -> i32
    %7857 = "llvm.getelementptr"(%7855, %7856) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7858 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7859 = "llvm.getelementptr"(%7857, %7858) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7859) : (!llvm.ptr) -> ()
  }) {"func_name" = "ArrayIterator_B_init_arrayArrayT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb896(%7860 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7861 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7862 : !llvm.ptr):
    %7863 = "mini.wrap"(%7860) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %7864 = "mini.to_fat_ptr"(%7863) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator", "invariant"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %7865 = "mini.get_field"(%7864) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.ptr<i32>
    %7866 = "mini.get_field"(%7864) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Array"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %7867 = "mini.unwrap"(%7866) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7868 = "mini.get_type_field"(%7864) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.reified_type
    %7869 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7870 = "mini.method_call"(%7869, %7867) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 69 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %7871 = builtin.unrealized_conversion_cast %7870 : !mini.ptr<i32> to !mini.ptr<i32>
    %7872 = "mini.unwrap"(%7865) : (!mini.ptr<i32>) -> i32
    %7873 = "mini.unwrap"(%7871) : (!mini.ptr<i32>) -> i32
    %7874 = "mini.comparison"(%7872, %7873) {"op" = "GE"} : (i32, i32) -> i1
    %7875 = "mini.wrap"(%7874) : (i1) -> !mini.ptr<i32>
    %7876 = "mini.unwrap"(%7875) : (!mini.ptr<i32>) -> i1
    "mini.if"(%7876) ({
      %7877 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %7878 = "mini.unionize"(%7877) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
      "mini.return"(%7878) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %7879 = "mini.get_field"(%7864) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.ptr<i32>
    %7880 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7881 = "mini.unwrap"(%7879) : (!mini.ptr<i32>) -> i32
    %7882 = "mini.unwrap"(%7880) : (!mini.ptr<i32>) -> i32
    %7883 = "mini.arithmetic"(%7881, %7882) {"op" = "ADD"} : (i32, i32) -> i32
    %7884 = "mini.wrap"(%7883) : (i32) -> !mini.ptr<i32>
    %7885 = builtin.unrealized_conversion_cast %7884 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%7864, %7885) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, !mini.ptr<i32>) -> ()
    %7886 = "mini.get_field"(%7864) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.ptr<i32>
    %7887 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7888 = "mini.unwrap"(%7886) : (!mini.ptr<i32>) -> i32
    %7889 = "mini.unwrap"(%7887) : (!mini.ptr<i32>) -> i32
    %7890 = "mini.arithmetic"(%7888, %7889) {"op" = "SUB"} : (i32, i32) -> i32
    %7891 = "mini.wrap"(%7890) : (i32) -> !mini.ptr<i32>
    %7892 = builtin.unrealized_conversion_cast %7891 : !mini.ptr<i32> to !mini.ptr<i32>
    %7893 = "mini.unwrap"(%7892) : (!mini.ptr<i32>) -> i32
    %7894 = "mini.get_field"(%7864) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Array"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %7895 = "mini.unwrap"(%7894) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7896 = "mini.get_type_field"(%7864) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.reified_type
    %7897 = "mini.parameterization"(%7896) {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : (!mini.reified_type) -> !llvm.ptr
    %7898 = "mini.parameterizations_array"(%7897) : (!llvm.ptr) -> !llvm.ptr
    %7899 = "mini.method_call"(%7898, %7895, %7893) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 69 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.type_param<"T", !mini.any, "Array">
    %7900 = "mini.to_fat_ptr"(%7899) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "ArrayIterator">
    %7901 = builtin.unrealized_conversion_cast %7900 : !mini.type_param<"T", !mini.any, "ArrayIterator"> to !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
    "mini.return"(%7901) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "ArrayIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb897(%7902 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7903 : !llvm.ptr):
    %7904 = "mini.invariant"(%7903) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7905 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb898] : () -> ()
  ^bb898:
    %7906 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%7906, %7905) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb899] : () -> ()
  ^bb899:
    %7907 = "llvm.extractvalue"(%7902) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7908 = "llvm.load"(%7905) : (!llvm.ptr) -> i32
    %7909 = "llvm.getelementptr"(%7907, %7908) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7910 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7911 = "llvm.getelementptr"(%7909, %7910) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7911) : (!llvm.ptr) -> ()
  }) {"func_name" = "ArrayIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_MapIterable2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "MapIterable2_field_MapIterable2_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "MapIterable2_field_MapIterable2_1"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterable2_getter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2MapIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterable2_setter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2MapIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterable2_field_iterable", "getter_name" = "MapIterable2_getter_iterable", "setter_name" = "MapIterable2_setter_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterable2_getter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterable2.T_subtype_Any_to_MapIterable2.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterable2_setter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterable2.T_subtype_Any_to_MapIterable2.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterable2_field_f", "getter_name" = "MapIterable2_getter_f", "setter_name" = "MapIterable2_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb900(%7912 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7913 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7914 : !llvm.ptr, %7915 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7916 : !llvm.struct<(!llvm.ptr)>):
    %7917 = "mini.wrap"(%7912) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>
    %7918 = "mini.to_fat_ptr"(%7917) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable2", "to_typ_name" = "MapIterable2", "invariant"} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>
    %7919 = "mini.wrap"(%7915) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    %7920 = "mini.to_fat_ptr"(%7919) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    %7921 = "mini.to_fat_ptr"(%7920) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    "mini.set_field"(%7918, %7921) {"offset" = 2 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> ()
    %7922 = "mini.wrap"(%7916) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>
    %7923 = builtin.unrealized_conversion_cast %7922 : !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">> to !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>
    %7924 = builtin.unrealized_conversion_cast %7923 : !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">> to !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>
    "mini.set_field"(%7918, %7924) {"offset" = 3 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>, !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>) -> ()
  }) {"func_name" = "MapIterable2_init_iterableIterable2T_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb901(%7925 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7926 : !llvm.ptr):
    %7927 = "mini.invariant"(%7926) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7928 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb902] : () -> ()
  ^bb903:
    %7929 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%7929, %7928) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb904] : () -> ()
  ^bb905:
    %7930 = "llvm.getelementptr"(%7926) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7931 = "llvm.load"(%7930) : (!llvm.ptr) -> !llvm.ptr
    %7932 = "llvm.getelementptr"(%7931) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7933 = "llvm.getelementptr"(%7931) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7934 = "llvm.getelementptr"(%7931) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7935 = "llvm.getelementptr"(%7931) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7936 = "llvm.load"(%7932) : (!llvm.ptr) -> i64
    %7937 = "llvm.load"(%7933) : (!llvm.ptr) -> i64
    %7938 = "llvm.load"(%7934) : (!llvm.ptr) -> !llvm.ptr
    %7939 = "llvm.load"(%7935) : (!llvm.ptr) -> !llvm.ptr
    %7940 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %7941 = "llvm.ptrtoint"(%7940) : (!llvm.ptr) -> i64
    %7942 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %7943 = "mini.subtype"(%7938, %7937, %7936, %7942, %7941, %7939) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7943) [^bb903, ^bb903] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb902:
    %7944 = "llvm.getelementptr"(%7926) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %7945 = "llvm.load"(%7944) : (!llvm.ptr) -> !llvm.ptr
    %7946 = "llvm.getelementptr"(%7945) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7947 = "llvm.getelementptr"(%7945) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7948 = "llvm.getelementptr"(%7945) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7949 = "llvm.getelementptr"(%7945) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7950 = "llvm.load"(%7946) : (!llvm.ptr) -> i64
    %7951 = "llvm.load"(%7947) : (!llvm.ptr) -> i64
    %7952 = "llvm.load"(%7948) : (!llvm.ptr) -> !llvm.ptr
    %7953 = "llvm.load"(%7949) : (!llvm.ptr) -> !llvm.ptr
    %7954 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %7955 = "llvm.ptrtoint"(%7954) : (!llvm.ptr) -> i64
    %7956 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %7957 = "mini.subtype"(%7952, %7951, %7950, %7956, %7955, %7953) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7957) [^bb905, ^bb905] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb904:
    %7958 = "llvm.extractvalue"(%7925) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7959 = "llvm.load"(%7928) : (!llvm.ptr) -> i32
    %7960 = "llvm.getelementptr"(%7958, %7959) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7961 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %7962 = "llvm.getelementptr"(%7960, %7961) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7962) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb906(%7963 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7964 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7965 : !llvm.ptr):
    %7966 = "mini.wrap"(%7963) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>
    %7967 = "mini.to_fat_ptr"(%7966) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable2", "to_typ_name" = "MapIterable2", "invariant"} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>
    %7968 = "mini.get_field"(%7967) {"offset" = 2 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    %7969 = "mini.unwrap"(%7968) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7970 = "mini.get_type_field"(%7967) {"offset" = 0 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.reified_type
    %7971 = "mini.get_type_field"(%7967) {"offset" = 1 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.reified_type
    %7972 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7973 = "mini.method_call"(%7972, %7969) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %7974 = "mini.to_fat_ptr"(%7973) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    %7975 = "mini.get_field"(%7967) {"offset" = 3 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>
    %7976 = "mini.unwrap"(%7974) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7977 = "mini.unwrap"(%7975) : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>) -> !llvm.struct<(!llvm.ptr)>
    %7978 = "mini.get_type_field"(%7967) {"offset" = 0 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.reified_type
    %7979 = "mini.get_type_field"(%7967) {"offset" = 1 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.reified_type
    %7980 = "mini.parameterization"(%7978, %7979) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["MapIterable2.T_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %7981 = "mini.parameterization"(%7978, %7979) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["MapIterable2.U_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %7982 = "mini.new"(%7980, %7981) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterator2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>
    %7983 = "mini.get_field"(%7967) {"offset" = 2 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    %7984 = "mini.unwrap"(%7983) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7985 = "mini.get_type_field"(%7967) {"offset" = 0 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.reified_type
    %7986 = "mini.get_type_field"(%7967) {"offset" = 1 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.reified_type
    %7987 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7988 = "mini.method_call"(%7987, %7984) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %7989 = "mini.to_fat_ptr"(%7988) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>
    %7990 = "mini.get_field"(%7967) {"offset" = 3 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">>
    %7991 = "mini.to_fat_ptr"(%7989) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>
    %7992 = "mini.unwrap"(%7991) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7993 = builtin.unrealized_conversion_cast %7990 : !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable2">> to !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>
    %7994 = "mini.unwrap"(%7993) : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>) -> !llvm.struct<(!llvm.ptr)>
    %7995 = "mini.unwrap"(%7982) : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7996 = "mini.get_type_field"(%7967) {"offset" = 0 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.reified_type
    %7997 = "mini.get_type_field"(%7967) {"offset" = 1 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.reified_type
    %7998 = "mini.parameterization"(%7996, %7997) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2MapIterable2.T_subtype_Any", ["MapIterable2.T_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %7999 = "mini.parameterization"(%7996, %7997) {"id_hierarchy" = ["function_typ", [1 : i32], [0 : i32]], "name_hierarchy" = ["FunctionMapIterable2.T_subtype_Any_to_MapIterable2.U_subtype_Any", ["MapIterable2.U_subtype_Any"], ["MapIterable2.T_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %8000 = "mini.parameterizations_array"(%7998, %7999) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8000, %7995, %7992, %7994) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %8001 = "mini.to_fat_ptr"(%7982) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterable2">, !mini.type_param<"U", !mini.any, "MapIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%8001) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "MapIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb907(%8002 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8003 : !llvm.ptr):
    %8004 = "mini.invariant"(%8003) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8005 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb908] : () -> ()
  ^bb908:
    %8006 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%8006, %8005) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb909] : () -> ()
  ^bb909:
    %8007 = "llvm.extractvalue"(%8002) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8008 = "llvm.load"(%8005) : (!llvm.ptr) -> i32
    %8009 = "llvm.getelementptr"(%8007, %8008) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8010 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8011 = "llvm.getelementptr"(%8009, %8010) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8011) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb910(%8012 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8013 : !llvm.ptr):
    %8014 = "mini.invariant"(%8013) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8015 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb911] : () -> ()
  ^bb912:
    %8016 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%8016, %8015) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb913] : () -> ()
  ^bb911:
    %8017 = "llvm.getelementptr"(%8013) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8018 = "llvm.load"(%8017) : (!llvm.ptr) -> !llvm.ptr
    %8019 = "llvm.getelementptr"(%8018) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8020 = "llvm.getelementptr"(%8018) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8021 = "llvm.getelementptr"(%8018) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8022 = "llvm.getelementptr"(%8018) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8023 = "llvm.load"(%8019) : (!llvm.ptr) -> i64
    %8024 = "llvm.load"(%8020) : (!llvm.ptr) -> i64
    %8025 = "llvm.load"(%8021) : (!llvm.ptr) -> !llvm.ptr
    %8026 = "llvm.load"(%8022) : (!llvm.ptr) -> !llvm.ptr
    %8027 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8028 = "llvm.ptrtoint"(%8027) : (!llvm.ptr) -> i64
    %8029 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8030 = "mini.subtype"(%8025, %8024, %8023, %8029, %8028, %8026) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8030) [^bb912, ^bb912] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb913:
    %8031 = "llvm.extractvalue"(%8012) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8032 = "llvm.load"(%8015) : (!llvm.ptr) -> i32
    %8033 = "llvm.getelementptr"(%8031, %8032) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8034 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8035 = "llvm.getelementptr"(%8033, %8034) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8035) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb914(%8036 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8037 : !llvm.ptr):
    %8038 = "mini.invariant"(%8037) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8039 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb915] : () -> ()
  ^bb916:
    %8040 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%8040, %8039) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb917] : () -> ()
  ^bb918:
    %8041 = "llvm.getelementptr"(%8037) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8042 = "llvm.load"(%8041) : (!llvm.ptr) -> !llvm.ptr
    %8043 = "llvm.getelementptr"(%8042) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8044 = "llvm.getelementptr"(%8042) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8045 = "llvm.getelementptr"(%8042) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8046 = "llvm.getelementptr"(%8042) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8047 = "llvm.load"(%8043) : (!llvm.ptr) -> i64
    %8048 = "llvm.load"(%8044) : (!llvm.ptr) -> i64
    %8049 = "llvm.load"(%8045) : (!llvm.ptr) -> !llvm.ptr
    %8050 = "llvm.load"(%8046) : (!llvm.ptr) -> !llvm.ptr
    %8051 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8052 = "llvm.ptrtoint"(%8051) : (!llvm.ptr) -> i64
    %8053 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8054 = "mini.subtype"(%8049, %8048, %8047, %8053, %8052, %8050) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8054) [^bb916, ^bb916] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb915:
    %8055 = "llvm.getelementptr"(%8037) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8056 = "llvm.load"(%8055) : (!llvm.ptr) -> !llvm.ptr
    %8057 = "llvm.getelementptr"(%8056) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8058 = "llvm.getelementptr"(%8056) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8059 = "llvm.getelementptr"(%8056) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8060 = "llvm.getelementptr"(%8056) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8061 = "llvm.load"(%8057) : (!llvm.ptr) -> i64
    %8062 = "llvm.load"(%8058) : (!llvm.ptr) -> i64
    %8063 = "llvm.load"(%8059) : (!llvm.ptr) -> !llvm.ptr
    %8064 = "llvm.load"(%8060) : (!llvm.ptr) -> !llvm.ptr
    %8065 = "mini.addr_of"() {"global_name" = @any_typ} : () -> !llvm.ptr
    %8066 = "llvm.ptrtoint"(%8065) : (!llvm.ptr) -> i64
    %8067 = "llvm.mlir.constant"() <{"value" = 3084208142191802847 : i64}> : () -> i64
    %8068 = "mini.subtype"(%8063, %8062, %8061, %8067, %8066, %8064) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8068) [^bb918, ^bb918] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb917:
    %8069 = "llvm.extractvalue"(%8036) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8070 = "llvm.load"(%8039) : (!llvm.ptr) -> i32
    %8071 = "llvm.getelementptr"(%8069, %8070) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8072 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8073 = "llvm.getelementptr"(%8071, %8072) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8073) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb919(%8074 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8075 : !llvm.ptr):
    %8076 = "mini.invariant"(%8075) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8077 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb920] : () -> ()
  ^bb921:
    %8078 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%8078, %8077) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb922] : () -> ()
  ^bb920:
    %8079 = "llvm.getelementptr"(%8075) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8080 = "llvm.load"(%8079) : (!llvm.ptr) -> !llvm.ptr
    %8081 = "llvm.getelementptr"(%8080) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8082 = "llvm.getelementptr"(%8080) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8083 = "llvm.getelementptr"(%8080) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8084 = "llvm.getelementptr"(%8080) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8085 = "llvm.load"(%8081) : (!llvm.ptr) -> i64
    %8086 = "llvm.load"(%8082) : (!llvm.ptr) -> i64
    %8087 = "llvm.load"(%8083) : (!llvm.ptr) -> !llvm.ptr
    %8088 = "llvm.load"(%8084) : (!llvm.ptr) -> !llvm.ptr
    %8089 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8090 = "llvm.ptrtoint"(%8089) : (!llvm.ptr) -> i64
    %8091 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8092 = "mini.subtype"(%8087, %8086, %8085, %8091, %8090, %8088) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8092) [^bb921, ^bb921] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb922:
    %8093 = "llvm.extractvalue"(%8074) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8094 = "llvm.load"(%8077) : (!llvm.ptr) -> i32
    %8095 = "llvm.getelementptr"(%8093, %8094) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8096 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8097 = "llvm.getelementptr"(%8095, %8096) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8097) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb923(%8098 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8099 : !llvm.ptr):
    %8100 = "mini.invariant"(%8099) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8101 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb924] : () -> ()
  ^bb925:
    %8102 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%8102, %8101) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb926] : () -> ()
  ^bb924:
    %8103 = "llvm.getelementptr"(%8099) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8104 = "llvm.load"(%8103) : (!llvm.ptr) -> !llvm.ptr
    %8105 = "llvm.getelementptr"(%8104) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8106 = "llvm.getelementptr"(%8104) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8107 = "llvm.getelementptr"(%8104) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8108 = "llvm.getelementptr"(%8104) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8109 = "llvm.load"(%8105) : (!llvm.ptr) -> i64
    %8110 = "llvm.load"(%8106) : (!llvm.ptr) -> i64
    %8111 = "llvm.load"(%8107) : (!llvm.ptr) -> !llvm.ptr
    %8112 = "llvm.load"(%8108) : (!llvm.ptr) -> !llvm.ptr
    %8113 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8114 = "llvm.ptrtoint"(%8113) : (!llvm.ptr) -> i64
    %8115 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8116 = "mini.subtype"(%8111, %8110, %8109, %8115, %8114, %8112) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8116) [^bb925, ^bb925] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb926:
    %8117 = "llvm.extractvalue"(%8098) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8118 = "llvm.load"(%8101) : (!llvm.ptr) -> i32
    %8119 = "llvm.getelementptr"(%8117, %8118) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8120 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8121 = "llvm.getelementptr"(%8119, %8120) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8121) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb927(%8122 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8123 : !llvm.ptr):
    %8124 = "mini.invariant"(%8123) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8125 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb928] : () -> ()
  ^bb929:
    %8126 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%8126, %8125) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb930] : () -> ()
  ^bb928:
    %8127 = "llvm.getelementptr"(%8123) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8128 = "llvm.load"(%8127) : (!llvm.ptr) -> !llvm.ptr
    %8129 = "llvm.getelementptr"(%8128) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8130 = "llvm.getelementptr"(%8128) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8131 = "llvm.getelementptr"(%8128) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8132 = "llvm.getelementptr"(%8128) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8133 = "llvm.load"(%8129) : (!llvm.ptr) -> i64
    %8134 = "llvm.load"(%8130) : (!llvm.ptr) -> i64
    %8135 = "llvm.load"(%8131) : (!llvm.ptr) -> !llvm.ptr
    %8136 = "llvm.load"(%8132) : (!llvm.ptr) -> !llvm.ptr
    %8137 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8138 = "llvm.ptrtoint"(%8137) : (!llvm.ptr) -> i64
    %8139 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8140 = "mini.subtype"(%8135, %8134, %8133, %8139, %8138, %8136) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8140) [^bb929, ^bb929] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb930:
    %8141 = "llvm.extractvalue"(%8122) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8142 = "llvm.load"(%8125) : (!llvm.ptr) -> i32
    %8143 = "llvm.getelementptr"(%8141, %8142) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8144 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8145 = "llvm.getelementptr"(%8143, %8144) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8145) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb931(%8146 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8147 : !llvm.ptr):
    %8148 = "mini.invariant"(%8147) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8149 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb932] : () -> ()
  ^bb933:
    %8150 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%8150, %8149) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb934] : () -> ()
  ^bb932:
    %8151 = "llvm.getelementptr"(%8147) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8152 = "llvm.load"(%8151) : (!llvm.ptr) -> !llvm.ptr
    %8153 = "llvm.getelementptr"(%8152) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8154 = "llvm.getelementptr"(%8152) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8155 = "llvm.getelementptr"(%8152) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8156 = "llvm.getelementptr"(%8152) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8157 = "llvm.load"(%8153) : (!llvm.ptr) -> i64
    %8158 = "llvm.load"(%8154) : (!llvm.ptr) -> i64
    %8159 = "llvm.load"(%8155) : (!llvm.ptr) -> !llvm.ptr
    %8160 = "llvm.load"(%8156) : (!llvm.ptr) -> !llvm.ptr
    %8161 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8162 = "llvm.ptrtoint"(%8161) : (!llvm.ptr) -> i64
    %8163 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8164 = "mini.subtype"(%8159, %8158, %8157, %8163, %8162, %8160) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8164) [^bb933, ^bb933] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb934:
    %8165 = "llvm.extractvalue"(%8146) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8166 = "llvm.load"(%8149) : (!llvm.ptr) -> i32
    %8167 = "llvm.getelementptr"(%8165, %8166) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8168 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8169 = "llvm.getelementptr"(%8167, %8168) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8169) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb935(%8170 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8171 : !llvm.ptr):
    %8172 = "mini.invariant"(%8171) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8173 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb936] : () -> ()
  ^bb937:
    %8174 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%8174, %8173) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb938] : () -> ()
  ^bb936:
    %8175 = "llvm.getelementptr"(%8171) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8176 = "llvm.load"(%8175) : (!llvm.ptr) -> !llvm.ptr
    %8177 = "llvm.getelementptr"(%8176) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8178 = "llvm.getelementptr"(%8176) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8179 = "llvm.getelementptr"(%8176) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8180 = "llvm.getelementptr"(%8176) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8181 = "llvm.load"(%8177) : (!llvm.ptr) -> i64
    %8182 = "llvm.load"(%8178) : (!llvm.ptr) -> i64
    %8183 = "llvm.load"(%8179) : (!llvm.ptr) -> !llvm.ptr
    %8184 = "llvm.load"(%8180) : (!llvm.ptr) -> !llvm.ptr
    %8185 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8186 = "llvm.ptrtoint"(%8185) : (!llvm.ptr) -> i64
    %8187 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8188 = "mini.subtype"(%8183, %8182, %8181, %8187, %8186, %8184) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8188) [^bb937, ^bb937] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb938:
    %8189 = "llvm.extractvalue"(%8170) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8190 = "llvm.load"(%8173) : (!llvm.ptr) -> i32
    %8191 = "llvm.getelementptr"(%8189, %8190) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8192 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8193 = "llvm.getelementptr"(%8191, %8192) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8193) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb939(%8194 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8195 : !llvm.ptr):
    %8196 = "mini.invariant"(%8195) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8197 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb940] : () -> ()
  ^bb941:
    %8198 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%8198, %8197) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb942] : () -> ()
  ^bb940:
    %8199 = "llvm.getelementptr"(%8195) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8200 = "llvm.load"(%8199) : (!llvm.ptr) -> !llvm.ptr
    %8201 = "llvm.getelementptr"(%8200) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8202 = "llvm.getelementptr"(%8200) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8203 = "llvm.getelementptr"(%8200) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8204 = "llvm.getelementptr"(%8200) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8205 = "llvm.load"(%8201) : (!llvm.ptr) -> i64
    %8206 = "llvm.load"(%8202) : (!llvm.ptr) -> i64
    %8207 = "llvm.load"(%8203) : (!llvm.ptr) -> !llvm.ptr
    %8208 = "llvm.load"(%8204) : (!llvm.ptr) -> !llvm.ptr
    %8209 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8210 = "llvm.ptrtoint"(%8209) : (!llvm.ptr) -> i64
    %8211 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8212 = "mini.subtype"(%8207, %8206, %8205, %8211, %8210, %8208) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8212) [^bb941, ^bb941] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb942:
    %8213 = "llvm.extractvalue"(%8194) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8214 = "llvm.load"(%8197) : (!llvm.ptr) -> i32
    %8215 = "llvm.getelementptr"(%8213, %8214) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8216 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8217 = "llvm.getelementptr"(%8215, %8216) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8217) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb943(%8218 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8219 : !llvm.ptr):
    %8220 = "mini.invariant"(%8219) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8221 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb944] : () -> ()
  ^bb945:
    %8222 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%8222, %8221) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb946] : () -> ()
  ^bb944:
    %8223 = "llvm.getelementptr"(%8219) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8224 = "llvm.load"(%8223) : (!llvm.ptr) -> !llvm.ptr
    %8225 = "llvm.getelementptr"(%8224) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8226 = "llvm.getelementptr"(%8224) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8227 = "llvm.getelementptr"(%8224) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8228 = "llvm.getelementptr"(%8224) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8229 = "llvm.load"(%8225) : (!llvm.ptr) -> i64
    %8230 = "llvm.load"(%8226) : (!llvm.ptr) -> i64
    %8231 = "llvm.load"(%8227) : (!llvm.ptr) -> !llvm.ptr
    %8232 = "llvm.load"(%8228) : (!llvm.ptr) -> !llvm.ptr
    %8233 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8234 = "llvm.ptrtoint"(%8233) : (!llvm.ptr) -> i64
    %8235 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8236 = "mini.subtype"(%8231, %8230, %8229, %8235, %8234, %8232) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8236) [^bb945, ^bb945] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb946:
    %8237 = "llvm.extractvalue"(%8218) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8238 = "llvm.load"(%8221) : (!llvm.ptr) -> i32
    %8239 = "llvm.getelementptr"(%8237, %8238) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8240 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8241 = "llvm.getelementptr"(%8239, %8240) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8241) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb947(%8242 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8243 : !llvm.ptr):
    %8244 = "mini.invariant"(%8243) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8245 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb948] : () -> ()
  ^bb949:
    %8246 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%8246, %8245) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb950] : () -> ()
  ^bb948:
    %8247 = "llvm.getelementptr"(%8243) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8248 = "llvm.load"(%8247) : (!llvm.ptr) -> !llvm.ptr
    %8249 = "llvm.getelementptr"(%8248) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8250 = "llvm.getelementptr"(%8248) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8251 = "llvm.getelementptr"(%8248) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8252 = "llvm.getelementptr"(%8248) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8253 = "llvm.load"(%8249) : (!llvm.ptr) -> i64
    %8254 = "llvm.load"(%8250) : (!llvm.ptr) -> i64
    %8255 = "llvm.load"(%8251) : (!llvm.ptr) -> !llvm.ptr
    %8256 = "llvm.load"(%8252) : (!llvm.ptr) -> !llvm.ptr
    %8257 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8258 = "llvm.ptrtoint"(%8257) : (!llvm.ptr) -> i64
    %8259 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8260 = "mini.subtype"(%8255, %8254, %8253, %8259, %8258, %8256) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8260) [^bb949, ^bb949] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb950:
    %8261 = "llvm.extractvalue"(%8242) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8262 = "llvm.load"(%8245) : (!llvm.ptr) -> i32
    %8263 = "llvm.getelementptr"(%8261, %8262) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8264 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8265 = "llvm.getelementptr"(%8263, %8264) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8265) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_MapIterator2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "MapIterator2_field_MapIterator2_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "MapIterator2_field_MapIterator2_1"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterator2_getter_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2MapIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterator2_setter_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2MapIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterator2_field_iterator", "getter_name" = "MapIterator2_getter_iterator", "setter_name" = "MapIterator2_setter_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterator2_getter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterator2.T_subtype_Any_to_MapIterator2.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterator2_setter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterator2.T_subtype_Any_to_MapIterator2.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterator2_field_f", "getter_name" = "MapIterator2_getter_f", "setter_name" = "MapIterator2_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb951(%8266 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8267 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8268 : !llvm.ptr, %8269 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8270 : !llvm.struct<(!llvm.ptr)>):
    %8271 = "mini.wrap"(%8266) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>
    %8272 = "mini.to_fat_ptr"(%8271) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator2", "to_typ_name" = "MapIterator2", "invariant"} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>
    %8273 = "mini.wrap"(%8269) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>
    %8274 = "mini.to_fat_ptr"(%8273) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>
    %8275 = "mini.to_fat_ptr"(%8274) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>
    "mini.set_field"(%8272, %8275) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>) -> ()
    %8276 = "mini.wrap"(%8270) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>
    %8277 = builtin.unrealized_conversion_cast %8276 : !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">> to !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>
    %8278 = builtin.unrealized_conversion_cast %8277 : !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">> to !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>
    "mini.set_field"(%8272, %8278) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>, !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>) -> ()
  }) {"func_name" = "MapIterator2_init_iteratorIterator2T_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb952(%8279 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8280 : !llvm.ptr):
    %8281 = "mini.invariant"(%8280) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8282 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb953] : () -> ()
  ^bb954:
    %8283 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%8283, %8282) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb955] : () -> ()
  ^bb956:
    %8284 = "llvm.getelementptr"(%8280) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8285 = "llvm.load"(%8284) : (!llvm.ptr) -> !llvm.ptr
    %8286 = "llvm.getelementptr"(%8285) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8287 = "llvm.getelementptr"(%8285) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8288 = "llvm.getelementptr"(%8285) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8289 = "llvm.getelementptr"(%8285) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8290 = "llvm.load"(%8286) : (!llvm.ptr) -> i64
    %8291 = "llvm.load"(%8287) : (!llvm.ptr) -> i64
    %8292 = "llvm.load"(%8288) : (!llvm.ptr) -> !llvm.ptr
    %8293 = "llvm.load"(%8289) : (!llvm.ptr) -> !llvm.ptr
    %8294 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8295 = "llvm.ptrtoint"(%8294) : (!llvm.ptr) -> i64
    %8296 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8297 = "mini.subtype"(%8292, %8291, %8290, %8296, %8295, %8293) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8297) [^bb954, ^bb954] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb953:
    %8298 = "llvm.getelementptr"(%8280) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8299 = "llvm.load"(%8298) : (!llvm.ptr) -> !llvm.ptr
    %8300 = "llvm.getelementptr"(%8299) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8301 = "llvm.getelementptr"(%8299) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8302 = "llvm.getelementptr"(%8299) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8303 = "llvm.getelementptr"(%8299) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8304 = "llvm.load"(%8300) : (!llvm.ptr) -> i64
    %8305 = "llvm.load"(%8301) : (!llvm.ptr) -> i64
    %8306 = "llvm.load"(%8302) : (!llvm.ptr) -> !llvm.ptr
    %8307 = "llvm.load"(%8303) : (!llvm.ptr) -> !llvm.ptr
    %8308 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %8309 = "llvm.ptrtoint"(%8308) : (!llvm.ptr) -> i64
    %8310 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %8311 = "mini.subtype"(%8306, %8305, %8304, %8310, %8309, %8307) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8311) [^bb956, ^bb956] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb955:
    %8312 = "llvm.extractvalue"(%8279) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8313 = "llvm.load"(%8282) : (!llvm.ptr) -> i32
    %8314 = "llvm.getelementptr"(%8312, %8313) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8315 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8316 = "llvm.getelementptr"(%8314, %8315) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8316) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb957(%8317 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8318 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8319 : !llvm.ptr):
    %8320 = "mini.wrap"(%8317) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>
    %8321 = "mini.to_fat_ptr"(%8320) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator2", "to_typ_name" = "MapIterator2", "invariant"} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>
    %8322 = "mini.get_field"(%8321) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>
    %8323 = "mini.unwrap"(%8322) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8324 = "mini.get_type_field"(%8321) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>) -> !mini.reified_type
    %8325 = "mini.get_type_field"(%8321) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>) -> !mini.reified_type
    %8326 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8327 = "mini.method_call"(%8326, %8323) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
    %8328 = builtin.unrealized_conversion_cast %8327 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.nil]>
    %8329 = "mini.checkflag"(%8328) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.nil]>) -> i1
    %8330 = "mini.unwrap"(%8329) : (i1) -> i1
    %8331 = builtin.unrealized_conversion_cast %8328 : !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.nil]>
    "mini.if"(%8330) ({
      %8332 = "mini.to_fat_ptr"(%8331) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "MapIterator2">
      %8333 = "mini.to_fat_ptr"(%8332) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "MapIterator2">) -> !mini.type_param<"T", !mini.any, "MapIterator2">
      %8334 = "mini.unwrap"(%8333) : (!mini.type_param<"T", !mini.any, "MapIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %8335 = "mini.get_field"(%8321) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.type_param<"U", !mini.any, "MapIterator2">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>
      %8336 = "mini.unwrap"(%8335) : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator2">>) -> !llvm.ptr
      %8337 = "mini.fptr_call"(%8336, %8334) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"U", !mini.any, "MapIterator2">
      %8338 = builtin.unrealized_conversion_cast %8337 : !mini.type_param<"U", !mini.any, "MapIterator2"> to !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
      "mini.return"(%8338) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>) -> ()
      "mini.castassign"(%8331, %8332) ({
        %8339 = builtin.unrealized_conversion_cast %8332 : !mini.type_param<"T", !mini.any, "MapIterator2"> to !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.any, "MapIterator2">, !mini.nil]>, !mini.type_param<"T", !mini.any, "MapIterator2">) -> ()
    }) : (i1) -> ()
    %8340 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %8341 = "mini.unionize"(%8340) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
    "mini.return"(%8341) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "MapIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb958(%8342 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8343 : !llvm.ptr):
    %8344 = "mini.invariant"(%8343) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8345 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb959] : () -> ()
  ^bb959:
    %8346 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%8346, %8345) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb960] : () -> ()
  ^bb960:
    %8347 = "llvm.extractvalue"(%8342) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8348 = "llvm.load"(%8345) : (!llvm.ptr) -> i32
    %8349 = "llvm.getelementptr"(%8347, %8348) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8350 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8351 = "llvm.getelementptr"(%8349, %8350) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8351) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_FilterIterable2", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FilterIterable2_field_FilterIterable2_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterable2_getter_iterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2FilterIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterable2_setter_iterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2FilterIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterable2_field_iterable", "getter_name" = "FilterIterable2_getter_iterable", "setter_name" = "FilterIterable2_setter_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterable2_getter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterable2.T_subtype_Any_to_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterable2_setter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterable2.T_subtype_Any_to_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterable2_field_f", "getter_name" = "FilterIterable2_getter_f", "setter_name" = "FilterIterable2_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb961(%8352 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8353 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8354 : !llvm.ptr, %8355 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8356 : !llvm.struct<(!llvm.ptr)>):
    %8357 = "mini.wrap"(%8352) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %8358 = "mini.to_fat_ptr"(%8357) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable2", "to_typ_name" = "FilterIterable2", "invariant"} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %8359 = "mini.wrap"(%8355) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %8360 = "mini.to_fat_ptr"(%8359) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %8361 = "mini.to_fat_ptr"(%8360) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    "mini.set_field"(%8358, %8361) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> ()
    %8362 = "mini.wrap"(%8356) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %8363 = builtin.unrealized_conversion_cast %8362 : !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %8364 = builtin.unrealized_conversion_cast %8363 : !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    "mini.set_field"(%8358, %8364) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>, !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>) -> ()
  }) {"func_name" = "FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb962(%8365 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8366 : !llvm.ptr):
    %8367 = "mini.invariant"(%8366) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8368 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb963] : () -> ()
  ^bb964:
    %8369 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%8369, %8368) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb965] : () -> ()
  ^bb966:
    %8370 = "llvm.getelementptr"(%8366) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8371 = "llvm.load"(%8370) : (!llvm.ptr) -> !llvm.ptr
    %8372 = "llvm.getelementptr"(%8371) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8373 = "llvm.getelementptr"(%8371) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8374 = "llvm.getelementptr"(%8371) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8375 = "llvm.getelementptr"(%8371) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8376 = "llvm.load"(%8372) : (!llvm.ptr) -> i64
    %8377 = "llvm.load"(%8373) : (!llvm.ptr) -> i64
    %8378 = "llvm.load"(%8374) : (!llvm.ptr) -> !llvm.ptr
    %8379 = "llvm.load"(%8375) : (!llvm.ptr) -> !llvm.ptr
    %8380 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8381 = "llvm.ptrtoint"(%8380) : (!llvm.ptr) -> i64
    %8382 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8383 = "mini.subtype"(%8378, %8377, %8376, %8382, %8381, %8379) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8383) [^bb964, ^bb964] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb963:
    %8384 = "llvm.getelementptr"(%8366) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8385 = "llvm.load"(%8384) : (!llvm.ptr) -> !llvm.ptr
    %8386 = "llvm.getelementptr"(%8385) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8387 = "llvm.getelementptr"(%8385) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8388 = "llvm.getelementptr"(%8385) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8389 = "llvm.getelementptr"(%8385) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8390 = "llvm.load"(%8386) : (!llvm.ptr) -> i64
    %8391 = "llvm.load"(%8387) : (!llvm.ptr) -> i64
    %8392 = "llvm.load"(%8388) : (!llvm.ptr) -> !llvm.ptr
    %8393 = "llvm.load"(%8389) : (!llvm.ptr) -> !llvm.ptr
    %8394 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8395 = "llvm.ptrtoint"(%8394) : (!llvm.ptr) -> i64
    %8396 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8397 = "mini.subtype"(%8392, %8391, %8390, %8396, %8395, %8393) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8397) [^bb966, ^bb966] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb965:
    %8398 = "llvm.extractvalue"(%8365) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8399 = "llvm.load"(%8368) : (!llvm.ptr) -> i32
    %8400 = "llvm.getelementptr"(%8398, %8399) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8401 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8402 = "llvm.getelementptr"(%8400, %8401) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8402) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb967(%8403 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8404 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8405 : !llvm.ptr):
    %8406 = "mini.wrap"(%8403) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %8407 = "mini.to_fat_ptr"(%8406) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable2", "to_typ_name" = "FilterIterable2", "invariant"} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %8408 = "mini.get_field"(%8407) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %8409 = "mini.unwrap"(%8408) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8410 = "mini.get_type_field"(%8407) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.reified_type
    %8411 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8412 = "mini.method_call"(%8411, %8409) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %8413 = "mini.to_fat_ptr"(%8412) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %8414 = "mini.get_field"(%8407) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %8415 = "mini.unwrap"(%8413) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8416 = "mini.unwrap"(%8414) : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %8417 = "mini.get_type_field"(%8407) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.reified_type
    %8418 = "mini.parameterization"(%8417) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["FilterIterable2.T_subtype_Any"]} : (!mini.reified_type) -> !llvm.ptr
    %8419 = "mini.new"(%8418) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterator2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %8420 = "mini.get_field"(%8407) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %8421 = "mini.unwrap"(%8420) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8422 = "mini.get_type_field"(%8407) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.reified_type
    %8423 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8424 = "mini.method_call"(%8423, %8421) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %8425 = "mini.to_fat_ptr"(%8424) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>
    %8426 = "mini.get_field"(%8407) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %8427 = "mini.to_fat_ptr"(%8425) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %8428 = "mini.unwrap"(%8427) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8429 = builtin.unrealized_conversion_cast %8426 : !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
    %8430 = "mini.unwrap"(%8429) : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %8431 = "mini.unwrap"(%8419) : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8432 = "mini.get_type_field"(%8407) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.reified_type
    %8433 = "mini.parameterization"(%8432) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2FilterIterable2.T_subtype_Any", ["FilterIterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %8434 = "mini.parameterization"(%8432) {"id_hierarchy" = ["function_typ", ["bool_typ"], [0 : i32]], "name_hierarchy" = ["FunctionFilterIterable2.T_subtype_Any_to_Ptri1", ["Ptri1"], ["FilterIterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %8435 = "mini.parameterizations_array"(%8433, %8434) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8435, %8431, %8428, %8430) {"offset" = 3 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %8436 = "mini.to_fat_ptr"(%8419) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%8436) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "FilterIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb968(%8437 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8438 : !llvm.ptr):
    %8439 = "mini.invariant"(%8438) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8440 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb969] : () -> ()
  ^bb969:
    %8441 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%8441, %8440) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb970] : () -> ()
  ^bb970:
    %8442 = "llvm.extractvalue"(%8437) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8443 = "llvm.load"(%8440) : (!llvm.ptr) -> i32
    %8444 = "llvm.getelementptr"(%8442, %8443) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8445 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8446 = "llvm.getelementptr"(%8444, %8445) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8446) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb971(%8447 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8448 : !llvm.ptr):
    %8449 = "mini.invariant"(%8448) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8450 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb972] : () -> ()
  ^bb973:
    %8451 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%8451, %8450) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb974] : () -> ()
  ^bb972:
    %8452 = "llvm.getelementptr"(%8448) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8453 = "llvm.load"(%8452) : (!llvm.ptr) -> !llvm.ptr
    %8454 = "llvm.getelementptr"(%8453) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8455 = "llvm.getelementptr"(%8453) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8456 = "llvm.getelementptr"(%8453) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8457 = "llvm.getelementptr"(%8453) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8458 = "llvm.load"(%8454) : (!llvm.ptr) -> i64
    %8459 = "llvm.load"(%8455) : (!llvm.ptr) -> i64
    %8460 = "llvm.load"(%8456) : (!llvm.ptr) -> !llvm.ptr
    %8461 = "llvm.load"(%8457) : (!llvm.ptr) -> !llvm.ptr
    %8462 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8463 = "llvm.ptrtoint"(%8462) : (!llvm.ptr) -> i64
    %8464 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8465 = "mini.subtype"(%8460, %8459, %8458, %8464, %8463, %8461) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8465) [^bb973, ^bb973] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb974:
    %8466 = "llvm.extractvalue"(%8447) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8467 = "llvm.load"(%8450) : (!llvm.ptr) -> i32
    %8468 = "llvm.getelementptr"(%8466, %8467) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8469 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8470 = "llvm.getelementptr"(%8468, %8469) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8470) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb975(%8471 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8472 : !llvm.ptr):
    %8473 = "mini.invariant"(%8472) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8474 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb976] : () -> ()
  ^bb977:
    %8475 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%8475, %8474) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb978] : () -> ()
  ^bb979:
    %8476 = "llvm.getelementptr"(%8472) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8477 = "llvm.load"(%8476) : (!llvm.ptr) -> !llvm.ptr
    %8478 = "llvm.getelementptr"(%8477) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8479 = "llvm.getelementptr"(%8477) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8480 = "llvm.getelementptr"(%8477) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8481 = "llvm.getelementptr"(%8477) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8482 = "llvm.load"(%8478) : (!llvm.ptr) -> i64
    %8483 = "llvm.load"(%8479) : (!llvm.ptr) -> i64
    %8484 = "llvm.load"(%8480) : (!llvm.ptr) -> !llvm.ptr
    %8485 = "llvm.load"(%8481) : (!llvm.ptr) -> !llvm.ptr
    %8486 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8487 = "llvm.ptrtoint"(%8486) : (!llvm.ptr) -> i64
    %8488 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8489 = "mini.subtype"(%8484, %8483, %8482, %8488, %8487, %8485) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8489) [^bb977, ^bb977] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb976:
    %8490 = "llvm.getelementptr"(%8472) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8491 = "llvm.load"(%8490) : (!llvm.ptr) -> !llvm.ptr
    %8492 = "llvm.getelementptr"(%8491) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8493 = "llvm.getelementptr"(%8491) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8494 = "llvm.getelementptr"(%8491) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8495 = "llvm.getelementptr"(%8491) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8496 = "llvm.load"(%8492) : (!llvm.ptr) -> i64
    %8497 = "llvm.load"(%8493) : (!llvm.ptr) -> i64
    %8498 = "llvm.load"(%8494) : (!llvm.ptr) -> !llvm.ptr
    %8499 = "llvm.load"(%8495) : (!llvm.ptr) -> !llvm.ptr
    %8500 = "mini.addr_of"() {"global_name" = @any_typ} : () -> !llvm.ptr
    %8501 = "llvm.ptrtoint"(%8500) : (!llvm.ptr) -> i64
    %8502 = "llvm.mlir.constant"() <{"value" = 3084208142191802847 : i64}> : () -> i64
    %8503 = "mini.subtype"(%8498, %8497, %8496, %8502, %8501, %8499) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8503) [^bb979, ^bb979] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb978:
    %8504 = "llvm.extractvalue"(%8471) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8505 = "llvm.load"(%8474) : (!llvm.ptr) -> i32
    %8506 = "llvm.getelementptr"(%8504, %8505) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8507 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8508 = "llvm.getelementptr"(%8506, %8507) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8508) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb980(%8509 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8510 : !llvm.ptr):
    %8511 = "mini.invariant"(%8510) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8512 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb981] : () -> ()
  ^bb982:
    %8513 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%8513, %8512) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb983] : () -> ()
  ^bb981:
    %8514 = "llvm.getelementptr"(%8510) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8515 = "llvm.load"(%8514) : (!llvm.ptr) -> !llvm.ptr
    %8516 = "llvm.getelementptr"(%8515) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8517 = "llvm.getelementptr"(%8515) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8518 = "llvm.getelementptr"(%8515) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8519 = "llvm.getelementptr"(%8515) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8520 = "llvm.load"(%8516) : (!llvm.ptr) -> i64
    %8521 = "llvm.load"(%8517) : (!llvm.ptr) -> i64
    %8522 = "llvm.load"(%8518) : (!llvm.ptr) -> !llvm.ptr
    %8523 = "llvm.load"(%8519) : (!llvm.ptr) -> !llvm.ptr
    %8524 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8525 = "llvm.ptrtoint"(%8524) : (!llvm.ptr) -> i64
    %8526 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8527 = "mini.subtype"(%8522, %8521, %8520, %8526, %8525, %8523) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8527) [^bb982, ^bb982] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb983:
    %8528 = "llvm.extractvalue"(%8509) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8529 = "llvm.load"(%8512) : (!llvm.ptr) -> i32
    %8530 = "llvm.getelementptr"(%8528, %8529) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8531 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8532 = "llvm.getelementptr"(%8530, %8531) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8532) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb984(%8533 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8534 : !llvm.ptr):
    %8535 = "mini.invariant"(%8534) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8536 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb985] : () -> ()
  ^bb986:
    %8537 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%8537, %8536) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb987] : () -> ()
  ^bb985:
    %8538 = "llvm.getelementptr"(%8534) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8539 = "llvm.load"(%8538) : (!llvm.ptr) -> !llvm.ptr
    %8540 = "llvm.getelementptr"(%8539) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8541 = "llvm.getelementptr"(%8539) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8542 = "llvm.getelementptr"(%8539) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8543 = "llvm.getelementptr"(%8539) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8544 = "llvm.load"(%8540) : (!llvm.ptr) -> i64
    %8545 = "llvm.load"(%8541) : (!llvm.ptr) -> i64
    %8546 = "llvm.load"(%8542) : (!llvm.ptr) -> !llvm.ptr
    %8547 = "llvm.load"(%8543) : (!llvm.ptr) -> !llvm.ptr
    %8548 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8549 = "llvm.ptrtoint"(%8548) : (!llvm.ptr) -> i64
    %8550 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8551 = "mini.subtype"(%8546, %8545, %8544, %8550, %8549, %8547) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8551) [^bb986, ^bb986] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb987:
    %8552 = "llvm.extractvalue"(%8533) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8553 = "llvm.load"(%8536) : (!llvm.ptr) -> i32
    %8554 = "llvm.getelementptr"(%8552, %8553) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8555 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8556 = "llvm.getelementptr"(%8554, %8555) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8556) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb988(%8557 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8558 : !llvm.ptr):
    %8559 = "mini.invariant"(%8558) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8560 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb989] : () -> ()
  ^bb990:
    %8561 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%8561, %8560) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb991] : () -> ()
  ^bb989:
    %8562 = "llvm.getelementptr"(%8558) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8563 = "llvm.load"(%8562) : (!llvm.ptr) -> !llvm.ptr
    %8564 = "llvm.getelementptr"(%8563) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8565 = "llvm.getelementptr"(%8563) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8566 = "llvm.getelementptr"(%8563) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8567 = "llvm.getelementptr"(%8563) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8568 = "llvm.load"(%8564) : (!llvm.ptr) -> i64
    %8569 = "llvm.load"(%8565) : (!llvm.ptr) -> i64
    %8570 = "llvm.load"(%8566) : (!llvm.ptr) -> !llvm.ptr
    %8571 = "llvm.load"(%8567) : (!llvm.ptr) -> !llvm.ptr
    %8572 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8573 = "llvm.ptrtoint"(%8572) : (!llvm.ptr) -> i64
    %8574 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8575 = "mini.subtype"(%8570, %8569, %8568, %8574, %8573, %8571) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8575) [^bb990, ^bb990] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb991:
    %8576 = "llvm.extractvalue"(%8557) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8577 = "llvm.load"(%8560) : (!llvm.ptr) -> i32
    %8578 = "llvm.getelementptr"(%8576, %8577) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8579 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8580 = "llvm.getelementptr"(%8578, %8579) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8580) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb992(%8581 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8582 : !llvm.ptr):
    %8583 = "mini.invariant"(%8582) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8584 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb993] : () -> ()
  ^bb994:
    %8585 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%8585, %8584) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb995] : () -> ()
  ^bb993:
    %8586 = "llvm.getelementptr"(%8582) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8587 = "llvm.load"(%8586) : (!llvm.ptr) -> !llvm.ptr
    %8588 = "llvm.getelementptr"(%8587) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8589 = "llvm.getelementptr"(%8587) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8590 = "llvm.getelementptr"(%8587) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8591 = "llvm.getelementptr"(%8587) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8592 = "llvm.load"(%8588) : (!llvm.ptr) -> i64
    %8593 = "llvm.load"(%8589) : (!llvm.ptr) -> i64
    %8594 = "llvm.load"(%8590) : (!llvm.ptr) -> !llvm.ptr
    %8595 = "llvm.load"(%8591) : (!llvm.ptr) -> !llvm.ptr
    %8596 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8597 = "llvm.ptrtoint"(%8596) : (!llvm.ptr) -> i64
    %8598 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8599 = "mini.subtype"(%8594, %8593, %8592, %8598, %8597, %8595) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8599) [^bb994, ^bb994] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb995:
    %8600 = "llvm.extractvalue"(%8581) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8601 = "llvm.load"(%8584) : (!llvm.ptr) -> i32
    %8602 = "llvm.getelementptr"(%8600, %8601) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8603 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8604 = "llvm.getelementptr"(%8602, %8603) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8604) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb996(%8605 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8606 : !llvm.ptr):
    %8607 = "mini.invariant"(%8606) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8608 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb997] : () -> ()
  ^bb998:
    %8609 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%8609, %8608) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb999] : () -> ()
  ^bb997:
    %8610 = "llvm.getelementptr"(%8606) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8611 = "llvm.load"(%8610) : (!llvm.ptr) -> !llvm.ptr
    %8612 = "llvm.getelementptr"(%8611) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8613 = "llvm.getelementptr"(%8611) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8614 = "llvm.getelementptr"(%8611) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8615 = "llvm.getelementptr"(%8611) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8616 = "llvm.load"(%8612) : (!llvm.ptr) -> i64
    %8617 = "llvm.load"(%8613) : (!llvm.ptr) -> i64
    %8618 = "llvm.load"(%8614) : (!llvm.ptr) -> !llvm.ptr
    %8619 = "llvm.load"(%8615) : (!llvm.ptr) -> !llvm.ptr
    %8620 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8621 = "llvm.ptrtoint"(%8620) : (!llvm.ptr) -> i64
    %8622 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8623 = "mini.subtype"(%8618, %8617, %8616, %8622, %8621, %8619) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8623) [^bb998, ^bb998] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb999:
    %8624 = "llvm.extractvalue"(%8605) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8625 = "llvm.load"(%8608) : (!llvm.ptr) -> i32
    %8626 = "llvm.getelementptr"(%8624, %8625) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8627 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8628 = "llvm.getelementptr"(%8626, %8627) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8628) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1000(%8629 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8630 : !llvm.ptr):
    %8631 = "mini.invariant"(%8630) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8632 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1001] : () -> ()
  ^bb1002:
    %8633 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%8633, %8632) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1003] : () -> ()
  ^bb1001:
    %8634 = "llvm.getelementptr"(%8630) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8635 = "llvm.load"(%8634) : (!llvm.ptr) -> !llvm.ptr
    %8636 = "llvm.getelementptr"(%8635) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8637 = "llvm.getelementptr"(%8635) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8638 = "llvm.getelementptr"(%8635) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8639 = "llvm.getelementptr"(%8635) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8640 = "llvm.load"(%8636) : (!llvm.ptr) -> i64
    %8641 = "llvm.load"(%8637) : (!llvm.ptr) -> i64
    %8642 = "llvm.load"(%8638) : (!llvm.ptr) -> !llvm.ptr
    %8643 = "llvm.load"(%8639) : (!llvm.ptr) -> !llvm.ptr
    %8644 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8645 = "llvm.ptrtoint"(%8644) : (!llvm.ptr) -> i64
    %8646 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8647 = "mini.subtype"(%8642, %8641, %8640, %8646, %8645, %8643) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8647) [^bb1002, ^bb1002] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1003:
    %8648 = "llvm.extractvalue"(%8629) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8649 = "llvm.load"(%8632) : (!llvm.ptr) -> i32
    %8650 = "llvm.getelementptr"(%8648, %8649) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8651 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8652 = "llvm.getelementptr"(%8650, %8651) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8652) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1004(%8653 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8654 : !llvm.ptr):
    %8655 = "mini.invariant"(%8654) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8656 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1005] : () -> ()
  ^bb1006:
    %8657 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%8657, %8656) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1007] : () -> ()
  ^bb1005:
    %8658 = "llvm.getelementptr"(%8654) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8659 = "llvm.load"(%8658) : (!llvm.ptr) -> !llvm.ptr
    %8660 = "llvm.getelementptr"(%8659) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8661 = "llvm.getelementptr"(%8659) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8662 = "llvm.getelementptr"(%8659) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8663 = "llvm.getelementptr"(%8659) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8664 = "llvm.load"(%8660) : (!llvm.ptr) -> i64
    %8665 = "llvm.load"(%8661) : (!llvm.ptr) -> i64
    %8666 = "llvm.load"(%8662) : (!llvm.ptr) -> !llvm.ptr
    %8667 = "llvm.load"(%8663) : (!llvm.ptr) -> !llvm.ptr
    %8668 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8669 = "llvm.ptrtoint"(%8668) : (!llvm.ptr) -> i64
    %8670 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8671 = "mini.subtype"(%8666, %8665, %8664, %8670, %8669, %8667) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8671) [^bb1006, ^bb1006] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1007:
    %8672 = "llvm.extractvalue"(%8653) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8673 = "llvm.load"(%8656) : (!llvm.ptr) -> i32
    %8674 = "llvm.getelementptr"(%8672, %8673) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8675 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8676 = "llvm.getelementptr"(%8674, %8675) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8676) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1008(%8677 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8678 : !llvm.ptr):
    %8679 = "mini.invariant"(%8678) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8680 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1009] : () -> ()
  ^bb1010:
    %8681 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%8681, %8680) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1011] : () -> ()
  ^bb1009:
    %8682 = "llvm.getelementptr"(%8678) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8683 = "llvm.load"(%8682) : (!llvm.ptr) -> !llvm.ptr
    %8684 = "llvm.getelementptr"(%8683) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8685 = "llvm.getelementptr"(%8683) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8686 = "llvm.getelementptr"(%8683) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8687 = "llvm.getelementptr"(%8683) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8688 = "llvm.load"(%8684) : (!llvm.ptr) -> i64
    %8689 = "llvm.load"(%8685) : (!llvm.ptr) -> i64
    %8690 = "llvm.load"(%8686) : (!llvm.ptr) -> !llvm.ptr
    %8691 = "llvm.load"(%8687) : (!llvm.ptr) -> !llvm.ptr
    %8692 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8693 = "llvm.ptrtoint"(%8692) : (!llvm.ptr) -> i64
    %8694 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8695 = "mini.subtype"(%8690, %8689, %8688, %8694, %8693, %8691) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8695) [^bb1010, ^bb1010] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1011:
    %8696 = "llvm.extractvalue"(%8677) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8697 = "llvm.load"(%8680) : (!llvm.ptr) -> i32
    %8698 = "llvm.getelementptr"(%8696, %8697) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8699 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8700 = "llvm.getelementptr"(%8698, %8699) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8700) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_FilterIterator2", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FilterIterator2_field_FilterIterator2_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterator2_getter_iterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2FilterIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterator2_setter_iterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2FilterIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterator2_field_iterator", "getter_name" = "FilterIterator2_getter_iterator", "setter_name" = "FilterIterator2_setter_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterator2_getter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterator2.T_subtype_Any_to_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterator2_setter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterator2.T_subtype_Any_to_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterator2_field_f", "getter_name" = "FilterIterator2_getter_f", "setter_name" = "FilterIterator2_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb1012(%8701 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8702 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8703 : !llvm.ptr, %8704 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8705 : !llvm.struct<(!llvm.ptr)>):
    %8706 = "mini.wrap"(%8701) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %8707 = "mini.to_fat_ptr"(%8706) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator2", "to_typ_name" = "FilterIterator2", "invariant"} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %8708 = "mini.wrap"(%8704) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %8709 = "mini.to_fat_ptr"(%8708) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %8710 = "mini.to_fat_ptr"(%8709) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    "mini.set_field"(%8707, %8710) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> ()
    %8711 = "mini.wrap"(%8705) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
    %8712 = builtin.unrealized_conversion_cast %8711 : !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
    %8713 = builtin.unrealized_conversion_cast %8712 : !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
    "mini.set_field"(%8707, %8713) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>, !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>) -> ()
  }) {"func_name" = "FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1013(%8714 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8715 : !llvm.ptr):
    %8716 = "mini.invariant"(%8715) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8717 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1014] : () -> ()
  ^bb1015:
    %8718 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%8718, %8717) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1016] : () -> ()
  ^bb1017:
    %8719 = "llvm.getelementptr"(%8715) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8720 = "llvm.load"(%8719) : (!llvm.ptr) -> !llvm.ptr
    %8721 = "llvm.getelementptr"(%8720) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8722 = "llvm.getelementptr"(%8720) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8723 = "llvm.getelementptr"(%8720) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8724 = "llvm.getelementptr"(%8720) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8725 = "llvm.load"(%8721) : (!llvm.ptr) -> i64
    %8726 = "llvm.load"(%8722) : (!llvm.ptr) -> i64
    %8727 = "llvm.load"(%8723) : (!llvm.ptr) -> !llvm.ptr
    %8728 = "llvm.load"(%8724) : (!llvm.ptr) -> !llvm.ptr
    %8729 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8730 = "llvm.ptrtoint"(%8729) : (!llvm.ptr) -> i64
    %8731 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8732 = "mini.subtype"(%8727, %8726, %8725, %8731, %8730, %8728) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8732) [^bb1015, ^bb1015] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1014:
    %8733 = "llvm.getelementptr"(%8715) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8734 = "llvm.load"(%8733) : (!llvm.ptr) -> !llvm.ptr
    %8735 = "llvm.getelementptr"(%8734) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8736 = "llvm.getelementptr"(%8734) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8737 = "llvm.getelementptr"(%8734) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8738 = "llvm.getelementptr"(%8734) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8739 = "llvm.load"(%8735) : (!llvm.ptr) -> i64
    %8740 = "llvm.load"(%8736) : (!llvm.ptr) -> i64
    %8741 = "llvm.load"(%8737) : (!llvm.ptr) -> !llvm.ptr
    %8742 = "llvm.load"(%8738) : (!llvm.ptr) -> !llvm.ptr
    %8743 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %8744 = "llvm.ptrtoint"(%8743) : (!llvm.ptr) -> i64
    %8745 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %8746 = "mini.subtype"(%8741, %8740, %8739, %8745, %8744, %8742) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8746) [^bb1017, ^bb1017] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1016:
    %8747 = "llvm.extractvalue"(%8714) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8748 = "llvm.load"(%8717) : (!llvm.ptr) -> i32
    %8749 = "llvm.getelementptr"(%8747, %8748) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8750 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8751 = "llvm.getelementptr"(%8749, %8750) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8751) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1018(%8752 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8753 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8754 : !llvm.ptr):
    %8755 = "mini.wrap"(%8752) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %8756 = "mini.to_fat_ptr"(%8755) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator2", "to_typ_name" = "FilterIterator2", "invariant"} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %8757 = "mini.get_field"(%8756) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
    %8758 = "mini.unwrap"(%8757) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8759 = "mini.get_type_field"(%8756) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.reified_type
    %8760 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8761 = "mini.method_call"(%8760, %8758) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
    %8762 = builtin.unrealized_conversion_cast %8761 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>
    %8763 = builtin.unrealized_conversion_cast %8762 : !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>
    "mini.while"() ({
      %8764 = "mini.checkflag"(%8763) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>) -> i1
      %8765 = "mini.unwrap"(%8764) : (i1) -> i1
    }, {
      %8766 = "mini.to_fat_ptr"(%8763) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "FilterIterator2">
      %8767 = "mini.to_fat_ptr"(%8766) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "FilterIterator2">) -> !mini.type_param<"T", !mini.any, "FilterIterator2">
      %8768 = "mini.unwrap"(%8767) : (!mini.type_param<"T", !mini.any, "FilterIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %8769 = "mini.get_field"(%8756) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
      %8770 = "mini.unwrap"(%8769) : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator2">], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %8771 = "mini.fptr_call"(%8770, %8768) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.ptr<i1>
      %8772 = "mini.unwrap"(%8771) : (!mini.ptr<i1>) -> i1
      "mini.if"(%8772) ({
        %8773 = builtin.unrealized_conversion_cast %8766 : !mini.type_param<"T", !mini.any, "FilterIterator2"> to !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
        "mini.return"(%8773) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>) -> ()
      }) : (i1) -> ()
      %8774 = "mini.get_field"(%8756) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>
      %8775 = "mini.unwrap"(%8774) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %8776 = "mini.get_type_field"(%8756) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.any, "FilterIterator2">]>) -> !mini.reified_type
      %8777 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %8778 = "mini.method_call"(%8777, %8775) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
      %8779 = builtin.unrealized_conversion_cast %8778 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>
      "mini.castassign"(%8763, %8779) ({
        %8780 = builtin.unrealized_conversion_cast %8779 : !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator2">, !mini.nil]>) -> ()
    }) : () -> ()
    %8781 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %8782 = "mini.unionize"(%8781) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
    "mini.return"(%8782) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "FilterIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1019(%8783 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8784 : !llvm.ptr):
    %8785 = "mini.invariant"(%8784) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8786 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1020] : () -> ()
  ^bb1020:
    %8787 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%8787, %8786) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1021] : () -> ()
  ^bb1021:
    %8788 = "llvm.extractvalue"(%8783) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8789 = "llvm.load"(%8786) : (!llvm.ptr) -> i32
    %8790 = "llvm.getelementptr"(%8788, %8789) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8791 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8792 = "llvm.getelementptr"(%8790, %8791) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8792) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ChainIterable2", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ChainIterable2_field_ChainIterable2_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterable2_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ChainIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterable2_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ChainIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterable2_field_first", "getter_name" = "ChainIterable2_getter_first", "setter_name" = "ChainIterable2_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterable2_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ChainIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterable2_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ChainIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterable2_field_second", "getter_name" = "ChainIterable2_getter_second", "setter_name" = "ChainIterable2_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb1022(%8793 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8794 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8795 : !llvm.ptr, %8796 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8797 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8798 = "mini.wrap"(%8793) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8799 = "mini.to_fat_ptr"(%8798) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable2", "to_typ_name" = "ChainIterable2", "invariant"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8800 = "mini.wrap"(%8796) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8801 = "mini.to_fat_ptr"(%8800) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8802 = "mini.to_fat_ptr"(%8801) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    "mini.set_field"(%8799, %8802) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> ()
    %8803 = "mini.wrap"(%8797) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8804 = "mini.to_fat_ptr"(%8803) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8805 = "mini.to_fat_ptr"(%8804) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    "mini.set_field"(%8799, %8805) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> ()
  }) {"func_name" = "ChainIterable2_init_firstIterable2T_secondIterable2T", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1023(%8806 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8807 : !llvm.ptr):
    %8808 = "mini.invariant"(%8807) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8809 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1024] : () -> ()
  ^bb1025:
    %8810 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%8810, %8809) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1026] : () -> ()
  ^bb1027:
    %8811 = "llvm.getelementptr"(%8807) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8812 = "llvm.load"(%8811) : (!llvm.ptr) -> !llvm.ptr
    %8813 = "llvm.getelementptr"(%8812) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8814 = "llvm.getelementptr"(%8812) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8815 = "llvm.getelementptr"(%8812) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8816 = "llvm.getelementptr"(%8812) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8817 = "llvm.load"(%8813) : (!llvm.ptr) -> i64
    %8818 = "llvm.load"(%8814) : (!llvm.ptr) -> i64
    %8819 = "llvm.load"(%8815) : (!llvm.ptr) -> !llvm.ptr
    %8820 = "llvm.load"(%8816) : (!llvm.ptr) -> !llvm.ptr
    %8821 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8822 = "llvm.ptrtoint"(%8821) : (!llvm.ptr) -> i64
    %8823 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8824 = "mini.subtype"(%8819, %8818, %8817, %8823, %8822, %8820) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8824) [^bb1025, ^bb1025] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1024:
    %8825 = "llvm.getelementptr"(%8807) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8826 = "llvm.load"(%8825) : (!llvm.ptr) -> !llvm.ptr
    %8827 = "llvm.getelementptr"(%8826) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8828 = "llvm.getelementptr"(%8826) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8829 = "llvm.getelementptr"(%8826) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8830 = "llvm.getelementptr"(%8826) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8831 = "llvm.load"(%8827) : (!llvm.ptr) -> i64
    %8832 = "llvm.load"(%8828) : (!llvm.ptr) -> i64
    %8833 = "llvm.load"(%8829) : (!llvm.ptr) -> !llvm.ptr
    %8834 = "llvm.load"(%8830) : (!llvm.ptr) -> !llvm.ptr
    %8835 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8836 = "llvm.ptrtoint"(%8835) : (!llvm.ptr) -> i64
    %8837 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8838 = "mini.subtype"(%8833, %8832, %8831, %8837, %8836, %8834) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8838) [^bb1027, ^bb1027] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1026:
    %8839 = "llvm.extractvalue"(%8806) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8840 = "llvm.load"(%8809) : (!llvm.ptr) -> i32
    %8841 = "llvm.getelementptr"(%8839, %8840) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8842 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8843 = "llvm.getelementptr"(%8841, %8842) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8843) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_init_firstIterable2T_secondIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1028(%8844 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8845 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8846 : !llvm.ptr):
    %8847 = "mini.wrap"(%8844) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8848 = "mini.to_fat_ptr"(%8847) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable2", "to_typ_name" = "ChainIterable2", "invariant"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8849 = "mini.get_field"(%8848) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8850 = "mini.unwrap"(%8849) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8851 = "mini.get_type_field"(%8848) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.reified_type
    %8852 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8853 = "mini.method_call"(%8852, %8850) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %8854 = "mini.to_fat_ptr"(%8853) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8855 = "mini.get_field"(%8848) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8856 = "mini.unwrap"(%8855) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8857 = "mini.get_type_field"(%8848) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.reified_type
    %8858 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8859 = "mini.method_call"(%8858, %8856) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %8860 = "mini.to_fat_ptr"(%8859) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8861 = "mini.unwrap"(%8854) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8862 = "mini.unwrap"(%8860) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8863 = "mini.get_type_field"(%8848) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.reified_type
    %8864 = "mini.parameterization"(%8863) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["ChainIterable2.T_subtype_Any"]} : (!mini.reified_type) -> !llvm.ptr
    %8865 = "mini.new"(%8864) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "ChainIterator2", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8866 = "mini.get_field"(%8848) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8867 = "mini.unwrap"(%8866) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8868 = "mini.get_type_field"(%8848) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.reified_type
    %8869 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8870 = "mini.method_call"(%8869, %8867) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %8871 = "mini.to_fat_ptr"(%8870) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8872 = "mini.get_field"(%8848) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8873 = "mini.unwrap"(%8872) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8874 = "mini.get_type_field"(%8848) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.reified_type
    %8875 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8876 = "mini.method_call"(%8875, %8873) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %8877 = "mini.to_fat_ptr"(%8876) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>
    %8878 = "mini.to_fat_ptr"(%8871) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %8879 = "mini.unwrap"(%8878) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8880 = "mini.to_fat_ptr"(%8877) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %8881 = "mini.unwrap"(%8880) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8882 = "mini.unwrap"(%8865) : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8883 = "mini.get_type_field"(%8848) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.reified_type
    %8884 = "mini.parameterization"(%8883) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2ChainIterable2.T_subtype_Any", ["ChainIterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %8885 = "mini.parameterization"(%8883) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2ChainIterable2.T_subtype_Any", ["ChainIterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %8886 = "mini.parameterizations_array"(%8884, %8885) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8886, %8882, %8879, %8881) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %8887 = "mini.to_fat_ptr"(%8865) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%8887) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "ChainIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1029(%8888 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8889 : !llvm.ptr):
    %8890 = "mini.invariant"(%8889) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8891 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1030] : () -> ()
  ^bb1030:
    %8892 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%8892, %8891) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1031] : () -> ()
  ^bb1031:
    %8893 = "llvm.extractvalue"(%8888) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8894 = "llvm.load"(%8891) : (!llvm.ptr) -> i32
    %8895 = "llvm.getelementptr"(%8893, %8894) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8896 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8897 = "llvm.getelementptr"(%8895, %8896) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8897) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1032(%8898 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8899 : !llvm.ptr):
    %8900 = "mini.invariant"(%8899) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8901 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1033] : () -> ()
  ^bb1034:
    %8902 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%8902, %8901) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1035] : () -> ()
  ^bb1033:
    %8903 = "llvm.getelementptr"(%8899) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8904 = "llvm.load"(%8903) : (!llvm.ptr) -> !llvm.ptr
    %8905 = "llvm.getelementptr"(%8904) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8906 = "llvm.getelementptr"(%8904) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8907 = "llvm.getelementptr"(%8904) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8908 = "llvm.getelementptr"(%8904) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8909 = "llvm.load"(%8905) : (!llvm.ptr) -> i64
    %8910 = "llvm.load"(%8906) : (!llvm.ptr) -> i64
    %8911 = "llvm.load"(%8907) : (!llvm.ptr) -> !llvm.ptr
    %8912 = "llvm.load"(%8908) : (!llvm.ptr) -> !llvm.ptr
    %8913 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8914 = "llvm.ptrtoint"(%8913) : (!llvm.ptr) -> i64
    %8915 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8916 = "mini.subtype"(%8911, %8910, %8909, %8915, %8914, %8912) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8916) [^bb1034, ^bb1034] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1035:
    %8917 = "llvm.extractvalue"(%8898) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8918 = "llvm.load"(%8901) : (!llvm.ptr) -> i32
    %8919 = "llvm.getelementptr"(%8917, %8918) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8920 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8921 = "llvm.getelementptr"(%8919, %8920) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8921) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1036(%8922 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8923 : !llvm.ptr):
    %8924 = "mini.invariant"(%8923) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8925 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1037] : () -> ()
  ^bb1038:
    %8926 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%8926, %8925) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1039] : () -> ()
  ^bb1040:
    %8927 = "llvm.getelementptr"(%8923) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8928 = "llvm.load"(%8927) : (!llvm.ptr) -> !llvm.ptr
    %8929 = "llvm.getelementptr"(%8928) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8930 = "llvm.getelementptr"(%8928) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8931 = "llvm.getelementptr"(%8928) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8932 = "llvm.getelementptr"(%8928) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8933 = "llvm.load"(%8929) : (!llvm.ptr) -> i64
    %8934 = "llvm.load"(%8930) : (!llvm.ptr) -> i64
    %8935 = "llvm.load"(%8931) : (!llvm.ptr) -> !llvm.ptr
    %8936 = "llvm.load"(%8932) : (!llvm.ptr) -> !llvm.ptr
    %8937 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8938 = "llvm.ptrtoint"(%8937) : (!llvm.ptr) -> i64
    %8939 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8940 = "mini.subtype"(%8935, %8934, %8933, %8939, %8938, %8936) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8940) [^bb1038, ^bb1038] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1037:
    %8941 = "llvm.getelementptr"(%8923) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8942 = "llvm.load"(%8941) : (!llvm.ptr) -> !llvm.ptr
    %8943 = "llvm.getelementptr"(%8942) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8944 = "llvm.getelementptr"(%8942) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8945 = "llvm.getelementptr"(%8942) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8946 = "llvm.getelementptr"(%8942) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8947 = "llvm.load"(%8943) : (!llvm.ptr) -> i64
    %8948 = "llvm.load"(%8944) : (!llvm.ptr) -> i64
    %8949 = "llvm.load"(%8945) : (!llvm.ptr) -> !llvm.ptr
    %8950 = "llvm.load"(%8946) : (!llvm.ptr) -> !llvm.ptr
    %8951 = "mini.addr_of"() {"global_name" = @any_typ} : () -> !llvm.ptr
    %8952 = "llvm.ptrtoint"(%8951) : (!llvm.ptr) -> i64
    %8953 = "llvm.mlir.constant"() <{"value" = 3084208142191802847 : i64}> : () -> i64
    %8954 = "mini.subtype"(%8949, %8948, %8947, %8953, %8952, %8950) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8954) [^bb1040, ^bb1040] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1039:
    %8955 = "llvm.extractvalue"(%8922) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8956 = "llvm.load"(%8925) : (!llvm.ptr) -> i32
    %8957 = "llvm.getelementptr"(%8955, %8956) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8958 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8959 = "llvm.getelementptr"(%8957, %8958) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8959) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1041(%8960 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8961 : !llvm.ptr):
    %8962 = "mini.invariant"(%8961) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8963 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1042] : () -> ()
  ^bb1043:
    %8964 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%8964, %8963) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1044] : () -> ()
  ^bb1042:
    %8965 = "llvm.getelementptr"(%8961) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8966 = "llvm.load"(%8965) : (!llvm.ptr) -> !llvm.ptr
    %8967 = "llvm.getelementptr"(%8966) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8968 = "llvm.getelementptr"(%8966) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8969 = "llvm.getelementptr"(%8966) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8970 = "llvm.getelementptr"(%8966) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8971 = "llvm.load"(%8967) : (!llvm.ptr) -> i64
    %8972 = "llvm.load"(%8968) : (!llvm.ptr) -> i64
    %8973 = "llvm.load"(%8969) : (!llvm.ptr) -> !llvm.ptr
    %8974 = "llvm.load"(%8970) : (!llvm.ptr) -> !llvm.ptr
    %8975 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8976 = "llvm.ptrtoint"(%8975) : (!llvm.ptr) -> i64
    %8977 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8978 = "mini.subtype"(%8973, %8972, %8971, %8977, %8976, %8974) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8978) [^bb1043, ^bb1043] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1044:
    %8979 = "llvm.extractvalue"(%8960) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8980 = "llvm.load"(%8963) : (!llvm.ptr) -> i32
    %8981 = "llvm.getelementptr"(%8979, %8980) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8982 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %8983 = "llvm.getelementptr"(%8981, %8982) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8983) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1045(%8984 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8985 : !llvm.ptr):
    %8986 = "mini.invariant"(%8985) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8987 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1046] : () -> ()
  ^bb1047:
    %8988 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%8988, %8987) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1048] : () -> ()
  ^bb1046:
    %8989 = "llvm.getelementptr"(%8985) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %8990 = "llvm.load"(%8989) : (!llvm.ptr) -> !llvm.ptr
    %8991 = "llvm.getelementptr"(%8990) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8992 = "llvm.getelementptr"(%8990) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8993 = "llvm.getelementptr"(%8990) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8994 = "llvm.getelementptr"(%8990) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8995 = "llvm.load"(%8991) : (!llvm.ptr) -> i64
    %8996 = "llvm.load"(%8992) : (!llvm.ptr) -> i64
    %8997 = "llvm.load"(%8993) : (!llvm.ptr) -> !llvm.ptr
    %8998 = "llvm.load"(%8994) : (!llvm.ptr) -> !llvm.ptr
    %8999 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9000 = "llvm.ptrtoint"(%8999) : (!llvm.ptr) -> i64
    %9001 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9002 = "mini.subtype"(%8997, %8996, %8995, %9001, %9000, %8998) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9002) [^bb1047, ^bb1047] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1048:
    %9003 = "llvm.extractvalue"(%8984) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9004 = "llvm.load"(%8987) : (!llvm.ptr) -> i32
    %9005 = "llvm.getelementptr"(%9003, %9004) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9006 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9007 = "llvm.getelementptr"(%9005, %9006) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9007) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1049(%9008 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9009 : !llvm.ptr):
    %9010 = "mini.invariant"(%9009) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9011 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1050] : () -> ()
  ^bb1051:
    %9012 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%9012, %9011) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1052] : () -> ()
  ^bb1050:
    %9013 = "llvm.getelementptr"(%9009) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9014 = "llvm.load"(%9013) : (!llvm.ptr) -> !llvm.ptr
    %9015 = "llvm.getelementptr"(%9014) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9016 = "llvm.getelementptr"(%9014) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9017 = "llvm.getelementptr"(%9014) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9018 = "llvm.getelementptr"(%9014) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9019 = "llvm.load"(%9015) : (!llvm.ptr) -> i64
    %9020 = "llvm.load"(%9016) : (!llvm.ptr) -> i64
    %9021 = "llvm.load"(%9017) : (!llvm.ptr) -> !llvm.ptr
    %9022 = "llvm.load"(%9018) : (!llvm.ptr) -> !llvm.ptr
    %9023 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9024 = "llvm.ptrtoint"(%9023) : (!llvm.ptr) -> i64
    %9025 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9026 = "mini.subtype"(%9021, %9020, %9019, %9025, %9024, %9022) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9026) [^bb1051, ^bb1051] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1052:
    %9027 = "llvm.extractvalue"(%9008) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9028 = "llvm.load"(%9011) : (!llvm.ptr) -> i32
    %9029 = "llvm.getelementptr"(%9027, %9028) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9030 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9031 = "llvm.getelementptr"(%9029, %9030) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9031) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1053(%9032 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9033 : !llvm.ptr):
    %9034 = "mini.invariant"(%9033) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9035 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1054] : () -> ()
  ^bb1055:
    %9036 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%9036, %9035) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1056] : () -> ()
  ^bb1054:
    %9037 = "llvm.getelementptr"(%9033) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9038 = "llvm.load"(%9037) : (!llvm.ptr) -> !llvm.ptr
    %9039 = "llvm.getelementptr"(%9038) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9040 = "llvm.getelementptr"(%9038) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9041 = "llvm.getelementptr"(%9038) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9042 = "llvm.getelementptr"(%9038) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9043 = "llvm.load"(%9039) : (!llvm.ptr) -> i64
    %9044 = "llvm.load"(%9040) : (!llvm.ptr) -> i64
    %9045 = "llvm.load"(%9041) : (!llvm.ptr) -> !llvm.ptr
    %9046 = "llvm.load"(%9042) : (!llvm.ptr) -> !llvm.ptr
    %9047 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9048 = "llvm.ptrtoint"(%9047) : (!llvm.ptr) -> i64
    %9049 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9050 = "mini.subtype"(%9045, %9044, %9043, %9049, %9048, %9046) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9050) [^bb1055, ^bb1055] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1056:
    %9051 = "llvm.extractvalue"(%9032) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9052 = "llvm.load"(%9035) : (!llvm.ptr) -> i32
    %9053 = "llvm.getelementptr"(%9051, %9052) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9054 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9055 = "llvm.getelementptr"(%9053, %9054) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9055) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1057(%9056 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9057 : !llvm.ptr):
    %9058 = "mini.invariant"(%9057) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9059 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1058] : () -> ()
  ^bb1059:
    %9060 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%9060, %9059) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1060] : () -> ()
  ^bb1058:
    %9061 = "llvm.getelementptr"(%9057) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9062 = "llvm.load"(%9061) : (!llvm.ptr) -> !llvm.ptr
    %9063 = "llvm.getelementptr"(%9062) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9064 = "llvm.getelementptr"(%9062) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9065 = "llvm.getelementptr"(%9062) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9066 = "llvm.getelementptr"(%9062) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9067 = "llvm.load"(%9063) : (!llvm.ptr) -> i64
    %9068 = "llvm.load"(%9064) : (!llvm.ptr) -> i64
    %9069 = "llvm.load"(%9065) : (!llvm.ptr) -> !llvm.ptr
    %9070 = "llvm.load"(%9066) : (!llvm.ptr) -> !llvm.ptr
    %9071 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9072 = "llvm.ptrtoint"(%9071) : (!llvm.ptr) -> i64
    %9073 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9074 = "mini.subtype"(%9069, %9068, %9067, %9073, %9072, %9070) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9074) [^bb1059, ^bb1059] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1060:
    %9075 = "llvm.extractvalue"(%9056) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9076 = "llvm.load"(%9059) : (!llvm.ptr) -> i32
    %9077 = "llvm.getelementptr"(%9075, %9076) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9078 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9079 = "llvm.getelementptr"(%9077, %9078) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9079) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1061(%9080 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9081 : !llvm.ptr):
    %9082 = "mini.invariant"(%9081) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9083 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1062] : () -> ()
  ^bb1063:
    %9084 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%9084, %9083) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1064] : () -> ()
  ^bb1062:
    %9085 = "llvm.getelementptr"(%9081) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9086 = "llvm.load"(%9085) : (!llvm.ptr) -> !llvm.ptr
    %9087 = "llvm.getelementptr"(%9086) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9088 = "llvm.getelementptr"(%9086) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9089 = "llvm.getelementptr"(%9086) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9090 = "llvm.getelementptr"(%9086) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9091 = "llvm.load"(%9087) : (!llvm.ptr) -> i64
    %9092 = "llvm.load"(%9088) : (!llvm.ptr) -> i64
    %9093 = "llvm.load"(%9089) : (!llvm.ptr) -> !llvm.ptr
    %9094 = "llvm.load"(%9090) : (!llvm.ptr) -> !llvm.ptr
    %9095 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9096 = "llvm.ptrtoint"(%9095) : (!llvm.ptr) -> i64
    %9097 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9098 = "mini.subtype"(%9093, %9092, %9091, %9097, %9096, %9094) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9098) [^bb1063, ^bb1063] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1064:
    %9099 = "llvm.extractvalue"(%9080) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9100 = "llvm.load"(%9083) : (!llvm.ptr) -> i32
    %9101 = "llvm.getelementptr"(%9099, %9100) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9102 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9103 = "llvm.getelementptr"(%9101, %9102) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9103) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1065(%9104 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9105 : !llvm.ptr):
    %9106 = "mini.invariant"(%9105) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9107 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1066] : () -> ()
  ^bb1067:
    %9108 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%9108, %9107) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1068] : () -> ()
  ^bb1066:
    %9109 = "llvm.getelementptr"(%9105) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9110 = "llvm.load"(%9109) : (!llvm.ptr) -> !llvm.ptr
    %9111 = "llvm.getelementptr"(%9110) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9112 = "llvm.getelementptr"(%9110) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9113 = "llvm.getelementptr"(%9110) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9114 = "llvm.getelementptr"(%9110) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9115 = "llvm.load"(%9111) : (!llvm.ptr) -> i64
    %9116 = "llvm.load"(%9112) : (!llvm.ptr) -> i64
    %9117 = "llvm.load"(%9113) : (!llvm.ptr) -> !llvm.ptr
    %9118 = "llvm.load"(%9114) : (!llvm.ptr) -> !llvm.ptr
    %9119 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9120 = "llvm.ptrtoint"(%9119) : (!llvm.ptr) -> i64
    %9121 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9122 = "mini.subtype"(%9117, %9116, %9115, %9121, %9120, %9118) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9122) [^bb1067, ^bb1067] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1068:
    %9123 = "llvm.extractvalue"(%9104) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9124 = "llvm.load"(%9107) : (!llvm.ptr) -> i32
    %9125 = "llvm.getelementptr"(%9123, %9124) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9126 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9127 = "llvm.getelementptr"(%9125, %9126) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9127) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1069(%9128 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9129 : !llvm.ptr):
    %9130 = "mini.invariant"(%9129) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9131 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1070] : () -> ()
  ^bb1071:
    %9132 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%9132, %9131) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1072] : () -> ()
  ^bb1070:
    %9133 = "llvm.getelementptr"(%9129) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9134 = "llvm.load"(%9133) : (!llvm.ptr) -> !llvm.ptr
    %9135 = "llvm.getelementptr"(%9134) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9136 = "llvm.getelementptr"(%9134) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9137 = "llvm.getelementptr"(%9134) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9138 = "llvm.getelementptr"(%9134) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9139 = "llvm.load"(%9135) : (!llvm.ptr) -> i64
    %9140 = "llvm.load"(%9136) : (!llvm.ptr) -> i64
    %9141 = "llvm.load"(%9137) : (!llvm.ptr) -> !llvm.ptr
    %9142 = "llvm.load"(%9138) : (!llvm.ptr) -> !llvm.ptr
    %9143 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9144 = "llvm.ptrtoint"(%9143) : (!llvm.ptr) -> i64
    %9145 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9146 = "mini.subtype"(%9141, %9140, %9139, %9145, %9144, %9142) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9146) [^bb1071, ^bb1071] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1072:
    %9147 = "llvm.extractvalue"(%9128) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9148 = "llvm.load"(%9131) : (!llvm.ptr) -> i32
    %9149 = "llvm.getelementptr"(%9147, %9148) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9150 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9151 = "llvm.getelementptr"(%9149, %9150) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9151) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ChainIterator2", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ChainIterator2_field_ChainIterator2_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator2_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ChainIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator2_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ChainIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator2_field_first", "getter_name" = "ChainIterator2_getter_first", "setter_name" = "ChainIterator2_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator2_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ChainIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator2_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ChainIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator2_field_second", "getter_name" = "ChainIterator2_getter_second", "setter_name" = "ChainIterator2_setter_second"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator2_getter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator2_setter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator2_field_on_first", "getter_name" = "ChainIterator2_getter_on_first", "setter_name" = "ChainIterator2_setter_on_first"} : () -> ()
  "mini.func"() ({
  ^bb1073(%9152 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9153 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9154 : !llvm.ptr, %9155 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9156 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9157 = "mini.wrap"(%9152) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %9158 = "mini.to_fat_ptr"(%9157) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator2", "to_typ_name" = "ChainIterator2", "invariant"} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %9159 = "mini.wrap"(%9155) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %9160 = "mini.to_fat_ptr"(%9159) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %9161 = "mini.to_fat_ptr"(%9160) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    "mini.set_field"(%9158, %9161) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> ()
    %9162 = "mini.wrap"(%9156) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %9163 = "mini.to_fat_ptr"(%9162) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %9164 = "mini.to_fat_ptr"(%9163) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    "mini.set_field"(%9158, %9164) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> ()
    %9165 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %9166 = builtin.unrealized_conversion_cast %9165 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.set_field"(%9158, %9166) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>, !mini.ptr<i1>) -> ()
  }) {"func_name" = "ChainIterator2_init_firstIterator2T_secondIterator2T", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1074(%9167 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9168 : !llvm.ptr):
    %9169 = "mini.invariant"(%9168) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9170 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1075] : () -> ()
  ^bb1076:
    %9171 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%9171, %9170) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1077] : () -> ()
  ^bb1078:
    %9172 = "llvm.getelementptr"(%9168) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9173 = "llvm.load"(%9172) : (!llvm.ptr) -> !llvm.ptr
    %9174 = "llvm.getelementptr"(%9173) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9175 = "llvm.getelementptr"(%9173) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9176 = "llvm.getelementptr"(%9173) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9177 = "llvm.getelementptr"(%9173) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9178 = "llvm.load"(%9174) : (!llvm.ptr) -> i64
    %9179 = "llvm.load"(%9175) : (!llvm.ptr) -> i64
    %9180 = "llvm.load"(%9176) : (!llvm.ptr) -> !llvm.ptr
    %9181 = "llvm.load"(%9177) : (!llvm.ptr) -> !llvm.ptr
    %9182 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %9183 = "llvm.ptrtoint"(%9182) : (!llvm.ptr) -> i64
    %9184 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %9185 = "mini.subtype"(%9180, %9179, %9178, %9184, %9183, %9181) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9185) [^bb1076, ^bb1076] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1075:
    %9186 = "llvm.getelementptr"(%9168) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9187 = "llvm.load"(%9186) : (!llvm.ptr) -> !llvm.ptr
    %9188 = "llvm.getelementptr"(%9187) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9189 = "llvm.getelementptr"(%9187) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9190 = "llvm.getelementptr"(%9187) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9191 = "llvm.getelementptr"(%9187) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9192 = "llvm.load"(%9188) : (!llvm.ptr) -> i64
    %9193 = "llvm.load"(%9189) : (!llvm.ptr) -> i64
    %9194 = "llvm.load"(%9190) : (!llvm.ptr) -> !llvm.ptr
    %9195 = "llvm.load"(%9191) : (!llvm.ptr) -> !llvm.ptr
    %9196 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %9197 = "llvm.ptrtoint"(%9196) : (!llvm.ptr) -> i64
    %9198 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %9199 = "mini.subtype"(%9194, %9193, %9192, %9198, %9197, %9195) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9199) [^bb1078, ^bb1078] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1077:
    %9200 = "llvm.extractvalue"(%9167) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9201 = "llvm.load"(%9170) : (!llvm.ptr) -> i32
    %9202 = "llvm.getelementptr"(%9200, %9201) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9203 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9204 = "llvm.getelementptr"(%9202, %9203) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9204) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterator2_B_init_firstIterator2T_secondIterator2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1079(%9205 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9206 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9207 : !llvm.ptr):
    %9208 = "mini.wrap"(%9205) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %9209 = "mini.to_fat_ptr"(%9208) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator2", "to_typ_name" = "ChainIterator2", "invariant"} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %9210 = "mini.get_field"(%9209) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.ptr<i1>
    %9211 = "mini.unwrap"(%9210) : (!mini.ptr<i1>) -> i1
    "mini.if"(%9211) ({
      %9212 = "mini.get_field"(%9209) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
      %9213 = "mini.unwrap"(%9212) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9214 = "mini.get_type_field"(%9209) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.reified_type
      %9215 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %9216 = "mini.method_call"(%9215, %9213) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
      %9217 = builtin.unrealized_conversion_cast %9216 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]>
      %9218 = "mini.checkflag"(%9217) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]>) -> i1
      %9219 = "mini.unwrap"(%9218) : (i1) -> i1
      %9220 = builtin.unrealized_conversion_cast %9217 : !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]>
      "mini.if"(%9219) ({
        %9221 = "mini.to_fat_ptr"(%9220) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "ChainIterator2">
        %9222 = builtin.unrealized_conversion_cast %9221 : !mini.type_param<"T", !mini.any, "ChainIterator2"> to !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
        "mini.return"(%9222) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>) -> ()
        "mini.castassign"(%9220, %9221) ({
          %9223 = builtin.unrealized_conversion_cast %9221 : !mini.type_param<"T", !mini.any, "ChainIterator2"> to !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]>
        }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]>, !mini.type_param<"T", !mini.any, "ChainIterator2">) -> ()
      }) : (i1) -> ()
      %9224 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %9225 = builtin.unrealized_conversion_cast %9224 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.set_field"(%9209, %9225) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>, !mini.ptr<i1>) -> ()
    }) : (i1) -> ()
    %9226 = "mini.get_field"(%9209) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>
    %9227 = "mini.unwrap"(%9226) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9228 = "mini.get_type_field"(%9209) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.any, "ChainIterator2">]>) -> !mini.reified_type
    %9229 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9230 = "mini.method_call"(%9229, %9227) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
    %9231 = builtin.unrealized_conversion_cast %9230 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]>
    %9232 = builtin.unrealized_conversion_cast %9231 : !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
    "mini.return"(%9232) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "ChainIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1080(%9233 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9234 : !llvm.ptr):
    %9235 = "mini.invariant"(%9234) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9236 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1081] : () -> ()
  ^bb1081:
    %9237 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%9237, %9236) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1082] : () -> ()
  ^bb1082:
    %9238 = "llvm.extractvalue"(%9233) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9239 = "llvm.load"(%9236) : (!llvm.ptr) -> i32
    %9240 = "llvm.getelementptr"(%9238, %9239) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9241 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9242 = "llvm.getelementptr"(%9240, %9241) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9242) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_InterleaveIterable2", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "InterleaveIterable2_field_InterleaveIterable2_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterable2_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2InterleaveIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterable2_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2InterleaveIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterable2_field_first", "getter_name" = "InterleaveIterable2_getter_first", "setter_name" = "InterleaveIterable2_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterable2_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2InterleaveIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterable2_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2InterleaveIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterable2_field_second", "getter_name" = "InterleaveIterable2_getter_second", "setter_name" = "InterleaveIterable2_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb1083(%9243 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9244 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9245 : !llvm.ptr, %9246 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9247 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9248 = "mini.wrap"(%9243) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9249 = "mini.to_fat_ptr"(%9248) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable2", "to_typ_name" = "InterleaveIterable2", "invariant"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9250 = "mini.wrap"(%9246) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9251 = "mini.to_fat_ptr"(%9250) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9252 = "mini.to_fat_ptr"(%9251) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    "mini.set_field"(%9249, %9252) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> ()
    %9253 = "mini.wrap"(%9247) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9254 = "mini.to_fat_ptr"(%9253) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9255 = "mini.to_fat_ptr"(%9254) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    "mini.set_field"(%9249, %9255) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> ()
  }) {"func_name" = "InterleaveIterable2_init_firstIterable2T_secondIterable2T", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1084(%9256 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9257 : !llvm.ptr):
    %9258 = "mini.invariant"(%9257) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9259 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1085] : () -> ()
  ^bb1086:
    %9260 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%9260, %9259) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1087] : () -> ()
  ^bb1088:
    %9261 = "llvm.getelementptr"(%9257) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9262 = "llvm.load"(%9261) : (!llvm.ptr) -> !llvm.ptr
    %9263 = "llvm.getelementptr"(%9262) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9264 = "llvm.getelementptr"(%9262) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9265 = "llvm.getelementptr"(%9262) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9266 = "llvm.getelementptr"(%9262) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9267 = "llvm.load"(%9263) : (!llvm.ptr) -> i64
    %9268 = "llvm.load"(%9264) : (!llvm.ptr) -> i64
    %9269 = "llvm.load"(%9265) : (!llvm.ptr) -> !llvm.ptr
    %9270 = "llvm.load"(%9266) : (!llvm.ptr) -> !llvm.ptr
    %9271 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9272 = "llvm.ptrtoint"(%9271) : (!llvm.ptr) -> i64
    %9273 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9274 = "mini.subtype"(%9269, %9268, %9267, %9273, %9272, %9270) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9274) [^bb1086, ^bb1086] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1085:
    %9275 = "llvm.getelementptr"(%9257) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9276 = "llvm.load"(%9275) : (!llvm.ptr) -> !llvm.ptr
    %9277 = "llvm.getelementptr"(%9276) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9278 = "llvm.getelementptr"(%9276) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9279 = "llvm.getelementptr"(%9276) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9280 = "llvm.getelementptr"(%9276) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9281 = "llvm.load"(%9277) : (!llvm.ptr) -> i64
    %9282 = "llvm.load"(%9278) : (!llvm.ptr) -> i64
    %9283 = "llvm.load"(%9279) : (!llvm.ptr) -> !llvm.ptr
    %9284 = "llvm.load"(%9280) : (!llvm.ptr) -> !llvm.ptr
    %9285 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9286 = "llvm.ptrtoint"(%9285) : (!llvm.ptr) -> i64
    %9287 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9288 = "mini.subtype"(%9283, %9282, %9281, %9287, %9286, %9284) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9288) [^bb1088, ^bb1088] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1087:
    %9289 = "llvm.extractvalue"(%9256) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9290 = "llvm.load"(%9259) : (!llvm.ptr) -> i32
    %9291 = "llvm.getelementptr"(%9289, %9290) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9292 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9293 = "llvm.getelementptr"(%9291, %9292) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9293) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_init_firstIterable2T_secondIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1089(%9294 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9295 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9296 : !llvm.ptr):
    %9297 = "mini.wrap"(%9294) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9298 = "mini.to_fat_ptr"(%9297) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable2", "to_typ_name" = "InterleaveIterable2", "invariant"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9299 = "mini.get_field"(%9298) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9300 = "mini.unwrap"(%9299) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9301 = "mini.get_type_field"(%9298) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.reified_type
    %9302 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9303 = "mini.method_call"(%9302, %9300) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %9304 = "mini.to_fat_ptr"(%9303) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9305 = "mini.get_field"(%9298) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9306 = "mini.unwrap"(%9305) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9307 = "mini.get_type_field"(%9298) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.reified_type
    %9308 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9309 = "mini.method_call"(%9308, %9306) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %9310 = "mini.to_fat_ptr"(%9309) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9311 = "mini.unwrap"(%9304) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9312 = "mini.unwrap"(%9310) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9313 = "mini.get_type_field"(%9298) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.reified_type
    %9314 = "mini.parameterization"(%9313) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["InterleaveIterable2.T_subtype_Any"]} : (!mini.reified_type) -> !llvm.ptr
    %9315 = "mini.new"(%9314) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "InterleaveIterator2", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9316 = "mini.get_field"(%9298) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9317 = "mini.unwrap"(%9316) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9318 = "mini.get_type_field"(%9298) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.reified_type
    %9319 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9320 = "mini.method_call"(%9319, %9317) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %9321 = "mini.to_fat_ptr"(%9320) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9322 = "mini.get_field"(%9298) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9323 = "mini.unwrap"(%9322) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9324 = "mini.get_type_field"(%9298) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.reified_type
    %9325 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9326 = "mini.method_call"(%9325, %9323) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %9327 = "mini.to_fat_ptr"(%9326) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>
    %9328 = "mini.to_fat_ptr"(%9321) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %9329 = "mini.unwrap"(%9328) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9330 = "mini.to_fat_ptr"(%9327) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %9331 = "mini.unwrap"(%9330) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9332 = "mini.unwrap"(%9315) : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9333 = "mini.get_type_field"(%9298) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.reified_type
    %9334 = "mini.parameterization"(%9333) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2InterleaveIterable2.T_subtype_Any", ["InterleaveIterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %9335 = "mini.parameterization"(%9333) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2InterleaveIterable2.T_subtype_Any", ["InterleaveIterable2.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %9336 = "mini.parameterizations_array"(%9334, %9335) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9336, %9332, %9329, %9331) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %9337 = "mini.to_fat_ptr"(%9315) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%9337) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "InterleaveIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1090(%9338 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9339 : !llvm.ptr):
    %9340 = "mini.invariant"(%9339) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9341 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1091] : () -> ()
  ^bb1091:
    %9342 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%9342, %9341) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1092] : () -> ()
  ^bb1092:
    %9343 = "llvm.extractvalue"(%9338) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9344 = "llvm.load"(%9341) : (!llvm.ptr) -> i32
    %9345 = "llvm.getelementptr"(%9343, %9344) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9346 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9347 = "llvm.getelementptr"(%9345, %9346) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9347) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1093(%9348 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9349 : !llvm.ptr):
    %9350 = "mini.invariant"(%9349) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9351 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1094] : () -> ()
  ^bb1095:
    %9352 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%9352, %9351) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1096] : () -> ()
  ^bb1094:
    %9353 = "llvm.getelementptr"(%9349) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9354 = "llvm.load"(%9353) : (!llvm.ptr) -> !llvm.ptr
    %9355 = "llvm.getelementptr"(%9354) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9356 = "llvm.getelementptr"(%9354) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9357 = "llvm.getelementptr"(%9354) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9358 = "llvm.getelementptr"(%9354) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9359 = "llvm.load"(%9355) : (!llvm.ptr) -> i64
    %9360 = "llvm.load"(%9356) : (!llvm.ptr) -> i64
    %9361 = "llvm.load"(%9357) : (!llvm.ptr) -> !llvm.ptr
    %9362 = "llvm.load"(%9358) : (!llvm.ptr) -> !llvm.ptr
    %9363 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9364 = "llvm.ptrtoint"(%9363) : (!llvm.ptr) -> i64
    %9365 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9366 = "mini.subtype"(%9361, %9360, %9359, %9365, %9364, %9362) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9366) [^bb1095, ^bb1095] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1096:
    %9367 = "llvm.extractvalue"(%9348) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9368 = "llvm.load"(%9351) : (!llvm.ptr) -> i32
    %9369 = "llvm.getelementptr"(%9367, %9368) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9370 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9371 = "llvm.getelementptr"(%9369, %9370) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9371) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1097(%9372 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9373 : !llvm.ptr):
    %9374 = "mini.invariant"(%9373) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9375 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1098] : () -> ()
  ^bb1099:
    %9376 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%9376, %9375) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1100] : () -> ()
  ^bb1101:
    %9377 = "llvm.getelementptr"(%9373) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9378 = "llvm.load"(%9377) : (!llvm.ptr) -> !llvm.ptr
    %9379 = "llvm.getelementptr"(%9378) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9380 = "llvm.getelementptr"(%9378) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9381 = "llvm.getelementptr"(%9378) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9382 = "llvm.getelementptr"(%9378) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9383 = "llvm.load"(%9379) : (!llvm.ptr) -> i64
    %9384 = "llvm.load"(%9380) : (!llvm.ptr) -> i64
    %9385 = "llvm.load"(%9381) : (!llvm.ptr) -> !llvm.ptr
    %9386 = "llvm.load"(%9382) : (!llvm.ptr) -> !llvm.ptr
    %9387 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9388 = "llvm.ptrtoint"(%9387) : (!llvm.ptr) -> i64
    %9389 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9390 = "mini.subtype"(%9385, %9384, %9383, %9389, %9388, %9386) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9390) [^bb1099, ^bb1099] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1098:
    %9391 = "llvm.getelementptr"(%9373) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9392 = "llvm.load"(%9391) : (!llvm.ptr) -> !llvm.ptr
    %9393 = "llvm.getelementptr"(%9392) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9394 = "llvm.getelementptr"(%9392) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9395 = "llvm.getelementptr"(%9392) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9396 = "llvm.getelementptr"(%9392) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9397 = "llvm.load"(%9393) : (!llvm.ptr) -> i64
    %9398 = "llvm.load"(%9394) : (!llvm.ptr) -> i64
    %9399 = "llvm.load"(%9395) : (!llvm.ptr) -> !llvm.ptr
    %9400 = "llvm.load"(%9396) : (!llvm.ptr) -> !llvm.ptr
    %9401 = "mini.addr_of"() {"global_name" = @any_typ} : () -> !llvm.ptr
    %9402 = "llvm.ptrtoint"(%9401) : (!llvm.ptr) -> i64
    %9403 = "llvm.mlir.constant"() <{"value" = 3084208142191802847 : i64}> : () -> i64
    %9404 = "mini.subtype"(%9399, %9398, %9397, %9403, %9402, %9400) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9404) [^bb1101, ^bb1101] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1100:
    %9405 = "llvm.extractvalue"(%9372) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9406 = "llvm.load"(%9375) : (!llvm.ptr) -> i32
    %9407 = "llvm.getelementptr"(%9405, %9406) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9408 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9409 = "llvm.getelementptr"(%9407, %9408) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9409) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1102(%9410 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9411 : !llvm.ptr):
    %9412 = "mini.invariant"(%9411) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9413 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1103] : () -> ()
  ^bb1104:
    %9414 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%9414, %9413) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1105] : () -> ()
  ^bb1103:
    %9415 = "llvm.getelementptr"(%9411) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9416 = "llvm.load"(%9415) : (!llvm.ptr) -> !llvm.ptr
    %9417 = "llvm.getelementptr"(%9416) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9418 = "llvm.getelementptr"(%9416) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9419 = "llvm.getelementptr"(%9416) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9420 = "llvm.getelementptr"(%9416) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9421 = "llvm.load"(%9417) : (!llvm.ptr) -> i64
    %9422 = "llvm.load"(%9418) : (!llvm.ptr) -> i64
    %9423 = "llvm.load"(%9419) : (!llvm.ptr) -> !llvm.ptr
    %9424 = "llvm.load"(%9420) : (!llvm.ptr) -> !llvm.ptr
    %9425 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9426 = "llvm.ptrtoint"(%9425) : (!llvm.ptr) -> i64
    %9427 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9428 = "mini.subtype"(%9423, %9422, %9421, %9427, %9426, %9424) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9428) [^bb1104, ^bb1104] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1105:
    %9429 = "llvm.extractvalue"(%9410) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9430 = "llvm.load"(%9413) : (!llvm.ptr) -> i32
    %9431 = "llvm.getelementptr"(%9429, %9430) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9432 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9433 = "llvm.getelementptr"(%9431, %9432) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9433) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1106(%9434 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9435 : !llvm.ptr):
    %9436 = "mini.invariant"(%9435) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9437 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1107] : () -> ()
  ^bb1108:
    %9438 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%9438, %9437) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1109] : () -> ()
  ^bb1107:
    %9439 = "llvm.getelementptr"(%9435) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9440 = "llvm.load"(%9439) : (!llvm.ptr) -> !llvm.ptr
    %9441 = "llvm.getelementptr"(%9440) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9442 = "llvm.getelementptr"(%9440) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9443 = "llvm.getelementptr"(%9440) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9444 = "llvm.getelementptr"(%9440) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9445 = "llvm.load"(%9441) : (!llvm.ptr) -> i64
    %9446 = "llvm.load"(%9442) : (!llvm.ptr) -> i64
    %9447 = "llvm.load"(%9443) : (!llvm.ptr) -> !llvm.ptr
    %9448 = "llvm.load"(%9444) : (!llvm.ptr) -> !llvm.ptr
    %9449 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9450 = "llvm.ptrtoint"(%9449) : (!llvm.ptr) -> i64
    %9451 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9452 = "mini.subtype"(%9447, %9446, %9445, %9451, %9450, %9448) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9452) [^bb1108, ^bb1108] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1109:
    %9453 = "llvm.extractvalue"(%9434) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9454 = "llvm.load"(%9437) : (!llvm.ptr) -> i32
    %9455 = "llvm.getelementptr"(%9453, %9454) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9456 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9457 = "llvm.getelementptr"(%9455, %9456) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9457) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1110(%9458 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9459 : !llvm.ptr):
    %9460 = "mini.invariant"(%9459) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9461 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1111] : () -> ()
  ^bb1112:
    %9462 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%9462, %9461) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1113] : () -> ()
  ^bb1111:
    %9463 = "llvm.getelementptr"(%9459) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9464 = "llvm.load"(%9463) : (!llvm.ptr) -> !llvm.ptr
    %9465 = "llvm.getelementptr"(%9464) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9466 = "llvm.getelementptr"(%9464) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9467 = "llvm.getelementptr"(%9464) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9468 = "llvm.getelementptr"(%9464) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9469 = "llvm.load"(%9465) : (!llvm.ptr) -> i64
    %9470 = "llvm.load"(%9466) : (!llvm.ptr) -> i64
    %9471 = "llvm.load"(%9467) : (!llvm.ptr) -> !llvm.ptr
    %9472 = "llvm.load"(%9468) : (!llvm.ptr) -> !llvm.ptr
    %9473 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9474 = "llvm.ptrtoint"(%9473) : (!llvm.ptr) -> i64
    %9475 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9476 = "mini.subtype"(%9471, %9470, %9469, %9475, %9474, %9472) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9476) [^bb1112, ^bb1112] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1113:
    %9477 = "llvm.extractvalue"(%9458) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9478 = "llvm.load"(%9461) : (!llvm.ptr) -> i32
    %9479 = "llvm.getelementptr"(%9477, %9478) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9480 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9481 = "llvm.getelementptr"(%9479, %9480) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9481) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1114(%9482 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9483 : !llvm.ptr):
    %9484 = "mini.invariant"(%9483) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9485 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1115] : () -> ()
  ^bb1116:
    %9486 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%9486, %9485) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1117] : () -> ()
  ^bb1115:
    %9487 = "llvm.getelementptr"(%9483) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9488 = "llvm.load"(%9487) : (!llvm.ptr) -> !llvm.ptr
    %9489 = "llvm.getelementptr"(%9488) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9490 = "llvm.getelementptr"(%9488) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9491 = "llvm.getelementptr"(%9488) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9492 = "llvm.getelementptr"(%9488) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9493 = "llvm.load"(%9489) : (!llvm.ptr) -> i64
    %9494 = "llvm.load"(%9490) : (!llvm.ptr) -> i64
    %9495 = "llvm.load"(%9491) : (!llvm.ptr) -> !llvm.ptr
    %9496 = "llvm.load"(%9492) : (!llvm.ptr) -> !llvm.ptr
    %9497 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9498 = "llvm.ptrtoint"(%9497) : (!llvm.ptr) -> i64
    %9499 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9500 = "mini.subtype"(%9495, %9494, %9493, %9499, %9498, %9496) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9500) [^bb1116, ^bb1116] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1117:
    %9501 = "llvm.extractvalue"(%9482) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9502 = "llvm.load"(%9485) : (!llvm.ptr) -> i32
    %9503 = "llvm.getelementptr"(%9501, %9502) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9504 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9505 = "llvm.getelementptr"(%9503, %9504) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9505) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1118(%9506 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9507 : !llvm.ptr):
    %9508 = "mini.invariant"(%9507) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9509 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1119] : () -> ()
  ^bb1120:
    %9510 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%9510, %9509) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1121] : () -> ()
  ^bb1119:
    %9511 = "llvm.getelementptr"(%9507) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9512 = "llvm.load"(%9511) : (!llvm.ptr) -> !llvm.ptr
    %9513 = "llvm.getelementptr"(%9512) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9514 = "llvm.getelementptr"(%9512) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9515 = "llvm.getelementptr"(%9512) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9516 = "llvm.getelementptr"(%9512) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9517 = "llvm.load"(%9513) : (!llvm.ptr) -> i64
    %9518 = "llvm.load"(%9514) : (!llvm.ptr) -> i64
    %9519 = "llvm.load"(%9515) : (!llvm.ptr) -> !llvm.ptr
    %9520 = "llvm.load"(%9516) : (!llvm.ptr) -> !llvm.ptr
    %9521 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9522 = "llvm.ptrtoint"(%9521) : (!llvm.ptr) -> i64
    %9523 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9524 = "mini.subtype"(%9519, %9518, %9517, %9523, %9522, %9520) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9524) [^bb1120, ^bb1120] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1121:
    %9525 = "llvm.extractvalue"(%9506) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9526 = "llvm.load"(%9509) : (!llvm.ptr) -> i32
    %9527 = "llvm.getelementptr"(%9525, %9526) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9528 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9529 = "llvm.getelementptr"(%9527, %9528) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9529) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1122(%9530 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9531 : !llvm.ptr):
    %9532 = "mini.invariant"(%9531) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9533 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1123] : () -> ()
  ^bb1124:
    %9534 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%9534, %9533) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1125] : () -> ()
  ^bb1123:
    %9535 = "llvm.getelementptr"(%9531) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9536 = "llvm.load"(%9535) : (!llvm.ptr) -> !llvm.ptr
    %9537 = "llvm.getelementptr"(%9536) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9538 = "llvm.getelementptr"(%9536) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9539 = "llvm.getelementptr"(%9536) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9540 = "llvm.getelementptr"(%9536) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9541 = "llvm.load"(%9537) : (!llvm.ptr) -> i64
    %9542 = "llvm.load"(%9538) : (!llvm.ptr) -> i64
    %9543 = "llvm.load"(%9539) : (!llvm.ptr) -> !llvm.ptr
    %9544 = "llvm.load"(%9540) : (!llvm.ptr) -> !llvm.ptr
    %9545 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9546 = "llvm.ptrtoint"(%9545) : (!llvm.ptr) -> i64
    %9547 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9548 = "mini.subtype"(%9543, %9542, %9541, %9547, %9546, %9544) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9548) [^bb1124, ^bb1124] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1125:
    %9549 = "llvm.extractvalue"(%9530) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9550 = "llvm.load"(%9533) : (!llvm.ptr) -> i32
    %9551 = "llvm.getelementptr"(%9549, %9550) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9552 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9553 = "llvm.getelementptr"(%9551, %9552) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9553) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1126(%9554 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9555 : !llvm.ptr):
    %9556 = "mini.invariant"(%9555) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9557 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1127] : () -> ()
  ^bb1128:
    %9558 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%9558, %9557) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1129] : () -> ()
  ^bb1127:
    %9559 = "llvm.getelementptr"(%9555) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9560 = "llvm.load"(%9559) : (!llvm.ptr) -> !llvm.ptr
    %9561 = "llvm.getelementptr"(%9560) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9562 = "llvm.getelementptr"(%9560) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9563 = "llvm.getelementptr"(%9560) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9564 = "llvm.getelementptr"(%9560) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9565 = "llvm.load"(%9561) : (!llvm.ptr) -> i64
    %9566 = "llvm.load"(%9562) : (!llvm.ptr) -> i64
    %9567 = "llvm.load"(%9563) : (!llvm.ptr) -> !llvm.ptr
    %9568 = "llvm.load"(%9564) : (!llvm.ptr) -> !llvm.ptr
    %9569 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9570 = "llvm.ptrtoint"(%9569) : (!llvm.ptr) -> i64
    %9571 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9572 = "mini.subtype"(%9567, %9566, %9565, %9571, %9570, %9568) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9572) [^bb1128, ^bb1128] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1129:
    %9573 = "llvm.extractvalue"(%9554) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9574 = "llvm.load"(%9557) : (!llvm.ptr) -> i32
    %9575 = "llvm.getelementptr"(%9573, %9574) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9576 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9577 = "llvm.getelementptr"(%9575, %9576) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9577) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1130(%9578 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9579 : !llvm.ptr):
    %9580 = "mini.invariant"(%9579) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9581 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1131] : () -> ()
  ^bb1132:
    %9582 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%9582, %9581) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1133] : () -> ()
  ^bb1131:
    %9583 = "llvm.getelementptr"(%9579) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9584 = "llvm.load"(%9583) : (!llvm.ptr) -> !llvm.ptr
    %9585 = "llvm.getelementptr"(%9584) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9586 = "llvm.getelementptr"(%9584) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9587 = "llvm.getelementptr"(%9584) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9588 = "llvm.getelementptr"(%9584) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9589 = "llvm.load"(%9585) : (!llvm.ptr) -> i64
    %9590 = "llvm.load"(%9586) : (!llvm.ptr) -> i64
    %9591 = "llvm.load"(%9587) : (!llvm.ptr) -> !llvm.ptr
    %9592 = "llvm.load"(%9588) : (!llvm.ptr) -> !llvm.ptr
    %9593 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9594 = "llvm.ptrtoint"(%9593) : (!llvm.ptr) -> i64
    %9595 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9596 = "mini.subtype"(%9591, %9590, %9589, %9595, %9594, %9592) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9596) [^bb1132, ^bb1132] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1133:
    %9597 = "llvm.extractvalue"(%9578) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9598 = "llvm.load"(%9581) : (!llvm.ptr) -> i32
    %9599 = "llvm.getelementptr"(%9597, %9598) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9600 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9601 = "llvm.getelementptr"(%9599, %9600) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9601) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_InterleaveIterator2", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "InterleaveIterator2_field_InterleaveIterator2_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator2_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2InterleaveIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator2_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2InterleaveIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator2_field_first", "getter_name" = "InterleaveIterator2_getter_first", "setter_name" = "InterleaveIterator2_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator2_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2InterleaveIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator2_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2InterleaveIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator2_field_second", "getter_name" = "InterleaveIterator2_getter_second", "setter_name" = "InterleaveIterator2_setter_second"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator2_getter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator2_setter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Ptri1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator2_field_on_first", "getter_name" = "InterleaveIterator2_getter_on_first", "setter_name" = "InterleaveIterator2_setter_on_first"} : () -> ()
  "mini.func"() ({
  ^bb1134(%9602 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9603 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9604 : !llvm.ptr, %9605 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9606 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9607 = "mini.wrap"(%9602) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %9608 = "mini.to_fat_ptr"(%9607) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator2", "to_typ_name" = "InterleaveIterator2", "invariant"} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %9609 = "mini.wrap"(%9605) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %9610 = "mini.to_fat_ptr"(%9609) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %9611 = "mini.to_fat_ptr"(%9610) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    "mini.set_field"(%9608, %9611) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> ()
    %9612 = "mini.wrap"(%9606) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %9613 = "mini.to_fat_ptr"(%9612) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %9614 = "mini.to_fat_ptr"(%9613) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    "mini.set_field"(%9608, %9614) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> ()
    %9615 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %9616 = builtin.unrealized_conversion_cast %9615 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.set_field"(%9608, %9616) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>, !mini.ptr<i1>) -> ()
  }) {"func_name" = "InterleaveIterator2_init_firstIterator2T_secondIterator2T", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1135(%9617 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9618 : !llvm.ptr):
    %9619 = "mini.invariant"(%9618) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9620 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1136] : () -> ()
  ^bb1137:
    %9621 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%9621, %9620) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1138] : () -> ()
  ^bb1139:
    %9622 = "llvm.getelementptr"(%9618) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9623 = "llvm.load"(%9622) : (!llvm.ptr) -> !llvm.ptr
    %9624 = "llvm.getelementptr"(%9623) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9625 = "llvm.getelementptr"(%9623) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9626 = "llvm.getelementptr"(%9623) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9627 = "llvm.getelementptr"(%9623) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9628 = "llvm.load"(%9624) : (!llvm.ptr) -> i64
    %9629 = "llvm.load"(%9625) : (!llvm.ptr) -> i64
    %9630 = "llvm.load"(%9626) : (!llvm.ptr) -> !llvm.ptr
    %9631 = "llvm.load"(%9627) : (!llvm.ptr) -> !llvm.ptr
    %9632 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %9633 = "llvm.ptrtoint"(%9632) : (!llvm.ptr) -> i64
    %9634 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %9635 = "mini.subtype"(%9630, %9629, %9628, %9634, %9633, %9631) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9635) [^bb1137, ^bb1137] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1136:
    %9636 = "llvm.getelementptr"(%9618) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9637 = "llvm.load"(%9636) : (!llvm.ptr) -> !llvm.ptr
    %9638 = "llvm.getelementptr"(%9637) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9639 = "llvm.getelementptr"(%9637) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9640 = "llvm.getelementptr"(%9637) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9641 = "llvm.getelementptr"(%9637) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9642 = "llvm.load"(%9638) : (!llvm.ptr) -> i64
    %9643 = "llvm.load"(%9639) : (!llvm.ptr) -> i64
    %9644 = "llvm.load"(%9640) : (!llvm.ptr) -> !llvm.ptr
    %9645 = "llvm.load"(%9641) : (!llvm.ptr) -> !llvm.ptr
    %9646 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %9647 = "llvm.ptrtoint"(%9646) : (!llvm.ptr) -> i64
    %9648 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %9649 = "mini.subtype"(%9644, %9643, %9642, %9648, %9647, %9645) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9649) [^bb1139, ^bb1139] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1138:
    %9650 = "llvm.extractvalue"(%9617) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9651 = "llvm.load"(%9620) : (!llvm.ptr) -> i32
    %9652 = "llvm.getelementptr"(%9650, %9651) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9653 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9654 = "llvm.getelementptr"(%9652, %9653) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9654) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterator2_B_init_firstIterator2T_secondIterator2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1140(%9655 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9656 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9657 : !llvm.ptr):
    %9658 = "mini.wrap"(%9655) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %9659 = "mini.to_fat_ptr"(%9658) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator2", "to_typ_name" = "InterleaveIterator2", "invariant"} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %9660 = "mini.get_field"(%9659) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.ptr<i1>
    %9661 = "mini.unwrap"(%9660) : (!mini.ptr<i1>) -> i1
    "mini.if"(%9661) ({
      %9662 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %9663 = builtin.unrealized_conversion_cast %9662 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.set_field"(%9659, %9663) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>, !mini.ptr<i1>) -> ()
      %9664 = "mini.get_field"(%9659) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
      %9665 = "mini.unwrap"(%9664) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9666 = "mini.get_type_field"(%9659) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.reified_type
      %9667 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %9668 = "mini.method_call"(%9667, %9665) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
      %9669 = builtin.unrealized_conversion_cast %9668 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator2">, !mini.nil]>
      %9670 = builtin.unrealized_conversion_cast %9669 : !mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
      "mini.return"(%9670) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %9671 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %9672 = builtin.unrealized_conversion_cast %9671 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.set_field"(%9659, %9672) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>, !mini.ptr<i1>) -> ()
    %9673 = "mini.get_field"(%9659) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>
    %9674 = "mini.unwrap"(%9673) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9675 = "mini.get_type_field"(%9659) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.any, "InterleaveIterator2">]>) -> !mini.reified_type
    %9676 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9677 = "mini.method_call"(%9676, %9674) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
    %9678 = builtin.unrealized_conversion_cast %9677 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator2">, !mini.nil]>
    %9679 = builtin.unrealized_conversion_cast %9678 : !mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
    "mini.return"(%9679) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "InterleaveIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1141(%9680 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9681 : !llvm.ptr):
    %9682 = "mini.invariant"(%9681) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9683 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1142] : () -> ()
  ^bb1142:
    %9684 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%9684, %9683) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1143] : () -> ()
  ^bb1143:
    %9685 = "llvm.extractvalue"(%9680) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9686 = "llvm.load"(%9683) : (!llvm.ptr) -> i32
    %9687 = "llvm.getelementptr"(%9685, %9686) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9688 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9689 = "llvm.getelementptr"(%9687, %9688) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9689) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ZipIterable2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ZipIterable2_field_ZipIterable2_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ZipIterable2_field_ZipIterable2_1"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ZipIterable2_field_ZipIterable2_2"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterable2_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ZipIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterable2_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ZipIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterable2_field_first", "getter_name" = "ZipIterable2_getter_first", "setter_name" = "ZipIterable2_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterable2_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ZipIterable2.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterable2_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ZipIterable2.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterable2_field_second", "getter_name" = "ZipIterable2_getter_second", "setter_name" = "ZipIterable2_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb1144(%9690 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9691 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9692 : !llvm.ptr, %9693 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9694 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9695 = "mini.wrap"(%9690) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %9696 = "mini.to_fat_ptr"(%9695) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable2", "to_typ_name" = "ZipIterable2", "invariant"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %9697 = "mini.wrap"(%9693) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    %9698 = "mini.to_fat_ptr"(%9697) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    %9699 = "mini.to_fat_ptr"(%9698) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    "mini.set_field"(%9696, %9699) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> ()
    %9700 = "mini.wrap"(%9694) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %9701 = "mini.to_fat_ptr"(%9700) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %9702 = "mini.to_fat_ptr"(%9701) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    "mini.set_field"(%9696, %9702) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> ()
  }) {"func_name" = "ZipIterable2_init_firstIterable2T_secondIterable2U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1145(%9703 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9704 : !llvm.ptr):
    %9705 = "mini.invariant"(%9704) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9706 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1146] : () -> ()
  ^bb1147:
    %9707 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%9707, %9706) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1148] : () -> ()
  ^bb1149:
    %9708 = "llvm.getelementptr"(%9704) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9709 = "llvm.load"(%9708) : (!llvm.ptr) -> !llvm.ptr
    %9710 = "llvm.getelementptr"(%9709) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9711 = "llvm.getelementptr"(%9709) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9712 = "llvm.getelementptr"(%9709) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9713 = "llvm.getelementptr"(%9709) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9714 = "llvm.load"(%9710) : (!llvm.ptr) -> i64
    %9715 = "llvm.load"(%9711) : (!llvm.ptr) -> i64
    %9716 = "llvm.load"(%9712) : (!llvm.ptr) -> !llvm.ptr
    %9717 = "llvm.load"(%9713) : (!llvm.ptr) -> !llvm.ptr
    %9718 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9719 = "llvm.ptrtoint"(%9718) : (!llvm.ptr) -> i64
    %9720 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9721 = "mini.subtype"(%9716, %9715, %9714, %9720, %9719, %9717) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9721) [^bb1147, ^bb1147] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1146:
    %9722 = "llvm.getelementptr"(%9704) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9723 = "llvm.load"(%9722) : (!llvm.ptr) -> !llvm.ptr
    %9724 = "llvm.getelementptr"(%9723) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9725 = "llvm.getelementptr"(%9723) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9726 = "llvm.getelementptr"(%9723) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9727 = "llvm.getelementptr"(%9723) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9728 = "llvm.load"(%9724) : (!llvm.ptr) -> i64
    %9729 = "llvm.load"(%9725) : (!llvm.ptr) -> i64
    %9730 = "llvm.load"(%9726) : (!llvm.ptr) -> !llvm.ptr
    %9731 = "llvm.load"(%9727) : (!llvm.ptr) -> !llvm.ptr
    %9732 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9733 = "llvm.ptrtoint"(%9732) : (!llvm.ptr) -> i64
    %9734 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9735 = "mini.subtype"(%9730, %9729, %9728, %9734, %9733, %9731) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9735) [^bb1149, ^bb1149] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1148:
    %9736 = "llvm.extractvalue"(%9703) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9737 = "llvm.load"(%9706) : (!llvm.ptr) -> i32
    %9738 = "llvm.getelementptr"(%9736, %9737) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9739 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9740 = "llvm.getelementptr"(%9738, %9739) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9740) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_init_firstIterable2T_secondIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1150(%9741 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9742 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9743 : !llvm.ptr):
    %9744 = "mini.wrap"(%9741) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %9745 = "mini.to_fat_ptr"(%9744) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable2", "to_typ_name" = "ZipIterable2", "invariant"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %9746 = "mini.get_field"(%9745) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    %9747 = "mini.unwrap"(%9746) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9748 = "mini.get_type_field"(%9745) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.reified_type
    %9749 = "mini.get_type_field"(%9745) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.reified_type
    %9750 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9751 = "mini.method_call"(%9750, %9747) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %9752 = "mini.to_fat_ptr"(%9751) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    %9753 = "mini.get_field"(%9745) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %9754 = "mini.unwrap"(%9753) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9755 = "mini.get_type_field"(%9745) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.reified_type
    %9756 = "mini.get_type_field"(%9745) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.reified_type
    %9757 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9758 = "mini.method_call"(%9757, %9754) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %9759 = "mini.to_fat_ptr"(%9758) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %9760 = "mini.unwrap"(%9752) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9761 = "mini.unwrap"(%9759) : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9762 = "mini.get_type_field"(%9745) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.reified_type
    %9763 = "mini.get_type_field"(%9745) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.reified_type
    %9764 = "mini.parameterization"(%9762, %9763) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["ZipIterable2.T_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %9765 = "mini.parameterization"(%9762, %9763) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["ZipIterable2.U_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %9766 = "mini.parameterization"(%9762, %9763) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairZipIterable2.T_subtype_Any._ZipIterable2.U_subtype_Any", ["ZipIterable2.T_subtype_Any"], ["ZipIterable2.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %9767 = "mini.new"(%9764, %9765, %9766) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterator2", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %9768 = "mini.get_field"(%9745) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    %9769 = "mini.unwrap"(%9768) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9770 = "mini.get_type_field"(%9745) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.reified_type
    %9771 = "mini.get_type_field"(%9745) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.reified_type
    %9772 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9773 = "mini.method_call"(%9772, %9769) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %9774 = "mini.to_fat_ptr"(%9773) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>
    %9775 = "mini.get_field"(%9745) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %9776 = "mini.unwrap"(%9775) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9777 = "mini.get_type_field"(%9745) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.reified_type
    %9778 = "mini.get_type_field"(%9745) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.reified_type
    %9779 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9780 = "mini.method_call"(%9779, %9776) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %9781 = "mini.to_fat_ptr"(%9780) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>
    %9782 = "mini.to_fat_ptr"(%9774) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>
    %9783 = "mini.unwrap"(%9782) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9784 = "mini.to_fat_ptr"(%9781) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %9785 = "mini.unwrap"(%9784) : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9786 = "mini.unwrap"(%9767) : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9787 = "mini.get_type_field"(%9745) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.reified_type
    %9788 = "mini.get_type_field"(%9745) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.reified_type
    %9789 = "mini.parameterization"(%9787, %9788) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2ZipIterable2.T_subtype_Any", ["ZipIterable2.T_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %9790 = "mini.parameterization"(%9787, %9788) {"id_hierarchy" = ["Iterator2", [1 : i32]], "name_hierarchy" = ["Iterator2ZipIterable2.U_subtype_Any", ["ZipIterable2.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %9791 = "mini.parameterizations_array"(%9789, %9790) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9791, %9786, %9783, %9785) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %9792 = "mini.to_fat_ptr"(%9767) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterable2">, !mini.type_param<"U", !mini.any, "ZipIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%9792) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "ZipIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1151(%9793 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9794 : !llvm.ptr):
    %9795 = "mini.invariant"(%9794) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9796 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1152] : () -> ()
  ^bb1152:
    %9797 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%9797, %9796) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1153] : () -> ()
  ^bb1153:
    %9798 = "llvm.extractvalue"(%9793) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9799 = "llvm.load"(%9796) : (!llvm.ptr) -> i32
    %9800 = "llvm.getelementptr"(%9798, %9799) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9801 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9802 = "llvm.getelementptr"(%9800, %9801) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9802) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1154(%9803 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9804 : !llvm.ptr):
    %9805 = "mini.invariant"(%9804) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9806 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1155] : () -> ()
  ^bb1156:
    %9807 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%9807, %9806) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1157] : () -> ()
  ^bb1155:
    %9808 = "llvm.getelementptr"(%9804) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9809 = "llvm.load"(%9808) : (!llvm.ptr) -> !llvm.ptr
    %9810 = "llvm.getelementptr"(%9809) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9811 = "llvm.getelementptr"(%9809) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9812 = "llvm.getelementptr"(%9809) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9813 = "llvm.getelementptr"(%9809) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9814 = "llvm.load"(%9810) : (!llvm.ptr) -> i64
    %9815 = "llvm.load"(%9811) : (!llvm.ptr) -> i64
    %9816 = "llvm.load"(%9812) : (!llvm.ptr) -> !llvm.ptr
    %9817 = "llvm.load"(%9813) : (!llvm.ptr) -> !llvm.ptr
    %9818 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9819 = "llvm.ptrtoint"(%9818) : (!llvm.ptr) -> i64
    %9820 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9821 = "mini.subtype"(%9816, %9815, %9814, %9820, %9819, %9817) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9821) [^bb1156, ^bb1156] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1157:
    %9822 = "llvm.extractvalue"(%9803) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9823 = "llvm.load"(%9806) : (!llvm.ptr) -> i32
    %9824 = "llvm.getelementptr"(%9822, %9823) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9825 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9826 = "llvm.getelementptr"(%9824, %9825) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9826) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1158(%9827 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9828 : !llvm.ptr):
    %9829 = "mini.invariant"(%9828) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9830 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1159] : () -> ()
  ^bb1160:
    %9831 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%9831, %9830) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1161] : () -> ()
  ^bb1162:
    %9832 = "llvm.getelementptr"(%9828) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9833 = "llvm.load"(%9832) : (!llvm.ptr) -> !llvm.ptr
    %9834 = "llvm.getelementptr"(%9833) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9835 = "llvm.getelementptr"(%9833) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9836 = "llvm.getelementptr"(%9833) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9837 = "llvm.getelementptr"(%9833) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9838 = "llvm.load"(%9834) : (!llvm.ptr) -> i64
    %9839 = "llvm.load"(%9835) : (!llvm.ptr) -> i64
    %9840 = "llvm.load"(%9836) : (!llvm.ptr) -> !llvm.ptr
    %9841 = "llvm.load"(%9837) : (!llvm.ptr) -> !llvm.ptr
    %9842 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9843 = "llvm.ptrtoint"(%9842) : (!llvm.ptr) -> i64
    %9844 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9845 = "mini.subtype"(%9840, %9839, %9838, %9844, %9843, %9841) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9845) [^bb1160, ^bb1160] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1159:
    %9846 = "llvm.getelementptr"(%9828) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9847 = "llvm.load"(%9846) : (!llvm.ptr) -> !llvm.ptr
    %9848 = "llvm.getelementptr"(%9847) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9849 = "llvm.getelementptr"(%9847) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9850 = "llvm.getelementptr"(%9847) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9851 = "llvm.getelementptr"(%9847) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9852 = "llvm.load"(%9848) : (!llvm.ptr) -> i64
    %9853 = "llvm.load"(%9849) : (!llvm.ptr) -> i64
    %9854 = "llvm.load"(%9850) : (!llvm.ptr) -> !llvm.ptr
    %9855 = "llvm.load"(%9851) : (!llvm.ptr) -> !llvm.ptr
    %9856 = "mini.addr_of"() {"global_name" = @Pair} : () -> !llvm.ptr
    %9857 = "llvm.ptrtoint"(%9856) : (!llvm.ptr) -> i64
    %9858 = "llvm.mlir.constant"() <{"value" = 9197944775169318296 : i64}> : () -> i64
    %9859 = "mini.subtype"(%9854, %9853, %9852, %9858, %9857, %9855) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9859) [^bb1162, ^bb1162] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1161:
    %9860 = "llvm.extractvalue"(%9827) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9861 = "llvm.load"(%9830) : (!llvm.ptr) -> i32
    %9862 = "llvm.getelementptr"(%9860, %9861) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9863 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9864 = "llvm.getelementptr"(%9862, %9863) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9864) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1163(%9865 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9866 : !llvm.ptr):
    %9867 = "mini.invariant"(%9866) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9868 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1164] : () -> ()
  ^bb1165:
    %9869 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%9869, %9868) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1166] : () -> ()
  ^bb1164:
    %9870 = "llvm.getelementptr"(%9866) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9871 = "llvm.load"(%9870) : (!llvm.ptr) -> !llvm.ptr
    %9872 = "llvm.getelementptr"(%9871) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9873 = "llvm.getelementptr"(%9871) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9874 = "llvm.getelementptr"(%9871) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9875 = "llvm.getelementptr"(%9871) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9876 = "llvm.load"(%9872) : (!llvm.ptr) -> i64
    %9877 = "llvm.load"(%9873) : (!llvm.ptr) -> i64
    %9878 = "llvm.load"(%9874) : (!llvm.ptr) -> !llvm.ptr
    %9879 = "llvm.load"(%9875) : (!llvm.ptr) -> !llvm.ptr
    %9880 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9881 = "llvm.ptrtoint"(%9880) : (!llvm.ptr) -> i64
    %9882 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9883 = "mini.subtype"(%9878, %9877, %9876, %9882, %9881, %9879) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9883) [^bb1165, ^bb1165] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1166:
    %9884 = "llvm.extractvalue"(%9865) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9885 = "llvm.load"(%9868) : (!llvm.ptr) -> i32
    %9886 = "llvm.getelementptr"(%9884, %9885) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9887 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9888 = "llvm.getelementptr"(%9886, %9887) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9888) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1167(%9889 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9890 : !llvm.ptr):
    %9891 = "mini.invariant"(%9890) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9892 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1168] : () -> ()
  ^bb1169:
    %9893 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%9893, %9892) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1170] : () -> ()
  ^bb1168:
    %9894 = "llvm.getelementptr"(%9890) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9895 = "llvm.load"(%9894) : (!llvm.ptr) -> !llvm.ptr
    %9896 = "llvm.getelementptr"(%9895) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9897 = "llvm.getelementptr"(%9895) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9898 = "llvm.getelementptr"(%9895) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9899 = "llvm.getelementptr"(%9895) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9900 = "llvm.load"(%9896) : (!llvm.ptr) -> i64
    %9901 = "llvm.load"(%9897) : (!llvm.ptr) -> i64
    %9902 = "llvm.load"(%9898) : (!llvm.ptr) -> !llvm.ptr
    %9903 = "llvm.load"(%9899) : (!llvm.ptr) -> !llvm.ptr
    %9904 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9905 = "llvm.ptrtoint"(%9904) : (!llvm.ptr) -> i64
    %9906 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9907 = "mini.subtype"(%9902, %9901, %9900, %9906, %9905, %9903) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9907) [^bb1169, ^bb1169] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1170:
    %9908 = "llvm.extractvalue"(%9889) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9909 = "llvm.load"(%9892) : (!llvm.ptr) -> i32
    %9910 = "llvm.getelementptr"(%9908, %9909) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9911 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9912 = "llvm.getelementptr"(%9910, %9911) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9912) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1171(%9913 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9914 : !llvm.ptr):
    %9915 = "mini.invariant"(%9914) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9916 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1172] : () -> ()
  ^bb1173:
    %9917 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%9917, %9916) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1174] : () -> ()
  ^bb1172:
    %9918 = "llvm.getelementptr"(%9914) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9919 = "llvm.load"(%9918) : (!llvm.ptr) -> !llvm.ptr
    %9920 = "llvm.getelementptr"(%9919) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9921 = "llvm.getelementptr"(%9919) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9922 = "llvm.getelementptr"(%9919) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9923 = "llvm.getelementptr"(%9919) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9924 = "llvm.load"(%9920) : (!llvm.ptr) -> i64
    %9925 = "llvm.load"(%9921) : (!llvm.ptr) -> i64
    %9926 = "llvm.load"(%9922) : (!llvm.ptr) -> !llvm.ptr
    %9927 = "llvm.load"(%9923) : (!llvm.ptr) -> !llvm.ptr
    %9928 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9929 = "llvm.ptrtoint"(%9928) : (!llvm.ptr) -> i64
    %9930 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9931 = "mini.subtype"(%9926, %9925, %9924, %9930, %9929, %9927) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9931) [^bb1173, ^bb1173] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1174:
    %9932 = "llvm.extractvalue"(%9913) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9933 = "llvm.load"(%9916) : (!llvm.ptr) -> i32
    %9934 = "llvm.getelementptr"(%9932, %9933) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9935 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9936 = "llvm.getelementptr"(%9934, %9935) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9936) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1175(%9937 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9938 : !llvm.ptr):
    %9939 = "mini.invariant"(%9938) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9940 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1176] : () -> ()
  ^bb1177:
    %9941 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%9941, %9940) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1178] : () -> ()
  ^bb1176:
    %9942 = "llvm.getelementptr"(%9938) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9943 = "llvm.load"(%9942) : (!llvm.ptr) -> !llvm.ptr
    %9944 = "llvm.getelementptr"(%9943) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9945 = "llvm.getelementptr"(%9943) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9946 = "llvm.getelementptr"(%9943) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9947 = "llvm.getelementptr"(%9943) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9948 = "llvm.load"(%9944) : (!llvm.ptr) -> i64
    %9949 = "llvm.load"(%9945) : (!llvm.ptr) -> i64
    %9950 = "llvm.load"(%9946) : (!llvm.ptr) -> !llvm.ptr
    %9951 = "llvm.load"(%9947) : (!llvm.ptr) -> !llvm.ptr
    %9952 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9953 = "llvm.ptrtoint"(%9952) : (!llvm.ptr) -> i64
    %9954 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9955 = "mini.subtype"(%9950, %9949, %9948, %9954, %9953, %9951) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9955) [^bb1177, ^bb1177] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1178:
    %9956 = "llvm.extractvalue"(%9937) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9957 = "llvm.load"(%9940) : (!llvm.ptr) -> i32
    %9958 = "llvm.getelementptr"(%9956, %9957) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9959 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9960 = "llvm.getelementptr"(%9958, %9959) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9960) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1179(%9961 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9962 : !llvm.ptr):
    %9963 = "mini.invariant"(%9962) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9964 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1180] : () -> ()
  ^bb1181:
    %9965 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%9965, %9964) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1182] : () -> ()
  ^bb1180:
    %9966 = "llvm.getelementptr"(%9962) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9967 = "llvm.load"(%9966) : (!llvm.ptr) -> !llvm.ptr
    %9968 = "llvm.getelementptr"(%9967) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9969 = "llvm.getelementptr"(%9967) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9970 = "llvm.getelementptr"(%9967) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9971 = "llvm.getelementptr"(%9967) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9972 = "llvm.load"(%9968) : (!llvm.ptr) -> i64
    %9973 = "llvm.load"(%9969) : (!llvm.ptr) -> i64
    %9974 = "llvm.load"(%9970) : (!llvm.ptr) -> !llvm.ptr
    %9975 = "llvm.load"(%9971) : (!llvm.ptr) -> !llvm.ptr
    %9976 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9977 = "llvm.ptrtoint"(%9976) : (!llvm.ptr) -> i64
    %9978 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9979 = "mini.subtype"(%9974, %9973, %9972, %9978, %9977, %9975) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9979) [^bb1181, ^bb1181] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1182:
    %9980 = "llvm.extractvalue"(%9961) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9981 = "llvm.load"(%9964) : (!llvm.ptr) -> i32
    %9982 = "llvm.getelementptr"(%9980, %9981) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9983 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %9984 = "llvm.getelementptr"(%9982, %9983) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9984) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1183(%9985 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9986 : !llvm.ptr):
    %9987 = "mini.invariant"(%9986) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9988 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1184] : () -> ()
  ^bb1185:
    %9989 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%9989, %9988) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1186] : () -> ()
  ^bb1184:
    %9990 = "llvm.getelementptr"(%9986) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %9991 = "llvm.load"(%9990) : (!llvm.ptr) -> !llvm.ptr
    %9992 = "llvm.getelementptr"(%9991) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9993 = "llvm.getelementptr"(%9991) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9994 = "llvm.getelementptr"(%9991) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9995 = "llvm.getelementptr"(%9991) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9996 = "llvm.load"(%9992) : (!llvm.ptr) -> i64
    %9997 = "llvm.load"(%9993) : (!llvm.ptr) -> i64
    %9998 = "llvm.load"(%9994) : (!llvm.ptr) -> !llvm.ptr
    %9999 = "llvm.load"(%9995) : (!llvm.ptr) -> !llvm.ptr
    %10000 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10001 = "llvm.ptrtoint"(%10000) : (!llvm.ptr) -> i64
    %10002 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10003 = "mini.subtype"(%9998, %9997, %9996, %10002, %10001, %9999) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10003) [^bb1185, ^bb1185] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1186:
    %10004 = "llvm.extractvalue"(%9985) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10005 = "llvm.load"(%9988) : (!llvm.ptr) -> i32
    %10006 = "llvm.getelementptr"(%10004, %10005) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10007 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10008 = "llvm.getelementptr"(%10006, %10007) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10008) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1187(%10009 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10010 : !llvm.ptr):
    %10011 = "mini.invariant"(%10010) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10012 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1188] : () -> ()
  ^bb1189:
    %10013 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%10013, %10012) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1190] : () -> ()
  ^bb1188:
    %10014 = "llvm.getelementptr"(%10010) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10015 = "llvm.load"(%10014) : (!llvm.ptr) -> !llvm.ptr
    %10016 = "llvm.getelementptr"(%10015) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10017 = "llvm.getelementptr"(%10015) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10018 = "llvm.getelementptr"(%10015) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10019 = "llvm.getelementptr"(%10015) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10020 = "llvm.load"(%10016) : (!llvm.ptr) -> i64
    %10021 = "llvm.load"(%10017) : (!llvm.ptr) -> i64
    %10022 = "llvm.load"(%10018) : (!llvm.ptr) -> !llvm.ptr
    %10023 = "llvm.load"(%10019) : (!llvm.ptr) -> !llvm.ptr
    %10024 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10025 = "llvm.ptrtoint"(%10024) : (!llvm.ptr) -> i64
    %10026 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10027 = "mini.subtype"(%10022, %10021, %10020, %10026, %10025, %10023) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10027) [^bb1189, ^bb1189] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1190:
    %10028 = "llvm.extractvalue"(%10009) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10029 = "llvm.load"(%10012) : (!llvm.ptr) -> i32
    %10030 = "llvm.getelementptr"(%10028, %10029) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10031 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10032 = "llvm.getelementptr"(%10030, %10031) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10032) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1191(%10033 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10034 : !llvm.ptr):
    %10035 = "mini.invariant"(%10034) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10036 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1192] : () -> ()
  ^bb1193:
    %10037 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%10037, %10036) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1194] : () -> ()
  ^bb1192:
    %10038 = "llvm.getelementptr"(%10034) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10039 = "llvm.load"(%10038) : (!llvm.ptr) -> !llvm.ptr
    %10040 = "llvm.getelementptr"(%10039) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10041 = "llvm.getelementptr"(%10039) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10042 = "llvm.getelementptr"(%10039) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10043 = "llvm.getelementptr"(%10039) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10044 = "llvm.load"(%10040) : (!llvm.ptr) -> i64
    %10045 = "llvm.load"(%10041) : (!llvm.ptr) -> i64
    %10046 = "llvm.load"(%10042) : (!llvm.ptr) -> !llvm.ptr
    %10047 = "llvm.load"(%10043) : (!llvm.ptr) -> !llvm.ptr
    %10048 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10049 = "llvm.ptrtoint"(%10048) : (!llvm.ptr) -> i64
    %10050 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10051 = "mini.subtype"(%10046, %10045, %10044, %10050, %10049, %10047) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10051) [^bb1193, ^bb1193] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1194:
    %10052 = "llvm.extractvalue"(%10033) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10053 = "llvm.load"(%10036) : (!llvm.ptr) -> i32
    %10054 = "llvm.getelementptr"(%10052, %10053) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10055 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10056 = "llvm.getelementptr"(%10054, %10055) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10056) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ZipIterator2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ZipIterator2_field_ZipIterator2_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ZipIterator2_field_ZipIterator2_1"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ZipIterator2_field_ZipIterator2_2"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterator2_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ZipIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterator2_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ZipIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterator2_field_first", "getter_name" = "ZipIterator2_getter_first", "setter_name" = "ZipIterator2_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterator2_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ZipIterator2.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterator2_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ZipIterator2.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterator2_field_second", "getter_name" = "ZipIterator2_getter_second", "setter_name" = "ZipIterator2_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb1195(%10057 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10058 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10059 : !llvm.ptr, %10060 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10061 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10062 = "mini.wrap"(%10057) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %10063 = "mini.to_fat_ptr"(%10062) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator2", "to_typ_name" = "ZipIterator2", "invariant"} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %10064 = "mini.wrap"(%10060) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>
    %10065 = "mini.to_fat_ptr"(%10064) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>
    %10066 = "mini.to_fat_ptr"(%10065) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>
    "mini.set_field"(%10063, %10066) {"offset" = 3 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>) -> ()
    %10067 = "mini.wrap"(%10061) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %10068 = "mini.to_fat_ptr"(%10067) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %10069 = "mini.to_fat_ptr"(%10068) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>
    "mini.set_field"(%10063, %10069) {"offset" = 4 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> ()
  }) {"func_name" = "ZipIterator2_init_firstIterator2T_secondIterator2U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1196(%10070 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10071 : !llvm.ptr):
    %10072 = "mini.invariant"(%10071) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10073 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1197] : () -> ()
  ^bb1198:
    %10074 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%10074, %10073) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1199] : () -> ()
  ^bb1200:
    %10075 = "llvm.getelementptr"(%10071) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10076 = "llvm.load"(%10075) : (!llvm.ptr) -> !llvm.ptr
    %10077 = "llvm.getelementptr"(%10076) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10078 = "llvm.getelementptr"(%10076) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10079 = "llvm.getelementptr"(%10076) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10080 = "llvm.getelementptr"(%10076) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10081 = "llvm.load"(%10077) : (!llvm.ptr) -> i64
    %10082 = "llvm.load"(%10078) : (!llvm.ptr) -> i64
    %10083 = "llvm.load"(%10079) : (!llvm.ptr) -> !llvm.ptr
    %10084 = "llvm.load"(%10080) : (!llvm.ptr) -> !llvm.ptr
    %10085 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %10086 = "llvm.ptrtoint"(%10085) : (!llvm.ptr) -> i64
    %10087 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %10088 = "mini.subtype"(%10083, %10082, %10081, %10087, %10086, %10084) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10088) [^bb1198, ^bb1198] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1197:
    %10089 = "llvm.getelementptr"(%10071) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10090 = "llvm.load"(%10089) : (!llvm.ptr) -> !llvm.ptr
    %10091 = "llvm.getelementptr"(%10090) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10092 = "llvm.getelementptr"(%10090) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10093 = "llvm.getelementptr"(%10090) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10094 = "llvm.getelementptr"(%10090) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10095 = "llvm.load"(%10091) : (!llvm.ptr) -> i64
    %10096 = "llvm.load"(%10092) : (!llvm.ptr) -> i64
    %10097 = "llvm.load"(%10093) : (!llvm.ptr) -> !llvm.ptr
    %10098 = "llvm.load"(%10094) : (!llvm.ptr) -> !llvm.ptr
    %10099 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %10100 = "llvm.ptrtoint"(%10099) : (!llvm.ptr) -> i64
    %10101 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %10102 = "mini.subtype"(%10097, %10096, %10095, %10101, %10100, %10098) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10102) [^bb1200, ^bb1200] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1199:
    %10103 = "llvm.extractvalue"(%10070) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10104 = "llvm.load"(%10073) : (!llvm.ptr) -> i32
    %10105 = "llvm.getelementptr"(%10103, %10104) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10106 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10107 = "llvm.getelementptr"(%10105, %10106) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10107) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterator2_B_init_firstIterator2T_secondIterator2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1201(%10108 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10109 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10110 : !llvm.ptr):
    %10111 = "mini.wrap"(%10108) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %10112 = "mini.to_fat_ptr"(%10111) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator2", "to_typ_name" = "ZipIterator2", "invariant"} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %10113 = "mini.get_field"(%10112) {"offset" = 3 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>
    %10114 = "mini.unwrap"(%10113) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10115 = "mini.get_type_field"(%10112) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.reified_type
    %10116 = "mini.get_type_field"(%10112) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.reified_type
    %10117 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %10118 = "mini.method_call"(%10117, %10114) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
    %10119 = builtin.unrealized_conversion_cast %10118 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.nil]>
    %10120 = "mini.get_field"(%10112) {"offset" = 4 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>
    %10121 = "mini.unwrap"(%10120) : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10122 = "mini.get_type_field"(%10112) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.reified_type
    %10123 = "mini.get_type_field"(%10112) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.reified_type
    %10124 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %10125 = "mini.method_call"(%10124, %10121) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
    %10126 = builtin.unrealized_conversion_cast %10125 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator2">, !mini.nil]>
    %10127 = "mini.checkflag"(%10119) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.nil]>) -> i1
    %10128 = "mini.unwrap"(%10127) : (i1) -> i1
    %10129 = builtin.unrealized_conversion_cast %10119 : !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.nil]>
    "mini.if"(%10128) ({
      %10130 = "mini.to_fat_ptr"(%10129) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "ZipIterator2">
      %10131 = "mini.checkflag"(%10126) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator2">, !mini.nil]>) -> i1
      %10132 = "mini.unwrap"(%10131) : (i1) -> i1
      %10133 = builtin.unrealized_conversion_cast %10126 : !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator2">, !mini.nil]>
      "mini.if"(%10132) ({
        %10134 = "mini.to_fat_ptr"(%10133) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator2">, !mini.nil]>) -> !mini.type_param<"U", !mini.any, "ZipIterator2">
        %10135 = "mini.unwrap"(%10130) : (!mini.type_param<"T", !mini.any, "ZipIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
        %10136 = "mini.unwrap"(%10134) : (!mini.type_param<"U", !mini.any, "ZipIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
        %10137 = "mini.get_type_field"(%10112) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.reified_type
        %10138 = "mini.get_type_field"(%10112) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.reified_type
        %10139 = "mini.parameterization"(%10137, %10138) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["ZipIterator2.T_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
        %10140 = "mini.parameterization"(%10137, %10138) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["ZipIterator2.U_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
        %10141 = "mini.new"(%10139, %10140) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>
        %10142 = "mini.to_fat_ptr"(%10130) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "ZipIterator2">) -> !mini.type_param<"T", !mini.any, "Pair">
        %10143 = "mini.unwrap"(%10142) : (!mini.type_param<"T", !mini.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %10144 = "mini.to_fat_ptr"(%10134) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "ZipIterator2">) -> !mini.type_param<"U", !mini.any, "Pair">
        %10145 = "mini.unwrap"(%10144) : (!mini.type_param<"U", !mini.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %10146 = "mini.unwrap"(%10141) : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %10147 = "mini.get_type_field"(%10112) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.reified_type
        %10148 = "mini.get_type_field"(%10112) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]>) -> !mini.reified_type
        %10149 = "mini.parameterization"(%10147, %10148) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["ZipIterator2.T_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
        %10150 = "mini.parameterization"(%10147, %10148) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["ZipIterator2.U_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
        %10151 = "mini.parameterizations_array"(%10149, %10150) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mini.method_call"(%10151, %10146, %10143, %10145) {"offset" = 4 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %10152 = builtin.unrealized_conversion_cast %10141 : !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.type_param<"U", !mini.any, "ZipIterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
        "mini.return"(%10152) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>) -> ()
        "mini.castassign"(%10133, %10134) ({
          %10153 = builtin.unrealized_conversion_cast %10134 : !mini.type_param<"U", !mini.any, "ZipIterator2"> to !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator2">, !mini.nil]>
        }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator2">, !mini.nil]>, !mini.type_param<"U", !mini.any, "ZipIterator2">) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%10129, %10130) ({
        %10154 = builtin.unrealized_conversion_cast %10130 : !mini.type_param<"T", !mini.any, "ZipIterator2"> to !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator2">, !mini.nil]>, !mini.type_param<"T", !mini.any, "ZipIterator2">) -> ()
    }) : (i1) -> ()
    %10155 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %10156 = "mini.unionize"(%10155) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
    "mini.return"(%10156) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "ZipIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1202(%10157 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10158 : !llvm.ptr):
    %10159 = "mini.invariant"(%10158) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10160 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1203] : () -> ()
  ^bb1203:
    %10161 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%10161, %10160) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1204] : () -> ()
  ^bb1204:
    %10162 = "llvm.extractvalue"(%10157) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10163 = "llvm.load"(%10160) : (!llvm.ptr) -> i32
    %10164 = "llvm.getelementptr"(%10162, %10163) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10165 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10166 = "llvm.getelementptr"(%10164, %10165) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10166) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ProductIterable2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ProductIterable2_field_ProductIterable2_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ProductIterable2_field_ProductIterable2_1"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ProductIterable2_field_ProductIterable2_2"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterable2_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ProductIterable2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterable2_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ProductIterable2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterable2_field_first", "getter_name" = "ProductIterable2_getter_first", "setter_name" = "ProductIterable2_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterable2_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ProductIterable2.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterable2_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ProductIterable2.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterable2_field_second", "getter_name" = "ProductIterable2_getter_second", "setter_name" = "ProductIterable2_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb1205(%10167 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10168 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10169 : !llvm.ptr, %10170 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10171 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10172 = "mini.wrap"(%10167) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %10173 = "mini.to_fat_ptr"(%10172) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable2", "to_typ_name" = "ProductIterable2", "invariant"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %10174 = "mini.wrap"(%10170) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>
    %10175 = "mini.to_fat_ptr"(%10174) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>
    %10176 = "mini.to_fat_ptr"(%10175) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>
    "mini.set_field"(%10173, %10176) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>) -> ()
    %10177 = "mini.wrap"(%10171) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %10178 = "mini.to_fat_ptr"(%10177) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %10179 = "mini.to_fat_ptr"(%10178) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>
    "mini.set_field"(%10173, %10179) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> ()
  }) {"func_name" = "ProductIterable2_init_firstIterable2T_secondIterable2U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1206(%10180 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10181 : !llvm.ptr):
    %10182 = "mini.invariant"(%10181) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10183 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1207] : () -> ()
  ^bb1208:
    %10184 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%10184, %10183) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1209] : () -> ()
  ^bb1210:
    %10185 = "llvm.getelementptr"(%10181) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10186 = "llvm.load"(%10185) : (!llvm.ptr) -> !llvm.ptr
    %10187 = "llvm.getelementptr"(%10186) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10188 = "llvm.getelementptr"(%10186) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10189 = "llvm.getelementptr"(%10186) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10190 = "llvm.getelementptr"(%10186) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10191 = "llvm.load"(%10187) : (!llvm.ptr) -> i64
    %10192 = "llvm.load"(%10188) : (!llvm.ptr) -> i64
    %10193 = "llvm.load"(%10189) : (!llvm.ptr) -> !llvm.ptr
    %10194 = "llvm.load"(%10190) : (!llvm.ptr) -> !llvm.ptr
    %10195 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10196 = "llvm.ptrtoint"(%10195) : (!llvm.ptr) -> i64
    %10197 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10198 = "mini.subtype"(%10193, %10192, %10191, %10197, %10196, %10194) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10198) [^bb1208, ^bb1208] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1207:
    %10199 = "llvm.getelementptr"(%10181) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10200 = "llvm.load"(%10199) : (!llvm.ptr) -> !llvm.ptr
    %10201 = "llvm.getelementptr"(%10200) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10202 = "llvm.getelementptr"(%10200) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10203 = "llvm.getelementptr"(%10200) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10204 = "llvm.getelementptr"(%10200) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10205 = "llvm.load"(%10201) : (!llvm.ptr) -> i64
    %10206 = "llvm.load"(%10202) : (!llvm.ptr) -> i64
    %10207 = "llvm.load"(%10203) : (!llvm.ptr) -> !llvm.ptr
    %10208 = "llvm.load"(%10204) : (!llvm.ptr) -> !llvm.ptr
    %10209 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10210 = "llvm.ptrtoint"(%10209) : (!llvm.ptr) -> i64
    %10211 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10212 = "mini.subtype"(%10207, %10206, %10205, %10211, %10210, %10208) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10212) [^bb1210, ^bb1210] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1209:
    %10213 = "llvm.extractvalue"(%10180) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10214 = "llvm.load"(%10183) : (!llvm.ptr) -> i32
    %10215 = "llvm.getelementptr"(%10213, %10214) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10216 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10217 = "llvm.getelementptr"(%10215, %10216) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10217) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_init_firstIterable2T_secondIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1211(%10218 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10219 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10220 : !llvm.ptr):
    %10221 = "mini.wrap"(%10218) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %10222 = "mini.to_fat_ptr"(%10221) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable2", "to_typ_name" = "ProductIterable2", "invariant"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %10223 = "mini.get_field"(%10222) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>
    %10224 = "mini.get_field"(%10222) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %10225 = "mini.unwrap"(%10223) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10226 = "mini.unwrap"(%10224) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10227 = "mini.get_type_field"(%10222) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.reified_type
    %10228 = "mini.get_type_field"(%10222) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.reified_type
    %10229 = "mini.parameterization"(%10227, %10228) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["ProductIterable2.T_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %10230 = "mini.parameterization"(%10227, %10228) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["ProductIterable2.U_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %10231 = "mini.parameterization"(%10227, %10228) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairProductIterable2.T_subtype_Any._ProductIterable2.U_subtype_Any", ["ProductIterable2.T_subtype_Any"], ["ProductIterable2.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %10232 = "mini.new"(%10229, %10230, %10231) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ProductIterator2", "num_data_fields" = 4 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %10233 = "mini.get_field"(%10222) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>
    %10234 = "mini.get_field"(%10222) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>
    %10235 = "mini.to_fat_ptr"(%10233) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>
    %10236 = "mini.unwrap"(%10235) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10237 = "mini.to_fat_ptr"(%10234) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %10238 = "mini.unwrap"(%10237) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10239 = "mini.unwrap"(%10232) : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10240 = "mini.get_type_field"(%10222) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.reified_type
    %10241 = "mini.get_type_field"(%10222) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.reified_type
    %10242 = "mini.parameterization"(%10240, %10241) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2ProductIterable2.T_subtype_Any", ["ProductIterable2.T_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %10243 = "mini.parameterization"(%10240, %10241) {"id_hierarchy" = ["Iterable2", [1 : i32]], "name_hierarchy" = ["Iterable2ProductIterable2.U_subtype_Any", ["ProductIterable2.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %10244 = "mini.parameterizations_array"(%10242, %10243) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%10244, %10239, %10236, %10238) {"offset" = 7 : i32, "vptrs" = [#none, #none], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %10245 = "mini.to_fat_ptr"(%10232) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterable2">, !mini.type_param<"U", !mini.any, "ProductIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    "mini.return"(%10245) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> ()
  }) {"func_name" = "ProductIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1212(%10246 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10247 : !llvm.ptr):
    %10248 = "mini.invariant"(%10247) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10249 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1213] : () -> ()
  ^bb1213:
    %10250 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%10250, %10249) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1214] : () -> ()
  ^bb1214:
    %10251 = "llvm.extractvalue"(%10246) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10252 = "llvm.load"(%10249) : (!llvm.ptr) -> i32
    %10253 = "llvm.getelementptr"(%10251, %10252) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10254 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10255 = "llvm.getelementptr"(%10253, %10254) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10255) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1215(%10256 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10257 : !llvm.ptr):
    %10258 = "mini.invariant"(%10257) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10259 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1216] : () -> ()
  ^bb1217:
    %10260 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%10260, %10259) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1218] : () -> ()
  ^bb1216:
    %10261 = "llvm.getelementptr"(%10257) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10262 = "llvm.load"(%10261) : (!llvm.ptr) -> !llvm.ptr
    %10263 = "llvm.getelementptr"(%10262) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10264 = "llvm.getelementptr"(%10262) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10265 = "llvm.getelementptr"(%10262) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10266 = "llvm.getelementptr"(%10262) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10267 = "llvm.load"(%10263) : (!llvm.ptr) -> i64
    %10268 = "llvm.load"(%10264) : (!llvm.ptr) -> i64
    %10269 = "llvm.load"(%10265) : (!llvm.ptr) -> !llvm.ptr
    %10270 = "llvm.load"(%10266) : (!llvm.ptr) -> !llvm.ptr
    %10271 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10272 = "llvm.ptrtoint"(%10271) : (!llvm.ptr) -> i64
    %10273 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10274 = "mini.subtype"(%10269, %10268, %10267, %10273, %10272, %10270) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10274) [^bb1217, ^bb1217] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1218:
    %10275 = "llvm.extractvalue"(%10256) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10276 = "llvm.load"(%10259) : (!llvm.ptr) -> i32
    %10277 = "llvm.getelementptr"(%10275, %10276) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10278 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10279 = "llvm.getelementptr"(%10277, %10278) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10279) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1219(%10280 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10281 : !llvm.ptr):
    %10282 = "mini.invariant"(%10281) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10283 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1220] : () -> ()
  ^bb1221:
    %10284 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%10284, %10283) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1222] : () -> ()
  ^bb1223:
    %10285 = "llvm.getelementptr"(%10281) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10286 = "llvm.load"(%10285) : (!llvm.ptr) -> !llvm.ptr
    %10287 = "llvm.getelementptr"(%10286) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10288 = "llvm.getelementptr"(%10286) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10289 = "llvm.getelementptr"(%10286) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10290 = "llvm.getelementptr"(%10286) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10291 = "llvm.load"(%10287) : (!llvm.ptr) -> i64
    %10292 = "llvm.load"(%10288) : (!llvm.ptr) -> i64
    %10293 = "llvm.load"(%10289) : (!llvm.ptr) -> !llvm.ptr
    %10294 = "llvm.load"(%10290) : (!llvm.ptr) -> !llvm.ptr
    %10295 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10296 = "llvm.ptrtoint"(%10295) : (!llvm.ptr) -> i64
    %10297 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10298 = "mini.subtype"(%10293, %10292, %10291, %10297, %10296, %10294) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10298) [^bb1221, ^bb1221] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1220:
    %10299 = "llvm.getelementptr"(%10281) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10300 = "llvm.load"(%10299) : (!llvm.ptr) -> !llvm.ptr
    %10301 = "llvm.getelementptr"(%10300) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10302 = "llvm.getelementptr"(%10300) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10303 = "llvm.getelementptr"(%10300) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10304 = "llvm.getelementptr"(%10300) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10305 = "llvm.load"(%10301) : (!llvm.ptr) -> i64
    %10306 = "llvm.load"(%10302) : (!llvm.ptr) -> i64
    %10307 = "llvm.load"(%10303) : (!llvm.ptr) -> !llvm.ptr
    %10308 = "llvm.load"(%10304) : (!llvm.ptr) -> !llvm.ptr
    %10309 = "mini.addr_of"() {"global_name" = @Pair} : () -> !llvm.ptr
    %10310 = "llvm.ptrtoint"(%10309) : (!llvm.ptr) -> i64
    %10311 = "llvm.mlir.constant"() <{"value" = 9197944775169318296 : i64}> : () -> i64
    %10312 = "mini.subtype"(%10307, %10306, %10305, %10311, %10310, %10308) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10312) [^bb1223, ^bb1223] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1222:
    %10313 = "llvm.extractvalue"(%10280) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10314 = "llvm.load"(%10283) : (!llvm.ptr) -> i32
    %10315 = "llvm.getelementptr"(%10313, %10314) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10316 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10317 = "llvm.getelementptr"(%10315, %10316) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10317) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1224(%10318 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10319 : !llvm.ptr):
    %10320 = "mini.invariant"(%10319) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10321 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1225] : () -> ()
  ^bb1226:
    %10322 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%10322, %10321) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1227] : () -> ()
  ^bb1225:
    %10323 = "llvm.getelementptr"(%10319) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10324 = "llvm.load"(%10323) : (!llvm.ptr) -> !llvm.ptr
    %10325 = "llvm.getelementptr"(%10324) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10326 = "llvm.getelementptr"(%10324) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10327 = "llvm.getelementptr"(%10324) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10328 = "llvm.getelementptr"(%10324) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10329 = "llvm.load"(%10325) : (!llvm.ptr) -> i64
    %10330 = "llvm.load"(%10326) : (!llvm.ptr) -> i64
    %10331 = "llvm.load"(%10327) : (!llvm.ptr) -> !llvm.ptr
    %10332 = "llvm.load"(%10328) : (!llvm.ptr) -> !llvm.ptr
    %10333 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10334 = "llvm.ptrtoint"(%10333) : (!llvm.ptr) -> i64
    %10335 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10336 = "mini.subtype"(%10331, %10330, %10329, %10335, %10334, %10332) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10336) [^bb1226, ^bb1226] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1227:
    %10337 = "llvm.extractvalue"(%10318) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10338 = "llvm.load"(%10321) : (!llvm.ptr) -> i32
    %10339 = "llvm.getelementptr"(%10337, %10338) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10340 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10341 = "llvm.getelementptr"(%10339, %10340) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10341) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1228(%10342 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10343 : !llvm.ptr):
    %10344 = "mini.invariant"(%10343) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10345 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1229] : () -> ()
  ^bb1230:
    %10346 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%10346, %10345) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1231] : () -> ()
  ^bb1229:
    %10347 = "llvm.getelementptr"(%10343) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10348 = "llvm.load"(%10347) : (!llvm.ptr) -> !llvm.ptr
    %10349 = "llvm.getelementptr"(%10348) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10350 = "llvm.getelementptr"(%10348) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10351 = "llvm.getelementptr"(%10348) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10352 = "llvm.getelementptr"(%10348) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10353 = "llvm.load"(%10349) : (!llvm.ptr) -> i64
    %10354 = "llvm.load"(%10350) : (!llvm.ptr) -> i64
    %10355 = "llvm.load"(%10351) : (!llvm.ptr) -> !llvm.ptr
    %10356 = "llvm.load"(%10352) : (!llvm.ptr) -> !llvm.ptr
    %10357 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10358 = "llvm.ptrtoint"(%10357) : (!llvm.ptr) -> i64
    %10359 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10360 = "mini.subtype"(%10355, %10354, %10353, %10359, %10358, %10356) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10360) [^bb1230, ^bb1230] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1231:
    %10361 = "llvm.extractvalue"(%10342) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10362 = "llvm.load"(%10345) : (!llvm.ptr) -> i32
    %10363 = "llvm.getelementptr"(%10361, %10362) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10364 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10365 = "llvm.getelementptr"(%10363, %10364) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10365) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1232(%10366 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10367 : !llvm.ptr):
    %10368 = "mini.invariant"(%10367) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10369 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1233] : () -> ()
  ^bb1234:
    %10370 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%10370, %10369) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1235] : () -> ()
  ^bb1233:
    %10371 = "llvm.getelementptr"(%10367) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10372 = "llvm.load"(%10371) : (!llvm.ptr) -> !llvm.ptr
    %10373 = "llvm.getelementptr"(%10372) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10374 = "llvm.getelementptr"(%10372) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10375 = "llvm.getelementptr"(%10372) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10376 = "llvm.getelementptr"(%10372) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10377 = "llvm.load"(%10373) : (!llvm.ptr) -> i64
    %10378 = "llvm.load"(%10374) : (!llvm.ptr) -> i64
    %10379 = "llvm.load"(%10375) : (!llvm.ptr) -> !llvm.ptr
    %10380 = "llvm.load"(%10376) : (!llvm.ptr) -> !llvm.ptr
    %10381 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10382 = "llvm.ptrtoint"(%10381) : (!llvm.ptr) -> i64
    %10383 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10384 = "mini.subtype"(%10379, %10378, %10377, %10383, %10382, %10380) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10384) [^bb1234, ^bb1234] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1235:
    %10385 = "llvm.extractvalue"(%10366) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10386 = "llvm.load"(%10369) : (!llvm.ptr) -> i32
    %10387 = "llvm.getelementptr"(%10385, %10386) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10388 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10389 = "llvm.getelementptr"(%10387, %10388) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10389) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1236(%10390 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10391 : !llvm.ptr):
    %10392 = "mini.invariant"(%10391) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10393 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1237] : () -> ()
  ^bb1238:
    %10394 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%10394, %10393) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1239] : () -> ()
  ^bb1237:
    %10395 = "llvm.getelementptr"(%10391) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10396 = "llvm.load"(%10395) : (!llvm.ptr) -> !llvm.ptr
    %10397 = "llvm.getelementptr"(%10396) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10398 = "llvm.getelementptr"(%10396) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10399 = "llvm.getelementptr"(%10396) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10400 = "llvm.getelementptr"(%10396) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10401 = "llvm.load"(%10397) : (!llvm.ptr) -> i64
    %10402 = "llvm.load"(%10398) : (!llvm.ptr) -> i64
    %10403 = "llvm.load"(%10399) : (!llvm.ptr) -> !llvm.ptr
    %10404 = "llvm.load"(%10400) : (!llvm.ptr) -> !llvm.ptr
    %10405 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10406 = "llvm.ptrtoint"(%10405) : (!llvm.ptr) -> i64
    %10407 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10408 = "mini.subtype"(%10403, %10402, %10401, %10407, %10406, %10404) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10408) [^bb1238, ^bb1238] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1239:
    %10409 = "llvm.extractvalue"(%10390) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10410 = "llvm.load"(%10393) : (!llvm.ptr) -> i32
    %10411 = "llvm.getelementptr"(%10409, %10410) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10412 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10413 = "llvm.getelementptr"(%10411, %10412) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10413) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1240(%10414 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10415 : !llvm.ptr):
    %10416 = "mini.invariant"(%10415) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10417 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1241] : () -> ()
  ^bb1242:
    %10418 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%10418, %10417) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1243] : () -> ()
  ^bb1241:
    %10419 = "llvm.getelementptr"(%10415) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10420 = "llvm.load"(%10419) : (!llvm.ptr) -> !llvm.ptr
    %10421 = "llvm.getelementptr"(%10420) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10422 = "llvm.getelementptr"(%10420) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10423 = "llvm.getelementptr"(%10420) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10424 = "llvm.getelementptr"(%10420) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10425 = "llvm.load"(%10421) : (!llvm.ptr) -> i64
    %10426 = "llvm.load"(%10422) : (!llvm.ptr) -> i64
    %10427 = "llvm.load"(%10423) : (!llvm.ptr) -> !llvm.ptr
    %10428 = "llvm.load"(%10424) : (!llvm.ptr) -> !llvm.ptr
    %10429 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10430 = "llvm.ptrtoint"(%10429) : (!llvm.ptr) -> i64
    %10431 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10432 = "mini.subtype"(%10427, %10426, %10425, %10431, %10430, %10428) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10432) [^bb1242, ^bb1242] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1243:
    %10433 = "llvm.extractvalue"(%10414) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10434 = "llvm.load"(%10417) : (!llvm.ptr) -> i32
    %10435 = "llvm.getelementptr"(%10433, %10434) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10436 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10437 = "llvm.getelementptr"(%10435, %10436) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10437) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1244(%10438 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10439 : !llvm.ptr):
    %10440 = "mini.invariant"(%10439) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10441 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1245] : () -> ()
  ^bb1246:
    %10442 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%10442, %10441) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1247] : () -> ()
  ^bb1245:
    %10443 = "llvm.getelementptr"(%10439) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10444 = "llvm.load"(%10443) : (!llvm.ptr) -> !llvm.ptr
    %10445 = "llvm.getelementptr"(%10444) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10446 = "llvm.getelementptr"(%10444) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10447 = "llvm.getelementptr"(%10444) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10448 = "llvm.getelementptr"(%10444) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10449 = "llvm.load"(%10445) : (!llvm.ptr) -> i64
    %10450 = "llvm.load"(%10446) : (!llvm.ptr) -> i64
    %10451 = "llvm.load"(%10447) : (!llvm.ptr) -> !llvm.ptr
    %10452 = "llvm.load"(%10448) : (!llvm.ptr) -> !llvm.ptr
    %10453 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10454 = "llvm.ptrtoint"(%10453) : (!llvm.ptr) -> i64
    %10455 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10456 = "mini.subtype"(%10451, %10450, %10449, %10455, %10454, %10452) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10456) [^bb1246, ^bb1246] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1247:
    %10457 = "llvm.extractvalue"(%10438) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10458 = "llvm.load"(%10441) : (!llvm.ptr) -> i32
    %10459 = "llvm.getelementptr"(%10457, %10458) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10460 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10461 = "llvm.getelementptr"(%10459, %10460) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10461) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1248(%10462 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10463 : !llvm.ptr):
    %10464 = "mini.invariant"(%10463) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10465 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1249] : () -> ()
  ^bb1250:
    %10466 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%10466, %10465) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1251] : () -> ()
  ^bb1249:
    %10467 = "llvm.getelementptr"(%10463) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10468 = "llvm.load"(%10467) : (!llvm.ptr) -> !llvm.ptr
    %10469 = "llvm.getelementptr"(%10468) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10470 = "llvm.getelementptr"(%10468) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10471 = "llvm.getelementptr"(%10468) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10472 = "llvm.getelementptr"(%10468) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10473 = "llvm.load"(%10469) : (!llvm.ptr) -> i64
    %10474 = "llvm.load"(%10470) : (!llvm.ptr) -> i64
    %10475 = "llvm.load"(%10471) : (!llvm.ptr) -> !llvm.ptr
    %10476 = "llvm.load"(%10472) : (!llvm.ptr) -> !llvm.ptr
    %10477 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10478 = "llvm.ptrtoint"(%10477) : (!llvm.ptr) -> i64
    %10479 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10480 = "mini.subtype"(%10475, %10474, %10473, %10479, %10478, %10476) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10480) [^bb1250, ^bb1250] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1251:
    %10481 = "llvm.extractvalue"(%10462) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10482 = "llvm.load"(%10465) : (!llvm.ptr) -> i32
    %10483 = "llvm.getelementptr"(%10481, %10482) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10484 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10485 = "llvm.getelementptr"(%10483, %10484) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10485) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1252(%10486 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10487 : !llvm.ptr):
    %10488 = "mini.invariant"(%10487) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10489 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1253] : () -> ()
  ^bb1254:
    %10490 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%10490, %10489) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1255] : () -> ()
  ^bb1253:
    %10491 = "llvm.getelementptr"(%10487) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10492 = "llvm.load"(%10491) : (!llvm.ptr) -> !llvm.ptr
    %10493 = "llvm.getelementptr"(%10492) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10494 = "llvm.getelementptr"(%10492) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10495 = "llvm.getelementptr"(%10492) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10496 = "llvm.getelementptr"(%10492) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10497 = "llvm.load"(%10493) : (!llvm.ptr) -> i64
    %10498 = "llvm.load"(%10494) : (!llvm.ptr) -> i64
    %10499 = "llvm.load"(%10495) : (!llvm.ptr) -> !llvm.ptr
    %10500 = "llvm.load"(%10496) : (!llvm.ptr) -> !llvm.ptr
    %10501 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10502 = "llvm.ptrtoint"(%10501) : (!llvm.ptr) -> i64
    %10503 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10504 = "mini.subtype"(%10499, %10498, %10497, %10503, %10502, %10500) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10504) [^bb1254, ^bb1254] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1255:
    %10505 = "llvm.extractvalue"(%10486) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10506 = "llvm.load"(%10489) : (!llvm.ptr) -> i32
    %10507 = "llvm.getelementptr"(%10505, %10506) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10508 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10509 = "llvm.getelementptr"(%10507, %10508) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10509) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ProductIterator2", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ProductIterator2_field_ProductIterator2_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ProductIterator2_field_ProductIterator2_1"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ProductIterator2_field_ProductIterator2_2"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator2_getter_first_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ProductIterator2.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator2_setter_first_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ProductIterator2.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator2_field_first_iterator", "getter_name" = "ProductIterator2_getter_first_iterator", "setter_name" = "ProductIterator2_setter_first_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator2_getter_second_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ProductIterator2.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator2_setter_second_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator2", "parameterization" = "_parameterization_Iterator2ProductIterator2.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator2_field_second_iterator", "getter_name" = "ProductIterator2_getter_second_iterator", "setter_name" = "ProductIterator2_setter_second_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator2_getter_second_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 5 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ProductIterator2.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator2_setter_second_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 5 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable2", "parameterization" = "_parameterization_Iterable2ProductIterator2.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator2_field_second_iterable", "getter_name" = "ProductIterator2_getter_second_iterable", "setter_name" = "ProductIterator2_setter_second_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator2_getter_current_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 6 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_ProductIterator2.T_subtype_Any_or_Nil"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator2_setter_current_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 6 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_ProductIterator2.T_subtype_Any_or_Nil"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator2_field_current_first", "getter_name" = "ProductIterator2_getter_current_first", "setter_name" = "ProductIterator2_setter_current_first"} : () -> ()
  "mini.func"() ({
  ^bb1256(%10510 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10511 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10512 : !llvm.ptr, %10513 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10514 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10515 = "mini.wrap"(%10510) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %10516 = "mini.to_fat_ptr"(%10515) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator2", "to_typ_name" = "ProductIterator2", "invariant"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %10517 = "mini.wrap"(%10513) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>
    %10518 = "mini.to_fat_ptr"(%10517) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>
    %10519 = "mini.wrap"(%10514) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %10520 = "mini.to_fat_ptr"(%10519) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %10521 = "mini.to_fat_ptr"(%10520) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
    "mini.set_field"(%10516, %10521) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> ()
    %10522 = "mini.unwrap"(%10518) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10523 = "mini.get_type_field"(%10516) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
    %10524 = "mini.get_type_field"(%10516) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
    %10525 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %10526 = "mini.method_call"(%10525, %10522) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %10527 = "mini.to_fat_ptr"(%10526) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>
    %10528 = "mini.to_fat_ptr"(%10527) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>
    "mini.set_field"(%10516, %10528) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>) -> ()
    %10529 = "mini.get_field"(%10516) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %10530 = "mini.unwrap"(%10529) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10531 = "mini.get_type_field"(%10516) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
    %10532 = "mini.get_type_field"(%10516) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
    %10533 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %10534 = "mini.method_call"(%10533, %10530) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
    %10535 = "mini.to_fat_ptr"(%10534) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %10536 = "mini.to_fat_ptr"(%10535) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
    "mini.set_field"(%10516, %10536) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> ()
    %10537 = "mini.get_field"(%10516) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>
    %10538 = "mini.unwrap"(%10537) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10539 = "mini.get_type_field"(%10516) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
    %10540 = "mini.get_type_field"(%10516) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
    %10541 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %10542 = "mini.method_call"(%10541, %10538) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
    %10543 = builtin.unrealized_conversion_cast %10542 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
    %10544 = builtin.unrealized_conversion_cast %10543 : !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
    "mini.set_field"(%10516, %10544) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>, !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1257(%10545 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10546 : !llvm.ptr):
    %10547 = "mini.invariant"(%10546) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10548 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1258] : () -> ()
  ^bb1259:
    %10549 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%10549, %10548) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1260] : () -> ()
  ^bb1261:
    %10550 = "llvm.getelementptr"(%10546) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10551 = "llvm.load"(%10550) : (!llvm.ptr) -> !llvm.ptr
    %10552 = "llvm.getelementptr"(%10551) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10553 = "llvm.getelementptr"(%10551) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10554 = "llvm.getelementptr"(%10551) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10555 = "llvm.getelementptr"(%10551) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10556 = "llvm.load"(%10552) : (!llvm.ptr) -> i64
    %10557 = "llvm.load"(%10553) : (!llvm.ptr) -> i64
    %10558 = "llvm.load"(%10554) : (!llvm.ptr) -> !llvm.ptr
    %10559 = "llvm.load"(%10555) : (!llvm.ptr) -> !llvm.ptr
    %10560 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10561 = "llvm.ptrtoint"(%10560) : (!llvm.ptr) -> i64
    %10562 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10563 = "mini.subtype"(%10558, %10557, %10556, %10562, %10561, %10559) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10563) [^bb1259, ^bb1259] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1258:
    %10564 = "llvm.getelementptr"(%10546) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10565 = "llvm.load"(%10564) : (!llvm.ptr) -> !llvm.ptr
    %10566 = "llvm.getelementptr"(%10565) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10567 = "llvm.getelementptr"(%10565) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10568 = "llvm.getelementptr"(%10565) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10569 = "llvm.getelementptr"(%10565) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10570 = "llvm.load"(%10566) : (!llvm.ptr) -> i64
    %10571 = "llvm.load"(%10567) : (!llvm.ptr) -> i64
    %10572 = "llvm.load"(%10568) : (!llvm.ptr) -> !llvm.ptr
    %10573 = "llvm.load"(%10569) : (!llvm.ptr) -> !llvm.ptr
    %10574 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10575 = "llvm.ptrtoint"(%10574) : (!llvm.ptr) -> i64
    %10576 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10577 = "mini.subtype"(%10572, %10571, %10570, %10576, %10575, %10573) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10577) [^bb1261, ^bb1261] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1260:
    %10578 = "llvm.extractvalue"(%10545) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10579 = "llvm.load"(%10548) : (!llvm.ptr) -> i32
    %10580 = "llvm.getelementptr"(%10578, %10579) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10581 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10582 = "llvm.getelementptr"(%10580, %10581) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10582) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1262(%10583 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10584 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10585 : !llvm.ptr):
    %10586 = "mini.wrap"(%10583) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %10587 = "mini.to_fat_ptr"(%10586) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator2", "to_typ_name" = "ProductIterator2", "invariant"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>
    %10588 = "mini.get_field"(%10587) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
    %10589 = builtin.unrealized_conversion_cast %10588 : !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
    "mini.while"() ({
      %10590 = "mini.checkflag"(%10589) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>) -> i1
      %10591 = "mini.unwrap"(%10590) : (i1) -> i1
    }, {
      %10592 = "mini.to_fat_ptr"(%10589) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "ProductIterator2">
      %10593 = "mini.get_field"(%10587) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
      %10594 = "mini.unwrap"(%10593) : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %10595 = "mini.get_type_field"(%10587) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
      %10596 = "mini.get_type_field"(%10587) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
      %10597 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %10598 = "mini.method_call"(%10597, %10594) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
      %10599 = builtin.unrealized_conversion_cast %10598 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator2">, !mini.nil]>
      %10600 = "mini.checkflag"(%10599) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator2">, !mini.nil]>) -> i1
      %10601 = "mini.unwrap"(%10600) : (i1) -> i1
      %10602 = builtin.unrealized_conversion_cast %10599 : !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator2">, !mini.nil]>
      "mini.if"(%10601) ({
        %10603 = "mini.to_fat_ptr"(%10602) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator2">, !mini.nil]>) -> !mini.type_param<"U", !mini.any, "ProductIterator2">
        %10604 = "mini.unwrap"(%10592) : (!mini.type_param<"T", !mini.any, "ProductIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
        %10605 = "mini.unwrap"(%10603) : (!mini.type_param<"U", !mini.any, "ProductIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
        %10606 = "mini.get_type_field"(%10587) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
        %10607 = "mini.get_type_field"(%10587) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
        %10608 = "mini.parameterization"(%10606, %10607) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["ProductIterator2.T_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
        %10609 = "mini.parameterization"(%10606, %10607) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["ProductIterator2.U_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
        %10610 = "mini.new"(%10608, %10609) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr, !llvm.ptr) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>
        %10611 = "mini.to_fat_ptr"(%10592) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "ProductIterator2">) -> !mini.type_param<"T", !mini.any, "Pair">
        %10612 = "mini.unwrap"(%10611) : (!mini.type_param<"T", !mini.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %10613 = "mini.to_fat_ptr"(%10603) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "ProductIterator2">) -> !mini.type_param<"U", !mini.any, "Pair">
        %10614 = "mini.unwrap"(%10613) : (!mini.type_param<"U", !mini.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %10615 = "mini.unwrap"(%10610) : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %10616 = "mini.get_type_field"(%10587) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
        %10617 = "mini.get_type_field"(%10587) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
        %10618 = "mini.parameterization"(%10616, %10617) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["ProductIterator2.T_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
        %10619 = "mini.parameterization"(%10616, %10617) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["ProductIterator2.U_subtype_Any"]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
        %10620 = "mini.parameterizations_array"(%10618, %10619) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mini.method_call"(%10620, %10615, %10612, %10614) {"offset" = 4 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %10621 = builtin.unrealized_conversion_cast %10610 : !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]> to !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
        "mini.return"(%10621) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>) -> ()
        "mini.castassign"(%10602, %10603) ({
          %10622 = builtin.unrealized_conversion_cast %10603 : !mini.type_param<"U", !mini.any, "ProductIterator2"> to !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator2">, !mini.nil]>
        }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator2">, !mini.nil]>, !mini.type_param<"U", !mini.any, "ProductIterator2">) -> ()
      }) : (i1) -> ()
      %10623 = "mini.get_field"(%10587) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator2"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>
      %10624 = "mini.unwrap"(%10623) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %10625 = "mini.get_type_field"(%10587) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
      %10626 = "mini.get_type_field"(%10587) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
      %10627 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %10628 = "mini.method_call"(%10627, %10624) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
      %10629 = builtin.unrealized_conversion_cast %10628 : !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
      %10630 = builtin.unrealized_conversion_cast %10629 : !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
      "mini.set_field"(%10587, %10630) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>, !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>) -> ()
      %10631 = "mini.get_field"(%10587) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable2"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
      %10632 = "mini.unwrap"(%10631) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %10633 = "mini.get_type_field"(%10587) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
      %10634 = "mini.get_type_field"(%10587) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.reified_type
      %10635 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %10636 = "mini.method_call"(%10635, %10632) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>
      %10637 = "mini.to_fat_ptr"(%10636) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.any, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
      %10638 = "mini.to_fat_ptr"(%10637) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>
      "mini.set_field"(%10587, %10638) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> ()
      %10639 = "mini.get_field"(%10587) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.type_param<"U", !mini.any, "ProductIterator2">]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
      "mini.castassign"(%10589, %10639) ({
        %10640 = builtin.unrealized_conversion_cast %10639 : !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator2">, !mini.nil]>) -> ()
    }) : () -> ()
    %10641 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %10642 = "mini.unionize"(%10641) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>
    "mini.return"(%10642) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "ProductIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1263(%10643 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10644 : !llvm.ptr):
    %10645 = "mini.invariant"(%10644) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10646 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1264] : () -> ()
  ^bb1264:
    %10647 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%10647, %10646) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1265] : () -> ()
  ^bb1265:
    %10648 = "llvm.extractvalue"(%10643) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10649 = "llvm.load"(%10646) : (!llvm.ptr) -> i32
    %10650 = "llvm.getelementptr"(%10648, %10649) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10651 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10652 = "llvm.getelementptr"(%10650, %10651) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10652) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Math", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb1266(%10653 : !llvm.ptr, %10654 : f64):
    %10655 = "mini.wrap"(%10654) : (f64) -> !mini.ptr<f64>
    %10656 = builtin.unrealized_conversion_cast %10655 : !mini.ptr<f64> to !mini.ptr<f64>
    %10657 = "mini.unwrap"(%10656) : (!mini.ptr<f64>) -> f64
    %10658 = "mini.intrinsic"(%10657) {"call_name" = "llvm.sqrt.f64", "num_args" = 1 : i32} : (f64) -> f64
    %10659 = "mini.wrap"(%10658) : (f64) -> !mini.ptr<f64>
    %10660 = builtin.unrealized_conversion_cast %10659 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.return"(%10660) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_sqrt_xPtrf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1267(%10661 : !llvm.ptr):
    %10662 = "mini.invariant"(%10661) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10663 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1268] : () -> ()
  ^bb1269:
    %10664 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%10664, %10663) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1270] : () -> ()
  ^bb1268:
    %10665 = "llvm.getelementptr"(%10661) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10666 = "llvm.load"(%10665) : (!llvm.ptr) -> !llvm.ptr
    %10667 = "llvm.getelementptr"(%10666) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10668 = "llvm.getelementptr"(%10666) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10669 = "llvm.getelementptr"(%10666) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10670 = "llvm.getelementptr"(%10666) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10671 = "llvm.load"(%10667) : (!llvm.ptr) -> i64
    %10672 = "llvm.load"(%10668) : (!llvm.ptr) -> i64
    %10673 = "llvm.load"(%10669) : (!llvm.ptr) -> !llvm.ptr
    %10674 = "llvm.load"(%10670) : (!llvm.ptr) -> !llvm.ptr
    %10675 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %10676 = "llvm.ptrtoint"(%10675) : (!llvm.ptr) -> i64
    %10677 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %10678 = "mini.subtype"(%10673, %10672, %10671, %10677, %10676, %10674) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10678) [^bb1269, ^bb1269] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1270:
    %10679 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %10680 = "llvm.load"(%10663) : (!llvm.ptr) -> i32
    %10681 = "llvm.getelementptr"(%10679, %10680) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10682 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10683 = "llvm.getelementptr"(%10681, %10682) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10683) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_sqrt_xPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1271(%10684 : !llvm.ptr, %10685 : !llvm.struct<(!llvm.ptr, i64)>):
    %10686 = "mini.wrap"(%10685) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %10687 = "mini.narrow"(%10686) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %10688 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10689 = "mini.unwrap"(%10687) : (!mini.ptr<i32>) -> i32
    %10690 = "mini.unwrap"(%10688) : (!mini.ptr<i32>) -> i32
    %10691 = "mini.comparison"(%10689, %10690) {"op" = "GE"} : (i32, i32) -> i1
    %10692 = "mini.wrap"(%10691) : (i1) -> !mini.ptr<i32>
    %10693 = "mini.unwrap"(%10692) : (!mini.ptr<i32>) -> i1
    "mini.if"(%10693) ({
      %10694 = "mini.unionize"(%10687) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
      "mini.return"(%10694) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
    }) : (i1) -> ()
    %10695 = "mini.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %10696 = "mini.unwrap"(%10695) : (!mini.ptr<i32>) -> i32
    %10697 = "mini.unwrap"(%10687) : (!mini.ptr<i32>) -> i32
    %10698 = "mini.arithmetic"(%10696, %10697) {"op" = "MUL"} : (i32, i32) -> i32
    %10699 = "mini.wrap"(%10698) : (i32) -> !mini.ptr<i32>
    %10700 = "mini.unionize"(%10699) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    "mini.return"(%10700) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
  }) {"func_name" = "Math__Self_abs_xPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1272(%10701 : !llvm.ptr, %10702 : !llvm.struct<(!llvm.ptr, i64)>):
    %10703 = "mini.wrap"(%10702) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %10704 = "mini.narrow"(%10703) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<f64>
    %10705 = "mini.literal"() {"value" = 0.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %10706 = "mini.unwrap"(%10704) : (!mini.ptr<f64>) -> f64
    %10707 = "mini.unwrap"(%10705) : (!mini.ptr<f64>) -> f64
    %10708 = "mini.comparison"(%10706, %10707) {"op" = "GE"} : (f64, f64) -> i1
    %10709 = "mini.wrap"(%10708) : (i1) -> !mini.ptr<f64>
    %10710 = "mini.unwrap"(%10709) : (!mini.ptr<f64>) -> i1
    "mini.if"(%10710) ({
      %10711 = "mini.unionize"(%10704) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
      "mini.return"(%10711) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
    }) : (i1) -> ()
    %10712 = "mini.literal"() {"value" = 0.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %10713 = "mini.literal"() {"value" = 1.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %10714 = "mini.unwrap"(%10712) : (!mini.ptr<f64>) -> f64
    %10715 = "mini.unwrap"(%10713) : (!mini.ptr<f64>) -> f64
    %10716 = "mini.arithmetic"(%10714, %10715) {"op" = "SUB"} : (f64, f64) -> f64
    %10717 = "mini.wrap"(%10716) : (f64) -> !mini.ptr<f64>
    %10718 = "mini.unwrap"(%10717) : (!mini.ptr<f64>) -> f64
    %10719 = "mini.unwrap"(%10704) : (!mini.ptr<f64>) -> f64
    %10720 = "mini.arithmetic"(%10718, %10719) {"op" = "MUL"} : (f64, f64) -> f64
    %10721 = "mini.wrap"(%10720) : (f64) -> !mini.ptr<f64>
    %10722 = "mini.unionize"(%10721) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    "mini.return"(%10722) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
  }) {"func_name" = "Math__Self_abs_xPtrf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1273(%10723 : !llvm.ptr):
    %10724 = "mini.invariant"(%10723) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10725 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1274] : () -> ()
  ^bb1275:
    %10726 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%10726, %10725) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1276] : () -> ()
  ^bb1277:
    %10727 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%10727, %10725) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1276] : () -> ()
  ^bb1274:
    %10728 = "llvm.getelementptr"(%10723) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10729 = "llvm.load"(%10728) : (!llvm.ptr) -> !llvm.ptr
    %10730 = "llvm.getelementptr"(%10729) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10731 = "llvm.getelementptr"(%10729) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10732 = "llvm.getelementptr"(%10729) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10733 = "llvm.getelementptr"(%10729) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10734 = "llvm.load"(%10730) : (!llvm.ptr) -> i64
    %10735 = "llvm.load"(%10731) : (!llvm.ptr) -> i64
    %10736 = "llvm.load"(%10732) : (!llvm.ptr) -> !llvm.ptr
    %10737 = "llvm.load"(%10733) : (!llvm.ptr) -> !llvm.ptr
    %10738 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %10739 = "llvm.ptrtoint"(%10738) : (!llvm.ptr) -> i64
    %10740 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %10741 = "mini.subtype"(%10736, %10735, %10734, %10740, %10739, %10737) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10741) [^bb1275, ^bb1278] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1278:
    %10742 = "llvm.getelementptr"(%10723) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10743 = "llvm.load"(%10742) : (!llvm.ptr) -> !llvm.ptr
    %10744 = "llvm.getelementptr"(%10743) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10745 = "llvm.getelementptr"(%10743) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10746 = "llvm.getelementptr"(%10743) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10747 = "llvm.getelementptr"(%10743) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10748 = "llvm.load"(%10744) : (!llvm.ptr) -> i64
    %10749 = "llvm.load"(%10745) : (!llvm.ptr) -> i64
    %10750 = "llvm.load"(%10746) : (!llvm.ptr) -> !llvm.ptr
    %10751 = "llvm.load"(%10747) : (!llvm.ptr) -> !llvm.ptr
    %10752 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %10753 = "llvm.ptrtoint"(%10752) : (!llvm.ptr) -> i64
    %10754 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %10755 = "mini.subtype"(%10750, %10749, %10748, %10754, %10753, %10751) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10755) [^bb1277, ^bb1277] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1276:
    %10756 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %10757 = "llvm.load"(%10725) : (!llvm.ptr) -> i32
    %10758 = "llvm.getelementptr"(%10756, %10757) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10759 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10760 = "llvm.getelementptr"(%10758, %10759) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10760) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_abs_xPtri32__Self_abs_xPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1279(%10761 : !llvm.ptr, %10762 : !llvm.struct<(!llvm.ptr, i64)>, %10763 : !llvm.struct<(!llvm.ptr, i64)>):
    %10764 = "mini.wrap"(%10762) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %10765 = "mini.narrow"(%10764) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %10766 = "mini.wrap"(%10763) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %10767 = "mini.narrow"(%10766) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %10768 = "mini.unwrap"(%10765) : (!mini.ptr<i32>) -> i32
    %10769 = "mini.unwrap"(%10767) : (!mini.ptr<i32>) -> i32
    %10770 = "mini.comparison"(%10768, %10769) {"op" = "GT"} : (i32, i32) -> i1
    %10771 = "mini.wrap"(%10770) : (i1) -> !mini.ptr<i32>
    %10772 = "mini.unwrap"(%10771) : (!mini.ptr<i32>) -> i1
    "mini.if"(%10772) ({
      %10773 = "mini.unionize"(%10765) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
      "mini.return"(%10773) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
    }) : (i1) -> ()
    %10774 = "mini.unionize"(%10767) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    "mini.return"(%10774) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
  }) {"func_name" = "Math__Self_max_aPtri32_bPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1280(%10775 : !llvm.ptr, %10776 : !llvm.struct<(!llvm.ptr, i64)>, %10777 : !llvm.struct<(!llvm.ptr, i64)>):
    %10778 = "mini.wrap"(%10776) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %10779 = "mini.narrow"(%10778) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<f64>
    %10780 = "mini.wrap"(%10777) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %10781 = "mini.narrow"(%10780) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<f64>
    %10782 = "mini.unwrap"(%10779) : (!mini.ptr<f64>) -> f64
    %10783 = "mini.unwrap"(%10781) : (!mini.ptr<f64>) -> f64
    %10784 = "mini.comparison"(%10782, %10783) {"op" = "GT"} : (f64, f64) -> i1
    %10785 = "mini.wrap"(%10784) : (i1) -> !mini.ptr<f64>
    %10786 = "mini.unwrap"(%10785) : (!mini.ptr<f64>) -> i1
    "mini.if"(%10786) ({
      %10787 = "mini.unionize"(%10779) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
      "mini.return"(%10787) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
    }) : (i1) -> ()
    %10788 = "mini.unionize"(%10781) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    "mini.return"(%10788) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
  }) {"func_name" = "Math__Self_max_aPtrf64_bPtrf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1281(%10789 : !llvm.ptr):
    %10790 = "mini.invariant"(%10789) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10791 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1282] : () -> ()
  ^bb1283:
    %10792 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%10792, %10791) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1284] : () -> ()
  ^bb1285:
    %10793 = "llvm.getelementptr"(%10789) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10794 = "llvm.load"(%10793) : (!llvm.ptr) -> !llvm.ptr
    %10795 = "llvm.getelementptr"(%10794) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10796 = "llvm.getelementptr"(%10794) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10797 = "llvm.getelementptr"(%10794) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10798 = "llvm.getelementptr"(%10794) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10799 = "llvm.load"(%10795) : (!llvm.ptr) -> i64
    %10800 = "llvm.load"(%10796) : (!llvm.ptr) -> i64
    %10801 = "llvm.load"(%10797) : (!llvm.ptr) -> !llvm.ptr
    %10802 = "llvm.load"(%10798) : (!llvm.ptr) -> !llvm.ptr
    %10803 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %10804 = "llvm.ptrtoint"(%10803) : (!llvm.ptr) -> i64
    %10805 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %10806 = "mini.subtype"(%10801, %10800, %10799, %10805, %10804, %10802) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10806) [^bb1283, ^bb1283] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1286:
    %10807 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%10807, %10791) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1284] : () -> ()
  ^bb1287:
    %10808 = "llvm.getelementptr"(%10789) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10809 = "llvm.load"(%10808) : (!llvm.ptr) -> !llvm.ptr
    %10810 = "llvm.getelementptr"(%10809) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10811 = "llvm.getelementptr"(%10809) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10812 = "llvm.getelementptr"(%10809) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10813 = "llvm.getelementptr"(%10809) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10814 = "llvm.load"(%10810) : (!llvm.ptr) -> i64
    %10815 = "llvm.load"(%10811) : (!llvm.ptr) -> i64
    %10816 = "llvm.load"(%10812) : (!llvm.ptr) -> !llvm.ptr
    %10817 = "llvm.load"(%10813) : (!llvm.ptr) -> !llvm.ptr
    %10818 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %10819 = "llvm.ptrtoint"(%10818) : (!llvm.ptr) -> i64
    %10820 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %10821 = "mini.subtype"(%10816, %10815, %10814, %10820, %10819, %10817) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10821) [^bb1286, ^bb1286] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1282:
    %10822 = "llvm.getelementptr"(%10789) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10823 = "llvm.load"(%10822) : (!llvm.ptr) -> !llvm.ptr
    %10824 = "llvm.getelementptr"(%10823) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10825 = "llvm.getelementptr"(%10823) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10826 = "llvm.getelementptr"(%10823) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10827 = "llvm.getelementptr"(%10823) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10828 = "llvm.load"(%10824) : (!llvm.ptr) -> i64
    %10829 = "llvm.load"(%10825) : (!llvm.ptr) -> i64
    %10830 = "llvm.load"(%10826) : (!llvm.ptr) -> !llvm.ptr
    %10831 = "llvm.load"(%10827) : (!llvm.ptr) -> !llvm.ptr
    %10832 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %10833 = "llvm.ptrtoint"(%10832) : (!llvm.ptr) -> i64
    %10834 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %10835 = "mini.subtype"(%10830, %10829, %10828, %10834, %10833, %10831) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10835) [^bb1285, ^bb1288] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1288:
    %10836 = "llvm.getelementptr"(%10789) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10837 = "llvm.load"(%10836) : (!llvm.ptr) -> !llvm.ptr
    %10838 = "llvm.getelementptr"(%10837) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10839 = "llvm.getelementptr"(%10837) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10840 = "llvm.getelementptr"(%10837) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10841 = "llvm.getelementptr"(%10837) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10842 = "llvm.load"(%10838) : (!llvm.ptr) -> i64
    %10843 = "llvm.load"(%10839) : (!llvm.ptr) -> i64
    %10844 = "llvm.load"(%10840) : (!llvm.ptr) -> !llvm.ptr
    %10845 = "llvm.load"(%10841) : (!llvm.ptr) -> !llvm.ptr
    %10846 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %10847 = "llvm.ptrtoint"(%10846) : (!llvm.ptr) -> i64
    %10848 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %10849 = "mini.subtype"(%10844, %10843, %10842, %10848, %10847, %10845) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10849) [^bb1287, ^bb1287] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1284:
    %10850 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %10851 = "llvm.load"(%10791) : (!llvm.ptr) -> i32
    %10852 = "llvm.getelementptr"(%10850, %10851) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10853 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10854 = "llvm.getelementptr"(%10852, %10853) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10854) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_max_aPtri32_bPtri32__Self_max_aPtrf64_bPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1289(%10855 : !llvm.ptr, %10856 : !llvm.struct<(!llvm.ptr, i64)>, %10857 : !llvm.struct<(!llvm.ptr, i64)>):
    %10858 = "mini.wrap"(%10856) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %10859 = "mini.narrow"(%10858) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %10860 = "mini.wrap"(%10857) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %10861 = "mini.narrow"(%10860) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %10862 = "mini.unwrap"(%10859) : (!mini.ptr<i32>) -> i32
    %10863 = "mini.unwrap"(%10861) : (!mini.ptr<i32>) -> i32
    %10864 = "mini.comparison"(%10862, %10863) {"op" = "LT"} : (i32, i32) -> i1
    %10865 = "mini.wrap"(%10864) : (i1) -> !mini.ptr<i32>
    %10866 = "mini.unwrap"(%10865) : (!mini.ptr<i32>) -> i1
    "mini.if"(%10866) ({
      %10867 = "mini.unionize"(%10859) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
      "mini.return"(%10867) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
    }) : (i1) -> ()
    %10868 = "mini.unionize"(%10861) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    "mini.return"(%10868) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
  }) {"func_name" = "Math__Self_min_aPtri32_bPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1290(%10869 : !llvm.ptr, %10870 : !llvm.struct<(!llvm.ptr, i64)>, %10871 : !llvm.struct<(!llvm.ptr, i64)>):
    %10872 = "mini.wrap"(%10870) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %10873 = "mini.narrow"(%10872) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<f64>
    %10874 = "mini.wrap"(%10871) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %10875 = "mini.narrow"(%10874) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<f64>
    %10876 = "mini.unwrap"(%10873) : (!mini.ptr<f64>) -> f64
    %10877 = "mini.unwrap"(%10875) : (!mini.ptr<f64>) -> f64
    %10878 = "mini.comparison"(%10876, %10877) {"op" = "LT"} : (f64, f64) -> i1
    %10879 = "mini.wrap"(%10878) : (i1) -> !mini.ptr<f64>
    %10880 = "mini.unwrap"(%10879) : (!mini.ptr<f64>) -> i1
    "mini.if"(%10880) ({
      %10881 = "mini.unionize"(%10873) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
      "mini.return"(%10881) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
    }) : (i1) -> ()
    %10882 = "mini.unionize"(%10875) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    "mini.return"(%10882) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
  }) {"func_name" = "Math__Self_min_aPtrf64_bPtrf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1291(%10883 : !llvm.ptr):
    %10884 = "mini.invariant"(%10883) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10885 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1292] : () -> ()
  ^bb1293:
    %10886 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%10886, %10885) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1294] : () -> ()
  ^bb1295:
    %10887 = "llvm.getelementptr"(%10883) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10888 = "llvm.load"(%10887) : (!llvm.ptr) -> !llvm.ptr
    %10889 = "llvm.getelementptr"(%10888) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10890 = "llvm.getelementptr"(%10888) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10891 = "llvm.getelementptr"(%10888) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10892 = "llvm.getelementptr"(%10888) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10893 = "llvm.load"(%10889) : (!llvm.ptr) -> i64
    %10894 = "llvm.load"(%10890) : (!llvm.ptr) -> i64
    %10895 = "llvm.load"(%10891) : (!llvm.ptr) -> !llvm.ptr
    %10896 = "llvm.load"(%10892) : (!llvm.ptr) -> !llvm.ptr
    %10897 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %10898 = "llvm.ptrtoint"(%10897) : (!llvm.ptr) -> i64
    %10899 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %10900 = "mini.subtype"(%10895, %10894, %10893, %10899, %10898, %10896) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10900) [^bb1293, ^bb1293] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1296:
    %10901 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%10901, %10885) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1294] : () -> ()
  ^bb1297:
    %10902 = "llvm.getelementptr"(%10883) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10903 = "llvm.load"(%10902) : (!llvm.ptr) -> !llvm.ptr
    %10904 = "llvm.getelementptr"(%10903) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10905 = "llvm.getelementptr"(%10903) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10906 = "llvm.getelementptr"(%10903) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10907 = "llvm.getelementptr"(%10903) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10908 = "llvm.load"(%10904) : (!llvm.ptr) -> i64
    %10909 = "llvm.load"(%10905) : (!llvm.ptr) -> i64
    %10910 = "llvm.load"(%10906) : (!llvm.ptr) -> !llvm.ptr
    %10911 = "llvm.load"(%10907) : (!llvm.ptr) -> !llvm.ptr
    %10912 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %10913 = "llvm.ptrtoint"(%10912) : (!llvm.ptr) -> i64
    %10914 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %10915 = "mini.subtype"(%10910, %10909, %10908, %10914, %10913, %10911) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10915) [^bb1296, ^bb1296] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1292:
    %10916 = "llvm.getelementptr"(%10883) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10917 = "llvm.load"(%10916) : (!llvm.ptr) -> !llvm.ptr
    %10918 = "llvm.getelementptr"(%10917) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10919 = "llvm.getelementptr"(%10917) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10920 = "llvm.getelementptr"(%10917) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10921 = "llvm.getelementptr"(%10917) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10922 = "llvm.load"(%10918) : (!llvm.ptr) -> i64
    %10923 = "llvm.load"(%10919) : (!llvm.ptr) -> i64
    %10924 = "llvm.load"(%10920) : (!llvm.ptr) -> !llvm.ptr
    %10925 = "llvm.load"(%10921) : (!llvm.ptr) -> !llvm.ptr
    %10926 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %10927 = "llvm.ptrtoint"(%10926) : (!llvm.ptr) -> i64
    %10928 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %10929 = "mini.subtype"(%10924, %10923, %10922, %10928, %10927, %10925) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10929) [^bb1295, ^bb1298] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1298:
    %10930 = "llvm.getelementptr"(%10883) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10931 = "llvm.load"(%10930) : (!llvm.ptr) -> !llvm.ptr
    %10932 = "llvm.getelementptr"(%10931) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10933 = "llvm.getelementptr"(%10931) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10934 = "llvm.getelementptr"(%10931) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10935 = "llvm.getelementptr"(%10931) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10936 = "llvm.load"(%10932) : (!llvm.ptr) -> i64
    %10937 = "llvm.load"(%10933) : (!llvm.ptr) -> i64
    %10938 = "llvm.load"(%10934) : (!llvm.ptr) -> !llvm.ptr
    %10939 = "llvm.load"(%10935) : (!llvm.ptr) -> !llvm.ptr
    %10940 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %10941 = "llvm.ptrtoint"(%10940) : (!llvm.ptr) -> i64
    %10942 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %10943 = "mini.subtype"(%10938, %10937, %10936, %10942, %10941, %10939) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10943) [^bb1297, ^bb1297] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1294:
    %10944 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %10945 = "llvm.load"(%10885) : (!llvm.ptr) -> i32
    %10946 = "llvm.getelementptr"(%10944, %10945) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10947 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10948 = "llvm.getelementptr"(%10946, %10947) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10948) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_min_aPtri32_bPtri32__Self_min_aPtrf64_bPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1299(%10949 : !llvm.ptr, %10950 : f64):
    %10951 = "mini.wrap"(%10950) : (f64) -> !mini.ptr<f64>
    %10952 = builtin.unrealized_conversion_cast %10951 : !mini.ptr<f64> to !mini.ptr<f64>
    %10953 = "mini.unwrap"(%10952) : (!mini.ptr<f64>) -> f64
    %10954 = "mini.intrinsic"(%10953) {"call_name" = "llvm.round.f64", "num_args" = 1 : i32} : (f64) -> f64
    %10955 = "mini.wrap"(%10954) : (f64) -> !mini.ptr<f64>
    %10956 = builtin.unrealized_conversion_cast %10955 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.return"(%10956) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_round_xPtrf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1300(%10957 : !llvm.ptr):
    %10958 = "mini.invariant"(%10957) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10959 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1301] : () -> ()
  ^bb1302:
    %10960 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%10960, %10959) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1303] : () -> ()
  ^bb1301:
    %10961 = "llvm.getelementptr"(%10957) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10962 = "llvm.load"(%10961) : (!llvm.ptr) -> !llvm.ptr
    %10963 = "llvm.getelementptr"(%10962) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10964 = "llvm.getelementptr"(%10962) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10965 = "llvm.getelementptr"(%10962) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10966 = "llvm.getelementptr"(%10962) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10967 = "llvm.load"(%10963) : (!llvm.ptr) -> i64
    %10968 = "llvm.load"(%10964) : (!llvm.ptr) -> i64
    %10969 = "llvm.load"(%10965) : (!llvm.ptr) -> !llvm.ptr
    %10970 = "llvm.load"(%10966) : (!llvm.ptr) -> !llvm.ptr
    %10971 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %10972 = "llvm.ptrtoint"(%10971) : (!llvm.ptr) -> i64
    %10973 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %10974 = "mini.subtype"(%10969, %10968, %10967, %10973, %10972, %10970) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10974) [^bb1302, ^bb1302] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1303:
    %10975 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %10976 = "llvm.load"(%10959) : (!llvm.ptr) -> i32
    %10977 = "llvm.getelementptr"(%10975, %10976) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10978 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %10979 = "llvm.getelementptr"(%10977, %10978) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10979) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_round_xPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1304(%10980 : !llvm.ptr, %10981 : f64):
    %10982 = "mini.wrap"(%10981) : (f64) -> !mini.ptr<f64>
    %10983 = builtin.unrealized_conversion_cast %10982 : !mini.ptr<f64> to !mini.ptr<f64>
    %10984 = "mini.unwrap"(%10983) : (!mini.ptr<f64>) -> f64
    %10985 = "mini.intrinsic"(%10984) {"call_name" = "llvm.floor.f64", "num_args" = 1 : i32} : (f64) -> f64
    %10986 = "mini.wrap"(%10985) : (f64) -> !mini.ptr<f64>
    %10987 = builtin.unrealized_conversion_cast %10986 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.return"(%10987) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_floor_xPtrf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1305(%10988 : !llvm.ptr):
    %10989 = "mini.invariant"(%10988) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10990 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1306] : () -> ()
  ^bb1307:
    %10991 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%10991, %10990) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1308] : () -> ()
  ^bb1306:
    %10992 = "llvm.getelementptr"(%10988) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %10993 = "llvm.load"(%10992) : (!llvm.ptr) -> !llvm.ptr
    %10994 = "llvm.getelementptr"(%10993) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10995 = "llvm.getelementptr"(%10993) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10996 = "llvm.getelementptr"(%10993) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10997 = "llvm.getelementptr"(%10993) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10998 = "llvm.load"(%10994) : (!llvm.ptr) -> i64
    %10999 = "llvm.load"(%10995) : (!llvm.ptr) -> i64
    %11000 = "llvm.load"(%10996) : (!llvm.ptr) -> !llvm.ptr
    %11001 = "llvm.load"(%10997) : (!llvm.ptr) -> !llvm.ptr
    %11002 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %11003 = "llvm.ptrtoint"(%11002) : (!llvm.ptr) -> i64
    %11004 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %11005 = "mini.subtype"(%11000, %10999, %10998, %11004, %11003, %11001) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11005) [^bb1307, ^bb1307] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1308:
    %11006 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %11007 = "llvm.load"(%10990) : (!llvm.ptr) -> i32
    %11008 = "llvm.getelementptr"(%11006, %11007) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11009 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11010 = "llvm.getelementptr"(%11008, %11009) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11010) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_floor_xPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1309(%11011 : !llvm.ptr, %11012 : f64):
    %11013 = "mini.wrap"(%11012) : (f64) -> !mini.ptr<f64>
    %11014 = builtin.unrealized_conversion_cast %11013 : !mini.ptr<f64> to !mini.ptr<f64>
    %11015 = "mini.unwrap"(%11014) : (!mini.ptr<f64>) -> f64
    %11016 = "mini.intrinsic"(%11015) {"call_name" = "llvm.ceil.f64", "num_args" = 1 : i32} : (f64) -> f64
    %11017 = "mini.wrap"(%11016) : (f64) -> !mini.ptr<f64>
    %11018 = builtin.unrealized_conversion_cast %11017 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.return"(%11018) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_ceiling_xPtrf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1310(%11019 : !llvm.ptr):
    %11020 = "mini.invariant"(%11019) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11021 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1311] : () -> ()
  ^bb1312:
    %11022 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%11022, %11021) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1313] : () -> ()
  ^bb1311:
    %11023 = "llvm.getelementptr"(%11019) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11024 = "llvm.load"(%11023) : (!llvm.ptr) -> !llvm.ptr
    %11025 = "llvm.getelementptr"(%11024) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11026 = "llvm.getelementptr"(%11024) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11027 = "llvm.getelementptr"(%11024) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11028 = "llvm.getelementptr"(%11024) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11029 = "llvm.load"(%11025) : (!llvm.ptr) -> i64
    %11030 = "llvm.load"(%11026) : (!llvm.ptr) -> i64
    %11031 = "llvm.load"(%11027) : (!llvm.ptr) -> !llvm.ptr
    %11032 = "llvm.load"(%11028) : (!llvm.ptr) -> !llvm.ptr
    %11033 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %11034 = "llvm.ptrtoint"(%11033) : (!llvm.ptr) -> i64
    %11035 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %11036 = "mini.subtype"(%11031, %11030, %11029, %11035, %11034, %11032) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11036) [^bb1312, ^bb1312] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1313:
    %11037 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %11038 = "llvm.load"(%11021) : (!llvm.ptr) -> i32
    %11039 = "llvm.getelementptr"(%11037, %11038) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11040 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11041 = "llvm.getelementptr"(%11039, %11040) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11041) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_ceiling_xPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "llvm.func"() <{"sym_name" = "clock", "function_type" = !llvm.func<i64 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "getchar", "function_type" = !llvm.func<i32 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fopen", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr)> (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fclose", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fgetc", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fprintf", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "system", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "mini.func"() ({
  ^bb1314(%11042 : !llvm.struct<(!llvm.ptr, i64)>):
    %11043 = "mini.wrap"(%11042) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %11044 = builtin.unrealized_conversion_cast %11043 : !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]> to !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %11045 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11046 = "mini.create_buffer"(%11045) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %11047 = builtin.unrealized_conversion_cast %11046 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %11048 = "mini.refer"(%11047) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %11049 = "mini.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "number"} : () -> !llvm.ptr
    %11050 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%11048, %11050, %11049) {"typ" = !llvm.array<6 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %11051 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11052 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11053 = "mini.unwrap"(%11048) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %11054 = "mini.unwrap"(%11051) : (!mini.ptr<i32>) -> i32
    %11055 = "mini.unwrap"(%11052) : (!mini.ptr<i32>) -> i32
    %11056 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %11057 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11058 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11059 = builtin.unrealized_conversion_cast %11048 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %11060 = "mini.unwrap"(%11059) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %11061 = builtin.unrealized_conversion_cast %11057 : !mini.ptr<i32> to !mini.ptr<i32>
    %11062 = "mini.unwrap"(%11061) : (!mini.ptr<i32>) -> i32
    %11063 = builtin.unrealized_conversion_cast %11058 : !mini.ptr<i32> to !mini.ptr<i32>
    %11064 = "mini.unwrap"(%11063) : (!mini.ptr<i32>) -> i32
    %11065 = "mini.unwrap"(%11056) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11066 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %11067 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11068 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11069 = "mini.parameterizations_array"(%11066, %11067, %11068) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11069, %11065, %11060, %11062, %11064) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %11070 = "mini.print"(%11056) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"String">) -> i32
  }) {"func_name" = "number_taker", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
    %11071 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11072 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11073 = "mini.unwrap"(%11071) : (!mini.ptr<i32>) -> i32
    %11074 = "mini.unwrap"(%11072) : (!mini.ptr<i32>) -> i32
    %11075 = "mini.comparison"(%11073, %11074) {"op" = "GT"} : (i32, i32) -> i1
    %11076 = "mini.wrap"(%11075) : (i1) -> !mini.ptr<i32>
    %11077 = "mini.unwrap"(%11076) : (!mini.ptr<i32>) -> i1
    "mini.if"(%11077) ({
      %11078 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %11079 = builtin.unrealized_conversion_cast %11078 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%11079) : (!mini.ptr<i32>) -> ()
    }, {
      %11080 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %11081 = builtin.unrealized_conversion_cast %11080 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%11081) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "early_return_in_else", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Integer", "types" = [i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Integer_getter_value", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Integer_setter_value", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Integer_field_value", "getter_name" = "Integer_getter_value", "setter_name" = "Integer_setter_value"} : () -> ()
  "mini.func"() ({
  ^bb1315(%11082 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11083 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11084 : !llvm.ptr, %11085 : i32):
    %11086 = "mini.wrap"(%11082) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %11087 = "mini.to_fat_ptr"(%11086) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %11088 = "mini.wrap"(%11085) : (i32) -> !mini.ptr<i32>
    %11089 = builtin.unrealized_conversion_cast %11088 : !mini.ptr<i32> to !mini.ptr<i32>
    %11090 = builtin.unrealized_conversion_cast %11089 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%11087, %11090) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Integer_init_valuePtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1316(%11091 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11092 : !llvm.ptr):
    %11093 = "mini.invariant"(%11092) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11094 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1317] : () -> ()
  ^bb1318:
    %11095 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%11095, %11094) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1319] : () -> ()
  ^bb1317:
    %11096 = "llvm.getelementptr"(%11092) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11097 = "llvm.load"(%11096) : (!llvm.ptr) -> !llvm.ptr
    %11098 = "llvm.getelementptr"(%11097) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11099 = "llvm.getelementptr"(%11097) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11100 = "llvm.getelementptr"(%11097) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11101 = "llvm.getelementptr"(%11097) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11102 = "llvm.load"(%11098) : (!llvm.ptr) -> i64
    %11103 = "llvm.load"(%11099) : (!llvm.ptr) -> i64
    %11104 = "llvm.load"(%11100) : (!llvm.ptr) -> !llvm.ptr
    %11105 = "llvm.load"(%11101) : (!llvm.ptr) -> !llvm.ptr
    %11106 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11107 = "llvm.ptrtoint"(%11106) : (!llvm.ptr) -> i64
    %11108 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11109 = "mini.subtype"(%11104, %11103, %11102, %11108, %11107, %11105) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11109) [^bb1318, ^bb1318] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1319:
    %11110 = "llvm.extractvalue"(%11091) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11111 = "llvm.load"(%11094) : (!llvm.ptr) -> i32
    %11112 = "llvm.getelementptr"(%11110, %11111) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11113 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11114 = "llvm.getelementptr"(%11112, %11113) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11114) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B_init_valuePtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1320(%11115 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11116 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11117 : !llvm.ptr, %11118 : i32):
    %11119 = "mini.wrap"(%11115) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %11120 = "mini.to_fat_ptr"(%11119) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %11121 = "mini.wrap"(%11118) : (i32) -> !mini.ptr<i32>
    %11122 = builtin.unrealized_conversion_cast %11121 : !mini.ptr<i32> to !mini.ptr<i32>
    %11123 = "mini.get_field"(%11120) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11124 = "mini.unwrap"(%11123) : (!mini.ptr<i32>) -> i32
    %11125 = "mini.unwrap"(%11122) : (!mini.ptr<i32>) -> i32
    %11126 = "mini.arithmetic"(%11124, %11125) {"op" = "ADD"} : (i32, i32) -> i32
    %11127 = "mini.wrap"(%11126) : (i32) -> !mini.ptr<i32>
    %11128 = "mini.unwrap"(%11127) : (!mini.ptr<i32>) -> i32
    %11129 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %11130 = "mini.get_field"(%11120) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11131 = "mini.unwrap"(%11130) : (!mini.ptr<i32>) -> i32
    %11132 = "mini.unwrap"(%11122) : (!mini.ptr<i32>) -> i32
    %11133 = "mini.arithmetic"(%11131, %11132) {"op" = "ADD"} : (i32, i32) -> i32
    %11134 = "mini.wrap"(%11133) : (i32) -> !mini.ptr<i32>
    %11135 = builtin.unrealized_conversion_cast %11134 : !mini.ptr<i32> to !mini.ptr<i32>
    %11136 = "mini.unwrap"(%11135) : (!mini.ptr<i32>) -> i32
    %11137 = "mini.unwrap"(%11129) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11138 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11139 = "mini.parameterizations_array"(%11138) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11139, %11137, %11136) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %11140 = "mini.to_fat_ptr"(%11129) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%11140) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__ADD_otherPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1321(%11141 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11142 : !llvm.ptr):
    %11143 = "mini.invariant"(%11142) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11144 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1322] : () -> ()
  ^bb1323:
    %11145 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%11145, %11144) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1324] : () -> ()
  ^bb1322:
    %11146 = "llvm.getelementptr"(%11142) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11147 = "llvm.load"(%11146) : (!llvm.ptr) -> !llvm.ptr
    %11148 = "llvm.getelementptr"(%11147) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11149 = "llvm.getelementptr"(%11147) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11150 = "llvm.getelementptr"(%11147) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11151 = "llvm.getelementptr"(%11147) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11152 = "llvm.load"(%11148) : (!llvm.ptr) -> i64
    %11153 = "llvm.load"(%11149) : (!llvm.ptr) -> i64
    %11154 = "llvm.load"(%11150) : (!llvm.ptr) -> !llvm.ptr
    %11155 = "llvm.load"(%11151) : (!llvm.ptr) -> !llvm.ptr
    %11156 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11157 = "llvm.ptrtoint"(%11156) : (!llvm.ptr) -> i64
    %11158 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11159 = "mini.subtype"(%11154, %11153, %11152, %11158, %11157, %11155) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11159) [^bb1323, ^bb1323] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1324:
    %11160 = "llvm.extractvalue"(%11141) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11161 = "llvm.load"(%11144) : (!llvm.ptr) -> i32
    %11162 = "llvm.getelementptr"(%11160, %11161) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11163 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11164 = "llvm.getelementptr"(%11162, %11163) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11164) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__ADD_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1325(%11165 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11166 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11167 : !llvm.ptr, %11168 : i32):
    %11169 = "mini.wrap"(%11165) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %11170 = "mini.to_fat_ptr"(%11169) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %11171 = "mini.wrap"(%11168) : (i32) -> !mini.ptr<i32>
    %11172 = builtin.unrealized_conversion_cast %11171 : !mini.ptr<i32> to !mini.ptr<i32>
    %11173 = "mini.get_field"(%11170) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11174 = "mini.unwrap"(%11173) : (!mini.ptr<i32>) -> i32
    %11175 = "mini.unwrap"(%11172) : (!mini.ptr<i32>) -> i32
    %11176 = "mini.arithmetic"(%11174, %11175) {"op" = "SUB"} : (i32, i32) -> i32
    %11177 = "mini.wrap"(%11176) : (i32) -> !mini.ptr<i32>
    %11178 = "mini.unwrap"(%11177) : (!mini.ptr<i32>) -> i32
    %11179 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %11180 = "mini.get_field"(%11170) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11181 = "mini.unwrap"(%11180) : (!mini.ptr<i32>) -> i32
    %11182 = "mini.unwrap"(%11172) : (!mini.ptr<i32>) -> i32
    %11183 = "mini.arithmetic"(%11181, %11182) {"op" = "SUB"} : (i32, i32) -> i32
    %11184 = "mini.wrap"(%11183) : (i32) -> !mini.ptr<i32>
    %11185 = builtin.unrealized_conversion_cast %11184 : !mini.ptr<i32> to !mini.ptr<i32>
    %11186 = "mini.unwrap"(%11185) : (!mini.ptr<i32>) -> i32
    %11187 = "mini.unwrap"(%11179) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11188 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11189 = "mini.parameterizations_array"(%11188) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11189, %11187, %11186) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %11190 = "mini.to_fat_ptr"(%11179) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%11190) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__SUB_otherPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1326(%11191 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11192 : !llvm.ptr):
    %11193 = "mini.invariant"(%11192) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11194 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1327] : () -> ()
  ^bb1328:
    %11195 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%11195, %11194) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1329] : () -> ()
  ^bb1327:
    %11196 = "llvm.getelementptr"(%11192) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11197 = "llvm.load"(%11196) : (!llvm.ptr) -> !llvm.ptr
    %11198 = "llvm.getelementptr"(%11197) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11199 = "llvm.getelementptr"(%11197) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11200 = "llvm.getelementptr"(%11197) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11201 = "llvm.getelementptr"(%11197) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11202 = "llvm.load"(%11198) : (!llvm.ptr) -> i64
    %11203 = "llvm.load"(%11199) : (!llvm.ptr) -> i64
    %11204 = "llvm.load"(%11200) : (!llvm.ptr) -> !llvm.ptr
    %11205 = "llvm.load"(%11201) : (!llvm.ptr) -> !llvm.ptr
    %11206 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11207 = "llvm.ptrtoint"(%11206) : (!llvm.ptr) -> i64
    %11208 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11209 = "mini.subtype"(%11204, %11203, %11202, %11208, %11207, %11205) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11209) [^bb1328, ^bb1328] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1329:
    %11210 = "llvm.extractvalue"(%11191) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11211 = "llvm.load"(%11194) : (!llvm.ptr) -> i32
    %11212 = "llvm.getelementptr"(%11210, %11211) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11213 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11214 = "llvm.getelementptr"(%11212, %11213) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11214) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__SUB_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1330(%11215 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11216 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11217 : !llvm.ptr, %11218 : i32):
    %11219 = "mini.wrap"(%11215) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %11220 = "mini.to_fat_ptr"(%11219) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %11221 = "mini.wrap"(%11218) : (i32) -> !mini.ptr<i32>
    %11222 = builtin.unrealized_conversion_cast %11221 : !mini.ptr<i32> to !mini.ptr<i32>
    %11223 = "mini.get_field"(%11220) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11224 = "mini.unwrap"(%11223) : (!mini.ptr<i32>) -> i32
    %11225 = "mini.unwrap"(%11222) : (!mini.ptr<i32>) -> i32
    %11226 = "mini.arithmetic"(%11224, %11225) {"op" = "MUL"} : (i32, i32) -> i32
    %11227 = "mini.wrap"(%11226) : (i32) -> !mini.ptr<i32>
    %11228 = "mini.unwrap"(%11227) : (!mini.ptr<i32>) -> i32
    %11229 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %11230 = "mini.get_field"(%11220) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11231 = "mini.unwrap"(%11230) : (!mini.ptr<i32>) -> i32
    %11232 = "mini.unwrap"(%11222) : (!mini.ptr<i32>) -> i32
    %11233 = "mini.arithmetic"(%11231, %11232) {"op" = "MUL"} : (i32, i32) -> i32
    %11234 = "mini.wrap"(%11233) : (i32) -> !mini.ptr<i32>
    %11235 = builtin.unrealized_conversion_cast %11234 : !mini.ptr<i32> to !mini.ptr<i32>
    %11236 = "mini.unwrap"(%11235) : (!mini.ptr<i32>) -> i32
    %11237 = "mini.unwrap"(%11229) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11238 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11239 = "mini.parameterizations_array"(%11238) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11239, %11237, %11236) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %11240 = "mini.to_fat_ptr"(%11229) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%11240) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__MUL_otherPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1331(%11241 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11242 : !llvm.ptr):
    %11243 = "mini.invariant"(%11242) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11244 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1332] : () -> ()
  ^bb1333:
    %11245 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%11245, %11244) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1334] : () -> ()
  ^bb1332:
    %11246 = "llvm.getelementptr"(%11242) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11247 = "llvm.load"(%11246) : (!llvm.ptr) -> !llvm.ptr
    %11248 = "llvm.getelementptr"(%11247) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11249 = "llvm.getelementptr"(%11247) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11250 = "llvm.getelementptr"(%11247) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11251 = "llvm.getelementptr"(%11247) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11252 = "llvm.load"(%11248) : (!llvm.ptr) -> i64
    %11253 = "llvm.load"(%11249) : (!llvm.ptr) -> i64
    %11254 = "llvm.load"(%11250) : (!llvm.ptr) -> !llvm.ptr
    %11255 = "llvm.load"(%11251) : (!llvm.ptr) -> !llvm.ptr
    %11256 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11257 = "llvm.ptrtoint"(%11256) : (!llvm.ptr) -> i64
    %11258 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11259 = "mini.subtype"(%11254, %11253, %11252, %11258, %11257, %11255) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11259) [^bb1333, ^bb1333] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1334:
    %11260 = "llvm.extractvalue"(%11241) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11261 = "llvm.load"(%11244) : (!llvm.ptr) -> i32
    %11262 = "llvm.getelementptr"(%11260, %11261) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11263 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11264 = "llvm.getelementptr"(%11262, %11263) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11264) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__MUL_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1335(%11265 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11266 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11267 : !llvm.ptr, %11268 : i32):
    %11269 = "mini.wrap"(%11265) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %11270 = "mini.to_fat_ptr"(%11269) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %11271 = "mini.wrap"(%11268) : (i32) -> !mini.ptr<i32>
    %11272 = builtin.unrealized_conversion_cast %11271 : !mini.ptr<i32> to !mini.ptr<i32>
    %11273 = "mini.get_field"(%11270) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11274 = "mini.unwrap"(%11273) : (!mini.ptr<i32>) -> i32
    %11275 = "mini.unwrap"(%11272) : (!mini.ptr<i32>) -> i32
    %11276 = "mini.arithmetic"(%11274, %11275) {"op" = "DIV"} : (i32, i32) -> i32
    %11277 = "mini.wrap"(%11276) : (i32) -> !mini.ptr<i32>
    %11278 = "mini.unwrap"(%11277) : (!mini.ptr<i32>) -> i32
    %11279 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %11280 = "mini.get_field"(%11270) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11281 = "mini.unwrap"(%11280) : (!mini.ptr<i32>) -> i32
    %11282 = "mini.unwrap"(%11272) : (!mini.ptr<i32>) -> i32
    %11283 = "mini.arithmetic"(%11281, %11282) {"op" = "DIV"} : (i32, i32) -> i32
    %11284 = "mini.wrap"(%11283) : (i32) -> !mini.ptr<i32>
    %11285 = builtin.unrealized_conversion_cast %11284 : !mini.ptr<i32> to !mini.ptr<i32>
    %11286 = "mini.unwrap"(%11285) : (!mini.ptr<i32>) -> i32
    %11287 = "mini.unwrap"(%11279) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11288 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11289 = "mini.parameterizations_array"(%11288) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11289, %11287, %11286) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %11290 = "mini.to_fat_ptr"(%11279) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%11290) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__DIV_otherPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1336(%11291 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11292 : !llvm.ptr):
    %11293 = "mini.invariant"(%11292) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11294 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1337] : () -> ()
  ^bb1338:
    %11295 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%11295, %11294) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1339] : () -> ()
  ^bb1337:
    %11296 = "llvm.getelementptr"(%11292) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11297 = "llvm.load"(%11296) : (!llvm.ptr) -> !llvm.ptr
    %11298 = "llvm.getelementptr"(%11297) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11299 = "llvm.getelementptr"(%11297) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11300 = "llvm.getelementptr"(%11297) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11301 = "llvm.getelementptr"(%11297) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11302 = "llvm.load"(%11298) : (!llvm.ptr) -> i64
    %11303 = "llvm.load"(%11299) : (!llvm.ptr) -> i64
    %11304 = "llvm.load"(%11300) : (!llvm.ptr) -> !llvm.ptr
    %11305 = "llvm.load"(%11301) : (!llvm.ptr) -> !llvm.ptr
    %11306 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11307 = "llvm.ptrtoint"(%11306) : (!llvm.ptr) -> i64
    %11308 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11309 = "mini.subtype"(%11304, %11303, %11302, %11308, %11307, %11305) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11309) [^bb1338, ^bb1338] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1339:
    %11310 = "llvm.extractvalue"(%11291) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11311 = "llvm.load"(%11294) : (!llvm.ptr) -> i32
    %11312 = "llvm.getelementptr"(%11310, %11311) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11313 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11314 = "llvm.getelementptr"(%11312, %11313) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11314) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__DIV_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1340(%11315 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11316 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11317 : !llvm.ptr):
    %11318 = "mini.wrap"(%11315) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %11319 = "mini.to_fat_ptr"(%11318) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %11320 = "mini.get_field"(%11319) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11321 = "mini.unionize"(%11320) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %11322 = "mini.unwrap"(%11321) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %11323 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11324 = "mini.parameterizations_array"(%11323) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%11324, %11322) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Integer_print_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1341(%11325 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11326 : !llvm.ptr):
    %11327 = "mini.invariant"(%11326) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11328 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1342] : () -> ()
  ^bb1342:
    %11329 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%11329, %11328) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1343] : () -> ()
  ^bb1343:
    %11330 = "llvm.extractvalue"(%11325) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11331 = "llvm.load"(%11328) : (!llvm.ptr) -> i32
    %11332 = "llvm.getelementptr"(%11330, %11331) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11333 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11334 = "llvm.getelementptr"(%11332, %11333) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11334) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B_print_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_BigBoy", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb1344(%11335 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11336 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11337 : !llvm.ptr):
    %11338 = "mini.wrap"(%11335) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"BigBoy">
    %11339 = "mini.to_fat_ptr"(%11338) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "BigBoy", "to_typ_name" = "BigBoy", "invariant"} : (!mini.fatptr<"BigBoy">) -> !mini.fatptr<"BigBoy">
    %11340 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11341 = "mini.create_buffer"(%11340) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %11342 = builtin.unrealized_conversion_cast %11341 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %11343 = "mini.refer"(%11342) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %11344 = "mini.literal"() {"typ" = !llvm.array<10 x i8>, "value" = "Here I am!"} : () -> !llvm.ptr
    %11345 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%11343, %11345, %11344) {"typ" = !llvm.array<10 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %11346 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11347 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11348 = "mini.unwrap"(%11343) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %11349 = "mini.unwrap"(%11346) : (!mini.ptr<i32>) -> i32
    %11350 = "mini.unwrap"(%11347) : (!mini.ptr<i32>) -> i32
    %11351 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %11352 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11353 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11354 = builtin.unrealized_conversion_cast %11343 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %11355 = "mini.unwrap"(%11354) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %11356 = builtin.unrealized_conversion_cast %11352 : !mini.ptr<i32> to !mini.ptr<i32>
    %11357 = "mini.unwrap"(%11356) : (!mini.ptr<i32>) -> i32
    %11358 = builtin.unrealized_conversion_cast %11353 : !mini.ptr<i32> to !mini.ptr<i32>
    %11359 = "mini.unwrap"(%11358) : (!mini.ptr<i32>) -> i32
    %11360 = "mini.unwrap"(%11351) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11361 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %11362 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11363 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11364 = "mini.parameterizations_array"(%11361, %11362, %11363) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11364, %11360, %11355, %11357, %11359) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %11365 = builtin.unrealized_conversion_cast %11351 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %11366 = "mini.unwrap"(%11365) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %11367 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %11368 = "mini.parameterizations_array"(%11367) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%11368, %11366) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "BigBoy_introduce_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1345(%11369 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11370 : !llvm.ptr):
    %11371 = "mini.invariant"(%11370) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11372 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1346] : () -> ()
  ^bb1346:
    %11373 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%11373, %11372) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1347] : () -> ()
  ^bb1347:
    %11374 = "llvm.extractvalue"(%11369) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11375 = "llvm.load"(%11372) : (!llvm.ptr) -> i32
    %11376 = "llvm.getelementptr"(%11374, %11375) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11377 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11378 = "llvm.getelementptr"(%11376, %11377) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11378) : (!llvm.ptr) -> ()
  }) {"func_name" = "BigBoy_B_introduce_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1348(%11379 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11380 : !llvm.ptr):
    %11381 = "mini.invariant"(%11380) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11382 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1349] : () -> ()
  ^bb1349:
    %11383 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%11383, %11382) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1350] : () -> ()
  ^bb1350:
    %11384 = "llvm.extractvalue"(%11379) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11385 = "llvm.load"(%11382) : (!llvm.ptr) -> i32
    %11386 = "llvm.getelementptr"(%11384, %11385) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11387 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11388 = "llvm.getelementptr"(%11386, %11387) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11388) : (!llvm.ptr) -> ()
  }) {"func_name" = "BigBoy_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Integer2", "types" = [i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Integer2_getter_value", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Integer2_setter_value", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Integer2_field_value", "getter_name" = "Integer2_getter_value", "setter_name" = "Integer2_setter_value"} : () -> ()
  "mini.func"() ({
  ^bb1351(%11389 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11390 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11391 : !llvm.ptr):
    %11392 = "mini.wrap"(%11389) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer2">
    %11393 = "mini.to_fat_ptr"(%11392) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer2", "to_typ_name" = "Integer2", "invariant"} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %11394 = "mini.get_field"(%11393) {"offset" = 0 : i64, "vtable_bytes" = 320 : i32, "original_type" = i32} : (!mini.fatptr<"Integer2">) -> !mini.ptr<i32>
    %11395 = builtin.unrealized_conversion_cast %11394 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%11395) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "Integer2_value_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1352(%11396 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11397 : !llvm.ptr):
    %11398 = "mini.invariant"(%11397) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11399 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1353] : () -> ()
  ^bb1353:
    %11400 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%11400, %11399) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1354] : () -> ()
  ^bb1354:
    %11401 = "llvm.extractvalue"(%11396) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11402 = "llvm.load"(%11399) : (!llvm.ptr) -> i32
    %11403 = "llvm.getelementptr"(%11401, %11402) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11404 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11405 = "llvm.getelementptr"(%11403, %11404) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11405) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_value_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1355(%11406 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11407 : !llvm.ptr):
    %11408 = "mini.invariant"(%11407) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11409 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1356] : () -> ()
  ^bb1357:
    %11410 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%11410, %11409) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1358] : () -> ()
  ^bb1356:
    %11411 = "llvm.getelementptr"(%11407) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11412 = "llvm.load"(%11411) : (!llvm.ptr) -> !llvm.ptr
    %11413 = "llvm.getelementptr"(%11412) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11414 = "llvm.getelementptr"(%11412) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11415 = "llvm.getelementptr"(%11412) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11416 = "llvm.getelementptr"(%11412) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11417 = "llvm.load"(%11413) : (!llvm.ptr) -> i64
    %11418 = "llvm.load"(%11414) : (!llvm.ptr) -> i64
    %11419 = "llvm.load"(%11415) : (!llvm.ptr) -> !llvm.ptr
    %11420 = "llvm.load"(%11416) : (!llvm.ptr) -> !llvm.ptr
    %11421 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11422 = "llvm.ptrtoint"(%11421) : (!llvm.ptr) -> i64
    %11423 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11424 = "mini.subtype"(%11419, %11418, %11417, %11423, %11422, %11420) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11424) [^bb1357, ^bb1357] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1358:
    %11425 = "llvm.extractvalue"(%11406) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11426 = "llvm.load"(%11409) : (!llvm.ptr) -> i32
    %11427 = "llvm.getelementptr"(%11425, %11426) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11428 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11429 = "llvm.getelementptr"(%11427, %11428) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11429) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_init_valuePtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1359(%11430 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11431 : !llvm.ptr):
    %11432 = "mini.invariant"(%11431) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11433 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1360] : () -> ()
  ^bb1361:
    %11434 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%11434, %11433) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1362] : () -> ()
  ^bb1360:
    %11435 = "llvm.getelementptr"(%11431) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11436 = "llvm.load"(%11435) : (!llvm.ptr) -> !llvm.ptr
    %11437 = "llvm.getelementptr"(%11436) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11438 = "llvm.getelementptr"(%11436) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11439 = "llvm.getelementptr"(%11436) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11440 = "llvm.getelementptr"(%11436) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11441 = "llvm.load"(%11437) : (!llvm.ptr) -> i64
    %11442 = "llvm.load"(%11438) : (!llvm.ptr) -> i64
    %11443 = "llvm.load"(%11439) : (!llvm.ptr) -> !llvm.ptr
    %11444 = "llvm.load"(%11440) : (!llvm.ptr) -> !llvm.ptr
    %11445 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11446 = "llvm.ptrtoint"(%11445) : (!llvm.ptr) -> i64
    %11447 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11448 = "mini.subtype"(%11443, %11442, %11441, %11447, %11446, %11444) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11448) [^bb1361, ^bb1361] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1362:
    %11449 = "llvm.extractvalue"(%11430) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11450 = "llvm.load"(%11433) : (!llvm.ptr) -> i32
    %11451 = "llvm.getelementptr"(%11449, %11450) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11452 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11453 = "llvm.getelementptr"(%11451, %11452) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11453) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__ADD_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1363(%11454 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11455 : !llvm.ptr):
    %11456 = "mini.invariant"(%11455) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11457 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1364] : () -> ()
  ^bb1365:
    %11458 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%11458, %11457) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1366] : () -> ()
  ^bb1364:
    %11459 = "llvm.getelementptr"(%11455) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11460 = "llvm.load"(%11459) : (!llvm.ptr) -> !llvm.ptr
    %11461 = "llvm.getelementptr"(%11460) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11462 = "llvm.getelementptr"(%11460) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11463 = "llvm.getelementptr"(%11460) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11464 = "llvm.getelementptr"(%11460) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11465 = "llvm.load"(%11461) : (!llvm.ptr) -> i64
    %11466 = "llvm.load"(%11462) : (!llvm.ptr) -> i64
    %11467 = "llvm.load"(%11463) : (!llvm.ptr) -> !llvm.ptr
    %11468 = "llvm.load"(%11464) : (!llvm.ptr) -> !llvm.ptr
    %11469 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11470 = "llvm.ptrtoint"(%11469) : (!llvm.ptr) -> i64
    %11471 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11472 = "mini.subtype"(%11467, %11466, %11465, %11471, %11470, %11468) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11472) [^bb1365, ^bb1365] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1366:
    %11473 = "llvm.extractvalue"(%11454) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11474 = "llvm.load"(%11457) : (!llvm.ptr) -> i32
    %11475 = "llvm.getelementptr"(%11473, %11474) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11476 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11477 = "llvm.getelementptr"(%11475, %11476) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11477) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__SUB_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1367(%11478 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11479 : !llvm.ptr):
    %11480 = "mini.invariant"(%11479) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11481 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1368] : () -> ()
  ^bb1369:
    %11482 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%11482, %11481) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1370] : () -> ()
  ^bb1368:
    %11483 = "llvm.getelementptr"(%11479) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11484 = "llvm.load"(%11483) : (!llvm.ptr) -> !llvm.ptr
    %11485 = "llvm.getelementptr"(%11484) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11486 = "llvm.getelementptr"(%11484) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11487 = "llvm.getelementptr"(%11484) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11488 = "llvm.getelementptr"(%11484) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11489 = "llvm.load"(%11485) : (!llvm.ptr) -> i64
    %11490 = "llvm.load"(%11486) : (!llvm.ptr) -> i64
    %11491 = "llvm.load"(%11487) : (!llvm.ptr) -> !llvm.ptr
    %11492 = "llvm.load"(%11488) : (!llvm.ptr) -> !llvm.ptr
    %11493 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11494 = "llvm.ptrtoint"(%11493) : (!llvm.ptr) -> i64
    %11495 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11496 = "mini.subtype"(%11491, %11490, %11489, %11495, %11494, %11492) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11496) [^bb1369, ^bb1369] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1370:
    %11497 = "llvm.extractvalue"(%11478) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11498 = "llvm.load"(%11481) : (!llvm.ptr) -> i32
    %11499 = "llvm.getelementptr"(%11497, %11498) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11500 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11501 = "llvm.getelementptr"(%11499, %11500) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11501) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__MUL_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1371(%11502 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11503 : !llvm.ptr):
    %11504 = "mini.invariant"(%11503) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11505 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1372] : () -> ()
  ^bb1373:
    %11506 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%11506, %11505) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1374] : () -> ()
  ^bb1372:
    %11507 = "llvm.getelementptr"(%11503) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11508 = "llvm.load"(%11507) : (!llvm.ptr) -> !llvm.ptr
    %11509 = "llvm.getelementptr"(%11508) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11510 = "llvm.getelementptr"(%11508) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11511 = "llvm.getelementptr"(%11508) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11512 = "llvm.getelementptr"(%11508) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11513 = "llvm.load"(%11509) : (!llvm.ptr) -> i64
    %11514 = "llvm.load"(%11510) : (!llvm.ptr) -> i64
    %11515 = "llvm.load"(%11511) : (!llvm.ptr) -> !llvm.ptr
    %11516 = "llvm.load"(%11512) : (!llvm.ptr) -> !llvm.ptr
    %11517 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11518 = "llvm.ptrtoint"(%11517) : (!llvm.ptr) -> i64
    %11519 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11520 = "mini.subtype"(%11515, %11514, %11513, %11519, %11518, %11516) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11520) [^bb1373, ^bb1373] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1374:
    %11521 = "llvm.extractvalue"(%11502) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11522 = "llvm.load"(%11505) : (!llvm.ptr) -> i32
    %11523 = "llvm.getelementptr"(%11521, %11522) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11524 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11525 = "llvm.getelementptr"(%11523, %11524) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11525) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__DIV_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1375(%11526 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11527 : !llvm.ptr):
    %11528 = "mini.invariant"(%11527) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11529 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1376] : () -> ()
  ^bb1376:
    %11530 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%11530, %11529) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1377] : () -> ()
  ^bb1377:
    %11531 = "llvm.extractvalue"(%11526) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11532 = "llvm.load"(%11529) : (!llvm.ptr) -> i32
    %11533 = "llvm.getelementptr"(%11531, %11532) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11534 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11535 = "llvm.getelementptr"(%11533, %11534) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11535) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_print_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1378(%11536 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11537 : !llvm.ptr):
    %11538 = "mini.invariant"(%11537) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11539 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1379] : () -> ()
  ^bb1379:
    %11540 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%11540, %11539) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1380] : () -> ()
  ^bb1380:
    %11541 = "llvm.extractvalue"(%11536) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11542 = "llvm.load"(%11539) : (!llvm.ptr) -> i32
    %11543 = "llvm.getelementptr"(%11541, %11542) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11544 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11545 = "llvm.getelementptr"(%11543, %11544) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11545) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_introduce_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1381(%11546 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11547 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11548 : !llvm.ptr):
    %11549 = "mini.wrap"(%11546) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer2">
    %11550 = "mini.to_fat_ptr"(%11549) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer2", "to_typ_name" = "Integer2", "invariant"} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %11551 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11552 = "mini.create_buffer"(%11551) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %11553 = builtin.unrealized_conversion_cast %11552 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %11554 = "mini.refer"(%11553) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %11555 = "mini.literal"() {"typ" = !llvm.array<8 x i8>, "value" = "Integer2"} : () -> !llvm.ptr
    %11556 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%11554, %11556, %11555) {"typ" = !llvm.array<8 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %11557 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11558 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11559 = "mini.unwrap"(%11554) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %11560 = "mini.unwrap"(%11557) : (!mini.ptr<i32>) -> i32
    %11561 = "mini.unwrap"(%11558) : (!mini.ptr<i32>) -> i32
    %11562 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %11563 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11564 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11565 = builtin.unrealized_conversion_cast %11554 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %11566 = "mini.unwrap"(%11565) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %11567 = builtin.unrealized_conversion_cast %11563 : !mini.ptr<i32> to !mini.ptr<i32>
    %11568 = "mini.unwrap"(%11567) : (!mini.ptr<i32>) -> i32
    %11569 = builtin.unrealized_conversion_cast %11564 : !mini.ptr<i32> to !mini.ptr<i32>
    %11570 = "mini.unwrap"(%11569) : (!mini.ptr<i32>) -> i32
    %11571 = "mini.unwrap"(%11562) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11572 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %11573 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11574 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11575 = "mini.parameterizations_array"(%11572, %11573, %11574) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11575, %11571, %11566, %11568, %11570) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %11576 = "mini.to_fat_ptr"(%11562) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%11576) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "Integer2_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1382(%11577 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11578 : !llvm.ptr):
    %11579 = "mini.invariant"(%11578) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11580 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1383] : () -> ()
  ^bb1383:
    %11581 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%11581, %11580) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1384] : () -> ()
  ^bb1384:
    %11582 = "llvm.extractvalue"(%11577) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11583 = "llvm.load"(%11580) : (!llvm.ptr) -> i32
    %11584 = "llvm.getelementptr"(%11582, %11583) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11585 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11586 = "llvm.getelementptr"(%11584, %11585) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11586) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Animal", "types" = [i32, f64, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Animal_getter_age", "types" = [i32, f64, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Animal_setter_age", "types" = [i32, f64, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Animal_field_age", "getter_name" = "Animal_getter_age", "setter_name" = "Animal_setter_age"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Animal_getter_hp", "types" = [i32, f64, i32], "offset" = 1 : i64, "original_type" = f64, "specialized_name" = "f64_typ", "parameterization" = "_parameterization_Ptrf64"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Animal_setter_hp", "types" = [i32, f64, i32], "offset" = 1 : i64, "original_type" = f64, "specialized_name" = "f64_typ", "parameterization" = "_parameterization_Ptrf64"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Animal_field_hp", "getter_name" = "Animal_getter_hp", "setter_name" = "Animal_setter_hp"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Animal_getter_skill", "types" = [i32, f64, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Animal_setter_skill", "types" = [i32, f64, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Animal_field_skill", "getter_name" = "Animal_getter_skill", "setter_name" = "Animal_setter_skill"} : () -> ()
  "mini.func"() ({
  ^bb1385(%11587 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11588 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11589 : !llvm.ptr, %11590 : i32, %11591 : f64, %11592 : i32):
    %11593 = "mini.wrap"(%11587) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %11594 = "mini.to_fat_ptr"(%11593) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %11595 = "mini.wrap"(%11590) : (i32) -> !mini.ptr<i32>
    %11596 = builtin.unrealized_conversion_cast %11595 : !mini.ptr<i32> to !mini.ptr<i32>
    %11597 = builtin.unrealized_conversion_cast %11596 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%11594, %11597) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">, !mini.ptr<i32>) -> ()
    %11598 = "mini.wrap"(%11591) : (f64) -> !mini.ptr<f64>
    %11599 = builtin.unrealized_conversion_cast %11598 : !mini.ptr<f64> to !mini.ptr<f64>
    %11600 = builtin.unrealized_conversion_cast %11599 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.set_field"(%11594, %11600) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = f64} : (!mini.fatptr<"Animal">, !mini.ptr<f64>) -> ()
    %11601 = "mini.wrap"(%11592) : (i32) -> !mini.ptr<i32>
    %11602 = builtin.unrealized_conversion_cast %11601 : !mini.ptr<i32> to !mini.ptr<i32>
    %11603 = builtin.unrealized_conversion_cast %11602 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%11594, %11603) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Animal_init_agePtri32_hpPtrf64_skillPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1386(%11604 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11605 : !llvm.ptr):
    %11606 = "mini.invariant"(%11605) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11607 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1387] : () -> ()
  ^bb1388:
    %11608 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%11608, %11607) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1389] : () -> ()
  ^bb1390:
    %11609 = "llvm.getelementptr"(%11605) <{"rawConstantIndices" = array<i32: 0, 2>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11610 = "llvm.load"(%11609) : (!llvm.ptr) -> !llvm.ptr
    %11611 = "llvm.getelementptr"(%11610) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11612 = "llvm.getelementptr"(%11610) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11613 = "llvm.getelementptr"(%11610) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11614 = "llvm.getelementptr"(%11610) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11615 = "llvm.load"(%11611) : (!llvm.ptr) -> i64
    %11616 = "llvm.load"(%11612) : (!llvm.ptr) -> i64
    %11617 = "llvm.load"(%11613) : (!llvm.ptr) -> !llvm.ptr
    %11618 = "llvm.load"(%11614) : (!llvm.ptr) -> !llvm.ptr
    %11619 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11620 = "llvm.ptrtoint"(%11619) : (!llvm.ptr) -> i64
    %11621 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11622 = "mini.subtype"(%11617, %11616, %11615, %11621, %11620, %11618) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11622) [^bb1388, ^bb1388] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1391:
    %11623 = "llvm.getelementptr"(%11605) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11624 = "llvm.load"(%11623) : (!llvm.ptr) -> !llvm.ptr
    %11625 = "llvm.getelementptr"(%11624) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11626 = "llvm.getelementptr"(%11624) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11627 = "llvm.getelementptr"(%11624) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11628 = "llvm.getelementptr"(%11624) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11629 = "llvm.load"(%11625) : (!llvm.ptr) -> i64
    %11630 = "llvm.load"(%11626) : (!llvm.ptr) -> i64
    %11631 = "llvm.load"(%11627) : (!llvm.ptr) -> !llvm.ptr
    %11632 = "llvm.load"(%11628) : (!llvm.ptr) -> !llvm.ptr
    %11633 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %11634 = "llvm.ptrtoint"(%11633) : (!llvm.ptr) -> i64
    %11635 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %11636 = "mini.subtype"(%11631, %11630, %11629, %11635, %11634, %11632) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11636) [^bb1390, ^bb1390] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1387:
    %11637 = "llvm.getelementptr"(%11605) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11638 = "llvm.load"(%11637) : (!llvm.ptr) -> !llvm.ptr
    %11639 = "llvm.getelementptr"(%11638) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11640 = "llvm.getelementptr"(%11638) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11641 = "llvm.getelementptr"(%11638) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11642 = "llvm.getelementptr"(%11638) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11643 = "llvm.load"(%11639) : (!llvm.ptr) -> i64
    %11644 = "llvm.load"(%11640) : (!llvm.ptr) -> i64
    %11645 = "llvm.load"(%11641) : (!llvm.ptr) -> !llvm.ptr
    %11646 = "llvm.load"(%11642) : (!llvm.ptr) -> !llvm.ptr
    %11647 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11648 = "llvm.ptrtoint"(%11647) : (!llvm.ptr) -> i64
    %11649 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11650 = "mini.subtype"(%11645, %11644, %11643, %11649, %11648, %11646) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11650) [^bb1391, ^bb1391] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1389:
    %11651 = "llvm.extractvalue"(%11604) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11652 = "llvm.load"(%11607) : (!llvm.ptr) -> i32
    %11653 = "llvm.getelementptr"(%11651, %11652) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11654 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11655 = "llvm.getelementptr"(%11653, %11654) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11655) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_init_agePtri32_hpPtrf64_skillPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1392(%11656 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11657 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11658 : !llvm.ptr):
    %11659 = "mini.wrap"(%11656) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %11660 = "mini.to_fat_ptr"(%11659) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %11661 = "mini.get_field"(%11660) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<i32>
    %11662 = builtin.unrealized_conversion_cast %11661 : !mini.ptr<i32> to !mini.ptr<i32>
    %11663 = "mini.unwrap"(%11662) : (!mini.ptr<i32>) -> i32
    %11664 = "mini.unwrap"(%11660) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11665 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11666 = "mini.parameterizations_array"(%11665) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11666, %11664, %11663) {"offset" = 6 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %11667 = "mini.get_field"(%11660) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<i32>
    %11668 = builtin.unrealized_conversion_cast %11667 : !mini.ptr<i32> to !mini.ptr<i32>
    %11669 = "mini.unwrap"(%11668) : (!mini.ptr<i32>) -> i32
    %11670 = "mini.unwrap"(%11660) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11671 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11672 = "mini.parameterizations_array"(%11671) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11672, %11670, %11669) {"offset" = 6 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
  }) {"func_name" = "Animal_say_age_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1393(%11673 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11674 : !llvm.ptr):
    %11675 = "mini.invariant"(%11674) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11676 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1394] : () -> ()
  ^bb1394:
    %11677 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%11677, %11676) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1395] : () -> ()
  ^bb1395:
    %11678 = "llvm.extractvalue"(%11673) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11679 = "llvm.load"(%11676) : (!llvm.ptr) -> i32
    %11680 = "llvm.getelementptr"(%11678, %11679) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11681 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11682 = "llvm.getelementptr"(%11680, %11681) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11682) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_say_age_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1396(%11683 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11684 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11685 : !llvm.ptr):
    %11686 = "mini.wrap"(%11683) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %11687 = "mini.to_fat_ptr"(%11686) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %11688 = "mini.get_field"(%11687) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<i32>
    %11689 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %11690 = "mini.unwrap"(%11689) : (!mini.ptr<i1>) -> i1
    %11691 = builtin.unrealized_conversion_cast %11688 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.if"(%11690) ({
      %11692 = builtin.unrealized_conversion_cast %11691 : !mini.ptr<i32> to !mini.ptr<i32>
      %11693 = "mini.unionize"(%11692) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
      %11694 = "mini.unwrap"(%11693) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %11695 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %11696 = "mini.parameterizations_array"(%11695) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%11696, %11694) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%11691, %11692) ({
        %11697 = builtin.unrealized_conversion_cast %11692 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "Animal_say_skill_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1397(%11698 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11699 : !llvm.ptr):
    %11700 = "mini.invariant"(%11699) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11701 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1398] : () -> ()
  ^bb1398:
    %11702 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%11702, %11701) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1399] : () -> ()
  ^bb1399:
    %11703 = "llvm.extractvalue"(%11698) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11704 = "llvm.load"(%11701) : (!llvm.ptr) -> i32
    %11705 = "llvm.getelementptr"(%11703, %11704) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11706 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11707 = "llvm.getelementptr"(%11705, %11706) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11707) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_say_skill_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1400(%11708 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11709 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11710 : !llvm.ptr, %11711 : i32):
    %11712 = "mini.wrap"(%11708) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %11713 = "mini.to_fat_ptr"(%11712) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %11714 = "mini.wrap"(%11711) : (i32) -> !mini.ptr<i32>
    %11715 = builtin.unrealized_conversion_cast %11714 : !mini.ptr<i32> to !mini.ptr<i32>
    %11716 = "mini.unionize"(%11715) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %11717 = "mini.unwrap"(%11716) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %11718 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11719 = "mini.parameterizations_array"(%11718) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%11719, %11717) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Animal_say_messagePtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1401(%11720 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11721 : !llvm.ptr):
    %11722 = "mini.invariant"(%11721) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11723 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1402] : () -> ()
  ^bb1403:
    %11724 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%11724, %11723) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1404] : () -> ()
  ^bb1402:
    %11725 = "llvm.getelementptr"(%11721) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11726 = "llvm.load"(%11725) : (!llvm.ptr) -> !llvm.ptr
    %11727 = "llvm.getelementptr"(%11726) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11728 = "llvm.getelementptr"(%11726) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11729 = "llvm.getelementptr"(%11726) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11730 = "llvm.getelementptr"(%11726) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11731 = "llvm.load"(%11727) : (!llvm.ptr) -> i64
    %11732 = "llvm.load"(%11728) : (!llvm.ptr) -> i64
    %11733 = "llvm.load"(%11729) : (!llvm.ptr) -> !llvm.ptr
    %11734 = "llvm.load"(%11730) : (!llvm.ptr) -> !llvm.ptr
    %11735 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11736 = "llvm.ptrtoint"(%11735) : (!llvm.ptr) -> i64
    %11737 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11738 = "mini.subtype"(%11733, %11732, %11731, %11737, %11736, %11734) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11738) [^bb1403, ^bb1403] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1404:
    %11739 = "llvm.extractvalue"(%11720) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11740 = "llvm.load"(%11723) : (!llvm.ptr) -> i32
    %11741 = "llvm.getelementptr"(%11739, %11740) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11742 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11743 = "llvm.getelementptr"(%11741, %11742) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11743) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_say_messagePtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1405(%11744 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11745 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11746 : !llvm.ptr):
    %11747 = "mini.wrap"(%11744) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %11748 = "mini.to_fat_ptr"(%11747) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %11749 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11750 = "mini.literal"() {"value" = 5.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %11751 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11752 = "mini.unwrap"(%11749) : (!mini.ptr<i32>) -> i32
    %11753 = "mini.unwrap"(%11750) : (!mini.ptr<f64>) -> f64
    %11754 = "mini.unwrap"(%11751) : (!mini.ptr<i32>) -> i32
    %11755 = "mini.new"() {"typ" = !llvm.struct<(i32, f64, i32)>, "class_name" = "Animal", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Animal">
    %11756 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11757 = "mini.literal"() {"value" = 5.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %11758 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11759 = builtin.unrealized_conversion_cast %11756 : !mini.ptr<i32> to !mini.ptr<i32>
    %11760 = "mini.unwrap"(%11759) : (!mini.ptr<i32>) -> i32
    %11761 = builtin.unrealized_conversion_cast %11757 : !mini.ptr<f64> to !mini.ptr<f64>
    %11762 = "mini.unwrap"(%11761) : (!mini.ptr<f64>) -> f64
    %11763 = builtin.unrealized_conversion_cast %11758 : !mini.ptr<i32> to !mini.ptr<i32>
    %11764 = "mini.unwrap"(%11763) : (!mini.ptr<i32>) -> i32
    %11765 = "mini.unwrap"(%11755) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11766 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11767 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %11768 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11769 = "mini.parameterizations_array"(%11766, %11767, %11768) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11769, %11765, %11760, %11762, %11764) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "f64_typ", "i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64, i32) -> ()
    %11770 = builtin.unrealized_conversion_cast %11755 : !mini.fatptr<"Animal"> to !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>]>
    "mini.return"(%11770) : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> ()
  }) {"func_name" = "Animal_do_nothing_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1406(%11771 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11772 : !llvm.ptr):
    %11773 = "mini.invariant"(%11772) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11774 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1407] : () -> ()
  ^bb1407:
    %11775 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%11775, %11774) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1408] : () -> ()
  ^bb1408:
    %11776 = "llvm.extractvalue"(%11771) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11777 = "llvm.load"(%11774) : (!llvm.ptr) -> i32
    %11778 = "llvm.getelementptr"(%11776, %11777) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11779 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11780 = "llvm.getelementptr"(%11778, %11779) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11780) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_do_nothing_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Beaver", "types" = [i32, f64]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Beaver_getter_color", "types" = [i32, f64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Beaver_setter_color", "types" = [i32, f64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Beaver_field_color", "getter_name" = "Beaver_getter_color", "setter_name" = "Beaver_setter_color"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Beaver_getter_name", "types" = [i32, f64], "offset" = 1 : i64, "original_type" = f64, "specialized_name" = "f64_typ", "parameterization" = "_parameterization_Ptrf64"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Beaver_setter_name", "types" = [i32, f64], "offset" = 1 : i64, "original_type" = f64, "specialized_name" = "f64_typ", "parameterization" = "_parameterization_Ptrf64"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Beaver_field_name", "getter_name" = "Beaver_getter_name", "setter_name" = "Beaver_setter_name"} : () -> ()
  "mini.func"() ({
  ^bb1409(%11781 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11782 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11783 : !llvm.ptr, %11784 : i32, %11785 : f64):
    %11786 = "mini.wrap"(%11781) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Beaver">
    %11787 = "mini.to_fat_ptr"(%11786) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver", "invariant"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %11788 = "mini.wrap"(%11784) : (i32) -> !mini.ptr<i32>
    %11789 = builtin.unrealized_conversion_cast %11788 : !mini.ptr<i32> to !mini.ptr<i32>
    %11790 = builtin.unrealized_conversion_cast %11789 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%11787, %11790) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"Beaver">, !mini.ptr<i32>) -> ()
    %11791 = "mini.wrap"(%11785) : (f64) -> !mini.ptr<f64>
    %11792 = builtin.unrealized_conversion_cast %11791 : !mini.ptr<f64> to !mini.ptr<f64>
    %11793 = builtin.unrealized_conversion_cast %11792 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.set_field"(%11787, %11793) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = f64} : (!mini.fatptr<"Beaver">, !mini.ptr<f64>) -> ()
  }) {"func_name" = "Beaver_init_colorPtri32_namePtrf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1410(%11794 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11795 : !llvm.ptr):
    %11796 = "mini.invariant"(%11795) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11797 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1411] : () -> ()
  ^bb1412:
    %11798 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%11798, %11797) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1413] : () -> ()
  ^bb1414:
    %11799 = "llvm.getelementptr"(%11795) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11800 = "llvm.load"(%11799) : (!llvm.ptr) -> !llvm.ptr
    %11801 = "llvm.getelementptr"(%11800) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11802 = "llvm.getelementptr"(%11800) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11803 = "llvm.getelementptr"(%11800) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11804 = "llvm.getelementptr"(%11800) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11805 = "llvm.load"(%11801) : (!llvm.ptr) -> i64
    %11806 = "llvm.load"(%11802) : (!llvm.ptr) -> i64
    %11807 = "llvm.load"(%11803) : (!llvm.ptr) -> !llvm.ptr
    %11808 = "llvm.load"(%11804) : (!llvm.ptr) -> !llvm.ptr
    %11809 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %11810 = "llvm.ptrtoint"(%11809) : (!llvm.ptr) -> i64
    %11811 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %11812 = "mini.subtype"(%11807, %11806, %11805, %11811, %11810, %11808) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11812) [^bb1412, ^bb1412] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1411:
    %11813 = "llvm.getelementptr"(%11795) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11814 = "llvm.load"(%11813) : (!llvm.ptr) -> !llvm.ptr
    %11815 = "llvm.getelementptr"(%11814) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11816 = "llvm.getelementptr"(%11814) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11817 = "llvm.getelementptr"(%11814) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11818 = "llvm.getelementptr"(%11814) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11819 = "llvm.load"(%11815) : (!llvm.ptr) -> i64
    %11820 = "llvm.load"(%11816) : (!llvm.ptr) -> i64
    %11821 = "llvm.load"(%11817) : (!llvm.ptr) -> !llvm.ptr
    %11822 = "llvm.load"(%11818) : (!llvm.ptr) -> !llvm.ptr
    %11823 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11824 = "llvm.ptrtoint"(%11823) : (!llvm.ptr) -> i64
    %11825 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11826 = "mini.subtype"(%11821, %11820, %11819, %11825, %11824, %11822) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11826) [^bb1414, ^bb1414] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1413:
    %11827 = "llvm.extractvalue"(%11794) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11828 = "llvm.load"(%11797) : (!llvm.ptr) -> i32
    %11829 = "llvm.getelementptr"(%11827, %11828) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11830 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11831 = "llvm.getelementptr"(%11829, %11830) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11831) : (!llvm.ptr) -> ()
  }) {"func_name" = "Beaver_B_init_colorPtri32_namePtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1415(%11832 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11833 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11834 : !llvm.ptr, %11835 : i32):
    %11836 = "mini.wrap"(%11832) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Beaver">
    %11837 = "mini.to_fat_ptr"(%11836) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver", "invariant"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %11838 = "mini.wrap"(%11835) : (i32) -> !mini.ptr<i32>
    %11839 = builtin.unrealized_conversion_cast %11838 : !mini.ptr<i32> to !mini.ptr<i32>
    %11840 = "mini.get_field"(%11837) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"Beaver">) -> !mini.ptr<i32>
    %11841 = "mini.unwrap"(%11840) : (!mini.ptr<i32>) -> i32
    %11842 = "mini.unwrap"(%11839) : (!mini.ptr<i32>) -> i32
    %11843 = "mini.arithmetic"(%11841, %11842) {"op" = "ADD"} : (i32, i32) -> i32
    %11844 = "mini.wrap"(%11843) : (i32) -> !mini.ptr<i32>
    %11845 = builtin.unrealized_conversion_cast %11844 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%11837, %11845) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"Beaver">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Beaver__ADD_xPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1416(%11846 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11847 : !llvm.ptr):
    %11848 = "mini.invariant"(%11847) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11849 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1417] : () -> ()
  ^bb1418:
    %11850 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%11850, %11849) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1419] : () -> ()
  ^bb1417:
    %11851 = "llvm.getelementptr"(%11847) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11852 = "llvm.load"(%11851) : (!llvm.ptr) -> !llvm.ptr
    %11853 = "llvm.getelementptr"(%11852) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11854 = "llvm.getelementptr"(%11852) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11855 = "llvm.getelementptr"(%11852) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11856 = "llvm.getelementptr"(%11852) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11857 = "llvm.load"(%11853) : (!llvm.ptr) -> i64
    %11858 = "llvm.load"(%11854) : (!llvm.ptr) -> i64
    %11859 = "llvm.load"(%11855) : (!llvm.ptr) -> !llvm.ptr
    %11860 = "llvm.load"(%11856) : (!llvm.ptr) -> !llvm.ptr
    %11861 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11862 = "llvm.ptrtoint"(%11861) : (!llvm.ptr) -> i64
    %11863 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11864 = "mini.subtype"(%11859, %11858, %11857, %11863, %11862, %11860) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11864) [^bb1418, ^bb1418] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1419:
    %11865 = "llvm.extractvalue"(%11846) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11866 = "llvm.load"(%11849) : (!llvm.ptr) -> i32
    %11867 = "llvm.getelementptr"(%11865, %11866) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11868 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11869 = "llvm.getelementptr"(%11867, %11868) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11869) : (!llvm.ptr) -> ()
  }) {"func_name" = "Beaver_B__ADD_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1420(%11870 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11871 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11872 : !llvm.ptr):
    %11873 = "mini.wrap"(%11870) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Beaver">
    %11874 = "mini.to_fat_ptr"(%11873) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver", "invariant"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %11875 = "mini.get_field"(%11874) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"Beaver">) -> !mini.ptr<i32>
    %11876 = "mini.unionize"(%11875) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %11877 = "mini.unwrap"(%11876) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %11878 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11879 = "mini.parameterizations_array"(%11878) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%11879, %11877) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Beaver_say_color_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1421(%11880 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11881 : !llvm.ptr):
    %11882 = "mini.invariant"(%11881) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11883 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1422] : () -> ()
  ^bb1422:
    %11884 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%11884, %11883) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1423] : () -> ()
  ^bb1423:
    %11885 = "llvm.extractvalue"(%11880) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11886 = "llvm.load"(%11883) : (!llvm.ptr) -> i32
    %11887 = "llvm.getelementptr"(%11885, %11886) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11888 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11889 = "llvm.getelementptr"(%11887, %11888) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11889) : (!llvm.ptr) -> ()
  }) {"func_name" = "Beaver_B_say_color_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ListNode", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ListNode_getter_data", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ListNode_setter_data", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_Ptri32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ListNode_field_data", "getter_name" = "ListNode_getter_data", "setter_name" = "ListNode_setter_data"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ListNode_getter_next", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_ListNode_or_Nil"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ListNode_setter_next", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_ListNode_or_Nil"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ListNode_field_next", "getter_name" = "ListNode_getter_next", "setter_name" = "ListNode_setter_next"} : () -> ()
  "mini.func"() ({
  ^bb1424(%11890 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11891 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11892 : !llvm.ptr, %11893 : i32):
    %11894 = "mini.wrap"(%11890) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %11895 = "mini.to_fat_ptr"(%11894) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %11896 = "mini.wrap"(%11893) : (i32) -> !mini.ptr<i32>
    %11897 = builtin.unrealized_conversion_cast %11896 : !mini.ptr<i32> to !mini.ptr<i32>
    %11898 = builtin.unrealized_conversion_cast %11897 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.set_field"(%11895, %11898) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = i32} : (!mini.fatptr<"ListNode">, !mini.ptr<i32>) -> ()
    %11899 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %11900 = "mini.unionize"(%11899) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    "mini.set_field"(%11895, %11900) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ListNode">, !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> ()
  }) {"func_name" = "ListNode_init_dataPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1425(%11901 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11902 : !llvm.ptr):
    %11903 = "mini.invariant"(%11902) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11904 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1426] : () -> ()
  ^bb1427:
    %11905 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%11905, %11904) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1428] : () -> ()
  ^bb1426:
    %11906 = "llvm.getelementptr"(%11902) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11907 = "llvm.load"(%11906) : (!llvm.ptr) -> !llvm.ptr
    %11908 = "llvm.getelementptr"(%11907) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11909 = "llvm.getelementptr"(%11907) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11910 = "llvm.getelementptr"(%11907) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11911 = "llvm.getelementptr"(%11907) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11912 = "llvm.load"(%11908) : (!llvm.ptr) -> i64
    %11913 = "llvm.load"(%11909) : (!llvm.ptr) -> i64
    %11914 = "llvm.load"(%11910) : (!llvm.ptr) -> !llvm.ptr
    %11915 = "llvm.load"(%11911) : (!llvm.ptr) -> !llvm.ptr
    %11916 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11917 = "llvm.ptrtoint"(%11916) : (!llvm.ptr) -> i64
    %11918 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11919 = "mini.subtype"(%11914, %11913, %11912, %11918, %11917, %11915) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11919) [^bb1427, ^bb1427] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1428:
    %11920 = "llvm.extractvalue"(%11901) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11921 = "llvm.load"(%11904) : (!llvm.ptr) -> i32
    %11922 = "llvm.getelementptr"(%11920, %11921) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11923 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11924 = "llvm.getelementptr"(%11922, %11923) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11924) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_init_dataPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1429(%11925 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11926 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11927 : !llvm.ptr, %11928 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %11929 = "mini.wrap"(%11925) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %11930 = "mini.to_fat_ptr"(%11929) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %11931 = "mini.wrap"(%11928) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %11932 = "mini.to_fat_ptr"(%11931) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %11933 = builtin.unrealized_conversion_cast %11932 : !mini.fatptr<"ListNode"> to !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    "mini.set_field"(%11930, %11933) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ListNode">, !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> ()
    %11934 = "mini.to_fat_ptr"(%11932) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    "mini.return"(%11934) : (!mini.fatptr<"ListNode">) -> ()
  }) {"func_name" = "ListNode_push_nextListNode", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1430(%11935 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11936 : !llvm.ptr):
    %11937 = "mini.invariant"(%11936) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11938 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1431] : () -> ()
  ^bb1432:
    %11939 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%11939, %11938) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1433] : () -> ()
  ^bb1431:
    %11940 = "llvm.getelementptr"(%11936) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %11941 = "llvm.load"(%11940) : (!llvm.ptr) -> !llvm.ptr
    %11942 = "llvm.getelementptr"(%11941) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11943 = "llvm.getelementptr"(%11941) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11944 = "llvm.getelementptr"(%11941) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11945 = "llvm.getelementptr"(%11941) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11946 = "llvm.load"(%11942) : (!llvm.ptr) -> i64
    %11947 = "llvm.load"(%11943) : (!llvm.ptr) -> i64
    %11948 = "llvm.load"(%11944) : (!llvm.ptr) -> !llvm.ptr
    %11949 = "llvm.load"(%11945) : (!llvm.ptr) -> !llvm.ptr
    %11950 = "mini.addr_of"() {"global_name" = @ListNode} : () -> !llvm.ptr
    %11951 = "llvm.ptrtoint"(%11950) : (!llvm.ptr) -> i64
    %11952 = "llvm.mlir.constant"() <{"value" = 16690719123176460140 : i64}> : () -> i64
    %11953 = "mini.subtype"(%11948, %11947, %11946, %11952, %11951, %11949) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11953) [^bb1432, ^bb1432] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1433:
    %11954 = "llvm.extractvalue"(%11935) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11955 = "llvm.load"(%11938) : (!llvm.ptr) -> i32
    %11956 = "llvm.getelementptr"(%11954, %11955) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11957 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11958 = "llvm.getelementptr"(%11956, %11957) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11958) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_push_nextListNode", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1434(%11959 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11960 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11961 : !llvm.ptr):
    %11962 = "mini.wrap"(%11959) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %11963 = "mini.to_fat_ptr"(%11962) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %11964 = "mini.get_field"(%11963) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ListNode">) -> !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    %11965 = builtin.unrealized_conversion_cast %11964 : !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]> to !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    "mini.return"(%11965) : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> ()
  }) {"func_name" = "ListNode_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1435(%11966 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11967 : !llvm.ptr):
    %11968 = "mini.invariant"(%11967) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11969 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1436] : () -> ()
  ^bb1436:
    %11970 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%11970, %11969) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1437] : () -> ()
  ^bb1437:
    %11971 = "llvm.extractvalue"(%11966) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11972 = "llvm.load"(%11969) : (!llvm.ptr) -> i32
    %11973 = "llvm.getelementptr"(%11971, %11972) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11974 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11975 = "llvm.getelementptr"(%11973, %11974) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11975) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1438(%11976 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11977 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11978 : !llvm.ptr):
    %11979 = "mini.wrap"(%11976) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %11980 = "mini.to_fat_ptr"(%11979) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %11981 = "mini.get_field"(%11980) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = i32} : (!mini.fatptr<"ListNode">) -> !mini.ptr<i32>
    %11982 = builtin.unrealized_conversion_cast %11981 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%11982) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "ListNode_data_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1439(%11983 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11984 : !llvm.ptr):
    %11985 = "mini.invariant"(%11984) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11986 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1440] : () -> ()
  ^bb1440:
    %11987 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%11987, %11986) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1441] : () -> ()
  ^bb1441:
    %11988 = "llvm.extractvalue"(%11983) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11989 = "llvm.load"(%11986) : (!llvm.ptr) -> i32
    %11990 = "llvm.getelementptr"(%11988, %11989) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11991 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %11992 = "llvm.getelementptr"(%11990, %11991) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11992) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_data_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1442(%11993 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11994 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11995 : !llvm.ptr):
    %11996 = "mini.wrap"(%11993) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %11997 = "mini.to_fat_ptr"(%11996) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %11998 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11999 = "mini.unwrap"(%11998) : (!mini.ptr<i32>) -> i32
    %12000 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ListNode", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ListNode">
    %12001 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12002 = builtin.unrealized_conversion_cast %12001 : !mini.ptr<i32> to !mini.ptr<i32>
    %12003 = "mini.unwrap"(%12002) : (!mini.ptr<i32>) -> i32
    %12004 = "mini.unwrap"(%12000) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12005 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12006 = "mini.parameterizations_array"(%12005) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12006, %12004, %12003) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %12007 = "mini.to_fat_ptr"(%12000) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12008 = "mini.refer"(%12007) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12009 = "mini.to_fat_ptr"(%11997) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12010 = "mini.unwrap"(%12009) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12011 = "mini.unwrap"(%12008) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12012 = "mini.parameterization"() {"id_hierarchy" = ["ListNode"], "name_hierarchy" = ["ListNode"]} : () -> !llvm.ptr
    %12013 = "mini.parameterizations_array"(%12012) : (!llvm.ptr) -> !llvm.ptr
    %12014 = "mini.method_call"(%12013, %12011, %12010) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %12015 = "mini.to_fat_ptr"(%12014) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12016 = "mini.unwrap"(%12008) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12017 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ListIterator", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ListIterator">
    %12018 = "mini.to_fat_ptr"(%12008) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12019 = "mini.unwrap"(%12018) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12020 = "mini.unwrap"(%12017) : (!mini.fatptr<"ListIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12021 = "mini.parameterization"() {"id_hierarchy" = ["ListNode"], "name_hierarchy" = ["ListNode"]} : () -> !llvm.ptr
    %12022 = "mini.parameterizations_array"(%12021) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12022, %12020, %12019) {"offset" = 1 : i32, "vptrs" = [#none], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %12023 = "mini.to_fat_ptr"(%12017) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator", "invariant"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    "mini.return"(%12023) : (!mini.fatptr<"ListIterator">) -> ()
  }) {"func_name" = "ListNode_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1443(%12024 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12025 : !llvm.ptr):
    %12026 = "mini.invariant"(%12025) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12027 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1444] : () -> ()
  ^bb1444:
    %12028 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%12028, %12027) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1445] : () -> ()
  ^bb1445:
    %12029 = "llvm.extractvalue"(%12024) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12030 = "llvm.load"(%12027) : (!llvm.ptr) -> i32
    %12031 = "llvm.getelementptr"(%12029, %12030) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12032 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %12033 = "llvm.getelementptr"(%12031, %12032) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12033) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_ListIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ListIterator_getter_node", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "ListNode", "parameterization" = "_parameterization_ListNode"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ListIterator_setter_node", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "ListNode", "parameterization" = "_parameterization_ListNode"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ListIterator_field_node", "getter_name" = "ListIterator_getter_node", "setter_name" = "ListIterator_setter_node"} : () -> ()
  "mini.func"() ({
  ^bb1446(%12034 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12035 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12036 : !llvm.ptr, %12037 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %12038 = "mini.wrap"(%12034) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListIterator">
    %12039 = "mini.to_fat_ptr"(%12038) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator", "invariant"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %12040 = "mini.wrap"(%12037) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %12041 = "mini.to_fat_ptr"(%12040) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12042 = "mini.to_fat_ptr"(%12041) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    "mini.set_field"(%12039, %12042) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListIterator">, !mini.fatptr<"ListNode">) -> ()
  }) {"func_name" = "ListIterator_init_nodeListNode", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1447(%12043 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12044 : !llvm.ptr):
    %12045 = "mini.invariant"(%12044) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12046 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1448] : () -> ()
  ^bb1449:
    %12047 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%12047, %12046) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1450] : () -> ()
  ^bb1448:
    %12048 = "llvm.getelementptr"(%12044) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %12049 = "llvm.load"(%12048) : (!llvm.ptr) -> !llvm.ptr
    %12050 = "llvm.getelementptr"(%12049) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12051 = "llvm.getelementptr"(%12049) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12052 = "llvm.getelementptr"(%12049) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12053 = "llvm.getelementptr"(%12049) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12054 = "llvm.load"(%12050) : (!llvm.ptr) -> i64
    %12055 = "llvm.load"(%12051) : (!llvm.ptr) -> i64
    %12056 = "llvm.load"(%12052) : (!llvm.ptr) -> !llvm.ptr
    %12057 = "llvm.load"(%12053) : (!llvm.ptr) -> !llvm.ptr
    %12058 = "mini.addr_of"() {"global_name" = @ListNode} : () -> !llvm.ptr
    %12059 = "llvm.ptrtoint"(%12058) : (!llvm.ptr) -> i64
    %12060 = "llvm.mlir.constant"() <{"value" = 16690719123176460140 : i64}> : () -> i64
    %12061 = "mini.subtype"(%12056, %12055, %12054, %12060, %12059, %12057) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12061) [^bb1449, ^bb1449] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1450:
    %12062 = "llvm.extractvalue"(%12043) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12063 = "llvm.load"(%12046) : (!llvm.ptr) -> i32
    %12064 = "llvm.getelementptr"(%12062, %12063) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12065 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %12066 = "llvm.getelementptr"(%12064, %12065) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12066) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListIterator_B_init_nodeListNode", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1451(%12067 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12068 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12069 : !llvm.ptr):
    %12070 = "mini.wrap"(%12067) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListIterator">
    %12071 = "mini.to_fat_ptr"(%12070) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator", "invariant"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %12072 = "mini.get_field"(%12071) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "ListNode"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListNode">
    %12073 = "mini.unwrap"(%12072) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12074 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %12075 = "mini.method_call"(%12074, %12073) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    %12076 = builtin.unrealized_conversion_cast %12075 : !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]> to !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    %12077 = "mini.checkflag"(%12076) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> i1
    %12078 = "mini.unwrap"(%12077) : (i1) -> i1
    %12079 = builtin.unrealized_conversion_cast %12076 : !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]> to !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    "mini.if"(%12078) ({
      %12080 = "mini.to_fat_ptr"(%12079) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "ListNode", "invariant"} : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> !mini.fatptr<"ListNode">
      %12081 = "mini.to_fat_ptr"(%12080) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      "mini.set_field"(%12071, %12081) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListIterator">, !mini.fatptr<"ListNode">) -> ()
      %12082 = "mini.get_field"(%12071) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "ListNode"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListNode">
      %12083 = builtin.unrealized_conversion_cast %12082 : !mini.fatptr<"ListNode"> to !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
      "mini.return"(%12083) : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> ()
      "mini.castassign"(%12079, %12080) ({
        %12084 = builtin.unrealized_conversion_cast %12080 : !mini.fatptr<"ListNode"> to !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "ListNode", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>, !mini.fatptr<"ListNode">) -> ()
    }) : (i1) -> ()
    %12085 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %12086 = "mini.unionize"(%12085) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
    "mini.return"(%12086) : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> ()
  }) {"func_name" = "ListIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1452(%12087 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12088 : !llvm.ptr):
    %12089 = "mini.invariant"(%12088) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12090 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1453] : () -> ()
  ^bb1453:
    %12091 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%12091, %12090) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1454] : () -> ()
  ^bb1454:
    %12092 = "llvm.extractvalue"(%12087) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12093 = "llvm.load"(%12090) : (!llvm.ptr) -> i32
    %12094 = "llvm.getelementptr"(%12092, %12093) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12095 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %12096 = "llvm.getelementptr"(%12094, %12095) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12096) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1455(%12097 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %12098 = "mini.wrap"(%12097) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %12099 = "mini.to_fat_ptr"(%12098) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %12100 = "mini.unwrap"(%12099) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12101 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%12101, %12100) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
  }) {"func_name" = "make_em_speak", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1456(%12102 : i32):
    %12103 = "mini.wrap"(%12102) : (i32) -> !mini.ptr<i32>
    %12104 = builtin.unrealized_conversion_cast %12103 : !mini.ptr<i32> to !mini.ptr<i32>
    %12105 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12106 = "mini.unwrap"(%12104) : (!mini.ptr<i32>) -> i32
    %12107 = "mini.unwrap"(%12105) : (!mini.ptr<i32>) -> i32
    %12108 = "mini.comparison"(%12106, %12107) {"op" = "LT"} : (i32, i32) -> i1
    %12109 = "mini.wrap"(%12108) : (i1) -> !mini.ptr<i32>
    %12110 = "mini.unwrap"(%12109) : (!mini.ptr<i32>) -> i1
    "mini.if"(%12110) ({
      %12111 = builtin.unrealized_conversion_cast %12104 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%12111) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %12112 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12113 = "mini.unwrap"(%12104) : (!mini.ptr<i32>) -> i32
    %12114 = "mini.unwrap"(%12112) : (!mini.ptr<i32>) -> i32
    %12115 = "mini.arithmetic"(%12113, %12114) {"op" = "SUB"} : (i32, i32) -> i32
    %12116 = "mini.wrap"(%12115) : (i32) -> !mini.ptr<i32>
    %12117 = "mini.unwrap"(%12116) : (!mini.ptr<i32>) -> i32
    %12118 = "mini.call"(%12117) {"func_name" = "fibonacci", "ret_type" = i32} : (i32) -> !mini.ptr<i32>
    %12119 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12120 = "mini.unwrap"(%12104) : (!mini.ptr<i32>) -> i32
    %12121 = "mini.unwrap"(%12119) : (!mini.ptr<i32>) -> i32
    %12122 = "mini.arithmetic"(%12120, %12121) {"op" = "SUB"} : (i32, i32) -> i32
    %12123 = "mini.wrap"(%12122) : (i32) -> !mini.ptr<i32>
    %12124 = "mini.unwrap"(%12123) : (!mini.ptr<i32>) -> i32
    %12125 = "mini.call"(%12124) {"func_name" = "fibonacci", "ret_type" = i32} : (i32) -> !mini.ptr<i32>
    %12126 = "mini.unwrap"(%12118) : (!mini.ptr<i32>) -> i32
    %12127 = "mini.unwrap"(%12125) : (!mini.ptr<i32>) -> i32
    %12128 = "mini.arithmetic"(%12126, %12127) {"op" = "ADD"} : (i32, i32) -> i32
    %12129 = "mini.wrap"(%12128) : (i32) -> !mini.ptr<i32>
    %12130 = builtin.unrealized_conversion_cast %12129 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%12130) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "fibonacci", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1457(%12131 : i32):
    %12132 = "mini.wrap"(%12131) : (i32) -> !mini.ptr<i32>
    %12133 = builtin.unrealized_conversion_cast %12132 : !mini.ptr<i32> to !mini.ptr<i32>
    %12134 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12135 = "mini.unwrap"(%12133) : (!mini.ptr<i32>) -> i32
    %12136 = "mini.unwrap"(%12134) : (!mini.ptr<i32>) -> i32
    %12137 = "mini.comparison"(%12135, %12136) {"op" = "LT"} : (i32, i32) -> i1
    %12138 = "mini.wrap"(%12137) : (i1) -> !mini.ptr<i32>
    %12139 = "mini.unwrap"(%12138) : (!mini.ptr<i32>) -> i1
    "mini.if"(%12139) ({
      %12140 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %12141 = builtin.unrealized_conversion_cast %12140 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%12141) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %12142 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12143 = "mini.unwrap"(%12133) : (!mini.ptr<i32>) -> i32
    %12144 = "mini.unwrap"(%12142) : (!mini.ptr<i32>) -> i32
    %12145 = "mini.arithmetic"(%12143, %12144) {"op" = "SUB"} : (i32, i32) -> i32
    %12146 = "mini.wrap"(%12145) : (i32) -> !mini.ptr<i32>
    %12147 = "mini.unwrap"(%12146) : (!mini.ptr<i32>) -> i32
    %12148 = "mini.call"(%12147) {"func_name" = "factorial", "ret_type" = i32} : (i32) -> !mini.ptr<i32>
    %12149 = "mini.unwrap"(%12133) : (!mini.ptr<i32>) -> i32
    %12150 = "mini.unwrap"(%12148) : (!mini.ptr<i32>) -> i32
    %12151 = "mini.arithmetic"(%12149, %12150) {"op" = "MUL"} : (i32, i32) -> i32
    %12152 = "mini.wrap"(%12151) : (i32) -> !mini.ptr<i32>
    %12153 = builtin.unrealized_conversion_cast %12152 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%12153) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "factorial", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.size_in_bytes_def"() {"meth_name" = "_size_Bard", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb1458(%12154 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12155 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12156 : !llvm.ptr):
    %12157 = "mini.wrap"(%12154) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %12158 = "mini.to_fat_ptr"(%12157) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard", "invariant"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
  }) {"func_name" = "Bard_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1459(%12159 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12160 : !llvm.ptr):
    %12161 = "mini.invariant"(%12160) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12162 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1460] : () -> ()
  ^bb1460:
    %12163 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%12163, %12162) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1461] : () -> ()
  ^bb1461:
    %12164 = "llvm.extractvalue"(%12159) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12165 = "llvm.load"(%12162) : (!llvm.ptr) -> i32
    %12166 = "llvm.getelementptr"(%12164, %12165) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12167 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %12168 = "llvm.getelementptr"(%12166, %12167) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12168) : (!llvm.ptr) -> ()
  }) {"func_name" = "Bard_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1462(%12169 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12170 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12171 : !llvm.ptr, %12172 : !llvm.struct<(!llvm.ptr, i160)>, %12173 : !llvm.struct<(!llvm.ptr, i160)>):
    %12174 = "mini.wrap"(%12169) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %12175 = "mini.to_fat_ptr"(%12174) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard", "invariant"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %12176 = "mini.wrap"(%12172) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %12177 = "mini.to_fat_ptr"(%12176) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Animal", "invariant"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !mini.fatptr<"Animal">
    %12178 = "mini.wrap"(%12173) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>
    %12179 = "mini.to_fat_ptr"(%12178) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Beaver", "invariant"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>) -> !mini.fatptr<"Beaver">
    %12180 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12181 = "mini.create_buffer"(%12180) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %12182 = builtin.unrealized_conversion_cast %12181 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12183 = "mini.refer"(%12182) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12184 = "mini.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "animal!"} : () -> !llvm.ptr
    %12185 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%12183, %12185, %12184) {"typ" = !llvm.array<7 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %12186 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12187 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12188 = "mini.unwrap"(%12183) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12189 = "mini.unwrap"(%12186) : (!mini.ptr<i32>) -> i32
    %12190 = "mini.unwrap"(%12187) : (!mini.ptr<i32>) -> i32
    %12191 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %12192 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12193 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12194 = builtin.unrealized_conversion_cast %12183 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12195 = "mini.unwrap"(%12194) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12196 = builtin.unrealized_conversion_cast %12192 : !mini.ptr<i32> to !mini.ptr<i32>
    %12197 = "mini.unwrap"(%12196) : (!mini.ptr<i32>) -> i32
    %12198 = builtin.unrealized_conversion_cast %12193 : !mini.ptr<i32> to !mini.ptr<i32>
    %12199 = "mini.unwrap"(%12198) : (!mini.ptr<i32>) -> i32
    %12200 = "mini.unwrap"(%12191) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12201 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %12202 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12203 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12204 = "mini.parameterizations_array"(%12201, %12202, %12203) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12204, %12200, %12195, %12197, %12199) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %12205 = builtin.unrealized_conversion_cast %12191 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12206 = "mini.unwrap"(%12205) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12207 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %12208 = "mini.parameterizations_array"(%12207) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12208, %12206) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12209 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12210 = "mini.create_buffer"(%12209) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %12211 = builtin.unrealized_conversion_cast %12210 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12212 = "mini.refer"(%12211) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12213 = "mini.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "beaver!"} : () -> !llvm.ptr
    %12214 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%12212, %12214, %12213) {"typ" = !llvm.array<7 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %12215 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12216 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12217 = "mini.unwrap"(%12212) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12218 = "mini.unwrap"(%12215) : (!mini.ptr<i32>) -> i32
    %12219 = "mini.unwrap"(%12216) : (!mini.ptr<i32>) -> i32
    %12220 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %12221 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12222 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12223 = builtin.unrealized_conversion_cast %12212 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12224 = "mini.unwrap"(%12223) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12225 = builtin.unrealized_conversion_cast %12221 : !mini.ptr<i32> to !mini.ptr<i32>
    %12226 = "mini.unwrap"(%12225) : (!mini.ptr<i32>) -> i32
    %12227 = builtin.unrealized_conversion_cast %12222 : !mini.ptr<i32> to !mini.ptr<i32>
    %12228 = "mini.unwrap"(%12227) : (!mini.ptr<i32>) -> i32
    %12229 = "mini.unwrap"(%12220) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12230 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %12231 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12232 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12233 = "mini.parameterizations_array"(%12230, %12231, %12232) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12233, %12229, %12224, %12226, %12228) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %12234 = builtin.unrealized_conversion_cast %12220 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12235 = "mini.unwrap"(%12234) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12236 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %12237 = "mini.parameterizations_array"(%12236) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12237, %12235) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_aAnimal_bBeaver", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1463(%12238 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12239 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12240 : !llvm.ptr, %12241 : !llvm.struct<(!llvm.ptr, i160)>, %12242 : !llvm.struct<(!llvm.ptr, i160)>):
    %12243 = "mini.wrap"(%12238) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %12244 = "mini.to_fat_ptr"(%12243) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard", "invariant"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %12245 = "mini.wrap"(%12241) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %12246 = "mini.narrow"(%12245) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %12247 = "mini.wrap"(%12242) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>
    %12248 = "mini.narrow"(%12247) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>) -> !mini.ptr<f64>
    %12249 = "mini.unionize"(%12246) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12250 = "mini.unwrap"(%12249) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12251 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12252 = "mini.parameterizations_array"(%12251) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12252, %12250) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12253 = "mini.unionize"(%12248) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12254 = "mini.unwrap"(%12253) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12255 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %12256 = "mini.parameterizations_array"(%12255) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12256, %12254) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_aPtri32_bPtrf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1464(%12257 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12258 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12259 : !llvm.ptr, %12260 : !llvm.struct<(!llvm.ptr, i160)>, %12261 : !llvm.struct<(!llvm.ptr, i160)>):
    %12262 = "mini.wrap"(%12257) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %12263 = "mini.to_fat_ptr"(%12262) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard", "invariant"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %12264 = "mini.wrap"(%12260) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %12265 = "mini.narrow"(%12264) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !mini.ptr<f64>
    %12266 = "mini.wrap"(%12261) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>
    %12267 = "mini.narrow"(%12266) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>) -> !mini.ptr<f64>
    %12268 = "mini.unionize"(%12265) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12269 = "mini.unwrap"(%12268) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12270 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %12271 = "mini.parameterizations_array"(%12270) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12271, %12269) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12272 = "mini.unionize"(%12267) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12273 = "mini.unwrap"(%12272) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12274 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %12275 = "mini.parameterizations_array"(%12274) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12275, %12273) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_aPtrf64_bPtrf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1465(%12276 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12277 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12278 : !llvm.ptr, %12279 : !llvm.struct<(!llvm.ptr, i160)>, %12280 : !llvm.struct<(!llvm.ptr, i160)>):
    %12281 = "mini.wrap"(%12276) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %12282 = "mini.to_fat_ptr"(%12281) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard", "invariant"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %12283 = "mini.wrap"(%12279) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %12284 = "mini.narrow"(%12283) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %12285 = "mini.wrap"(%12280) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>
    %12286 = "mini.narrow"(%12285) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %12287 = "mini.unionize"(%12284) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12288 = "mini.unwrap"(%12287) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12289 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12290 = "mini.parameterizations_array"(%12289) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12290, %12288) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12291 = "mini.unionize"(%12286) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12292 = "mini.unwrap"(%12291) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12293 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12294 = "mini.parameterizations_array"(%12293) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12294, %12292) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_aPtri32_bPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1466(%12295 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12296 : !llvm.ptr):
    %12297 = "mini.invariant"(%12296) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12298 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1467] : () -> ()
  ^bb1468:
    %12299 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%12299, %12298) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1469] : () -> ()
  ^bb1470:
    %12300 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%12300, %12298) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1469] : () -> ()
  ^bb1471:
    %12301 = "llvm.getelementptr"(%12296) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %12302 = "llvm.load"(%12301) : (!llvm.ptr) -> !llvm.ptr
    %12303 = "llvm.getelementptr"(%12302) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12304 = "llvm.getelementptr"(%12302) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12305 = "llvm.getelementptr"(%12302) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12306 = "llvm.getelementptr"(%12302) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12307 = "llvm.load"(%12303) : (!llvm.ptr) -> i64
    %12308 = "llvm.load"(%12304) : (!llvm.ptr) -> i64
    %12309 = "llvm.load"(%12305) : (!llvm.ptr) -> !llvm.ptr
    %12310 = "llvm.load"(%12306) : (!llvm.ptr) -> !llvm.ptr
    %12311 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %12312 = "llvm.ptrtoint"(%12311) : (!llvm.ptr) -> i64
    %12313 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %12314 = "mini.subtype"(%12309, %12308, %12307, %12313, %12312, %12310) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12314) [^bb1468, ^bb1472] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1472:
    %12315 = "llvm.getelementptr"(%12296) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %12316 = "llvm.load"(%12315) : (!llvm.ptr) -> !llvm.ptr
    %12317 = "llvm.getelementptr"(%12316) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12318 = "llvm.getelementptr"(%12316) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12319 = "llvm.getelementptr"(%12316) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12320 = "llvm.getelementptr"(%12316) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12321 = "llvm.load"(%12317) : (!llvm.ptr) -> i64
    %12322 = "llvm.load"(%12318) : (!llvm.ptr) -> i64
    %12323 = "llvm.load"(%12319) : (!llvm.ptr) -> !llvm.ptr
    %12324 = "llvm.load"(%12320) : (!llvm.ptr) -> !llvm.ptr
    %12325 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %12326 = "llvm.ptrtoint"(%12325) : (!llvm.ptr) -> i64
    %12327 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %12328 = "mini.subtype"(%12323, %12322, %12321, %12327, %12326, %12324) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12328) [^bb1470, ^bb1470] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1473:
    %12329 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%12329, %12298) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1469] : () -> ()
  ^bb1474:
    %12330 = "llvm.getelementptr"(%12296) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %12331 = "llvm.load"(%12330) : (!llvm.ptr) -> !llvm.ptr
    %12332 = "llvm.getelementptr"(%12331) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12333 = "llvm.getelementptr"(%12331) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12334 = "llvm.getelementptr"(%12331) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12335 = "llvm.getelementptr"(%12331) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12336 = "llvm.load"(%12332) : (!llvm.ptr) -> i64
    %12337 = "llvm.load"(%12333) : (!llvm.ptr) -> i64
    %12338 = "llvm.load"(%12334) : (!llvm.ptr) -> !llvm.ptr
    %12339 = "llvm.load"(%12335) : (!llvm.ptr) -> !llvm.ptr
    %12340 = "mini.addr_of"() {"global_name" = @Beaver} : () -> !llvm.ptr
    %12341 = "llvm.ptrtoint"(%12340) : (!llvm.ptr) -> i64
    %12342 = "llvm.mlir.constant"() <{"value" = 12321971123808713154 : i64}> : () -> i64
    %12343 = "mini.subtype"(%12338, %12337, %12336, %12342, %12341, %12339) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12343) [^bb1473, ^bb1473] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1475:
    %12344 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%12344, %12298) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1469] : () -> ()
  ^bb1476:
    %12345 = "llvm.getelementptr"(%12296) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %12346 = "llvm.load"(%12345) : (!llvm.ptr) -> !llvm.ptr
    %12347 = "llvm.getelementptr"(%12346) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12348 = "llvm.getelementptr"(%12346) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12349 = "llvm.getelementptr"(%12346) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12350 = "llvm.getelementptr"(%12346) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12351 = "llvm.load"(%12347) : (!llvm.ptr) -> i64
    %12352 = "llvm.load"(%12348) : (!llvm.ptr) -> i64
    %12353 = "llvm.load"(%12349) : (!llvm.ptr) -> !llvm.ptr
    %12354 = "llvm.load"(%12350) : (!llvm.ptr) -> !llvm.ptr
    %12355 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %12356 = "llvm.ptrtoint"(%12355) : (!llvm.ptr) -> i64
    %12357 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %12358 = "mini.subtype"(%12353, %12352, %12351, %12357, %12356, %12354) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12358) [^bb1475, ^bb1475] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1467:
    %12359 = "llvm.getelementptr"(%12296) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %12360 = "llvm.load"(%12359) : (!llvm.ptr) -> !llvm.ptr
    %12361 = "llvm.getelementptr"(%12360) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12362 = "llvm.getelementptr"(%12360) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12363 = "llvm.getelementptr"(%12360) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12364 = "llvm.getelementptr"(%12360) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12365 = "llvm.load"(%12361) : (!llvm.ptr) -> i64
    %12366 = "llvm.load"(%12362) : (!llvm.ptr) -> i64
    %12367 = "llvm.load"(%12363) : (!llvm.ptr) -> !llvm.ptr
    %12368 = "llvm.load"(%12364) : (!llvm.ptr) -> !llvm.ptr
    %12369 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %12370 = "llvm.ptrtoint"(%12369) : (!llvm.ptr) -> i64
    %12371 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %12372 = "mini.subtype"(%12367, %12366, %12365, %12371, %12370, %12368) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12372) [^bb1471, ^bb1477] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1477:
    %12373 = "llvm.getelementptr"(%12296) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %12374 = "llvm.load"(%12373) : (!llvm.ptr) -> !llvm.ptr
    %12375 = "llvm.getelementptr"(%12374) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12376 = "llvm.getelementptr"(%12374) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12377 = "llvm.getelementptr"(%12374) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12378 = "llvm.getelementptr"(%12374) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12379 = "llvm.load"(%12375) : (!llvm.ptr) -> i64
    %12380 = "llvm.load"(%12376) : (!llvm.ptr) -> i64
    %12381 = "llvm.load"(%12377) : (!llvm.ptr) -> !llvm.ptr
    %12382 = "llvm.load"(%12378) : (!llvm.ptr) -> !llvm.ptr
    %12383 = "mini.addr_of"() {"global_name" = @Animal} : () -> !llvm.ptr
    %12384 = "llvm.ptrtoint"(%12383) : (!llvm.ptr) -> i64
    %12385 = "llvm.mlir.constant"() <{"value" = 1075018126824711487 : i64}> : () -> i64
    %12386 = "mini.subtype"(%12381, %12380, %12379, %12385, %12384, %12382) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12386) [^bb1474, ^bb1478] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1478:
    %12387 = "llvm.getelementptr"(%12296) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr)>}> : (!llvm.ptr) -> !llvm.ptr
    %12388 = "llvm.load"(%12387) : (!llvm.ptr) -> !llvm.ptr
    %12389 = "llvm.getelementptr"(%12388) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12390 = "llvm.getelementptr"(%12388) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12391 = "llvm.getelementptr"(%12388) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12392 = "llvm.getelementptr"(%12388) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12393 = "llvm.load"(%12389) : (!llvm.ptr) -> i64
    %12394 = "llvm.load"(%12390) : (!llvm.ptr) -> i64
    %12395 = "llvm.load"(%12391) : (!llvm.ptr) -> !llvm.ptr
    %12396 = "llvm.load"(%12392) : (!llvm.ptr) -> !llvm.ptr
    %12397 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %12398 = "llvm.ptrtoint"(%12397) : (!llvm.ptr) -> i64
    %12399 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %12400 = "mini.subtype"(%12395, %12394, %12393, %12399, %12398, %12396) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12400) [^bb1476, ^bb1476] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1469:
    %12401 = "llvm.extractvalue"(%12295) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12402 = "llvm.load"(%12298) : (!llvm.ptr) -> i32
    %12403 = "llvm.getelementptr"(%12401, %12402) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12404 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    %12405 = "llvm.getelementptr"(%12403, %12404) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12405) : (!llvm.ptr) -> ()
  }) {"func_name" = "Bard_B_take_aAnimal_bBeaver_take_aPtri32_bPtrf64_take_aPtrf64_bPtrf64_take_aPtri32_bPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
    %12406 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "Exception", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Exception">
    %12407 = "mini.unwrap"(%12406) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12408 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%12408, %12407) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %12409 = "mini.literal"() {"value" = 1205 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12410 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12411 = "mini.create_buffer"(%12410) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %12412 = builtin.unrealized_conversion_cast %12411 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12413 = "mini.refer"(%12412) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12414 = "mini.literal"() {"typ" = !llvm.array<10 x i8>, "value" = "tests.mini"} : () -> !llvm.ptr
    %12415 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%12413, %12415, %12414) {"typ" = !llvm.array<10 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %12416 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12417 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12418 = "mini.unwrap"(%12413) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12419 = "mini.unwrap"(%12416) : (!mini.ptr<i32>) -> i32
    %12420 = "mini.unwrap"(%12417) : (!mini.ptr<i32>) -> i32
    %12421 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %12422 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12423 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12424 = builtin.unrealized_conversion_cast %12413 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12425 = "mini.unwrap"(%12424) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12426 = builtin.unrealized_conversion_cast %12422 : !mini.ptr<i32> to !mini.ptr<i32>
    %12427 = "mini.unwrap"(%12426) : (!mini.ptr<i32>) -> i32
    %12428 = builtin.unrealized_conversion_cast %12423 : !mini.ptr<i32> to !mini.ptr<i32>
    %12429 = "mini.unwrap"(%12428) : (!mini.ptr<i32>) -> i32
    %12430 = "mini.unwrap"(%12421) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12431 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %12432 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12433 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12434 = "mini.parameterizations_array"(%12431, %12432, %12433) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12434, %12430, %12425, %12427, %12429) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %12435 = builtin.unrealized_conversion_cast %12409 : !mini.ptr<i32> to !mini.ptr<i32>
    %12436 = "mini.unwrap"(%12435) : (!mini.ptr<i32>) -> i32
    %12437 = "mini.to_fat_ptr"(%12421) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %12438 = "mini.unwrap"(%12437) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12439 = "mini.unwrap"(%12406) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12440 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12441 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %12442 = "mini.parameterizations_array"(%12440, %12441) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12442, %12439, %12436, %12438) {"offset" = 5 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %12443 = builtin.unrealized_conversion_cast %12406 : !mini.fatptr<"Exception"> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %12444 = "mini.unwrap"(%12443) : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12445 = "mini.coro_yield"(%12444) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12446 = "mini.wrap"(%12445) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
  }) {"func_name" = "throw", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
    %12447 = "mini.literal"() {"value" = 88 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12448 = "mini.unionize"(%12447) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12449 = "mini.unwrap"(%12448) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12450 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12451 = "mini.parameterizations_array"(%12450) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12451, %12449) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.coro_yield"() : () -> ()
    %12452 = "mini.literal"() {"value" = 90 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12453 = "mini.unionize"(%12452) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12454 = "mini.unwrap"(%12453) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12455 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12456 = "mini.parameterizations_array"(%12455) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12456, %12454) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "print88", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_fjtnnnlntu_passer", "arg_types" = [], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_fjtnnnlntu_buffer_filler", "arg_types" = [], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.func"() ({
    %12457 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12458 = "mini.create_buffer"(%12457) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %12459 = builtin.unrealized_conversion_cast %12458 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12460 = "mini.refer"(%12459) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12461 = "mini.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "one"} : () -> !llvm.ptr
    %12462 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%12460, %12462, %12461) {"typ" = !llvm.array<3 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %12463 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12464 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12465 = "mini.unwrap"(%12460) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12466 = "mini.unwrap"(%12463) : (!mini.ptr<i32>) -> i32
    %12467 = "mini.unwrap"(%12464) : (!mini.ptr<i32>) -> i32
    %12468 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %12469 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12470 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12471 = builtin.unrealized_conversion_cast %12460 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12472 = "mini.unwrap"(%12471) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12473 = builtin.unrealized_conversion_cast %12469 : !mini.ptr<i32> to !mini.ptr<i32>
    %12474 = "mini.unwrap"(%12473) : (!mini.ptr<i32>) -> i32
    %12475 = builtin.unrealized_conversion_cast %12470 : !mini.ptr<i32> to !mini.ptr<i32>
    %12476 = "mini.unwrap"(%12475) : (!mini.ptr<i32>) -> i32
    %12477 = "mini.unwrap"(%12468) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12478 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %12479 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12480 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12481 = "mini.parameterizations_array"(%12478, %12479, %12480) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12481, %12477, %12472, %12474, %12476) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %12482 = builtin.unrealized_conversion_cast %12468 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12483 = "mini.unwrap"(%12482) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12484 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %12485 = "mini.parameterizations_array"(%12484) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12485, %12483) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
    %12486 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12487 = "mini.create_buffer"(%12486) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %12488 = builtin.unrealized_conversion_cast %12487 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12489 = "mini.refer"(%12488) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12490 = "mini.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "two"} : () -> !llvm.ptr
    %12491 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%12489, %12491, %12490) {"typ" = !llvm.array<3 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %12492 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12493 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12494 = "mini.unwrap"(%12489) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12495 = "mini.unwrap"(%12492) : (!mini.ptr<i32>) -> i32
    %12496 = "mini.unwrap"(%12493) : (!mini.ptr<i32>) -> i32
    %12497 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %12498 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12499 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12500 = builtin.unrealized_conversion_cast %12489 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12501 = "mini.unwrap"(%12500) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12502 = builtin.unrealized_conversion_cast %12498 : !mini.ptr<i32> to !mini.ptr<i32>
    %12503 = "mini.unwrap"(%12502) : (!mini.ptr<i32>) -> i32
    %12504 = builtin.unrealized_conversion_cast %12499 : !mini.ptr<i32> to !mini.ptr<i32>
    %12505 = "mini.unwrap"(%12504) : (!mini.ptr<i32>) -> i32
    %12506 = "mini.unwrap"(%12497) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12507 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %12508 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12509 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12510 = "mini.parameterizations_array"(%12507, %12508, %12509) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12510, %12506, %12501, %12503, %12505) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %12511 = builtin.unrealized_conversion_cast %12497 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12512 = "mini.unwrap"(%12511) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12513 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %12514 = "mini.parameterizations_array"(%12513) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12514, %12512) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "grabo", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1479(%12515 : i32, %12516 : i32):
    %12517 = "mini.wrap"(%12515) : (i32) -> !mini.ptr<i32>
    %12518 = "mini.wrap"(%12516) : (i32) -> !mini.ptr<i32>
    %12519 = "mini.unwrap"(%12517) : (!mini.ptr<i32>) -> i32
    %12520 = "mini.unwrap"(%12518) : (!mini.ptr<i32>) -> i32
    %12521 = "mini.arithmetic"(%12519, %12520) {"op" = "ADD"} : (i32, i32) -> i32
    %12522 = "mini.wrap"(%12521) : (i32) -> !mini.ptr<i32>
    %12523 = builtin.unrealized_conversion_cast %12522 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%12523) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_dkhwrqqsxh", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1480(%12524 : i32):
    %12525 = "mini.wrap"(%12524) : (i32) -> !mini.ptr<i32>
    %12526 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12527 = "mini.unwrap"(%12525) : (!mini.ptr<i32>) -> i32
    %12528 = "mini.unwrap"(%12526) : (!mini.ptr<i32>) -> i32
    %12529 = "mini.arithmetic"(%12527, %12528) {"op" = "MUL"} : (i32, i32) -> i32
    %12530 = "mini.wrap"(%12529) : (i32) -> !mini.ptr<i32>
    %12531 = builtin.unrealized_conversion_cast %12530 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%12531) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_yoimaxtxbn", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
    %12532 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12533 = builtin.unrealized_conversion_cast %12532 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%12533) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_cfqtdswlvs", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1481(%12534 : i32):
    %12535 = "mini.wrap"(%12534) : (i32) -> !mini.ptr<i32>
    %12536 = "mini.unionize"(%12535) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12537 = "mini.unwrap"(%12536) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12538 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12539 = "mini.parameterizations_array"(%12538) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12539, %12537) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_gtkwgeihcc", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1482(%12540 : i32):
    %12541 = "mini.wrap"(%12540) : (i32) -> !mini.ptr<i32>
    %12542 = builtin.unrealized_conversion_cast %12541 : !mini.ptr<i32> to !mini.ptr<i32>
    %12543 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12544 = "mini.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %12545 = builtin.unrealized_conversion_cast %12544 : !mini.ptr<i8> to !mini.ptr<i8>
    %12546 = "mini.literal"() {"value" = 1 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %12547 = builtin.unrealized_conversion_cast %12546 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.while"() ({
      %12548 = "mini.unwrap"(%12543) : (!mini.ptr<i32>) -> i32
      %12549 = "mini.unwrap"(%12542) : (!mini.ptr<i32>) -> i32
      %12550 = "mini.comparison"(%12548, %12549) {"op" = "LT"} : (i32, i32) -> i1
      %12551 = "mini.wrap"(%12550) : (i1) -> !mini.ptr<i32>
      %12552 = "mini.unwrap"(%12551) : (!mini.ptr<i32>) -> i1
    }, {
      %12553 = "mini.unwrap"(%12545) : (!mini.ptr<i8>) -> i8
      %12554 = "mini.unwrap"(%12547) : (!mini.ptr<i8>) -> i8
      %12555 = "mini.arithmetic"(%12553, %12554) {"op" = "ADD"} : (i8, i8) -> i8
      %12556 = "mini.wrap"(%12555) : (i8) -> !mini.ptr<i8>
      "mini.castassign"(%12545, %12556) ({
        %12557 = builtin.unrealized_conversion_cast %12556 : !mini.ptr<i8> to !mini.ptr<i8>
      }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
      %12558 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %12559 = "mini.unwrap"(%12543) : (!mini.ptr<i32>) -> i32
      %12560 = "mini.unwrap"(%12558) : (!mini.ptr<i32>) -> i32
      %12561 = "mini.arithmetic"(%12559, %12560) {"op" = "ADD"} : (i32, i32) -> i32
      %12562 = "mini.wrap"(%12561) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%12543, %12562) ({
        %12563 = builtin.unrealized_conversion_cast %12562 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %12564 = builtin.unrealized_conversion_cast %12545 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.return"(%12564) : (!mini.ptr<i8>) -> ()
  }) {"func_name" = "i32toi8", "result_type" = i8, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1483(%12565 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %12566 = "mini.wrap"(%12565) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %12567 = "mini.to_fat_ptr"(%12566) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %12568 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12569 = "mini.create_buffer"(%12568) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %12570 = builtin.unrealized_conversion_cast %12569 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12571 = "mini.refer"(%12570) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12572 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %12573 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%12571, %12573, %12572) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %12574 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12575 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12576 = "mini.unwrap"(%12571) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12577 = "mini.unwrap"(%12574) : (!mini.ptr<i32>) -> i32
    %12578 = "mini.unwrap"(%12575) : (!mini.ptr<i32>) -> i32
    %12579 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %12580 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12581 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12582 = builtin.unrealized_conversion_cast %12571 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12583 = "mini.unwrap"(%12582) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12584 = builtin.unrealized_conversion_cast %12580 : !mini.ptr<i32> to !mini.ptr<i32>
    %12585 = "mini.unwrap"(%12584) : (!mini.ptr<i32>) -> i32
    %12586 = builtin.unrealized_conversion_cast %12581 : !mini.ptr<i32> to !mini.ptr<i32>
    %12587 = "mini.unwrap"(%12586) : (!mini.ptr<i32>) -> i32
    %12588 = "mini.unwrap"(%12579) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12589 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %12590 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12591 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12592 = "mini.parameterizations_array"(%12589, %12590, %12591) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12592, %12588, %12583, %12585, %12587) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %12593 = "mini.to_fat_ptr"(%12579) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %12594 = "mini.refer"(%12593) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %12595 = "mini.unwrap"(%12567) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12596 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %12597 = "mini.method_call"(%12596, %12595) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %12598 = builtin.unrealized_conversion_cast %12597 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12599 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12600 = "mini.create_buffer"(%12599) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %12601 = builtin.unrealized_conversion_cast %12600 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12602 = "mini.refer"(%12601) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12603 = "mini.literal"() {"typ" = !llvm.array<1 x i8>, "value" = "r"} : () -> !llvm.ptr
    %12604 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%12602, %12604, %12603) {"typ" = !llvm.array<1 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %12605 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12606 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12607 = "mini.unwrap"(%12602) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12608 = "mini.unwrap"(%12605) : (!mini.ptr<i32>) -> i32
    %12609 = "mini.unwrap"(%12606) : (!mini.ptr<i32>) -> i32
    %12610 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %12611 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12612 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12613 = builtin.unrealized_conversion_cast %12602 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12614 = "mini.unwrap"(%12613) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12615 = builtin.unrealized_conversion_cast %12611 : !mini.ptr<i32> to !mini.ptr<i32>
    %12616 = "mini.unwrap"(%12615) : (!mini.ptr<i32>) -> i32
    %12617 = builtin.unrealized_conversion_cast %12612 : !mini.ptr<i32> to !mini.ptr<i32>
    %12618 = "mini.unwrap"(%12617) : (!mini.ptr<i32>) -> i32
    %12619 = "mini.unwrap"(%12610) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12620 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %12621 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12622 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12623 = "mini.parameterizations_array"(%12620, %12621, %12622) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12623, %12619, %12614, %12616, %12618) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %12624 = "mini.unwrap"(%12610) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12625 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %12626 = "mini.method_call"(%12625, %12624) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %12627 = builtin.unrealized_conversion_cast %12626 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12628 = "mini.unwrap"(%12598) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12629 = "mini.unwrap"(%12627) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12630 = "mini.call"(%12628, %12629) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i32>>
    %12631 = builtin.unrealized_conversion_cast %12630 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %12632 = "mini.refer"(%12631) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    "mini.while"() ({
      %12633 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
      %12634 = "mini.unwrap"(%12633) : (!mini.ptr<i1>) -> i1
    }, {
      %12635 = "mini.unwrap"(%12632) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
      %12636 = "mini.call"(%12635) {"func_name" = "fgetc", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
      %12637 = "mini.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %12638 = "mini.unwrap"(%12636) : (!mini.ptr<i32>) -> i32
      %12639 = "mini.unwrap"(%12637) : (!mini.ptr<i32>) -> i32
      %12640 = "mini.comparison"(%12638, %12639) {"op" = "EQ"} : (i32, i32) -> i1
      %12641 = "mini.wrap"(%12640) : (i1) -> !mini.ptr<i32>
      %12642 = "mini.unwrap"(%12641) : (!mini.ptr<i32>) -> i1
      "mini.if"(%12642) ({
        "mini.break"() [^bb1484] : () -> ()
      }) : (i1) -> ()
      %12643 = "mini.unwrap"(%12636) : (!mini.ptr<i32>) -> i32
      %12644 = "mini.call"(%12643) {"func_name" = "i32toi8", "ret_type" = i8} : (i32) -> !mini.ptr<i8>
      %12645 = builtin.unrealized_conversion_cast %12644 : !mini.ptr<i8> to !mini.ptr<i8>
      %12646 = "mini.unwrap"(%12645) : (!mini.ptr<i8>) -> i8
      %12647 = "mini.unwrap"(%12594) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %12648 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["Ptri8"]} : () -> !llvm.ptr
      %12649 = "mini.parameterizations_array"(%12648) : (!llvm.ptr) -> !llvm.ptr
      %12650 = "mini.method_call"(%12649, %12647, %12646) {"offset" = 8 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i8) -> !mini.fatptr<"String">
      %12651 = "mini.to_fat_ptr"(%12650) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    }) : () -> ()
    %12652 = "mini.unwrap"(%12632) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %12653 = "mini.call"(%12652) {"func_name" = "fclose", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %12654 = "mini.to_fat_ptr"(%12594) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%12654) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "read_file", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1485(%12655 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12656 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %12657 = "mini.wrap"(%12655) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %12658 = "mini.to_fat_ptr"(%12657) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %12659 = "mini.wrap"(%12656) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %12660 = "mini.to_fat_ptr"(%12659) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %12661 = "mini.unwrap"(%12658) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12662 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %12663 = "mini.method_call"(%12662, %12661) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %12664 = builtin.unrealized_conversion_cast %12663 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12665 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12666 = "mini.create_buffer"(%12665) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %12667 = builtin.unrealized_conversion_cast %12666 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12668 = "mini.refer"(%12667) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12669 = "mini.literal"() {"typ" = !llvm.array<1 x i8>, "value" = "w"} : () -> !llvm.ptr
    %12670 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%12668, %12670, %12669) {"typ" = !llvm.array<1 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %12671 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12672 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12673 = "mini.unwrap"(%12668) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12674 = "mini.unwrap"(%12671) : (!mini.ptr<i32>) -> i32
    %12675 = "mini.unwrap"(%12672) : (!mini.ptr<i32>) -> i32
    %12676 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %12677 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12678 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12679 = builtin.unrealized_conversion_cast %12668 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12680 = "mini.unwrap"(%12679) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12681 = builtin.unrealized_conversion_cast %12677 : !mini.ptr<i32> to !mini.ptr<i32>
    %12682 = "mini.unwrap"(%12681) : (!mini.ptr<i32>) -> i32
    %12683 = builtin.unrealized_conversion_cast %12678 : !mini.ptr<i32> to !mini.ptr<i32>
    %12684 = "mini.unwrap"(%12683) : (!mini.ptr<i32>) -> i32
    %12685 = "mini.unwrap"(%12676) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12686 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %12687 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12688 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12689 = "mini.parameterizations_array"(%12686, %12687, %12688) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12689, %12685, %12680, %12682, %12684) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %12690 = "mini.unwrap"(%12676) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12691 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %12692 = "mini.method_call"(%12691, %12690) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %12693 = builtin.unrealized_conversion_cast %12692 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12694 = "mini.unwrap"(%12664) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12695 = "mini.unwrap"(%12693) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12696 = "mini.call"(%12694, %12695) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i32>>
    %12697 = builtin.unrealized_conversion_cast %12696 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %12698 = "mini.refer"(%12697) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %12699 = "mini.unwrap"(%12660) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12700 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %12701 = "mini.method_call"(%12700, %12699) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %12702 = builtin.unrealized_conversion_cast %12701 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12703 = "mini.unwrap"(%12698) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %12704 = "mini.unwrap"(%12702) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12705 = "mini.call"(%12703, %12704) {"func_name" = "fprintf", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %12706 = "mini.unwrap"(%12698) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %12707 = "mini.call"(%12706) {"func_name" = "fclose", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
  }) {"func_name" = "write_file", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1486(%12708 : i32):
    %12709 = "mini.wrap"(%12708) : (i32) -> !mini.ptr<i32>
    %12710 = "mini.unwrap"(%12709) : (!mini.ptr<i32>) -> i32
    %12711 = "mini.unwrap"(%12709) : (!mini.ptr<i32>) -> i32
    %12712 = "mini.arithmetic"(%12710, %12711) {"op" = "MUL"} : (i32, i32) -> i32
    %12713 = "mini.wrap"(%12712) : (i32) -> !mini.ptr<i32>
    %12714 = "mini.unionize"(%12713) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12715 = "mini.unwrap"(%12714) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12716 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12717 = "mini.parameterizations_array"(%12716) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12717, %12715) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_qlcqxadlob", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1487(%12718 : i32, %12719 : i32):
    %12720 = "mini.wrap"(%12718) : (i32) -> !mini.ptr<i32>
    %12721 = "mini.wrap"(%12719) : (i32) -> !mini.ptr<i32>
    %12722 = "mini.unwrap"(%12720) : (!mini.ptr<i32>) -> i32
    %12723 = "mini.unwrap"(%12721) : (!mini.ptr<i32>) -> i32
    %12724 = "mini.arithmetic"(%12722, %12723) {"op" = "ADD"} : (i32, i32) -> i32
    %12725 = "mini.wrap"(%12724) : (i32) -> !mini.ptr<i32>
    %12726 = builtin.unrealized_conversion_cast %12725 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%12726) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_kmrwghhhmp", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1488(%12727 : i32, %12728 : i32):
    %12729 = "mini.wrap"(%12727) : (i32) -> !mini.ptr<i32>
    %12730 = "mini.wrap"(%12728) : (i32) -> !mini.ptr<i32>
    %12731 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12732 = "mini.addr_of"() {"global_name" = @_functionliteral_kmrwghhhmp} : () -> !llvm.ptr
    %12733 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%12732, %12733) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    "mini.while"() ({
      %12734 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
      %12735 = "mini.unwrap"(%12734) : (!mini.ptr<i1>) -> i1
    }, {
      %12736 = builtin.unrealized_conversion_cast %12729 : !mini.ptr<i32> to !mini.ptr<i32>
      %12737 = "mini.unwrap"(%12736) : (!mini.ptr<i32>) -> i32
      %12738 = builtin.unrealized_conversion_cast %12730 : !mini.ptr<i32> to !mini.ptr<i32>
      %12739 = "mini.unwrap"(%12738) : (!mini.ptr<i32>) -> i32
      %12740 = "mini.unwrap"(%12733) : (!llvm.ptr) -> !llvm.ptr
      %12741 = "mini.fptr_call"(%12740, %12737, %12739) {"ret_type" = i32} : (!llvm.ptr, i32, i32) -> !mini.ptr<i32>
      %12742 = "mini.unwrap"(%12741) : (!mini.ptr<i32>) -> i32
      %12743 = "mini.unwrap"(%12731) : (!mini.ptr<i32>) -> i32
      %12744 = "mini.arithmetic"(%12742, %12743) {"op" = "ADD"} : (i32, i32) -> i32
      %12745 = "mini.wrap"(%12744) : (i32) -> !mini.ptr<i32>
      %12746 = "mini.unionize"(%12745) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %12747 = "mini.unwrap"(%12746) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i32)>
      %12748 = "mini.coro_yield"(%12747) : (!llvm.struct<(!llvm.ptr, i32)>) -> !llvm.struct<(!llvm.ptr, i32)>
      %12749 = "mini.wrap"(%12748) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %12750 = "mini.checkflag"(%12749) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %12751 = "mini.unwrap"(%12750) : (i1) -> i1
      %12752 = builtin.unrealized_conversion_cast %12749 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%12751) ({
        %12753 = "mini.narrow"(%12752) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %12754 = "mini.unwrap"(%12731) : (!mini.ptr<i32>) -> i32
        %12755 = "mini.unwrap"(%12753) : (!mini.ptr<i32>) -> i32
        %12756 = "mini.arithmetic"(%12754, %12755) {"op" = "ADD"} : (i32, i32) -> i32
        %12757 = "mini.wrap"(%12756) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%12731, %12757) ({
          %12758 = builtin.unrealized_conversion_cast %12757 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        "mini.castassign"(%12752, %12753) ({
          %12759 = "mini.unionize"(%12753) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
    }) : () -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_lqicruiyxk", "result_type" = !llvm.void, "yield_type" = !mini.ptr<i32>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_gmfsuqovfy_passer", "arg_types" = [i32, i32], "yield_type" = !llvm.struct<(!llvm.ptr, i32)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_gmfsuqovfy_buffer_filler", "arg_types" = [i32, i32], "yield_type" = !llvm.struct<(!llvm.ptr, i32)>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_zkkgdtskwo_passer", "arg_types" = [], "ret_type" = i32, "ret_flag" = "i32_typ", "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_zkkgdtskwo_buffer_filler", "arg_types" = [], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_mkcqinrtzp_passer", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_mkcqinrtzp_buffer_filler", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.func"() ({
  ^bb1489(%12760 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %12761 = "mini.wrap"(%12760) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel">
    %12762 = "mini.literal"() {"value" = 88 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12763 = builtin.unrealized_conversion_cast %12762 : !mini.ptr<i32> to !mini.ptr<i32>
    %12764 = "mini.unwrap"(%12763) : (!mini.ptr<i32>) -> i32
    %12765 = "mini.unwrap"(%12761) : (!mini.fatptr<"Channel">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12766 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12767 = "mini.parameterizations_array"(%12766) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12767, %12765, %12764) {"offset" = 3 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_kqpipzhidm", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1490(%12768 : i32):
    %12769 = "mini.wrap"(%12768) : (i32) -> !mini.ptr<i32>
    %12770 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12771 = "mini.unwrap"(%12769) : (!mini.ptr<i32>) -> i32
    %12772 = "mini.unwrap"(%12770) : (!mini.ptr<i32>) -> i32
    %12773 = "mini.arithmetic"(%12771, %12772) {"op" = "MOD"} : (i32, i32) -> i32
    %12774 = "mini.wrap"(%12773) : (i32) -> !mini.ptr<i32>
    %12775 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12776 = "mini.unwrap"(%12774) : (!mini.ptr<i32>) -> i32
    %12777 = "mini.unwrap"(%12775) : (!mini.ptr<i32>) -> i32
    %12778 = "mini.comparison"(%12776, %12777) {"op" = "EQ"} : (i32, i32) -> i1
    %12779 = "mini.wrap"(%12778) : (i1) -> !mini.ptr<i32>
    %12780 = builtin.unrealized_conversion_cast %12779 : !mini.ptr<i32> to !mini.ptr<i1>
    "mini.return"(%12780) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "_functionliteral_vkpdhaudnl", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1491(%12781 : i32):
    %12782 = "mini.wrap"(%12781) : (i32) -> !mini.ptr<i32>
    %12783 = "mini.unwrap"(%12782) : (!mini.ptr<i32>) -> i32
    %12784 = "mini.unwrap"(%12782) : (!mini.ptr<i32>) -> i32
    %12785 = "mini.arithmetic"(%12783, %12784) {"op" = "MUL"} : (i32, i32) -> i32
    %12786 = "mini.wrap"(%12785) : (i32) -> !mini.ptr<i32>
    %12787 = builtin.unrealized_conversion_cast %12786 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%12787) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_knnabvgqzw", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.main"() ({
    "cf.br"() [^bb1492] : () -> ()
  ^bb1492:
    "cf.br"() [^bb1493] : () -> ()
  ^bb1493:
    "cf.br"() [^bb1494] : () -> ()
  ^bb1494:
    "cf.br"() [^bb1495] : () -> ()
  ^bb1495:
    "cf.br"() [^bb1496] : () -> ()
  ^bb1496:
    "cf.br"() [^bb1497] : () -> ()
  ^bb1497:
    "cf.br"() [^bb1498] : () -> ()
  ^bb1498:
    "cf.br"() [^bb1499] : () -> ()
  ^bb1499:
    "cf.br"() [^bb1500] : () -> ()
  ^bb1500:
    "cf.br"() [^bb1501] : () -> ()
  ^bb1501:
    "cf.br"() [^bb1502] : () -> ()
  ^bb1502:
    "cf.br"() [^bb1503] : () -> ()
  ^bb1503:
    "cf.br"() [^bb1504] : () -> ()
  ^bb1504:
    "cf.br"() [^bb1505] : () -> ()
  ^bb1505:
    "cf.br"() [^bb1506] : () -> ()
  ^bb1506:
    "cf.br"() [^bb1507] : () -> ()
  ^bb1507:
    "cf.br"() [^bb1508] : () -> ()
  ^bb1508:
    "cf.br"() [^bb1509] : () -> ()
  ^bb1509:
    "cf.br"() [^bb1510] : () -> ()
  ^bb1510:
    "cf.br"() [^bb1511] : () -> ()
  ^bb1511:
    "cf.br"() [^bb1512] : () -> ()
  ^bb1512:
    "cf.br"() [^bb1513] : () -> ()
  ^bb1513:
    "cf.br"() [^bb1514] : () -> ()
  ^bb1514:
    "cf.br"() [^bb1515] : () -> ()
  ^bb1515:
    "cf.br"() [^bb1516] : () -> ()
  ^bb1516:
    "cf.br"() [^bb1517] : () -> ()
  ^bb1517:
    "cf.br"() [^bb1518] : () -> ()
  ^bb1518:
    "cf.br"() [^bb1519] : () -> ()
  ^bb1519:
    "cf.br"() [^bb1520] : () -> ()
  ^bb1520:
    "cf.br"() [^bb1521] : () -> ()
  ^bb1521:
    "cf.br"() [^bb1522] : () -> ()
  ^bb1522:
    "cf.br"() [^bb1523] : () -> ()
  ^bb1523:
    "cf.br"() [^bb1524] : () -> ()
  ^bb1524:
    "cf.br"() [^bb1525] : () -> ()
  ^bb1525:
    "cf.br"() [^bb1526] : () -> ()
  ^bb1526:
    "cf.br"() [^bb1527] : () -> ()
  ^bb1527:
    "cf.br"() [^bb1528] : () -> ()
  ^bb1528:
    "cf.br"() [^bb1529] : () -> ()
  ^bb1529:
    "cf.br"() [^bb1530] : () -> ()
  ^bb1530:
    "cf.br"() [^bb1531] : () -> ()
  ^bb1531:
    "cf.br"() [^bb1532] : () -> ()
  ^bb1532:
    "cf.br"() [^bb1533] : () -> ()
  ^bb1533:
    "cf.br"() [^bb1534] : () -> ()
  ^bb1534:
    "cf.br"() [^bb1535] : () -> ()
  ^bb1535:
    "cf.br"() [^bb1536] : () -> ()
  ^bb1536:
    "cf.br"() [^bb1537] : () -> ()
  ^bb1537:
    "cf.br"() [^bb1538] : () -> ()
  ^bb1538:
    "cf.br"() [^bb1539] : () -> ()
  ^bb1539:
    "cf.br"() [^bb1540] : () -> ()
  ^bb1540:
    "cf.br"() [^bb1541] : () -> ()
  ^bb1541:
    "cf.br"() [^bb1542] : () -> ()
  ^bb1542:
    "cf.br"() [^bb1543] : () -> ()
  ^bb1543:
    "cf.br"() [^bb1544] : () -> ()
  ^bb1544:
    "cf.br"() [^bb1545] : () -> ()
  ^bb1545:
    "cf.br"() [^bb1546] : () -> ()
  ^bb1546:
    "cf.br"() [^bb1547] : () -> ()
  ^bb1547:
    "cf.br"() [^bb1548] : () -> ()
  ^bb1548:
    "cf.br"() [^bb1549] : () -> ()
  ^bb1549:
    "cf.br"() [^bb1550] : () -> ()
  ^bb1550:
    "cf.br"() [^bb1551] : () -> ()
  ^bb1551:
    "cf.br"() [^bb1552] : () -> ()
  ^bb1552:
    "cf.br"() [^bb1553] : () -> ()
  ^bb1553:
    "cf.br"() [^bb1554] : () -> ()
  ^bb1554:
    "cf.br"() [^bb1555] : () -> ()
  ^bb1555:
    "cf.br"() [^bb1556] : () -> ()
  ^bb1556:
    "cf.br"() [^bb1557] : () -> ()
  ^bb1557:
    "cf.br"() [^bb1558] : () -> ()
  ^bb1558:
    "cf.br"() [^bb1559] : () -> ()
  ^bb1559:
    "cf.br"() [^bb1560] : () -> ()
  ^bb1560:
    "cf.br"() [^bb1561] : () -> ()
  ^bb1561:
    "cf.br"() [^bb1562] : () -> ()
  ^bb1562:
    "cf.br"() [^bb1563] : () -> ()
  ^bb1563:
    "cf.br"() [^bb1564] : () -> ()
  ^bb1564:
    "cf.br"() [^bb1565] : () -> ()
  ^bb1565:
    "cf.br"() [^bb1566] : () -> ()
  ^bb1566:
    "cf.br"() [^bb1567] : () -> ()
  ^bb1567:
    "cf.br"() [^bb1568] : () -> ()
  ^bb1568:
    "cf.br"() [^bb1569] : () -> ()
  ^bb1569:
    "cf.br"() [^bb1570] : () -> ()
  ^bb1570:
    "cf.br"() [^bb1571] : () -> ()
  ^bb1571:
    "cf.br"() [^bb1572] : () -> ()
  ^bb1572:
    "cf.br"() [^bb1573] : () -> ()
  ^bb1573:
    "cf.br"() [^bb1574] : () -> ()
  ^bb1574:
    "cf.br"() [^bb1575] : () -> ()
  ^bb1575:
    "cf.br"() [^bb1576] : () -> ()
  ^bb1576:
    "cf.br"() [^bb1577] : () -> ()
  ^bb1577:
    "cf.br"() [^bb1578] : () -> ()
  ^bb1578:
    "cf.br"() [^bb1579] : () -> ()
  ^bb1579:
    "cf.br"() [^bb1580] : () -> ()
  ^bb1580:
    "cf.br"() [^bb1581] : () -> ()
  ^bb1581:
    "cf.br"() [^bb1582] : () -> ()
  ^bb1582:
    "cf.br"() [^bb1583] : () -> ()
  ^bb1583:
    "cf.br"() [^bb1584] : () -> ()
  ^bb1584:
    "cf.br"() [^bb1585] : () -> ()
  ^bb1585:
    "cf.br"() [^bb1586] : () -> ()
  ^bb1586:
    "cf.br"() [^bb1587] : () -> ()
  ^bb1587:
    "cf.br"() [^bb1588] : () -> ()
  ^bb1588:
    "cf.br"() [^bb1589] : () -> ()
  ^bb1589:
    "cf.br"() [^bb1590] : () -> ()
  ^bb1590:
    "cf.br"() [^bb1591] : () -> ()
  ^bb1591:
    "cf.br"() [^bb1592] : () -> ()
  ^bb1592:
    "cf.br"() [^bb1593] : () -> ()
  ^bb1593:
    "cf.br"() [^bb1594] : () -> ()
  ^bb1594:
    "cf.br"() [^bb1595] : () -> ()
  ^bb1595:
    "cf.br"() [^bb1596] : () -> ()
  ^bb1596:
    "cf.br"() [^bb1597] : () -> ()
  ^bb1597:
    "cf.br"() [^bb1598] : () -> ()
  ^bb1598:
    "cf.br"() [^bb1599] : () -> ()
  ^bb1599:
    "cf.br"() [^bb1600] : () -> ()
  ^bb1600:
    "cf.br"() [^bb1601] : () -> ()
  ^bb1601:
    "cf.br"() [^bb1602] : () -> ()
  ^bb1602:
    "cf.br"() [^bb1603] : () -> ()
  ^bb1603:
    "cf.br"() [^bb1604] : () -> ()
  ^bb1604:
    "cf.br"() [^bb1605] : () -> ()
  ^bb1605:
    "cf.br"() [^bb1606] : () -> ()
  ^bb1606:
    "cf.br"() [^bb1607] : () -> ()
  ^bb1607:
    "cf.br"() [^bb1608] : () -> ()
  ^bb1608:
    "cf.br"() [^bb1609] : () -> ()
  ^bb1609:
    "cf.br"() [^bb1610] : () -> ()
  ^bb1610:
    "cf.br"() [^bb1611] : () -> ()
  ^bb1611:
    "cf.br"() [^bb1612] : () -> ()
  ^bb1612:
    "cf.br"() [^bb1613] : () -> ()
  ^bb1613:
    "cf.br"() [^bb1614] : () -> ()
  ^bb1614:
    "cf.br"() [^bb1615] : () -> ()
  ^bb1615:
    "cf.br"() [^bb1616] : () -> ()
  ^bb1616:
    "cf.br"() [^bb1617] : () -> ()
  ^bb1617:
    "cf.br"() [^bb1618] : () -> ()
  ^bb1618:
    "cf.br"() [^bb1619] : () -> ()
  ^bb1619:
    "cf.br"() [^bb1620] : () -> ()
  ^bb1620:
    "cf.br"() [^bb1621] : () -> ()
  ^bb1621:
    "cf.br"() [^bb1622] : () -> ()
  ^bb1622:
    "cf.br"() [^bb1623] : () -> ()
  ^bb1623:
    "cf.br"() [^bb1624] : () -> ()
  ^bb1624:
    "cf.br"() [^bb1625] : () -> ()
  ^bb1625:
    "cf.br"() [^bb1626] : () -> ()
  ^bb1626:
    "cf.br"() [^bb1627] : () -> ()
  ^bb1627:
    "cf.br"() [^bb1628] : () -> ()
  ^bb1628:
    "cf.br"() [^bb1629] : () -> ()
  ^bb1629:
    "cf.br"() [^bb1630] : () -> ()
  ^bb1630:
    "cf.br"() [^bb1631] : () -> ()
  ^bb1631:
    "cf.br"() [^bb1632] : () -> ()
  ^bb1632:
    "cf.br"() [^bb1633] : () -> ()
  ^bb1633:
    "cf.br"() [^bb1634] : () -> ()
  ^bb1634:
    "cf.br"() [^bb1635] : () -> ()
  ^bb1635:
    "cf.br"() [^bb1636] : () -> ()
  ^bb1636:
    "cf.br"() [^bb1637] : () -> ()
  ^bb1637:
    "cf.br"() [^bb1638] : () -> ()
  ^bb1638:
    "cf.br"() [^bb1639] : () -> ()
  ^bb1639:
    "cf.br"() [^bb1640] : () -> ()
  ^bb1640:
    "cf.br"() [^bb1641] : () -> ()
  ^bb1641:
    "cf.br"() [^bb1642] : () -> ()
  ^bb1642:
    "cf.br"() [^bb1643] : () -> ()
  ^bb1643:
    "cf.br"() [^bb1644] : () -> ()
  ^bb1644:
    "cf.br"() [^bb1645] : () -> ()
  ^bb1645:
    "cf.br"() [^bb1646] : () -> ()
  ^bb1646:
    "cf.br"() [^bb1647] : () -> ()
  ^bb1647:
    "cf.br"() [^bb1648] : () -> ()
  ^bb1648:
    "cf.br"() [^bb1649] : () -> ()
  ^bb1649:
    "cf.br"() [^bb1650] : () -> ()
  ^bb1650:
    "cf.br"() [^bb1651] : () -> ()
  ^bb1651:
    "cf.br"() [^bb1652] : () -> ()
  ^bb1652:
    "cf.br"() [^bb1653] : () -> ()
  ^bb1653:
    "cf.br"() [^bb1654] : () -> ()
  ^bb1654:
    "cf.br"() [^bb1655] : () -> ()
  ^bb1655:
    "cf.br"() [^bb1656] : () -> ()
  ^bb1656:
    "cf.br"() [^bb1657] : () -> ()
  ^bb1657:
    "cf.br"() [^bb1658] : () -> ()
  ^bb1658:
    "cf.br"() [^bb1659] : () -> ()
  ^bb1659:
    "cf.br"() [^bb1660] : () -> ()
  ^bb1660:
    "cf.br"() [^bb1661] : () -> ()
  ^bb1661:
    "cf.br"() [^bb1662] : () -> ()
  ^bb1662:
    "cf.br"() [^bb1663] : () -> ()
  ^bb1663:
    "cf.br"() [^bb1664] : () -> ()
  ^bb1664:
    "cf.br"() [^bb1665] : () -> ()
  ^bb1665:
    "cf.br"() [^bb1666] : () -> ()
  ^bb1666:
    "cf.br"() [^bb1667] : () -> ()
  ^bb1667:
    "cf.br"() [^bb1668] : () -> ()
  ^bb1668:
    "cf.br"() [^bb1669] : () -> ()
  ^bb1669:
    "cf.br"() [^bb1670] : () -> ()
  ^bb1670:
    "cf.br"() [^bb1671] : () -> ()
  ^bb1671:
    "cf.br"() [^bb1672] : () -> ()
  ^bb1672:
    "cf.br"() [^bb1673] : () -> ()
  ^bb1673:
    "cf.br"() [^bb1674] : () -> ()
  ^bb1674:
    "cf.br"() [^bb1675] : () -> ()
  ^bb1675:
    "cf.br"() [^bb1676] : () -> ()
  ^bb1676:
    "cf.br"() [^bb1677] : () -> ()
  ^bb1677:
    "cf.br"() [^bb1678] : () -> ()
  ^bb1678:
    "cf.br"() [^bb1679] : () -> ()
  ^bb1679:
    "cf.br"() [^bb1680] : () -> ()
  ^bb1680:
    "cf.br"() [^bb1681] : () -> ()
  ^bb1681:
    "cf.br"() [^bb1682] : () -> ()
  ^bb1682:
    "cf.br"() [^bb1683] : () -> ()
  ^bb1683:
    "cf.br"() [^bb1684] : () -> ()
  ^bb1684:
    "cf.br"() [^bb1685] : () -> ()
  ^bb1685:
    "cf.br"() [^bb1686] : () -> ()
  ^bb1686:
    "cf.br"() [^bb1687] : () -> ()
  ^bb1687:
    "cf.br"() [^bb1688] : () -> ()
  ^bb1688:
    "cf.br"() [^bb1689] : () -> ()
  ^bb1689:
    "cf.br"() [^bb1690] : () -> ()
  ^bb1690:
    "cf.br"() [^bb1691] : () -> ()
  ^bb1691:
    "cf.br"() [^bb1692] : () -> ()
  ^bb1692:
    "cf.br"() [^bb1693] : () -> ()
  ^bb1693:
    "cf.br"() [^bb1694] : () -> ()
  ^bb1694:
    "cf.br"() [^bb1695] : () -> ()
  ^bb1695:
    "cf.br"() [^bb1696] : () -> ()
  ^bb1696:
    "cf.br"() [^bb1697] : () -> ()
  ^bb1697:
    "cf.br"() [^bb1698] : () -> ()
  ^bb1698:
    "cf.br"() [^bb1699] : () -> ()
  ^bb1699:
    "cf.br"() [^bb1700] : () -> ()
  ^bb1700:
    "cf.br"() [^bb1701] : () -> ()
  ^bb1701:
    "cf.br"() [^bb1702] : () -> ()
  ^bb1702:
    "cf.br"() [^bb1703] : () -> ()
  ^bb1703:
    "cf.br"() [^bb1704] : () -> ()
  ^bb1704:
    "cf.br"() [^bb1705] : () -> ()
  ^bb1705:
    "cf.br"() [^bb1706] : () -> ()
  ^bb1706:
    "cf.br"() [^bb1707] : () -> ()
  ^bb1707:
    "cf.br"() [^bb1708] : () -> ()
  ^bb1708:
    "cf.br"() [^bb1709] : () -> ()
  ^bb1709:
    "cf.br"() [^bb1710] : () -> ()
  ^bb1710:
    "cf.br"() [^bb1711] : () -> ()
  ^bb1711:
    "cf.br"() [^bb1712] : () -> ()
  ^bb1712:
    "cf.br"() [^bb1713] : () -> ()
  ^bb1713:
    "cf.br"() [^bb1714] : () -> ()
  ^bb1714:
    "cf.br"() [^bb1715] : () -> ()
  ^bb1715:
    "cf.br"() [^bb1716] : () -> ()
  ^bb1716:
    "cf.br"() [^bb1717] : () -> ()
  ^bb1717:
    "cf.br"() [^bb1718] : () -> ()
  ^bb1718:
    "cf.br"() [^bb1719] : () -> ()
  ^bb1719:
    "cf.br"() [^bb1720] : () -> ()
  ^bb1720:
    "cf.br"() [^bb1721] : () -> ()
  ^bb1721:
    "cf.br"() [^bb1722] : () -> ()
  ^bb1722:
    "cf.br"() [^bb1723] : () -> ()
  ^bb1723:
    "cf.br"() [^bb1724] : () -> ()
  ^bb1724:
    "cf.br"() [^bb1725] : () -> ()
  ^bb1725:
    "cf.br"() [^bb1726] : () -> ()
  ^bb1726:
    "cf.br"() [^bb1727] : () -> ()
  ^bb1727:
    "cf.br"() [^bb1728] : () -> ()
  ^bb1728:
    "cf.br"() [^bb1729] : () -> ()
  ^bb1729:
    "cf.br"() [^bb1730] : () -> ()
  ^bb1730:
    "cf.br"() [^bb1731] : () -> ()
  ^bb1731:
    "cf.br"() [^bb1732] : () -> ()
  ^bb1732:
    "cf.br"() [^bb1733] : () -> ()
  ^bb1733:
    "cf.br"() [^bb1734] : () -> ()
  ^bb1734:
    "cf.br"() [^bb1735] : () -> ()
  ^bb1735:
    "cf.br"() [^bb1736] : () -> ()
  ^bb1736:
    "cf.br"() [^bb1737] : () -> ()
  ^bb1737:
    "cf.br"() [^bb1738] : () -> ()
  ^bb1738:
    "cf.br"() [^bb1739] : () -> ()
  ^bb1739:
    "cf.br"() [^bb1740] : () -> ()
  ^bb1740:
    "cf.br"() [^bb1741] : () -> ()
  ^bb1741:
    "cf.br"() [^bb1742] : () -> ()
  ^bb1742:
    "cf.br"() [^bb1743] : () -> ()
  ^bb1743:
    "cf.br"() [^bb1744] : () -> ()
  ^bb1744:
    "cf.br"() [^bb1745] : () -> ()
  ^bb1745:
    "cf.br"() [^bb1746] : () -> ()
  ^bb1746:
    "cf.br"() [^bb1747] : () -> ()
  ^bb1747:
    "cf.br"() [^bb1748] : () -> ()
  ^bb1748:
    "cf.br"() [^bb1749] : () -> ()
  ^bb1749:
    "cf.br"() [^bb1750] : () -> ()
  ^bb1750:
    "cf.br"() [^bb1751] : () -> ()
  ^bb1751:
    "cf.br"() [^bb1752] : () -> ()
  ^bb1752:
    "cf.br"() [^bb1753] : () -> ()
  ^bb1753:
    "cf.br"() [^bb1754] : () -> ()
  ^bb1754:
    "cf.br"() [^bb1755] : () -> ()
  ^bb1755:
    "cf.br"() [^bb1756] : () -> ()
  ^bb1756:
    "cf.br"() [^bb1757] : () -> ()
  ^bb1757:
    "cf.br"() [^bb1758] : () -> ()
  ^bb1758:
    "cf.br"() [^bb1759] : () -> ()
  ^bb1759:
    "cf.br"() [^bb1760] : () -> ()
  ^bb1760:
    "cf.br"() [^bb1761] : () -> ()
  ^bb1761:
    "cf.br"() [^bb1762] : () -> ()
  ^bb1762:
    "cf.br"() [^bb1763] : () -> ()
  ^bb1763:
    "cf.br"() [^bb1764] : () -> ()
  ^bb1764:
    "cf.br"() [^bb1765] : () -> ()
  ^bb1765:
    "cf.br"() [^bb1766] : () -> ()
  ^bb1766:
    "cf.br"() [^bb1767] : () -> ()
  ^bb1767:
    "cf.br"() [^bb1768] : () -> ()
  ^bb1768:
    "cf.br"() [^bb1769] : () -> ()
  ^bb1769:
    "cf.br"() [^bb1770] : () -> ()
  ^bb1770:
    "cf.br"() [^bb1771] : () -> ()
  ^bb1771:
    "cf.br"() [^bb1772] : () -> ()
  ^bb1772:
    "cf.br"() [^bb1773] : () -> ()
  ^bb1773:
    "cf.br"() [^bb1774] : () -> ()
  ^bb1774:
    "cf.br"() [^bb1775] : () -> ()
  ^bb1775:
    "cf.br"() [^bb1776] : () -> ()
  ^bb1776:
    "cf.br"() [^bb1777] : () -> ()
  ^bb1777:
    "cf.br"() [^bb1778] : () -> ()
  ^bb1778:
    "cf.br"() [^bb1779] : () -> ()
  ^bb1779:
    "cf.br"() [^bb1780] : () -> ()
  ^bb1780:
    "cf.br"() [^bb1781] : () -> ()
  ^bb1781:
    "cf.br"() [^bb1782] : () -> ()
  ^bb1782:
    "cf.br"() [^bb1783] : () -> ()
  ^bb1783:
    "cf.br"() [^bb1784] : () -> ()
  ^bb1784:
    "cf.br"() [^bb1785] : () -> ()
  ^bb1785:
    "cf.br"() [^bb1786] : () -> ()
  ^bb1786:
    "cf.br"() [^bb1787] : () -> ()
  ^bb1787:
    "cf.br"() [^bb1788] : () -> ()
  ^bb1788:
    "cf.br"() [^bb1789] : () -> ()
  ^bb1789:
    "cf.br"() [^bb1790] : () -> ()
  ^bb1790:
    "cf.br"() [^bb1791] : () -> ()
  ^bb1791:
    "cf.br"() [^bb1792] : () -> ()
  ^bb1792:
    "cf.br"() [^bb1793] : () -> ()
  ^bb1793:
    "cf.br"() [^bb1794] : () -> ()
  ^bb1794:
    "cf.br"() [^bb1795] : () -> ()
  ^bb1795:
    "cf.br"() [^bb1796] : () -> ()
  ^bb1796:
    "cf.br"() [^bb1797] : () -> ()
  ^bb1797:
    "cf.br"() [^bb1798] : () -> ()
  ^bb1798:
    "cf.br"() [^bb1799] : () -> ()
  ^bb1799:
    "cf.br"() [^bb1800] : () -> ()
  ^bb1800:
    "cf.br"() [^bb1801] : () -> ()
  ^bb1801:
    "cf.br"() [^bb1802] : () -> ()
  ^bb1802:
    "cf.br"() [^bb1803] : () -> ()
  ^bb1803:
    "cf.br"() [^bb1804] : () -> ()
  ^bb1804:
    "cf.br"() [^bb1805] : () -> ()
  ^bb1805:
    "cf.br"() [^bb1806] : () -> ()
  ^bb1806:
    "cf.br"() [^bb1807] : () -> ()
  ^bb1807:
    "cf.br"() [^bb1808] : () -> ()
  ^bb1808:
    "cf.br"() [^bb1809] : () -> ()
  ^bb1809:
    "cf.br"() [^bb1810] : () -> ()
  ^bb1810:
    "cf.br"() [^bb1811] : () -> ()
  ^bb1811:
    "cf.br"() [^bb1812] : () -> ()
  ^bb1812:
    "cf.br"() [^bb1813] : () -> ()
  ^bb1813:
    "cf.br"() [^bb1814] : () -> ()
  ^bb1814:
    "cf.br"() [^bb1815] : () -> ()
  ^bb1815:
    "cf.br"() [^bb1816] : () -> ()
  ^bb1816:
    "cf.br"() [^bb1817] : () -> ()
  ^bb1817:
    "cf.br"() [^bb1818] : () -> ()
  ^bb1818:
    "cf.br"() [^bb1819] : () -> ()
  ^bb1819:
    "cf.br"() [^bb1820] : () -> ()
  ^bb1820:
    "cf.br"() [^bb1821] : () -> ()
  ^bb1821:
    "cf.br"() [^bb1822] : () -> ()
  ^bb1822:
    "cf.br"() [^bb1823] : () -> ()
  ^bb1823:
    "cf.br"() [^bb1824] : () -> ()
  ^bb1824:
    "cf.br"() [^bb1825] : () -> ()
  ^bb1825:
    "cf.br"() [^bb1826] : () -> ()
  ^bb1826:
    "cf.br"() [^bb1827] : () -> ()
  ^bb1827:
    "cf.br"() [^bb1828] : () -> ()
  ^bb1828:
    %12788 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12789 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12790 = "mini.unwrap"(%12788) : (!mini.ptr<i32>) -> i32
    %12791 = "mini.unwrap"(%12789) : (!mini.ptr<i32>) -> i32
    %12792 = "mini.arithmetic"(%12790, %12791) {"op" = "ADD"} : (i32, i32) -> i32
    %12793 = "mini.wrap"(%12792) : (i32) -> !mini.ptr<i32>
    %12794 = "mini.unionize"(%12793) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12795 = "mini.unwrap"(%12794) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12796 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12797 = "mini.parameterizations_array"(%12796) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12797, %12795) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12798 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12799 = "mini.create_buffer"(%12798) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %12800 = builtin.unrealized_conversion_cast %12799 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12801 = "mini.refer"(%12800) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12802 = "mini.literal"() {"typ" = !llvm.array<13 x i8>, "value" = "Hello, World!"} : () -> !llvm.ptr
    %12803 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%12801, %12803, %12802) {"typ" = !llvm.array<13 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %12804 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12805 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12806 = "mini.unwrap"(%12801) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12807 = "mini.unwrap"(%12804) : (!mini.ptr<i32>) -> i32
    %12808 = "mini.unwrap"(%12805) : (!mini.ptr<i32>) -> i32
    %12809 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %12810 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12811 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12812 = builtin.unrealized_conversion_cast %12801 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12813 = "mini.unwrap"(%12812) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12814 = builtin.unrealized_conversion_cast %12810 : !mini.ptr<i32> to !mini.ptr<i32>
    %12815 = "mini.unwrap"(%12814) : (!mini.ptr<i32>) -> i32
    %12816 = builtin.unrealized_conversion_cast %12811 : !mini.ptr<i32> to !mini.ptr<i32>
    %12817 = "mini.unwrap"(%12816) : (!mini.ptr<i32>) -> i32
    %12818 = "mini.unwrap"(%12809) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12819 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %12820 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12821 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12822 = "mini.parameterizations_array"(%12819, %12820, %12821) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12822, %12818, %12813, %12815, %12817) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %12823 = builtin.unrealized_conversion_cast %12809 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12824 = "mini.unwrap"(%12823) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12825 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %12826 = "mini.parameterizations_array"(%12825) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12826, %12824) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12827 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %12828 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %12829 = "mini.unwrap"(%12827) : (!mini.ptr<i1>) -> i1
    %12830 = "mini.unwrap"(%12828) : (!mini.ptr<i1>) -> i1
    %12831 = "mini.logical"(%12829, %12830) {"op" = "and"} : (i1, i1) -> i1
    %12832 = "mini.wrap"(%12831) : (i1) -> !mini.ptr<i1>
    %12833 = "mini.unionize"(%12832) {"from_typ" = i1, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "bool_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i1>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12834 = "mini.unwrap"(%12833) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12835 = "mini.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Ptri1"]} : () -> !llvm.ptr
    %12836 = "mini.parameterizations_array"(%12835) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12836, %12834) {"offset" = 0 : i32, "vptrs" = ["bool_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "cf.br"() [^bb1829] : () -> ()
  ^bb1829:
    "cf.br"() [^bb1830] : () -> ()
  ^bb1830:
    "cf.br"() [^bb1831] : () -> ()
  ^bb1831:
    "cf.br"() [^bb1832] : () -> ()
  ^bb1832:
    "cf.br"() [^bb1833] : () -> ()
  ^bb1833:
    "cf.br"() [^bb1834] : () -> ()
  ^bb1834:
    "cf.br"() [^bb1835] : () -> ()
  ^bb1835:
    "cf.br"() [^bb1836] : () -> ()
  ^bb1836:
    "cf.br"() [^bb1837] : () -> ()
  ^bb1837:
    "cf.br"() [^bb1838] : () -> ()
  ^bb1838:
    "cf.br"() [^bb1839] : () -> ()
  ^bb1839:
    "cf.br"() [^bb1840] : () -> ()
  ^bb1840:
    "cf.br"() [^bb1841] : () -> ()
  ^bb1841:
    "cf.br"() [^bb1842] : () -> ()
  ^bb1842:
    "cf.br"() [^bb1843] : () -> ()
  ^bb1843:
    "cf.br"() [^bb1844] : () -> ()
  ^bb1844:
    "cf.br"() [^bb1845] : () -> ()
  ^bb1845:
    "cf.br"() [^bb1846] : () -> ()
  ^bb1846:
    "cf.br"() [^bb1847] : () -> ()
  ^bb1847:
    "cf.br"() [^bb1848] : () -> ()
  ^bb1848:
    "cf.br"() [^bb1849] : () -> ()
  ^bb1849:
    "cf.br"() [^bb1850] : () -> ()
  ^bb1850:
    "cf.br"() [^bb1851] : () -> ()
  ^bb1851:
    "cf.br"() [^bb1852] : () -> ()
  ^bb1852:
    "cf.br"() [^bb1853] : () -> ()
  ^bb1853:
    "cf.br"() [^bb1854] : () -> ()
  ^bb1854:
    "cf.br"() [^bb1855] : () -> ()
  ^bb1855:
    "cf.br"() [^bb1856] : () -> ()
  ^bb1856:
    "cf.br"() [^bb1857] : () -> ()
  ^bb1857:
    "cf.br"() [^bb1858] : () -> ()
  ^bb1858:
    "cf.br"() [^bb1859] : () -> ()
  ^bb1859:
    "cf.br"() [^bb1860] : () -> ()
  ^bb1860:
    "cf.br"() [^bb1861] : () -> ()
  ^bb1861:
    "cf.br"() [^bb1862] : () -> ()
  ^bb1862:
    "cf.br"() [^bb1863] : () -> ()
  ^bb1863:
    "cf.br"() [^bb1864] : () -> ()
  ^bb1864:
    "cf.br"() [^bb1865] : () -> ()
  ^bb1865:
    "cf.br"() [^bb1866] : () -> ()
  ^bb1866:
    "cf.br"() [^bb1867] : () -> ()
  ^bb1867:
    "cf.br"() [^bb1868] : () -> ()
  ^bb1868:
    "cf.br"() [^bb1869] : () -> ()
  ^bb1869:
    "cf.br"() [^bb1870] : () -> ()
  ^bb1870:
    %12837 = "mini.new"() {"typ" = !llvm.struct<()>, "class_name" = "Bard", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Bard">
    %12838 = "mini.unwrap"(%12837) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12839 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%12839, %12838) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %12840 = "mini.to_fat_ptr"(%12837) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard", "invariant"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %12841 = "mini.refer"(%12840) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %12842 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12843 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12844 = "mini.unionize"(%12842) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %12845 = "mini.unwrap"(%12844) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12846 = "mini.unionize"(%12843) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>
    %12847 = "mini.unwrap"(%12846) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12848 = "mini.unwrap"(%12841) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12849 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12850 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12851 = "mini.parameterizations_array"(%12849, %12850) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12851, %12848, %12845, %12847) {"offset" = 1 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12852 = "mini.literal"() {"value" = 7.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %12853 = "mini.unionize"(%12852) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %12854 = "mini.literal"() {"value" = 1.400000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %12855 = "mini.reunionize"(%12853) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %12856 = "mini.unwrap"(%12855) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12857 = "mini.unionize"(%12854) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>
    %12858 = "mini.unwrap"(%12857) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12859 = "mini.unwrap"(%12841) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12860 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["i32_typ"], ["f64_typ"]], "name_hierarchy" = ["Ptri32_or_Ptrf64", ["Ptri32"], ["Ptrf64"]]} : () -> !llvm.ptr
    %12861 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %12862 = "mini.parameterizations_array"(%12860, %12861) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12862, %12859, %12856, %12858) {"offset" = 1 : i32, "vptrs" = ["union_typ", "f64_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12863 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12864 = "mini.create_buffer"(%12863) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %12865 = builtin.unrealized_conversion_cast %12864 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12866 = "mini.refer"(%12865) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12867 = "mini.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "start"} : () -> !llvm.ptr
    %12868 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%12866, %12868, %12867) {"typ" = !llvm.array<5 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %12869 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12870 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12871 = "mini.unwrap"(%12866) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12872 = "mini.unwrap"(%12869) : (!mini.ptr<i32>) -> i32
    %12873 = "mini.unwrap"(%12870) : (!mini.ptr<i32>) -> i32
    %12874 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %12875 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12876 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12877 = builtin.unrealized_conversion_cast %12866 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12878 = "mini.unwrap"(%12877) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12879 = builtin.unrealized_conversion_cast %12875 : !mini.ptr<i32> to !mini.ptr<i32>
    %12880 = "mini.unwrap"(%12879) : (!mini.ptr<i32>) -> i32
    %12881 = builtin.unrealized_conversion_cast %12876 : !mini.ptr<i32> to !mini.ptr<i32>
    %12882 = "mini.unwrap"(%12881) : (!mini.ptr<i32>) -> i32
    %12883 = "mini.unwrap"(%12874) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12884 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %12885 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12886 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12887 = "mini.parameterizations_array"(%12884, %12885, %12886) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12887, %12883, %12878, %12880, %12882) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %12888 = builtin.unrealized_conversion_cast %12874 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12889 = "mini.unwrap"(%12888) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12890 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %12891 = "mini.parameterizations_array"(%12890) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12891, %12889) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12892 = "mini.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12893 = "mini.literal"() {"value" = 8.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %12894 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12895 = "mini.unwrap"(%12892) : (!mini.ptr<i32>) -> i32
    %12896 = "mini.unwrap"(%12893) : (!mini.ptr<f64>) -> f64
    %12897 = "mini.unwrap"(%12894) : (!mini.ptr<i32>) -> i32
    %12898 = "mini.new"() {"typ" = !llvm.struct<(i32, f64, i32)>, "class_name" = "Animal", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Animal">
    %12899 = "mini.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12900 = "mini.literal"() {"value" = 8.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %12901 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12902 = builtin.unrealized_conversion_cast %12899 : !mini.ptr<i32> to !mini.ptr<i32>
    %12903 = "mini.unwrap"(%12902) : (!mini.ptr<i32>) -> i32
    %12904 = builtin.unrealized_conversion_cast %12900 : !mini.ptr<f64> to !mini.ptr<f64>
    %12905 = "mini.unwrap"(%12904) : (!mini.ptr<f64>) -> f64
    %12906 = builtin.unrealized_conversion_cast %12901 : !mini.ptr<i32> to !mini.ptr<i32>
    %12907 = "mini.unwrap"(%12906) : (!mini.ptr<i32>) -> i32
    %12908 = "mini.unwrap"(%12898) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12909 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12910 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %12911 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12912 = "mini.parameterizations_array"(%12909, %12910, %12911) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12912, %12908, %12903, %12905, %12907) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "f64_typ", "i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64, i32) -> ()
    %12913 = "mini.to_fat_ptr"(%12898) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %12914 = "mini.refer"(%12913) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %12915 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12916 = "mini.create_buffer"(%12915) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %12917 = builtin.unrealized_conversion_cast %12916 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12918 = "mini.refer"(%12917) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12919 = "mini.literal"() {"typ" = !llvm.array<13 x i8>, "value" = "did get here!"} : () -> !llvm.ptr
    %12920 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%12918, %12920, %12919) {"typ" = !llvm.array<13 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %12921 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12922 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12923 = "mini.unwrap"(%12918) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12924 = "mini.unwrap"(%12921) : (!mini.ptr<i32>) -> i32
    %12925 = "mini.unwrap"(%12922) : (!mini.ptr<i32>) -> i32
    %12926 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %12927 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12928 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12929 = builtin.unrealized_conversion_cast %12918 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12930 = "mini.unwrap"(%12929) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12931 = builtin.unrealized_conversion_cast %12927 : !mini.ptr<i32> to !mini.ptr<i32>
    %12932 = "mini.unwrap"(%12931) : (!mini.ptr<i32>) -> i32
    %12933 = builtin.unrealized_conversion_cast %12928 : !mini.ptr<i32> to !mini.ptr<i32>
    %12934 = "mini.unwrap"(%12933) : (!mini.ptr<i32>) -> i32
    %12935 = "mini.unwrap"(%12926) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12936 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %12937 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12938 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12939 = "mini.parameterizations_array"(%12936, %12937, %12938) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12939, %12935, %12930, %12932, %12934) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %12940 = builtin.unrealized_conversion_cast %12926 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %12941 = "mini.unwrap"(%12940) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12942 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %12943 = "mini.parameterizations_array"(%12942) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12943, %12941) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12944 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12945 = "mini.literal"() {"value" = 1.000000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %12946 = "mini.unwrap"(%12944) : (!mini.ptr<i32>) -> i32
    %12947 = "mini.unwrap"(%12945) : (!mini.ptr<f64>) -> f64
    %12948 = "mini.new"() {"typ" = !llvm.struct<(i32, f64)>, "class_name" = "Beaver", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Beaver">
    %12949 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12950 = "mini.literal"() {"value" = 1.000000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %12951 = builtin.unrealized_conversion_cast %12949 : !mini.ptr<i32> to !mini.ptr<i32>
    %12952 = "mini.unwrap"(%12951) : (!mini.ptr<i32>) -> i32
    %12953 = builtin.unrealized_conversion_cast %12950 : !mini.ptr<f64> to !mini.ptr<f64>
    %12954 = "mini.unwrap"(%12953) : (!mini.ptr<f64>) -> f64
    %12955 = "mini.unwrap"(%12948) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12956 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12957 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %12958 = "mini.parameterizations_array"(%12956, %12957) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12958, %12955, %12952, %12954) {"offset" = 2 : i32, "vptrs" = ["i32_typ", "f64_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64) -> ()
    %12959 = "mini.to_fat_ptr"(%12948) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver", "invariant"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %12960 = "mini.refer"(%12959) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %12961 = builtin.unrealized_conversion_cast %12914 : !mini.fatptr<"Animal"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %12962 = "mini.unwrap"(%12961) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12963 = builtin.unrealized_conversion_cast %12960 : !mini.fatptr<"Beaver"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>
    %12964 = "mini.unwrap"(%12963) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12965 = "mini.unwrap"(%12841) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12966 = "mini.parameterization"() {"id_hierarchy" = ["Animal"], "name_hierarchy" = ["Animal"]} : () -> !llvm.ptr
    %12967 = "mini.parameterization"() {"id_hierarchy" = ["Beaver"], "name_hierarchy" = ["Beaver"]} : () -> !llvm.ptr
    %12968 = "mini.parameterizations_array"(%12966, %12967) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12968, %12965, %12962, %12964) {"offset" = 1 : i32, "vptrs" = [#none, #none], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12969 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12970 = "mini.unionize"(%12969) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %12971 = "mini.unwrap"(%12970) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12972 = "mini.reunionize"(%12853) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>
    %12973 = "mini.unwrap"(%12972) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Beaver">, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12974 = "mini.unwrap"(%12841) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12975 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12976 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["i32_typ"], ["f64_typ"]], "name_hierarchy" = ["Ptri32_or_Ptrf64", ["Ptri32"], ["Ptrf64"]]} : () -> !llvm.ptr
    %12977 = "mini.parameterizations_array"(%12975, %12976) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12977, %12974, %12971, %12973) {"offset" = 1 : i32, "vptrs" = ["i32_typ", "union_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12978 = "mini.literal"() {"value" = 17 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12979 = "mini.create_buffer"(%12978) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %12980 = builtin.unrealized_conversion_cast %12979 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12981 = "mini.refer"(%12980) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12982 = "mini.literal"() {"typ" = !llvm.array<16 x i8>, "value" = "barry's color is"} : () -> !llvm.ptr
    %12983 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%12981, %12983, %12982) {"typ" = !llvm.array<16 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %12984 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12985 = "mini.literal"() {"value" = 17 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12986 = "mini.unwrap"(%12981) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12987 = "mini.unwrap"(%12984) : (!mini.ptr<i32>) -> i32
    %12988 = "mini.unwrap"(%12985) : (!mini.ptr<i32>) -> i32
    %12989 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %12990 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12991 = "mini.literal"() {"value" = 17 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12992 = builtin.unrealized_conversion_cast %12981 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12993 = "mini.unwrap"(%12992) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12994 = builtin.unrealized_conversion_cast %12990 : !mini.ptr<i32> to !mini.ptr<i32>
    %12995 = "mini.unwrap"(%12994) : (!mini.ptr<i32>) -> i32
    %12996 = builtin.unrealized_conversion_cast %12991 : !mini.ptr<i32> to !mini.ptr<i32>
    %12997 = "mini.unwrap"(%12996) : (!mini.ptr<i32>) -> i32
    %12998 = "mini.unwrap"(%12989) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12999 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13000 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13001 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13002 = "mini.parameterizations_array"(%12999, %13000, %13001) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13002, %12998, %12993, %12995, %12997) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13003 = builtin.unrealized_conversion_cast %12989 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13004 = "mini.unwrap"(%13003) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13005 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %13006 = "mini.parameterizations_array"(%13005) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13006, %13004) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13007 = "mini.unwrap"(%12960) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13008 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%13008, %13007) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13009 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13010 = builtin.unrealized_conversion_cast %13009 : !mini.ptr<i32> to !mini.ptr<i32>
    %13011 = "mini.unwrap"(%13010) : (!mini.ptr<i32>) -> i32
    %13012 = "mini.unwrap"(%12960) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13013 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13014 = "mini.parameterizations_array"(%13013) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13014, %13012, %13011) {"offset" = 3 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %13015 = "mini.unwrap"(%12960) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13016 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%13016, %13015) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13017 = "mini.literal"() {"value" = 89 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13018 = "mini.unwrap"(%13017) : (!mini.ptr<i32>) -> i32
    %13019 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %13020 = "mini.literal"() {"value" = 89 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13021 = builtin.unrealized_conversion_cast %13020 : !mini.ptr<i32> to !mini.ptr<i32>
    %13022 = "mini.unwrap"(%13021) : (!mini.ptr<i32>) -> i32
    %13023 = "mini.unwrap"(%13019) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13024 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13025 = "mini.parameterizations_array"(%13024) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13025, %13023, %13022) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %13026 = "mini.to_fat_ptr"(%13019) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %13027 = "mini.refer"(%13026) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %13028 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13029 = builtin.unrealized_conversion_cast %13028 : !mini.ptr<i32> to !mini.ptr<i32>
    %13030 = "mini.unwrap"(%13029) : (!mini.ptr<i32>) -> i32
    %13031 = "mini.unwrap"(%13027) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13032 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13033 = "mini.parameterizations_array"(%13032) : (!llvm.ptr) -> !llvm.ptr
    %13034 = "mini.method_call"(%13033, %13031, %13030) {"offset" = 3 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.fatptr<"Integer">
    %13035 = "mini.to_fat_ptr"(%13034) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %13036 = "mini.unwrap"(%13035) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13037 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%13037, %13036) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13038 = "mini.literal"() {"value" = 9.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %13039 = builtin.unrealized_conversion_cast %13038 : !mini.ptr<f64> to !mini.ptr<f64>
    %13040 = "mini.unwrap"(%13039) : (!mini.ptr<f64>) -> f64
    %13041 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %13042 = "mini.parameterizations_array"(%13041) : (!llvm.ptr) -> !llvm.ptr
    %13043 = "mini.class_method_call"(%13042, %13040) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 17 : i64, "ret_type" = f64, "ret_type_unq" = f64, "class_name" = "Math"} : (!llvm.ptr, f64) -> !mini.ptr<f64>
    %13044 = builtin.unrealized_conversion_cast %13043 : !mini.ptr<f64> to !mini.ptr<f64>
    %13045 = "mini.literal"() {"value" = -9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13046 = "mini.unionize"(%13045) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %13047 = "mini.unwrap"(%13046) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i64)>
    %13048 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13049 = "mini.parameterizations_array"(%13048) : (!llvm.ptr) -> !llvm.ptr
    %13050 = "mini.class_method_call"(%13049, %13047) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 17 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i64)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i64)>, "class_name" = "Math"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %13051 = "mini.narrow"(%13050) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %13052 = "mini.unionize"(%13051) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13053 = "mini.unwrap"(%13052) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13054 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13055 = "mini.parameterizations_array"(%13054) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13055, %13053) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13056 = "mini.unionize"(%13044) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13057 = "mini.unwrap"(%13056) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13058 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %13059 = "mini.parameterizations_array"(%13058) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13059, %13057) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13060 = "mini.unwrap"(%12914) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    "mini.call"(%13060) {"func_name" = "make_em_speak", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13061 = "mini.unwrap"(%12914) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13062 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13063 = "mini.method_call"(%13062, %13061) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %13064 = builtin.unrealized_conversion_cast %13063 : !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>]> to !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %13065 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13066 = "mini.unionize"(%13065) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
    "mini.while"() ({
      %13067 = "mini.checkflag"(%13066) {"typ_name" = "i32_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>) -> i1
      %13068 = "mini.unwrap"(%13067) : (i1) -> i1
    }, {
      %13069 = "mini.narrow"(%13066) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>) -> !mini.ptr<i32>
      %13070 = "mini.unionize"(%13069) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
      %13071 = "mini.unwrap"(%13070) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %13072 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13073 = "mini.parameterizations_array"(%13072) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%13073, %13071) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %13074 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %13075 = "mini.unwrap"(%13069) : (!mini.ptr<i32>) -> i32
      %13076 = "mini.unwrap"(%13074) : (!mini.ptr<i32>) -> i32
      %13077 = "mini.arithmetic"(%13075, %13076) {"op" = "ADD"} : (i32, i32) -> i32
      %13078 = "mini.wrap"(%13077) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%13069, %13078) ({
        %13079 = builtin.unrealized_conversion_cast %13078 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %13080 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %13081 = "mini.unwrap"(%13069) : (!mini.ptr<i32>) -> i32
      %13082 = "mini.unwrap"(%13080) : (!mini.ptr<i32>) -> i32
      %13083 = "mini.comparison"(%13081, %13082) {"op" = "EQ"} : (i32, i32) -> i1
      %13084 = "mini.wrap"(%13083) : (i1) -> !mini.ptr<i32>
      %13085 = "mini.unwrap"(%13084) : (!mini.ptr<i32>) -> i1
      %13086 = "mini.unionize"(%13069) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
      "mini.if"(%13085) ({
        %13087 = "mini.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %13088 = "mini.literal"() {"value" = 1.800000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
        %13089 = "mini.literal"() {"value" = 23 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %13090 = "mini.unwrap"(%13087) : (!mini.ptr<i32>) -> i32
        %13091 = "mini.unwrap"(%13088) : (!mini.ptr<f64>) -> f64
        %13092 = "mini.unwrap"(%13089) : (!mini.ptr<i32>) -> i32
        %13093 = "mini.new"() {"typ" = !llvm.struct<(i32, f64, i32)>, "class_name" = "Animal", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Animal">
        %13094 = "mini.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %13095 = "mini.literal"() {"value" = 1.800000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
        %13096 = "mini.literal"() {"value" = 23 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %13097 = builtin.unrealized_conversion_cast %13094 : !mini.ptr<i32> to !mini.ptr<i32>
        %13098 = "mini.unwrap"(%13097) : (!mini.ptr<i32>) -> i32
        %13099 = builtin.unrealized_conversion_cast %13095 : !mini.ptr<f64> to !mini.ptr<f64>
        %13100 = "mini.unwrap"(%13099) : (!mini.ptr<f64>) -> f64
        %13101 = builtin.unrealized_conversion_cast %13096 : !mini.ptr<i32> to !mini.ptr<i32>
        %13102 = "mini.unwrap"(%13101) : (!mini.ptr<i32>) -> i32
        %13103 = "mini.unwrap"(%13093) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %13104 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
        %13105 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
        %13106 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
        %13107 = "mini.parameterizations_array"(%13104, %13105, %13106) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mini.method_call"(%13107, %13103, %13098, %13100, %13102) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "f64_typ", "i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64, i32) -> ()
        %13108 = "mini.to_fat_ptr"(%13093) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
        %13109 = "mini.refer"(%13108) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
        "mini.castassign"(%13086, %13109) ({
          %13110 = builtin.unrealized_conversion_cast %13109 : !mini.fatptr<"Animal"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
        }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Animal", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>, !mini.fatptr<"Animal">) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%13066, %13086) ({
        %13111 = builtin.unrealized_conversion_cast %13086 : !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>, !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>) -> ()
    }) : () -> ()
    %13112 = "mini.checkflag"(%13066) {"typ_name" = "i32_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>) -> i1
    %13113 = "mini.unwrap"(%13112) : (i1) -> i1
    %13114 = builtin.unrealized_conversion_cast %13066 : !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
    "mini.if"(%13113) ({
      %13115 = "mini.narrow"(%13114) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>) -> !mini.ptr<i32>
      %13116 = "mini.unionize"(%13115) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
      %13117 = "mini.unwrap"(%13116) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %13118 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13119 = "mini.parameterizations_array"(%13118) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%13119, %13117) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%13114, %13115) ({
        %13120 = "mini.unionize"(%13115) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
      }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %13121 = "mini.checkflag"(%13114) {"typ_name" = "Animal", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>) -> i1
    %13122 = "mini.unwrap"(%13121) : (i1) -> i1
    %13123 = builtin.unrealized_conversion_cast %13114 : !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
    "mini.if"(%13122) ({
      %13124 = "mini.to_fat_ptr"(%13123) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Animal", "invariant"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>) -> !mini.fatptr<"Animal">
      %13125 = "mini.unwrap"(%13124) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      "mini.call"(%13125) {"func_name" = "make_em_speak", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      "mini.castassign"(%13123, %13124) ({
        %13126 = builtin.unrealized_conversion_cast %13124 : !mini.fatptr<"Animal"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Animal", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>, !mini.fatptr<"Animal">) -> ()
    }) : (i1) -> ()
    %13127 = "mini.unwrap"(%12914) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13128 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%13128, %13127) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13129 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13130 = "mini.unwrap"(%13129) : (!mini.ptr<i32>) -> i32
    %13131 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ListNode", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ListNode">
    %13132 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13133 = builtin.unrealized_conversion_cast %13132 : !mini.ptr<i32> to !mini.ptr<i32>
    %13134 = "mini.unwrap"(%13133) : (!mini.ptr<i32>) -> i32
    %13135 = "mini.unwrap"(%13131) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13136 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13137 = "mini.parameterizations_array"(%13136) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13137, %13135, %13134) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %13138 = "mini.to_fat_ptr"(%13131) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %13139 = "mini.refer"(%13138) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %13140 = "mini.to_fat_ptr"(%13139) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %13141 = "mini.refer"(%13140) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %13142 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13143 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13144 = "mini.unwrap"(%13142) : (!mini.ptr<i32>) -> i32
    %13145 = "mini.unwrap"(%13143) : (!mini.ptr<i32>) -> i32
    %13146 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %13147 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13148 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13149 = builtin.unrealized_conversion_cast %13147 : !mini.ptr<i32> to !mini.ptr<i32>
    %13150 = "mini.unwrap"(%13149) : (!mini.ptr<i32>) -> i32
    %13151 = builtin.unrealized_conversion_cast %13148 : !mini.ptr<i32> to !mini.ptr<i32>
    %13152 = "mini.unwrap"(%13151) : (!mini.ptr<i32>) -> i32
    %13153 = "mini.unwrap"(%13146) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13154 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13155 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13156 = "mini.parameterizations_array"(%13154, %13155) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13156, %13153, %13150, %13152) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %13157 = "mini.unwrap"(%13146) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13158 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13159 = "mini.method_call"(%13158, %13157) {"offset" = 16 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %13160 = "mini.to_fat_ptr"(%13159) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"RangeIterator">
    %13161 = "mini.to_fat_ptr"(%13160) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %13162 = "mini.refer"(%13161) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %13163 = "mini.unwrap"(%13162) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13164 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %13165 = "mini.method_call"(%13164, %13163) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 9 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13166 = builtin.unrealized_conversion_cast %13165 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13167 = "mini.checkflag"(%13166) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %13168 = "mini.unwrap"(%13167) : (i1) -> i1
    }, {
      %13169 = "mini.narrow"(%13166) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %13170 = "mini.unwrap"(%13169) : (!mini.ptr<i32>) -> i32
      %13171 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ListNode", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ListNode">
      %13172 = builtin.unrealized_conversion_cast %13169 : !mini.ptr<i32> to !mini.ptr<i32>
      %13173 = "mini.unwrap"(%13172) : (!mini.ptr<i32>) -> i32
      %13174 = "mini.unwrap"(%13171) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13175 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13176 = "mini.parameterizations_array"(%13175) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%13176, %13174, %13173) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %13177 = "mini.to_fat_ptr"(%13171) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      %13178 = "mini.unwrap"(%13177) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13179 = "mini.unwrap"(%13141) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13180 = "mini.parameterization"() {"id_hierarchy" = ["ListNode"], "name_hierarchy" = ["ListNode"]} : () -> !llvm.ptr
      %13181 = "mini.parameterizations_array"(%13180) : (!llvm.ptr) -> !llvm.ptr
      %13182 = "mini.method_call"(%13181, %13179, %13178) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
      %13183 = "mini.to_fat_ptr"(%13182) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      "mini.castassign"(%13141, %13183) ({
        %13184 = "mini.to_fat_ptr"(%13183) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "should_offset"} : (!mini.fatptr<"ListNode">, !mini.fatptr<"ListNode">) -> ()
      "mini.castassign"(%13166, %13169) ({
        %13185 = builtin.unrealized_conversion_cast %13169 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %13186 = "mini.unwrap"(%13139) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13187 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13188 = "mini.method_call"(%13187, %13186) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %13189 = builtin.unrealized_conversion_cast %13188 : !mini.ptr<i32> to !mini.ptr<i32>
    %13190 = "mini.unionize"(%13189) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13191 = "mini.unwrap"(%13190) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13192 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13193 = "mini.parameterizations_array"(%13192) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13193, %13191) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13194 = "mini.unwrap"(%13139) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13195 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13196 = "mini.method_call"(%13195, %13194) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListIterator">
    %13197 = "mini.to_fat_ptr"(%13196) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator", "invariant"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %13198 = "mini.to_fat_ptr"(%13197) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator", "invariant"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %13199 = "mini.refer"(%13198) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    "mini.while"() ({
      %13200 = "mini.unwrap"(%13199) : (!mini.fatptr<"ListIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13201 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %13202 = "mini.method_call"(%13201, %13200) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
      %13203 = builtin.unrealized_conversion_cast %13202 : !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]> to !mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>
      %13204 = "mini.checkflag"(%13203) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> i1
      %13205 = "mini.unwrap"(%13204) : (i1) -> i1
    }, {
      %13206 = "mini.to_fat_ptr"(%13203) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "ListNode", "invariant"} : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>) -> !mini.fatptr<"ListNode">
      %13207 = "mini.unwrap"(%13206) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13208 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %13209 = "mini.method_call"(%13208, %13207) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
      %13210 = builtin.unrealized_conversion_cast %13209 : !mini.ptr<i32> to !mini.ptr<i32>
      %13211 = "mini.unionize"(%13210) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
      %13212 = "mini.unwrap"(%13211) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %13213 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13214 = "mini.parameterizations_array"(%13213) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%13214, %13212) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%13203, %13206) ({
        %13215 = "mini.to_fat_ptr"(%13206) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "should_offset"} : (!mini.union<[!mini.fatptr<"ListNode">, !mini.nil]>, !mini.fatptr<"ListNode">) -> ()
    }) : () -> ()
    %13216 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    %13217 = "mini.addr_of"() {"global_name" = @print88} : () -> !llvm.ptr
    "llvm.store"(%13217, %13216) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %13218 = "mini.coro_create"(%13216) {"arg_passer" = @coroutine_fjtnnnlntu_passer, "buffer_filler" = @coroutine_fjtnnnlntu_buffer_filler} : (!llvm.ptr) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %13219 = builtin.unrealized_conversion_cast %13218 : !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing> to !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %13220 = "mini.refer"(%13219) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %13221 = "mini.coro_call"(%13220) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13222 = "mini.wrap"(%13221) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %13223 = "mini.literal"() {"value" = 89 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13224 = "mini.unionize"(%13223) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13225 = "mini.unwrap"(%13224) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13226 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13227 = "mini.parameterizations_array"(%13226) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13227, %13225) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13228 = "mini.coro_call"(%13220) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13229 = "mini.wrap"(%13228) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %13230 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13231 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13232 = "mini.unwrap"(%13230) : (!mini.ptr<i32>) -> i32
    %13233 = "mini.unwrap"(%13231) : (!mini.ptr<i32>) -> i32
    %13234 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %13235 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13236 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13237 = builtin.unrealized_conversion_cast %13235 : !mini.ptr<i32> to !mini.ptr<i32>
    %13238 = "mini.unwrap"(%13237) : (!mini.ptr<i32>) -> i32
    %13239 = builtin.unrealized_conversion_cast %13236 : !mini.ptr<i32> to !mini.ptr<i32>
    %13240 = "mini.unwrap"(%13239) : (!mini.ptr<i32>) -> i32
    %13241 = "mini.unwrap"(%13234) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13242 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13243 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13244 = "mini.parameterizations_array"(%13242, %13243) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13244, %13241, %13238, %13240) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %13245 = "mini.unwrap"(%13234) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13246 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13247 = "mini.method_call"(%13246, %13245) {"offset" = 16 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %13248 = "mini.to_fat_ptr"(%13247) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"RangeIterator">
    %13249 = "mini.to_fat_ptr"(%13248) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %13250 = "mini.refer"(%13249) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %13251 = "mini.unwrap"(%13250) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13252 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %13253 = "mini.method_call"(%13252, %13251) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 9 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13254 = builtin.unrealized_conversion_cast %13253 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13255 = "mini.checkflag"(%13254) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %13256 = "mini.unwrap"(%13255) : (i1) -> i1
    }, {
      %13257 = "mini.narrow"(%13254) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %13258 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %13259 = "mini.unwrap"(%13257) : (!mini.ptr<i32>) -> i32
      %13260 = "mini.unwrap"(%13258) : (!mini.ptr<i32>) -> i32
      %13261 = "mini.comparison"(%13259, %13260) {"op" = "EQ"} : (i32, i32) -> i1
      %13262 = "mini.wrap"(%13261) : (i1) -> !mini.ptr<i32>
      %13263 = "mini.unwrap"(%13262) : (!mini.ptr<i32>) -> i1
      "mini.if"(%13263) ({
        "mini.break"() [^bb1871] : () -> ()
      }) : (i1) -> ()
      %13264 = "mini.unionize"(%13257) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
      %13265 = "mini.unwrap"(%13264) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %13266 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13267 = "mini.parameterizations_array"(%13266) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%13267, %13265) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%13254, %13257) ({
        %13268 = builtin.unrealized_conversion_cast %13257 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %13269 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13270 = "mini.create_buffer"(%13269) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %13271 = builtin.unrealized_conversion_cast %13270 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %13272 = "mini.refer"(%13271) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %13273 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13274 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13275 = "mini.buffer_get"(%13272, %13274) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13275, %13273) ({
      %13276 = builtin.unrealized_conversion_cast %13273 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13277 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13278 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13279 = "mini.buffer_get"(%13272, %13278) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13279, %13277) ({
      %13280 = builtin.unrealized_conversion_cast %13277 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13281 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13282 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13283 = "mini.buffer_get"(%13272, %13282) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13283, %13281) ({
      %13284 = builtin.unrealized_conversion_cast %13281 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13285 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13286 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13287 = "mini.buffer_get"(%13272, %13286) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13287, %13285) ({
      %13288 = builtin.unrealized_conversion_cast %13285 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13289 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13290 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13291 = "mini.unwrap"(%13272) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13292 = "mini.unwrap"(%13289) : (!mini.ptr<i32>) -> i32
    %13293 = "mini.unwrap"(%13290) : (!mini.ptr<i32>) -> i32
    %13294 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %13295 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13296 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13297 = builtin.unrealized_conversion_cast %13272 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %13298 = "mini.unwrap"(%13297) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13299 = builtin.unrealized_conversion_cast %13295 : !mini.ptr<i32> to !mini.ptr<i32>
    %13300 = "mini.unwrap"(%13299) : (!mini.ptr<i32>) -> i32
    %13301 = builtin.unrealized_conversion_cast %13296 : !mini.ptr<i32> to !mini.ptr<i32>
    %13302 = "mini.unwrap"(%13301) : (!mini.ptr<i32>) -> i32
    %13303 = "mini.unwrap"(%13294) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13304 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %13305 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13306 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13307 = "mini.parameterizations_array"(%13304, %13305, %13306) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13307, %13303, %13298, %13300, %13302) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13308 = "mini.to_fat_ptr"(%13294) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %13309 = "mini.refer"(%13308) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %13310 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13311 = "mini.create_buffer"(%13310) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %13312 = builtin.unrealized_conversion_cast %13311 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %13313 = "mini.refer"(%13312) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %13314 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13315 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13316 = "mini.buffer_get"(%13313, %13315) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13316, %13314) ({
      %13317 = builtin.unrealized_conversion_cast %13314 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13318 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13319 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13320 = "mini.buffer_get"(%13313, %13319) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13320, %13318) ({
      %13321 = builtin.unrealized_conversion_cast %13318 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13322 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13323 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13324 = "mini.buffer_get"(%13313, %13323) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13324, %13322) ({
      %13325 = builtin.unrealized_conversion_cast %13322 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13326 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13327 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13328 = "mini.buffer_get"(%13313, %13327) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13328, %13326) ({
      %13329 = builtin.unrealized_conversion_cast %13326 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13330 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13331 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13332 = "mini.buffer_get"(%13313, %13331) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13332, %13330) ({
      %13333 = builtin.unrealized_conversion_cast %13330 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13334 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13335 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13336 = "mini.buffer_get"(%13313, %13335) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13336, %13334) ({
      %13337 = builtin.unrealized_conversion_cast %13334 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13338 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13339 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13340 = "mini.unwrap"(%13313) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13341 = "mini.unwrap"(%13338) : (!mini.ptr<i32>) -> i32
    %13342 = "mini.unwrap"(%13339) : (!mini.ptr<i32>) -> i32
    %13343 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %13344 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13345 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13346 = builtin.unrealized_conversion_cast %13313 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %13347 = "mini.unwrap"(%13346) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13348 = builtin.unrealized_conversion_cast %13344 : !mini.ptr<i32> to !mini.ptr<i32>
    %13349 = "mini.unwrap"(%13348) : (!mini.ptr<i32>) -> i32
    %13350 = builtin.unrealized_conversion_cast %13345 : !mini.ptr<i32> to !mini.ptr<i32>
    %13351 = "mini.unwrap"(%13350) : (!mini.ptr<i32>) -> i32
    %13352 = "mini.unwrap"(%13343) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13353 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %13354 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13355 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13356 = "mini.parameterizations_array"(%13353, %13354, %13355) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13356, %13352, %13347, %13349, %13351) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13357 = "mini.to_fat_ptr"(%13343) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %13358 = "mini.unwrap"(%13357) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13359 = "mini.unwrap"(%13309) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13360 = "mini.parameterization"() {"id_hierarchy" = ["IntArray"], "name_hierarchy" = ["IntArray"]} : () -> !llvm.ptr
    %13361 = "mini.parameterizations_array"(%13360) : (!llvm.ptr) -> !llvm.ptr
    %13362 = "mini.method_call"(%13361, %13359, %13358) {"offset" = 10 : i32, "vptrs" = [#none], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %13363 = "mini.to_fat_ptr"(%13362) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %13364 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13365 = builtin.unrealized_conversion_cast %13364 : !mini.ptr<i32> to !mini.ptr<i32>
    %13366 = "mini.unwrap"(%13365) : (!mini.ptr<i32>) -> i32
    %13367 = "mini.unwrap"(%13309) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13368 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13369 = "mini.parameterizations_array"(%13368) : (!llvm.ptr) -> !llvm.ptr
    %13370 = "mini.method_call"(%13369, %13367, %13366) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.ptr<i32>
    %13371 = builtin.unrealized_conversion_cast %13370 : !mini.ptr<i32> to !mini.ptr<i32>
    %13372 = "mini.unionize"(%13371) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13373 = "mini.unwrap"(%13372) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13374 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13375 = "mini.parameterizations_array"(%13374) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13375, %13373) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13376 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13377 = "mini.create_buffer"(%13376) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %13378 = builtin.unrealized_conversion_cast %13377 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %13379 = "mini.refer"(%13378) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %13380 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13381 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13382 = "mini.unwrap"(%13379) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13383 = "mini.unwrap"(%13380) : (!mini.ptr<i32>) -> i32
    %13384 = "mini.unwrap"(%13381) : (!mini.ptr<i32>) -> i32
    %13385 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %13386 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13387 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13388 = builtin.unrealized_conversion_cast %13379 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %13389 = "mini.unwrap"(%13388) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13390 = builtin.unrealized_conversion_cast %13386 : !mini.ptr<i32> to !mini.ptr<i32>
    %13391 = "mini.unwrap"(%13390) : (!mini.ptr<i32>) -> i32
    %13392 = builtin.unrealized_conversion_cast %13387 : !mini.ptr<i32> to !mini.ptr<i32>
    %13393 = "mini.unwrap"(%13392) : (!mini.ptr<i32>) -> i32
    %13394 = "mini.unwrap"(%13385) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13395 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %13396 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13397 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13398 = "mini.parameterizations_array"(%13395, %13396, %13397) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13398, %13394, %13389, %13391, %13393) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13399 = "mini.to_fat_ptr"(%13385) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %13400 = "mini.refer"(%13399) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %13401 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13402 = "mini.create_buffer"(%13401) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %13403 = builtin.unrealized_conversion_cast %13402 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %13404 = "mini.refer"(%13403) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %13405 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13406 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13407 = "mini.buffer_get"(%13404, %13406) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13407, %13405) ({
      %13408 = builtin.unrealized_conversion_cast %13405 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13409 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13410 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13411 = "mini.buffer_get"(%13404, %13410) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13411, %13409) ({
      %13412 = builtin.unrealized_conversion_cast %13409 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13413 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13414 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13415 = "mini.buffer_get"(%13404, %13414) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13415, %13413) ({
      %13416 = builtin.unrealized_conversion_cast %13413 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13417 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13418 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13419 = "mini.buffer_get"(%13404, %13418) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13419, %13417) ({
      %13420 = builtin.unrealized_conversion_cast %13417 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13421 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13422 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13423 = "mini.unwrap"(%13404) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13424 = "mini.unwrap"(%13421) : (!mini.ptr<i32>) -> i32
    %13425 = "mini.unwrap"(%13422) : (!mini.ptr<i32>) -> i32
    %13426 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %13427 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13428 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13429 = builtin.unrealized_conversion_cast %13404 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %13430 = "mini.unwrap"(%13429) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13431 = builtin.unrealized_conversion_cast %13427 : !mini.ptr<i32> to !mini.ptr<i32>
    %13432 = "mini.unwrap"(%13431) : (!mini.ptr<i32>) -> i32
    %13433 = builtin.unrealized_conversion_cast %13428 : !mini.ptr<i32> to !mini.ptr<i32>
    %13434 = "mini.unwrap"(%13433) : (!mini.ptr<i32>) -> i32
    %13435 = "mini.unwrap"(%13426) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13436 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %13437 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13438 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13439 = "mini.parameterizations_array"(%13436, %13437, %13438) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13439, %13435, %13430, %13432, %13434) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13440 = "mini.to_fat_ptr"(%13426) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %13441 = "mini.unwrap"(%13440) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13442 = "mini.unwrap"(%13400) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13443 = "mini.parameterization"() {"id_hierarchy" = ["IntArray"], "name_hierarchy" = ["IntArray"]} : () -> !llvm.ptr
    %13444 = "mini.parameterizations_array"(%13443) : (!llvm.ptr) -> !llvm.ptr
    %13445 = "mini.method_call"(%13444, %13442, %13441) {"offset" = 10 : i32, "vptrs" = [#none], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %13446 = "mini.to_fat_ptr"(%13445) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %13447 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13448 = builtin.unrealized_conversion_cast %13447 : !mini.ptr<i32> to !mini.ptr<i32>
    %13449 = "mini.unwrap"(%13448) : (!mini.ptr<i32>) -> i32
    %13450 = "mini.unwrap"(%13400) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13451 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13452 = "mini.parameterizations_array"(%13451) : (!llvm.ptr) -> !llvm.ptr
    %13453 = "mini.method_call"(%13452, %13450, %13449) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.ptr<i32>
    %13454 = builtin.unrealized_conversion_cast %13453 : !mini.ptr<i32> to !mini.ptr<i32>
    %13455 = "mini.unionize"(%13454) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13456 = "mini.unwrap"(%13455) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13457 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13458 = "mini.parameterizations_array"(%13457) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13458, %13456) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.call"() {"func_name" = "grabo", "ret_type" = !llvm.void} : () -> ()
    %13459 = "mini.checkflag"(%13309) {"typ_name" = "IntArray", "struct_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> i1
    %13460 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13461 = builtin.unrealized_conversion_cast %13460 : !mini.ptr<i32> to !mini.ptr<i32>
    %13462 = "mini.unwrap"(%13461) : (!mini.ptr<i32>) -> i32
    %13463 = "mini.unwrap"(%13309) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13464 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13465 = "mini.parameterizations_array"(%13464) : (!llvm.ptr) -> !llvm.ptr
    %13466 = "mini.method_call"(%13465, %13463, %13462) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.ptr<i32>
    %13467 = builtin.unrealized_conversion_cast %13466 : !mini.ptr<i32> to !mini.ptr<i32>
    %13468 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13469 = "mini.unwrap"(%13467) : (!mini.ptr<i32>) -> i32
    %13470 = "mini.unwrap"(%13468) : (!mini.ptr<i32>) -> i32
    %13471 = "mini.comparison"(%13469, %13470) {"op" = "EQ"} : (i32, i32) -> i1
    %13472 = "mini.wrap"(%13471) : (i1) -> !mini.ptr<i32>
    %13473 = "mini.unwrap"(%13459) : (i1) -> i1
    %13474 = "mini.unwrap"(%13472) : (!mini.ptr<i32>) -> i1
    %13475 = "mini.logical"(%13473, %13474) {"op" = "and"} : (i1, i1) -> i1
    %13476 = "mini.wrap"(%13475) : (i1) -> !mini.ptr<i1>
    %13477 = "mini.unwrap"(%13476) : (!mini.ptr<i1>) -> i1
    "mini.if"(%13477) ({
      %13478 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %13479 = "mini.create_buffer"(%13478) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %13480 = builtin.unrealized_conversion_cast %13479 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %13481 = "mini.refer"(%13480) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %13482 = "mini.literal"() {"typ" = !llvm.array<14 x i8>, "value" = "so it is true!"} : () -> !llvm.ptr
      %13483 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%13481, %13483, %13482) {"typ" = !llvm.array<14 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %13484 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %13485 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %13486 = "mini.unwrap"(%13481) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %13487 = "mini.unwrap"(%13484) : (!mini.ptr<i32>) -> i32
      %13488 = "mini.unwrap"(%13485) : (!mini.ptr<i32>) -> i32
      %13489 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %13490 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %13491 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %13492 = builtin.unrealized_conversion_cast %13481 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %13493 = "mini.unwrap"(%13492) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %13494 = builtin.unrealized_conversion_cast %13490 : !mini.ptr<i32> to !mini.ptr<i32>
      %13495 = "mini.unwrap"(%13494) : (!mini.ptr<i32>) -> i32
      %13496 = builtin.unrealized_conversion_cast %13491 : !mini.ptr<i32> to !mini.ptr<i32>
      %13497 = "mini.unwrap"(%13496) : (!mini.ptr<i32>) -> i32
      %13498 = "mini.unwrap"(%13489) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13499 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %13500 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13501 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13502 = "mini.parameterizations_array"(%13499, %13500, %13501) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%13502, %13498, %13493, %13495, %13497) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %13503 = builtin.unrealized_conversion_cast %13489 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
      %13504 = "mini.unwrap"(%13503) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %13505 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %13506 = "mini.parameterizations_array"(%13505) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%13506, %13504) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) : (i1) -> ()
    %13507 = "mini.literal"() {"value" = 5 : i64, "typ" = i64} : () -> !mini.ptr<i64>
    %13508 = builtin.unrealized_conversion_cast %13507 : !mini.ptr<i64> to !mini.ptr<i64>
    %13509 = "mini.unionize"(%13508) {"from_typ" = i64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13510 = "mini.unwrap"(%13509) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13511 = "mini.parameterization"() {"id_hierarchy" = ["i64_typ"], "name_hierarchy" = ["Ptri64"]} : () -> !llvm.ptr
    %13512 = "mini.parameterizations_array"(%13511) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13512, %13510) {"offset" = 0 : i32, "vptrs" = ["i64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13513 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13514 = "mini.int_to_float"(%13513) {"from_typ" = i32, "to_typ" = f64, "from_typ_name" = "i32_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<i32>) -> !mini.ptr<f64>
    %13515 = "mini.unionize"(%13514) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13516 = "mini.unwrap"(%13515) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13517 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %13518 = "mini.parameterizations_array"(%13517) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13518, %13516) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13519 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13520 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13521 = "mini.unwrap"(%13519) : (!mini.ptr<i32>) -> i32
    %13522 = "mini.unwrap"(%13520) : (!mini.ptr<i32>) -> i32
    %13523 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %13524 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13525 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13526 = builtin.unrealized_conversion_cast %13524 : !mini.ptr<i32> to !mini.ptr<i32>
    %13527 = "mini.unwrap"(%13526) : (!mini.ptr<i32>) -> i32
    %13528 = builtin.unrealized_conversion_cast %13525 : !mini.ptr<i32> to !mini.ptr<i32>
    %13529 = "mini.unwrap"(%13528) : (!mini.ptr<i32>) -> i32
    %13530 = "mini.unwrap"(%13523) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13531 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13532 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13533 = "mini.parameterizations_array"(%13531, %13532) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13533, %13530, %13527, %13529) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %13534 = "mini.unwrap"(%13523) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13535 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13536 = "mini.method_call"(%13535, %13534) {"offset" = 16 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %13537 = "mini.to_fat_ptr"(%13536) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"RangeIterator">
    %13538 = "mini.to_fat_ptr"(%13537) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %13539 = "mini.refer"(%13538) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %13540 = "mini.unwrap"(%13539) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13541 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %13542 = "mini.method_call"(%13541, %13540) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 9 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13543 = builtin.unrealized_conversion_cast %13542 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13544 = "mini.checkflag"(%13543) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %13545 = "mini.unwrap"(%13544) : (i1) -> i1
    }, {
      %13546 = "mini.narrow"(%13543) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %13547 = "mini.unionize"(%13546) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
      %13548 = "mini.unwrap"(%13547) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %13549 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13550 = "mini.parameterizations_array"(%13549) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%13550, %13548) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%13543, %13546) ({
        %13551 = builtin.unrealized_conversion_cast %13546 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %13552 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13553 = "mini.create_buffer"(%13552) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %13554 = builtin.unrealized_conversion_cast %13553 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %13555 = "mini.refer"(%13554) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %13556 = "mini.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13557 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13558 = "mini.buffer_get"(%13555, %13557) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13558, %13556) ({
      %13559 = builtin.unrealized_conversion_cast %13556 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13560 = "mini.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13561 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13562 = "mini.buffer_get"(%13555, %13561) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13562, %13560) ({
      %13563 = builtin.unrealized_conversion_cast %13560 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13564 = "mini.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13565 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13566 = "mini.buffer_get"(%13555, %13565) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13566, %13564) ({
      %13567 = builtin.unrealized_conversion_cast %13564 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13568 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13569 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13570 = "mini.unwrap"(%13555) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13571 = "mini.unwrap"(%13568) : (!mini.ptr<i32>) -> i32
    %13572 = "mini.unwrap"(%13569) : (!mini.ptr<i32>) -> i32
    %13573 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %13574 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13575 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13576 = builtin.unrealized_conversion_cast %13555 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %13577 = "mini.unwrap"(%13576) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13578 = builtin.unrealized_conversion_cast %13574 : !mini.ptr<i32> to !mini.ptr<i32>
    %13579 = "mini.unwrap"(%13578) : (!mini.ptr<i32>) -> i32
    %13580 = builtin.unrealized_conversion_cast %13575 : !mini.ptr<i32> to !mini.ptr<i32>
    %13581 = "mini.unwrap"(%13580) : (!mini.ptr<i32>) -> i32
    %13582 = "mini.unwrap"(%13573) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13583 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %13584 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13585 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13586 = "mini.parameterizations_array"(%13583, %13584, %13585) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13586, %13582, %13577, %13579, %13581) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13587 = "mini.unwrap"(%13573) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13588 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13589 = "mini.method_call"(%13588, %13587) {"offset" = 24 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %13590 = "mini.to_fat_ptr"(%13589) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntArrayIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntArrayIterator">
    %13591 = "mini.to_fat_ptr"(%13590) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArrayIterator", "to_typ_name" = "IntArrayIterator", "invariant"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArrayIterator">
    %13592 = "mini.refer"(%13591) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArrayIterator">
    "mini.while"() ({
      %13593 = "mini.unwrap"(%13592) : (!mini.fatptr<"IntArrayIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13594 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %13595 = "mini.method_call"(%13594, %13593) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13596 = builtin.unrealized_conversion_cast %13595 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13597 = "mini.checkflag"(%13596) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %13598 = "mini.unwrap"(%13597) : (i1) -> i1
    }, {
      %13599 = "mini.narrow"(%13596) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %13600 = "mini.unionize"(%13599) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
      %13601 = "mini.unwrap"(%13600) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %13602 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13603 = "mini.parameterizations_array"(%13602) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%13603, %13601) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%13596, %13599) ({
        %13604 = builtin.unrealized_conversion_cast %13599 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %13605 = "mini.literal"() {"value" = 3 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %13606 = builtin.unrealized_conversion_cast %13605 : !mini.ptr<i8> to !mini.ptr<i8>
    %13607 = "mini.unionize"(%13606) {"from_typ" = i8, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i8>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13608 = "mini.unwrap"(%13607) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13609 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["Ptri8"]} : () -> !llvm.ptr
    %13610 = "mini.parameterizations_array"(%13609) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13610, %13608) {"offset" = 0 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13611 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13612 = "mini.create_buffer"(%13611) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %13613 = builtin.unrealized_conversion_cast %13612 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %13614 = "mini.refer"(%13613) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %13615 = "mini.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "boom!"} : () -> !llvm.ptr
    %13616 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%13614, %13616, %13615) {"typ" = !llvm.array<5 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %13617 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13618 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13619 = "mini.unwrap"(%13614) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13620 = "mini.unwrap"(%13617) : (!mini.ptr<i32>) -> i32
    %13621 = "mini.unwrap"(%13618) : (!mini.ptr<i32>) -> i32
    %13622 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %13623 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13624 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13625 = builtin.unrealized_conversion_cast %13614 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13626 = "mini.unwrap"(%13625) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13627 = builtin.unrealized_conversion_cast %13623 : !mini.ptr<i32> to !mini.ptr<i32>
    %13628 = "mini.unwrap"(%13627) : (!mini.ptr<i32>) -> i32
    %13629 = builtin.unrealized_conversion_cast %13624 : !mini.ptr<i32> to !mini.ptr<i32>
    %13630 = "mini.unwrap"(%13629) : (!mini.ptr<i32>) -> i32
    %13631 = "mini.unwrap"(%13622) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13632 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13633 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13634 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13635 = "mini.parameterizations_array"(%13632, %13633, %13634) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13635, %13631, %13626, %13628, %13630) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13636 = "mini.unwrap"(%13622) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13637 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13638 = "mini.method_call"(%13637, %13636) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %13639 = "mini.to_fat_ptr"(%13638) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "StringIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"StringIterator">
    %13640 = "mini.to_fat_ptr"(%13639) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator", "invariant"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    %13641 = "mini.refer"(%13640) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    "mini.while"() ({
      %13642 = "mini.unwrap"(%13641) : (!mini.fatptr<"StringIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13643 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %13644 = "mini.method_call"(%13643, %13642) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.fatptr<"Character">, !mini.nil]>
      %13645 = builtin.unrealized_conversion_cast %13644 : !mini.union<[!mini.fatptr<"Character">, !mini.nil]> to !mini.union<[!mini.fatptr<"Character">, !mini.nil]>
      %13646 = "mini.checkflag"(%13645) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>) -> i1
      %13647 = "mini.unwrap"(%13646) : (i1) -> i1
    }, {
      %13648 = "mini.to_fat_ptr"(%13645) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Character", "invariant"} : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>) -> !mini.fatptr<"Character">
      %13649 = builtin.unrealized_conversion_cast %13648 : !mini.fatptr<"Character"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
      %13650 = "mini.unwrap"(%13649) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %13651 = "mini.parameterization"() {"id_hierarchy" = ["Character"], "name_hierarchy" = ["Character"]} : () -> !llvm.ptr
      %13652 = "mini.parameterizations_array"(%13651) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%13652, %13650) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%13645, %13648) ({
        %13653 = "mini.to_fat_ptr"(%13648) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Character", "to_typ_name" = "Character", "invariant"} : (!mini.fatptr<"Character">) -> !mini.fatptr<"Character">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Character", "to_typ_name" = "Character", "should_offset"} : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>, !mini.fatptr<"Character">) -> ()
    }) : () -> ()
    %13654 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13655 = "mini.create_buffer"(%13654) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %13656 = builtin.unrealized_conversion_cast %13655 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %13657 = "mini.refer"(%13656) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %13658 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13659 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13660 = "mini.buffer_get"(%13657, %13659) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13660, %13658) ({
      %13661 = builtin.unrealized_conversion_cast %13658 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13662 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13663 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13664 = "mini.buffer_get"(%13657, %13663) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13664, %13662) ({
      %13665 = builtin.unrealized_conversion_cast %13662 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13666 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13667 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13668 = "mini.buffer_get"(%13657, %13667) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13668, %13666) ({
      %13669 = builtin.unrealized_conversion_cast %13666 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13670 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13671 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13672 = "mini.unwrap"(%13657) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13673 = "mini.unwrap"(%13670) : (!mini.ptr<i32>) -> i32
    %13674 = "mini.unwrap"(%13671) : (!mini.ptr<i32>) -> i32
    %13675 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %13676 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13677 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13678 = builtin.unrealized_conversion_cast %13657 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %13679 = "mini.unwrap"(%13678) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13680 = builtin.unrealized_conversion_cast %13676 : !mini.ptr<i32> to !mini.ptr<i32>
    %13681 = "mini.unwrap"(%13680) : (!mini.ptr<i32>) -> i32
    %13682 = builtin.unrealized_conversion_cast %13677 : !mini.ptr<i32> to !mini.ptr<i32>
    %13683 = "mini.unwrap"(%13682) : (!mini.ptr<i32>) -> i32
    %13684 = "mini.unwrap"(%13675) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13685 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %13686 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13687 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13688 = "mini.parameterizations_array"(%13685, %13686, %13687) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13688, %13684, %13679, %13681, %13683) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13689 = "mini.unwrap"(%13675) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13690 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13691 = "mini.method_call"(%13690, %13689) {"offset" = 25 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %13692 = "mini.to_fat_ptr"(%13691) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %13693 = builtin.unrealized_conversion_cast %13692 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13694 = "mini.unwrap"(%13693) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13695 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %13696 = "mini.parameterizations_array"(%13695) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13696, %13694) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13697 = "mini.literal"() {"value" = 77 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13698 = "mini.unwrap"(%13697) : (!mini.ptr<i32>) -> i32
    %13699 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer2", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer2">
    %13700 = "mini.literal"() {"value" = 77 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13701 = builtin.unrealized_conversion_cast %13700 : !mini.ptr<i32> to !mini.ptr<i32>
    %13702 = "mini.unwrap"(%13701) : (!mini.ptr<i32>) -> i32
    %13703 = "mini.unwrap"(%13699) : (!mini.fatptr<"Integer2">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13704 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13705 = "mini.parameterizations_array"(%13704) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13705, %13703, %13702) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 40 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %13706 = "mini.to_fat_ptr"(%13699) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer2", "to_typ_name" = "Integer2", "invariant"} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %13707 = "mini.refer"(%13706) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %13708 = "mini.unwrap"(%13707) : (!mini.fatptr<"Integer2">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13709 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%13709, %13708) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 40 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13710 = builtin.unrealized_conversion_cast %13707 : !mini.fatptr<"Integer2"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13711 = "mini.unwrap"(%13710) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13712 = "mini.parameterization"() {"id_hierarchy" = ["Integer2"], "name_hierarchy" = ["Integer2"]} : () -> !llvm.ptr
    %13713 = "mini.parameterizations_array"(%13712) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13713, %13711) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13714 = "mini.unwrap"(%13707) : (!mini.fatptr<"Integer2">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13715 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%13715, %13714) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 40 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13716 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13717 = builtin.unrealized_conversion_cast %13716 : !mini.ptr<i32> to !mini.ptr<i32>
    %13718 = "mini.unwrap"(%13717) : (!mini.ptr<i32>) -> i32
    %13719 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13720 = "mini.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13721 = "mini.unwrap"(%13719) : (!mini.ptr<i32>) -> i32
    %13722 = "mini.unwrap"(%13720) : (!mini.ptr<i32>) -> i32
    %13723 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %13724 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13725 = "mini.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13726 = builtin.unrealized_conversion_cast %13724 : !mini.ptr<i32> to !mini.ptr<i32>
    %13727 = "mini.unwrap"(%13726) : (!mini.ptr<i32>) -> i32
    %13728 = builtin.unrealized_conversion_cast %13725 : !mini.ptr<i32> to !mini.ptr<i32>
    %13729 = "mini.unwrap"(%13728) : (!mini.ptr<i32>) -> i32
    %13730 = "mini.unwrap"(%13723) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13731 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13732 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13733 = "mini.parameterizations_array"(%13731, %13732) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13733, %13730, %13727, %13729) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %13734 = "mini.unwrap"(%13723) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13735 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13736 = "mini.parameterizations_array"(%13735) : (!llvm.ptr) -> !llvm.ptr
    %13737 = "mini.method_call"(%13736, %13734, %13718) {"offset" = 5 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.fatptr<"Range">
    %13738 = "mini.to_fat_ptr"(%13737) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range", "invariant"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %13739 = "mini.unwrap"(%13738) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13740 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13741 = "mini.method_call"(%13740, %13739) {"offset" = 16 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %13742 = "mini.to_fat_ptr"(%13741) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"RangeIterator">
    %13743 = "mini.to_fat_ptr"(%13742) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %13744 = "mini.refer"(%13743) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %13745 = "mini.unwrap"(%13744) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13746 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %13747 = "mini.method_call"(%13746, %13745) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 9 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13748 = builtin.unrealized_conversion_cast %13747 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13749 = "mini.checkflag"(%13748) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %13750 = "mini.unwrap"(%13749) : (i1) -> i1
    }, {
      %13751 = "mini.narrow"(%13748) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %13752 = "mini.unionize"(%13751) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
      %13753 = "mini.unwrap"(%13752) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %13754 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13755 = "mini.parameterizations_array"(%13754) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%13755, %13753) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%13748, %13751) ({
        %13756 = builtin.unrealized_conversion_cast %13751 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %13757 = "mini.addr_of"() {"global_name" = @_functionliteral_dkhwrqqsxh} : () -> !llvm.ptr
    %13758 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%13757, %13758) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %13759 = "mini.addr_of"() {"global_name" = @_functionliteral_yoimaxtxbn} : () -> !llvm.ptr
    %13760 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%13759, %13760) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %13761 = "mini.addr_of"() {"global_name" = @_functionliteral_cfqtdswlvs} : () -> !llvm.ptr
    %13762 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%13761, %13762) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %13763 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13764 = builtin.unrealized_conversion_cast %13763 : !mini.ptr<i32> to !mini.ptr<i32>
    %13765 = "mini.unwrap"(%13764) : (!mini.ptr<i32>) -> i32
    %13766 = builtin.unrealized_conversion_cast %13758 : !llvm.ptr to !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %13767 = "mini.unwrap"(%13766) : (!mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13768 = builtin.unrealized_conversion_cast %13760 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %13769 = "mini.unwrap"(%13768) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13770 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13771 = "mini.create_buffer"(%13770) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %13772 = builtin.unrealized_conversion_cast %13771 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %13773 = "mini.refer"(%13772) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %13774 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13775 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13776 = "mini.buffer_get"(%13773, %13775) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13776, %13774) ({
      %13777 = builtin.unrealized_conversion_cast %13774 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13778 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13779 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13780 = "mini.buffer_get"(%13773, %13779) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13780, %13778) ({
      %13781 = builtin.unrealized_conversion_cast %13778 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13782 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13783 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13784 = "mini.buffer_get"(%13773, %13783) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13784, %13782) ({
      %13785 = builtin.unrealized_conversion_cast %13782 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13786 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13787 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13788 = "mini.buffer_get"(%13773, %13787) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13788, %13786) ({
      %13789 = builtin.unrealized_conversion_cast %13786 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13790 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13791 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13792 = "mini.unwrap"(%13773) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13793 = "mini.unwrap"(%13790) : (!mini.ptr<i32>) -> i32
    %13794 = "mini.unwrap"(%13791) : (!mini.ptr<i32>) -> i32
    %13795 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %13796 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13797 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13798 = builtin.unrealized_conversion_cast %13773 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %13799 = "mini.unwrap"(%13798) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13800 = builtin.unrealized_conversion_cast %13796 : !mini.ptr<i32> to !mini.ptr<i32>
    %13801 = "mini.unwrap"(%13800) : (!mini.ptr<i32>) -> i32
    %13802 = builtin.unrealized_conversion_cast %13797 : !mini.ptr<i32> to !mini.ptr<i32>
    %13803 = "mini.unwrap"(%13802) : (!mini.ptr<i32>) -> i32
    %13804 = "mini.unwrap"(%13795) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13805 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %13806 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13807 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13808 = "mini.parameterizations_array"(%13805, %13806, %13807) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13808, %13804, %13799, %13801, %13803) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13809 = "mini.unwrap"(%13795) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13810 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri32", ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %13811 = "mini.parameterizations_array"(%13810) : (!llvm.ptr) -> !llvm.ptr
    %13812 = "mini.method_call"(%13811, %13809, %13769) {"offset" = 18 : i32, "vptrs" = ["function_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !mini.fatptr<"IntIterable">
    %13813 = "mini.to_fat_ptr"(%13812) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntArray">
    %13814 = "mini.unwrap"(%13813) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13815 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13816 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32._Ptri32_to_Ptri32", ["Ptri32"], ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %13817 = "mini.parameterizations_array"(%13815, %13816) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %13818 = "mini.method_call"(%13817, %13814, %13765, %13767) {"offset" = 15 : i32, "vptrs" = ["i32_typ", "function_typ"], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %13819 = builtin.unrealized_conversion_cast %13818 : !mini.ptr<i32> to !mini.ptr<i32>
    %13820 = "mini.unionize"(%13819) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13821 = "mini.unwrap"(%13820) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13822 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13823 = "mini.parameterizations_array"(%13822) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13823, %13821) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13824 = "mini.addr_of"() {"global_name" = @_functionliteral_gtkwgeihcc} : () -> !llvm.ptr
    %13825 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%13824, %13825) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %13826 = builtin.unrealized_conversion_cast %13825 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>
    %13827 = "mini.unwrap"(%13826) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>) -> !llvm.struct<(!llvm.ptr)>
    %13828 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13829 = "mini.create_buffer"(%13828) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %13830 = builtin.unrealized_conversion_cast %13829 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %13831 = "mini.refer"(%13830) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %13832 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13833 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13834 = "mini.buffer_get"(%13831, %13833) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13834, %13832) ({
      %13835 = builtin.unrealized_conversion_cast %13832 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13836 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13837 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13838 = "mini.buffer_get"(%13831, %13837) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13838, %13836) ({
      %13839 = builtin.unrealized_conversion_cast %13836 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13840 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13841 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13842 = "mini.buffer_get"(%13831, %13841) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13842, %13840) ({
      %13843 = builtin.unrealized_conversion_cast %13840 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13844 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13845 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13846 = "mini.buffer_get"(%13831, %13845) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13846, %13844) ({
      %13847 = builtin.unrealized_conversion_cast %13844 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13848 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13849 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13850 = "mini.unwrap"(%13831) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13851 = "mini.unwrap"(%13848) : (!mini.ptr<i32>) -> i32
    %13852 = "mini.unwrap"(%13849) : (!mini.ptr<i32>) -> i32
    %13853 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"IntArray">
    %13854 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13855 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13856 = builtin.unrealized_conversion_cast %13831 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %13857 = "mini.unwrap"(%13856) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13858 = builtin.unrealized_conversion_cast %13854 : !mini.ptr<i32> to !mini.ptr<i32>
    %13859 = "mini.unwrap"(%13858) : (!mini.ptr<i32>) -> i32
    %13860 = builtin.unrealized_conversion_cast %13855 : !mini.ptr<i32> to !mini.ptr<i32>
    %13861 = "mini.unwrap"(%13860) : (!mini.ptr<i32>) -> i32
    %13862 = "mini.unwrap"(%13853) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13863 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %13864 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13865 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13866 = "mini.parameterizations_array"(%13863, %13864, %13865) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13866, %13862, %13857, %13859, %13861) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13867 = "mini.unwrap"(%13853) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13868 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["nothing_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Nothing", ["Nothing"], ["Ptri32"]]} : () -> !llvm.ptr
    %13869 = "mini.parameterizations_array"(%13868) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13869, %13867, %13827) {"offset" = 14 : i32, "vptrs" = ["function_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %13870 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13871 = "mini.create_buffer"(%13870) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %13872 = builtin.unrealized_conversion_cast %13871 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %13873 = "mini.refer"(%13872) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %13874 = "mini.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "bigtings.txt"} : () -> !llvm.ptr
    %13875 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%13873, %13875, %13874) {"typ" = !llvm.array<12 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %13876 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13877 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13878 = "mini.unwrap"(%13873) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13879 = "mini.unwrap"(%13876) : (!mini.ptr<i32>) -> i32
    %13880 = "mini.unwrap"(%13877) : (!mini.ptr<i32>) -> i32
    %13881 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %13882 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13883 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13884 = builtin.unrealized_conversion_cast %13873 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13885 = "mini.unwrap"(%13884) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13886 = builtin.unrealized_conversion_cast %13882 : !mini.ptr<i32> to !mini.ptr<i32>
    %13887 = "mini.unwrap"(%13886) : (!mini.ptr<i32>) -> i32
    %13888 = builtin.unrealized_conversion_cast %13883 : !mini.ptr<i32> to !mini.ptr<i32>
    %13889 = "mini.unwrap"(%13888) : (!mini.ptr<i32>) -> i32
    %13890 = "mini.unwrap"(%13881) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13891 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13892 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13893 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13894 = "mini.parameterizations_array"(%13891, %13892, %13893) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13894, %13890, %13885, %13887, %13889) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13895 = "mini.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13896 = "mini.create_buffer"(%13895) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %13897 = builtin.unrealized_conversion_cast %13896 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %13898 = "mini.refer"(%13897) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %13899 = "mini.literal"() {"typ" = !llvm.array<20 x i8>, "value" = "this\nis how\nwe do\nit"} : () -> !llvm.ptr
    %13900 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%13898, %13900, %13899) {"typ" = !llvm.array<20 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %13901 = "mini.literal"() {"value" = 20 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13902 = "mini.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13903 = "mini.unwrap"(%13898) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13904 = "mini.unwrap"(%13901) : (!mini.ptr<i32>) -> i32
    %13905 = "mini.unwrap"(%13902) : (!mini.ptr<i32>) -> i32
    %13906 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %13907 = "mini.literal"() {"value" = 20 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13908 = "mini.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13909 = builtin.unrealized_conversion_cast %13898 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13910 = "mini.unwrap"(%13909) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13911 = builtin.unrealized_conversion_cast %13907 : !mini.ptr<i32> to !mini.ptr<i32>
    %13912 = "mini.unwrap"(%13911) : (!mini.ptr<i32>) -> i32
    %13913 = builtin.unrealized_conversion_cast %13908 : !mini.ptr<i32> to !mini.ptr<i32>
    %13914 = "mini.unwrap"(%13913) : (!mini.ptr<i32>) -> i32
    %13915 = "mini.unwrap"(%13906) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13916 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13917 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13918 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13919 = "mini.parameterizations_array"(%13916, %13917, %13918) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13919, %13915, %13910, %13912, %13914) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13920 = "mini.unwrap"(%13881) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13921 = "mini.unwrap"(%13906) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    "mini.call"(%13920, %13921) {"func_name" = "write_file", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13922 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13923 = "mini.create_buffer"(%13922) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %13924 = builtin.unrealized_conversion_cast %13923 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %13925 = "mini.refer"(%13924) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %13926 = "mini.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "bigtings.txt"} : () -> !llvm.ptr
    %13927 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%13925, %13927, %13926) {"typ" = !llvm.array<12 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %13928 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13929 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13930 = "mini.unwrap"(%13925) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13931 = "mini.unwrap"(%13928) : (!mini.ptr<i32>) -> i32
    %13932 = "mini.unwrap"(%13929) : (!mini.ptr<i32>) -> i32
    %13933 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %13934 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13935 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13936 = builtin.unrealized_conversion_cast %13925 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13937 = "mini.unwrap"(%13936) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13938 = builtin.unrealized_conversion_cast %13934 : !mini.ptr<i32> to !mini.ptr<i32>
    %13939 = "mini.unwrap"(%13938) : (!mini.ptr<i32>) -> i32
    %13940 = builtin.unrealized_conversion_cast %13935 : !mini.ptr<i32> to !mini.ptr<i32>
    %13941 = "mini.unwrap"(%13940) : (!mini.ptr<i32>) -> i32
    %13942 = "mini.unwrap"(%13933) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13943 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13944 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13945 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13946 = "mini.parameterizations_array"(%13943, %13944, %13945) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13946, %13942, %13937, %13939, %13941) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13947 = "mini.unwrap"(%13933) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13948 = "mini.call"(%13947) {"func_name" = "read_file", "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %13949 = builtin.unrealized_conversion_cast %13948 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13950 = "mini.unwrap"(%13949) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13951 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %13952 = "mini.parameterizations_array"(%13951) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13952, %13950) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13953 = "mini.addr_of"() {"global_name" = @_functionliteral_qlcqxadlob} : () -> !llvm.ptr
    %13954 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%13953, %13954) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %13955 = builtin.unrealized_conversion_cast %13954 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>
    %13956 = "mini.unwrap"(%13955) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>) -> !llvm.struct<(!llvm.ptr)>
    %13957 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13958 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13959 = "mini.unwrap"(%13957) : (!mini.ptr<i32>) -> i32
    %13960 = "mini.unwrap"(%13958) : (!mini.ptr<i32>) -> i32
    %13961 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %13962 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13963 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13964 = builtin.unrealized_conversion_cast %13962 : !mini.ptr<i32> to !mini.ptr<i32>
    %13965 = "mini.unwrap"(%13964) : (!mini.ptr<i32>) -> i32
    %13966 = builtin.unrealized_conversion_cast %13963 : !mini.ptr<i32> to !mini.ptr<i32>
    %13967 = "mini.unwrap"(%13966) : (!mini.ptr<i32>) -> i32
    %13968 = "mini.unwrap"(%13961) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13969 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13970 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13971 = "mini.parameterizations_array"(%13969, %13970) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13971, %13968, %13965, %13967) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %13972 = "mini.unwrap"(%13961) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13973 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["nothing_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Nothing", ["Nothing"], ["Ptri32"]]} : () -> !llvm.ptr
    %13974 = "mini.parameterizations_array"(%13973) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13974, %13972, %13956) {"offset" = 6 : i32, "vptrs" = ["function_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %13975 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    %13976 = "mini.addr_of"() {"global_name" = @i32toi8} : () -> !llvm.ptr
    "llvm.store"(%13976, %13975) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %13977 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13978 = builtin.unrealized_conversion_cast %13977 : !mini.ptr<i32> to !mini.ptr<i32>
    %13979 = "mini.unwrap"(%13978) : (!mini.ptr<i32>) -> i32
    %13980 = "mini.unwrap"(%13975) : (!llvm.ptr) -> !llvm.ptr
    %13981 = "mini.fptr_call"(%13980, %13979) {"ret_type" = i8} : (!llvm.ptr, i32) -> !mini.ptr<i8>
    %13982 = "mini.unionize"(%13981) {"from_typ" = i8, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i8>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %13983 = "mini.unwrap"(%13982) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13984 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["Ptri8"]} : () -> !llvm.ptr
    %13985 = "mini.parameterizations_array"(%13984) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13985, %13983) {"offset" = 0 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13986 = "mini.addr_of"() {"global_name" = @_functionliteral_lqicruiyxk} : () -> !llvm.ptr
    %13987 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%13986, %13987) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %13988 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13989 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13990 = "mini.unwrap"(%13988) : (!mini.ptr<i32>) -> i32
    %13991 = "mini.unwrap"(%13989) : (!mini.ptr<i32>) -> i32
    %13992 = "mini.coro_create"(%13987, %13990, %13991) {"arg_passer" = @coroutine_gmfsuqovfy_passer, "buffer_filler" = @coroutine_gmfsuqovfy_buffer_filler} : (!llvm.ptr, i32, i32) -> !mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>
    %13993 = builtin.unrealized_conversion_cast %13992 : !mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing> to !mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>
    %13994 = "mini.refer"(%13993) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>
    %13995 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13996 = "mini.unionize"(%13995) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %13997 = "mini.unwrap"(%13996) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i32)>
    %13998 = "mini.coro_call"(%13994, %13997) : (!mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>, !llvm.struct<(!llvm.ptr, i32)>) -> !llvm.struct<(!llvm.ptr, i32)>
    %13999 = "mini.wrap"(%13998) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %14000 = "mini.reunionize"(%13999) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %14001 = "mini.unwrap"(%14000) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14002 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["i32_typ"], ["nil_typ"]], "name_hierarchy" = ["Ptri32_or_Nil", ["Ptri32"], ["Nil"]]} : () -> !llvm.ptr
    %14003 = "mini.parameterizations_array"(%14002) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14003, %14001) {"offset" = 0 : i32, "vptrs" = ["union_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14004 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14005 = "mini.unionize"(%14004) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %14006 = "mini.unwrap"(%14005) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i32)>
    %14007 = "mini.coro_call"(%13994, %14006) : (!mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>, !llvm.struct<(!llvm.ptr, i32)>) -> !llvm.struct<(!llvm.ptr, i32)>
    %14008 = "mini.wrap"(%14007) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %14009 = "mini.reunionize"(%14008) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %14010 = "mini.unwrap"(%14009) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14011 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["i32_typ"], ["nil_typ"]], "name_hierarchy" = ["Ptri32_or_Nil", ["Ptri32"], ["Nil"]]} : () -> !llvm.ptr
    %14012 = "mini.parameterizations_array"(%14011) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14012, %14010) {"offset" = 0 : i32, "vptrs" = ["union_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14013 = "mini.coro_create"(%13762) {"arg_passer" = @coroutine_zkkgdtskwo_passer, "buffer_filler" = @coroutine_zkkgdtskwo_buffer_filler} : (!llvm.ptr) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>
    %14014 = builtin.unrealized_conversion_cast %14013 : !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>> to !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>
    %14015 = "mini.refer"(%14014) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>
    %14016 = "mini.coro_call"(%14015) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14017 = "mini.wrap"(%14016) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %14018 = "llvm.load"(%14015) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>) -> !llvm.ptr
    %14019 = "mini.coro_get_result"(%14018) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i32)>
    %14020 = "mini.wrap"(%14019) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %14021 = "mini.reunionize"(%14020) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %14022 = "mini.unwrap"(%14021) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14023 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["i32_typ"], ["nil_typ"]], "name_hierarchy" = ["Ptri32_or_Nil", ["Ptri32"], ["Nil"]]} : () -> !llvm.ptr
    %14024 = "mini.parameterizations_array"(%14023) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14024, %14022) {"offset" = 0 : i32, "vptrs" = ["union_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14025 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i32)>)>, "class_name" = "Channel", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Channel">
    %14026 = "mini.unwrap"(%14025) : (!mini.fatptr<"Channel">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14027 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%14027, %14026) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %14028 = "mini.to_fat_ptr"(%14025) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Channel", "to_typ_name" = "Channel", "invariant"} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    %14029 = "mini.refer"(%14028) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    %14030 = "mini.addr_of"() {"global_name" = @_functionliteral_kqpipzhidm} : () -> !llvm.ptr
    %14031 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%14030, %14031) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %14032 = "mini.unwrap"(%14029) : (!mini.fatptr<"Channel">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14033 = "mini.coro_create"(%14031, %14032) {"arg_passer" = @coroutine_mkcqinrtzp_passer, "buffer_filler" = @coroutine_mkcqinrtzp_buffer_filler} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %14034 = builtin.unrealized_conversion_cast %14033 : !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing> to !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %14035 = "mini.refer"(%14034) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %14036 = "mini.coro_call"(%14035) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14037 = "mini.wrap"(%14036) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %14038 = "mini.unwrap"(%14029) : (!mini.fatptr<"Channel">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14039 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %14040 = "mini.method_call"(%14039, %14038) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 7 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %14041 = builtin.unrealized_conversion_cast %14040 : !mini.ptr<i32> to !mini.ptr<i32>
    %14042 = "mini.unionize"(%14041) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %14043 = "mini.unwrap"(%14042) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14044 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14045 = "mini.parameterizations_array"(%14044) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14045, %14043) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14046 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14047 = builtin.unrealized_conversion_cast %14046 : !mini.ptr<i32> to !mini.ptr<i32>
    %14048 = "mini.unwrap"(%14047) : (!mini.ptr<i32>) -> i32
    %14049 = builtin.unrealized_conversion_cast %13758 : !llvm.ptr to !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %14050 = "mini.unwrap"(%14049) : (!mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14051 = "mini.addr_of"() {"global_name" = @_functionliteral_vkpdhaudnl} : () -> !llvm.ptr
    %14052 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%14051, %14052) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %14053 = builtin.unrealized_conversion_cast %14052 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %14054 = "mini.unwrap"(%14053) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %14055 = "mini.addr_of"() {"global_name" = @_functionliteral_knnabvgqzw} : () -> !llvm.ptr
    %14056 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%14055, %14056) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %14057 = builtin.unrealized_conversion_cast %14056 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %14058 = "mini.unwrap"(%14057) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14059 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14060 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14061 = "mini.unwrap"(%14059) : (!mini.ptr<i32>) -> i32
    %14062 = "mini.unwrap"(%14060) : (!mini.ptr<i32>) -> i32
    %14063 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %14064 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14065 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14066 = builtin.unrealized_conversion_cast %14064 : !mini.ptr<i32> to !mini.ptr<i32>
    %14067 = "mini.unwrap"(%14066) : (!mini.ptr<i32>) -> i32
    %14068 = builtin.unrealized_conversion_cast %14065 : !mini.ptr<i32> to !mini.ptr<i32>
    %14069 = "mini.unwrap"(%14068) : (!mini.ptr<i32>) -> i32
    %14070 = "mini.unwrap"(%14063) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14071 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14072 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14073 = "mini.parameterizations_array"(%14071, %14072) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14073, %14070, %14067, %14069) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %14074 = "mini.unwrap"(%14063) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14075 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri32", ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %14076 = "mini.parameterizations_array"(%14075) : (!llvm.ptr) -> !llvm.ptr
    %14077 = "mini.method_call"(%14076, %14074, %14058) {"offset" = 10 : i32, "vptrs" = ["function_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !mini.fatptr<"IntIterable">
    %14078 = "mini.to_fat_ptr"(%14077) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %14079 = "mini.unwrap"(%14078) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14080 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri1", ["Ptri1"], ["Ptri32"]]} : () -> !llvm.ptr
    %14081 = "mini.parameterizations_array"(%14080) : (!llvm.ptr) -> !llvm.ptr
    %14082 = "mini.method_call"(%14081, %14079, %14054) {"offset" = 5 : i32, "vptrs" = ["function_typ"], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !mini.fatptr<"IntIterable">
    %14083 = "mini.to_fat_ptr"(%14082) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %14084 = "mini.unwrap"(%14083) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14085 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14086 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32._Ptri32_to_Ptri32", ["Ptri32"], ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %14087 = "mini.parameterizations_array"(%14085, %14086) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %14088 = "mini.method_call"(%14087, %14084, %14048, %14050) {"offset" = 1 : i32, "vptrs" = ["i32_typ", "function_typ"], "vtable_size" = 24 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %14089 = builtin.unrealized_conversion_cast %14088 : !mini.ptr<i32> to !mini.ptr<i32>
    %14090 = "mini.unionize"(%14089) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %14091 = "mini.unwrap"(%14090) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14092 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14093 = "mini.parameterizations_array"(%14092) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14093, %14091) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14094 = "mini.literal"() {"value" = 256 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14095 = "mini.unionize"(%14094) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %14096 = "mini.unwrap"(%14095) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14097 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14098 = "mini.parameterizations_array"(%14097) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14098, %14096) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14099 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14100 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14101 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14102 = "mini.unwrap"(%14099) : (!mini.ptr<i32>) -> i32
    %14103 = "mini.unwrap"(%14100) : (!mini.ptr<i32>) -> i32
    %14104 = "mini.unwrap"(%14101) : (!mini.ptr<i32>) -> i32
    %14105 = "mini.create_tuple"(%14102, %14103, %14104) {"typ" = !llvm.struct<(i32, i32, i32)>} : (i32, i32, i32) -> !mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>, !mini.ptr<i32>]>
    %14106 = "mini.tuple_indexation"(%14105) {"typ" = !llvm.struct<(i32, i32, i32)>, "index" = 1 : i32} : (!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %14107 = "mini.unionize"(%14106) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>
    %14108 = "mini.unwrap"(%14107) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<i64>, !mini.ptr<i8>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.fatptr<"Character">, !mini.ptr<i1>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14109 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14110 = "mini.parameterizations_array"(%14109) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14110, %14108) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) : () -> ()
}
