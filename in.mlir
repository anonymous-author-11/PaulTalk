builtin.module attributes  {"sym_name" = "ir"} {
  "mini.prelude"() : () -> ()
  "mini.typedef"() {"class_name" = "bool_typ", "methods" = [], "hash_tbl" = [@Object, @bool_typ], "offset_tbl" = [7 : i32, 7 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5801531371504802705 : i64, "linkage" = "linkonce_odr", "base_typ" = i1} : () -> ()
  "mini.typedef"() {"class_name" = "i8_typ", "methods" = [], "hash_tbl" = [@Object, @i8_typ], "offset_tbl" = [7 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 2582149688529881115 : i64, "linkage" = "linkonce_odr", "base_typ" = i8} : () -> ()
  "mini.typedef"() {"class_name" = "i32_typ", "methods" = [], "hash_tbl" = [@i32_typ, @Object], "offset_tbl" = [7 : i32, 7 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 16193019123895293634 : i64, "linkage" = "linkonce_odr", "base_typ" = i32} : () -> ()
  "mini.typedef"() {"class_name" = "i64_typ", "methods" = [], "hash_tbl" = [@Object, @i64_typ], "offset_tbl" = [7 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 10976946829247779694 : i64, "linkage" = "linkonce_odr", "base_typ" = i64} : () -> ()
  "mini.typedef"() {"class_name" = "i128_typ", "methods" = [], "hash_tbl" = [@Object, @i128_typ], "offset_tbl" = [7 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 9690865858240087975 : i64, "linkage" = "linkonce_odr", "base_typ" = i128} : () -> ()
  "mini.typedef"() {"class_name" = "f64_typ", "methods" = [], "hash_tbl" = [@Object, @f64_typ], "offset_tbl" = [7 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 17689428533612252835 : i64, "linkage" = "linkonce_odr", "base_typ" = f64} : () -> ()
  "mini.typedef"() {"class_name" = "nil_typ", "methods" = [], "hash_tbl" = [18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [0 : i32, 0 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 13319937214253225933 : i64, "linkage" = "linkonce_odr", "base_typ" = !llvm.array<0 x i8>} : () -> ()
  "mini.typedef"() {"class_name" = "nothing_typ", "methods" = [], "hash_tbl" = [@nothing_typ, @Object], "offset_tbl" = [7 : i32, 7 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 15112287910276180238 : i64, "linkage" = "linkonce_odr", "base_typ" = !llvm.array<0 x i8>} : () -> ()
  "mini.typedef"() {"class_name" = "coroutine_typ", "methods" = [], "hash_tbl" = [@coroutine_typ, @Object], "offset_tbl" = [7 : i32, 7 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 7194361020959218064 : i64, "linkage" = "linkonce_odr", "base_typ" = !llvm.struct<(!llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "function_typ", "methods" = [], "hash_tbl" = [@function_typ, @Object], "offset_tbl" = [7 : i32, 7 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 7927147055246173914 : i64, "linkage" = "linkonce_odr", "base_typ" = !llvm.struct<(!llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "buffer_typ", "methods" = [], "hash_tbl" = [@Object, @buffer_typ], "offset_tbl" = [7 : i32, 7 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 18128551326514141379 : i64, "linkage" = "linkonce_odr", "base_typ" = !llvm.struct<(!llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "tuple_typ", "methods" = [], "hash_tbl" = [@Object, @tuple_typ], "offset_tbl" = [7 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 3422634369532007740 : i64, "linkage" = "linkonce_odr", "base_typ" = !llvm.struct<()>} : () -> ()
  "mini.typedef"() {"class_name" = "union_typ", "methods" = [], "hash_tbl" = [@union_typ, @Object], "offset_tbl" = [7 : i32, 7 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 10903510294711884876 : i64, "linkage" = "linkonce_odr", "base_typ" = !llvm.struct<(!llvm.ptr, i8)>} : () -> ()
  "mini.typedef"() {"class_name" = "Object", "methods" = [], "hash_tbl" = [@Object], "offset_tbl" = [7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 3282773614056351330 : i64, "base_typ" = !llvm.struct<()>} : () -> ()
  "mini.typedef"() {"class_name" = "Iterator", "methods" = [], "hash_tbl" = [@Object, @Iterator], "offset_tbl" = [7 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 8673632051301757104 : i64, "base_typ" = !llvm.struct<()>} : () -> ()
  "mini.typedef"() {"class_name" = "Iterable", "methods" = [], "hash_tbl" = [@Object, @Iterable], "offset_tbl" = [9 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 3037712219555723519 : i64, "base_typ" = !llvm.struct<()>} : () -> ()
  "mini.typedef"() {"class_name" = "Representable", "methods" = [@Representable_B_repr_, @Representable_repr_], "hash_tbl" = [@Object, @Representable], "offset_tbl" = [9 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 11185903432579561498 : i64, "base_typ" = !llvm.struct<()>} : () -> ()
  "mini.typedef"() {"class_name" = "String", "methods" = [@String_field_bytes, @String_field_length, @String_field_capacity, @String_B_init_, @String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, @String_B_length_, @String_B_capacity_, @String_B_bytes_, @String_B_append_xPtri8, @String_B_extend_strString, @String_B__index_xPtri32, @String_B__EQ_otherString, @String_B_pop_, @String_B_copy_, @String_B_c_string_, @String_B_iterator_, @String_B_repr_, @String_init_, @String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32, @String_length_, @String_capacity_, @String_bytes_, @String_append_xPtri8, @String_extend_strString, @String__index_xPtri32, @String__EQ_otherString, @String_pop_, @String_copy_, @String_c_string_, @String_iterator_, @String_repr_, @String_B_iterator_, @String_iterator_, @String_B_repr_, @String_repr_], "hash_tbl" = [@Iterable, @String, @Object, @Representable], "offset_tbl" = [38 : i32, 7 : i32, 40 : i32, 40 : i32], "prime" = 4611686018427388273 : i64, "hash_id" = 6499063144389013426 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>} : () -> ()
  "mini.typedef"() {"class_name" = "Character", "methods" = [@Character_field_byte, @Character_B_byte_, @Character_B_init_bytePtri8, @Character_byte_, @Character_init_bytePtri8], "hash_tbl" = [@Object, @Character], "offset_tbl" = [12 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 6681222582356018452 : i64, "base_typ" = !llvm.struct<(i8)>} : () -> ()
  "mini.typedef"() {"class_name" = "StringIterator", "methods" = [@StringIterator_field_str, @StringIterator_field_index, @StringIterator_B_init_strString, @StringIterator_B_next_, @StringIterator_init_strString, @StringIterator_next_], "hash_tbl" = [@Object, @Iterator, @StringIterator, 18446744073709551615 : i64], "offset_tbl" = [13 : i32, 13 : i32, 7 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 11186173084763598986 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>} : () -> ()
  "mini.typedef"() {"class_name" = "Exception", "methods" = [@Exception_field_line_number, @Exception_field_file_name, @Exception_field_message, @Exception_B_init_messageString, @Exception_B_init_, @Exception_B_set_info_line_numberPtri32_file_nameString, @Exception_B_report_, @Exception_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberPtri32_file_nameString, @Exception_report_, @Exception_print_message_], "hash_tbl" = [@Object, @Exception], "offset_tbl" = [20 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 9027164862567808692 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "IO", "methods" = [@IO_B__Self_print_xPtri1__Self_print_xCharacter__Self_print_xString__Self_print_xPtri32__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xNil__Self_print_xPtri64, @IO__Self_print_xPtri1, @IO__Self_print_xCharacter, @IO__Self_print_xString, @IO__Self_print_xPtri32, @IO__Self_print_xPtri8, @IO__Self_print_xPtrf64, @IO__Self_print_xRepresentable, @IO__Self_print_xNil, @IO__Self_print_xPtri64], "hash_tbl" = [@Object, @IO], "offset_tbl" = [17 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 5359822646784595218 : i64, "base_typ" = !llvm.struct<()>} : () -> ()
  "mini.typedef"() {"class_name" = "Blocking", "methods" = [@Blocking_B_init_, @Blocking_init_], "hash_tbl" = [@Blocking, @Object], "offset_tbl" = [7 : i32, 9 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 847773162914674935 : i64, "base_typ" = !llvm.struct<()>} : () -> ()
  "mini.typedef"() {"class_name" = "Channel", "methods" = [@Channel_field_value, @Channel_B_init_, @Channel_B_get_, @Channel_B_put_new_valuePtri32, @Channel_init_, @Channel_get_, @Channel_put_new_valuePtri32], "hash_tbl" = [@Object, @Channel], "offset_tbl" = [14 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 14778625957069801166 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i32)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "IntIterator", "methods" = [], "hash_tbl" = [@Object, @Iterator, 18446744073709551615 : i64, @IntIterator], "offset_tbl" = [9 : i32, 9 : i32, 0 : i32, 7 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 17513659798052893061 : i64, "base_typ" = !llvm.struct<()>} : () -> ()
  "mini.typedef"() {"class_name" = "IntIterable", "methods" = [], "hash_tbl" = [18446744073709551615 : i64, @Iterable, @IntIterable, @Object], "offset_tbl" = [0 : i32, 29 : i32, 7 : i32, 31 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 10461781953294393041 : i64, "base_typ" = !llvm.struct<()>} : () -> ()
  "mini.typedef"() {"class_name" = "MapIterable", "methods" = [@MapIterable_field_iterable, @MapIterable_field_f, @MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, @MapIterable_B_each_fFunctionPtri32_to_Nothing, @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @MapIterable_B_all_fFunctionPtri32_to_Ptri1, @MapIterable_B_any_fFunctionPtri32_to_Ptri1, @MapIterable_B_map_fFunctionPtri32_to_Ptri32, @MapIterable_B_filter_fFunctionPtri32_to_Ptri1, @MapIterable_B_chain_otherIntIterable, @MapIterable_B_interleave_otherIntIterable, @MapIterable_B_zip_otherIntIterable, @MapIterable_B_product_otherIntIterable, @MapIterable_B_iterator_, @MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @MapIterable_iterator_, @MapIterable_B_each_fFunctionPtri32_to_Nothing, @MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @MapIterable_B_all_fFunctionPtri32_to_Ptri1, @MapIterable_B_any_fFunctionPtri32_to_Ptri1, @MapIterable_B_map_fFunctionPtri32_to_Ptri32, @MapIterable_B_filter_fFunctionPtri32_to_Ptri1, @MapIterable_B_chain_otherIntIterable, @MapIterable_B_interleave_otherIntIterable, @MapIterable_B_zip_otherIntIterable, @MapIterable_B_product_otherIntIterable, @MapIterable_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @MapIterable_iterator_, @MapIterable_B_iterator_, @MapIterable_iterator_, @MapIterable_B_iterator_, @MapIterable_iterator_], "hash_tbl" = [@IntIterable, @MapIterable, @Object, @Iterable], "offset_tbl" = [33 : i32, 7 : i32, 59 : i32, 57 : i32], "prime" = 4611686018427388291 : i64, "hash_id" = 10957973502106259894 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "MapIterator", "methods" = [@MapIterator_field_iterator, @MapIterator_field_f, @MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, @MapIterator_B_next_, @MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32, @MapIterator_next_, @MapIterator_B_next_, @MapIterator_next_], "hash_tbl" = [@Object, @Iterator, @MapIterator, @IntIterator], "offset_tbl" = [15 : i32, 15 : i32, 7 : i32, 13 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 18300190591082816834 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "FilterIterable", "methods" = [@FilterIterable_field_iterable, @FilterIterable_field_f, @FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, @FilterIterable_B_each_fFunctionPtri32_to_Nothing, @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @FilterIterable_B_all_fFunctionPtri32_to_Ptri1, @FilterIterable_B_any_fFunctionPtri32_to_Ptri1, @FilterIterable_B_map_fFunctionPtri32_to_Ptri32, @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, @FilterIterable_B_chain_otherIntIterable, @FilterIterable_B_interleave_otherIntIterable, @FilterIterable_B_zip_otherIntIterable, @FilterIterable_B_product_otherIntIterable, @FilterIterable_B_iterator_, @FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @FilterIterable_iterator_, @FilterIterable_B_each_fFunctionPtri32_to_Nothing, @FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @FilterIterable_B_all_fFunctionPtri32_to_Ptri1, @FilterIterable_B_any_fFunctionPtri32_to_Ptri1, @FilterIterable_B_map_fFunctionPtri32_to_Ptri32, @FilterIterable_B_filter_fFunctionPtri32_to_Ptri1, @FilterIterable_B_chain_otherIntIterable, @FilterIterable_B_interleave_otherIntIterable, @FilterIterable_B_zip_otherIntIterable, @FilterIterable_B_product_otherIntIterable, @FilterIterable_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @FilterIterable_iterator_, @FilterIterable_B_iterator_, @FilterIterable_iterator_, @FilterIterable_B_iterator_, @FilterIterable_iterator_], "hash_tbl" = [@FilterIterable, @Iterable, @IntIterable, @Object], "offset_tbl" = [7 : i32, 57 : i32, 33 : i32, 59 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 8498466713076104350 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "FilterIterator", "methods" = [@FilterIterator_field_iterator, @FilterIterator_field_f, @FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, @FilterIterator_B_next_, @FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1, @FilterIterator_next_, @FilterIterator_B_next_, @FilterIterator_next_], "hash_tbl" = [@Object, @Iterator, @FilterIterator, @IntIterator], "offset_tbl" = [15 : i32, 15 : i32, 7 : i32, 13 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 17225378576809247733 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "ChainIterable", "methods" = [@ChainIterable_field_first, @ChainIterable_field_second, @ChainIterable_B_init_firstIntIterable_secondIntIterable, @ChainIterable_B_each_fFunctionPtri32_to_Nothing, @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @ChainIterable_B_all_fFunctionPtri32_to_Ptri1, @ChainIterable_B_any_fFunctionPtri32_to_Ptri1, @ChainIterable_B_map_fFunctionPtri32_to_Ptri32, @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, @ChainIterable_B_chain_otherIntIterable, @ChainIterable_B_interleave_otherIntIterable, @ChainIterable_B_zip_otherIntIterable, @ChainIterable_B_product_otherIntIterable, @ChainIterable_B_iterator_, @ChainIterable_init_firstIntIterable_secondIntIterable, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @ChainIterable_iterator_, @ChainIterable_B_each_fFunctionPtri32_to_Nothing, @ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @ChainIterable_B_all_fFunctionPtri32_to_Ptri1, @ChainIterable_B_any_fFunctionPtri32_to_Ptri1, @ChainIterable_B_map_fFunctionPtri32_to_Ptri32, @ChainIterable_B_filter_fFunctionPtri32_to_Ptri1, @ChainIterable_B_chain_otherIntIterable, @ChainIterable_B_interleave_otherIntIterable, @ChainIterable_B_zip_otherIntIterable, @ChainIterable_B_product_otherIntIterable, @ChainIterable_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @ChainIterable_iterator_, @ChainIterable_B_iterator_, @ChainIterable_iterator_, @ChainIterable_B_iterator_, @ChainIterable_iterator_], "hash_tbl" = [@IntIterable, @ChainIterable, @Object, @Iterable], "offset_tbl" = [33 : i32, 7 : i32, 59 : i32, 57 : i32], "prime" = 4611686018427388699 : i64, "hash_id" = 16076497015278503801 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "ChainIterator", "methods" = [@ChainIterator_field_first, @ChainIterator_field_second, @ChainIterator_field_on_first, @ChainIterator_B_init_firstIntIterator_secondIntIterator, @ChainIterator_B_next_, @ChainIterator_init_firstIntIterator_secondIntIterator, @ChainIterator_next_, @ChainIterator_B_next_, @ChainIterator_next_], "hash_tbl" = [@ChainIterator, @Object, @Iterator, @IntIterator], "offset_tbl" = [7 : i32, 16 : i32, 16 : i32, 14 : i32], "prime" = 4611686018427388787 : i64, "hash_id" = 6043157723929225452 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>} : () -> ()
  "mini.typedef"() {"class_name" = "InterleaveIterable", "methods" = [@InterleaveIterable_field_first, @InterleaveIterable_field_second, @InterleaveIterable_B_init_firstIntIterable_secondIntIterable, @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_chain_otherIntIterable, @InterleaveIterable_B_interleave_otherIntIterable, @InterleaveIterable_B_zip_otherIntIterable, @InterleaveIterable_B_product_otherIntIterable, @InterleaveIterable_B_iterator_, @InterleaveIterable_init_firstIntIterable_secondIntIterable, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @InterleaveIterable_iterator_, @InterleaveIterable_B_each_fFunctionPtri32_to_Nothing, @InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32, @InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1, @InterleaveIterable_B_chain_otherIntIterable, @InterleaveIterable_B_interleave_otherIntIterable, @InterleaveIterable_B_zip_otherIntIterable, @InterleaveIterable_B_product_otherIntIterable, @InterleaveIterable_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @InterleaveIterable_iterator_, @InterleaveIterable_B_iterator_, @InterleaveIterable_iterator_, @InterleaveIterable_B_iterator_, @InterleaveIterable_iterator_], "hash_tbl" = [@InterleaveIterable, @Iterable, @IntIterable, @Object], "offset_tbl" = [7 : i32, 57 : i32, 33 : i32, 59 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 4936782714255954462 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "InterleaveIterator", "methods" = [@InterleaveIterator_field_first, @InterleaveIterator_field_second, @InterleaveIterator_field_on_first, @InterleaveIterator_B_init_firstIntIterator_secondIntIterator, @InterleaveIterator_B_next_, @InterleaveIterator_init_firstIntIterator_secondIntIterator, @InterleaveIterator_next_, @InterleaveIterator_B_next_, @InterleaveIterator_next_], "hash_tbl" = [@Iterator, @IntIterator, @Object, @InterleaveIterator], "offset_tbl" = [16 : i32, 14 : i32, 16 : i32, 7 : i32], "prime" = 4611686018427388513 : i64, "hash_id" = 14522079715461027111 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>} : () -> ()
  "mini.typedef"() {"class_name" = "IntTupleIterable", "methods" = [], "hash_tbl" = [@Object, 18446744073709551615 : i64, @IntTupleIterable, @Iterable], "offset_tbl" = [11 : i32, 0 : i32, 7 : i32, 9 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 1135628454346210518 : i64, "base_typ" = !llvm.struct<()>} : () -> ()
  "mini.typedef"() {"class_name" = "IntTupleIterator", "methods" = [], "hash_tbl" = [18446744073709551615 : i64, @Iterator, @IntTupleIterator, @Object], "offset_tbl" = [0 : i32, 9 : i32, 7 : i32, 9 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 8926924731480624460 : i64, "base_typ" = !llvm.struct<()>} : () -> ()
  "mini.typedef"() {"class_name" = "ZipIterable", "methods" = [@ZipIterable_field_first, @ZipIterable_field_second, @ZipIterable_B_init_firstIntIterable_secondIntIterable, @ZipIterable_B_iterator_, @ZipIterable_init_firstIntIterable_secondIntIterable, @ZipIterable_iterator_, @ZipIterable_B_iterator_, @ZipIterable_iterator_, @ZipIterable_B_iterator_, @ZipIterable_iterator_, @ZipIterable_B_iterator_, @ZipIterable_iterator_], "hash_tbl" = [@Object, @ZipIterable, @IntTupleIterable, @Iterable], "offset_tbl" = [19 : i32, 7 : i32, 13 : i32, 17 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 35232740166152944 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "ZipIterator", "methods" = [@ZipIterator_field_first, @ZipIterator_field_second, @ZipIterator_B_init_firstIntIterator_secondIntIterator, @ZipIterator_B_next_, @ZipIterator_init_firstIntIterator_secondIntIterator, @ZipIterator_next_, @ZipIterator_B_next_, @ZipIterator_next_], "hash_tbl" = [@ZipIterator, @Object, @IntTupleIterator, @Iterator], "offset_tbl" = [7 : i32, 15 : i32, 13 : i32, 15 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 16305629627969966298 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "ProductIterable", "methods" = [@ProductIterable_field_first, @ProductIterable_field_second, @ProductIterable_B_init_firstIntIterable_secondIntIterable, @ProductIterable_B_iterator_, @ProductIterable_init_firstIntIterable_secondIntIterable, @ProductIterable_iterator_, @ProductIterable_B_iterator_, @ProductIterable_iterator_, @ProductIterable_B_iterator_, @ProductIterable_iterator_, @ProductIterable_B_iterator_, @ProductIterable_iterator_], "hash_tbl" = [@Object, @ProductIterable, @IntTupleIterable, @Iterable], "offset_tbl" = [19 : i32, 7 : i32, 13 : i32, 17 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 4128338911757318636 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "ProductIterator", "methods" = [@ProductIterator_field_first_iterator, @ProductIterator_field_second_iterator, @ProductIterator_field_second_iterable, @ProductIterator_field_current_first, @ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable, @ProductIterator_B_next_, @ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable, @ProductIterator_next_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @ProductIterator, @Iterator], "offset_tbl" = [15 : i32, 0 : i32, 7 : i32, 15 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 1697250377212095568 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "Range", "methods" = [@Range_field_start, @Range_field_end, @Range_field_step, @Range_B_init_endPtri32, @Range_B_init_startPtri32_endPtri32, @Range_B_step_stepPtri32, @Range_B_each_fFunctionPtri32_to_Nothing, @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @Range_B_all_fFunctionPtri32_to_Ptri1, @Range_B_any_fFunctionPtri32_to_Ptri1, @Range_B_map_fFunctionPtri32_to_Ptri32, @Range_B_filter_fFunctionPtri32_to_Ptri1, @Range_B_chain_otherIntIterable, @Range_B_interleave_otherIntIterable, @Range_B_zip_otherIntIterable, @Range_B_product_otherIntIterable, @Range_B_iterator_, @Range_init_endPtri32, @Range_init_startPtri32_endPtri32, @Range_step_stepPtri32, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @Range_iterator_, @Range_B_each_fFunctionPtri32_to_Nothing, @Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @Range_B_all_fFunctionPtri32_to_Ptri1, @Range_B_any_fFunctionPtri32_to_Ptri1, @Range_B_map_fFunctionPtri32_to_Ptri32, @Range_B_filter_fFunctionPtri32_to_Ptri1, @Range_B_chain_otherIntIterable, @Range_B_interleave_otherIntIterable, @Range_B_zip_otherIntIterable, @Range_B_product_otherIntIterable, @Range_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntIterable_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @Range_iterator_, @Range_B_iterator_, @Range_iterator_, @Range_B_iterator_, @Range_iterator_], "hash_tbl" = [@IntIterable, @Range, @Object, @Iterable], "offset_tbl" = [38 : i32, 7 : i32, 64 : i32, 62 : i32], "prime" = 4611686018427388291 : i64, "hash_id" = 5490049236840671069 : i64, "base_typ" = !llvm.struct<(i32, i32, i32)>} : () -> ()
  "mini.typedef"() {"class_name" = "RangeIterator", "methods" = [@RangeIterator_field_counter, @RangeIterator_field_end, @RangeIterator_field_step, @RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32, @RangeIterator_B_next_, @RangeIterator_init_counterPtri32_endPtri32_stepPtri32, @RangeIterator_next_, @RangeIterator_B_next_, @RangeIterator_next_], "hash_tbl" = [@IntIterator, @Object, @Iterator, @RangeIterator], "offset_tbl" = [14 : i32, 16 : i32, 16 : i32, 7 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 17533181587765144941 : i64, "base_typ" = !llvm.struct<(i32, i32, i32)>} : () -> ()
  "mini.typedef"() {"class_name" = "OutOfBoundsDetails", "methods" = [@OutOfBoundsDetails_field_bounds, @OutOfBoundsDetails_field_index, @OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32, @OutOfBoundsDetails_B_report_, @OutOfBoundsDetails_init_boundsPtri32_indexPtri32, @OutOfBoundsDetails_report_], "hash_tbl" = [@Object, @OutOfBoundsDetails], "offset_tbl" = [13 : i32, 7 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 4650630525701360429 : i64, "base_typ" = !llvm.struct<(i32, i32)>} : () -> ()
  "mini.typedef"() {"class_name" = "OutOfBounds", "methods" = [@OutOfBounds_field_details, @OutOfBounds_field_line_number, @OutOfBounds_field_file_name, @OutOfBounds_field_message, @OutOfBounds_B_init_boundsPtri32_indexPtri32, @OutOfBounds_B_init_messageString, @OutOfBounds_B_init_, @OutOfBounds_B_set_info_line_numberPtri32_file_nameString, @OutOfBounds_B_report_, @OutOfBounds_B_print_message_, @OutOfBounds_init_boundsPtri32_indexPtri32, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberPtri32_file_nameString, @Exception_report_, @OutOfBounds_print_message_, @OutOfBounds_field_line_number, @OutOfBounds_field_file_name, @OutOfBounds_field_message, @OutOfBounds_B_init_messageString, @OutOfBounds_B_init_, @OutOfBounds_B_set_info_line_numberPtri32_file_nameString, @OutOfBounds_B_report_, @OutOfBounds_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberPtri32_file_nameString, @Exception_report_, @OutOfBounds_print_message_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @OutOfBounds, @Exception], "offset_tbl" = [36 : i32, 0 : i32, 7 : i32, 23 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 5348403617834207535 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "IntArray", "methods" = [@IntArray_field_buffer, @IntArray_field_length, @IntArray_field_capacity, @IntArray_B__Self_from_iterable_iterableIntIterable, @IntArray_B_init_, @IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, @IntArray_B_length_, @IntArray_B_capacity_, @IntArray_B_buffer_, @IntArray_B_append_xPtri32, @IntArray_B_extend_aryIntArray, @IntArray_B__index_xPtri32, @IntArray_B_pop_, @IntArray_B_copy_, @IntArray_B_each_fFunctionPtri32_to_Nothing, @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntArray_B_all_fFunctionPtri32_to_Ptri1, @IntArray_B_any_fFunctionPtri32_to_Ptri1, @IntArray_B_map_fFunctionPtri32_to_Ptri32, @IntArray_B_filter_fFunctionPtri32_to_Ptri1, @IntArray_B_chain_otherIntIterable, @IntArray_B_interleave_otherIntIterable, @IntArray_B_zip_otherIntIterable, @IntArray_B_product_otherIntIterable, @IntArray_B_iterator_, @IntArray_B_repr_, @IntArray__Self_from_iterable_iterableIntIterable, @IntArray_init_, @IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32, @IntArray_length_, @IntArray_capacity_, @IntArray_buffer_, @IntArray_append_xPtri32, @IntArray_extend_aryIntArray, @IntArray__index_xPtri32, @IntArray_pop_, @IntArray_copy_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntArray_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @IntArray_iterator_, @Representable_repr_, @IntArray_B_each_fFunctionPtri32_to_Nothing, @IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntArray_B_all_fFunctionPtri32_to_Ptri1, @IntArray_B_any_fFunctionPtri32_to_Ptri1, @IntArray_B_map_fFunctionPtri32_to_Ptri32, @IntArray_B_filter_fFunctionPtri32_to_Ptri1, @IntArray_B_chain_otherIntIterable, @IntArray_B_interleave_otherIntIterable, @IntArray_B_zip_otherIntIterable, @IntArray_B_product_otherIntIterable, @IntArray_B_iterator_, @IntIterable_each_fFunctionPtri32_to_Nothing, @IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32, @IntIterable_all_fFunctionPtri32_to_Ptri1, @IntIterable_any_fFunctionPtri32_to_Ptri1, @IntArray_map_fFunctionPtri32_to_Ptri32, @IntIterable_filter_fFunctionPtri32_to_Ptri1, @IntIterable_chain_otherIntIterable, @IntIterable_interleave_otherIntIterable, @IntIterable_zip_otherIntIterable, @IntIterable_product_otherIntIterable, @IntArray_iterator_, @IntArray_B_iterator_, @IntArray_iterator_, @IntArray_B_iterator_, @IntArray_iterator_, @IntArray_B_repr_, @Representable_repr_], "hash_tbl" = [@Representable, @Iterable, 18446744073709551615 : i64, 18446744073709551615 : i64, 18446744073709551615 : i64, @IntIterable, @IntArray, @Object], "offset_tbl" = [82 : i32, 80 : i32, 0 : i32, 0 : i32, 0 : i32, 56 : i32, 7 : i32, 82 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 7629948565578263212 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>} : () -> ()
  "mini.typedef"() {"class_name" = "IntArrayIterator", "methods" = [@IntArrayIterator_field_array, @IntArrayIterator_field_index, @IntArrayIterator_B_init_arrayIntArray, @IntArrayIterator_B_next_, @IntArrayIterator_init_arrayIntArray, @IntArrayIterator_next_, @IntArrayIterator_B_next_, @IntArrayIterator_next_], "hash_tbl" = [@Object, @IntArrayIterator, @IntIterator, @Iterator], "offset_tbl" = [15 : i32, 7 : i32, 13 : i32, 15 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 5577199879563532693 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>} : () -> ()
  "mini.typedef"() {"class_name" = "Pair", "methods" = [@Pair_field_first, @Pair_field_second, @Pair_field_Pair_0, @Pair_field_Pair_1, @Pair_B_init_firstT_secondU, @Pair_B_first_, @Pair_B_second_, @Pair_init_firstT_secondU, @Pair_first_, @Pair_second_], "hash_tbl" = [@Object, @Pair], "offset_tbl" = [17 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 9197944775169318296 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "Iterator2", "methods" = [], "hash_tbl" = [@Iterator2, @Object], "offset_tbl" = [7 : i32, 10 : i32], "prime" = 4611686018427388207 : i64, "hash_id" = 4189192806087951739 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "Iterable2", "methods" = [], "hash_tbl" = [@Object, @Iterable2], "offset_tbl" = [30 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 5693646204635713916 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "Array", "methods" = [@Array_field_buffer, @Array_field_length, @Array_field_capacity, @Array_field_Array_0, @Array_B__Self_from_iterable_iterableIterable2T, @Array_B_init_, @Array_B_init_capacityPtri32, @Array_B_length_, @Array_B_capacity_, @Array_B_append_xT, @Array_B_grow_, @Array_B__index_xPtri32, @Array_B_throw_oob_xPtri32, @Array_B_unsafe_index_xPtri32, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Ptri1, @Array_B_any_fFunctionT_to_Ptri1, @Array_B_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Ptri1, @Array_B_chain_otherIterable2T, @Array_B_interleave_otherIterable2T, @Array_B_zip_otherIterable2U, @Array_B_product_otherIterable2U, @Array__Self_from_iterable_iterableIterable2T, @Array_init_, @Array_init_capacityPtri32, @Array_length_, @Array_capacity_, @Array_append_xT, @Array_grow_, @Array__index_xPtri32, @Array_throw_oob_xPtri32, @Array_unsafe_index_xPtri32, @Array_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Ptri1, @Array_B_any_fFunctionT_to_Ptri1, @Array_B_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Ptri1, @Array_B_chain_otherIterable2T, @Array_B_interleave_otherIterable2T, @Array_B_zip_otherIterable2U, @Array_B_product_otherIterable2U, @Array_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Object, @Iterable2, 18446744073709551615 : i64, @Array], "offset_tbl" = [76 : i32, 53 : i32, 0 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 13185201323315417072 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "ArrayIterator", "methods" = [@ArrayIterator_field_array, @ArrayIterator_field_index, @ArrayIterator_field_ArrayIterator_0, @ArrayIterator_B_init_arrayArrayT, @ArrayIterator_B_next_, @ArrayIterator_init_arrayArrayT, @ArrayIterator_next_, @ArrayIterator_field_ArrayIterator_0, @ArrayIterator_B_next_, @ArrayIterator_next_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @Iterator2, @ArrayIterator], "offset_tbl" = [17 : i32, 0 : i32, 14 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 3447345754186651411 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "MapIterable2", "methods" = [@MapIterable2_field_iterable, @MapIterable2_field_f, @MapIterable2_field_MapIterable2_0, @MapIterable2_field_MapIterable2_1, @MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U, @MapIterable2_B_iterator_, @MapIterable2_B_each_fFunctionT_to_Nothing, @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapIterable2_B_all_fFunctionT_to_Ptri1, @MapIterable2_B_any_fFunctionT_to_Ptri1, @MapIterable2_B_map_fFunctionT_to_U, @MapIterable2_B_filter_fFunctionT_to_Ptri1, @MapIterable2_B_chain_otherIterable2T, @MapIterable2_B_interleave_otherIterable2T, @MapIterable2_B_zip_otherIterable2U, @MapIterable2_B_product_otherIterable2U, @MapIterable2_init_iterableIterable2T_fFunctionT_to_U, @MapIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @MapIterable2_field_MapIterable2_1, @MapIterable2_B_iterator_, @MapIterable2_B_each_fFunctionT_to_Nothing, @MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapIterable2_B_all_fFunctionT_to_Ptri1, @MapIterable2_B_any_fFunctionT_to_Ptri1, @MapIterable2_B_map_fFunctionT_to_U, @MapIterable2_B_filter_fFunctionT_to_Ptri1, @MapIterable2_B_chain_otherIterable2T, @MapIterable2_B_interleave_otherIterable2T, @MapIterable2_B_zip_otherIterable2U, @MapIterable2_B_product_otherIterable2U, @MapIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Object, @Iterable2, @MapIterable2, 18446744073709551615 : i64], "offset_tbl" = [58 : i32, 35 : i32, 7 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 16721884939112659687 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "MapIterator2", "methods" = [@MapIterator2_field_iterator, @MapIterator2_field_f, @MapIterator2_field_MapIterator2_0, @MapIterator2_field_MapIterator2_1, @MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U, @MapIterator2_B_next_, @MapIterator2_init_iteratorIterator2T_fFunctionT_to_U, @MapIterator2_next_, @MapIterator2_field_MapIterator2_1, @MapIterator2_B_next_, @MapIterator2_next_], "hash_tbl" = [@Object, @MapIterator2, @Iterator2, 18446744073709551615 : i64], "offset_tbl" = [18 : i32, 7 : i32, 15 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 18436488126000279116 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "FilterIterable2", "methods" = [@FilterIterable2_field_iterable, @FilterIterable2_field_f, @FilterIterable2_field_FilterIterable2_0, @FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1, @FilterIterable2_B_iterator_, @FilterIterable2_B_each_fFunctionT_to_Nothing, @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @FilterIterable2_B_all_fFunctionT_to_Ptri1, @FilterIterable2_B_any_fFunctionT_to_Ptri1, @FilterIterable2_B_map_fFunctionT_to_U, @FilterIterable2_B_filter_fFunctionT_to_Ptri1, @FilterIterable2_B_chain_otherIterable2T, @FilterIterable2_B_interleave_otherIterable2T, @FilterIterable2_B_zip_otherIterable2U, @FilterIterable2_B_product_otherIterable2U, @FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1, @FilterIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @FilterIterable2_field_FilterIterable2_0, @FilterIterable2_B_iterator_, @FilterIterable2_B_each_fFunctionT_to_Nothing, @FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @FilterIterable2_B_all_fFunctionT_to_Ptri1, @FilterIterable2_B_any_fFunctionT_to_Ptri1, @FilterIterable2_B_map_fFunctionT_to_U, @FilterIterable2_B_filter_fFunctionT_to_Ptri1, @FilterIterable2_B_chain_otherIterable2T, @FilterIterable2_B_interleave_otherIterable2T, @FilterIterable2_B_zip_otherIterable2U, @FilterIterable2_B_product_otherIterable2U, @FilterIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Object, @Iterable2, @FilterIterable2, 18446744073709551615 : i64], "offset_tbl" = [57 : i32, 34 : i32, 7 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 1178467452958968374 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "FilterIterator2", "methods" = [@FilterIterator2_field_iterator, @FilterIterator2_field_f, @FilterIterator2_field_FilterIterator2_0, @FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1, @FilterIterator2_B_next_, @FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1, @FilterIterator2_next_, @FilterIterator2_field_FilterIterator2_0, @FilterIterator2_B_next_, @FilterIterator2_next_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @Iterator2, @FilterIterator2], "offset_tbl" = [17 : i32, 0 : i32, 14 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 8213847504843366470 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "ChainIterable2", "methods" = [@ChainIterable2_field_first, @ChainIterable2_field_second, @ChainIterable2_field_ChainIterable2_0, @ChainIterable2_B_init_firstIterable2T_secondIterable2T, @ChainIterable2_B_iterator_, @ChainIterable2_B_each_fFunctionT_to_Nothing, @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainIterable2_B_all_fFunctionT_to_Ptri1, @ChainIterable2_B_any_fFunctionT_to_Ptri1, @ChainIterable2_B_map_fFunctionT_to_U, @ChainIterable2_B_filter_fFunctionT_to_Ptri1, @ChainIterable2_B_chain_otherIterable2T, @ChainIterable2_B_interleave_otherIterable2T, @ChainIterable2_B_zip_otherIterable2U, @ChainIterable2_B_product_otherIterable2U, @ChainIterable2_init_firstIterable2T_secondIterable2T, @ChainIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @ChainIterable2_field_ChainIterable2_0, @ChainIterable2_B_iterator_, @ChainIterable2_B_each_fFunctionT_to_Nothing, @ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainIterable2_B_all_fFunctionT_to_Ptri1, @ChainIterable2_B_any_fFunctionT_to_Ptri1, @ChainIterable2_B_map_fFunctionT_to_U, @ChainIterable2_B_filter_fFunctionT_to_Ptri1, @ChainIterable2_B_chain_otherIterable2T, @ChainIterable2_B_interleave_otherIterable2T, @ChainIterable2_B_zip_otherIterable2U, @ChainIterable2_B_product_otherIterable2U, @ChainIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Object, @Iterable2, @ChainIterable2, 18446744073709551615 : i64], "offset_tbl" = [57 : i32, 34 : i32, 7 : i32, 0 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 13213446000764521556 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "ChainIterator2", "methods" = [@ChainIterator2_field_first, @ChainIterator2_field_second, @ChainIterator2_field_on_first, @ChainIterator2_field_ChainIterator2_0, @ChainIterator2_B_init_firstIterator2T_secondIterator2T, @ChainIterator2_B_next_, @ChainIterator2_init_firstIterator2T_secondIterator2T, @ChainIterator2_next_, @ChainIterator2_field_ChainIterator2_0, @ChainIterator2_B_next_, @ChainIterator2_next_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @Iterator2, @ChainIterator2], "offset_tbl" = [18 : i32, 0 : i32, 15 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 18218476088649089842 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "InterleaveIterable2", "methods" = [@InterleaveIterable2_field_first, @InterleaveIterable2_field_second, @InterleaveIterable2_field_InterleaveIterable2_0, @InterleaveIterable2_B_init_firstIterable2T_secondIterable2T, @InterleaveIterable2_B_iterator_, @InterleaveIterable2_B_each_fFunctionT_to_Nothing, @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, @InterleaveIterable2_B_map_fFunctionT_to_U, @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, @InterleaveIterable2_B_chain_otherIterable2T, @InterleaveIterable2_B_interleave_otherIterable2T, @InterleaveIterable2_B_zip_otherIterable2U, @InterleaveIterable2_B_product_otherIterable2U, @InterleaveIterable2_init_firstIterable2T_secondIterable2T, @InterleaveIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @InterleaveIterable2_field_InterleaveIterable2_0, @InterleaveIterable2_B_iterator_, @InterleaveIterable2_B_each_fFunctionT_to_Nothing, @InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleaveIterable2_B_all_fFunctionT_to_Ptri1, @InterleaveIterable2_B_any_fFunctionT_to_Ptri1, @InterleaveIterable2_B_map_fFunctionT_to_U, @InterleaveIterable2_B_filter_fFunctionT_to_Ptri1, @InterleaveIterable2_B_chain_otherIterable2T, @InterleaveIterable2_B_interleave_otherIterable2T, @InterleaveIterable2_B_zip_otherIterable2U, @InterleaveIterable2_B_product_otherIterable2U, @InterleaveIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Iterable2, @InterleaveIterable2, 18446744073709551615 : i64, @Object], "offset_tbl" = [34 : i32, 7 : i32, 0 : i32, 57 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 12188512388494089841 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "InterleaveIterator2", "methods" = [@InterleaveIterator2_field_first, @InterleaveIterator2_field_second, @InterleaveIterator2_field_on_first, @InterleaveIterator2_field_InterleaveIterator2_0, @InterleaveIterator2_B_init_firstIterator2T_secondIterator2T, @InterleaveIterator2_B_next_, @InterleaveIterator2_init_firstIterator2T_secondIterator2T, @InterleaveIterator2_next_, @InterleaveIterator2_field_InterleaveIterator2_0, @InterleaveIterator2_B_next_, @InterleaveIterator2_next_], "hash_tbl" = [18446744073709551615 : i64, @Object, @InterleaveIterator2, @Iterator2], "offset_tbl" = [0 : i32, 18 : i32, 7 : i32, 15 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 6709847746581360093 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "ZipIterable2", "methods" = [@ZipIterable2_field_first, @ZipIterable2_field_second, @ZipIterable2_field_ZipIterable2_0, @ZipIterable2_field_ZipIterable2_1, @ZipIterable2_field_ZipIterable2_2, @ZipIterable2_B_init_firstIterable2T_secondIterable2U, @ZipIterable2_B_iterator_, @ZipIterable2_B_each_fFunctionT_to_Nothing, @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZipIterable2_B_all_fFunctionT_to_Ptri1, @ZipIterable2_B_any_fFunctionT_to_Ptri1, @ZipIterable2_B_map_fFunctionT_to_U, @ZipIterable2_B_filter_fFunctionT_to_Ptri1, @ZipIterable2_B_chain_otherIterable2T, @ZipIterable2_B_interleave_otherIterable2T, @ZipIterable2_B_zip_otherIterable2U, @ZipIterable2_B_product_otherIterable2U, @ZipIterable2_init_firstIterable2T_secondIterable2U, @ZipIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @ZipIterable2_field_ZipIterable2_2, @ZipIterable2_B_iterator_, @ZipIterable2_B_each_fFunctionT_to_Nothing, @ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZipIterable2_B_all_fFunctionT_to_Ptri1, @ZipIterable2_B_any_fFunctionT_to_Ptri1, @ZipIterable2_B_map_fFunctionT_to_U, @ZipIterable2_B_filter_fFunctionT_to_Ptri1, @ZipIterable2_B_chain_otherIterable2T, @ZipIterable2_B_interleave_otherIterable2T, @ZipIterable2_B_zip_otherIterable2U, @ZipIterable2_B_product_otherIterable2U, @ZipIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Object, @Iterable2, @ZipIterable2, 18446744073709551615 : i64], "offset_tbl" = [59 : i32, 36 : i32, 7 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 15227793494662031801 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "ZipIterator2", "methods" = [@ZipIterator2_field_first, @ZipIterator2_field_second, @ZipIterator2_field_ZipIterator2_0, @ZipIterator2_field_ZipIterator2_1, @ZipIterator2_field_ZipIterator2_2, @ZipIterator2_B_init_firstIterator2T_secondIterator2U, @ZipIterator2_B_next_, @ZipIterator2_init_firstIterator2T_secondIterator2U, @ZipIterator2_next_, @ZipIterator2_field_ZipIterator2_2, @ZipIterator2_B_next_, @ZipIterator2_next_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @Iterator2, @ZipIterator2], "offset_tbl" = [19 : i32, 0 : i32, 16 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 5502728639611621286 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "ProductIterable2", "methods" = [@ProductIterable2_field_first, @ProductIterable2_field_second, @ProductIterable2_field_ProductIterable2_0, @ProductIterable2_field_ProductIterable2_1, @ProductIterable2_field_ProductIterable2_2, @ProductIterable2_B_init_firstIterable2T_secondIterable2U, @ProductIterable2_B_iterator_, @ProductIterable2_B_each_fFunctionT_to_Nothing, @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductIterable2_B_all_fFunctionT_to_Ptri1, @ProductIterable2_B_any_fFunctionT_to_Ptri1, @ProductIterable2_B_map_fFunctionT_to_U, @ProductIterable2_B_filter_fFunctionT_to_Ptri1, @ProductIterable2_B_chain_otherIterable2T, @ProductIterable2_B_interleave_otherIterable2T, @ProductIterable2_B_zip_otherIterable2U, @ProductIterable2_B_product_otherIterable2U, @ProductIterable2_init_firstIterable2T_secondIterable2U, @ProductIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U, @ProductIterable2_field_ProductIterable2_2, @ProductIterable2_B_iterator_, @ProductIterable2_B_each_fFunctionT_to_Nothing, @ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductIterable2_B_all_fFunctionT_to_Ptri1, @ProductIterable2_B_any_fFunctionT_to_Ptri1, @ProductIterable2_B_map_fFunctionT_to_U, @ProductIterable2_B_filter_fFunctionT_to_Ptri1, @ProductIterable2_B_chain_otherIterable2T, @ProductIterable2_B_interleave_otherIterable2T, @ProductIterable2_B_zip_otherIterable2U, @ProductIterable2_B_product_otherIterable2U, @ProductIterable2_iterator_, @Iterable2_each_fFunctionT_to_Nothing, @Iterable2_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable2_all_fFunctionT_to_Ptri1, @Iterable2_any_fFunctionT_to_Ptri1, @Iterable2_map_fFunctionT_to_U, @Iterable2_filter_fFunctionT_to_Ptri1, @Iterable2_chain_otherIterable2T, @Iterable2_interleave_otherIterable2T, @Iterable2_zip_otherIterable2U, @Iterable2_product_otherIterable2U], "hash_tbl" = [@Object, @Iterable2, @ProductIterable2, 18446744073709551615 : i64], "offset_tbl" = [59 : i32, 36 : i32, 7 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 7827074759551300494 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "ProductIterator2", "methods" = [@ProductIterator2_field_first_iterator, @ProductIterator2_field_second_iterator, @ProductIterator2_field_second_iterable, @ProductIterator2_field_current_first, @ProductIterator2_field_ProductIterator2_0, @ProductIterator2_field_ProductIterator2_1, @ProductIterator2_field_ProductIterator2_2, @ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U, @ProductIterator2_B_next_, @ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U, @ProductIterator2_next_, @ProductIterator2_field_ProductIterator2_2, @ProductIterator2_B_next_, @ProductIterator2_next_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @Iterator2, @ProductIterator2], "offset_tbl" = [21 : i32, 0 : i32, 18 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 4440657219728359865 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>} : () -> ()
  "mini.typedef"() {"class_name" = "Math", "methods" = [@Math_B__Self_sqrt_xPtrf64, @Math_B__Self_abs_xPtri32__Self_abs_xPtrf64, @Math_B__Self_max_aPtri32_bPtri32__Self_max_aPtrf64_bPtrf64, @Math_B__Self_min_aPtrf64_bPtrf64__Self_min_aPtri32_bPtri32, @Math_B__Self_round_xPtrf64, @Math_B__Self_floor_xPtrf64, @Math_B__Self_ceiling_xPtrf64, @Math__Self_sqrt_xPtrf64, @Math__Self_abs_xPtri32, @Math__Self_abs_xPtrf64, @Math__Self_max_aPtri32_bPtri32, @Math__Self_max_aPtrf64_bPtrf64, @Math__Self_min_aPtrf64_bPtrf64, @Math__Self_min_aPtri32_bPtri32, @Math__Self_round_xPtrf64, @Math__Self_floor_xPtrf64, @Math__Self_ceiling_xPtrf64], "hash_tbl" = [@Object, @Math], "offset_tbl" = [24 : i32, 7 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 8094150130346788308 : i64, "base_typ" = !llvm.struct<()>} : () -> ()
  "mini.typedef"() {"class_name" = "Integer", "methods" = [@Integer_field_value, @Integer_B_init_valuePtri32, @Integer_B__ADD_otherPtri32, @Integer_B__SUB_otherPtri32, @Integer_B__MUL_otherPtri32, @Integer_B__DIV_otherPtri32, @Integer_B_print_, @Integer_init_valuePtri32, @Integer__ADD_otherPtri32, @Integer__SUB_otherPtri32, @Integer__MUL_otherPtri32, @Integer__DIV_otherPtri32, @Integer_print_], "hash_tbl" = [@Object, @Integer], "offset_tbl" = [20 : i32, 7 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 17711596130900473384 : i64, "base_typ" = !llvm.struct<(i32)>} : () -> ()
  "mini.typedef"() {"class_name" = "BigBoy", "methods" = [@BigBoy_B_introduce_, @BigBoy_B_repr_, @BigBoy_introduce_, @Representable_repr_, @BigBoy_B_repr_, @Representable_repr_], "hash_tbl" = [@Object, @BigBoy, 18446744073709551615 : i64, @Representable], "offset_tbl" = [13 : i32, 7 : i32, 0 : i32, 11 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 3069357308562348185 : i64, "base_typ" = !llvm.struct<()>} : () -> ()
  "mini.typedef"() {"class_name" = "Integer2", "methods" = [@Integer2_field_value, @Integer2_B_value_, @Integer2_B_init_valuePtri32, @Integer2_B__ADD_otherPtri32, @Integer2_B__SUB_otherPtri32, @Integer2_B__MUL_otherPtri32, @Integer2_B__DIV_otherPtri32, @Integer2_B_print_, @Integer2_B_introduce_, @Integer2_B_repr_, @Integer2_value_, @Integer_init_valuePtri32, @Integer__ADD_otherPtri32, @Integer__SUB_otherPtri32, @Integer__MUL_otherPtri32, @Integer__DIV_otherPtri32, @Integer_print_, @BigBoy_introduce_, @Integer2_repr_, @Integer2_field_value, @Integer2_B_init_valuePtri32, @Integer2_B__ADD_otherPtri32, @Integer2_B__SUB_otherPtri32, @Integer2_B__MUL_otherPtri32, @Integer2_B__DIV_otherPtri32, @Integer2_B_print_, @Integer_init_valuePtri32, @Integer__ADD_otherPtri32, @Integer__SUB_otherPtri32, @Integer__MUL_otherPtri32, @Integer__DIV_otherPtri32, @Integer_print_, @Integer2_B_introduce_, @Integer2_B_repr_, @BigBoy_introduce_, @Integer2_repr_, @Integer2_B_repr_, @Integer2_repr_, @Integer2_B_repr_, @Integer2_repr_], "hash_tbl" = [@Integer, 18446744073709551615 : i64, 18446744073709551615 : i64, @Representable, @Object, @BigBoy, 18446744073709551615 : i64, @Integer2], "offset_tbl" = [26 : i32, 0 : i32, 0 : i32, 45 : i32, 39 : i32, 39 : i32, 0 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 1844024195090879880 : i64, "base_typ" = !llvm.struct<(i32)>} : () -> ()
  "mini.typedef"() {"class_name" = "Animal", "methods" = [@Animal_field_age, @Animal_field_hp, @Animal_field_skill, @Animal_B_init_agePtri32_hpPtrf64_skillPtri32, @Animal_B_say_age_, @Animal_B_say_skill_, @Animal_B_say_messagePtri32, @Animal_B_do_nothing_, @Animal_init_agePtri32_hpPtrf64_skillPtri32, @Animal_say_age_, @Animal_say_skill_, @Animal_say_messagePtri32, @Animal_do_nothing_], "hash_tbl" = [@Object, @Animal], "offset_tbl" = [20 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 1075018126824711487 : i64, "base_typ" = !llvm.struct<(i32, f64, i32)>} : () -> ()
  "mini.typedef"() {"class_name" = "Beaver", "methods" = [@Beaver_field_color, @Beaver_field_name, @Beaver_B_init_colorPtri32_namePtrf64, @Beaver_B__ADD_xPtri32, @Beaver_B_say_color_, @Beaver_init_colorPtri32_namePtrf64, @Beaver__ADD_xPtri32, @Beaver_say_color_], "hash_tbl" = [@Object, @Beaver], "offset_tbl" = [15 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 12321971123808713154 : i64, "base_typ" = !llvm.struct<(i32, f64)>} : () -> ()
  "mini.typedef"() {"class_name" = "ListNode", "methods" = [@ListNode_field_data, @ListNode_field_next, @ListNode_B_init_dataPtri32, @ListNode_B_push_nextListNode, @ListNode_B_next_, @ListNode_B_data_, @ListNode_B_iterator_, @ListNode_init_dataPtri32, @ListNode_push_nextListNode, @ListNode_next_, @ListNode_data_, @ListNode_iterator_], "hash_tbl" = [@Object, @ListNode], "offset_tbl" = [19 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 16690719123176460140 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "ListIterator", "methods" = [@ListIterator_field_node, @ListIterator_B_init_nodeListNode, @ListIterator_B_next_, @ListIterator_init_nodeListNode, @ListIterator_next_], "hash_tbl" = [@Object, @ListIterator], "offset_tbl" = [12 : i32, 7 : i32], "prime" = 4611686018427388073 : i64, "hash_id" = 12608044127096990237 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>} : () -> ()
  "mini.typedef"() {"class_name" = "Bard", "methods" = [@Bard_B_init_, @Bard_B_take_aAnimal_bBeaver_take_aPtri32_bPtri32_take_aPtrf64_bPtrf64_take_aPtri32_bPtrf64, @Bard_init_, @Bard_take_aAnimal_bBeaver, @Bard_take_aPtri32_bPtri32, @Bard_take_aPtrf64_bPtrf64, @Bard_take_aPtri32_bPtrf64], "hash_tbl" = [@Bard, @Object], "offset_tbl" = [7 : i32, 14 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 10466828736622358523 : i64, "base_typ" = !llvm.struct<()>} : () -> ()
  "mini.func"() ({
  ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.ptr):
    %2 = "mini.invariant"(%1) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1] : () -> ()
  ^bb1:
    %4 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%4, %3) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb2] : () -> ()
  ^bb2:
    %5 = "llvm.extractvalue"(%0) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6 = "llvm.load"(%3) : (!llvm.ptr) -> i32
    %7 = "llvm.getelementptr"(%5, %6) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9 = "llvm.getelementptr"(%7, %8) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb3(%10 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12 : !llvm.ptr):
    %13 = "mini.wrap"(%10) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Representable">
    %14 = "mini.to_fat_ptr"(%13) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Representable", "to_typ_name" = "Representable", "invariant"} : (!mini.fatptr<"Representable">) -> !mini.fatptr<"Representable">
    %15 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %16 = "mini.create_buffer"(%15) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %17 = builtin.unrealized_conversion_cast %16 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %18 = "mini.refer"(%17) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %19 = "mini.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "Object"} : () -> !llvm.ptr
    %20 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %21 = "mini.buffer_indexation"(%18, %20) {"typ" = !llvm.array<6 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%21, %19) {"typ" = !llvm.array<6 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %22 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %23 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %24 = "mini.unwrap"(%18) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %25 = "mini.unwrap"(%22) : (!mini.ptr<i32>) -> i32
    %26 = "mini.unwrap"(%23) : (!mini.ptr<i32>) -> i32
    %27 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %28 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %29 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %30 = builtin.unrealized_conversion_cast %18 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %31 = "mini.unwrap"(%30) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %32 = builtin.unrealized_conversion_cast %28 : !mini.ptr<i32> to !mini.ptr<i32>
    %33 = "mini.unwrap"(%32) : (!mini.ptr<i32>) -> i32
    %34 = builtin.unrealized_conversion_cast %29 : !mini.ptr<i32> to !mini.ptr<i32>
    %35 = "mini.unwrap"(%34) : (!mini.ptr<i32>) -> i32
    %36 = "mini.unwrap"(%27) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %37 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %38 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %39 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %40 = "mini.parameterizations_array"(%37, %38, %39) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%40, %36, %31, %33, %35) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %41 = "mini.to_fat_ptr"(%27) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%41) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "Representable_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb4(%42 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %43 : !llvm.ptr):
    %44 = "mini.invariant"(%43) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %45 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb5] : () -> ()
  ^bb5:
    %46 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%46, %45) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb6] : () -> ()
  ^bb6:
    %47 = "llvm.extractvalue"(%42) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %48 = "llvm.load"(%45) : (!llvm.ptr) -> i32
    %49 = "llvm.getelementptr"(%47, %48) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %50 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %51 = "llvm.getelementptr"(%49, %50) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%51) : (!llvm.ptr) -> ()
  }) {"func_name" = "Representable_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "offset" = 0 : i32, "meth_name" = "String_field_bytes"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "offset" = 1 : i32, "meth_name" = "String_field_length"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "offset" = 2 : i32, "meth_name" = "String_field_capacity"} : () -> ()
  "mini.func"() ({
  ^bb7(%52 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %53 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %54 : !llvm.ptr):
    %55 = "mini.wrap"(%52) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %56 = "mini.to_fat_ptr"(%55) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %57 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %58 = "mini.create_buffer"(%57) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %59 = "mini.field_access"(%56) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    "mini.castassign"(%59, %58) ({
      %60 = builtin.unrealized_conversion_cast %58 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ", "should_offset"} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> ()
    %61 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %62 = "mini.field_access"(%56) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    "mini.castassign"(%62, %61) ({
      %63 = builtin.unrealized_conversion_cast %61 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %64 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %65 = "mini.field_access"(%56) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    "mini.castassign"(%65, %64) ({
      %66 = builtin.unrealized_conversion_cast %64 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "String_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb8(%67 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %68 : !llvm.ptr):
    %69 = "mini.invariant"(%68) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %70 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb9] : () -> ()
  ^bb9:
    %71 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%71, %70) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb10] : () -> ()
  ^bb10:
    %72 = "llvm.extractvalue"(%67) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %73 = "llvm.load"(%70) : (!llvm.ptr) -> i32
    %74 = "llvm.getelementptr"(%72, %73) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %75 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %76 = "llvm.getelementptr"(%74, %75) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%76) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb11(%77 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %78 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %79 : !llvm.ptr, %80 : !llvm.struct<(!llvm.ptr)>, %81 : i32, %82 : i32):
    %83 = "mini.wrap"(%77) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %84 = "mini.to_fat_ptr"(%83) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %85 = "mini.wrap"(%80) : (!llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i8>>
    %86 = builtin.unrealized_conversion_cast %85 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %87 = "mini.field_access"(%84) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    "mini.castassign"(%87, %86) ({
      %88 = builtin.unrealized_conversion_cast %86 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ", "should_offset"} : (!mini.buffer<!mini.ptr<i8>>, !mini.buffer<!mini.ptr<i8>>) -> ()
    %89 = "mini.wrap"(%81) : (i32) -> !mini.ptr<i32>
    %90 = builtin.unrealized_conversion_cast %89 : !mini.ptr<i32> to !mini.ptr<i32>
    %91 = "mini.field_access"(%84) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    "mini.castassign"(%91, %90) ({
      %92 = builtin.unrealized_conversion_cast %90 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %93 = "mini.wrap"(%82) : (i32) -> !mini.ptr<i32>
    %94 = builtin.unrealized_conversion_cast %93 : !mini.ptr<i32> to !mini.ptr<i32>
    %95 = "mini.field_access"(%84) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    "mini.castassign"(%95, %94) ({
      %96 = builtin.unrealized_conversion_cast %94 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "String_init_bytesBufferPtri8_lengthPtri32_capacityPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb12(%97 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %98 : !llvm.ptr, %99 : !llvm.struct<(!llvm.ptr)>, %100 : i32, %101 : i32):
    %102 = "mini.invariant"(%98) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %103 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb13] : () -> ()
  ^bb14:
    %104 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%104, %103) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb15] : () -> ()
  ^bb16:
    %105 = "llvm.getelementptr"(%98) <{"rawConstantIndices" = array<i32: 0, 2>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %106 = "llvm.load"(%105) : (!llvm.ptr) -> !llvm.ptr
    %107 = "llvm.getelementptr"(%106) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %108 = "llvm.getelementptr"(%106) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %109 = "llvm.getelementptr"(%106) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %110 = "llvm.getelementptr"(%106) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %111 = "llvm.load"(%107) : (!llvm.ptr) -> i64
    %112 = "llvm.load"(%108) : (!llvm.ptr) -> i64
    %113 = "llvm.load"(%109) : (!llvm.ptr) -> !llvm.ptr
    %114 = "llvm.load"(%110) : (!llvm.ptr) -> !llvm.ptr
    %115 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %116 = "llvm.ptrtoint"(%115) : (!llvm.ptr) -> i64
    %117 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %118 = "mini.subtype"(%113, %112, %111, %117, %116, %114) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%118) [^bb14, ^bb14] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb17:
    %119 = "llvm.getelementptr"(%98) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %120 = "llvm.load"(%119) : (!llvm.ptr) -> !llvm.ptr
    %121 = "llvm.getelementptr"(%120) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %122 = "llvm.getelementptr"(%120) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %123 = "llvm.getelementptr"(%120) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %124 = "llvm.getelementptr"(%120) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %125 = "llvm.load"(%121) : (!llvm.ptr) -> i64
    %126 = "llvm.load"(%122) : (!llvm.ptr) -> i64
    %127 = "llvm.load"(%123) : (!llvm.ptr) -> !llvm.ptr
    %128 = "llvm.load"(%124) : (!llvm.ptr) -> !llvm.ptr
    %129 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %130 = "llvm.ptrtoint"(%129) : (!llvm.ptr) -> i64
    %131 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %132 = "mini.subtype"(%127, %126, %125, %131, %130, %128) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%132) [^bb16, ^bb16] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb13:
    %133 = "llvm.getelementptr"(%98) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %134 = "llvm.load"(%133) : (!llvm.ptr) -> !llvm.ptr
    %135 = "llvm.getelementptr"(%134) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %136 = "llvm.getelementptr"(%134) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %137 = "llvm.getelementptr"(%134) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %138 = "llvm.getelementptr"(%134) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %139 = "llvm.load"(%135) : (!llvm.ptr) -> i64
    %140 = "llvm.load"(%136) : (!llvm.ptr) -> i64
    %141 = "llvm.load"(%137) : (!llvm.ptr) -> !llvm.ptr
    %142 = "llvm.load"(%138) : (!llvm.ptr) -> !llvm.ptr
    %143 = "mini.addr_of"() {"global_name" = @buffer_typ} : () -> !llvm.ptr
    %144 = "llvm.ptrtoint"(%143) : (!llvm.ptr) -> i64
    %145 = "llvm.mlir.constant"() <{"value" = 18128551326514141379 : i64}> : () -> i64
    %146 = "mini.subtype"(%141, %140, %139, %145, %144, %142) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%146) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb15:
    %147 = "llvm.extractvalue"(%97) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %148 = "llvm.load"(%103) : (!llvm.ptr) -> i32
    %149 = "llvm.getelementptr"(%147, %148) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %150 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %151 = "llvm.getelementptr"(%149, %150) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%151) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_init_bytesBufferPtri8_lengthPtri32_capacityPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb18(%152 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %153 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %154 : !llvm.ptr):
    %155 = "mini.wrap"(%152) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %156 = "mini.to_fat_ptr"(%155) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %157 = "mini.field_access"(%156) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %158 = builtin.unrealized_conversion_cast %157 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%158) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "String_length_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb19(%159 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %160 : !llvm.ptr):
    %161 = "mini.invariant"(%160) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %162 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb20] : () -> ()
  ^bb20:
    %163 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%163, %162) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb21] : () -> ()
  ^bb21:
    %164 = "llvm.extractvalue"(%159) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %165 = "llvm.load"(%162) : (!llvm.ptr) -> i32
    %166 = "llvm.getelementptr"(%164, %165) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %167 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %168 = "llvm.getelementptr"(%166, %167) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%168) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_length_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb22(%169 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %170 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %171 : !llvm.ptr):
    %172 = "mini.wrap"(%169) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %173 = "mini.to_fat_ptr"(%172) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %174 = "mini.field_access"(%173) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %175 = builtin.unrealized_conversion_cast %174 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%175) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "String_capacity_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb23(%176 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %177 : !llvm.ptr):
    %178 = "mini.invariant"(%177) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %179 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb24] : () -> ()
  ^bb24:
    %180 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%180, %179) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb25] : () -> ()
  ^bb25:
    %181 = "llvm.extractvalue"(%176) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %182 = "llvm.load"(%179) : (!llvm.ptr) -> i32
    %183 = "llvm.getelementptr"(%181, %182) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %184 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %185 = "llvm.getelementptr"(%183, %184) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%185) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb26(%186 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %187 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %188 : !llvm.ptr):
    %189 = "mini.wrap"(%186) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %190 = "mini.to_fat_ptr"(%189) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %191 = "mini.field_access"(%190) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %192 = builtin.unrealized_conversion_cast %191 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    "mini.return"(%192) : (!mini.buffer<!mini.ptr<i8>>) -> ()
  }) {"func_name" = "String_bytes_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb27(%193 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %194 : !llvm.ptr):
    %195 = "mini.invariant"(%194) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %196 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb28] : () -> ()
  ^bb28:
    %197 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%197, %196) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb29] : () -> ()
  ^bb29:
    %198 = "llvm.extractvalue"(%193) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %199 = "llvm.load"(%196) : (!llvm.ptr) -> i32
    %200 = "llvm.getelementptr"(%198, %199) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %201 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %202 = "llvm.getelementptr"(%200, %201) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%202) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_bytes_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb30(%203 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %204 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %205 : !llvm.ptr, %206 : i8):
    %207 = "mini.wrap"(%203) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %208 = "mini.to_fat_ptr"(%207) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %209 = "mini.wrap"(%206) : (i8) -> !mini.ptr<i8>
    %210 = builtin.unrealized_conversion_cast %209 : !mini.ptr<i8> to !mini.ptr<i8>
    %211 = "mini.field_access"(%208) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %212 = "mini.field_access"(%208) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %213 = "mini.unwrap"(%211) : (!mini.ptr<i32>) -> i32
    %214 = "mini.unwrap"(%212) : (!mini.ptr<i32>) -> i32
    %215 = "mini.comparison"(%213, %214) {"op" = "LT"} : (i32, i32) -> i1
    %216 = "mini.wrap"(%215) : (i1) -> !mini.ptr<i32>
    %217 = "mini.unwrap"(%216) : (!mini.ptr<i32>) -> i1
    "mini.if"(%217) ({
      %218 = "mini.field_access"(%208) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %219 = "mini.field_access"(%208) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %220 = "mini.buffer_indexation"(%218, %219) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      "mini.castassign"(%220, %210) ({
        %221 = builtin.unrealized_conversion_cast %210 : !mini.ptr<i8> to !mini.ptr<i8>
      }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
      %222 = "mini.field_access"(%208) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %223 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %224 = "mini.unwrap"(%222) : (!mini.ptr<i32>) -> i32
      %225 = "mini.unwrap"(%223) : (!mini.ptr<i32>) -> i32
      %226 = "mini.arithmetic"(%224, %225) {"op" = "ADD"} : (i32, i32) -> i32
      %227 = "mini.wrap"(%226) : (i32) -> !mini.ptr<i32>
      %228 = "mini.field_access"(%208) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      "mini.castassign"(%228, %227) ({
        %229 = builtin.unrealized_conversion_cast %227 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %230 = "mini.to_fat_ptr"(%208) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      "mini.return"(%230) : (!mini.fatptr<"String">) -> ()
    }) : (i1) -> ()
    %231 = "mini.field_access"(%208) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %232 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %233 = "mini.unwrap"(%231) : (!mini.ptr<i32>) -> i32
    %234 = "mini.unwrap"(%232) : (!mini.ptr<i32>) -> i32
    %235 = "mini.arithmetic"(%233, %234) {"op" = "MUL"} : (i32, i32) -> i32
    %236 = "mini.wrap"(%235) : (i32) -> !mini.ptr<i32>
    %237 = "mini.field_access"(%208) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    "mini.castassign"(%237, %236) ({
      %238 = builtin.unrealized_conversion_cast %236 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %239 = "mini.field_access"(%208) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %240 = builtin.unrealized_conversion_cast %239 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %241 = "mini.refer"(%240) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %242 = "mini.field_access"(%208) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %243 = "mini.create_buffer"(%242) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %244 = "mini.field_access"(%208) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    "mini.castassign"(%244, %243) ({
      %245 = builtin.unrealized_conversion_cast %243 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ", "should_offset"} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> ()
    %246 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %247 = "mini.field_access"(%208) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %248 = "mini.unwrap"(%246) : (!mini.ptr<i32>) -> i32
      %249 = "mini.unwrap"(%247) : (!mini.ptr<i32>) -> i32
      %250 = "mini.comparison"(%248, %249) {"op" = "LT"} : (i32, i32) -> i1
      %251 = "mini.wrap"(%250) : (i1) -> !mini.ptr<i32>
      %252 = "mini.unwrap"(%251) : (!mini.ptr<i32>) -> i1
    }, {
      %253 = "mini.buffer_indexation"(%241, %246) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %254 = "mini.field_access"(%208) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %255 = "mini.buffer_indexation"(%254, %246) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      "mini.castassign"(%255, %253) ({
        %256 = builtin.unrealized_conversion_cast %253 : !mini.ptr<i8> to !mini.ptr<i8>
      }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
      %257 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %258 = "mini.unwrap"(%246) : (!mini.ptr<i32>) -> i32
      %259 = "mini.unwrap"(%257) : (!mini.ptr<i32>) -> i32
      %260 = "mini.arithmetic"(%258, %259) {"op" = "ADD"} : (i32, i32) -> i32
      %261 = "mini.wrap"(%260) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%246, %261) ({
        %262 = builtin.unrealized_conversion_cast %261 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %263 = "mini.field_access"(%208) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %264 = "mini.field_access"(%208) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %265 = "mini.buffer_indexation"(%263, %264) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
    "mini.castassign"(%265, %210) ({
      %266 = builtin.unrealized_conversion_cast %210 : !mini.ptr<i8> to !mini.ptr<i8>
    }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
    %267 = "mini.field_access"(%208) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %268 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %269 = "mini.unwrap"(%267) : (!mini.ptr<i32>) -> i32
    %270 = "mini.unwrap"(%268) : (!mini.ptr<i32>) -> i32
    %271 = "mini.arithmetic"(%269, %270) {"op" = "ADD"} : (i32, i32) -> i32
    %272 = "mini.wrap"(%271) : (i32) -> !mini.ptr<i32>
    %273 = "mini.field_access"(%208) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    "mini.castassign"(%273, %272) ({
      %274 = builtin.unrealized_conversion_cast %272 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %275 = "mini.to_fat_ptr"(%208) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%275) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_append_xPtri8", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb31(%276 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %277 : !llvm.ptr, %278 : i8):
    %279 = "mini.invariant"(%277) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %280 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb32] : () -> ()
  ^bb33:
    %281 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%281, %280) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb34] : () -> ()
  ^bb32:
    %282 = "llvm.getelementptr"(%277) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %283 = "llvm.load"(%282) : (!llvm.ptr) -> !llvm.ptr
    %284 = "llvm.getelementptr"(%283) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %285 = "llvm.getelementptr"(%283) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %286 = "llvm.getelementptr"(%283) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %287 = "llvm.getelementptr"(%283) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %288 = "llvm.load"(%284) : (!llvm.ptr) -> i64
    %289 = "llvm.load"(%285) : (!llvm.ptr) -> i64
    %290 = "llvm.load"(%286) : (!llvm.ptr) -> !llvm.ptr
    %291 = "llvm.load"(%287) : (!llvm.ptr) -> !llvm.ptr
    %292 = "mini.addr_of"() {"global_name" = @i8_typ} : () -> !llvm.ptr
    %293 = "llvm.ptrtoint"(%292) : (!llvm.ptr) -> i64
    %294 = "llvm.mlir.constant"() <{"value" = 2582149688529881115 : i64}> : () -> i64
    %295 = "mini.subtype"(%290, %289, %288, %294, %293, %291) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%295) [^bb33, ^bb33] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb34:
    %296 = "llvm.extractvalue"(%276) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %297 = "llvm.load"(%280) : (!llvm.ptr) -> i32
    %298 = "llvm.getelementptr"(%296, %297) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %299 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %300 = "llvm.getelementptr"(%298, %299) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%300) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_append_xPtri8", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb35(%301 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %302 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %303 : !llvm.ptr, %304 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %305 = "mini.wrap"(%301) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %306 = "mini.to_fat_ptr"(%305) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %307 = "mini.wrap"(%304) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %308 = "mini.to_fat_ptr"(%307) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %309 = "mini.unwrap"(%308) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %310 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %311 = "mini.method_call"(%310, %309) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %312 = builtin.unrealized_conversion_cast %311 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %313 = builtin.unrealized_conversion_cast %312 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %314 = "mini.refer"(%313) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %315 = "mini.unwrap"(%308) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %316 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %317 = "mini.method_call"(%316, %315) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %318 = builtin.unrealized_conversion_cast %317 : !mini.ptr<i32> to !mini.ptr<i32>
    %319 = "mini.field_access"(%306) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %320 = "mini.unwrap"(%319) : (!mini.ptr<i32>) -> i32
    %321 = "mini.unwrap"(%318) : (!mini.ptr<i32>) -> i32
    %322 = "mini.arithmetic"(%320, %321) {"op" = "ADD"} : (i32, i32) -> i32
    %323 = "mini.wrap"(%322) : (i32) -> !mini.ptr<i32>
    %324 = "mini.field_access"(%306) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %325 = "mini.unwrap"(%323) : (!mini.ptr<i32>) -> i32
    %326 = "mini.unwrap"(%324) : (!mini.ptr<i32>) -> i32
    %327 = "mini.comparison"(%325, %326) {"op" = "LT"} : (i32, i32) -> i1
    %328 = "mini.wrap"(%327) : (i1) -> !mini.ptr<i32>
    %329 = "mini.unwrap"(%328) : (!mini.ptr<i32>) -> i1
    "mini.if"(%329) ({
      %330 = "mini.field_access"(%306) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %331 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      "mini.while"() ({
        %332 = "mini.field_access"(%306) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
        %333 = "mini.unwrap"(%332) : (!mini.ptr<i32>) -> i32
        %334 = "mini.unwrap"(%318) : (!mini.ptr<i32>) -> i32
        %335 = "mini.arithmetic"(%333, %334) {"op" = "ADD"} : (i32, i32) -> i32
        %336 = "mini.wrap"(%335) : (i32) -> !mini.ptr<i32>
        %337 = "mini.unwrap"(%330) : (!mini.ptr<i32>) -> i32
        %338 = "mini.unwrap"(%336) : (!mini.ptr<i32>) -> i32
        %339 = "mini.comparison"(%337, %338) {"op" = "LT"} : (i32, i32) -> i1
        %340 = "mini.wrap"(%339) : (i1) -> !mini.ptr<i32>
        %341 = "mini.unwrap"(%340) : (!mini.ptr<i32>) -> i1
      }, {
        %342 = "mini.buffer_indexation"(%314, %331) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
        %343 = "mini.field_access"(%306) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
        %344 = "mini.buffer_indexation"(%343, %330) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
        "mini.castassign"(%344, %342) ({
          %345 = builtin.unrealized_conversion_cast %342 : !mini.ptr<i8> to !mini.ptr<i8>
        }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
        %346 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %347 = "mini.unwrap"(%330) : (!mini.ptr<i32>) -> i32
        %348 = "mini.unwrap"(%346) : (!mini.ptr<i32>) -> i32
        %349 = "mini.arithmetic"(%347, %348) {"op" = "ADD"} : (i32, i32) -> i32
        %350 = "mini.wrap"(%349) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%330, %350) ({
          %351 = builtin.unrealized_conversion_cast %350 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        %352 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %353 = "mini.unwrap"(%331) : (!mini.ptr<i32>) -> i32
        %354 = "mini.unwrap"(%352) : (!mini.ptr<i32>) -> i32
        %355 = "mini.arithmetic"(%353, %354) {"op" = "ADD"} : (i32, i32) -> i32
        %356 = "mini.wrap"(%355) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%331, %356) ({
          %357 = builtin.unrealized_conversion_cast %356 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      }) : () -> ()
      %358 = "mini.field_access"(%306) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %359 = "mini.unwrap"(%358) : (!mini.ptr<i32>) -> i32
      %360 = "mini.unwrap"(%318) : (!mini.ptr<i32>) -> i32
      %361 = "mini.arithmetic"(%359, %360) {"op" = "ADD"} : (i32, i32) -> i32
      %362 = "mini.wrap"(%361) : (i32) -> !mini.ptr<i32>
      %363 = "mini.field_access"(%306) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      "mini.castassign"(%363, %362) ({
        %364 = builtin.unrealized_conversion_cast %362 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %365 = "mini.to_fat_ptr"(%306) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      "mini.return"(%365) : (!mini.fatptr<"String">) -> ()
    }) : (i1) -> ()
    %366 = "mini.field_access"(%306) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %367 = "mini.unwrap"(%366) : (!mini.ptr<i32>) -> i32
    %368 = "mini.unwrap"(%318) : (!mini.ptr<i32>) -> i32
    %369 = "mini.arithmetic"(%367, %368) {"op" = "ADD"} : (i32, i32) -> i32
    %370 = "mini.wrap"(%369) : (i32) -> !mini.ptr<i32>
    %371 = "mini.field_access"(%306) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    "mini.castassign"(%371, %370) ({
      %372 = builtin.unrealized_conversion_cast %370 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %373 = "mini.field_access"(%306) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %374 = builtin.unrealized_conversion_cast %373 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %375 = "mini.refer"(%374) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %376 = "mini.field_access"(%306) {"offset" = 2 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %377 = "mini.create_buffer"(%376) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %378 = "mini.field_access"(%306) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    "mini.castassign"(%378, %377) ({
      %379 = builtin.unrealized_conversion_cast %377 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ", "should_offset"} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> ()
    %380 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %381 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %382 = "mini.field_access"(%306) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %383 = "mini.unwrap"(%382) : (!mini.ptr<i32>) -> i32
      %384 = "mini.unwrap"(%318) : (!mini.ptr<i32>) -> i32
      %385 = "mini.arithmetic"(%383, %384) {"op" = "ADD"} : (i32, i32) -> i32
      %386 = "mini.wrap"(%385) : (i32) -> !mini.ptr<i32>
      %387 = "mini.unwrap"(%380) : (!mini.ptr<i32>) -> i32
      %388 = "mini.unwrap"(%386) : (!mini.ptr<i32>) -> i32
      %389 = "mini.comparison"(%387, %388) {"op" = "LT"} : (i32, i32) -> i1
      %390 = "mini.wrap"(%389) : (i1) -> !mini.ptr<i32>
      %391 = "mini.unwrap"(%390) : (!mini.ptr<i32>) -> i1
    }, {
      %392 = "mini.field_access"(%306) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %393 = "mini.unwrap"(%380) : (!mini.ptr<i32>) -> i32
      %394 = "mini.unwrap"(%392) : (!mini.ptr<i32>) -> i32
      %395 = "mini.comparison"(%393, %394) {"op" = "LT"} : (i32, i32) -> i1
      %396 = "mini.wrap"(%395) : (i1) -> !mini.ptr<i32>
      %397 = "mini.unwrap"(%396) : (!mini.ptr<i32>) -> i1
      "mini.if"(%397) ({
        %398 = "mini.buffer_indexation"(%375, %380) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
        %399 = "mini.field_access"(%306) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
        %400 = "mini.buffer_indexation"(%399, %380) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
        "mini.castassign"(%400, %398) ({
          %401 = builtin.unrealized_conversion_cast %398 : !mini.ptr<i8> to !mini.ptr<i8>
        }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
        %402 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %403 = "mini.unwrap"(%380) : (!mini.ptr<i32>) -> i32
        %404 = "mini.unwrap"(%402) : (!mini.ptr<i32>) -> i32
        %405 = "mini.arithmetic"(%403, %404) {"op" = "ADD"} : (i32, i32) -> i32
        %406 = "mini.wrap"(%405) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%380, %406) ({
          %407 = builtin.unrealized_conversion_cast %406 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        "mini.continue"() [^bb36] : () -> ()
      }) : (i1) -> ()
      %408 = "mini.buffer_indexation"(%314, %381) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %409 = "mini.field_access"(%306) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %410 = "mini.buffer_indexation"(%409, %380) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      "mini.castassign"(%410, %408) ({
        %411 = builtin.unrealized_conversion_cast %408 : !mini.ptr<i8> to !mini.ptr<i8>
      }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
      %412 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %413 = "mini.unwrap"(%380) : (!mini.ptr<i32>) -> i32
      %414 = "mini.unwrap"(%412) : (!mini.ptr<i32>) -> i32
      %415 = "mini.arithmetic"(%413, %414) {"op" = "ADD"} : (i32, i32) -> i32
      %416 = "mini.wrap"(%415) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%380, %416) ({
        %417 = builtin.unrealized_conversion_cast %416 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %418 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %419 = "mini.unwrap"(%381) : (!mini.ptr<i32>) -> i32
      %420 = "mini.unwrap"(%418) : (!mini.ptr<i32>) -> i32
      %421 = "mini.arithmetic"(%419, %420) {"op" = "ADD"} : (i32, i32) -> i32
      %422 = "mini.wrap"(%421) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%381, %422) ({
        %423 = builtin.unrealized_conversion_cast %422 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %424 = "mini.field_access"(%306) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %425 = "mini.unwrap"(%424) : (!mini.ptr<i32>) -> i32
    %426 = "mini.unwrap"(%318) : (!mini.ptr<i32>) -> i32
    %427 = "mini.arithmetic"(%425, %426) {"op" = "ADD"} : (i32, i32) -> i32
    %428 = "mini.wrap"(%427) : (i32) -> !mini.ptr<i32>
    %429 = "mini.field_access"(%306) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    "mini.castassign"(%429, %428) ({
      %430 = builtin.unrealized_conversion_cast %428 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %431 = "mini.to_fat_ptr"(%306) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%431) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_extend_strString", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb37(%432 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %433 : !llvm.ptr, %434 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %435 = "mini.invariant"(%433) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %436 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb38] : () -> ()
  ^bb39:
    %437 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%437, %436) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb40] : () -> ()
  ^bb38:
    %438 = "llvm.getelementptr"(%433) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %439 = "llvm.load"(%438) : (!llvm.ptr) -> !llvm.ptr
    %440 = "llvm.getelementptr"(%439) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %441 = "llvm.getelementptr"(%439) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %442 = "llvm.getelementptr"(%439) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %443 = "llvm.getelementptr"(%439) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %444 = "llvm.load"(%440) : (!llvm.ptr) -> i64
    %445 = "llvm.load"(%441) : (!llvm.ptr) -> i64
    %446 = "llvm.load"(%442) : (!llvm.ptr) -> !llvm.ptr
    %447 = "llvm.load"(%443) : (!llvm.ptr) -> !llvm.ptr
    %448 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %449 = "llvm.ptrtoint"(%448) : (!llvm.ptr) -> i64
    %450 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %451 = "mini.subtype"(%446, %445, %444, %450, %449, %447) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%451) [^bb39, ^bb39] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb40:
    %452 = "llvm.extractvalue"(%432) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %453 = "llvm.load"(%436) : (!llvm.ptr) -> i32
    %454 = "llvm.getelementptr"(%452, %453) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %455 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %456 = "llvm.getelementptr"(%454, %455) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%456) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_extend_strString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb41(%457 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %458 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %459 : !llvm.ptr, %460 : i32):
    %461 = "mini.wrap"(%457) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %462 = "mini.to_fat_ptr"(%461) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %463 = "mini.wrap"(%460) : (i32) -> !mini.ptr<i32>
    %464 = builtin.unrealized_conversion_cast %463 : !mini.ptr<i32> to !mini.ptr<i32>
    %465 = "mini.field_access"(%462) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %466 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %467 = "mini.unwrap"(%465) : (!mini.ptr<i32>) -> i32
    %468 = "mini.unwrap"(%466) : (!mini.ptr<i32>) -> i32
    %469 = "mini.arithmetic"(%467, %468) {"op" = "SUB"} : (i32, i32) -> i32
    %470 = "mini.wrap"(%469) : (i32) -> !mini.ptr<i32>
    %471 = "mini.unwrap"(%464) : (!mini.ptr<i32>) -> i32
    %472 = "mini.unwrap"(%470) : (!mini.ptr<i32>) -> i32
    %473 = "mini.comparison"(%471, %472) {"op" = "GT"} : (i32, i32) -> i1
    %474 = "mini.wrap"(%473) : (i1) -> !mini.ptr<i32>
    %475 = "mini.unwrap"(%474) : (!mini.ptr<i32>) -> i1
    "mini.if"(%475) ({
      "mini.coro_yield"() : () -> ()
    }) : (i1) -> ()
    %476 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %477 = "mini.unwrap"(%464) : (!mini.ptr<i32>) -> i32
    %478 = "mini.unwrap"(%476) : (!mini.ptr<i32>) -> i32
    %479 = "mini.comparison"(%477, %478) {"op" = "GE"} : (i32, i32) -> i1
    %480 = "mini.wrap"(%479) : (i1) -> !mini.ptr<i32>
    %481 = "mini.unwrap"(%480) : (!mini.ptr<i32>) -> i1
    "mini.if"(%481) ({
      %482 = "mini.field_access"(%462) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %483 = "mini.buffer_indexation"(%482, %464) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %484 = builtin.unrealized_conversion_cast %483 : !mini.ptr<i8> to !mini.ptr<i8>
      "mini.return"(%484) : (!mini.ptr<i8>) -> ()
    }) : (i1) -> ()
    %485 = "mini.field_access"(%462) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %486 = "mini.unwrap"(%485) : (!mini.ptr<i32>) -> i32
    %487 = "mini.unwrap"(%464) : (!mini.ptr<i32>) -> i32
    %488 = "mini.arithmetic"(%486, %487) {"op" = "ADD"} : (i32, i32) -> i32
    %489 = "mini.wrap"(%488) : (i32) -> !mini.ptr<i32>
    %490 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %491 = "mini.unwrap"(%489) : (!mini.ptr<i32>) -> i32
    %492 = "mini.unwrap"(%490) : (!mini.ptr<i32>) -> i32
    %493 = "mini.comparison"(%491, %492) {"op" = "LT"} : (i32, i32) -> i1
    %494 = "mini.wrap"(%493) : (i1) -> !mini.ptr<i32>
    %495 = "mini.unwrap"(%494) : (!mini.ptr<i32>) -> i1
    "mini.if"(%495) ({
      "mini.coro_yield"() : () -> ()
    }) : (i1) -> ()
    %496 = "mini.field_access"(%462) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %497 = "mini.field_access"(%462) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %498 = "mini.unwrap"(%497) : (!mini.ptr<i32>) -> i32
    %499 = "mini.unwrap"(%464) : (!mini.ptr<i32>) -> i32
    %500 = "mini.arithmetic"(%498, %499) {"op" = "ADD"} : (i32, i32) -> i32
    %501 = "mini.wrap"(%500) : (i32) -> !mini.ptr<i32>
    %502 = "mini.buffer_indexation"(%496, %501) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
    %503 = builtin.unrealized_conversion_cast %502 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.return"(%503) : (!mini.ptr<i8>) -> ()
  }) {"func_name" = "String__index_xPtri32", "result_type" = i8, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb42(%504 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %505 : !llvm.ptr, %506 : i32):
    %507 = "mini.invariant"(%505) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %508 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb43] : () -> ()
  ^bb44:
    %509 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%509, %508) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb45] : () -> ()
  ^bb43:
    %510 = "llvm.getelementptr"(%505) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %511 = "llvm.load"(%510) : (!llvm.ptr) -> !llvm.ptr
    %512 = "llvm.getelementptr"(%511) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %513 = "llvm.getelementptr"(%511) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %514 = "llvm.getelementptr"(%511) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %515 = "llvm.getelementptr"(%511) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %516 = "llvm.load"(%512) : (!llvm.ptr) -> i64
    %517 = "llvm.load"(%513) : (!llvm.ptr) -> i64
    %518 = "llvm.load"(%514) : (!llvm.ptr) -> !llvm.ptr
    %519 = "llvm.load"(%515) : (!llvm.ptr) -> !llvm.ptr
    %520 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %521 = "llvm.ptrtoint"(%520) : (!llvm.ptr) -> i64
    %522 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %523 = "mini.subtype"(%518, %517, %516, %522, %521, %519) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%523) [^bb44, ^bb44] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb45:
    %524 = "llvm.extractvalue"(%504) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %525 = "llvm.load"(%508) : (!llvm.ptr) -> i32
    %526 = "llvm.getelementptr"(%524, %525) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %527 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %528 = "llvm.getelementptr"(%526, %527) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%528) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B__index_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb46(%529 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %530 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %531 : !llvm.ptr, %532 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %533 = "mini.wrap"(%529) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %534 = "mini.to_fat_ptr"(%533) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %535 = "mini.wrap"(%532) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %536 = "mini.to_fat_ptr"(%535) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %537 = "mini.field_access"(%534) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %538 = "mini.unwrap"(%536) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %539 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %540 = "mini.method_call"(%539, %538) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %541 = builtin.unrealized_conversion_cast %540 : !mini.ptr<i32> to !mini.ptr<i32>
    %542 = "mini.unwrap"(%537) : (!mini.ptr<i32>) -> i32
    %543 = "mini.unwrap"(%541) : (!mini.ptr<i32>) -> i32
    %544 = "mini.comparison"(%542, %543) {"op" = "NEQ"} : (i32, i32) -> i1
    %545 = "mini.wrap"(%544) : (i1) -> !mini.ptr<i32>
    %546 = "mini.unwrap"(%545) : (!mini.ptr<i32>) -> i1
    "mini.if"(%546) ({
      %547 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %548 = builtin.unrealized_conversion_cast %547 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.return"(%548) : (!mini.ptr<i1>) -> ()
    }) : (i1) -> ()
    %549 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %550 = "mini.field_access"(%534) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %551 = "mini.unwrap"(%549) : (!mini.ptr<i32>) -> i32
      %552 = "mini.unwrap"(%550) : (!mini.ptr<i32>) -> i32
      %553 = "mini.comparison"(%551, %552) {"op" = "LT"} : (i32, i32) -> i1
      %554 = "mini.wrap"(%553) : (i1) -> !mini.ptr<i32>
      %555 = "mini.unwrap"(%554) : (!mini.ptr<i32>) -> i1
    }, {
      %556 = "mini.field_access"(%534) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %557 = "mini.buffer_indexation"(%556, %549) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %558 = "mini.unwrap"(%536) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %559 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %560 = "mini.method_call"(%559, %558) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %561 = builtin.unrealized_conversion_cast %560 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %562 = "mini.buffer_indexation"(%561, %549) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %563 = "mini.unwrap"(%557) : (!mini.ptr<i8>) -> i8
      %564 = "mini.unwrap"(%562) : (!mini.ptr<i8>) -> i8
      %565 = "mini.comparison"(%563, %564) {"op" = "NEQ"} : (i8, i8) -> i1
      %566 = "mini.wrap"(%565) : (i1) -> !mini.ptr<i8>
      %567 = "mini.unwrap"(%566) : (!mini.ptr<i8>) -> i1
      "mini.if"(%567) ({
        %568 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
        %569 = builtin.unrealized_conversion_cast %568 : !mini.ptr<i1> to !mini.ptr<i1>
        "mini.return"(%569) : (!mini.ptr<i1>) -> ()
      }) : (i1) -> ()
      %570 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %571 = "mini.unwrap"(%549) : (!mini.ptr<i32>) -> i32
      %572 = "mini.unwrap"(%570) : (!mini.ptr<i32>) -> i32
      %573 = "mini.arithmetic"(%571, %572) {"op" = "ADD"} : (i32, i32) -> i32
      %574 = "mini.wrap"(%573) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%549, %574) ({
        %575 = builtin.unrealized_conversion_cast %574 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %576 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %577 = builtin.unrealized_conversion_cast %576 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%577) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "String__EQ_otherString", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb47(%578 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %579 : !llvm.ptr, %580 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %581 = "mini.invariant"(%579) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %582 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb48] : () -> ()
  ^bb49:
    %583 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%583, %582) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb50] : () -> ()
  ^bb48:
    %584 = "llvm.getelementptr"(%579) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %585 = "llvm.load"(%584) : (!llvm.ptr) -> !llvm.ptr
    %586 = "llvm.getelementptr"(%585) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %587 = "llvm.getelementptr"(%585) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %588 = "llvm.getelementptr"(%585) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %589 = "llvm.getelementptr"(%585) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %590 = "llvm.load"(%586) : (!llvm.ptr) -> i64
    %591 = "llvm.load"(%587) : (!llvm.ptr) -> i64
    %592 = "llvm.load"(%588) : (!llvm.ptr) -> !llvm.ptr
    %593 = "llvm.load"(%589) : (!llvm.ptr) -> !llvm.ptr
    %594 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %595 = "llvm.ptrtoint"(%594) : (!llvm.ptr) -> i64
    %596 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %597 = "mini.subtype"(%592, %591, %590, %596, %595, %593) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%597) [^bb49, ^bb49] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb50:
    %598 = "llvm.extractvalue"(%578) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %599 = "llvm.load"(%582) : (!llvm.ptr) -> i32
    %600 = "llvm.getelementptr"(%598, %599) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %601 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %602 = "llvm.getelementptr"(%600, %601) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%602) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B__EQ_otherString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb51(%603 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %604 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %605 : !llvm.ptr):
    %606 = "mini.wrap"(%603) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %607 = "mini.to_fat_ptr"(%606) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %608 = "mini.field_access"(%607) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %609 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %610 = "mini.unwrap"(%608) : (!mini.ptr<i32>) -> i32
    %611 = "mini.unwrap"(%609) : (!mini.ptr<i32>) -> i32
    %612 = "mini.comparison"(%610, %611) {"op" = "EQ"} : (i32, i32) -> i1
    %613 = "mini.wrap"(%612) : (i1) -> !mini.ptr<i32>
    %614 = "mini.unwrap"(%613) : (!mini.ptr<i32>) -> i1
    "mini.if"(%614) ({
      %615 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %616 = "mini.unionize"(%615) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i8)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
      "mini.return"(%616) : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %617 = "mini.field_access"(%607) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %618 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %619 = "mini.unwrap"(%617) : (!mini.ptr<i32>) -> i32
    %620 = "mini.unwrap"(%618) : (!mini.ptr<i32>) -> i32
    %621 = "mini.arithmetic"(%619, %620) {"op" = "SUB"} : (i32, i32) -> i32
    %622 = "mini.wrap"(%621) : (i32) -> !mini.ptr<i32>
    %623 = "mini.field_access"(%607) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    "mini.castassign"(%623, %622) ({
      %624 = builtin.unrealized_conversion_cast %622 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %625 = "mini.field_access"(%607) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %626 = "mini.field_access"(%607) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %627 = "mini.buffer_indexation"(%625, %626) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
    %628 = "mini.unionize"(%627) {"from_typ" = i8, "to_typ" = !llvm.struct<(!llvm.ptr, i8)>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i8>) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
    "mini.return"(%628) : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> ()
  }) {"func_name" = "String_pop_", "result_type" = !llvm.struct<(!llvm.ptr, i8)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb52(%629 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %630 : !llvm.ptr):
    %631 = "mini.invariant"(%630) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %632 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb53] : () -> ()
  ^bb53:
    %633 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%633, %632) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb54] : () -> ()
  ^bb54:
    %634 = "llvm.extractvalue"(%629) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %635 = "llvm.load"(%632) : (!llvm.ptr) -> i32
    %636 = "llvm.getelementptr"(%634, %635) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %637 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %638 = "llvm.getelementptr"(%636, %637) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%638) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_pop_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb55(%639 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %640 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %641 : !llvm.ptr):
    %642 = "mini.wrap"(%639) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %643 = "mini.to_fat_ptr"(%642) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %644 = "mini.field_access"(%643) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %645 = "mini.create_buffer"(%644) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %646 = builtin.unrealized_conversion_cast %645 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %647 = "mini.refer"(%646) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %648 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %649 = "mini.field_access"(%643) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %650 = "mini.unwrap"(%648) : (!mini.ptr<i32>) -> i32
      %651 = "mini.unwrap"(%649) : (!mini.ptr<i32>) -> i32
      %652 = "mini.comparison"(%650, %651) {"op" = "LT"} : (i32, i32) -> i1
      %653 = "mini.wrap"(%652) : (i1) -> !mini.ptr<i32>
      %654 = "mini.unwrap"(%653) : (!mini.ptr<i32>) -> i1
    }, {
      %655 = "mini.field_access"(%643) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %656 = "mini.buffer_indexation"(%655, %648) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %657 = "mini.buffer_indexation"(%647, %648) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      "mini.castassign"(%657, %656) ({
        %658 = builtin.unrealized_conversion_cast %656 : !mini.ptr<i8> to !mini.ptr<i8>
      }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
      %659 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %660 = "mini.unwrap"(%648) : (!mini.ptr<i32>) -> i32
      %661 = "mini.unwrap"(%659) : (!mini.ptr<i32>) -> i32
      %662 = "mini.arithmetic"(%660, %661) {"op" = "ADD"} : (i32, i32) -> i32
      %663 = "mini.wrap"(%662) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%648, %663) ({
        %664 = builtin.unrealized_conversion_cast %663 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %665 = "mini.field_access"(%643) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %666 = "mini.field_access"(%643) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %667 = "mini.unwrap"(%647) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %668 = "mini.unwrap"(%665) : (!mini.ptr<i32>) -> i32
    %669 = "mini.unwrap"(%666) : (!mini.ptr<i32>) -> i32
    %670 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %671 = "mini.field_access"(%643) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %672 = "mini.field_access"(%643) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %673 = builtin.unrealized_conversion_cast %647 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %674 = "mini.unwrap"(%673) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %675 = builtin.unrealized_conversion_cast %671 : !mini.ptr<i32> to !mini.ptr<i32>
    %676 = "mini.unwrap"(%675) : (!mini.ptr<i32>) -> i32
    %677 = builtin.unrealized_conversion_cast %672 : !mini.ptr<i32> to !mini.ptr<i32>
    %678 = "mini.unwrap"(%677) : (!mini.ptr<i32>) -> i32
    %679 = "mini.unwrap"(%670) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %680 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %681 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %682 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %683 = "mini.parameterizations_array"(%680, %681, %682) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%683, %679, %674, %676, %678) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %684 = "mini.to_fat_ptr"(%670) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %685 = "mini.refer"(%684) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %686 = "mini.to_fat_ptr"(%685) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%686) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_copy_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb56(%687 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %688 : !llvm.ptr):
    %689 = "mini.invariant"(%688) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %690 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb57] : () -> ()
  ^bb57:
    %691 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%691, %690) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb58] : () -> ()
  ^bb58:
    %692 = "llvm.extractvalue"(%687) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %693 = "llvm.load"(%690) : (!llvm.ptr) -> i32
    %694 = "llvm.getelementptr"(%692, %693) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %695 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %696 = "llvm.getelementptr"(%694, %695) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%696) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_copy_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb59(%697 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %698 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %699 : !llvm.ptr):
    %700 = "mini.wrap"(%697) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %701 = "mini.to_fat_ptr"(%700) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %702 = "mini.field_access"(%701) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %703 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %704 = "mini.unwrap"(%702) : (!mini.ptr<i32>) -> i32
    %705 = "mini.unwrap"(%703) : (!mini.ptr<i32>) -> i32
    %706 = "mini.arithmetic"(%704, %705) {"op" = "ADD"} : (i32, i32) -> i32
    %707 = "mini.wrap"(%706) : (i32) -> !mini.ptr<i32>
    %708 = "mini.create_buffer"(%707) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %709 = builtin.unrealized_conversion_cast %708 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %710 = "mini.refer"(%709) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %711 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %712 = "mini.field_access"(%701) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %713 = "mini.unwrap"(%711) : (!mini.ptr<i32>) -> i32
      %714 = "mini.unwrap"(%712) : (!mini.ptr<i32>) -> i32
      %715 = "mini.comparison"(%713, %714) {"op" = "LT"} : (i32, i32) -> i1
      %716 = "mini.wrap"(%715) : (i1) -> !mini.ptr<i32>
      %717 = "mini.unwrap"(%716) : (!mini.ptr<i32>) -> i1
    }, {
      %718 = "mini.field_access"(%701) {"offset" = 0 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %719 = "mini.buffer_indexation"(%718, %711) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %720 = "mini.buffer_indexation"(%710, %711) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      "mini.castassign"(%720, %719) ({
        %721 = builtin.unrealized_conversion_cast %719 : !mini.ptr<i8> to !mini.ptr<i8>
      }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
      %722 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %723 = "mini.unwrap"(%711) : (!mini.ptr<i32>) -> i32
      %724 = "mini.unwrap"(%722) : (!mini.ptr<i32>) -> i32
      %725 = "mini.arithmetic"(%723, %724) {"op" = "ADD"} : (i32, i32) -> i32
      %726 = "mini.wrap"(%725) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%711, %726) ({
        %727 = builtin.unrealized_conversion_cast %726 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %728 = "mini.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %729 = builtin.unrealized_conversion_cast %728 : !mini.ptr<i8> to !mini.ptr<i8>
    %730 = "mini.field_access"(%701) {"offset" = 1 : i64, "vtable_bytes" = 280 : i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %731 = "mini.buffer_indexation"(%710, %730) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
    "mini.castassign"(%731, %729) ({
      %732 = builtin.unrealized_conversion_cast %729 : !mini.ptr<i8> to !mini.ptr<i8>
    }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
    %733 = builtin.unrealized_conversion_cast %710 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    "mini.return"(%733) : (!mini.buffer<!mini.ptr<i8>>) -> ()
  }) {"func_name" = "String_c_string_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb60(%734 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %735 : !llvm.ptr):
    %736 = "mini.invariant"(%735) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %737 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb61] : () -> ()
  ^bb61:
    %738 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%738, %737) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb62] : () -> ()
  ^bb62:
    %739 = "llvm.extractvalue"(%734) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %740 = "llvm.load"(%737) : (!llvm.ptr) -> i32
    %741 = "llvm.getelementptr"(%739, %740) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %742 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %743 = "llvm.getelementptr"(%741, %742) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%743) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_c_string_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb63(%744 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %745 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %746 : !llvm.ptr):
    %747 = "mini.wrap"(%744) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %748 = "mini.to_fat_ptr"(%747) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %749 = "mini.unwrap"(%748) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %750 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "StringIterator", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"StringIterator">
    %751 = "mini.to_fat_ptr"(%748) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %752 = "mini.unwrap"(%751) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %753 = "mini.unwrap"(%750) : (!mini.fatptr<"StringIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %754 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %755 = "mini.parameterizations_array"(%754) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%755, %753, %752) {"offset" = 2 : i32, "vptrs" = [#none], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %756 = "mini.to_fat_ptr"(%750) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "StringIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%756) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "String_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb64(%757 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %758 : !llvm.ptr):
    %759 = "mini.invariant"(%758) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %760 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb65] : () -> ()
  ^bb65:
    %761 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
    "llvm.store"(%761, %760) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb66] : () -> ()
  ^bb66:
    %762 = "llvm.extractvalue"(%757) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %763 = "llvm.load"(%760) : (!llvm.ptr) -> i32
    %764 = "llvm.getelementptr"(%762, %763) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %765 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %766 = "llvm.getelementptr"(%764, %765) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%766) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb67(%767 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %768 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %769 : !llvm.ptr):
    %770 = "mini.wrap"(%767) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %771 = "mini.to_fat_ptr"(%770) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %772 = "mini.to_fat_ptr"(%771) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%772) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb68(%773 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %774 : !llvm.ptr):
    %775 = "mini.invariant"(%774) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %776 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb69] : () -> ()
  ^bb69:
    %777 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
    "llvm.store"(%777, %776) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb70] : () -> ()
  ^bb70:
    %778 = "llvm.extractvalue"(%773) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %779 = "llvm.load"(%776) : (!llvm.ptr) -> i32
    %780 = "llvm.getelementptr"(%778, %779) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<35 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %781 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %782 = "llvm.getelementptr"(%780, %781) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%782) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i8)>, "offset" = 0 : i32, "meth_name" = "Character_field_byte"} : () -> ()
  "mini.func"() ({
  ^bb71(%783 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %784 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %785 : !llvm.ptr):
    %786 = "mini.wrap"(%783) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Character">
    %787 = "mini.to_fat_ptr"(%786) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Character", "to_typ_name" = "Character", "invariant"} : (!mini.fatptr<"Character">) -> !mini.fatptr<"Character">
    %788 = "mini.field_access"(%787) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32} : (!mini.fatptr<"Character">) -> !mini.ptr<i8>
    %789 = builtin.unrealized_conversion_cast %788 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.return"(%789) : (!mini.ptr<i8>) -> ()
  }) {"func_name" = "Character_byte_", "result_type" = i8, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb72(%790 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %791 : !llvm.ptr):
    %792 = "mini.invariant"(%791) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %793 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb73] : () -> ()
  ^bb73:
    %794 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%794, %793) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb74] : () -> ()
  ^bb74:
    %795 = "llvm.extractvalue"(%790) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %796 = "llvm.load"(%793) : (!llvm.ptr) -> i32
    %797 = "llvm.getelementptr"(%795, %796) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %798 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %799 = "llvm.getelementptr"(%797, %798) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%799) : (!llvm.ptr) -> ()
  }) {"func_name" = "Character_B_byte_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb75(%800 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %801 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %802 : !llvm.ptr, %803 : i8):
    %804 = "mini.wrap"(%800) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Character">
    %805 = "mini.to_fat_ptr"(%804) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Character", "to_typ_name" = "Character", "invariant"} : (!mini.fatptr<"Character">) -> !mini.fatptr<"Character">
    %806 = "mini.wrap"(%803) : (i8) -> !mini.ptr<i8>
    %807 = builtin.unrealized_conversion_cast %806 : !mini.ptr<i8> to !mini.ptr<i8>
    %808 = "mini.field_access"(%805) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32} : (!mini.fatptr<"Character">) -> !mini.ptr<i8>
    "mini.castassign"(%808, %807) ({
      %809 = builtin.unrealized_conversion_cast %807 : !mini.ptr<i8> to !mini.ptr<i8>
    }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
  }) {"func_name" = "Character_init_bytePtri8", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb76(%810 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %811 : !llvm.ptr, %812 : i8):
    %813 = "mini.invariant"(%811) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %814 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb77] : () -> ()
  ^bb78:
    %815 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%815, %814) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb79] : () -> ()
  ^bb77:
    %816 = "llvm.getelementptr"(%811) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %817 = "llvm.load"(%816) : (!llvm.ptr) -> !llvm.ptr
    %818 = "llvm.getelementptr"(%817) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %819 = "llvm.getelementptr"(%817) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %820 = "llvm.getelementptr"(%817) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %821 = "llvm.getelementptr"(%817) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %822 = "llvm.load"(%818) : (!llvm.ptr) -> i64
    %823 = "llvm.load"(%819) : (!llvm.ptr) -> i64
    %824 = "llvm.load"(%820) : (!llvm.ptr) -> !llvm.ptr
    %825 = "llvm.load"(%821) : (!llvm.ptr) -> !llvm.ptr
    %826 = "mini.addr_of"() {"global_name" = @i8_typ} : () -> !llvm.ptr
    %827 = "llvm.ptrtoint"(%826) : (!llvm.ptr) -> i64
    %828 = "llvm.mlir.constant"() <{"value" = 2582149688529881115 : i64}> : () -> i64
    %829 = "mini.subtype"(%824, %823, %822, %828, %827, %825) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%829) [^bb78, ^bb78] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb79:
    %830 = "llvm.extractvalue"(%810) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %831 = "llvm.load"(%814) : (!llvm.ptr) -> i32
    %832 = "llvm.getelementptr"(%830, %831) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %833 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %834 = "llvm.getelementptr"(%832, %833) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%834) : (!llvm.ptr) -> ()
  }) {"func_name" = "Character_B_init_bytePtri8", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "offset" = 0 : i32, "meth_name" = "StringIterator_field_str"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "offset" = 1 : i32, "meth_name" = "StringIterator_field_index"} : () -> ()
  "mini.func"() ({
  ^bb80(%835 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %836 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %837 : !llvm.ptr, %838 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %839 = "mini.wrap"(%835) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"StringIterator">
    %840 = "mini.to_fat_ptr"(%839) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator", "invariant"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    %841 = "mini.wrap"(%838) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %842 = "mini.to_fat_ptr"(%841) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %843 = "mini.field_access"(%840) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"String">
    "mini.castassign"(%843, %842) ({
      %844 = "mini.to_fat_ptr"(%842) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "should_offset"} : (!mini.fatptr<"String">, !mini.fatptr<"String">) -> ()
    %845 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %846 = "mini.field_access"(%840) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
    "mini.castassign"(%846, %845) ({
      %847 = builtin.unrealized_conversion_cast %845 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "StringIterator_init_strString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb81(%848 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %849 : !llvm.ptr, %850 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %851 = "mini.invariant"(%849) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %852 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb82] : () -> ()
  ^bb83:
    %853 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%853, %852) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb84] : () -> ()
  ^bb82:
    %854 = "llvm.getelementptr"(%849) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %855 = "llvm.load"(%854) : (!llvm.ptr) -> !llvm.ptr
    %856 = "llvm.getelementptr"(%855) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %857 = "llvm.getelementptr"(%855) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %858 = "llvm.getelementptr"(%855) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %859 = "llvm.getelementptr"(%855) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %860 = "llvm.load"(%856) : (!llvm.ptr) -> i64
    %861 = "llvm.load"(%857) : (!llvm.ptr) -> i64
    %862 = "llvm.load"(%858) : (!llvm.ptr) -> !llvm.ptr
    %863 = "llvm.load"(%859) : (!llvm.ptr) -> !llvm.ptr
    %864 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %865 = "llvm.ptrtoint"(%864) : (!llvm.ptr) -> i64
    %866 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %867 = "mini.subtype"(%862, %861, %860, %866, %865, %863) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%867) [^bb83, ^bb83] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb84:
    %868 = "llvm.extractvalue"(%848) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %869 = "llvm.load"(%852) : (!llvm.ptr) -> i32
    %870 = "llvm.getelementptr"(%868, %869) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %871 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %872 = "llvm.getelementptr"(%870, %871) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%872) : (!llvm.ptr) -> ()
  }) {"func_name" = "StringIterator_B_init_strString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb85(%873 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %874 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %875 : !llvm.ptr):
    %876 = "mini.wrap"(%873) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"StringIterator">
    %877 = "mini.to_fat_ptr"(%876) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator", "invariant"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    %878 = "mini.field_access"(%877) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
    %879 = "mini.field_access"(%877) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"String">
    %880 = "mini.unwrap"(%879) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %881 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %882 = "mini.method_call"(%881, %880) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %883 = builtin.unrealized_conversion_cast %882 : !mini.ptr<i32> to !mini.ptr<i32>
    %884 = "mini.unwrap"(%878) : (!mini.ptr<i32>) -> i32
    %885 = "mini.unwrap"(%883) : (!mini.ptr<i32>) -> i32
    %886 = "mini.comparison"(%884, %885) {"op" = "LT"} : (i32, i32) -> i1
    %887 = "mini.wrap"(%886) : (i1) -> !mini.ptr<i32>
    %888 = "mini.unwrap"(%887) : (!mini.ptr<i32>) -> i1
    "mini.if"(%888) ({
      %889 = "mini.field_access"(%877) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
      %890 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %891 = "mini.unwrap"(%889) : (!mini.ptr<i32>) -> i32
      %892 = "mini.unwrap"(%890) : (!mini.ptr<i32>) -> i32
      %893 = "mini.arithmetic"(%891, %892) {"op" = "ADD"} : (i32, i32) -> i32
      %894 = "mini.wrap"(%893) : (i32) -> !mini.ptr<i32>
      %895 = "mini.field_access"(%877) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
      "mini.castassign"(%895, %894) ({
        %896 = builtin.unrealized_conversion_cast %894 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %897 = "mini.field_access"(%877) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"String">
      %898 = "mini.unwrap"(%897) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %899 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %900 = "mini.method_call"(%899, %898) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %901 = builtin.unrealized_conversion_cast %900 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %902 = "mini.field_access"(%877) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
      %903 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %904 = "mini.unwrap"(%902) : (!mini.ptr<i32>) -> i32
      %905 = "mini.unwrap"(%903) : (!mini.ptr<i32>) -> i32
      %906 = "mini.arithmetic"(%904, %905) {"op" = "SUB"} : (i32, i32) -> i32
      %907 = "mini.wrap"(%906) : (i32) -> !mini.ptr<i32>
      %908 = "mini.buffer_indexation"(%901, %907) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %909 = "mini.unwrap"(%908) : (!mini.ptr<i8>) -> i8
      %910 = "mini.new"() {"typ" = !llvm.struct<(i8)>, "class_name" = "Character", "num_data_fields" = 1 : i32} : () -> !mini.fatptr<"Character">
      %911 = "mini.field_access"(%877) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"String">
      %912 = "mini.unwrap"(%911) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %913 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %914 = "mini.method_call"(%913, %912) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %915 = builtin.unrealized_conversion_cast %914 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %916 = "mini.field_access"(%877) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
      %917 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %918 = "mini.unwrap"(%916) : (!mini.ptr<i32>) -> i32
      %919 = "mini.unwrap"(%917) : (!mini.ptr<i32>) -> i32
      %920 = "mini.arithmetic"(%918, %919) {"op" = "SUB"} : (i32, i32) -> i32
      %921 = "mini.wrap"(%920) : (i32) -> !mini.ptr<i32>
      %922 = "mini.buffer_indexation"(%915, %921) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %923 = builtin.unrealized_conversion_cast %922 : !mini.ptr<i8> to !mini.ptr<i8>
      %924 = "mini.unwrap"(%923) : (!mini.ptr<i8>) -> i8
      %925 = "mini.unwrap"(%910) : (!mini.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %926 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["Ptri8"]} : () -> !llvm.ptr
      %927 = "mini.parameterizations_array"(%926) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%927, %925, %924) {"offset" = 2 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i8) -> ()
      %928 = builtin.unrealized_conversion_cast %910 : !mini.fatptr<"Character"> to !mini.union<[!mini.fatptr<"Character">, !mini.nil]>
      "mini.return"(%928) : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %929 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %930 = "mini.unionize"(%929) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.fatptr<"Character">, !mini.nil]>
    "mini.return"(%930) : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>) -> ()
  }) {"func_name" = "StringIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb86(%931 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %932 : !llvm.ptr):
    %933 = "mini.invariant"(%932) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %934 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb87] : () -> ()
  ^bb87:
    %935 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%935, %934) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb88] : () -> ()
  ^bb88:
    %936 = "llvm.extractvalue"(%931) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %937 = "llvm.load"(%934) : (!llvm.ptr) -> i32
    %938 = "llvm.getelementptr"(%936, %937) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %939 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %940 = "llvm.getelementptr"(%938, %939) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%940) : (!llvm.ptr) -> ()
  }) {"func_name" = "StringIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 0 : i32, "meth_name" = "Exception_field_line_number"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 1 : i32, "meth_name" = "Exception_field_file_name"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 2 : i32, "meth_name" = "Exception_field_message"} : () -> ()
  "mini.func"() ({
  ^bb89(%941 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %942 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %943 : !llvm.ptr, %944 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %945 = "mini.wrap"(%941) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %946 = "mini.to_fat_ptr"(%945) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception", "invariant"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %947 = "mini.wrap"(%944) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %948 = "mini.to_fat_ptr"(%947) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %949 = "mini.field_access"(%946) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"String">
    "mini.castassign"(%949, %948) ({
      %950 = "mini.to_fat_ptr"(%948) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "should_offset"} : (!mini.fatptr<"String">, !mini.fatptr<"String">) -> ()
    %951 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %952 = "mini.field_access"(%946) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Exception">) -> !mini.ptr<i32>
    "mini.castassign"(%952, %951) ({
      %953 = builtin.unrealized_conversion_cast %951 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %954 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %955 = "mini.create_buffer"(%954) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %956 = builtin.unrealized_conversion_cast %955 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %957 = "mini.refer"(%956) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %958 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %959 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %960 = "mini.buffer_indexation"(%957, %959) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%960, %958) {"typ" = !llvm.array<0 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %961 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %962 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %963 = "mini.unwrap"(%957) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %964 = "mini.unwrap"(%961) : (!mini.ptr<i32>) -> i32
    %965 = "mini.unwrap"(%962) : (!mini.ptr<i32>) -> i32
    %966 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %967 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %968 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %969 = builtin.unrealized_conversion_cast %957 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %970 = "mini.unwrap"(%969) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %971 = builtin.unrealized_conversion_cast %967 : !mini.ptr<i32> to !mini.ptr<i32>
    %972 = "mini.unwrap"(%971) : (!mini.ptr<i32>) -> i32
    %973 = builtin.unrealized_conversion_cast %968 : !mini.ptr<i32> to !mini.ptr<i32>
    %974 = "mini.unwrap"(%973) : (!mini.ptr<i32>) -> i32
    %975 = "mini.unwrap"(%966) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %976 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %977 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %978 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %979 = "mini.parameterizations_array"(%976, %977, %978) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%979, %975, %970, %972, %974) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %980 = "mini.field_access"(%946) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"String">
    "mini.castassign"(%980, %966) ({
      %981 = "mini.to_fat_ptr"(%966) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "should_offset"} : (!mini.fatptr<"String">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "Exception_init_messageString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb90(%982 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %983 : !llvm.ptr, %984 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %985 = "mini.invariant"(%983) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %986 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb91] : () -> ()
  ^bb92:
    %987 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%987, %986) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb93] : () -> ()
  ^bb91:
    %988 = "llvm.getelementptr"(%983) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %989 = "llvm.load"(%988) : (!llvm.ptr) -> !llvm.ptr
    %990 = "llvm.getelementptr"(%989) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %991 = "llvm.getelementptr"(%989) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %992 = "llvm.getelementptr"(%989) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %993 = "llvm.getelementptr"(%989) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %994 = "llvm.load"(%990) : (!llvm.ptr) -> i64
    %995 = "llvm.load"(%991) : (!llvm.ptr) -> i64
    %996 = "llvm.load"(%992) : (!llvm.ptr) -> !llvm.ptr
    %997 = "llvm.load"(%993) : (!llvm.ptr) -> !llvm.ptr
    %998 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %999 = "llvm.ptrtoint"(%998) : (!llvm.ptr) -> i64
    %1000 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %1001 = "mini.subtype"(%996, %995, %994, %1000, %999, %997) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1001) [^bb92, ^bb92] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb93:
    %1002 = "llvm.extractvalue"(%982) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1003 = "llvm.load"(%986) : (!llvm.ptr) -> i32
    %1004 = "llvm.getelementptr"(%1002, %1003) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1005 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %1006 = "llvm.getelementptr"(%1004, %1005) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1006) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb94(%1007 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1008 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1009 : !llvm.ptr):
    %1010 = "mini.wrap"(%1007) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %1011 = "mini.to_fat_ptr"(%1010) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception", "invariant"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %1012 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1013 = "mini.field_access"(%1011) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Exception">) -> !mini.ptr<i32>
    "mini.castassign"(%1013, %1012) ({
      %1014 = builtin.unrealized_conversion_cast %1012 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %1015 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1016 = "mini.create_buffer"(%1015) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %1017 = builtin.unrealized_conversion_cast %1016 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1018 = "mini.refer"(%1017) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1019 = "mini.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "<None>"} : () -> !llvm.ptr
    %1020 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %1021 = "mini.buffer_indexation"(%1018, %1020) {"typ" = !llvm.array<6 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%1021, %1019) {"typ" = !llvm.array<6 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %1022 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1023 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1024 = "mini.unwrap"(%1018) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1025 = "mini.unwrap"(%1022) : (!mini.ptr<i32>) -> i32
    %1026 = "mini.unwrap"(%1023) : (!mini.ptr<i32>) -> i32
    %1027 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %1028 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1029 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1030 = builtin.unrealized_conversion_cast %1018 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1031 = "mini.unwrap"(%1030) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1032 = builtin.unrealized_conversion_cast %1028 : !mini.ptr<i32> to !mini.ptr<i32>
    %1033 = "mini.unwrap"(%1032) : (!mini.ptr<i32>) -> i32
    %1034 = builtin.unrealized_conversion_cast %1029 : !mini.ptr<i32> to !mini.ptr<i32>
    %1035 = "mini.unwrap"(%1034) : (!mini.ptr<i32>) -> i32
    %1036 = "mini.unwrap"(%1027) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1037 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1038 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1039 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1040 = "mini.parameterizations_array"(%1037, %1038, %1039) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1040, %1036, %1031, %1033, %1035) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1041 = "mini.field_access"(%1011) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"String">
    "mini.castassign"(%1041, %1027) ({
      %1042 = "mini.to_fat_ptr"(%1027) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "should_offset"} : (!mini.fatptr<"String">, !mini.fatptr<"String">) -> ()
    %1043 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1044 = "mini.create_buffer"(%1043) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %1045 = builtin.unrealized_conversion_cast %1044 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1046 = "mini.refer"(%1045) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1047 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %1048 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %1049 = "mini.buffer_indexation"(%1046, %1048) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%1049, %1047) {"typ" = !llvm.array<0 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %1050 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1051 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1052 = "mini.unwrap"(%1046) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1053 = "mini.unwrap"(%1050) : (!mini.ptr<i32>) -> i32
    %1054 = "mini.unwrap"(%1051) : (!mini.ptr<i32>) -> i32
    %1055 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %1056 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1057 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1058 = builtin.unrealized_conversion_cast %1046 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1059 = "mini.unwrap"(%1058) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1060 = builtin.unrealized_conversion_cast %1056 : !mini.ptr<i32> to !mini.ptr<i32>
    %1061 = "mini.unwrap"(%1060) : (!mini.ptr<i32>) -> i32
    %1062 = builtin.unrealized_conversion_cast %1057 : !mini.ptr<i32> to !mini.ptr<i32>
    %1063 = "mini.unwrap"(%1062) : (!mini.ptr<i32>) -> i32
    %1064 = "mini.unwrap"(%1055) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1065 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1066 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1067 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1068 = "mini.parameterizations_array"(%1065, %1066, %1067) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1068, %1064, %1059, %1061, %1063) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1069 = "mini.field_access"(%1011) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"String">
    "mini.castassign"(%1069, %1055) ({
      %1070 = "mini.to_fat_ptr"(%1055) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "should_offset"} : (!mini.fatptr<"String">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "Exception_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb95(%1071 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1072 : !llvm.ptr):
    %1073 = "mini.invariant"(%1072) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1074 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb96] : () -> ()
  ^bb96:
    %1075 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%1075, %1074) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb97] : () -> ()
  ^bb97:
    %1076 = "llvm.extractvalue"(%1071) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1077 = "llvm.load"(%1074) : (!llvm.ptr) -> i32
    %1078 = "llvm.getelementptr"(%1076, %1077) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1079 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %1080 = "llvm.getelementptr"(%1078, %1079) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1080) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb98(%1081 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1082 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1083 : !llvm.ptr, %1084 : i32, %1085 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %1086 = "mini.wrap"(%1081) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %1087 = "mini.to_fat_ptr"(%1086) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception", "invariant"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %1088 = "mini.wrap"(%1084) : (i32) -> !mini.ptr<i32>
    %1089 = builtin.unrealized_conversion_cast %1088 : !mini.ptr<i32> to !mini.ptr<i32>
    %1090 = "mini.field_access"(%1087) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Exception">) -> !mini.ptr<i32>
    "mini.castassign"(%1090, %1089) ({
      %1091 = builtin.unrealized_conversion_cast %1089 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %1092 = "mini.wrap"(%1085) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %1093 = "mini.to_fat_ptr"(%1092) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %1094 = "mini.field_access"(%1087) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"String">
    "mini.castassign"(%1094, %1093) ({
      %1095 = "mini.to_fat_ptr"(%1093) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "should_offset"} : (!mini.fatptr<"String">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "Exception_set_info_line_numberPtri32_file_nameString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb99(%1096 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1097 : !llvm.ptr, %1098 : i32, %1099 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %1100 = "mini.invariant"(%1097) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1101 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb100] : () -> ()
  ^bb101:
    %1102 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%1102, %1101) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb102] : () -> ()
  ^bb103:
    %1103 = "llvm.getelementptr"(%1097) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1104 = "llvm.load"(%1103) : (!llvm.ptr) -> !llvm.ptr
    %1105 = "llvm.getelementptr"(%1104) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1106 = "llvm.getelementptr"(%1104) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1107 = "llvm.getelementptr"(%1104) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1108 = "llvm.getelementptr"(%1104) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1109 = "llvm.load"(%1105) : (!llvm.ptr) -> i64
    %1110 = "llvm.load"(%1106) : (!llvm.ptr) -> i64
    %1111 = "llvm.load"(%1107) : (!llvm.ptr) -> !llvm.ptr
    %1112 = "llvm.load"(%1108) : (!llvm.ptr) -> !llvm.ptr
    %1113 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %1114 = "llvm.ptrtoint"(%1113) : (!llvm.ptr) -> i64
    %1115 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %1116 = "mini.subtype"(%1111, %1110, %1109, %1115, %1114, %1112) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1116) [^bb101, ^bb101] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb100:
    %1117 = "llvm.getelementptr"(%1097) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1118 = "llvm.load"(%1117) : (!llvm.ptr) -> !llvm.ptr
    %1119 = "llvm.getelementptr"(%1118) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1120 = "llvm.getelementptr"(%1118) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1121 = "llvm.getelementptr"(%1118) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1122 = "llvm.getelementptr"(%1118) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1123 = "llvm.load"(%1119) : (!llvm.ptr) -> i64
    %1124 = "llvm.load"(%1120) : (!llvm.ptr) -> i64
    %1125 = "llvm.load"(%1121) : (!llvm.ptr) -> !llvm.ptr
    %1126 = "llvm.load"(%1122) : (!llvm.ptr) -> !llvm.ptr
    %1127 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %1128 = "llvm.ptrtoint"(%1127) : (!llvm.ptr) -> i64
    %1129 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %1130 = "mini.subtype"(%1125, %1124, %1123, %1129, %1128, %1126) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1130) [^bb103, ^bb103] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb102:
    %1131 = "llvm.extractvalue"(%1096) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1132 = "llvm.load"(%1101) : (!llvm.ptr) -> i32
    %1133 = "llvm.getelementptr"(%1131, %1132) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1134 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %1135 = "llvm.getelementptr"(%1133, %1134) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1135) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_set_info_line_numberPtri32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb104(%1136 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1137 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1138 : !llvm.ptr):
    %1139 = "mini.wrap"(%1136) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %1140 = "mini.to_fat_ptr"(%1139) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception", "invariant"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %1141 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1142 = "mini.create_buffer"(%1141) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %1143 = builtin.unrealized_conversion_cast %1142 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1144 = "mini.refer"(%1143) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1145 = "mini.literal"() {"typ" = !llvm.array<9 x i8>, "value" = "---------"} : () -> !llvm.ptr
    %1146 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %1147 = "mini.buffer_indexation"(%1144, %1146) {"typ" = !llvm.array<9 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%1147, %1145) {"typ" = !llvm.array<9 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %1148 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1149 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1150 = "mini.unwrap"(%1144) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1151 = "mini.unwrap"(%1148) : (!mini.ptr<i32>) -> i32
    %1152 = "mini.unwrap"(%1149) : (!mini.ptr<i32>) -> i32
    %1153 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %1154 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1155 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1156 = builtin.unrealized_conversion_cast %1144 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1157 = "mini.unwrap"(%1156) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1158 = builtin.unrealized_conversion_cast %1154 : !mini.ptr<i32> to !mini.ptr<i32>
    %1159 = "mini.unwrap"(%1158) : (!mini.ptr<i32>) -> i32
    %1160 = builtin.unrealized_conversion_cast %1155 : !mini.ptr<i32> to !mini.ptr<i32>
    %1161 = "mini.unwrap"(%1160) : (!mini.ptr<i32>) -> i32
    %1162 = "mini.unwrap"(%1153) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1163 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1164 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1165 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1166 = "mini.parameterizations_array"(%1163, %1164, %1165) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1166, %1162, %1157, %1159, %1161) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1167 = "mini.unwrap"(%1153) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1168 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1169 = "mini.method_call"(%1168, %1167) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1170 = builtin.unrealized_conversion_cast %1169 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1171 = "mini.print"(%1170) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %1172 = "mini.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1173 = "mini.create_buffer"(%1172) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %1174 = builtin.unrealized_conversion_cast %1173 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1175 = "mini.refer"(%1174) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1176 = "mini.literal"() {"typ" = !llvm.array<26 x i8>, "value" = "Exception thrown from file"} : () -> !llvm.ptr
    %1177 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %1178 = "mini.buffer_indexation"(%1175, %1177) {"typ" = !llvm.array<26 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%1178, %1176) {"typ" = !llvm.array<26 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %1179 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1180 = "mini.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1181 = "mini.unwrap"(%1175) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1182 = "mini.unwrap"(%1179) : (!mini.ptr<i32>) -> i32
    %1183 = "mini.unwrap"(%1180) : (!mini.ptr<i32>) -> i32
    %1184 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %1185 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1186 = "mini.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1187 = builtin.unrealized_conversion_cast %1175 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1188 = "mini.unwrap"(%1187) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1189 = builtin.unrealized_conversion_cast %1185 : !mini.ptr<i32> to !mini.ptr<i32>
    %1190 = "mini.unwrap"(%1189) : (!mini.ptr<i32>) -> i32
    %1191 = builtin.unrealized_conversion_cast %1186 : !mini.ptr<i32> to !mini.ptr<i32>
    %1192 = "mini.unwrap"(%1191) : (!mini.ptr<i32>) -> i32
    %1193 = "mini.unwrap"(%1184) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1194 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1195 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1196 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1197 = "mini.parameterizations_array"(%1194, %1195, %1196) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1197, %1193, %1188, %1190, %1192) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1198 = "mini.unwrap"(%1184) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1199 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1200 = "mini.method_call"(%1199, %1198) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1201 = builtin.unrealized_conversion_cast %1200 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1202 = "mini.print"(%1201) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %1203 = "mini.field_access"(%1140) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"String">
    %1204 = "mini.unwrap"(%1203) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1205 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1206 = "mini.method_call"(%1205, %1204) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1207 = builtin.unrealized_conversion_cast %1206 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1208 = "mini.print"(%1207) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %1209 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1210 = "mini.create_buffer"(%1209) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %1211 = builtin.unrealized_conversion_cast %1210 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1212 = "mini.refer"(%1211) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1213 = "mini.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "At line"} : () -> !llvm.ptr
    %1214 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %1215 = "mini.buffer_indexation"(%1212, %1214) {"typ" = !llvm.array<7 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%1215, %1213) {"typ" = !llvm.array<7 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %1216 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1217 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1218 = "mini.unwrap"(%1212) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1219 = "mini.unwrap"(%1216) : (!mini.ptr<i32>) -> i32
    %1220 = "mini.unwrap"(%1217) : (!mini.ptr<i32>) -> i32
    %1221 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %1222 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1223 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1224 = builtin.unrealized_conversion_cast %1212 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1225 = "mini.unwrap"(%1224) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1226 = builtin.unrealized_conversion_cast %1222 : !mini.ptr<i32> to !mini.ptr<i32>
    %1227 = "mini.unwrap"(%1226) : (!mini.ptr<i32>) -> i32
    %1228 = builtin.unrealized_conversion_cast %1223 : !mini.ptr<i32> to !mini.ptr<i32>
    %1229 = "mini.unwrap"(%1228) : (!mini.ptr<i32>) -> i32
    %1230 = "mini.unwrap"(%1221) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1231 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1232 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1233 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1234 = "mini.parameterizations_array"(%1231, %1232, %1233) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1234, %1230, %1225, %1227, %1229) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1235 = "mini.unwrap"(%1221) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1236 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1237 = "mini.method_call"(%1236, %1235) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1238 = builtin.unrealized_conversion_cast %1237 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1239 = "mini.print"(%1238) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %1240 = "mini.field_access"(%1140) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Exception">) -> !mini.ptr<i32>
    %1241 = "mini.print"(%1240) {"typ" = i32} : (!mini.ptr<i32>) -> i32
    %1242 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1243 = "mini.create_buffer"(%1242) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %1244 = builtin.unrealized_conversion_cast %1243 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1245 = "mini.refer"(%1244) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1246 = "mini.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "With message"} : () -> !llvm.ptr
    %1247 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %1248 = "mini.buffer_indexation"(%1245, %1247) {"typ" = !llvm.array<12 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%1248, %1246) {"typ" = !llvm.array<12 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %1249 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1250 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1251 = "mini.unwrap"(%1245) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1252 = "mini.unwrap"(%1249) : (!mini.ptr<i32>) -> i32
    %1253 = "mini.unwrap"(%1250) : (!mini.ptr<i32>) -> i32
    %1254 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %1255 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1256 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1257 = builtin.unrealized_conversion_cast %1245 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1258 = "mini.unwrap"(%1257) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1259 = builtin.unrealized_conversion_cast %1255 : !mini.ptr<i32> to !mini.ptr<i32>
    %1260 = "mini.unwrap"(%1259) : (!mini.ptr<i32>) -> i32
    %1261 = builtin.unrealized_conversion_cast %1256 : !mini.ptr<i32> to !mini.ptr<i32>
    %1262 = "mini.unwrap"(%1261) : (!mini.ptr<i32>) -> i32
    %1263 = "mini.unwrap"(%1254) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1264 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1265 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1266 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1267 = "mini.parameterizations_array"(%1264, %1265, %1266) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1267, %1263, %1258, %1260, %1262) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1268 = "mini.unwrap"(%1254) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1269 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1270 = "mini.method_call"(%1269, %1268) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1271 = builtin.unrealized_conversion_cast %1270 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1272 = "mini.print"(%1271) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %1273 = "mini.unwrap"(%1140) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1274 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%1274, %1273) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %1275 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1276 = "mini.create_buffer"(%1275) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %1277 = builtin.unrealized_conversion_cast %1276 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1278 = "mini.refer"(%1277) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1279 = "mini.literal"() {"typ" = !llvm.array<9 x i8>, "value" = "---------"} : () -> !llvm.ptr
    %1280 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %1281 = "mini.buffer_indexation"(%1278, %1280) {"typ" = !llvm.array<9 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%1281, %1279) {"typ" = !llvm.array<9 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %1282 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1283 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1284 = "mini.unwrap"(%1278) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1285 = "mini.unwrap"(%1282) : (!mini.ptr<i32>) -> i32
    %1286 = "mini.unwrap"(%1283) : (!mini.ptr<i32>) -> i32
    %1287 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %1288 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1289 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1290 = builtin.unrealized_conversion_cast %1278 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1291 = "mini.unwrap"(%1290) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1292 = builtin.unrealized_conversion_cast %1288 : !mini.ptr<i32> to !mini.ptr<i32>
    %1293 = "mini.unwrap"(%1292) : (!mini.ptr<i32>) -> i32
    %1294 = builtin.unrealized_conversion_cast %1289 : !mini.ptr<i32> to !mini.ptr<i32>
    %1295 = "mini.unwrap"(%1294) : (!mini.ptr<i32>) -> i32
    %1296 = "mini.unwrap"(%1287) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1297 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1298 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1299 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1300 = "mini.parameterizations_array"(%1297, %1298, %1299) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1300, %1296, %1291, %1293, %1295) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1301 = "mini.unwrap"(%1287) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1302 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1303 = "mini.method_call"(%1302, %1301) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1304 = builtin.unrealized_conversion_cast %1303 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1305 = "mini.print"(%1304) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "Exception_report_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb105(%1306 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1307 : !llvm.ptr):
    %1308 = "mini.invariant"(%1307) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1309 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb106] : () -> ()
  ^bb106:
    %1310 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%1310, %1309) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb107] : () -> ()
  ^bb107:
    %1311 = "llvm.extractvalue"(%1306) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1312 = "llvm.load"(%1309) : (!llvm.ptr) -> i32
    %1313 = "llvm.getelementptr"(%1311, %1312) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1314 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %1315 = "llvm.getelementptr"(%1313, %1314) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1315) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_report_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb108(%1316 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1317 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1318 : !llvm.ptr):
    %1319 = "mini.wrap"(%1316) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %1320 = "mini.to_fat_ptr"(%1319) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Exception", "to_typ_name" = "Exception", "invariant"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %1321 = "mini.field_access"(%1320) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"String">
    %1322 = "mini.unwrap"(%1321) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1323 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1324 = "mini.method_call"(%1323, %1322) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1325 = builtin.unrealized_conversion_cast %1324 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1326 = "mini.print"(%1325) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "Exception_print_message_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb109(%1327 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1328 : !llvm.ptr):
    %1329 = "mini.invariant"(%1328) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1330 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb110] : () -> ()
  ^bb110:
    %1331 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%1331, %1330) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb111] : () -> ()
  ^bb111:
    %1332 = "llvm.extractvalue"(%1327) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1333 = "llvm.load"(%1330) : (!llvm.ptr) -> i32
    %1334 = "llvm.getelementptr"(%1332, %1333) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1335 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %1336 = "llvm.getelementptr"(%1334, %1335) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1336) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb112(%1337 : !llvm.struct<(!llvm.ptr)>):
    %1338 = "mini.wrap"(%1337) : (!llvm.struct<(!llvm.ptr)>) -> !mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>
    %1339 = builtin.unrealized_conversion_cast %1338 : !mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">> to !mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>
    %1340 = "llvm.load"(%1339) : (!mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>) -> !llvm.ptr
    %1341 = "mini.coro_get_result"(%1340) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i160)>
    %1342 = "mini.wrap"(%1341) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %1343 = "mini.checkflag"(%1342) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> i1
    %1344 = "mini.unwrap"(%1343) : (i1) -> i1
    %1345 = builtin.unrealized_conversion_cast %1342 : !mini.union<[!mini.fatptr<"Exception">, !mini.nil]> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    "mini.if"(%1344) ({
      %1346 = "mini.to_fat_ptr"(%1345) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Exception", "invariant"} : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !mini.fatptr<"Exception">
      %1347 = "mini.unwrap"(%1346) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1348 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%1348, %1347) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      "mini.castassign"(%1345, %1346) ({
        %1349 = builtin.unrealized_conversion_cast %1346 : !mini.fatptr<"Exception"> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.fatptr<"Exception">) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "report_exception", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb113(%1350 : !llvm.ptr, %1351 : !llvm.struct<(!llvm.ptr, i160)>):
    %1352 = "mini.wrap"(%1351) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %1353 = "mini.narrow"(%1352) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i1, "from_typ_name" = "union_typ", "to_typ_name" = "bool_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !mini.ptr<i1>
    %1354 = "mini.unwrap"(%1353) : (!mini.ptr<i1>) -> i1
    "mini.if"(%1354) ({
      %1355 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1356 = "mini.create_buffer"(%1355) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
      %1357 = builtin.unrealized_conversion_cast %1356 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %1358 = "mini.refer"(%1357) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %1359 = "mini.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "true"} : () -> !llvm.ptr
      %1360 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      %1361 = "mini.buffer_indexation"(%1358, %1360) {"typ" = !llvm.array<4 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
      "mini.assign"(%1361, %1359) {"typ" = !llvm.array<4 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
      %1362 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1363 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1364 = "mini.unwrap"(%1358) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %1365 = "mini.unwrap"(%1362) : (!mini.ptr<i32>) -> i32
      %1366 = "mini.unwrap"(%1363) : (!mini.ptr<i32>) -> i32
      %1367 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
      %1368 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1369 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1370 = builtin.unrealized_conversion_cast %1358 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %1371 = "mini.unwrap"(%1370) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %1372 = builtin.unrealized_conversion_cast %1368 : !mini.ptr<i32> to !mini.ptr<i32>
      %1373 = "mini.unwrap"(%1372) : (!mini.ptr<i32>) -> i32
      %1374 = builtin.unrealized_conversion_cast %1369 : !mini.ptr<i32> to !mini.ptr<i32>
      %1375 = "mini.unwrap"(%1374) : (!mini.ptr<i32>) -> i32
      %1376 = "mini.unwrap"(%1367) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1377 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %1378 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %1379 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %1380 = "mini.parameterizations_array"(%1377, %1378, %1379) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%1380, %1376, %1371, %1373, %1375) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1381 = "mini.unwrap"(%1367) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1382 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1383 = "mini.method_call"(%1382, %1381) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %1384 = builtin.unrealized_conversion_cast %1383 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %1385 = "mini.print"(%1384) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    }, {
      %1386 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1387 = "mini.create_buffer"(%1386) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
      %1388 = builtin.unrealized_conversion_cast %1387 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %1389 = "mini.refer"(%1388) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %1390 = "mini.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "false"} : () -> !llvm.ptr
      %1391 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      %1392 = "mini.buffer_indexation"(%1389, %1391) {"typ" = !llvm.array<5 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
      "mini.assign"(%1392, %1390) {"typ" = !llvm.array<5 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
      %1393 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1394 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1395 = "mini.unwrap"(%1389) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %1396 = "mini.unwrap"(%1393) : (!mini.ptr<i32>) -> i32
      %1397 = "mini.unwrap"(%1394) : (!mini.ptr<i32>) -> i32
      %1398 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
      %1399 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1400 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %1401 = builtin.unrealized_conversion_cast %1389 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %1402 = "mini.unwrap"(%1401) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %1403 = builtin.unrealized_conversion_cast %1399 : !mini.ptr<i32> to !mini.ptr<i32>
      %1404 = "mini.unwrap"(%1403) : (!mini.ptr<i32>) -> i32
      %1405 = builtin.unrealized_conversion_cast %1400 : !mini.ptr<i32> to !mini.ptr<i32>
      %1406 = "mini.unwrap"(%1405) : (!mini.ptr<i32>) -> i32
      %1407 = "mini.unwrap"(%1398) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1408 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %1409 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %1410 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %1411 = "mini.parameterizations_array"(%1408, %1409, %1410) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%1411, %1407, %1402, %1404, %1406) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1412 = "mini.unwrap"(%1398) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1413 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1414 = "mini.method_call"(%1413, %1412) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %1415 = builtin.unrealized_conversion_cast %1414 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %1416 = "mini.print"(%1415) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    }) : (i1) -> ()
  }) {"func_name" = "IO__Self_print_xPtri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb114(%1417 : !llvm.ptr, %1418 : !llvm.struct<(!llvm.ptr, i160)>):
    %1419 = "mini.wrap"(%1418) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %1420 = "mini.to_fat_ptr"(%1419) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Character", "invariant"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !mini.fatptr<"Character">
    %1421 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1422 = "mini.create_buffer"(%1421) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %1423 = builtin.unrealized_conversion_cast %1422 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1424 = "mini.refer"(%1423) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1425 = "mini.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %1426 = builtin.unrealized_conversion_cast %1425 : !mini.ptr<i8> to !mini.ptr<i8>
    %1427 = "mini.unwrap"(%1420) : (!mini.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1428 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1429 = "mini.method_call"(%1428, %1427) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i8>
    %1430 = builtin.unrealized_conversion_cast %1429 : !mini.ptr<i8> to !mini.ptr<i8>
    %1431 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1432 = "mini.buffer_indexation"(%1424, %1431) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
    "mini.castassign"(%1432, %1430) ({
      %1433 = builtin.unrealized_conversion_cast %1430 : !mini.ptr<i8> to !mini.ptr<i8>
    }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
    %1434 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1435 = "mini.buffer_indexation"(%1424, %1434) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
    "mini.castassign"(%1435, %1426) ({
      %1436 = builtin.unrealized_conversion_cast %1426 : !mini.ptr<i8> to !mini.ptr<i8>
    }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
    %1437 = "mini.print"(%1424) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xCharacter", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb115(%1438 : !llvm.ptr, %1439 : !llvm.struct<(!llvm.ptr, i160)>):
    %1440 = "mini.wrap"(%1439) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %1441 = "mini.to_fat_ptr"(%1440) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "String", "invariant"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !mini.fatptr<"String">
    %1442 = "mini.unwrap"(%1441) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1443 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1444 = "mini.method_call"(%1443, %1442) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1445 = builtin.unrealized_conversion_cast %1444 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1446 = "mini.print"(%1445) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb116(%1447 : !llvm.ptr, %1448 : !llvm.struct<(!llvm.ptr, i160)>):
    %1449 = "mini.wrap"(%1448) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %1450 = "mini.narrow"(%1449) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !mini.ptr<i32>
    %1451 = "mini.print"(%1450) {"typ" = i32} : (!mini.ptr<i32>) -> i32
  }) {"func_name" = "IO__Self_print_xPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb117(%1452 : !llvm.ptr, %1453 : !llvm.struct<(!llvm.ptr, i160)>):
    %1454 = "mini.wrap"(%1453) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %1455 = "mini.narrow"(%1454) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i8, "from_typ_name" = "union_typ", "to_typ_name" = "i8_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !mini.ptr<i8>
    %1456 = "mini.print"(%1455) {"typ" = i8} : (!mini.ptr<i8>) -> i32
  }) {"func_name" = "IO__Self_print_xPtri8", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb118(%1457 : !llvm.ptr, %1458 : !llvm.struct<(!llvm.ptr, i160)>):
    %1459 = "mini.wrap"(%1458) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %1460 = "mini.narrow"(%1459) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !mini.ptr<f64>
    %1461 = "mini.print"(%1460) {"typ" = f64} : (!mini.ptr<f64>) -> i32
  }) {"func_name" = "IO__Self_print_xPtrf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb119(%1462 : !llvm.ptr, %1463 : !llvm.struct<(!llvm.ptr, i160)>):
    %1464 = "mini.wrap"(%1463) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %1465 = "mini.to_fat_ptr"(%1464) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Representable", "invariant"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !mini.fatptr<"Representable">
    %1466 = "mini.unwrap"(%1465) : (!mini.fatptr<"Representable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1467 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1468 = "mini.method_call"(%1467, %1466) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %1469 = "mini.to_fat_ptr"(%1468) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %1470 = "mini.unwrap"(%1469) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1471 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1472 = "mini.method_call"(%1471, %1470) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1473 = builtin.unrealized_conversion_cast %1472 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1474 = "mini.print"(%1473) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xRepresentable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb120(%1475 : !llvm.ptr, %1476 : !llvm.struct<(!llvm.ptr, i160)>):
    %1477 = "mini.wrap"(%1476) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %1478 = "mini.narrow"(%1477) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.array<0 x i8>, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !mini.nil
    %1479 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1480 = "mini.create_buffer"(%1479) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %1481 = builtin.unrealized_conversion_cast %1480 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %1482 = "mini.refer"(%1481) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %1483 = "mini.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "nil"} : () -> !llvm.ptr
    %1484 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %1485 = "mini.buffer_indexation"(%1482, %1484) {"typ" = !llvm.array<3 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%1485, %1483) {"typ" = !llvm.array<3 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %1486 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1487 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1488 = "mini.unwrap"(%1482) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1489 = "mini.unwrap"(%1486) : (!mini.ptr<i32>) -> i32
    %1490 = "mini.unwrap"(%1487) : (!mini.ptr<i32>) -> i32
    %1491 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %1492 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1493 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %1494 = builtin.unrealized_conversion_cast %1482 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1495 = "mini.unwrap"(%1494) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %1496 = builtin.unrealized_conversion_cast %1492 : !mini.ptr<i32> to !mini.ptr<i32>
    %1497 = "mini.unwrap"(%1496) : (!mini.ptr<i32>) -> i32
    %1498 = builtin.unrealized_conversion_cast %1493 : !mini.ptr<i32> to !mini.ptr<i32>
    %1499 = "mini.unwrap"(%1498) : (!mini.ptr<i32>) -> i32
    %1500 = "mini.unwrap"(%1491) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1501 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %1502 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1503 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %1504 = "mini.parameterizations_array"(%1501, %1502, %1503) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1504, %1500, %1495, %1497, %1499) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %1505 = "mini.unwrap"(%1491) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1506 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1507 = "mini.method_call"(%1506, %1505) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %1508 = builtin.unrealized_conversion_cast %1507 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %1509 = "mini.print"(%1508) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xNil", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb121(%1510 : !llvm.ptr, %1511 : !llvm.struct<(!llvm.ptr, i160)>):
    %1512 = "mini.wrap"(%1511) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %1513 = "mini.narrow"(%1512) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i64, "from_typ_name" = "union_typ", "to_typ_name" = "i64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !mini.ptr<i64>
    %1514 = "mini.print"(%1513) {"typ" = i64} : (!mini.ptr<i64>) -> i32
  }) {"func_name" = "IO__Self_print_xPtri64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb122(%1515 : !llvm.ptr, %1516 : !llvm.struct<(!llvm.ptr, i160)>):
    %1517 = "mini.invariant"(%1515) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1518 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb123] : () -> ()
  ^bb124:
    %1519 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%1519, %1518) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb126:
    %1520 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%1520, %1518) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb127:
    %1521 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%1521, %1518) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb128:
    %1522 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%1522, %1518) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb129:
    %1523 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%1523, %1518) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb130:
    %1524 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%1524, %1518) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb131:
    %1525 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%1525, %1518) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb132:
    %1526 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%1526, %1518) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb133:
    %1527 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%1527, %1518) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb125] : () -> ()
  ^bb123:
    %1528 = "llvm.getelementptr"(%1515) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1529 = "llvm.load"(%1528) : (!llvm.ptr) -> !llvm.ptr
    %1530 = "llvm.getelementptr"(%1529) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1531 = "llvm.getelementptr"(%1529) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1532 = "llvm.getelementptr"(%1529) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1533 = "llvm.getelementptr"(%1529) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1534 = "llvm.load"(%1530) : (!llvm.ptr) -> i64
    %1535 = "llvm.load"(%1531) : (!llvm.ptr) -> i64
    %1536 = "llvm.load"(%1532) : (!llvm.ptr) -> !llvm.ptr
    %1537 = "llvm.load"(%1533) : (!llvm.ptr) -> !llvm.ptr
    %1538 = "mini.addr_of"() {"global_name" = @i64_typ} : () -> !llvm.ptr
    %1539 = "llvm.ptrtoint"(%1538) : (!llvm.ptr) -> i64
    %1540 = "llvm.mlir.constant"() <{"value" = 10976946829247779694 : i64}> : () -> i64
    %1541 = "mini.subtype"(%1536, %1535, %1534, %1540, %1539, %1537) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1541) [^bb124, ^bb134] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb134:
    %1542 = "llvm.getelementptr"(%1515) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1543 = "llvm.load"(%1542) : (!llvm.ptr) -> !llvm.ptr
    %1544 = "llvm.getelementptr"(%1543) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1545 = "llvm.getelementptr"(%1543) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1546 = "llvm.getelementptr"(%1543) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1547 = "llvm.getelementptr"(%1543) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1548 = "llvm.load"(%1544) : (!llvm.ptr) -> i64
    %1549 = "llvm.load"(%1545) : (!llvm.ptr) -> i64
    %1550 = "llvm.load"(%1546) : (!llvm.ptr) -> !llvm.ptr
    %1551 = "llvm.load"(%1547) : (!llvm.ptr) -> !llvm.ptr
    %1552 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %1553 = "llvm.ptrtoint"(%1552) : (!llvm.ptr) -> i64
    %1554 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %1555 = "mini.subtype"(%1550, %1549, %1548, %1554, %1553, %1551) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1555) [^bb126, ^bb135] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb135:
    %1556 = "llvm.getelementptr"(%1515) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1557 = "llvm.load"(%1556) : (!llvm.ptr) -> !llvm.ptr
    %1558 = "llvm.getelementptr"(%1557) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1559 = "llvm.getelementptr"(%1557) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1560 = "llvm.getelementptr"(%1557) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1561 = "llvm.getelementptr"(%1557) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1562 = "llvm.load"(%1558) : (!llvm.ptr) -> i64
    %1563 = "llvm.load"(%1559) : (!llvm.ptr) -> i64
    %1564 = "llvm.load"(%1560) : (!llvm.ptr) -> !llvm.ptr
    %1565 = "llvm.load"(%1561) : (!llvm.ptr) -> !llvm.ptr
    %1566 = "mini.addr_of"() {"global_name" = @Character} : () -> !llvm.ptr
    %1567 = "llvm.ptrtoint"(%1566) : (!llvm.ptr) -> i64
    %1568 = "llvm.mlir.constant"() <{"value" = 6681222582356018452 : i64}> : () -> i64
    %1569 = "mini.subtype"(%1564, %1563, %1562, %1568, %1567, %1565) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1569) [^bb136, ^bb137] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb136:
    %1570 = "llvm.getelementptr"(%1515) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1571 = "llvm.load"(%1570) : (!llvm.ptr) -> !llvm.ptr
    %1572 = "llvm.getelementptr"(%1571) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1573 = "llvm.getelementptr"(%1571) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1574 = "llvm.getelementptr"(%1571) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1575 = "llvm.getelementptr"(%1571) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1576 = "llvm.load"(%1572) : (!llvm.ptr) -> i64
    %1577 = "llvm.load"(%1573) : (!llvm.ptr) -> i64
    %1578 = "llvm.load"(%1574) : (!llvm.ptr) -> !llvm.ptr
    %1579 = "llvm.load"(%1575) : (!llvm.ptr) -> !llvm.ptr
    %1580 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %1581 = "llvm.ptrtoint"(%1580) : (!llvm.ptr) -> i64
    %1582 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %1583 = "mini.subtype"(%1578, %1577, %1576, %1582, %1581, %1579) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1583) [^bb137, ^bb127] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb137:
    %1584 = "llvm.getelementptr"(%1515) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1585 = "llvm.load"(%1584) : (!llvm.ptr) -> !llvm.ptr
    %1586 = "llvm.getelementptr"(%1585) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1587 = "llvm.getelementptr"(%1585) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1588 = "llvm.getelementptr"(%1585) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1589 = "llvm.getelementptr"(%1585) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1590 = "llvm.load"(%1586) : (!llvm.ptr) -> i64
    %1591 = "llvm.load"(%1587) : (!llvm.ptr) -> i64
    %1592 = "llvm.load"(%1588) : (!llvm.ptr) -> !llvm.ptr
    %1593 = "llvm.load"(%1589) : (!llvm.ptr) -> !llvm.ptr
    %1594 = "mini.addr_of"() {"global_name" = @nil_typ} : () -> !llvm.ptr
    %1595 = "llvm.ptrtoint"(%1594) : (!llvm.ptr) -> i64
    %1596 = "llvm.mlir.constant"() <{"value" = 13319937214253225933 : i64}> : () -> i64
    %1597 = "mini.subtype"(%1592, %1591, %1590, %1596, %1595, %1593) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1597) [^bb128, ^bb138] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb138:
    %1598 = "llvm.getelementptr"(%1515) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1599 = "llvm.load"(%1598) : (!llvm.ptr) -> !llvm.ptr
    %1600 = "llvm.getelementptr"(%1599) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1601 = "llvm.getelementptr"(%1599) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1602 = "llvm.getelementptr"(%1599) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1603 = "llvm.getelementptr"(%1599) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1604 = "llvm.load"(%1600) : (!llvm.ptr) -> i64
    %1605 = "llvm.load"(%1601) : (!llvm.ptr) -> i64
    %1606 = "llvm.load"(%1602) : (!llvm.ptr) -> !llvm.ptr
    %1607 = "llvm.load"(%1603) : (!llvm.ptr) -> !llvm.ptr
    %1608 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %1609 = "llvm.ptrtoint"(%1608) : (!llvm.ptr) -> i64
    %1610 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %1611 = "mini.subtype"(%1606, %1605, %1604, %1610, %1609, %1607) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1611) [^bb129, ^bb139] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb139:
    %1612 = "llvm.getelementptr"(%1515) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1613 = "llvm.load"(%1612) : (!llvm.ptr) -> !llvm.ptr
    %1614 = "llvm.getelementptr"(%1613) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1615 = "llvm.getelementptr"(%1613) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1616 = "llvm.getelementptr"(%1613) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1617 = "llvm.getelementptr"(%1613) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1618 = "llvm.load"(%1614) : (!llvm.ptr) -> i64
    %1619 = "llvm.load"(%1615) : (!llvm.ptr) -> i64
    %1620 = "llvm.load"(%1616) : (!llvm.ptr) -> !llvm.ptr
    %1621 = "llvm.load"(%1617) : (!llvm.ptr) -> !llvm.ptr
    %1622 = "mini.addr_of"() {"global_name" = @Representable} : () -> !llvm.ptr
    %1623 = "llvm.ptrtoint"(%1622) : (!llvm.ptr) -> i64
    %1624 = "llvm.mlir.constant"() <{"value" = 11185903432579561498 : i64}> : () -> i64
    %1625 = "mini.subtype"(%1620, %1619, %1618, %1624, %1623, %1621) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1625) [^bb140, ^bb141] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb140:
    %1626 = "llvm.getelementptr"(%1515) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1627 = "llvm.load"(%1626) : (!llvm.ptr) -> !llvm.ptr
    %1628 = "llvm.getelementptr"(%1627) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1629 = "llvm.getelementptr"(%1627) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1630 = "llvm.getelementptr"(%1627) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1631 = "llvm.getelementptr"(%1627) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1632 = "llvm.load"(%1628) : (!llvm.ptr) -> i64
    %1633 = "llvm.load"(%1629) : (!llvm.ptr) -> i64
    %1634 = "llvm.load"(%1630) : (!llvm.ptr) -> !llvm.ptr
    %1635 = "llvm.load"(%1631) : (!llvm.ptr) -> !llvm.ptr
    %1636 = "mini.addr_of"() {"global_name" = @Character} : () -> !llvm.ptr
    %1637 = "llvm.ptrtoint"(%1636) : (!llvm.ptr) -> i64
    %1638 = "llvm.mlir.constant"() <{"value" = 6681222582356018452 : i64}> : () -> i64
    %1639 = "mini.subtype"(%1634, %1633, %1632, %1638, %1637, %1635) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1639) [^bb141, ^bb142] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb142:
    %1640 = "llvm.getelementptr"(%1515) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1641 = "llvm.load"(%1640) : (!llvm.ptr) -> !llvm.ptr
    %1642 = "llvm.getelementptr"(%1641) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1643 = "llvm.getelementptr"(%1641) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1644 = "llvm.getelementptr"(%1641) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1645 = "llvm.getelementptr"(%1641) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1646 = "llvm.load"(%1642) : (!llvm.ptr) -> i64
    %1647 = "llvm.load"(%1643) : (!llvm.ptr) -> i64
    %1648 = "llvm.load"(%1644) : (!llvm.ptr) -> !llvm.ptr
    %1649 = "llvm.load"(%1645) : (!llvm.ptr) -> !llvm.ptr
    %1650 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %1651 = "llvm.ptrtoint"(%1650) : (!llvm.ptr) -> i64
    %1652 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %1653 = "mini.subtype"(%1648, %1647, %1646, %1652, %1651, %1649) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1653) [^bb141, ^bb130] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb141:
    %1654 = "llvm.getelementptr"(%1515) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1655 = "llvm.load"(%1654) : (!llvm.ptr) -> !llvm.ptr
    %1656 = "llvm.getelementptr"(%1655) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1657 = "llvm.getelementptr"(%1655) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1658 = "llvm.getelementptr"(%1655) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1659 = "llvm.getelementptr"(%1655) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1660 = "llvm.load"(%1656) : (!llvm.ptr) -> i64
    %1661 = "llvm.load"(%1657) : (!llvm.ptr) -> i64
    %1662 = "llvm.load"(%1658) : (!llvm.ptr) -> !llvm.ptr
    %1663 = "llvm.load"(%1659) : (!llvm.ptr) -> !llvm.ptr
    %1664 = "mini.addr_of"() {"global_name" = @i8_typ} : () -> !llvm.ptr
    %1665 = "llvm.ptrtoint"(%1664) : (!llvm.ptr) -> i64
    %1666 = "llvm.mlir.constant"() <{"value" = 2582149688529881115 : i64}> : () -> i64
    %1667 = "mini.subtype"(%1662, %1661, %1660, %1666, %1665, %1663) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1667) [^bb131, ^bb143] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb143:
    %1668 = "llvm.getelementptr"(%1515) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1669 = "llvm.load"(%1668) : (!llvm.ptr) -> !llvm.ptr
    %1670 = "llvm.getelementptr"(%1669) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1671 = "llvm.getelementptr"(%1669) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1672 = "llvm.getelementptr"(%1669) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1673 = "llvm.getelementptr"(%1669) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1674 = "llvm.load"(%1670) : (!llvm.ptr) -> i64
    %1675 = "llvm.load"(%1671) : (!llvm.ptr) -> i64
    %1676 = "llvm.load"(%1672) : (!llvm.ptr) -> !llvm.ptr
    %1677 = "llvm.load"(%1673) : (!llvm.ptr) -> !llvm.ptr
    %1678 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %1679 = "llvm.ptrtoint"(%1678) : (!llvm.ptr) -> i64
    %1680 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %1681 = "mini.subtype"(%1676, %1675, %1674, %1680, %1679, %1677) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1681) [^bb144, ^bb145] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb144:
    %1682 = "llvm.getelementptr"(%1515) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1683 = "llvm.load"(%1682) : (!llvm.ptr) -> !llvm.ptr
    %1684 = "llvm.getelementptr"(%1683) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1685 = "llvm.getelementptr"(%1683) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1686 = "llvm.getelementptr"(%1683) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1687 = "llvm.getelementptr"(%1683) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1688 = "llvm.load"(%1684) : (!llvm.ptr) -> i64
    %1689 = "llvm.load"(%1685) : (!llvm.ptr) -> i64
    %1690 = "llvm.load"(%1686) : (!llvm.ptr) -> !llvm.ptr
    %1691 = "llvm.load"(%1687) : (!llvm.ptr) -> !llvm.ptr
    %1692 = "mini.addr_of"() {"global_name" = @Character} : () -> !llvm.ptr
    %1693 = "llvm.ptrtoint"(%1692) : (!llvm.ptr) -> i64
    %1694 = "llvm.mlir.constant"() <{"value" = 6681222582356018452 : i64}> : () -> i64
    %1695 = "mini.subtype"(%1690, %1689, %1688, %1694, %1693, %1691) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1695) [^bb145, ^bb132] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb145:
    %1696 = "llvm.getelementptr"(%1515) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1697 = "llvm.load"(%1696) : (!llvm.ptr) -> !llvm.ptr
    %1698 = "llvm.getelementptr"(%1697) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1699 = "llvm.getelementptr"(%1697) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1700 = "llvm.getelementptr"(%1697) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1701 = "llvm.getelementptr"(%1697) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1702 = "llvm.load"(%1698) : (!llvm.ptr) -> i64
    %1703 = "llvm.load"(%1699) : (!llvm.ptr) -> i64
    %1704 = "llvm.load"(%1700) : (!llvm.ptr) -> !llvm.ptr
    %1705 = "llvm.load"(%1701) : (!llvm.ptr) -> !llvm.ptr
    %1706 = "mini.addr_of"() {"global_name" = @bool_typ} : () -> !llvm.ptr
    %1707 = "llvm.ptrtoint"(%1706) : (!llvm.ptr) -> i64
    %1708 = "llvm.mlir.constant"() <{"value" = 5801531371504802705 : i64}> : () -> i64
    %1709 = "mini.subtype"(%1704, %1703, %1702, %1708, %1707, %1705) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1709) [^bb133, ^bb133] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb125:
    %1710 = "mini.addr_of"() {"global_name" = @IO} : () -> !llvm.ptr
    %1711 = "llvm.load"(%1518) : (!llvm.ptr) -> i32
    %1712 = "llvm.getelementptr"(%1710, %1711) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1713 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %1714 = "llvm.getelementptr"(%1712, %1713) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1714) : (!llvm.ptr) -> ()
  }) {"func_name" = "IO_B__Self_print_xPtri1__Self_print_xCharacter__Self_print_xString__Self_print_xPtri32__Self_print_xPtri8__Self_print_xPtrf64__Self_print_xRepresentable__Self_print_xNil__Self_print_xPtri64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb146(%1715 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1716 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1717 : !llvm.ptr):
    %1718 = "mini.wrap"(%1715) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Blocking">
    %1719 = "mini.to_fat_ptr"(%1718) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Blocking", "to_typ_name" = "Blocking", "invariant"} : (!mini.fatptr<"Blocking">) -> !mini.fatptr<"Blocking">
  }) {"func_name" = "Blocking_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb147(%1720 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1721 : !llvm.ptr):
    %1722 = "mini.invariant"(%1721) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1723 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb148] : () -> ()
  ^bb148:
    %1724 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%1724, %1723) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb149] : () -> ()
  ^bb149:
    %1725 = "llvm.extractvalue"(%1720) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1726 = "llvm.load"(%1723) : (!llvm.ptr) -> i32
    %1727 = "llvm.getelementptr"(%1725, %1726) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1728 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %1729 = "llvm.getelementptr"(%1727, %1728) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1729) : (!llvm.ptr) -> ()
  }) {"func_name" = "Blocking_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i32)>)>, "offset" = 0 : i32, "meth_name" = "Channel_field_value"} : () -> ()
  "mini.func"() ({
  ^bb150(%1730 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1731 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1732 : !llvm.ptr):
    %1733 = "mini.wrap"(%1730) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel">
    %1734 = "mini.to_fat_ptr"(%1733) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Channel", "to_typ_name" = "Channel", "invariant"} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    %1735 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %1736 = "mini.field_access"(%1734) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32} : (!mini.fatptr<"Channel">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.castassign"(%1736, %1735) ({
      %1737 = "mini.unionize"(%1735) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    }) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !llvm.ptr) -> ()
  }) {"func_name" = "Channel_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb151(%1738 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1739 : !llvm.ptr):
    %1740 = "mini.invariant"(%1739) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1741 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb152] : () -> ()
  ^bb152:
    %1742 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%1742, %1741) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb153] : () -> ()
  ^bb153:
    %1743 = "llvm.extractvalue"(%1738) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1744 = "llvm.load"(%1741) : (!llvm.ptr) -> i32
    %1745 = "llvm.getelementptr"(%1743, %1744) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1746 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %1747 = "llvm.getelementptr"(%1745, %1746) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1747) : (!llvm.ptr) -> ()
  }) {"func_name" = "Channel_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb154(%1748 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1749 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1750 : !llvm.ptr):
    %1751 = "mini.wrap"(%1748) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel">
    %1752 = "mini.to_fat_ptr"(%1751) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Channel", "to_typ_name" = "Channel", "invariant"} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    "mini.while"() ({
      %1753 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
      %1754 = "mini.unwrap"(%1753) : (!mini.ptr<i1>) -> i1
    }, {
      %1755 = "mini.field_access"(%1752) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32} : (!mini.fatptr<"Channel">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1756 = "mini.checkflag"(%1755) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %1757 = "mini.unwrap"(%1756) : (i1) -> i1
      %1758 = builtin.unrealized_conversion_cast %1755 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%1757) ({
        %1759 = "mini.narrow"(%1758) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %1760 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %1761 = "mini.field_access"(%1752) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32} : (!mini.fatptr<"Channel">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        "mini.castassign"(%1761, %1760) ({
          %1762 = "mini.unionize"(%1760) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !llvm.ptr) -> ()
        %1763 = builtin.unrealized_conversion_cast %1759 : !mini.ptr<i32> to !mini.ptr<i32>
        "mini.return"(%1763) : (!mini.ptr<i32>) -> ()
        "mini.castassign"(%1758, %1759) ({
          %1764 = "mini.unionize"(%1759) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
      %1765 = "mini.new"() {"typ" = !llvm.struct<()>, "class_name" = "Blocking", "num_data_fields" = 0 : i32} : () -> !mini.fatptr<"Blocking">
      %1766 = "mini.unwrap"(%1765) : (!mini.fatptr<"Blocking">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1767 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%1767, %1766) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1768 = builtin.unrealized_conversion_cast %1765 : !mini.fatptr<"Blocking"> to !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
      %1769 = "mini.unwrap"(%1768) : (!mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1770 = "mini.coro_yield"(%1769) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1771 = "mini.wrap"(%1770) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
    }) : () -> ()
  }) {"func_name" = "Channel_get_", "result_type" = i32, "yield_type" = !mini.fatptr<"Blocking">} : () -> ()
  "mini.func"() ({
  ^bb155(%1772 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1773 : !llvm.ptr):
    %1774 = "mini.invariant"(%1773) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1775 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb156] : () -> ()
  ^bb156:
    %1776 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%1776, %1775) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb157] : () -> ()
  ^bb157:
    %1777 = "llvm.extractvalue"(%1772) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1778 = "llvm.load"(%1775) : (!llvm.ptr) -> i32
    %1779 = "llvm.getelementptr"(%1777, %1778) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1780 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %1781 = "llvm.getelementptr"(%1779, %1780) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1781) : (!llvm.ptr) -> ()
  }) {"func_name" = "Channel_B_get_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb158(%1782 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1783 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1784 : !llvm.ptr, %1785 : i32):
    %1786 = "mini.wrap"(%1782) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel">
    %1787 = "mini.to_fat_ptr"(%1786) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Channel", "to_typ_name" = "Channel", "invariant"} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    %1788 = "mini.wrap"(%1785) : (i32) -> !mini.ptr<i32>
    %1789 = builtin.unrealized_conversion_cast %1788 : !mini.ptr<i32> to !mini.ptr<i32>
    %1790 = "mini.field_access"(%1787) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32} : (!mini.fatptr<"Channel">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %1791 = builtin.unrealized_conversion_cast %1790 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.while"() ({
      %1792 = "mini.checkflag"(%1791) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %1793 = "mini.unwrap"(%1792) : (i1) -> i1
    }, {
      %1794 = "mini.narrow"(%1791) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %1795 = "mini.new"() {"typ" = !llvm.struct<()>, "class_name" = "Blocking", "num_data_fields" = 0 : i32} : () -> !mini.fatptr<"Blocking">
      %1796 = "mini.unwrap"(%1795) : (!mini.fatptr<"Blocking">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1797 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%1797, %1796) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1798 = builtin.unrealized_conversion_cast %1795 : !mini.fatptr<"Blocking"> to !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
      %1799 = "mini.unwrap"(%1798) : (!mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1800 = "mini.coro_yield"(%1799) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1801 = "mini.wrap"(%1800) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
      %1802 = "mini.field_access"(%1787) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32} : (!mini.fatptr<"Channel">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.castassign"(%1791, %1802) ({
        %1803 = builtin.unrealized_conversion_cast %1802 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : () -> ()
    %1804 = "mini.field_access"(%1787) {"offset" = 0 : i64, "vtable_bytes" = 56 : i32} : (!mini.fatptr<"Channel">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.castassign"(%1804, %1789) ({
      %1805 = "mini.unionize"(%1789) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Channel_put_new_valuePtri32", "result_type" = !llvm.void, "yield_type" = !mini.fatptr<"Blocking">} : () -> ()
  "mini.func"() ({
  ^bb159(%1806 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1807 : !llvm.ptr, %1808 : i32):
    %1809 = "mini.invariant"(%1807) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1810 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb160] : () -> ()
  ^bb161:
    %1811 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%1811, %1810) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb162] : () -> ()
  ^bb160:
    %1812 = "llvm.getelementptr"(%1807) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1813 = "llvm.load"(%1812) : (!llvm.ptr) -> !llvm.ptr
    %1814 = "llvm.getelementptr"(%1813) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1815 = "llvm.getelementptr"(%1813) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1816 = "llvm.getelementptr"(%1813) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1817 = "llvm.getelementptr"(%1813) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1818 = "llvm.load"(%1814) : (!llvm.ptr) -> i64
    %1819 = "llvm.load"(%1815) : (!llvm.ptr) -> i64
    %1820 = "llvm.load"(%1816) : (!llvm.ptr) -> !llvm.ptr
    %1821 = "llvm.load"(%1817) : (!llvm.ptr) -> !llvm.ptr
    %1822 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %1823 = "llvm.ptrtoint"(%1822) : (!llvm.ptr) -> i64
    %1824 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %1825 = "mini.subtype"(%1820, %1819, %1818, %1824, %1823, %1821) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1825) [^bb161, ^bb161] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb162:
    %1826 = "llvm.extractvalue"(%1806) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1827 = "llvm.load"(%1810) : (!llvm.ptr) -> i32
    %1828 = "llvm.getelementptr"(%1826, %1827) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1829 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %1830 = "llvm.getelementptr"(%1828, %1829) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1830) : (!llvm.ptr) -> ()
  }) {"func_name" = "Channel_B_put_new_valuePtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb163(%1831 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1832 : !llvm.ptr):
    %1833 = "mini.invariant"(%1832) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1834 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb164] : () -> ()
  ^bb164:
    %1835 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%1835, %1834) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb165] : () -> ()
  ^bb165:
    %1836 = "llvm.extractvalue"(%1831) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1837 = "llvm.load"(%1834) : (!llvm.ptr) -> i32
    %1838 = "llvm.getelementptr"(%1836, %1837) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1839 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %1840 = "llvm.getelementptr"(%1838, %1839) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1840) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb166(%1841 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1842 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1843 : !llvm.ptr, %1844 : !llvm.struct<(!llvm.ptr)>):
    %1845 = "mini.wrap"(%1841) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1846 = "mini.to_fat_ptr"(%1845) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1847 = "mini.wrap"(%1844) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>
    %1848 = builtin.unrealized_conversion_cast %1847 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>
    %1849 = "mini.unwrap"(%1846) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1850 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1851 = "mini.method_call"(%1850, %1849) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %1852 = "mini.to_fat_ptr"(%1851) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %1853 = "mini.to_fat_ptr"(%1852) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %1854 = "mini.refer"(%1853) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %1855 = "mini.unwrap"(%1854) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1856 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1857 = "mini.method_call"(%1856, %1855) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1858 = builtin.unrealized_conversion_cast %1857 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1859 = "mini.checkflag"(%1858) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %1860 = "mini.unwrap"(%1859) : (i1) -> i1
    }, {
      %1861 = "mini.narrow"(%1858) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %1862 = builtin.unrealized_conversion_cast %1861 : !mini.ptr<i32> to !mini.ptr<i32>
      %1863 = "mini.unwrap"(%1862) : (!mini.ptr<i32>) -> i32
      %1864 = "mini.unwrap"(%1848) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>) -> !llvm.ptr
      "mini.fptr_call"(%1864, %1863) {"ret_type" = !llvm.void} : (!llvm.ptr, i32) -> ()
      "mini.castassign"(%1858, %1861) ({
        %1865 = builtin.unrealized_conversion_cast %1861 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
  }) {"func_name" = "IntIterable_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb167(%1866 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1867 : !llvm.ptr, %1868 : !llvm.struct<(!llvm.ptr)>):
    %1869 = "mini.invariant"(%1867) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1870 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb168] : () -> ()
  ^bb169:
    %1871 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%1871, %1870) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb170] : () -> ()
  ^bb168:
    %1872 = "llvm.getelementptr"(%1867) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1873 = "llvm.load"(%1872) : (!llvm.ptr) -> !llvm.ptr
    %1874 = "llvm.getelementptr"(%1873) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1875 = "llvm.getelementptr"(%1873) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1876 = "llvm.getelementptr"(%1873) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1877 = "llvm.getelementptr"(%1873) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1878 = "llvm.load"(%1874) : (!llvm.ptr) -> i64
    %1879 = "llvm.load"(%1875) : (!llvm.ptr) -> i64
    %1880 = "llvm.load"(%1876) : (!llvm.ptr) -> !llvm.ptr
    %1881 = "llvm.load"(%1877) : (!llvm.ptr) -> !llvm.ptr
    %1882 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %1883 = "llvm.ptrtoint"(%1882) : (!llvm.ptr) -> i64
    %1884 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %1885 = "mini.subtype"(%1880, %1879, %1878, %1884, %1883, %1881) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1885) [^bb169, ^bb169] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb170:
    %1886 = "llvm.extractvalue"(%1866) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1887 = "llvm.load"(%1870) : (!llvm.ptr) -> i32
    %1888 = "llvm.getelementptr"(%1886, %1887) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1889 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %1890 = "llvm.getelementptr"(%1888, %1889) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1890) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb171(%1891 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1892 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1893 : !llvm.ptr, %1894 : i32, %1895 : !llvm.struct<(!llvm.ptr)>):
    %1896 = "mini.wrap"(%1891) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1897 = "mini.to_fat_ptr"(%1896) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1898 = "mini.wrap"(%1894) : (i32) -> !mini.ptr<i32>
    %1899 = builtin.unrealized_conversion_cast %1898 : !mini.ptr<i32> to !mini.ptr<i32>
    %1900 = "mini.wrap"(%1895) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %1901 = builtin.unrealized_conversion_cast %1900 : !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %1902 = "mini.unwrap"(%1897) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1903 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1904 = "mini.method_call"(%1903, %1902) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %1905 = "mini.to_fat_ptr"(%1904) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %1906 = "mini.to_fat_ptr"(%1905) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %1907 = "mini.refer"(%1906) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %1908 = "mini.unwrap"(%1907) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1909 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1910 = "mini.method_call"(%1909, %1908) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1911 = builtin.unrealized_conversion_cast %1910 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1912 = "mini.checkflag"(%1911) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %1913 = "mini.unwrap"(%1912) : (i1) -> i1
    }, {
      %1914 = "mini.narrow"(%1911) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %1915 = builtin.unrealized_conversion_cast %1899 : !mini.ptr<i32> to !mini.ptr<i32>
      %1916 = "mini.unwrap"(%1915) : (!mini.ptr<i32>) -> i32
      %1917 = builtin.unrealized_conversion_cast %1914 : !mini.ptr<i32> to !mini.ptr<i32>
      %1918 = "mini.unwrap"(%1917) : (!mini.ptr<i32>) -> i32
      %1919 = "mini.unwrap"(%1901) : (!mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.ptr
      %1920 = "mini.fptr_call"(%1919, %1916, %1918) {"ret_type" = i32} : (!llvm.ptr, i32, i32) -> !mini.ptr<i32>
      "mini.castassign"(%1899, %1920) ({
        %1921 = builtin.unrealized_conversion_cast %1920 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      "mini.castassign"(%1911, %1914) ({
        %1922 = builtin.unrealized_conversion_cast %1914 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %1923 = builtin.unrealized_conversion_cast %1899 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%1923) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "IntIterable_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb172(%1924 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1925 : !llvm.ptr, %1926 : i32, %1927 : !llvm.struct<(!llvm.ptr)>):
    %1928 = "mini.invariant"(%1925) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1929 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb173] : () -> ()
  ^bb174:
    %1930 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%1930, %1929) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb175] : () -> ()
  ^bb176:
    %1931 = "llvm.getelementptr"(%1925) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1932 = "llvm.load"(%1931) : (!llvm.ptr) -> !llvm.ptr
    %1933 = "llvm.getelementptr"(%1932) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1934 = "llvm.getelementptr"(%1932) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1935 = "llvm.getelementptr"(%1932) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1936 = "llvm.getelementptr"(%1932) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1937 = "llvm.load"(%1933) : (!llvm.ptr) -> i64
    %1938 = "llvm.load"(%1934) : (!llvm.ptr) -> i64
    %1939 = "llvm.load"(%1935) : (!llvm.ptr) -> !llvm.ptr
    %1940 = "llvm.load"(%1936) : (!llvm.ptr) -> !llvm.ptr
    %1941 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %1942 = "llvm.ptrtoint"(%1941) : (!llvm.ptr) -> i64
    %1943 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %1944 = "mini.subtype"(%1939, %1938, %1937, %1943, %1942, %1940) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1944) [^bb174, ^bb174] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb173:
    %1945 = "llvm.getelementptr"(%1925) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %1946 = "llvm.load"(%1945) : (!llvm.ptr) -> !llvm.ptr
    %1947 = "llvm.getelementptr"(%1946) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1948 = "llvm.getelementptr"(%1946) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1949 = "llvm.getelementptr"(%1946) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1950 = "llvm.getelementptr"(%1946) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1951 = "llvm.load"(%1947) : (!llvm.ptr) -> i64
    %1952 = "llvm.load"(%1948) : (!llvm.ptr) -> i64
    %1953 = "llvm.load"(%1949) : (!llvm.ptr) -> !llvm.ptr
    %1954 = "llvm.load"(%1950) : (!llvm.ptr) -> !llvm.ptr
    %1955 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %1956 = "llvm.ptrtoint"(%1955) : (!llvm.ptr) -> i64
    %1957 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %1958 = "mini.subtype"(%1953, %1952, %1951, %1957, %1956, %1954) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%1958) [^bb176, ^bb176] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb175:
    %1959 = "llvm.extractvalue"(%1924) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1960 = "llvm.load"(%1929) : (!llvm.ptr) -> i32
    %1961 = "llvm.getelementptr"(%1959, %1960) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1962 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %1963 = "llvm.getelementptr"(%1961, %1962) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1963) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb177(%1964 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1965 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1966 : !llvm.ptr, %1967 : !llvm.struct<(!llvm.ptr)>):
    %1968 = "mini.wrap"(%1964) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %1969 = "mini.to_fat_ptr"(%1968) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %1970 = "mini.wrap"(%1967) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %1971 = builtin.unrealized_conversion_cast %1970 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %1972 = "mini.unwrap"(%1969) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1973 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1974 = "mini.method_call"(%1973, %1972) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %1975 = "mini.to_fat_ptr"(%1974) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %1976 = "mini.to_fat_ptr"(%1975) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %1977 = "mini.refer"(%1976) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %1978 = "mini.unwrap"(%1977) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1979 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1980 = "mini.method_call"(%1979, %1978) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1981 = builtin.unrealized_conversion_cast %1980 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %1982 = "mini.checkflag"(%1981) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %1983 = "mini.unwrap"(%1982) : (i1) -> i1
    }, {
      %1984 = "mini.narrow"(%1981) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %1985 = builtin.unrealized_conversion_cast %1984 : !mini.ptr<i32> to !mini.ptr<i32>
      %1986 = "mini.unwrap"(%1985) : (!mini.ptr<i32>) -> i32
      %1987 = "mini.unwrap"(%1971) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %1988 = "mini.fptr_call"(%1987, %1986) {"ret_type" = i1} : (!llvm.ptr, i32) -> !mini.ptr<i1>
      %1989 = "mini.unwrap"(%1988) : (!mini.ptr<i1>) -> i1
      "mini.if"(%1989) ({
        "mini.continue"() [^bb178] : () -> ()
      }) : (i1) -> ()
      %1990 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %1991 = builtin.unrealized_conversion_cast %1990 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.return"(%1991) : (!mini.ptr<i1>) -> ()
      "mini.castassign"(%1981, %1984) ({
        %1992 = builtin.unrealized_conversion_cast %1984 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %1993 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %1994 = builtin.unrealized_conversion_cast %1993 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%1994) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "IntIterable_all_fFunctionPtri32_to_Ptri1", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb179(%1995 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1996 : !llvm.ptr, %1997 : !llvm.struct<(!llvm.ptr)>):
    %1998 = "mini.invariant"(%1996) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1999 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb180] : () -> ()
  ^bb181:
    %2000 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%2000, %1999) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb182] : () -> ()
  ^bb180:
    %2001 = "llvm.getelementptr"(%1996) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2002 = "llvm.load"(%2001) : (!llvm.ptr) -> !llvm.ptr
    %2003 = "llvm.getelementptr"(%2002) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2004 = "llvm.getelementptr"(%2002) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2005 = "llvm.getelementptr"(%2002) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2006 = "llvm.getelementptr"(%2002) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2007 = "llvm.load"(%2003) : (!llvm.ptr) -> i64
    %2008 = "llvm.load"(%2004) : (!llvm.ptr) -> i64
    %2009 = "llvm.load"(%2005) : (!llvm.ptr) -> !llvm.ptr
    %2010 = "llvm.load"(%2006) : (!llvm.ptr) -> !llvm.ptr
    %2011 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2012 = "llvm.ptrtoint"(%2011) : (!llvm.ptr) -> i64
    %2013 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2014 = "mini.subtype"(%2009, %2008, %2007, %2013, %2012, %2010) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2014) [^bb181, ^bb181] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb182:
    %2015 = "llvm.extractvalue"(%1995) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2016 = "llvm.load"(%1999) : (!llvm.ptr) -> i32
    %2017 = "llvm.getelementptr"(%2015, %2016) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2018 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2019 = "llvm.getelementptr"(%2017, %2018) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2019) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb183(%2020 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2021 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2022 : !llvm.ptr, %2023 : !llvm.struct<(!llvm.ptr)>):
    %2024 = "mini.wrap"(%2020) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2025 = "mini.to_fat_ptr"(%2024) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2026 = "mini.wrap"(%2023) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2027 = builtin.unrealized_conversion_cast %2026 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2028 = "mini.unwrap"(%2025) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2029 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2030 = "mini.method_call"(%2029, %2028) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2031 = "mini.to_fat_ptr"(%2030) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2032 = "mini.to_fat_ptr"(%2031) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2033 = "mini.refer"(%2032) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %2034 = "mini.unwrap"(%2033) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2035 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %2036 = "mini.method_call"(%2035, %2034) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %2037 = builtin.unrealized_conversion_cast %2036 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %2038 = "mini.checkflag"(%2037) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %2039 = "mini.unwrap"(%2038) : (i1) -> i1
    }, {
      %2040 = "mini.narrow"(%2037) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %2041 = builtin.unrealized_conversion_cast %2040 : !mini.ptr<i32> to !mini.ptr<i32>
      %2042 = "mini.unwrap"(%2041) : (!mini.ptr<i32>) -> i32
      %2043 = "mini.unwrap"(%2027) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %2044 = "mini.fptr_call"(%2043, %2042) {"ret_type" = i1} : (!llvm.ptr, i32) -> !mini.ptr<i1>
      %2045 = "mini.unwrap"(%2044) : (!mini.ptr<i1>) -> i1
      "mini.if"(%2045) ({
        %2046 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
        %2047 = builtin.unrealized_conversion_cast %2046 : !mini.ptr<i1> to !mini.ptr<i1>
        "mini.return"(%2047) : (!mini.ptr<i1>) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%2037, %2040) ({
        %2048 = builtin.unrealized_conversion_cast %2040 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %2049 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %2050 = builtin.unrealized_conversion_cast %2049 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%2050) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "IntIterable_any_fFunctionPtri32_to_Ptri1", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb184(%2051 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2052 : !llvm.ptr, %2053 : !llvm.struct<(!llvm.ptr)>):
    %2054 = "mini.invariant"(%2052) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2055 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb185] : () -> ()
  ^bb186:
    %2056 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%2056, %2055) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb187] : () -> ()
  ^bb185:
    %2057 = "llvm.getelementptr"(%2052) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2058 = "llvm.load"(%2057) : (!llvm.ptr) -> !llvm.ptr
    %2059 = "llvm.getelementptr"(%2058) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2060 = "llvm.getelementptr"(%2058) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2061 = "llvm.getelementptr"(%2058) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2062 = "llvm.getelementptr"(%2058) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2063 = "llvm.load"(%2059) : (!llvm.ptr) -> i64
    %2064 = "llvm.load"(%2060) : (!llvm.ptr) -> i64
    %2065 = "llvm.load"(%2061) : (!llvm.ptr) -> !llvm.ptr
    %2066 = "llvm.load"(%2062) : (!llvm.ptr) -> !llvm.ptr
    %2067 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2068 = "llvm.ptrtoint"(%2067) : (!llvm.ptr) -> i64
    %2069 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2070 = "mini.subtype"(%2065, %2064, %2063, %2069, %2068, %2066) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2070) [^bb186, ^bb186] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb187:
    %2071 = "llvm.extractvalue"(%2051) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2072 = "llvm.load"(%2055) : (!llvm.ptr) -> i32
    %2073 = "llvm.getelementptr"(%2071, %2072) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2074 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2075 = "llvm.getelementptr"(%2073, %2074) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2075) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb188(%2076 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2077 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2078 : !llvm.ptr, %2079 : !llvm.struct<(!llvm.ptr)>):
    %2080 = "mini.wrap"(%2076) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2081 = "mini.to_fat_ptr"(%2080) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2082 = "mini.wrap"(%2079) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2083 = builtin.unrealized_conversion_cast %2082 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2084 = "mini.unwrap"(%2081) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2085 = "mini.unwrap"(%2083) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %2086 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterable", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"MapIterable">
    %2087 = "mini.to_fat_ptr"(%2081) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2088 = "mini.unwrap"(%2087) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2089 = builtin.unrealized_conversion_cast %2083 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2090 = "mini.unwrap"(%2089) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %2091 = "mini.unwrap"(%2086) : (!mini.fatptr<"MapIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2092 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2093 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri32", ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %2094 = "mini.parameterizations_array"(%2092, %2093) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2094, %2091, %2088, %2090) {"offset" = 2 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %2095 = "mini.to_fat_ptr"(%2086) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%2095) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntIterable_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb189(%2096 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2097 : !llvm.ptr, %2098 : !llvm.struct<(!llvm.ptr)>):
    %2099 = "mini.invariant"(%2097) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2100 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb190] : () -> ()
  ^bb191:
    %2101 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%2101, %2100) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb192] : () -> ()
  ^bb190:
    %2102 = "llvm.getelementptr"(%2097) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2103 = "llvm.load"(%2102) : (!llvm.ptr) -> !llvm.ptr
    %2104 = "llvm.getelementptr"(%2103) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2105 = "llvm.getelementptr"(%2103) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2106 = "llvm.getelementptr"(%2103) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2107 = "llvm.getelementptr"(%2103) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2108 = "llvm.load"(%2104) : (!llvm.ptr) -> i64
    %2109 = "llvm.load"(%2105) : (!llvm.ptr) -> i64
    %2110 = "llvm.load"(%2106) : (!llvm.ptr) -> !llvm.ptr
    %2111 = "llvm.load"(%2107) : (!llvm.ptr) -> !llvm.ptr
    %2112 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2113 = "llvm.ptrtoint"(%2112) : (!llvm.ptr) -> i64
    %2114 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2115 = "mini.subtype"(%2110, %2109, %2108, %2114, %2113, %2111) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2115) [^bb191, ^bb191] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb192:
    %2116 = "llvm.extractvalue"(%2096) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2117 = "llvm.load"(%2100) : (!llvm.ptr) -> i32
    %2118 = "llvm.getelementptr"(%2116, %2117) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2119 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2120 = "llvm.getelementptr"(%2118, %2119) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2120) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb193(%2121 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2122 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2123 : !llvm.ptr, %2124 : !llvm.struct<(!llvm.ptr)>):
    %2125 = "mini.wrap"(%2121) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2126 = "mini.to_fat_ptr"(%2125) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2127 = "mini.wrap"(%2124) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2128 = builtin.unrealized_conversion_cast %2127 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2129 = "mini.unwrap"(%2126) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2130 = "mini.unwrap"(%2128) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %2131 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterable", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"FilterIterable">
    %2132 = "mini.to_fat_ptr"(%2126) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2133 = "mini.unwrap"(%2132) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2134 = builtin.unrealized_conversion_cast %2128 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2135 = "mini.unwrap"(%2134) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %2136 = "mini.unwrap"(%2131) : (!mini.fatptr<"FilterIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2137 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2138 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri1", ["Ptri1"], ["Ptri32"]]} : () -> !llvm.ptr
    %2139 = "mini.parameterizations_array"(%2137, %2138) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2139, %2136, %2133, %2135) {"offset" = 2 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %2140 = "mini.to_fat_ptr"(%2131) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%2140) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntIterable_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb194(%2141 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2142 : !llvm.ptr, %2143 : !llvm.struct<(!llvm.ptr)>):
    %2144 = "mini.invariant"(%2142) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2145 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb195] : () -> ()
  ^bb196:
    %2146 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%2146, %2145) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb197] : () -> ()
  ^bb195:
    %2147 = "llvm.getelementptr"(%2142) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2148 = "llvm.load"(%2147) : (!llvm.ptr) -> !llvm.ptr
    %2149 = "llvm.getelementptr"(%2148) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2150 = "llvm.getelementptr"(%2148) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2151 = "llvm.getelementptr"(%2148) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2152 = "llvm.getelementptr"(%2148) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2153 = "llvm.load"(%2149) : (!llvm.ptr) -> i64
    %2154 = "llvm.load"(%2150) : (!llvm.ptr) -> i64
    %2155 = "llvm.load"(%2151) : (!llvm.ptr) -> !llvm.ptr
    %2156 = "llvm.load"(%2152) : (!llvm.ptr) -> !llvm.ptr
    %2157 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2158 = "llvm.ptrtoint"(%2157) : (!llvm.ptr) -> i64
    %2159 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2160 = "mini.subtype"(%2155, %2154, %2153, %2159, %2158, %2156) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2160) [^bb196, ^bb196] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb197:
    %2161 = "llvm.extractvalue"(%2141) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2162 = "llvm.load"(%2145) : (!llvm.ptr) -> i32
    %2163 = "llvm.getelementptr"(%2161, %2162) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2164 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2165 = "llvm.getelementptr"(%2163, %2164) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2165) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb198(%2166 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2167 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2168 : !llvm.ptr, %2169 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2170 = "mini.wrap"(%2166) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2171 = "mini.to_fat_ptr"(%2170) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2172 = "mini.wrap"(%2169) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2173 = "mini.to_fat_ptr"(%2172) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2174 = "mini.unwrap"(%2171) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2175 = "mini.unwrap"(%2173) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2176 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ChainIterable", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"ChainIterable">
    %2177 = "mini.to_fat_ptr"(%2171) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2178 = "mini.unwrap"(%2177) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2179 = "mini.to_fat_ptr"(%2173) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2180 = "mini.unwrap"(%2179) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2181 = "mini.unwrap"(%2176) : (!mini.fatptr<"ChainIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2182 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2183 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2184 = "mini.parameterizations_array"(%2182, %2183) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2184, %2181, %2178, %2180) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %2185 = "mini.to_fat_ptr"(%2176) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%2185) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntIterable_chain_otherIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb199(%2186 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2187 : !llvm.ptr, %2188 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2189 = "mini.invariant"(%2187) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2190 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb200] : () -> ()
  ^bb201:
    %2191 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%2191, %2190) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb202] : () -> ()
  ^bb200:
    %2192 = "llvm.getelementptr"(%2187) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2193 = "llvm.load"(%2192) : (!llvm.ptr) -> !llvm.ptr
    %2194 = "llvm.getelementptr"(%2193) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2195 = "llvm.getelementptr"(%2193) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2196 = "llvm.getelementptr"(%2193) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2197 = "llvm.getelementptr"(%2193) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2198 = "llvm.load"(%2194) : (!llvm.ptr) -> i64
    %2199 = "llvm.load"(%2195) : (!llvm.ptr) -> i64
    %2200 = "llvm.load"(%2196) : (!llvm.ptr) -> !llvm.ptr
    %2201 = "llvm.load"(%2197) : (!llvm.ptr) -> !llvm.ptr
    %2202 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2203 = "llvm.ptrtoint"(%2202) : (!llvm.ptr) -> i64
    %2204 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2205 = "mini.subtype"(%2200, %2199, %2198, %2204, %2203, %2201) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2205) [^bb201, ^bb201] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb202:
    %2206 = "llvm.extractvalue"(%2186) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2207 = "llvm.load"(%2190) : (!llvm.ptr) -> i32
    %2208 = "llvm.getelementptr"(%2206, %2207) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2209 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2210 = "llvm.getelementptr"(%2208, %2209) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2210) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb203(%2211 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2212 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2213 : !llvm.ptr, %2214 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2215 = "mini.wrap"(%2211) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2216 = "mini.to_fat_ptr"(%2215) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2217 = "mini.wrap"(%2214) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2218 = "mini.to_fat_ptr"(%2217) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2219 = "mini.unwrap"(%2216) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2220 = "mini.unwrap"(%2218) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2221 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "InterleaveIterable", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"InterleaveIterable">
    %2222 = "mini.to_fat_ptr"(%2216) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2223 = "mini.unwrap"(%2222) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2224 = "mini.to_fat_ptr"(%2218) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2225 = "mini.unwrap"(%2224) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2226 = "mini.unwrap"(%2221) : (!mini.fatptr<"InterleaveIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2227 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2228 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2229 = "mini.parameterizations_array"(%2227, %2228) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2229, %2226, %2223, %2225) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %2230 = "mini.to_fat_ptr"(%2221) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%2230) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntIterable_interleave_otherIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb204(%2231 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2232 : !llvm.ptr, %2233 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2234 = "mini.invariant"(%2232) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2235 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb205] : () -> ()
  ^bb206:
    %2236 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%2236, %2235) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb207] : () -> ()
  ^bb205:
    %2237 = "llvm.getelementptr"(%2232) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2238 = "llvm.load"(%2237) : (!llvm.ptr) -> !llvm.ptr
    %2239 = "llvm.getelementptr"(%2238) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2240 = "llvm.getelementptr"(%2238) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2241 = "llvm.getelementptr"(%2238) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2242 = "llvm.getelementptr"(%2238) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2243 = "llvm.load"(%2239) : (!llvm.ptr) -> i64
    %2244 = "llvm.load"(%2240) : (!llvm.ptr) -> i64
    %2245 = "llvm.load"(%2241) : (!llvm.ptr) -> !llvm.ptr
    %2246 = "llvm.load"(%2242) : (!llvm.ptr) -> !llvm.ptr
    %2247 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2248 = "llvm.ptrtoint"(%2247) : (!llvm.ptr) -> i64
    %2249 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2250 = "mini.subtype"(%2245, %2244, %2243, %2249, %2248, %2246) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2250) [^bb206, ^bb206] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb207:
    %2251 = "llvm.extractvalue"(%2231) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2252 = "llvm.load"(%2235) : (!llvm.ptr) -> i32
    %2253 = "llvm.getelementptr"(%2251, %2252) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2254 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2255 = "llvm.getelementptr"(%2253, %2254) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2255) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb208(%2256 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2257 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2258 : !llvm.ptr, %2259 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2260 = "mini.wrap"(%2256) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2261 = "mini.to_fat_ptr"(%2260) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2262 = "mini.wrap"(%2259) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2263 = "mini.to_fat_ptr"(%2262) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2264 = "mini.unwrap"(%2261) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2265 = "mini.unwrap"(%2263) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2266 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterable", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"ZipIterable">
    %2267 = "mini.to_fat_ptr"(%2261) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2268 = "mini.unwrap"(%2267) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2269 = "mini.to_fat_ptr"(%2263) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2270 = "mini.unwrap"(%2269) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2271 = "mini.unwrap"(%2266) : (!mini.fatptr<"ZipIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2272 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2273 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2274 = "mini.parameterizations_array"(%2272, %2273) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2274, %2271, %2268, %2270) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %2275 = "mini.to_fat_ptr"(%2266) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable", "invariant"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"ZipIterable">
    "mini.return"(%2275) : (!mini.fatptr<"ZipIterable">) -> ()
  }) {"func_name" = "IntIterable_zip_otherIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb209(%2276 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2277 : !llvm.ptr, %2278 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2279 = "mini.invariant"(%2277) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2280 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb210] : () -> ()
  ^bb211:
    %2281 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%2281, %2280) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb212] : () -> ()
  ^bb210:
    %2282 = "llvm.getelementptr"(%2277) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2283 = "llvm.load"(%2282) : (!llvm.ptr) -> !llvm.ptr
    %2284 = "llvm.getelementptr"(%2283) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2285 = "llvm.getelementptr"(%2283) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2286 = "llvm.getelementptr"(%2283) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2287 = "llvm.getelementptr"(%2283) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2288 = "llvm.load"(%2284) : (!llvm.ptr) -> i64
    %2289 = "llvm.load"(%2285) : (!llvm.ptr) -> i64
    %2290 = "llvm.load"(%2286) : (!llvm.ptr) -> !llvm.ptr
    %2291 = "llvm.load"(%2287) : (!llvm.ptr) -> !llvm.ptr
    %2292 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2293 = "llvm.ptrtoint"(%2292) : (!llvm.ptr) -> i64
    %2294 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2295 = "mini.subtype"(%2290, %2289, %2288, %2294, %2293, %2291) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2295) [^bb211, ^bb211] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb212:
    %2296 = "llvm.extractvalue"(%2276) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2297 = "llvm.load"(%2280) : (!llvm.ptr) -> i32
    %2298 = "llvm.getelementptr"(%2296, %2297) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2299 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2300 = "llvm.getelementptr"(%2298, %2299) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2300) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb213(%2301 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2302 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2303 : !llvm.ptr, %2304 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2305 = "mini.wrap"(%2301) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2306 = "mini.to_fat_ptr"(%2305) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2307 = "mini.wrap"(%2304) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2308 = "mini.to_fat_ptr"(%2307) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2309 = "mini.unwrap"(%2306) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2310 = "mini.unwrap"(%2308) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2311 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ProductIterable", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"ProductIterable">
    %2312 = "mini.to_fat_ptr"(%2306) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2313 = "mini.unwrap"(%2312) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2314 = "mini.to_fat_ptr"(%2308) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2315 = "mini.unwrap"(%2314) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2316 = "mini.unwrap"(%2311) : (!mini.fatptr<"ProductIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2317 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2318 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %2319 = "mini.parameterizations_array"(%2317, %2318) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2319, %2316, %2313, %2315) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %2320 = "mini.to_fat_ptr"(%2311) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable", "invariant"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"ProductIterable">
    "mini.return"(%2320) : (!mini.fatptr<"ProductIterable">) -> ()
  }) {"func_name" = "IntIterable_product_otherIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb214(%2321 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2322 : !llvm.ptr, %2323 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2324 = "mini.invariant"(%2322) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2325 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb215] : () -> ()
  ^bb216:
    %2326 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%2326, %2325) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb217] : () -> ()
  ^bb215:
    %2327 = "llvm.getelementptr"(%2322) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2328 = "llvm.load"(%2327) : (!llvm.ptr) -> !llvm.ptr
    %2329 = "llvm.getelementptr"(%2328) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2330 = "llvm.getelementptr"(%2328) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2331 = "llvm.getelementptr"(%2328) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2332 = "llvm.getelementptr"(%2328) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2333 = "llvm.load"(%2329) : (!llvm.ptr) -> i64
    %2334 = "llvm.load"(%2330) : (!llvm.ptr) -> i64
    %2335 = "llvm.load"(%2331) : (!llvm.ptr) -> !llvm.ptr
    %2336 = "llvm.load"(%2332) : (!llvm.ptr) -> !llvm.ptr
    %2337 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2338 = "llvm.ptrtoint"(%2337) : (!llvm.ptr) -> i64
    %2339 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2340 = "mini.subtype"(%2335, %2334, %2333, %2339, %2338, %2336) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2340) [^bb216, ^bb216] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb217:
    %2341 = "llvm.extractvalue"(%2321) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2342 = "llvm.load"(%2325) : (!llvm.ptr) -> i32
    %2343 = "llvm.getelementptr"(%2341, %2342) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2344 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2345 = "llvm.getelementptr"(%2343, %2344) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2345) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb218(%2346 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2347 : !llvm.ptr):
    %2348 = "mini.invariant"(%2347) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2349 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb219] : () -> ()
  ^bb219:
    %2350 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%2350, %2349) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb220] : () -> ()
  ^bb220:
    %2351 = "llvm.extractvalue"(%2346) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2352 = "llvm.load"(%2349) : (!llvm.ptr) -> i32
    %2353 = "llvm.getelementptr"(%2351, %2352) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<24 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2354 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2355 = "llvm.getelementptr"(%2353, %2354) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2355) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "offset" = 0 : i32, "meth_name" = "MapIterable_field_iterable"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "offset" = 1 : i32, "meth_name" = "MapIterable_field_f"} : () -> ()
  "mini.func"() ({
  ^bb221(%2356 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2357 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2358 : !llvm.ptr, %2359 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2360 : !llvm.struct<(!llvm.ptr)>):
    %2361 = "mini.wrap"(%2356) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterable">
    %2362 = "mini.to_fat_ptr"(%2361) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable", "invariant"} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"MapIterable">
    %2363 = "mini.wrap"(%2359) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2364 = "mini.to_fat_ptr"(%2363) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2365 = "mini.field_access"(%2362) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"IntIterable">
    "mini.castassign"(%2365, %2364) ({
      %2366 = "mini.to_fat_ptr"(%2364) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "should_offset"} : (!mini.fatptr<"IntIterable">, !mini.fatptr<"IntIterable">) -> ()
    %2367 = "mini.wrap"(%2360) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2368 = builtin.unrealized_conversion_cast %2367 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2369 = "mini.field_access"(%2362) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"MapIterable">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    "mini.castassign"(%2369, %2368) ({
      %2370 = builtin.unrealized_conversion_cast %2368 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ", "should_offset"} : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>, !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> ()
  }) {"func_name" = "MapIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb222(%2371 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2372 : !llvm.ptr, %2373 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2374 : !llvm.struct<(!llvm.ptr)>):
    %2375 = "mini.invariant"(%2372) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2376 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb223] : () -> ()
  ^bb224:
    %2377 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%2377, %2376) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb225] : () -> ()
  ^bb226:
    %2378 = "llvm.getelementptr"(%2372) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2379 = "llvm.load"(%2378) : (!llvm.ptr) -> !llvm.ptr
    %2380 = "llvm.getelementptr"(%2379) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2381 = "llvm.getelementptr"(%2379) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2382 = "llvm.getelementptr"(%2379) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2383 = "llvm.getelementptr"(%2379) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2384 = "llvm.load"(%2380) : (!llvm.ptr) -> i64
    %2385 = "llvm.load"(%2381) : (!llvm.ptr) -> i64
    %2386 = "llvm.load"(%2382) : (!llvm.ptr) -> !llvm.ptr
    %2387 = "llvm.load"(%2383) : (!llvm.ptr) -> !llvm.ptr
    %2388 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2389 = "llvm.ptrtoint"(%2388) : (!llvm.ptr) -> i64
    %2390 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2391 = "mini.subtype"(%2386, %2385, %2384, %2390, %2389, %2387) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2391) [^bb224, ^bb224] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb223:
    %2392 = "llvm.getelementptr"(%2372) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2393 = "llvm.load"(%2392) : (!llvm.ptr) -> !llvm.ptr
    %2394 = "llvm.getelementptr"(%2393) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2395 = "llvm.getelementptr"(%2393) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2396 = "llvm.getelementptr"(%2393) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2397 = "llvm.getelementptr"(%2393) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2398 = "llvm.load"(%2394) : (!llvm.ptr) -> i64
    %2399 = "llvm.load"(%2395) : (!llvm.ptr) -> i64
    %2400 = "llvm.load"(%2396) : (!llvm.ptr) -> !llvm.ptr
    %2401 = "llvm.load"(%2397) : (!llvm.ptr) -> !llvm.ptr
    %2402 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2403 = "llvm.ptrtoint"(%2402) : (!llvm.ptr) -> i64
    %2404 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2405 = "mini.subtype"(%2400, %2399, %2398, %2404, %2403, %2401) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2405) [^bb226, ^bb226] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb225:
    %2406 = "llvm.extractvalue"(%2371) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2407 = "llvm.load"(%2376) : (!llvm.ptr) -> i32
    %2408 = "llvm.getelementptr"(%2406, %2407) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2409 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2410 = "llvm.getelementptr"(%2408, %2409) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2410) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb227(%2411 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2412 : !llvm.ptr, %2413 : !llvm.struct<(!llvm.ptr)>):
    %2414 = "mini.invariant"(%2412) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2415 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb228] : () -> ()
  ^bb229:
    %2416 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%2416, %2415) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb230] : () -> ()
  ^bb228:
    %2417 = "llvm.getelementptr"(%2412) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2418 = "llvm.load"(%2417) : (!llvm.ptr) -> !llvm.ptr
    %2419 = "llvm.getelementptr"(%2418) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2420 = "llvm.getelementptr"(%2418) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2421 = "llvm.getelementptr"(%2418) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2422 = "llvm.getelementptr"(%2418) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2423 = "llvm.load"(%2419) : (!llvm.ptr) -> i64
    %2424 = "llvm.load"(%2420) : (!llvm.ptr) -> i64
    %2425 = "llvm.load"(%2421) : (!llvm.ptr) -> !llvm.ptr
    %2426 = "llvm.load"(%2422) : (!llvm.ptr) -> !llvm.ptr
    %2427 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2428 = "llvm.ptrtoint"(%2427) : (!llvm.ptr) -> i64
    %2429 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2430 = "mini.subtype"(%2425, %2424, %2423, %2429, %2428, %2426) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2430) [^bb229, ^bb229] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb230:
    %2431 = "llvm.extractvalue"(%2411) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2432 = "llvm.load"(%2415) : (!llvm.ptr) -> i32
    %2433 = "llvm.getelementptr"(%2431, %2432) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2434 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2435 = "llvm.getelementptr"(%2433, %2434) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2435) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb231(%2436 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2437 : !llvm.ptr, %2438 : i32, %2439 : !llvm.struct<(!llvm.ptr)>):
    %2440 = "mini.invariant"(%2437) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2441 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb232] : () -> ()
  ^bb233:
    %2442 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%2442, %2441) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb234] : () -> ()
  ^bb235:
    %2443 = "llvm.getelementptr"(%2437) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2444 = "llvm.load"(%2443) : (!llvm.ptr) -> !llvm.ptr
    %2445 = "llvm.getelementptr"(%2444) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2446 = "llvm.getelementptr"(%2444) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2447 = "llvm.getelementptr"(%2444) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2448 = "llvm.getelementptr"(%2444) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2449 = "llvm.load"(%2445) : (!llvm.ptr) -> i64
    %2450 = "llvm.load"(%2446) : (!llvm.ptr) -> i64
    %2451 = "llvm.load"(%2447) : (!llvm.ptr) -> !llvm.ptr
    %2452 = "llvm.load"(%2448) : (!llvm.ptr) -> !llvm.ptr
    %2453 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2454 = "llvm.ptrtoint"(%2453) : (!llvm.ptr) -> i64
    %2455 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2456 = "mini.subtype"(%2451, %2450, %2449, %2455, %2454, %2452) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2456) [^bb233, ^bb233] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb232:
    %2457 = "llvm.getelementptr"(%2437) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2458 = "llvm.load"(%2457) : (!llvm.ptr) -> !llvm.ptr
    %2459 = "llvm.getelementptr"(%2458) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2460 = "llvm.getelementptr"(%2458) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2461 = "llvm.getelementptr"(%2458) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2462 = "llvm.getelementptr"(%2458) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2463 = "llvm.load"(%2459) : (!llvm.ptr) -> i64
    %2464 = "llvm.load"(%2460) : (!llvm.ptr) -> i64
    %2465 = "llvm.load"(%2461) : (!llvm.ptr) -> !llvm.ptr
    %2466 = "llvm.load"(%2462) : (!llvm.ptr) -> !llvm.ptr
    %2467 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %2468 = "llvm.ptrtoint"(%2467) : (!llvm.ptr) -> i64
    %2469 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %2470 = "mini.subtype"(%2465, %2464, %2463, %2469, %2468, %2466) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2470) [^bb235, ^bb235] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb234:
    %2471 = "llvm.extractvalue"(%2436) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2472 = "llvm.load"(%2441) : (!llvm.ptr) -> i32
    %2473 = "llvm.getelementptr"(%2471, %2472) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2474 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2475 = "llvm.getelementptr"(%2473, %2474) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2475) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb236(%2476 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2477 : !llvm.ptr, %2478 : !llvm.struct<(!llvm.ptr)>):
    %2479 = "mini.invariant"(%2477) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2480 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb237] : () -> ()
  ^bb238:
    %2481 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%2481, %2480) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb239] : () -> ()
  ^bb237:
    %2482 = "llvm.getelementptr"(%2477) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2483 = "llvm.load"(%2482) : (!llvm.ptr) -> !llvm.ptr
    %2484 = "llvm.getelementptr"(%2483) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2485 = "llvm.getelementptr"(%2483) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2486 = "llvm.getelementptr"(%2483) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2487 = "llvm.getelementptr"(%2483) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2488 = "llvm.load"(%2484) : (!llvm.ptr) -> i64
    %2489 = "llvm.load"(%2485) : (!llvm.ptr) -> i64
    %2490 = "llvm.load"(%2486) : (!llvm.ptr) -> !llvm.ptr
    %2491 = "llvm.load"(%2487) : (!llvm.ptr) -> !llvm.ptr
    %2492 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2493 = "llvm.ptrtoint"(%2492) : (!llvm.ptr) -> i64
    %2494 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2495 = "mini.subtype"(%2490, %2489, %2488, %2494, %2493, %2491) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2495) [^bb238, ^bb238] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb239:
    %2496 = "llvm.extractvalue"(%2476) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2497 = "llvm.load"(%2480) : (!llvm.ptr) -> i32
    %2498 = "llvm.getelementptr"(%2496, %2497) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2499 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2500 = "llvm.getelementptr"(%2498, %2499) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2500) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb240(%2501 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2502 : !llvm.ptr, %2503 : !llvm.struct<(!llvm.ptr)>):
    %2504 = "mini.invariant"(%2502) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2505 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb241] : () -> ()
  ^bb242:
    %2506 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%2506, %2505) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb243] : () -> ()
  ^bb241:
    %2507 = "llvm.getelementptr"(%2502) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2508 = "llvm.load"(%2507) : (!llvm.ptr) -> !llvm.ptr
    %2509 = "llvm.getelementptr"(%2508) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2510 = "llvm.getelementptr"(%2508) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2511 = "llvm.getelementptr"(%2508) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2512 = "llvm.getelementptr"(%2508) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2513 = "llvm.load"(%2509) : (!llvm.ptr) -> i64
    %2514 = "llvm.load"(%2510) : (!llvm.ptr) -> i64
    %2515 = "llvm.load"(%2511) : (!llvm.ptr) -> !llvm.ptr
    %2516 = "llvm.load"(%2512) : (!llvm.ptr) -> !llvm.ptr
    %2517 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2518 = "llvm.ptrtoint"(%2517) : (!llvm.ptr) -> i64
    %2519 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2520 = "mini.subtype"(%2515, %2514, %2513, %2519, %2518, %2516) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2520) [^bb242, ^bb242] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb243:
    %2521 = "llvm.extractvalue"(%2501) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2522 = "llvm.load"(%2505) : (!llvm.ptr) -> i32
    %2523 = "llvm.getelementptr"(%2521, %2522) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2524 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2525 = "llvm.getelementptr"(%2523, %2524) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2525) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb244(%2526 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2527 : !llvm.ptr, %2528 : !llvm.struct<(!llvm.ptr)>):
    %2529 = "mini.invariant"(%2527) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2530 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb245] : () -> ()
  ^bb246:
    %2531 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%2531, %2530) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb247] : () -> ()
  ^bb245:
    %2532 = "llvm.getelementptr"(%2527) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2533 = "llvm.load"(%2532) : (!llvm.ptr) -> !llvm.ptr
    %2534 = "llvm.getelementptr"(%2533) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2535 = "llvm.getelementptr"(%2533) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2536 = "llvm.getelementptr"(%2533) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2537 = "llvm.getelementptr"(%2533) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2538 = "llvm.load"(%2534) : (!llvm.ptr) -> i64
    %2539 = "llvm.load"(%2535) : (!llvm.ptr) -> i64
    %2540 = "llvm.load"(%2536) : (!llvm.ptr) -> !llvm.ptr
    %2541 = "llvm.load"(%2537) : (!llvm.ptr) -> !llvm.ptr
    %2542 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2543 = "llvm.ptrtoint"(%2542) : (!llvm.ptr) -> i64
    %2544 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2545 = "mini.subtype"(%2540, %2539, %2538, %2544, %2543, %2541) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2545) [^bb246, ^bb246] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb247:
    %2546 = "llvm.extractvalue"(%2526) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2547 = "llvm.load"(%2530) : (!llvm.ptr) -> i32
    %2548 = "llvm.getelementptr"(%2546, %2547) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2549 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2550 = "llvm.getelementptr"(%2548, %2549) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2550) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb248(%2551 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2552 : !llvm.ptr, %2553 : !llvm.struct<(!llvm.ptr)>):
    %2554 = "mini.invariant"(%2552) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2555 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb249] : () -> ()
  ^bb250:
    %2556 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%2556, %2555) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb251] : () -> ()
  ^bb249:
    %2557 = "llvm.getelementptr"(%2552) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2558 = "llvm.load"(%2557) : (!llvm.ptr) -> !llvm.ptr
    %2559 = "llvm.getelementptr"(%2558) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2560 = "llvm.getelementptr"(%2558) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2561 = "llvm.getelementptr"(%2558) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2562 = "llvm.getelementptr"(%2558) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2563 = "llvm.load"(%2559) : (!llvm.ptr) -> i64
    %2564 = "llvm.load"(%2560) : (!llvm.ptr) -> i64
    %2565 = "llvm.load"(%2561) : (!llvm.ptr) -> !llvm.ptr
    %2566 = "llvm.load"(%2562) : (!llvm.ptr) -> !llvm.ptr
    %2567 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2568 = "llvm.ptrtoint"(%2567) : (!llvm.ptr) -> i64
    %2569 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2570 = "mini.subtype"(%2565, %2564, %2563, %2569, %2568, %2566) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2570) [^bb250, ^bb250] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb251:
    %2571 = "llvm.extractvalue"(%2551) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2572 = "llvm.load"(%2555) : (!llvm.ptr) -> i32
    %2573 = "llvm.getelementptr"(%2571, %2572) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2574 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2575 = "llvm.getelementptr"(%2573, %2574) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2575) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb252(%2576 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2577 : !llvm.ptr, %2578 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2579 = "mini.invariant"(%2577) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2580 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb253] : () -> ()
  ^bb254:
    %2581 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%2581, %2580) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb255] : () -> ()
  ^bb253:
    %2582 = "llvm.getelementptr"(%2577) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2583 = "llvm.load"(%2582) : (!llvm.ptr) -> !llvm.ptr
    %2584 = "llvm.getelementptr"(%2583) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2585 = "llvm.getelementptr"(%2583) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2586 = "llvm.getelementptr"(%2583) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2587 = "llvm.getelementptr"(%2583) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2588 = "llvm.load"(%2584) : (!llvm.ptr) -> i64
    %2589 = "llvm.load"(%2585) : (!llvm.ptr) -> i64
    %2590 = "llvm.load"(%2586) : (!llvm.ptr) -> !llvm.ptr
    %2591 = "llvm.load"(%2587) : (!llvm.ptr) -> !llvm.ptr
    %2592 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2593 = "llvm.ptrtoint"(%2592) : (!llvm.ptr) -> i64
    %2594 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2595 = "mini.subtype"(%2590, %2589, %2588, %2594, %2593, %2591) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2595) [^bb254, ^bb254] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb255:
    %2596 = "llvm.extractvalue"(%2576) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2597 = "llvm.load"(%2580) : (!llvm.ptr) -> i32
    %2598 = "llvm.getelementptr"(%2596, %2597) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2599 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2600 = "llvm.getelementptr"(%2598, %2599) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2600) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb256(%2601 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2602 : !llvm.ptr, %2603 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2604 = "mini.invariant"(%2602) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2605 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb257] : () -> ()
  ^bb258:
    %2606 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%2606, %2605) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb259] : () -> ()
  ^bb257:
    %2607 = "llvm.getelementptr"(%2602) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2608 = "llvm.load"(%2607) : (!llvm.ptr) -> !llvm.ptr
    %2609 = "llvm.getelementptr"(%2608) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2610 = "llvm.getelementptr"(%2608) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2611 = "llvm.getelementptr"(%2608) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2612 = "llvm.getelementptr"(%2608) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2613 = "llvm.load"(%2609) : (!llvm.ptr) -> i64
    %2614 = "llvm.load"(%2610) : (!llvm.ptr) -> i64
    %2615 = "llvm.load"(%2611) : (!llvm.ptr) -> !llvm.ptr
    %2616 = "llvm.load"(%2612) : (!llvm.ptr) -> !llvm.ptr
    %2617 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2618 = "llvm.ptrtoint"(%2617) : (!llvm.ptr) -> i64
    %2619 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2620 = "mini.subtype"(%2615, %2614, %2613, %2619, %2618, %2616) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2620) [^bb258, ^bb258] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb259:
    %2621 = "llvm.extractvalue"(%2601) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2622 = "llvm.load"(%2605) : (!llvm.ptr) -> i32
    %2623 = "llvm.getelementptr"(%2621, %2622) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2624 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2625 = "llvm.getelementptr"(%2623, %2624) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2625) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb260(%2626 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2627 : !llvm.ptr, %2628 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2629 = "mini.invariant"(%2627) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2630 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb261] : () -> ()
  ^bb262:
    %2631 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%2631, %2630) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb263] : () -> ()
  ^bb261:
    %2632 = "llvm.getelementptr"(%2627) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2633 = "llvm.load"(%2632) : (!llvm.ptr) -> !llvm.ptr
    %2634 = "llvm.getelementptr"(%2633) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2635 = "llvm.getelementptr"(%2633) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2636 = "llvm.getelementptr"(%2633) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2637 = "llvm.getelementptr"(%2633) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2638 = "llvm.load"(%2634) : (!llvm.ptr) -> i64
    %2639 = "llvm.load"(%2635) : (!llvm.ptr) -> i64
    %2640 = "llvm.load"(%2636) : (!llvm.ptr) -> !llvm.ptr
    %2641 = "llvm.load"(%2637) : (!llvm.ptr) -> !llvm.ptr
    %2642 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2643 = "llvm.ptrtoint"(%2642) : (!llvm.ptr) -> i64
    %2644 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2645 = "mini.subtype"(%2640, %2639, %2638, %2644, %2643, %2641) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2645) [^bb262, ^bb262] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb263:
    %2646 = "llvm.extractvalue"(%2626) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2647 = "llvm.load"(%2630) : (!llvm.ptr) -> i32
    %2648 = "llvm.getelementptr"(%2646, %2647) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2649 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2650 = "llvm.getelementptr"(%2648, %2649) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2650) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb264(%2651 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2652 : !llvm.ptr, %2653 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2654 = "mini.invariant"(%2652) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2655 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb265] : () -> ()
  ^bb266:
    %2656 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%2656, %2655) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb267] : () -> ()
  ^bb265:
    %2657 = "llvm.getelementptr"(%2652) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2658 = "llvm.load"(%2657) : (!llvm.ptr) -> !llvm.ptr
    %2659 = "llvm.getelementptr"(%2658) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2660 = "llvm.getelementptr"(%2658) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2661 = "llvm.getelementptr"(%2658) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2662 = "llvm.getelementptr"(%2658) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2663 = "llvm.load"(%2659) : (!llvm.ptr) -> i64
    %2664 = "llvm.load"(%2660) : (!llvm.ptr) -> i64
    %2665 = "llvm.load"(%2661) : (!llvm.ptr) -> !llvm.ptr
    %2666 = "llvm.load"(%2662) : (!llvm.ptr) -> !llvm.ptr
    %2667 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2668 = "llvm.ptrtoint"(%2667) : (!llvm.ptr) -> i64
    %2669 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2670 = "mini.subtype"(%2665, %2664, %2663, %2669, %2668, %2666) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2670) [^bb266, ^bb266] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb267:
    %2671 = "llvm.extractvalue"(%2651) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2672 = "llvm.load"(%2655) : (!llvm.ptr) -> i32
    %2673 = "llvm.getelementptr"(%2671, %2672) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2674 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2675 = "llvm.getelementptr"(%2673, %2674) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2675) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb268(%2676 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2677 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2678 : !llvm.ptr):
    %2679 = "mini.wrap"(%2676) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterable">
    %2680 = "mini.to_fat_ptr"(%2679) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable", "invariant"} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"MapIterable">
    %2681 = "mini.field_access"(%2680) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"IntIterable">
    %2682 = "mini.unwrap"(%2681) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2683 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2684 = "mini.method_call"(%2683, %2682) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2685 = "mini.to_fat_ptr"(%2684) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2686 = "mini.field_access"(%2680) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"MapIterable">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2687 = "mini.unwrap"(%2685) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2688 = "mini.unwrap"(%2686) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %2689 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterator", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"MapIterator">
    %2690 = "mini.field_access"(%2680) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"MapIterable">) -> !mini.fatptr<"IntIterable">
    %2691 = "mini.unwrap"(%2690) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2692 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2693 = "mini.method_call"(%2692, %2691) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %2694 = "mini.to_fat_ptr"(%2693) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %2695 = "mini.field_access"(%2680) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"MapIterable">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2696 = "mini.to_fat_ptr"(%2694) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2697 = "mini.unwrap"(%2696) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2698 = builtin.unrealized_conversion_cast %2695 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2699 = "mini.unwrap"(%2698) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %2700 = "mini.unwrap"(%2689) : (!mini.fatptr<"MapIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2701 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %2702 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri32", ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %2703 = "mini.parameterizations_array"(%2701, %2702) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2703, %2700, %2697, %2699) {"offset" = 2 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %2704 = "mini.to_fat_ptr"(%2689) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"MapIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%2704) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "MapIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb269(%2705 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2706 : !llvm.ptr):
    %2707 = "mini.invariant"(%2706) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2708 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb270] : () -> ()
  ^bb270:
    %2709 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%2709, %2708) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb271] : () -> ()
  ^bb271:
    %2710 = "llvm.extractvalue"(%2705) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2711 = "llvm.load"(%2708) : (!llvm.ptr) -> i32
    %2712 = "llvm.getelementptr"(%2710, %2711) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2713 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2714 = "llvm.getelementptr"(%2712, %2713) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2714) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "offset" = 0 : i32, "meth_name" = "MapIterator_field_iterator"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "offset" = 1 : i32, "meth_name" = "MapIterator_field_f"} : () -> ()
  "mini.func"() ({
  ^bb272(%2715 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2716 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2717 : !llvm.ptr, %2718 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2719 : !llvm.struct<(!llvm.ptr)>):
    %2720 = "mini.wrap"(%2715) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterator">
    %2721 = "mini.to_fat_ptr"(%2720) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator", "to_typ_name" = "MapIterator", "invariant"} : (!mini.fatptr<"MapIterator">) -> !mini.fatptr<"MapIterator">
    %2722 = "mini.wrap"(%2718) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %2723 = "mini.to_fat_ptr"(%2722) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %2724 = "mini.field_access"(%2721) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"MapIterator">) -> !mini.fatptr<"IntIterator">
    "mini.castassign"(%2724, %2723) ({
      %2725 = "mini.to_fat_ptr"(%2723) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "should_offset"} : (!mini.fatptr<"IntIterator">, !mini.fatptr<"IntIterator">) -> ()
    %2726 = "mini.wrap"(%2719) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2727 = builtin.unrealized_conversion_cast %2726 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %2728 = "mini.field_access"(%2721) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"MapIterator">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    "mini.castassign"(%2728, %2727) ({
      %2729 = builtin.unrealized_conversion_cast %2727 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ", "should_offset"} : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>, !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> ()
  }) {"func_name" = "MapIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb273(%2730 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2731 : !llvm.ptr, %2732 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2733 : !llvm.struct<(!llvm.ptr)>):
    %2734 = "mini.invariant"(%2731) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2735 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb274] : () -> ()
  ^bb275:
    %2736 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%2736, %2735) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb276] : () -> ()
  ^bb277:
    %2737 = "llvm.getelementptr"(%2731) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2738 = "llvm.load"(%2737) : (!llvm.ptr) -> !llvm.ptr
    %2739 = "llvm.getelementptr"(%2738) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2740 = "llvm.getelementptr"(%2738) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2741 = "llvm.getelementptr"(%2738) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2742 = "llvm.getelementptr"(%2738) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2743 = "llvm.load"(%2739) : (!llvm.ptr) -> i64
    %2744 = "llvm.load"(%2740) : (!llvm.ptr) -> i64
    %2745 = "llvm.load"(%2741) : (!llvm.ptr) -> !llvm.ptr
    %2746 = "llvm.load"(%2742) : (!llvm.ptr) -> !llvm.ptr
    %2747 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2748 = "llvm.ptrtoint"(%2747) : (!llvm.ptr) -> i64
    %2749 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2750 = "mini.subtype"(%2745, %2744, %2743, %2749, %2748, %2746) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2750) [^bb275, ^bb275] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb274:
    %2751 = "llvm.getelementptr"(%2731) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2752 = "llvm.load"(%2751) : (!llvm.ptr) -> !llvm.ptr
    %2753 = "llvm.getelementptr"(%2752) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2754 = "llvm.getelementptr"(%2752) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2755 = "llvm.getelementptr"(%2752) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2756 = "llvm.getelementptr"(%2752) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2757 = "llvm.load"(%2753) : (!llvm.ptr) -> i64
    %2758 = "llvm.load"(%2754) : (!llvm.ptr) -> i64
    %2759 = "llvm.load"(%2755) : (!llvm.ptr) -> !llvm.ptr
    %2760 = "llvm.load"(%2756) : (!llvm.ptr) -> !llvm.ptr
    %2761 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %2762 = "llvm.ptrtoint"(%2761) : (!llvm.ptr) -> i64
    %2763 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %2764 = "mini.subtype"(%2759, %2758, %2757, %2763, %2762, %2760) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2764) [^bb277, ^bb277] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb276:
    %2765 = "llvm.extractvalue"(%2730) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2766 = "llvm.load"(%2735) : (!llvm.ptr) -> i32
    %2767 = "llvm.getelementptr"(%2765, %2766) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2768 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2769 = "llvm.getelementptr"(%2767, %2768) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2769) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb278(%2770 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2771 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2772 : !llvm.ptr):
    %2773 = "mini.wrap"(%2770) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterator">
    %2774 = "mini.to_fat_ptr"(%2773) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator", "to_typ_name" = "MapIterator", "invariant"} : (!mini.fatptr<"MapIterator">) -> !mini.fatptr<"MapIterator">
    %2775 = "mini.field_access"(%2774) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"MapIterator">) -> !mini.fatptr<"IntIterator">
    %2776 = "mini.unwrap"(%2775) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2777 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2778 = "mini.method_call"(%2777, %2776) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %2779 = builtin.unrealized_conversion_cast %2778 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %2780 = "mini.checkflag"(%2779) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
    %2781 = "mini.unwrap"(%2780) : (i1) -> i1
    %2782 = builtin.unrealized_conversion_cast %2779 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.if"(%2781) ({
      %2783 = "mini.narrow"(%2782) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %2784 = builtin.unrealized_conversion_cast %2783 : !mini.ptr<i32> to !mini.ptr<i32>
      %2785 = "mini.unwrap"(%2784) : (!mini.ptr<i32>) -> i32
      %2786 = "mini.field_access"(%2774) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"MapIterator">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
      %2787 = "mini.unwrap"(%2786) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.ptr
      %2788 = "mini.fptr_call"(%2787, %2785) {"ret_type" = i32} : (!llvm.ptr, i32) -> !mini.ptr<i32>
      %2789 = "mini.unionize"(%2788) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%2789) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
      "mini.castassign"(%2782, %2783) ({
        %2790 = "mini.unionize"(%2783) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %2791 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %2792 = "mini.unionize"(%2791) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%2792) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "MapIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb279(%2793 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2794 : !llvm.ptr):
    %2795 = "mini.invariant"(%2794) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2796 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb280] : () -> ()
  ^bb280:
    %2797 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%2797, %2796) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb281] : () -> ()
  ^bb281:
    %2798 = "llvm.extractvalue"(%2793) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2799 = "llvm.load"(%2796) : (!llvm.ptr) -> i32
    %2800 = "llvm.getelementptr"(%2798, %2799) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2801 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2802 = "llvm.getelementptr"(%2800, %2801) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2802) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "offset" = 0 : i32, "meth_name" = "FilterIterable_field_iterable"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "offset" = 1 : i32, "meth_name" = "FilterIterable_field_f"} : () -> ()
  "mini.func"() ({
  ^bb282(%2803 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2804 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2805 : !llvm.ptr, %2806 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2807 : !llvm.struct<(!llvm.ptr)>):
    %2808 = "mini.wrap"(%2803) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterable">
    %2809 = "mini.to_fat_ptr"(%2808) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable", "to_typ_name" = "FilterIterable", "invariant"} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"FilterIterable">
    %2810 = "mini.wrap"(%2806) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %2811 = "mini.to_fat_ptr"(%2810) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %2812 = "mini.field_access"(%2809) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"IntIterable">
    "mini.castassign"(%2812, %2811) ({
      %2813 = "mini.to_fat_ptr"(%2811) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "should_offset"} : (!mini.fatptr<"IntIterable">, !mini.fatptr<"IntIterable">) -> ()
    %2814 = "mini.wrap"(%2807) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2815 = builtin.unrealized_conversion_cast %2814 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %2816 = "mini.field_access"(%2809) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"FilterIterable">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    "mini.castassign"(%2816, %2815) ({
      %2817 = builtin.unrealized_conversion_cast %2815 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ", "should_offset"} : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>, !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> ()
  }) {"func_name" = "FilterIterable_init_iterableIntIterable_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb283(%2818 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2819 : !llvm.ptr, %2820 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2821 : !llvm.struct<(!llvm.ptr)>):
    %2822 = "mini.invariant"(%2819) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2823 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb284] : () -> ()
  ^bb285:
    %2824 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%2824, %2823) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb286] : () -> ()
  ^bb287:
    %2825 = "llvm.getelementptr"(%2819) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2826 = "llvm.load"(%2825) : (!llvm.ptr) -> !llvm.ptr
    %2827 = "llvm.getelementptr"(%2826) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2828 = "llvm.getelementptr"(%2826) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2829 = "llvm.getelementptr"(%2826) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2830 = "llvm.getelementptr"(%2826) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2831 = "llvm.load"(%2827) : (!llvm.ptr) -> i64
    %2832 = "llvm.load"(%2828) : (!llvm.ptr) -> i64
    %2833 = "llvm.load"(%2829) : (!llvm.ptr) -> !llvm.ptr
    %2834 = "llvm.load"(%2830) : (!llvm.ptr) -> !llvm.ptr
    %2835 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2836 = "llvm.ptrtoint"(%2835) : (!llvm.ptr) -> i64
    %2837 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2838 = "mini.subtype"(%2833, %2832, %2831, %2837, %2836, %2834) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2838) [^bb285, ^bb285] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb284:
    %2839 = "llvm.getelementptr"(%2819) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2840 = "llvm.load"(%2839) : (!llvm.ptr) -> !llvm.ptr
    %2841 = "llvm.getelementptr"(%2840) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2842 = "llvm.getelementptr"(%2840) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2843 = "llvm.getelementptr"(%2840) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2844 = "llvm.getelementptr"(%2840) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2845 = "llvm.load"(%2841) : (!llvm.ptr) -> i64
    %2846 = "llvm.load"(%2842) : (!llvm.ptr) -> i64
    %2847 = "llvm.load"(%2843) : (!llvm.ptr) -> !llvm.ptr
    %2848 = "llvm.load"(%2844) : (!llvm.ptr) -> !llvm.ptr
    %2849 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %2850 = "llvm.ptrtoint"(%2849) : (!llvm.ptr) -> i64
    %2851 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %2852 = "mini.subtype"(%2847, %2846, %2845, %2851, %2850, %2848) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2852) [^bb287, ^bb287] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb286:
    %2853 = "llvm.extractvalue"(%2818) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2854 = "llvm.load"(%2823) : (!llvm.ptr) -> i32
    %2855 = "llvm.getelementptr"(%2853, %2854) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2856 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2857 = "llvm.getelementptr"(%2855, %2856) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2857) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_init_iterableIntIterable_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb288(%2858 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2859 : !llvm.ptr, %2860 : !llvm.struct<(!llvm.ptr)>):
    %2861 = "mini.invariant"(%2859) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2862 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb289] : () -> ()
  ^bb290:
    %2863 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%2863, %2862) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb291] : () -> ()
  ^bb289:
    %2864 = "llvm.getelementptr"(%2859) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2865 = "llvm.load"(%2864) : (!llvm.ptr) -> !llvm.ptr
    %2866 = "llvm.getelementptr"(%2865) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2867 = "llvm.getelementptr"(%2865) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2868 = "llvm.getelementptr"(%2865) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2869 = "llvm.getelementptr"(%2865) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2870 = "llvm.load"(%2866) : (!llvm.ptr) -> i64
    %2871 = "llvm.load"(%2867) : (!llvm.ptr) -> i64
    %2872 = "llvm.load"(%2868) : (!llvm.ptr) -> !llvm.ptr
    %2873 = "llvm.load"(%2869) : (!llvm.ptr) -> !llvm.ptr
    %2874 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2875 = "llvm.ptrtoint"(%2874) : (!llvm.ptr) -> i64
    %2876 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2877 = "mini.subtype"(%2872, %2871, %2870, %2876, %2875, %2873) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2877) [^bb290, ^bb290] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb291:
    %2878 = "llvm.extractvalue"(%2858) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2879 = "llvm.load"(%2862) : (!llvm.ptr) -> i32
    %2880 = "llvm.getelementptr"(%2878, %2879) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2881 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2882 = "llvm.getelementptr"(%2880, %2881) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2882) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb292(%2883 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2884 : !llvm.ptr, %2885 : i32, %2886 : !llvm.struct<(!llvm.ptr)>):
    %2887 = "mini.invariant"(%2884) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2888 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb293] : () -> ()
  ^bb294:
    %2889 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%2889, %2888) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb295] : () -> ()
  ^bb296:
    %2890 = "llvm.getelementptr"(%2884) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2891 = "llvm.load"(%2890) : (!llvm.ptr) -> !llvm.ptr
    %2892 = "llvm.getelementptr"(%2891) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2893 = "llvm.getelementptr"(%2891) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2894 = "llvm.getelementptr"(%2891) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2895 = "llvm.getelementptr"(%2891) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2896 = "llvm.load"(%2892) : (!llvm.ptr) -> i64
    %2897 = "llvm.load"(%2893) : (!llvm.ptr) -> i64
    %2898 = "llvm.load"(%2894) : (!llvm.ptr) -> !llvm.ptr
    %2899 = "llvm.load"(%2895) : (!llvm.ptr) -> !llvm.ptr
    %2900 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2901 = "llvm.ptrtoint"(%2900) : (!llvm.ptr) -> i64
    %2902 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2903 = "mini.subtype"(%2898, %2897, %2896, %2902, %2901, %2899) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2903) [^bb294, ^bb294] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb293:
    %2904 = "llvm.getelementptr"(%2884) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2905 = "llvm.load"(%2904) : (!llvm.ptr) -> !llvm.ptr
    %2906 = "llvm.getelementptr"(%2905) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2907 = "llvm.getelementptr"(%2905) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2908 = "llvm.getelementptr"(%2905) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2909 = "llvm.getelementptr"(%2905) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2910 = "llvm.load"(%2906) : (!llvm.ptr) -> i64
    %2911 = "llvm.load"(%2907) : (!llvm.ptr) -> i64
    %2912 = "llvm.load"(%2908) : (!llvm.ptr) -> !llvm.ptr
    %2913 = "llvm.load"(%2909) : (!llvm.ptr) -> !llvm.ptr
    %2914 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %2915 = "llvm.ptrtoint"(%2914) : (!llvm.ptr) -> i64
    %2916 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %2917 = "mini.subtype"(%2912, %2911, %2910, %2916, %2915, %2913) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2917) [^bb296, ^bb296] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb295:
    %2918 = "llvm.extractvalue"(%2883) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2919 = "llvm.load"(%2888) : (!llvm.ptr) -> i32
    %2920 = "llvm.getelementptr"(%2918, %2919) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2921 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2922 = "llvm.getelementptr"(%2920, %2921) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2922) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb297(%2923 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2924 : !llvm.ptr, %2925 : !llvm.struct<(!llvm.ptr)>):
    %2926 = "mini.invariant"(%2924) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2927 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb298] : () -> ()
  ^bb299:
    %2928 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%2928, %2927) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb300] : () -> ()
  ^bb298:
    %2929 = "llvm.getelementptr"(%2924) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2930 = "llvm.load"(%2929) : (!llvm.ptr) -> !llvm.ptr
    %2931 = "llvm.getelementptr"(%2930) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2932 = "llvm.getelementptr"(%2930) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2933 = "llvm.getelementptr"(%2930) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2934 = "llvm.getelementptr"(%2930) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2935 = "llvm.load"(%2931) : (!llvm.ptr) -> i64
    %2936 = "llvm.load"(%2932) : (!llvm.ptr) -> i64
    %2937 = "llvm.load"(%2933) : (!llvm.ptr) -> !llvm.ptr
    %2938 = "llvm.load"(%2934) : (!llvm.ptr) -> !llvm.ptr
    %2939 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2940 = "llvm.ptrtoint"(%2939) : (!llvm.ptr) -> i64
    %2941 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2942 = "mini.subtype"(%2937, %2936, %2935, %2941, %2940, %2938) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2942) [^bb299, ^bb299] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb300:
    %2943 = "llvm.extractvalue"(%2923) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2944 = "llvm.load"(%2927) : (!llvm.ptr) -> i32
    %2945 = "llvm.getelementptr"(%2943, %2944) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2946 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2947 = "llvm.getelementptr"(%2945, %2946) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2947) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb301(%2948 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2949 : !llvm.ptr, %2950 : !llvm.struct<(!llvm.ptr)>):
    %2951 = "mini.invariant"(%2949) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2952 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb302] : () -> ()
  ^bb303:
    %2953 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%2953, %2952) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb304] : () -> ()
  ^bb302:
    %2954 = "llvm.getelementptr"(%2949) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2955 = "llvm.load"(%2954) : (!llvm.ptr) -> !llvm.ptr
    %2956 = "llvm.getelementptr"(%2955) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2957 = "llvm.getelementptr"(%2955) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2958 = "llvm.getelementptr"(%2955) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2959 = "llvm.getelementptr"(%2955) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2960 = "llvm.load"(%2956) : (!llvm.ptr) -> i64
    %2961 = "llvm.load"(%2957) : (!llvm.ptr) -> i64
    %2962 = "llvm.load"(%2958) : (!llvm.ptr) -> !llvm.ptr
    %2963 = "llvm.load"(%2959) : (!llvm.ptr) -> !llvm.ptr
    %2964 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2965 = "llvm.ptrtoint"(%2964) : (!llvm.ptr) -> i64
    %2966 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2967 = "mini.subtype"(%2962, %2961, %2960, %2966, %2965, %2963) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2967) [^bb303, ^bb303] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb304:
    %2968 = "llvm.extractvalue"(%2948) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2969 = "llvm.load"(%2952) : (!llvm.ptr) -> i32
    %2970 = "llvm.getelementptr"(%2968, %2969) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2971 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2972 = "llvm.getelementptr"(%2970, %2971) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2972) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb305(%2973 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2974 : !llvm.ptr, %2975 : !llvm.struct<(!llvm.ptr)>):
    %2976 = "mini.invariant"(%2974) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2977 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb306] : () -> ()
  ^bb307:
    %2978 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%2978, %2977) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb308] : () -> ()
  ^bb306:
    %2979 = "llvm.getelementptr"(%2974) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %2980 = "llvm.load"(%2979) : (!llvm.ptr) -> !llvm.ptr
    %2981 = "llvm.getelementptr"(%2980) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2982 = "llvm.getelementptr"(%2980) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2983 = "llvm.getelementptr"(%2980) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2984 = "llvm.getelementptr"(%2980) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2985 = "llvm.load"(%2981) : (!llvm.ptr) -> i64
    %2986 = "llvm.load"(%2982) : (!llvm.ptr) -> i64
    %2987 = "llvm.load"(%2983) : (!llvm.ptr) -> !llvm.ptr
    %2988 = "llvm.load"(%2984) : (!llvm.ptr) -> !llvm.ptr
    %2989 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %2990 = "llvm.ptrtoint"(%2989) : (!llvm.ptr) -> i64
    %2991 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %2992 = "mini.subtype"(%2987, %2986, %2985, %2991, %2990, %2988) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%2992) [^bb307, ^bb307] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb308:
    %2993 = "llvm.extractvalue"(%2973) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2994 = "llvm.load"(%2977) : (!llvm.ptr) -> i32
    %2995 = "llvm.getelementptr"(%2993, %2994) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2996 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %2997 = "llvm.getelementptr"(%2995, %2996) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2997) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb309(%2998 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2999 : !llvm.ptr, %3000 : !llvm.struct<(!llvm.ptr)>):
    %3001 = "mini.invariant"(%2999) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3002 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb310] : () -> ()
  ^bb311:
    %3003 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%3003, %3002) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb312] : () -> ()
  ^bb310:
    %3004 = "llvm.getelementptr"(%2999) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3005 = "llvm.load"(%3004) : (!llvm.ptr) -> !llvm.ptr
    %3006 = "llvm.getelementptr"(%3005) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3007 = "llvm.getelementptr"(%3005) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3008 = "llvm.getelementptr"(%3005) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3009 = "llvm.getelementptr"(%3005) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3010 = "llvm.load"(%3006) : (!llvm.ptr) -> i64
    %3011 = "llvm.load"(%3007) : (!llvm.ptr) -> i64
    %3012 = "llvm.load"(%3008) : (!llvm.ptr) -> !llvm.ptr
    %3013 = "llvm.load"(%3009) : (!llvm.ptr) -> !llvm.ptr
    %3014 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3015 = "llvm.ptrtoint"(%3014) : (!llvm.ptr) -> i64
    %3016 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3017 = "mini.subtype"(%3012, %3011, %3010, %3016, %3015, %3013) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3017) [^bb311, ^bb311] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb312:
    %3018 = "llvm.extractvalue"(%2998) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3019 = "llvm.load"(%3002) : (!llvm.ptr) -> i32
    %3020 = "llvm.getelementptr"(%3018, %3019) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3021 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3022 = "llvm.getelementptr"(%3020, %3021) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3022) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb313(%3023 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3024 : !llvm.ptr, %3025 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3026 = "mini.invariant"(%3024) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3027 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb314] : () -> ()
  ^bb315:
    %3028 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%3028, %3027) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb316] : () -> ()
  ^bb314:
    %3029 = "llvm.getelementptr"(%3024) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3030 = "llvm.load"(%3029) : (!llvm.ptr) -> !llvm.ptr
    %3031 = "llvm.getelementptr"(%3030) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3032 = "llvm.getelementptr"(%3030) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3033 = "llvm.getelementptr"(%3030) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3034 = "llvm.getelementptr"(%3030) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3035 = "llvm.load"(%3031) : (!llvm.ptr) -> i64
    %3036 = "llvm.load"(%3032) : (!llvm.ptr) -> i64
    %3037 = "llvm.load"(%3033) : (!llvm.ptr) -> !llvm.ptr
    %3038 = "llvm.load"(%3034) : (!llvm.ptr) -> !llvm.ptr
    %3039 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3040 = "llvm.ptrtoint"(%3039) : (!llvm.ptr) -> i64
    %3041 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3042 = "mini.subtype"(%3037, %3036, %3035, %3041, %3040, %3038) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3042) [^bb315, ^bb315] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb316:
    %3043 = "llvm.extractvalue"(%3023) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3044 = "llvm.load"(%3027) : (!llvm.ptr) -> i32
    %3045 = "llvm.getelementptr"(%3043, %3044) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3046 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3047 = "llvm.getelementptr"(%3045, %3046) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3047) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb317(%3048 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3049 : !llvm.ptr, %3050 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3051 = "mini.invariant"(%3049) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3052 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb318] : () -> ()
  ^bb319:
    %3053 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%3053, %3052) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb320] : () -> ()
  ^bb318:
    %3054 = "llvm.getelementptr"(%3049) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3055 = "llvm.load"(%3054) : (!llvm.ptr) -> !llvm.ptr
    %3056 = "llvm.getelementptr"(%3055) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3057 = "llvm.getelementptr"(%3055) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3058 = "llvm.getelementptr"(%3055) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3059 = "llvm.getelementptr"(%3055) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3060 = "llvm.load"(%3056) : (!llvm.ptr) -> i64
    %3061 = "llvm.load"(%3057) : (!llvm.ptr) -> i64
    %3062 = "llvm.load"(%3058) : (!llvm.ptr) -> !llvm.ptr
    %3063 = "llvm.load"(%3059) : (!llvm.ptr) -> !llvm.ptr
    %3064 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3065 = "llvm.ptrtoint"(%3064) : (!llvm.ptr) -> i64
    %3066 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3067 = "mini.subtype"(%3062, %3061, %3060, %3066, %3065, %3063) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3067) [^bb319, ^bb319] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb320:
    %3068 = "llvm.extractvalue"(%3048) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3069 = "llvm.load"(%3052) : (!llvm.ptr) -> i32
    %3070 = "llvm.getelementptr"(%3068, %3069) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3071 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3072 = "llvm.getelementptr"(%3070, %3071) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3072) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb321(%3073 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3074 : !llvm.ptr, %3075 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3076 = "mini.invariant"(%3074) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3077 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb322] : () -> ()
  ^bb323:
    %3078 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%3078, %3077) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb324] : () -> ()
  ^bb322:
    %3079 = "llvm.getelementptr"(%3074) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3080 = "llvm.load"(%3079) : (!llvm.ptr) -> !llvm.ptr
    %3081 = "llvm.getelementptr"(%3080) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3082 = "llvm.getelementptr"(%3080) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3083 = "llvm.getelementptr"(%3080) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3084 = "llvm.getelementptr"(%3080) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3085 = "llvm.load"(%3081) : (!llvm.ptr) -> i64
    %3086 = "llvm.load"(%3082) : (!llvm.ptr) -> i64
    %3087 = "llvm.load"(%3083) : (!llvm.ptr) -> !llvm.ptr
    %3088 = "llvm.load"(%3084) : (!llvm.ptr) -> !llvm.ptr
    %3089 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3090 = "llvm.ptrtoint"(%3089) : (!llvm.ptr) -> i64
    %3091 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3092 = "mini.subtype"(%3087, %3086, %3085, %3091, %3090, %3088) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3092) [^bb323, ^bb323] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb324:
    %3093 = "llvm.extractvalue"(%3073) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3094 = "llvm.load"(%3077) : (!llvm.ptr) -> i32
    %3095 = "llvm.getelementptr"(%3093, %3094) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3096 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3097 = "llvm.getelementptr"(%3095, %3096) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3097) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb325(%3098 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3099 : !llvm.ptr, %3100 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3101 = "mini.invariant"(%3099) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3102 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb326] : () -> ()
  ^bb327:
    %3103 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%3103, %3102) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb328] : () -> ()
  ^bb326:
    %3104 = "llvm.getelementptr"(%3099) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3105 = "llvm.load"(%3104) : (!llvm.ptr) -> !llvm.ptr
    %3106 = "llvm.getelementptr"(%3105) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3107 = "llvm.getelementptr"(%3105) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3108 = "llvm.getelementptr"(%3105) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3109 = "llvm.getelementptr"(%3105) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3110 = "llvm.load"(%3106) : (!llvm.ptr) -> i64
    %3111 = "llvm.load"(%3107) : (!llvm.ptr) -> i64
    %3112 = "llvm.load"(%3108) : (!llvm.ptr) -> !llvm.ptr
    %3113 = "llvm.load"(%3109) : (!llvm.ptr) -> !llvm.ptr
    %3114 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3115 = "llvm.ptrtoint"(%3114) : (!llvm.ptr) -> i64
    %3116 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3117 = "mini.subtype"(%3112, %3111, %3110, %3116, %3115, %3113) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3117) [^bb327, ^bb327] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb328:
    %3118 = "llvm.extractvalue"(%3098) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3119 = "llvm.load"(%3102) : (!llvm.ptr) -> i32
    %3120 = "llvm.getelementptr"(%3118, %3119) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3121 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3122 = "llvm.getelementptr"(%3120, %3121) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3122) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb329(%3123 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3124 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3125 : !llvm.ptr):
    %3126 = "mini.wrap"(%3123) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterable">
    %3127 = "mini.to_fat_ptr"(%3126) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable", "to_typ_name" = "FilterIterable", "invariant"} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"FilterIterable">
    %3128 = "mini.field_access"(%3127) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"IntIterable">
    %3129 = "mini.unwrap"(%3128) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3130 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3131 = "mini.method_call"(%3130, %3129) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3132 = "mini.to_fat_ptr"(%3131) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3133 = "mini.field_access"(%3127) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"FilterIterable">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %3134 = "mini.unwrap"(%3132) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3135 = "mini.unwrap"(%3133) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %3136 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterator", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"FilterIterator">
    %3137 = "mini.field_access"(%3127) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"FilterIterable">) -> !mini.fatptr<"IntIterable">
    %3138 = "mini.unwrap"(%3137) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3139 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3140 = "mini.method_call"(%3139, %3138) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3141 = "mini.to_fat_ptr"(%3140) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3142 = "mini.field_access"(%3127) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"FilterIterable">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %3143 = "mini.to_fat_ptr"(%3141) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3144 = "mini.unwrap"(%3143) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3145 = builtin.unrealized_conversion_cast %3142 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %3146 = "mini.unwrap"(%3145) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %3147 = "mini.unwrap"(%3136) : (!mini.fatptr<"FilterIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3148 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %3149 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri1", ["Ptri1"], ["Ptri32"]]} : () -> !llvm.ptr
    %3150 = "mini.parameterizations_array"(%3148, %3149) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3150, %3147, %3144, %3146) {"offset" = 2 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %3151 = "mini.to_fat_ptr"(%3136) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%3151) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "FilterIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb330(%3152 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3153 : !llvm.ptr):
    %3154 = "mini.invariant"(%3153) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3155 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb331] : () -> ()
  ^bb331:
    %3156 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%3156, %3155) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb332] : () -> ()
  ^bb332:
    %3157 = "llvm.extractvalue"(%3152) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3158 = "llvm.load"(%3155) : (!llvm.ptr) -> i32
    %3159 = "llvm.getelementptr"(%3157, %3158) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3160 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3161 = "llvm.getelementptr"(%3159, %3160) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3161) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "offset" = 0 : i32, "meth_name" = "FilterIterator_field_iterator"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "offset" = 1 : i32, "meth_name" = "FilterIterator_field_f"} : () -> ()
  "mini.func"() ({
  ^bb333(%3162 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3163 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3164 : !llvm.ptr, %3165 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3166 : !llvm.struct<(!llvm.ptr)>):
    %3167 = "mini.wrap"(%3162) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterator">
    %3168 = "mini.to_fat_ptr"(%3167) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator", "to_typ_name" = "FilterIterator", "invariant"} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"FilterIterator">
    %3169 = "mini.wrap"(%3165) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %3170 = "mini.to_fat_ptr"(%3169) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3171 = "mini.field_access"(%3168) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"IntIterator">
    "mini.castassign"(%3171, %3170) ({
      %3172 = "mini.to_fat_ptr"(%3170) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "should_offset"} : (!mini.fatptr<"IntIterator">, !mini.fatptr<"IntIterator">) -> ()
    %3173 = "mini.wrap"(%3166) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %3174 = builtin.unrealized_conversion_cast %3173 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %3175 = "mini.field_access"(%3168) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"FilterIterator">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    "mini.castassign"(%3175, %3174) ({
      %3176 = builtin.unrealized_conversion_cast %3174 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ", "should_offset"} : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>, !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> ()
  }) {"func_name" = "FilterIterator_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb334(%3177 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3178 : !llvm.ptr, %3179 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3180 : !llvm.struct<(!llvm.ptr)>):
    %3181 = "mini.invariant"(%3178) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3182 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb335] : () -> ()
  ^bb336:
    %3183 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%3183, %3182) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb337] : () -> ()
  ^bb338:
    %3184 = "llvm.getelementptr"(%3178) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3185 = "llvm.load"(%3184) : (!llvm.ptr) -> !llvm.ptr
    %3186 = "llvm.getelementptr"(%3185) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3187 = "llvm.getelementptr"(%3185) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3188 = "llvm.getelementptr"(%3185) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3189 = "llvm.getelementptr"(%3185) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3190 = "llvm.load"(%3186) : (!llvm.ptr) -> i64
    %3191 = "llvm.load"(%3187) : (!llvm.ptr) -> i64
    %3192 = "llvm.load"(%3188) : (!llvm.ptr) -> !llvm.ptr
    %3193 = "llvm.load"(%3189) : (!llvm.ptr) -> !llvm.ptr
    %3194 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3195 = "llvm.ptrtoint"(%3194) : (!llvm.ptr) -> i64
    %3196 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3197 = "mini.subtype"(%3192, %3191, %3190, %3196, %3195, %3193) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3197) [^bb336, ^bb336] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb335:
    %3198 = "llvm.getelementptr"(%3178) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3199 = "llvm.load"(%3198) : (!llvm.ptr) -> !llvm.ptr
    %3200 = "llvm.getelementptr"(%3199) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3201 = "llvm.getelementptr"(%3199) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3202 = "llvm.getelementptr"(%3199) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3203 = "llvm.getelementptr"(%3199) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3204 = "llvm.load"(%3200) : (!llvm.ptr) -> i64
    %3205 = "llvm.load"(%3201) : (!llvm.ptr) -> i64
    %3206 = "llvm.load"(%3202) : (!llvm.ptr) -> !llvm.ptr
    %3207 = "llvm.load"(%3203) : (!llvm.ptr) -> !llvm.ptr
    %3208 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %3209 = "llvm.ptrtoint"(%3208) : (!llvm.ptr) -> i64
    %3210 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %3211 = "mini.subtype"(%3206, %3205, %3204, %3210, %3209, %3207) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3211) [^bb338, ^bb338] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb337:
    %3212 = "llvm.extractvalue"(%3177) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3213 = "llvm.load"(%3182) : (!llvm.ptr) -> i32
    %3214 = "llvm.getelementptr"(%3212, %3213) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3215 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3216 = "llvm.getelementptr"(%3214, %3215) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3216) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterator_B_init_iteratorIntIterator_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb339(%3217 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3218 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3219 : !llvm.ptr):
    %3220 = "mini.wrap"(%3217) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterator">
    %3221 = "mini.to_fat_ptr"(%3220) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator", "to_typ_name" = "FilterIterator", "invariant"} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"FilterIterator">
    %3222 = "mini.field_access"(%3221) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"IntIterator">
    %3223 = "mini.unwrap"(%3222) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3224 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3225 = "mini.method_call"(%3224, %3223) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3226 = builtin.unrealized_conversion_cast %3225 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3227 = builtin.unrealized_conversion_cast %3226 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.while"() ({
      %3228 = "mini.checkflag"(%3227) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %3229 = "mini.unwrap"(%3228) : (i1) -> i1
    }, {
      %3230 = "mini.narrow"(%3227) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %3231 = builtin.unrealized_conversion_cast %3230 : !mini.ptr<i32> to !mini.ptr<i32>
      %3232 = "mini.unwrap"(%3231) : (!mini.ptr<i32>) -> i32
      %3233 = "mini.field_access"(%3221) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"FilterIterator">) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
      %3234 = "mini.unwrap"(%3233) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %3235 = "mini.fptr_call"(%3234, %3232) {"ret_type" = i1} : (!llvm.ptr, i32) -> !mini.ptr<i1>
      %3236 = "mini.unwrap"(%3235) : (!mini.ptr<i1>) -> i1
      "mini.if"(%3236) ({
        %3237 = "mini.unionize"(%3230) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        "mini.return"(%3237) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
      }) : (i1) -> ()
      %3238 = "mini.field_access"(%3221) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"FilterIterator">) -> !mini.fatptr<"IntIterator">
      %3239 = "mini.unwrap"(%3238) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3240 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %3241 = "mini.method_call"(%3240, %3239) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %3242 = builtin.unrealized_conversion_cast %3241 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.castassign"(%3227, %3242) ({
        %3243 = builtin.unrealized_conversion_cast %3242 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : () -> ()
    %3244 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %3245 = "mini.unionize"(%3244) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%3245) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "FilterIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb340(%3246 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3247 : !llvm.ptr):
    %3248 = "mini.invariant"(%3247) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3249 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb341] : () -> ()
  ^bb341:
    %3250 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%3250, %3249) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb342] : () -> ()
  ^bb342:
    %3251 = "llvm.extractvalue"(%3246) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3252 = "llvm.load"(%3249) : (!llvm.ptr) -> i32
    %3253 = "llvm.getelementptr"(%3251, %3252) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3254 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3255 = "llvm.getelementptr"(%3253, %3254) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3255) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 0 : i32, "meth_name" = "ChainIterable_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 1 : i32, "meth_name" = "ChainIterable_field_second"} : () -> ()
  "mini.func"() ({
  ^bb343(%3256 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3257 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3258 : !llvm.ptr, %3259 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3260 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3261 = "mini.wrap"(%3256) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterable">
    %3262 = "mini.to_fat_ptr"(%3261) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable", "to_typ_name" = "ChainIterable", "invariant"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"ChainIterable">
    %3263 = "mini.wrap"(%3259) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %3264 = "mini.to_fat_ptr"(%3263) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3265 = "mini.field_access"(%3262) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    "mini.castassign"(%3265, %3264) ({
      %3266 = "mini.to_fat_ptr"(%3264) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "should_offset"} : (!mini.fatptr<"IntIterable">, !mini.fatptr<"IntIterable">) -> ()
    %3267 = "mini.wrap"(%3260) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %3268 = "mini.to_fat_ptr"(%3267) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3269 = "mini.field_access"(%3262) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    "mini.castassign"(%3269, %3268) ({
      %3270 = "mini.to_fat_ptr"(%3268) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "should_offset"} : (!mini.fatptr<"IntIterable">, !mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "ChainIterable_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb344(%3271 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3272 : !llvm.ptr, %3273 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3274 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3275 = "mini.invariant"(%3272) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3276 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb345] : () -> ()
  ^bb346:
    %3277 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%3277, %3276) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb347] : () -> ()
  ^bb348:
    %3278 = "llvm.getelementptr"(%3272) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3279 = "llvm.load"(%3278) : (!llvm.ptr) -> !llvm.ptr
    %3280 = "llvm.getelementptr"(%3279) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3281 = "llvm.getelementptr"(%3279) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3282 = "llvm.getelementptr"(%3279) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3283 = "llvm.getelementptr"(%3279) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3284 = "llvm.load"(%3280) : (!llvm.ptr) -> i64
    %3285 = "llvm.load"(%3281) : (!llvm.ptr) -> i64
    %3286 = "llvm.load"(%3282) : (!llvm.ptr) -> !llvm.ptr
    %3287 = "llvm.load"(%3283) : (!llvm.ptr) -> !llvm.ptr
    %3288 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3289 = "llvm.ptrtoint"(%3288) : (!llvm.ptr) -> i64
    %3290 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3291 = "mini.subtype"(%3286, %3285, %3284, %3290, %3289, %3287) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3291) [^bb346, ^bb346] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb345:
    %3292 = "llvm.getelementptr"(%3272) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3293 = "llvm.load"(%3292) : (!llvm.ptr) -> !llvm.ptr
    %3294 = "llvm.getelementptr"(%3293) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3295 = "llvm.getelementptr"(%3293) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3296 = "llvm.getelementptr"(%3293) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3297 = "llvm.getelementptr"(%3293) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3298 = "llvm.load"(%3294) : (!llvm.ptr) -> i64
    %3299 = "llvm.load"(%3295) : (!llvm.ptr) -> i64
    %3300 = "llvm.load"(%3296) : (!llvm.ptr) -> !llvm.ptr
    %3301 = "llvm.load"(%3297) : (!llvm.ptr) -> !llvm.ptr
    %3302 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3303 = "llvm.ptrtoint"(%3302) : (!llvm.ptr) -> i64
    %3304 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3305 = "mini.subtype"(%3300, %3299, %3298, %3304, %3303, %3301) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3305) [^bb348, ^bb348] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb347:
    %3306 = "llvm.extractvalue"(%3271) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3307 = "llvm.load"(%3276) : (!llvm.ptr) -> i32
    %3308 = "llvm.getelementptr"(%3306, %3307) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3309 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3310 = "llvm.getelementptr"(%3308, %3309) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3310) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb349(%3311 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3312 : !llvm.ptr, %3313 : !llvm.struct<(!llvm.ptr)>):
    %3314 = "mini.invariant"(%3312) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3315 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb350] : () -> ()
  ^bb351:
    %3316 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%3316, %3315) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb352] : () -> ()
  ^bb350:
    %3317 = "llvm.getelementptr"(%3312) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3318 = "llvm.load"(%3317) : (!llvm.ptr) -> !llvm.ptr
    %3319 = "llvm.getelementptr"(%3318) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3320 = "llvm.getelementptr"(%3318) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3321 = "llvm.getelementptr"(%3318) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3322 = "llvm.getelementptr"(%3318) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3323 = "llvm.load"(%3319) : (!llvm.ptr) -> i64
    %3324 = "llvm.load"(%3320) : (!llvm.ptr) -> i64
    %3325 = "llvm.load"(%3321) : (!llvm.ptr) -> !llvm.ptr
    %3326 = "llvm.load"(%3322) : (!llvm.ptr) -> !llvm.ptr
    %3327 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3328 = "llvm.ptrtoint"(%3327) : (!llvm.ptr) -> i64
    %3329 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3330 = "mini.subtype"(%3325, %3324, %3323, %3329, %3328, %3326) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3330) [^bb351, ^bb351] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb352:
    %3331 = "llvm.extractvalue"(%3311) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3332 = "llvm.load"(%3315) : (!llvm.ptr) -> i32
    %3333 = "llvm.getelementptr"(%3331, %3332) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3334 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3335 = "llvm.getelementptr"(%3333, %3334) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3335) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb353(%3336 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3337 : !llvm.ptr, %3338 : i32, %3339 : !llvm.struct<(!llvm.ptr)>):
    %3340 = "mini.invariant"(%3337) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3341 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb354] : () -> ()
  ^bb355:
    %3342 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%3342, %3341) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb356] : () -> ()
  ^bb357:
    %3343 = "llvm.getelementptr"(%3337) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3344 = "llvm.load"(%3343) : (!llvm.ptr) -> !llvm.ptr
    %3345 = "llvm.getelementptr"(%3344) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3346 = "llvm.getelementptr"(%3344) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3347 = "llvm.getelementptr"(%3344) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3348 = "llvm.getelementptr"(%3344) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3349 = "llvm.load"(%3345) : (!llvm.ptr) -> i64
    %3350 = "llvm.load"(%3346) : (!llvm.ptr) -> i64
    %3351 = "llvm.load"(%3347) : (!llvm.ptr) -> !llvm.ptr
    %3352 = "llvm.load"(%3348) : (!llvm.ptr) -> !llvm.ptr
    %3353 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3354 = "llvm.ptrtoint"(%3353) : (!llvm.ptr) -> i64
    %3355 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3356 = "mini.subtype"(%3351, %3350, %3349, %3355, %3354, %3352) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3356) [^bb355, ^bb355] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb354:
    %3357 = "llvm.getelementptr"(%3337) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3358 = "llvm.load"(%3357) : (!llvm.ptr) -> !llvm.ptr
    %3359 = "llvm.getelementptr"(%3358) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3360 = "llvm.getelementptr"(%3358) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3361 = "llvm.getelementptr"(%3358) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3362 = "llvm.getelementptr"(%3358) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3363 = "llvm.load"(%3359) : (!llvm.ptr) -> i64
    %3364 = "llvm.load"(%3360) : (!llvm.ptr) -> i64
    %3365 = "llvm.load"(%3361) : (!llvm.ptr) -> !llvm.ptr
    %3366 = "llvm.load"(%3362) : (!llvm.ptr) -> !llvm.ptr
    %3367 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %3368 = "llvm.ptrtoint"(%3367) : (!llvm.ptr) -> i64
    %3369 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %3370 = "mini.subtype"(%3365, %3364, %3363, %3369, %3368, %3366) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3370) [^bb357, ^bb357] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb356:
    %3371 = "llvm.extractvalue"(%3336) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3372 = "llvm.load"(%3341) : (!llvm.ptr) -> i32
    %3373 = "llvm.getelementptr"(%3371, %3372) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3374 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3375 = "llvm.getelementptr"(%3373, %3374) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3375) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb358(%3376 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3377 : !llvm.ptr, %3378 : !llvm.struct<(!llvm.ptr)>):
    %3379 = "mini.invariant"(%3377) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3380 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb359] : () -> ()
  ^bb360:
    %3381 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%3381, %3380) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb361] : () -> ()
  ^bb359:
    %3382 = "llvm.getelementptr"(%3377) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3383 = "llvm.load"(%3382) : (!llvm.ptr) -> !llvm.ptr
    %3384 = "llvm.getelementptr"(%3383) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3385 = "llvm.getelementptr"(%3383) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3386 = "llvm.getelementptr"(%3383) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3387 = "llvm.getelementptr"(%3383) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3388 = "llvm.load"(%3384) : (!llvm.ptr) -> i64
    %3389 = "llvm.load"(%3385) : (!llvm.ptr) -> i64
    %3390 = "llvm.load"(%3386) : (!llvm.ptr) -> !llvm.ptr
    %3391 = "llvm.load"(%3387) : (!llvm.ptr) -> !llvm.ptr
    %3392 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3393 = "llvm.ptrtoint"(%3392) : (!llvm.ptr) -> i64
    %3394 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3395 = "mini.subtype"(%3390, %3389, %3388, %3394, %3393, %3391) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3395) [^bb360, ^bb360] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb361:
    %3396 = "llvm.extractvalue"(%3376) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3397 = "llvm.load"(%3380) : (!llvm.ptr) -> i32
    %3398 = "llvm.getelementptr"(%3396, %3397) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3399 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3400 = "llvm.getelementptr"(%3398, %3399) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3400) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb362(%3401 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3402 : !llvm.ptr, %3403 : !llvm.struct<(!llvm.ptr)>):
    %3404 = "mini.invariant"(%3402) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3405 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb363] : () -> ()
  ^bb364:
    %3406 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%3406, %3405) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb365] : () -> ()
  ^bb363:
    %3407 = "llvm.getelementptr"(%3402) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3408 = "llvm.load"(%3407) : (!llvm.ptr) -> !llvm.ptr
    %3409 = "llvm.getelementptr"(%3408) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3410 = "llvm.getelementptr"(%3408) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3411 = "llvm.getelementptr"(%3408) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3412 = "llvm.getelementptr"(%3408) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3413 = "llvm.load"(%3409) : (!llvm.ptr) -> i64
    %3414 = "llvm.load"(%3410) : (!llvm.ptr) -> i64
    %3415 = "llvm.load"(%3411) : (!llvm.ptr) -> !llvm.ptr
    %3416 = "llvm.load"(%3412) : (!llvm.ptr) -> !llvm.ptr
    %3417 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3418 = "llvm.ptrtoint"(%3417) : (!llvm.ptr) -> i64
    %3419 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3420 = "mini.subtype"(%3415, %3414, %3413, %3419, %3418, %3416) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3420) [^bb364, ^bb364] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb365:
    %3421 = "llvm.extractvalue"(%3401) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3422 = "llvm.load"(%3405) : (!llvm.ptr) -> i32
    %3423 = "llvm.getelementptr"(%3421, %3422) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3424 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3425 = "llvm.getelementptr"(%3423, %3424) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3425) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb366(%3426 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3427 : !llvm.ptr, %3428 : !llvm.struct<(!llvm.ptr)>):
    %3429 = "mini.invariant"(%3427) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3430 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb367] : () -> ()
  ^bb368:
    %3431 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%3431, %3430) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb369] : () -> ()
  ^bb367:
    %3432 = "llvm.getelementptr"(%3427) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3433 = "llvm.load"(%3432) : (!llvm.ptr) -> !llvm.ptr
    %3434 = "llvm.getelementptr"(%3433) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3435 = "llvm.getelementptr"(%3433) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3436 = "llvm.getelementptr"(%3433) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3437 = "llvm.getelementptr"(%3433) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3438 = "llvm.load"(%3434) : (!llvm.ptr) -> i64
    %3439 = "llvm.load"(%3435) : (!llvm.ptr) -> i64
    %3440 = "llvm.load"(%3436) : (!llvm.ptr) -> !llvm.ptr
    %3441 = "llvm.load"(%3437) : (!llvm.ptr) -> !llvm.ptr
    %3442 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3443 = "llvm.ptrtoint"(%3442) : (!llvm.ptr) -> i64
    %3444 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3445 = "mini.subtype"(%3440, %3439, %3438, %3444, %3443, %3441) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3445) [^bb368, ^bb368] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb369:
    %3446 = "llvm.extractvalue"(%3426) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3447 = "llvm.load"(%3430) : (!llvm.ptr) -> i32
    %3448 = "llvm.getelementptr"(%3446, %3447) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3449 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3450 = "llvm.getelementptr"(%3448, %3449) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3450) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb370(%3451 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3452 : !llvm.ptr, %3453 : !llvm.struct<(!llvm.ptr)>):
    %3454 = "mini.invariant"(%3452) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3455 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb371] : () -> ()
  ^bb372:
    %3456 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%3456, %3455) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb373] : () -> ()
  ^bb371:
    %3457 = "llvm.getelementptr"(%3452) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3458 = "llvm.load"(%3457) : (!llvm.ptr) -> !llvm.ptr
    %3459 = "llvm.getelementptr"(%3458) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3460 = "llvm.getelementptr"(%3458) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3461 = "llvm.getelementptr"(%3458) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3462 = "llvm.getelementptr"(%3458) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3463 = "llvm.load"(%3459) : (!llvm.ptr) -> i64
    %3464 = "llvm.load"(%3460) : (!llvm.ptr) -> i64
    %3465 = "llvm.load"(%3461) : (!llvm.ptr) -> !llvm.ptr
    %3466 = "llvm.load"(%3462) : (!llvm.ptr) -> !llvm.ptr
    %3467 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3468 = "llvm.ptrtoint"(%3467) : (!llvm.ptr) -> i64
    %3469 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3470 = "mini.subtype"(%3465, %3464, %3463, %3469, %3468, %3466) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3470) [^bb372, ^bb372] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb373:
    %3471 = "llvm.extractvalue"(%3451) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3472 = "llvm.load"(%3455) : (!llvm.ptr) -> i32
    %3473 = "llvm.getelementptr"(%3471, %3472) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3474 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3475 = "llvm.getelementptr"(%3473, %3474) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3475) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb374(%3476 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3477 : !llvm.ptr, %3478 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3479 = "mini.invariant"(%3477) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3480 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb375] : () -> ()
  ^bb376:
    %3481 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%3481, %3480) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb377] : () -> ()
  ^bb375:
    %3482 = "llvm.getelementptr"(%3477) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3483 = "llvm.load"(%3482) : (!llvm.ptr) -> !llvm.ptr
    %3484 = "llvm.getelementptr"(%3483) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3485 = "llvm.getelementptr"(%3483) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3486 = "llvm.getelementptr"(%3483) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3487 = "llvm.getelementptr"(%3483) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3488 = "llvm.load"(%3484) : (!llvm.ptr) -> i64
    %3489 = "llvm.load"(%3485) : (!llvm.ptr) -> i64
    %3490 = "llvm.load"(%3486) : (!llvm.ptr) -> !llvm.ptr
    %3491 = "llvm.load"(%3487) : (!llvm.ptr) -> !llvm.ptr
    %3492 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3493 = "llvm.ptrtoint"(%3492) : (!llvm.ptr) -> i64
    %3494 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3495 = "mini.subtype"(%3490, %3489, %3488, %3494, %3493, %3491) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3495) [^bb376, ^bb376] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb377:
    %3496 = "llvm.extractvalue"(%3476) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3497 = "llvm.load"(%3480) : (!llvm.ptr) -> i32
    %3498 = "llvm.getelementptr"(%3496, %3497) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3499 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3500 = "llvm.getelementptr"(%3498, %3499) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3500) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb378(%3501 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3502 : !llvm.ptr, %3503 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3504 = "mini.invariant"(%3502) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3505 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb379] : () -> ()
  ^bb380:
    %3506 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%3506, %3505) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb381] : () -> ()
  ^bb379:
    %3507 = "llvm.getelementptr"(%3502) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3508 = "llvm.load"(%3507) : (!llvm.ptr) -> !llvm.ptr
    %3509 = "llvm.getelementptr"(%3508) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3510 = "llvm.getelementptr"(%3508) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3511 = "llvm.getelementptr"(%3508) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3512 = "llvm.getelementptr"(%3508) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3513 = "llvm.load"(%3509) : (!llvm.ptr) -> i64
    %3514 = "llvm.load"(%3510) : (!llvm.ptr) -> i64
    %3515 = "llvm.load"(%3511) : (!llvm.ptr) -> !llvm.ptr
    %3516 = "llvm.load"(%3512) : (!llvm.ptr) -> !llvm.ptr
    %3517 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3518 = "llvm.ptrtoint"(%3517) : (!llvm.ptr) -> i64
    %3519 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3520 = "mini.subtype"(%3515, %3514, %3513, %3519, %3518, %3516) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3520) [^bb380, ^bb380] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb381:
    %3521 = "llvm.extractvalue"(%3501) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3522 = "llvm.load"(%3505) : (!llvm.ptr) -> i32
    %3523 = "llvm.getelementptr"(%3521, %3522) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3524 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3525 = "llvm.getelementptr"(%3523, %3524) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3525) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb382(%3526 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3527 : !llvm.ptr, %3528 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3529 = "mini.invariant"(%3527) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3530 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb383] : () -> ()
  ^bb384:
    %3531 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%3531, %3530) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb385] : () -> ()
  ^bb383:
    %3532 = "llvm.getelementptr"(%3527) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3533 = "llvm.load"(%3532) : (!llvm.ptr) -> !llvm.ptr
    %3534 = "llvm.getelementptr"(%3533) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3535 = "llvm.getelementptr"(%3533) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3536 = "llvm.getelementptr"(%3533) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3537 = "llvm.getelementptr"(%3533) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3538 = "llvm.load"(%3534) : (!llvm.ptr) -> i64
    %3539 = "llvm.load"(%3535) : (!llvm.ptr) -> i64
    %3540 = "llvm.load"(%3536) : (!llvm.ptr) -> !llvm.ptr
    %3541 = "llvm.load"(%3537) : (!llvm.ptr) -> !llvm.ptr
    %3542 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3543 = "llvm.ptrtoint"(%3542) : (!llvm.ptr) -> i64
    %3544 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3545 = "mini.subtype"(%3540, %3539, %3538, %3544, %3543, %3541) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3545) [^bb384, ^bb384] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb385:
    %3546 = "llvm.extractvalue"(%3526) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3547 = "llvm.load"(%3530) : (!llvm.ptr) -> i32
    %3548 = "llvm.getelementptr"(%3546, %3547) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3549 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3550 = "llvm.getelementptr"(%3548, %3549) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3550) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb386(%3551 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3552 : !llvm.ptr, %3553 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3554 = "mini.invariant"(%3552) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3555 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb387] : () -> ()
  ^bb388:
    %3556 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%3556, %3555) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb389] : () -> ()
  ^bb387:
    %3557 = "llvm.getelementptr"(%3552) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3558 = "llvm.load"(%3557) : (!llvm.ptr) -> !llvm.ptr
    %3559 = "llvm.getelementptr"(%3558) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3560 = "llvm.getelementptr"(%3558) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3561 = "llvm.getelementptr"(%3558) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3562 = "llvm.getelementptr"(%3558) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3563 = "llvm.load"(%3559) : (!llvm.ptr) -> i64
    %3564 = "llvm.load"(%3560) : (!llvm.ptr) -> i64
    %3565 = "llvm.load"(%3561) : (!llvm.ptr) -> !llvm.ptr
    %3566 = "llvm.load"(%3562) : (!llvm.ptr) -> !llvm.ptr
    %3567 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3568 = "llvm.ptrtoint"(%3567) : (!llvm.ptr) -> i64
    %3569 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3570 = "mini.subtype"(%3565, %3564, %3563, %3569, %3568, %3566) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3570) [^bb388, ^bb388] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb389:
    %3571 = "llvm.extractvalue"(%3551) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3572 = "llvm.load"(%3555) : (!llvm.ptr) -> i32
    %3573 = "llvm.getelementptr"(%3571, %3572) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3574 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3575 = "llvm.getelementptr"(%3573, %3574) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3575) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb390(%3576 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3577 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3578 : !llvm.ptr):
    %3579 = "mini.wrap"(%3576) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterable">
    %3580 = "mini.to_fat_ptr"(%3579) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable", "to_typ_name" = "ChainIterable", "invariant"} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"ChainIterable">
    %3581 = "mini.field_access"(%3580) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    %3582 = "mini.unwrap"(%3581) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3583 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3584 = "mini.method_call"(%3583, %3582) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3585 = "mini.to_fat_ptr"(%3584) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3586 = "mini.field_access"(%3580) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    %3587 = "mini.unwrap"(%3586) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3588 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3589 = "mini.method_call"(%3588, %3587) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3590 = "mini.to_fat_ptr"(%3589) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3591 = "mini.unwrap"(%3585) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3592 = "mini.unwrap"(%3590) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3593 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "ChainIterator", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"ChainIterator">
    %3594 = "mini.field_access"(%3580) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    %3595 = "mini.unwrap"(%3594) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3596 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3597 = "mini.method_call"(%3596, %3595) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3598 = "mini.to_fat_ptr"(%3597) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3599 = "mini.field_access"(%3580) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ChainIterable">) -> !mini.fatptr<"IntIterable">
    %3600 = "mini.unwrap"(%3599) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3601 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3602 = "mini.method_call"(%3601, %3600) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %3603 = "mini.to_fat_ptr"(%3602) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %3604 = "mini.to_fat_ptr"(%3598) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3605 = "mini.unwrap"(%3604) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3606 = "mini.to_fat_ptr"(%3603) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3607 = "mini.unwrap"(%3606) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3608 = "mini.unwrap"(%3593) : (!mini.fatptr<"ChainIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3609 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %3610 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %3611 = "mini.parameterizations_array"(%3609, %3610) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3611, %3608, %3605, %3607) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 9 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %3612 = "mini.to_fat_ptr"(%3593) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%3612) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "ChainIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb391(%3613 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3614 : !llvm.ptr):
    %3615 = "mini.invariant"(%3614) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3616 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb392] : () -> ()
  ^bb392:
    %3617 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%3617, %3616) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb393] : () -> ()
  ^bb393:
    %3618 = "llvm.extractvalue"(%3613) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3619 = "llvm.load"(%3616) : (!llvm.ptr) -> i32
    %3620 = "llvm.getelementptr"(%3618, %3619) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3621 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3622 = "llvm.getelementptr"(%3620, %3621) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3622) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "offset" = 0 : i32, "meth_name" = "ChainIterator_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "offset" = 1 : i32, "meth_name" = "ChainIterator_field_second"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "offset" = 2 : i32, "meth_name" = "ChainIterator_field_on_first"} : () -> ()
  "mini.func"() ({
  ^bb394(%3623 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3624 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3625 : !llvm.ptr, %3626 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3627 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3628 = "mini.wrap"(%3623) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterator">
    %3629 = "mini.to_fat_ptr"(%3628) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator", "to_typ_name" = "ChainIterator", "invariant"} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"ChainIterator">
    %3630 = "mini.wrap"(%3626) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %3631 = "mini.to_fat_ptr"(%3630) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3632 = "mini.field_access"(%3629) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"IntIterator">
    "mini.castassign"(%3632, %3631) ({
      %3633 = "mini.to_fat_ptr"(%3631) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "should_offset"} : (!mini.fatptr<"IntIterator">, !mini.fatptr<"IntIterator">) -> ()
    %3634 = "mini.wrap"(%3627) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %3635 = "mini.to_fat_ptr"(%3634) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %3636 = "mini.field_access"(%3629) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"IntIterator">
    "mini.castassign"(%3636, %3635) ({
      %3637 = "mini.to_fat_ptr"(%3635) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "should_offset"} : (!mini.fatptr<"IntIterator">, !mini.fatptr<"IntIterator">) -> ()
    %3638 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %3639 = "mini.field_access"(%3629) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"ChainIterator">) -> !mini.ptr<i1>
    "mini.castassign"(%3639, %3638) ({
      %3640 = builtin.unrealized_conversion_cast %3638 : !mini.ptr<i1> to !mini.ptr<i1>
    }) {"from_typ" = i1, "to_typ" = i1, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ", "should_offset"} : (!mini.ptr<i1>, !mini.ptr<i1>) -> ()
  }) {"func_name" = "ChainIterator_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb395(%3641 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3642 : !llvm.ptr, %3643 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3644 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3645 = "mini.invariant"(%3642) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3646 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb396] : () -> ()
  ^bb397:
    %3647 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%3647, %3646) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb398] : () -> ()
  ^bb399:
    %3648 = "llvm.getelementptr"(%3642) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3649 = "llvm.load"(%3648) : (!llvm.ptr) -> !llvm.ptr
    %3650 = "llvm.getelementptr"(%3649) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3651 = "llvm.getelementptr"(%3649) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3652 = "llvm.getelementptr"(%3649) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3653 = "llvm.getelementptr"(%3649) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3654 = "llvm.load"(%3650) : (!llvm.ptr) -> i64
    %3655 = "llvm.load"(%3651) : (!llvm.ptr) -> i64
    %3656 = "llvm.load"(%3652) : (!llvm.ptr) -> !llvm.ptr
    %3657 = "llvm.load"(%3653) : (!llvm.ptr) -> !llvm.ptr
    %3658 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %3659 = "llvm.ptrtoint"(%3658) : (!llvm.ptr) -> i64
    %3660 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %3661 = "mini.subtype"(%3656, %3655, %3654, %3660, %3659, %3657) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3661) [^bb397, ^bb397] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb396:
    %3662 = "llvm.getelementptr"(%3642) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3663 = "llvm.load"(%3662) : (!llvm.ptr) -> !llvm.ptr
    %3664 = "llvm.getelementptr"(%3663) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3665 = "llvm.getelementptr"(%3663) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3666 = "llvm.getelementptr"(%3663) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3667 = "llvm.getelementptr"(%3663) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3668 = "llvm.load"(%3664) : (!llvm.ptr) -> i64
    %3669 = "llvm.load"(%3665) : (!llvm.ptr) -> i64
    %3670 = "llvm.load"(%3666) : (!llvm.ptr) -> !llvm.ptr
    %3671 = "llvm.load"(%3667) : (!llvm.ptr) -> !llvm.ptr
    %3672 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %3673 = "llvm.ptrtoint"(%3672) : (!llvm.ptr) -> i64
    %3674 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %3675 = "mini.subtype"(%3670, %3669, %3668, %3674, %3673, %3671) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3675) [^bb399, ^bb399] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb398:
    %3676 = "llvm.extractvalue"(%3641) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3677 = "llvm.load"(%3646) : (!llvm.ptr) -> i32
    %3678 = "llvm.getelementptr"(%3676, %3677) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3679 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3680 = "llvm.getelementptr"(%3678, %3679) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3680) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterator_B_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb400(%3681 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3682 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3683 : !llvm.ptr):
    %3684 = "mini.wrap"(%3681) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterator">
    %3685 = "mini.to_fat_ptr"(%3684) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator", "to_typ_name" = "ChainIterator", "invariant"} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"ChainIterator">
    %3686 = "mini.field_access"(%3685) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"ChainIterator">) -> !mini.ptr<i1>
    %3687 = "mini.unwrap"(%3686) : (!mini.ptr<i1>) -> i1
    "mini.if"(%3687) ({
      %3688 = "mini.field_access"(%3685) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"IntIterator">
      %3689 = "mini.unwrap"(%3688) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3690 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %3691 = "mini.method_call"(%3690, %3689) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %3692 = builtin.unrealized_conversion_cast %3691 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %3693 = "mini.checkflag"(%3692) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %3694 = "mini.unwrap"(%3693) : (i1) -> i1
      %3695 = builtin.unrealized_conversion_cast %3692 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%3694) ({
        %3696 = "mini.narrow"(%3695) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %3697 = "mini.unionize"(%3696) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        "mini.return"(%3697) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
        "mini.castassign"(%3695, %3696) ({
          %3698 = "mini.unionize"(%3696) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
      %3699 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %3700 = "mini.field_access"(%3685) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"ChainIterator">) -> !mini.ptr<i1>
      "mini.castassign"(%3700, %3699) ({
        %3701 = builtin.unrealized_conversion_cast %3699 : !mini.ptr<i1> to !mini.ptr<i1>
      }) {"from_typ" = i1, "to_typ" = i1, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ", "should_offset"} : (!mini.ptr<i1>, !mini.ptr<i1>) -> ()
    }) : (i1) -> ()
    %3702 = "mini.field_access"(%3685) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"ChainIterator">) -> !mini.fatptr<"IntIterator">
    %3703 = "mini.unwrap"(%3702) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3704 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3705 = "mini.method_call"(%3704, %3703) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3706 = builtin.unrealized_conversion_cast %3705 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %3707 = builtin.unrealized_conversion_cast %3706 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%3707) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "ChainIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb401(%3708 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3709 : !llvm.ptr):
    %3710 = "mini.invariant"(%3709) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3711 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb402] : () -> ()
  ^bb402:
    %3712 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%3712, %3711) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb403] : () -> ()
  ^bb403:
    %3713 = "llvm.extractvalue"(%3708) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3714 = "llvm.load"(%3711) : (!llvm.ptr) -> i32
    %3715 = "llvm.getelementptr"(%3713, %3714) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3716 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3717 = "llvm.getelementptr"(%3715, %3716) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3717) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 0 : i32, "meth_name" = "InterleaveIterable_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 1 : i32, "meth_name" = "InterleaveIterable_field_second"} : () -> ()
  "mini.func"() ({
  ^bb404(%3718 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3719 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3720 : !llvm.ptr, %3721 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3722 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3723 = "mini.wrap"(%3718) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterable">
    %3724 = "mini.to_fat_ptr"(%3723) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "InterleaveIterable", "invariant"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"InterleaveIterable">
    %3725 = "mini.wrap"(%3721) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %3726 = "mini.to_fat_ptr"(%3725) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3727 = "mini.field_access"(%3724) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    "mini.castassign"(%3727, %3726) ({
      %3728 = "mini.to_fat_ptr"(%3726) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "should_offset"} : (!mini.fatptr<"IntIterable">, !mini.fatptr<"IntIterable">) -> ()
    %3729 = "mini.wrap"(%3722) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %3730 = "mini.to_fat_ptr"(%3729) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %3731 = "mini.field_access"(%3724) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    "mini.castassign"(%3731, %3730) ({
      %3732 = "mini.to_fat_ptr"(%3730) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "should_offset"} : (!mini.fatptr<"IntIterable">, !mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "InterleaveIterable_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb405(%3733 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3734 : !llvm.ptr, %3735 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3736 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3737 = "mini.invariant"(%3734) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3738 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb406] : () -> ()
  ^bb407:
    %3739 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%3739, %3738) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb408] : () -> ()
  ^bb409:
    %3740 = "llvm.getelementptr"(%3734) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3741 = "llvm.load"(%3740) : (!llvm.ptr) -> !llvm.ptr
    %3742 = "llvm.getelementptr"(%3741) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3743 = "llvm.getelementptr"(%3741) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3744 = "llvm.getelementptr"(%3741) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3745 = "llvm.getelementptr"(%3741) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3746 = "llvm.load"(%3742) : (!llvm.ptr) -> i64
    %3747 = "llvm.load"(%3743) : (!llvm.ptr) -> i64
    %3748 = "llvm.load"(%3744) : (!llvm.ptr) -> !llvm.ptr
    %3749 = "llvm.load"(%3745) : (!llvm.ptr) -> !llvm.ptr
    %3750 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3751 = "llvm.ptrtoint"(%3750) : (!llvm.ptr) -> i64
    %3752 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3753 = "mini.subtype"(%3748, %3747, %3746, %3752, %3751, %3749) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3753) [^bb407, ^bb407] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb406:
    %3754 = "llvm.getelementptr"(%3734) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3755 = "llvm.load"(%3754) : (!llvm.ptr) -> !llvm.ptr
    %3756 = "llvm.getelementptr"(%3755) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3757 = "llvm.getelementptr"(%3755) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3758 = "llvm.getelementptr"(%3755) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3759 = "llvm.getelementptr"(%3755) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3760 = "llvm.load"(%3756) : (!llvm.ptr) -> i64
    %3761 = "llvm.load"(%3757) : (!llvm.ptr) -> i64
    %3762 = "llvm.load"(%3758) : (!llvm.ptr) -> !llvm.ptr
    %3763 = "llvm.load"(%3759) : (!llvm.ptr) -> !llvm.ptr
    %3764 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3765 = "llvm.ptrtoint"(%3764) : (!llvm.ptr) -> i64
    %3766 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3767 = "mini.subtype"(%3762, %3761, %3760, %3766, %3765, %3763) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3767) [^bb409, ^bb409] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb408:
    %3768 = "llvm.extractvalue"(%3733) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3769 = "llvm.load"(%3738) : (!llvm.ptr) -> i32
    %3770 = "llvm.getelementptr"(%3768, %3769) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3771 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3772 = "llvm.getelementptr"(%3770, %3771) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3772) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb410(%3773 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3774 : !llvm.ptr, %3775 : !llvm.struct<(!llvm.ptr)>):
    %3776 = "mini.invariant"(%3774) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3777 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb411] : () -> ()
  ^bb412:
    %3778 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%3778, %3777) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb413] : () -> ()
  ^bb411:
    %3779 = "llvm.getelementptr"(%3774) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3780 = "llvm.load"(%3779) : (!llvm.ptr) -> !llvm.ptr
    %3781 = "llvm.getelementptr"(%3780) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3782 = "llvm.getelementptr"(%3780) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3783 = "llvm.getelementptr"(%3780) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3784 = "llvm.getelementptr"(%3780) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3785 = "llvm.load"(%3781) : (!llvm.ptr) -> i64
    %3786 = "llvm.load"(%3782) : (!llvm.ptr) -> i64
    %3787 = "llvm.load"(%3783) : (!llvm.ptr) -> !llvm.ptr
    %3788 = "llvm.load"(%3784) : (!llvm.ptr) -> !llvm.ptr
    %3789 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3790 = "llvm.ptrtoint"(%3789) : (!llvm.ptr) -> i64
    %3791 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3792 = "mini.subtype"(%3787, %3786, %3785, %3791, %3790, %3788) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3792) [^bb412, ^bb412] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb413:
    %3793 = "llvm.extractvalue"(%3773) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3794 = "llvm.load"(%3777) : (!llvm.ptr) -> i32
    %3795 = "llvm.getelementptr"(%3793, %3794) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3796 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3797 = "llvm.getelementptr"(%3795, %3796) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3797) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb414(%3798 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3799 : !llvm.ptr, %3800 : i32, %3801 : !llvm.struct<(!llvm.ptr)>):
    %3802 = "mini.invariant"(%3799) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3803 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb415] : () -> ()
  ^bb416:
    %3804 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%3804, %3803) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb417] : () -> ()
  ^bb418:
    %3805 = "llvm.getelementptr"(%3799) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3806 = "llvm.load"(%3805) : (!llvm.ptr) -> !llvm.ptr
    %3807 = "llvm.getelementptr"(%3806) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3808 = "llvm.getelementptr"(%3806) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3809 = "llvm.getelementptr"(%3806) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3810 = "llvm.getelementptr"(%3806) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3811 = "llvm.load"(%3807) : (!llvm.ptr) -> i64
    %3812 = "llvm.load"(%3808) : (!llvm.ptr) -> i64
    %3813 = "llvm.load"(%3809) : (!llvm.ptr) -> !llvm.ptr
    %3814 = "llvm.load"(%3810) : (!llvm.ptr) -> !llvm.ptr
    %3815 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3816 = "llvm.ptrtoint"(%3815) : (!llvm.ptr) -> i64
    %3817 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3818 = "mini.subtype"(%3813, %3812, %3811, %3817, %3816, %3814) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3818) [^bb416, ^bb416] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb415:
    %3819 = "llvm.getelementptr"(%3799) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3820 = "llvm.load"(%3819) : (!llvm.ptr) -> !llvm.ptr
    %3821 = "llvm.getelementptr"(%3820) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3822 = "llvm.getelementptr"(%3820) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3823 = "llvm.getelementptr"(%3820) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3824 = "llvm.getelementptr"(%3820) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3825 = "llvm.load"(%3821) : (!llvm.ptr) -> i64
    %3826 = "llvm.load"(%3822) : (!llvm.ptr) -> i64
    %3827 = "llvm.load"(%3823) : (!llvm.ptr) -> !llvm.ptr
    %3828 = "llvm.load"(%3824) : (!llvm.ptr) -> !llvm.ptr
    %3829 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %3830 = "llvm.ptrtoint"(%3829) : (!llvm.ptr) -> i64
    %3831 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %3832 = "mini.subtype"(%3827, %3826, %3825, %3831, %3830, %3828) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3832) [^bb418, ^bb418] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb417:
    %3833 = "llvm.extractvalue"(%3798) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3834 = "llvm.load"(%3803) : (!llvm.ptr) -> i32
    %3835 = "llvm.getelementptr"(%3833, %3834) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3836 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3837 = "llvm.getelementptr"(%3835, %3836) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3837) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb419(%3838 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3839 : !llvm.ptr, %3840 : !llvm.struct<(!llvm.ptr)>):
    %3841 = "mini.invariant"(%3839) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3842 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb420] : () -> ()
  ^bb421:
    %3843 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%3843, %3842) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb422] : () -> ()
  ^bb420:
    %3844 = "llvm.getelementptr"(%3839) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3845 = "llvm.load"(%3844) : (!llvm.ptr) -> !llvm.ptr
    %3846 = "llvm.getelementptr"(%3845) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3847 = "llvm.getelementptr"(%3845) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3848 = "llvm.getelementptr"(%3845) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3849 = "llvm.getelementptr"(%3845) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3850 = "llvm.load"(%3846) : (!llvm.ptr) -> i64
    %3851 = "llvm.load"(%3847) : (!llvm.ptr) -> i64
    %3852 = "llvm.load"(%3848) : (!llvm.ptr) -> !llvm.ptr
    %3853 = "llvm.load"(%3849) : (!llvm.ptr) -> !llvm.ptr
    %3854 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3855 = "llvm.ptrtoint"(%3854) : (!llvm.ptr) -> i64
    %3856 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3857 = "mini.subtype"(%3852, %3851, %3850, %3856, %3855, %3853) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3857) [^bb421, ^bb421] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb422:
    %3858 = "llvm.extractvalue"(%3838) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3859 = "llvm.load"(%3842) : (!llvm.ptr) -> i32
    %3860 = "llvm.getelementptr"(%3858, %3859) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3861 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3862 = "llvm.getelementptr"(%3860, %3861) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3862) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb423(%3863 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3864 : !llvm.ptr, %3865 : !llvm.struct<(!llvm.ptr)>):
    %3866 = "mini.invariant"(%3864) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3867 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb424] : () -> ()
  ^bb425:
    %3868 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%3868, %3867) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb426] : () -> ()
  ^bb424:
    %3869 = "llvm.getelementptr"(%3864) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3870 = "llvm.load"(%3869) : (!llvm.ptr) -> !llvm.ptr
    %3871 = "llvm.getelementptr"(%3870) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3872 = "llvm.getelementptr"(%3870) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3873 = "llvm.getelementptr"(%3870) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3874 = "llvm.getelementptr"(%3870) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3875 = "llvm.load"(%3871) : (!llvm.ptr) -> i64
    %3876 = "llvm.load"(%3872) : (!llvm.ptr) -> i64
    %3877 = "llvm.load"(%3873) : (!llvm.ptr) -> !llvm.ptr
    %3878 = "llvm.load"(%3874) : (!llvm.ptr) -> !llvm.ptr
    %3879 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3880 = "llvm.ptrtoint"(%3879) : (!llvm.ptr) -> i64
    %3881 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3882 = "mini.subtype"(%3877, %3876, %3875, %3881, %3880, %3878) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3882) [^bb425, ^bb425] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb426:
    %3883 = "llvm.extractvalue"(%3863) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3884 = "llvm.load"(%3867) : (!llvm.ptr) -> i32
    %3885 = "llvm.getelementptr"(%3883, %3884) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3886 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3887 = "llvm.getelementptr"(%3885, %3886) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3887) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb427(%3888 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3889 : !llvm.ptr, %3890 : !llvm.struct<(!llvm.ptr)>):
    %3891 = "mini.invariant"(%3889) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3892 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb428] : () -> ()
  ^bb429:
    %3893 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%3893, %3892) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb430] : () -> ()
  ^bb428:
    %3894 = "llvm.getelementptr"(%3889) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3895 = "llvm.load"(%3894) : (!llvm.ptr) -> !llvm.ptr
    %3896 = "llvm.getelementptr"(%3895) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3897 = "llvm.getelementptr"(%3895) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3898 = "llvm.getelementptr"(%3895) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3899 = "llvm.getelementptr"(%3895) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3900 = "llvm.load"(%3896) : (!llvm.ptr) -> i64
    %3901 = "llvm.load"(%3897) : (!llvm.ptr) -> i64
    %3902 = "llvm.load"(%3898) : (!llvm.ptr) -> !llvm.ptr
    %3903 = "llvm.load"(%3899) : (!llvm.ptr) -> !llvm.ptr
    %3904 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3905 = "llvm.ptrtoint"(%3904) : (!llvm.ptr) -> i64
    %3906 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3907 = "mini.subtype"(%3902, %3901, %3900, %3906, %3905, %3903) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3907) [^bb429, ^bb429] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb430:
    %3908 = "llvm.extractvalue"(%3888) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3909 = "llvm.load"(%3892) : (!llvm.ptr) -> i32
    %3910 = "llvm.getelementptr"(%3908, %3909) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3911 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3912 = "llvm.getelementptr"(%3910, %3911) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3912) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb431(%3913 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3914 : !llvm.ptr, %3915 : !llvm.struct<(!llvm.ptr)>):
    %3916 = "mini.invariant"(%3914) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3917 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb432] : () -> ()
  ^bb433:
    %3918 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%3918, %3917) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb434] : () -> ()
  ^bb432:
    %3919 = "llvm.getelementptr"(%3914) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3920 = "llvm.load"(%3919) : (!llvm.ptr) -> !llvm.ptr
    %3921 = "llvm.getelementptr"(%3920) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3922 = "llvm.getelementptr"(%3920) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3923 = "llvm.getelementptr"(%3920) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3924 = "llvm.getelementptr"(%3920) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3925 = "llvm.load"(%3921) : (!llvm.ptr) -> i64
    %3926 = "llvm.load"(%3922) : (!llvm.ptr) -> i64
    %3927 = "llvm.load"(%3923) : (!llvm.ptr) -> !llvm.ptr
    %3928 = "llvm.load"(%3924) : (!llvm.ptr) -> !llvm.ptr
    %3929 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %3930 = "llvm.ptrtoint"(%3929) : (!llvm.ptr) -> i64
    %3931 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %3932 = "mini.subtype"(%3927, %3926, %3925, %3931, %3930, %3928) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3932) [^bb433, ^bb433] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb434:
    %3933 = "llvm.extractvalue"(%3913) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3934 = "llvm.load"(%3917) : (!llvm.ptr) -> i32
    %3935 = "llvm.getelementptr"(%3933, %3934) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3936 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3937 = "llvm.getelementptr"(%3935, %3936) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3937) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb435(%3938 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3939 : !llvm.ptr, %3940 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3941 = "mini.invariant"(%3939) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3942 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb436] : () -> ()
  ^bb437:
    %3943 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%3943, %3942) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb438] : () -> ()
  ^bb436:
    %3944 = "llvm.getelementptr"(%3939) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3945 = "llvm.load"(%3944) : (!llvm.ptr) -> !llvm.ptr
    %3946 = "llvm.getelementptr"(%3945) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3947 = "llvm.getelementptr"(%3945) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3948 = "llvm.getelementptr"(%3945) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3949 = "llvm.getelementptr"(%3945) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3950 = "llvm.load"(%3946) : (!llvm.ptr) -> i64
    %3951 = "llvm.load"(%3947) : (!llvm.ptr) -> i64
    %3952 = "llvm.load"(%3948) : (!llvm.ptr) -> !llvm.ptr
    %3953 = "llvm.load"(%3949) : (!llvm.ptr) -> !llvm.ptr
    %3954 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3955 = "llvm.ptrtoint"(%3954) : (!llvm.ptr) -> i64
    %3956 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3957 = "mini.subtype"(%3952, %3951, %3950, %3956, %3955, %3953) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3957) [^bb437, ^bb437] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb438:
    %3958 = "llvm.extractvalue"(%3938) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3959 = "llvm.load"(%3942) : (!llvm.ptr) -> i32
    %3960 = "llvm.getelementptr"(%3958, %3959) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3961 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3962 = "llvm.getelementptr"(%3960, %3961) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3962) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb439(%3963 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3964 : !llvm.ptr, %3965 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3966 = "mini.invariant"(%3964) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3967 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb440] : () -> ()
  ^bb441:
    %3968 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%3968, %3967) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb442] : () -> ()
  ^bb440:
    %3969 = "llvm.getelementptr"(%3964) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3970 = "llvm.load"(%3969) : (!llvm.ptr) -> !llvm.ptr
    %3971 = "llvm.getelementptr"(%3970) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3972 = "llvm.getelementptr"(%3970) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3973 = "llvm.getelementptr"(%3970) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3974 = "llvm.getelementptr"(%3970) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3975 = "llvm.load"(%3971) : (!llvm.ptr) -> i64
    %3976 = "llvm.load"(%3972) : (!llvm.ptr) -> i64
    %3977 = "llvm.load"(%3973) : (!llvm.ptr) -> !llvm.ptr
    %3978 = "llvm.load"(%3974) : (!llvm.ptr) -> !llvm.ptr
    %3979 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %3980 = "llvm.ptrtoint"(%3979) : (!llvm.ptr) -> i64
    %3981 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %3982 = "mini.subtype"(%3977, %3976, %3975, %3981, %3980, %3978) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%3982) [^bb441, ^bb441] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb442:
    %3983 = "llvm.extractvalue"(%3963) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3984 = "llvm.load"(%3967) : (!llvm.ptr) -> i32
    %3985 = "llvm.getelementptr"(%3983, %3984) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3986 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %3987 = "llvm.getelementptr"(%3985, %3986) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3987) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb443(%3988 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3989 : !llvm.ptr, %3990 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3991 = "mini.invariant"(%3989) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3992 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb444] : () -> ()
  ^bb445:
    %3993 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%3993, %3992) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb446] : () -> ()
  ^bb444:
    %3994 = "llvm.getelementptr"(%3989) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %3995 = "llvm.load"(%3994) : (!llvm.ptr) -> !llvm.ptr
    %3996 = "llvm.getelementptr"(%3995) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3997 = "llvm.getelementptr"(%3995) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3998 = "llvm.getelementptr"(%3995) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3999 = "llvm.getelementptr"(%3995) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4000 = "llvm.load"(%3996) : (!llvm.ptr) -> i64
    %4001 = "llvm.load"(%3997) : (!llvm.ptr) -> i64
    %4002 = "llvm.load"(%3998) : (!llvm.ptr) -> !llvm.ptr
    %4003 = "llvm.load"(%3999) : (!llvm.ptr) -> !llvm.ptr
    %4004 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4005 = "llvm.ptrtoint"(%4004) : (!llvm.ptr) -> i64
    %4006 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4007 = "mini.subtype"(%4002, %4001, %4000, %4006, %4005, %4003) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4007) [^bb445, ^bb445] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb446:
    %4008 = "llvm.extractvalue"(%3988) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4009 = "llvm.load"(%3992) : (!llvm.ptr) -> i32
    %4010 = "llvm.getelementptr"(%4008, %4009) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4011 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4012 = "llvm.getelementptr"(%4010, %4011) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4012) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb447(%4013 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4014 : !llvm.ptr, %4015 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4016 = "mini.invariant"(%4014) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4017 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb448] : () -> ()
  ^bb449:
    %4018 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%4018, %4017) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb450] : () -> ()
  ^bb448:
    %4019 = "llvm.getelementptr"(%4014) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4020 = "llvm.load"(%4019) : (!llvm.ptr) -> !llvm.ptr
    %4021 = "llvm.getelementptr"(%4020) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4022 = "llvm.getelementptr"(%4020) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4023 = "llvm.getelementptr"(%4020) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4024 = "llvm.getelementptr"(%4020) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4025 = "llvm.load"(%4021) : (!llvm.ptr) -> i64
    %4026 = "llvm.load"(%4022) : (!llvm.ptr) -> i64
    %4027 = "llvm.load"(%4023) : (!llvm.ptr) -> !llvm.ptr
    %4028 = "llvm.load"(%4024) : (!llvm.ptr) -> !llvm.ptr
    %4029 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4030 = "llvm.ptrtoint"(%4029) : (!llvm.ptr) -> i64
    %4031 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4032 = "mini.subtype"(%4027, %4026, %4025, %4031, %4030, %4028) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4032) [^bb449, ^bb449] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb450:
    %4033 = "llvm.extractvalue"(%4013) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4034 = "llvm.load"(%4017) : (!llvm.ptr) -> i32
    %4035 = "llvm.getelementptr"(%4033, %4034) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4036 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4037 = "llvm.getelementptr"(%4035, %4036) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4037) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb451(%4038 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4039 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4040 : !llvm.ptr):
    %4041 = "mini.wrap"(%4038) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterable">
    %4042 = "mini.to_fat_ptr"(%4041) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "InterleaveIterable", "invariant"} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"InterleaveIterable">
    %4043 = "mini.field_access"(%4042) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    %4044 = "mini.unwrap"(%4043) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4045 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4046 = "mini.method_call"(%4045, %4044) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4047 = "mini.to_fat_ptr"(%4046) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4048 = "mini.field_access"(%4042) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    %4049 = "mini.unwrap"(%4048) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4050 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4051 = "mini.method_call"(%4050, %4049) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4052 = "mini.to_fat_ptr"(%4051) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4053 = "mini.unwrap"(%4047) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4054 = "mini.unwrap"(%4052) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4055 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "InterleaveIterator", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"InterleaveIterator">
    %4056 = "mini.field_access"(%4042) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    %4057 = "mini.unwrap"(%4056) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4058 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4059 = "mini.method_call"(%4058, %4057) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4060 = "mini.to_fat_ptr"(%4059) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4061 = "mini.field_access"(%4042) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"InterleaveIterable">) -> !mini.fatptr<"IntIterable">
    %4062 = "mini.unwrap"(%4061) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4063 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4064 = "mini.method_call"(%4063, %4062) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4065 = "mini.to_fat_ptr"(%4064) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4066 = "mini.to_fat_ptr"(%4060) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %4067 = "mini.unwrap"(%4066) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4068 = "mini.to_fat_ptr"(%4065) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %4069 = "mini.unwrap"(%4068) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4070 = "mini.unwrap"(%4055) : (!mini.fatptr<"InterleaveIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4071 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %4072 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %4073 = "mini.parameterizations_array"(%4071, %4072) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%4073, %4070, %4067, %4069) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 9 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %4074 = "mini.to_fat_ptr"(%4055) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%4074) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "InterleaveIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb452(%4075 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4076 : !llvm.ptr):
    %4077 = "mini.invariant"(%4076) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4078 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb453] : () -> ()
  ^bb453:
    %4079 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%4079, %4078) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb454] : () -> ()
  ^bb454:
    %4080 = "llvm.extractvalue"(%4075) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4081 = "llvm.load"(%4078) : (!llvm.ptr) -> i32
    %4082 = "llvm.getelementptr"(%4080, %4081) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4083 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4084 = "llvm.getelementptr"(%4082, %4083) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4084) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "offset" = 0 : i32, "meth_name" = "InterleaveIterator_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "offset" = 1 : i32, "meth_name" = "InterleaveIterator_field_second"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "offset" = 2 : i32, "meth_name" = "InterleaveIterator_field_on_first"} : () -> ()
  "mini.func"() ({
  ^bb455(%4085 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4086 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4087 : !llvm.ptr, %4088 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4089 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4090 = "mini.wrap"(%4085) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterator">
    %4091 = "mini.to_fat_ptr"(%4090) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "InterleaveIterator", "invariant"} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"InterleaveIterator">
    %4092 = "mini.wrap"(%4088) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %4093 = "mini.to_fat_ptr"(%4092) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %4094 = "mini.field_access"(%4091) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"IntIterator">
    "mini.castassign"(%4094, %4093) ({
      %4095 = "mini.to_fat_ptr"(%4093) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "should_offset"} : (!mini.fatptr<"IntIterator">, !mini.fatptr<"IntIterator">) -> ()
    %4096 = "mini.wrap"(%4089) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %4097 = "mini.to_fat_ptr"(%4096) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %4098 = "mini.field_access"(%4091) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"IntIterator">
    "mini.castassign"(%4098, %4097) ({
      %4099 = "mini.to_fat_ptr"(%4097) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "should_offset"} : (!mini.fatptr<"IntIterator">, !mini.fatptr<"IntIterator">) -> ()
    %4100 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %4101 = "mini.field_access"(%4091) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"InterleaveIterator">) -> !mini.ptr<i1>
    "mini.castassign"(%4101, %4100) ({
      %4102 = builtin.unrealized_conversion_cast %4100 : !mini.ptr<i1> to !mini.ptr<i1>
    }) {"from_typ" = i1, "to_typ" = i1, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ", "should_offset"} : (!mini.ptr<i1>, !mini.ptr<i1>) -> ()
  }) {"func_name" = "InterleaveIterator_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb456(%4103 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4104 : !llvm.ptr, %4105 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4106 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4107 = "mini.invariant"(%4104) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4108 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb457] : () -> ()
  ^bb458:
    %4109 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%4109, %4108) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb459] : () -> ()
  ^bb460:
    %4110 = "llvm.getelementptr"(%4104) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4111 = "llvm.load"(%4110) : (!llvm.ptr) -> !llvm.ptr
    %4112 = "llvm.getelementptr"(%4111) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4113 = "llvm.getelementptr"(%4111) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4114 = "llvm.getelementptr"(%4111) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4115 = "llvm.getelementptr"(%4111) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4116 = "llvm.load"(%4112) : (!llvm.ptr) -> i64
    %4117 = "llvm.load"(%4113) : (!llvm.ptr) -> i64
    %4118 = "llvm.load"(%4114) : (!llvm.ptr) -> !llvm.ptr
    %4119 = "llvm.load"(%4115) : (!llvm.ptr) -> !llvm.ptr
    %4120 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %4121 = "llvm.ptrtoint"(%4120) : (!llvm.ptr) -> i64
    %4122 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %4123 = "mini.subtype"(%4118, %4117, %4116, %4122, %4121, %4119) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4123) [^bb458, ^bb458] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb457:
    %4124 = "llvm.getelementptr"(%4104) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4125 = "llvm.load"(%4124) : (!llvm.ptr) -> !llvm.ptr
    %4126 = "llvm.getelementptr"(%4125) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4127 = "llvm.getelementptr"(%4125) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4128 = "llvm.getelementptr"(%4125) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4129 = "llvm.getelementptr"(%4125) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4130 = "llvm.load"(%4126) : (!llvm.ptr) -> i64
    %4131 = "llvm.load"(%4127) : (!llvm.ptr) -> i64
    %4132 = "llvm.load"(%4128) : (!llvm.ptr) -> !llvm.ptr
    %4133 = "llvm.load"(%4129) : (!llvm.ptr) -> !llvm.ptr
    %4134 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %4135 = "llvm.ptrtoint"(%4134) : (!llvm.ptr) -> i64
    %4136 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %4137 = "mini.subtype"(%4132, %4131, %4130, %4136, %4135, %4133) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4137) [^bb460, ^bb460] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb459:
    %4138 = "llvm.extractvalue"(%4103) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4139 = "llvm.load"(%4108) : (!llvm.ptr) -> i32
    %4140 = "llvm.getelementptr"(%4138, %4139) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4141 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4142 = "llvm.getelementptr"(%4140, %4141) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4142) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterator_B_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb461(%4143 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4144 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4145 : !llvm.ptr):
    %4146 = "mini.wrap"(%4143) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterator">
    %4147 = "mini.to_fat_ptr"(%4146) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "InterleaveIterator", "invariant"} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"InterleaveIterator">
    %4148 = "mini.field_access"(%4147) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"InterleaveIterator">) -> !mini.ptr<i1>
    %4149 = "mini.unwrap"(%4148) : (!mini.ptr<i1>) -> i1
    "mini.if"(%4149) ({
      %4150 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %4151 = "mini.field_access"(%4147) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"InterleaveIterator">) -> !mini.ptr<i1>
      "mini.castassign"(%4151, %4150) ({
        %4152 = builtin.unrealized_conversion_cast %4150 : !mini.ptr<i1> to !mini.ptr<i1>
      }) {"from_typ" = i1, "to_typ" = i1, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ", "should_offset"} : (!mini.ptr<i1>, !mini.ptr<i1>) -> ()
      %4153 = "mini.field_access"(%4147) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"IntIterator">
      %4154 = "mini.unwrap"(%4153) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4155 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %4156 = "mini.method_call"(%4155, %4154) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %4157 = builtin.unrealized_conversion_cast %4156 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %4158 = builtin.unrealized_conversion_cast %4157 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%4158) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %4159 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %4160 = "mini.field_access"(%4147) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"InterleaveIterator">) -> !mini.ptr<i1>
    "mini.castassign"(%4160, %4159) ({
      %4161 = builtin.unrealized_conversion_cast %4159 : !mini.ptr<i1> to !mini.ptr<i1>
    }) {"from_typ" = i1, "to_typ" = i1, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ", "should_offset"} : (!mini.ptr<i1>, !mini.ptr<i1>) -> ()
    %4162 = "mini.field_access"(%4147) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"InterleaveIterator">) -> !mini.fatptr<"IntIterator">
    %4163 = "mini.unwrap"(%4162) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4164 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4165 = "mini.method_call"(%4164, %4163) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4166 = builtin.unrealized_conversion_cast %4165 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4167 = builtin.unrealized_conversion_cast %4166 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%4167) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "InterleaveIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb462(%4168 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4169 : !llvm.ptr):
    %4170 = "mini.invariant"(%4169) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4171 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb463] : () -> ()
  ^bb463:
    %4172 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%4172, %4171) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb464] : () -> ()
  ^bb464:
    %4173 = "llvm.extractvalue"(%4168) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4174 = "llvm.load"(%4171) : (!llvm.ptr) -> i32
    %4175 = "llvm.getelementptr"(%4173, %4174) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4176 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4177 = "llvm.getelementptr"(%4175, %4176) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4177) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb465(%4178 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4179 : !llvm.ptr):
    %4180 = "mini.invariant"(%4179) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4181 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb466] : () -> ()
  ^bb466:
    %4182 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%4182, %4181) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb467] : () -> ()
  ^bb467:
    %4183 = "llvm.extractvalue"(%4178) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4184 = "llvm.load"(%4181) : (!llvm.ptr) -> i32
    %4185 = "llvm.getelementptr"(%4183, %4184) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<4 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4186 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4187 = "llvm.getelementptr"(%4185, %4186) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4187) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntTupleIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb468(%4188 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4189 : !llvm.ptr):
    %4190 = "mini.invariant"(%4189) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4191 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb469] : () -> ()
  ^bb469:
    %4192 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%4192, %4191) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb470] : () -> ()
  ^bb470:
    %4193 = "llvm.extractvalue"(%4188) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4194 = "llvm.load"(%4191) : (!llvm.ptr) -> i32
    %4195 = "llvm.getelementptr"(%4193, %4194) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4196 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4197 = "llvm.getelementptr"(%4195, %4196) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4197) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntTupleIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 0 : i32, "meth_name" = "ZipIterable_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 1 : i32, "meth_name" = "ZipIterable_field_second"} : () -> ()
  "mini.func"() ({
  ^bb471(%4198 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4199 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4200 : !llvm.ptr, %4201 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4202 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4203 = "mini.wrap"(%4198) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterable">
    %4204 = "mini.to_fat_ptr"(%4203) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable", "invariant"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"ZipIterable">
    %4205 = "mini.wrap"(%4201) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %4206 = "mini.to_fat_ptr"(%4205) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4207 = "mini.field_access"(%4204) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"IntIterable">
    "mini.castassign"(%4207, %4206) ({
      %4208 = "mini.to_fat_ptr"(%4206) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "should_offset"} : (!mini.fatptr<"IntIterable">, !mini.fatptr<"IntIterable">) -> ()
    %4209 = "mini.wrap"(%4202) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %4210 = "mini.to_fat_ptr"(%4209) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4211 = "mini.field_access"(%4204) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"IntIterable">
    "mini.castassign"(%4211, %4210) ({
      %4212 = "mini.to_fat_ptr"(%4210) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "should_offset"} : (!mini.fatptr<"IntIterable">, !mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "ZipIterable_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb472(%4213 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4214 : !llvm.ptr, %4215 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4216 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4217 = "mini.invariant"(%4214) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4218 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb473] : () -> ()
  ^bb474:
    %4219 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%4219, %4218) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb475] : () -> ()
  ^bb476:
    %4220 = "llvm.getelementptr"(%4214) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4221 = "llvm.load"(%4220) : (!llvm.ptr) -> !llvm.ptr
    %4222 = "llvm.getelementptr"(%4221) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4223 = "llvm.getelementptr"(%4221) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4224 = "llvm.getelementptr"(%4221) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4225 = "llvm.getelementptr"(%4221) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4226 = "llvm.load"(%4222) : (!llvm.ptr) -> i64
    %4227 = "llvm.load"(%4223) : (!llvm.ptr) -> i64
    %4228 = "llvm.load"(%4224) : (!llvm.ptr) -> !llvm.ptr
    %4229 = "llvm.load"(%4225) : (!llvm.ptr) -> !llvm.ptr
    %4230 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4231 = "llvm.ptrtoint"(%4230) : (!llvm.ptr) -> i64
    %4232 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4233 = "mini.subtype"(%4228, %4227, %4226, %4232, %4231, %4229) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4233) [^bb474, ^bb474] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb473:
    %4234 = "llvm.getelementptr"(%4214) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4235 = "llvm.load"(%4234) : (!llvm.ptr) -> !llvm.ptr
    %4236 = "llvm.getelementptr"(%4235) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4237 = "llvm.getelementptr"(%4235) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4238 = "llvm.getelementptr"(%4235) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4239 = "llvm.getelementptr"(%4235) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4240 = "llvm.load"(%4236) : (!llvm.ptr) -> i64
    %4241 = "llvm.load"(%4237) : (!llvm.ptr) -> i64
    %4242 = "llvm.load"(%4238) : (!llvm.ptr) -> !llvm.ptr
    %4243 = "llvm.load"(%4239) : (!llvm.ptr) -> !llvm.ptr
    %4244 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4245 = "llvm.ptrtoint"(%4244) : (!llvm.ptr) -> i64
    %4246 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4247 = "mini.subtype"(%4242, %4241, %4240, %4246, %4245, %4243) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4247) [^bb476, ^bb476] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb475:
    %4248 = "llvm.extractvalue"(%4213) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4249 = "llvm.load"(%4218) : (!llvm.ptr) -> i32
    %4250 = "llvm.getelementptr"(%4248, %4249) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4251 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4252 = "llvm.getelementptr"(%4250, %4251) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4252) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb477(%4253 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4254 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4255 : !llvm.ptr):
    %4256 = "mini.wrap"(%4253) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterable">
    %4257 = "mini.to_fat_ptr"(%4256) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable", "invariant"} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"ZipIterable">
    %4258 = "mini.field_access"(%4257) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"IntIterable">
    %4259 = "mini.unwrap"(%4258) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4260 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4261 = "mini.method_call"(%4260, %4259) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4262 = "mini.to_fat_ptr"(%4261) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4263 = "mini.field_access"(%4257) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"IntIterable">
    %4264 = "mini.unwrap"(%4263) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4265 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4266 = "mini.method_call"(%4265, %4264) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4267 = "mini.to_fat_ptr"(%4266) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4268 = "mini.unwrap"(%4262) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4269 = "mini.unwrap"(%4267) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4270 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterator", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"ZipIterator">
    %4271 = "mini.field_access"(%4257) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"IntIterable">
    %4272 = "mini.unwrap"(%4271) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4273 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4274 = "mini.method_call"(%4273, %4272) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4275 = "mini.to_fat_ptr"(%4274) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4276 = "mini.field_access"(%4257) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterable">) -> !mini.fatptr<"IntIterable">
    %4277 = "mini.unwrap"(%4276) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4278 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4279 = "mini.method_call"(%4278, %4277) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4280 = "mini.to_fat_ptr"(%4279) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4281 = "mini.to_fat_ptr"(%4275) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %4282 = "mini.unwrap"(%4281) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4283 = "mini.to_fat_ptr"(%4280) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %4284 = "mini.unwrap"(%4283) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4285 = "mini.unwrap"(%4270) : (!mini.fatptr<"ZipIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4286 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %4287 = "mini.parameterization"() {"id_hierarchy" = ["IntIterator"], "name_hierarchy" = ["IntIterator"]} : () -> !llvm.ptr
    %4288 = "mini.parameterizations_array"(%4286, %4287) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%4288, %4285, %4282, %4284) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %4289 = "mini.to_fat_ptr"(%4270) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%4289) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "ZipIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb478(%4290 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4291 : !llvm.ptr):
    %4292 = "mini.invariant"(%4291) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4293 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb479] : () -> ()
  ^bb479:
    %4294 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%4294, %4293) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb480] : () -> ()
  ^bb480:
    %4295 = "llvm.extractvalue"(%4290) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4296 = "llvm.load"(%4293) : (!llvm.ptr) -> i32
    %4297 = "llvm.getelementptr"(%4295, %4296) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4298 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4299 = "llvm.getelementptr"(%4297, %4298) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4299) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 0 : i32, "meth_name" = "ZipIterator_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 1 : i32, "meth_name" = "ZipIterator_field_second"} : () -> ()
  "mini.func"() ({
  ^bb481(%4300 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4301 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4302 : !llvm.ptr, %4303 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4304 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4305 = "mini.wrap"(%4300) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterator">
    %4306 = "mini.to_fat_ptr"(%4305) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator", "to_typ_name" = "ZipIterator", "invariant"} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"ZipIterator">
    %4307 = "mini.wrap"(%4303) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %4308 = "mini.to_fat_ptr"(%4307) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %4309 = "mini.field_access"(%4306) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"IntIterator">
    "mini.castassign"(%4309, %4308) ({
      %4310 = "mini.to_fat_ptr"(%4308) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "should_offset"} : (!mini.fatptr<"IntIterator">, !mini.fatptr<"IntIterator">) -> ()
    %4311 = "mini.wrap"(%4304) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterator">
    %4312 = "mini.to_fat_ptr"(%4311) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %4313 = "mini.field_access"(%4306) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"IntIterator">
    "mini.castassign"(%4313, %4312) ({
      %4314 = "mini.to_fat_ptr"(%4312) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "should_offset"} : (!mini.fatptr<"IntIterator">, !mini.fatptr<"IntIterator">) -> ()
  }) {"func_name" = "ZipIterator_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb482(%4315 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4316 : !llvm.ptr, %4317 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4318 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4319 = "mini.invariant"(%4316) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4320 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb483] : () -> ()
  ^bb484:
    %4321 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%4321, %4320) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb485] : () -> ()
  ^bb486:
    %4322 = "llvm.getelementptr"(%4316) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4323 = "llvm.load"(%4322) : (!llvm.ptr) -> !llvm.ptr
    %4324 = "llvm.getelementptr"(%4323) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4325 = "llvm.getelementptr"(%4323) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4326 = "llvm.getelementptr"(%4323) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4327 = "llvm.getelementptr"(%4323) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4328 = "llvm.load"(%4324) : (!llvm.ptr) -> i64
    %4329 = "llvm.load"(%4325) : (!llvm.ptr) -> i64
    %4330 = "llvm.load"(%4326) : (!llvm.ptr) -> !llvm.ptr
    %4331 = "llvm.load"(%4327) : (!llvm.ptr) -> !llvm.ptr
    %4332 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %4333 = "llvm.ptrtoint"(%4332) : (!llvm.ptr) -> i64
    %4334 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %4335 = "mini.subtype"(%4330, %4329, %4328, %4334, %4333, %4331) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4335) [^bb484, ^bb484] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb483:
    %4336 = "llvm.getelementptr"(%4316) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4337 = "llvm.load"(%4336) : (!llvm.ptr) -> !llvm.ptr
    %4338 = "llvm.getelementptr"(%4337) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4339 = "llvm.getelementptr"(%4337) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4340 = "llvm.getelementptr"(%4337) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4341 = "llvm.getelementptr"(%4337) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4342 = "llvm.load"(%4338) : (!llvm.ptr) -> i64
    %4343 = "llvm.load"(%4339) : (!llvm.ptr) -> i64
    %4344 = "llvm.load"(%4340) : (!llvm.ptr) -> !llvm.ptr
    %4345 = "llvm.load"(%4341) : (!llvm.ptr) -> !llvm.ptr
    %4346 = "mini.addr_of"() {"global_name" = @IntIterator} : () -> !llvm.ptr
    %4347 = "llvm.ptrtoint"(%4346) : (!llvm.ptr) -> i64
    %4348 = "llvm.mlir.constant"() <{"value" = 17513659798052893061 : i64}> : () -> i64
    %4349 = "mini.subtype"(%4344, %4343, %4342, %4348, %4347, %4345) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4349) [^bb486, ^bb486] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb485:
    %4350 = "llvm.extractvalue"(%4315) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4351 = "llvm.load"(%4320) : (!llvm.ptr) -> i32
    %4352 = "llvm.getelementptr"(%4350, %4351) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4353 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4354 = "llvm.getelementptr"(%4352, %4353) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4354) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterator_B_init_firstIntIterator_secondIntIterator", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb487(%4355 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4356 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4357 : !llvm.ptr):
    %4358 = "mini.wrap"(%4355) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterator">
    %4359 = "mini.to_fat_ptr"(%4358) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator", "to_typ_name" = "ZipIterator", "invariant"} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"ZipIterator">
    %4360 = "mini.field_access"(%4359) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"IntIterator">
    %4361 = "mini.unwrap"(%4360) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4362 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4363 = "mini.method_call"(%4362, %4361) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4364 = builtin.unrealized_conversion_cast %4363 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4365 = "mini.field_access"(%4359) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ZipIterator">) -> !mini.fatptr<"IntIterator">
    %4366 = "mini.unwrap"(%4365) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4367 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4368 = "mini.method_call"(%4367, %4366) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4369 = builtin.unrealized_conversion_cast %4368 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4370 = "mini.checkflag"(%4364) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
    %4371 = "mini.unwrap"(%4370) : (i1) -> i1
    %4372 = builtin.unrealized_conversion_cast %4364 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.if"(%4371) ({
      %4373 = "mini.narrow"(%4372) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %4374 = "mini.checkflag"(%4369) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %4375 = "mini.unwrap"(%4374) : (i1) -> i1
      %4376 = builtin.unrealized_conversion_cast %4369 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%4375) ({
        %4377 = "mini.narrow"(%4376) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %4378 = "mini.unwrap"(%4373) : (!mini.ptr<i32>) -> i32
        %4379 = "mini.unwrap"(%4377) : (!mini.ptr<i32>) -> i32
        %4380 = "mini.create_tuple"(%4378, %4379) {"typ" = !llvm.struct<(i32, i32)>} : (i32, i32) -> !mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>
        %4381 = "mini.unionize"(%4380) {"from_typ" = !llvm.struct<(i32, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "tuple_typ", "to_typ_name" = "union_typ"} : (!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>) -> !mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>
        "mini.return"(%4381) : (!mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>) -> ()
        "mini.castassign"(%4376, %4377) ({
          %4382 = "mini.unionize"(%4377) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%4372, %4373) ({
        %4383 = "mini.unionize"(%4373) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %4384 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %4385 = "mini.unionize"(%4384) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>
    "mini.return"(%4385) : (!mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>) -> ()
  }) {"func_name" = "ZipIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb488(%4386 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4387 : !llvm.ptr):
    %4388 = "mini.invariant"(%4387) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4389 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb489] : () -> ()
  ^bb489:
    %4390 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%4390, %4389) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb490] : () -> ()
  ^bb490:
    %4391 = "llvm.extractvalue"(%4386) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4392 = "llvm.load"(%4389) : (!llvm.ptr) -> i32
    %4393 = "llvm.getelementptr"(%4391, %4392) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4394 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4395 = "llvm.getelementptr"(%4393, %4394) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4395) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 0 : i32, "meth_name" = "ProductIterable_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 1 : i32, "meth_name" = "ProductIterable_field_second"} : () -> ()
  "mini.func"() ({
  ^bb491(%4396 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4397 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4398 : !llvm.ptr, %4399 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4400 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4401 = "mini.wrap"(%4396) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterable">
    %4402 = "mini.to_fat_ptr"(%4401) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable", "invariant"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"ProductIterable">
    %4403 = "mini.wrap"(%4399) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %4404 = "mini.to_fat_ptr"(%4403) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4405 = "mini.field_access"(%4402) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"IntIterable">
    "mini.castassign"(%4405, %4404) ({
      %4406 = "mini.to_fat_ptr"(%4404) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "should_offset"} : (!mini.fatptr<"IntIterable">, !mini.fatptr<"IntIterable">) -> ()
    %4407 = "mini.wrap"(%4400) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %4408 = "mini.to_fat_ptr"(%4407) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4409 = "mini.field_access"(%4402) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"IntIterable">
    "mini.castassign"(%4409, %4408) ({
      %4410 = "mini.to_fat_ptr"(%4408) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "should_offset"} : (!mini.fatptr<"IntIterable">, !mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "ProductIterable_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb492(%4411 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4412 : !llvm.ptr, %4413 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4414 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4415 = "mini.invariant"(%4412) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4416 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb493] : () -> ()
  ^bb494:
    %4417 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%4417, %4416) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb495] : () -> ()
  ^bb496:
    %4418 = "llvm.getelementptr"(%4412) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4419 = "llvm.load"(%4418) : (!llvm.ptr) -> !llvm.ptr
    %4420 = "llvm.getelementptr"(%4419) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4421 = "llvm.getelementptr"(%4419) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4422 = "llvm.getelementptr"(%4419) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4423 = "llvm.getelementptr"(%4419) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4424 = "llvm.load"(%4420) : (!llvm.ptr) -> i64
    %4425 = "llvm.load"(%4421) : (!llvm.ptr) -> i64
    %4426 = "llvm.load"(%4422) : (!llvm.ptr) -> !llvm.ptr
    %4427 = "llvm.load"(%4423) : (!llvm.ptr) -> !llvm.ptr
    %4428 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4429 = "llvm.ptrtoint"(%4428) : (!llvm.ptr) -> i64
    %4430 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4431 = "mini.subtype"(%4426, %4425, %4424, %4430, %4429, %4427) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4431) [^bb494, ^bb494] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb493:
    %4432 = "llvm.getelementptr"(%4412) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4433 = "llvm.load"(%4432) : (!llvm.ptr) -> !llvm.ptr
    %4434 = "llvm.getelementptr"(%4433) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4435 = "llvm.getelementptr"(%4433) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4436 = "llvm.getelementptr"(%4433) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4437 = "llvm.getelementptr"(%4433) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4438 = "llvm.load"(%4434) : (!llvm.ptr) -> i64
    %4439 = "llvm.load"(%4435) : (!llvm.ptr) -> i64
    %4440 = "llvm.load"(%4436) : (!llvm.ptr) -> !llvm.ptr
    %4441 = "llvm.load"(%4437) : (!llvm.ptr) -> !llvm.ptr
    %4442 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4443 = "llvm.ptrtoint"(%4442) : (!llvm.ptr) -> i64
    %4444 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4445 = "mini.subtype"(%4440, %4439, %4438, %4444, %4443, %4441) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4445) [^bb496, ^bb496] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb495:
    %4446 = "llvm.extractvalue"(%4411) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4447 = "llvm.load"(%4416) : (!llvm.ptr) -> i32
    %4448 = "llvm.getelementptr"(%4446, %4447) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4449 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4450 = "llvm.getelementptr"(%4448, %4449) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4450) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_init_firstIntIterable_secondIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb497(%4451 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4452 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4453 : !llvm.ptr):
    %4454 = "mini.wrap"(%4451) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterable">
    %4455 = "mini.to_fat_ptr"(%4454) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable", "invariant"} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"ProductIterable">
    %4456 = "mini.field_access"(%4455) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"IntIterable">
    %4457 = "mini.field_access"(%4455) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"IntIterable">
    %4458 = "mini.unwrap"(%4456) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4459 = "mini.unwrap"(%4457) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4460 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>)>, "class_name" = "ProductIterator", "num_data_fields" = 4 : i32} : () -> !mini.fatptr<"ProductIterator">
    %4461 = "mini.field_access"(%4455) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"IntIterable">
    %4462 = "mini.field_access"(%4455) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ProductIterable">) -> !mini.fatptr<"IntIterable">
    %4463 = "mini.to_fat_ptr"(%4461) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4464 = "mini.unwrap"(%4463) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4465 = "mini.to_fat_ptr"(%4462) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4466 = "mini.unwrap"(%4465) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4467 = "mini.unwrap"(%4460) : (!mini.fatptr<"ProductIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4468 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %4469 = "mini.parameterization"() {"id_hierarchy" = ["IntIterable"], "name_hierarchy" = ["IntIterable"]} : () -> !llvm.ptr
    %4470 = "mini.parameterizations_array"(%4468, %4469) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%4470, %4467, %4464, %4466) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %4471 = "mini.to_fat_ptr"(%4460) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%4471) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "ProductIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb498(%4472 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4473 : !llvm.ptr):
    %4474 = "mini.invariant"(%4473) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4475 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb499] : () -> ()
  ^bb499:
    %4476 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%4476, %4475) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb500] : () -> ()
  ^bb500:
    %4477 = "llvm.extractvalue"(%4472) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4478 = "llvm.load"(%4475) : (!llvm.ptr) -> i32
    %4479 = "llvm.getelementptr"(%4477, %4478) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4480 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4481 = "llvm.getelementptr"(%4479, %4480) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4481) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>)>, "offset" = 0 : i32, "meth_name" = "ProductIterator_field_first_iterator"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>)>, "offset" = 1 : i32, "meth_name" = "ProductIterator_field_second_iterator"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>)>, "offset" = 2 : i32, "meth_name" = "ProductIterator_field_second_iterable"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i32)>)>, "offset" = 3 : i32, "meth_name" = "ProductIterator_field_current_first"} : () -> ()
  "mini.func"() ({
  ^bb501(%4482 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4483 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4484 : !llvm.ptr, %4485 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4486 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4487 = "mini.wrap"(%4482) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterator">
    %4488 = "mini.to_fat_ptr"(%4487) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator", "to_typ_name" = "ProductIterator", "invariant"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"ProductIterator">
    %4489 = "mini.wrap"(%4485) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %4490 = "mini.to_fat_ptr"(%4489) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4491 = "mini.wrap"(%4486) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %4492 = "mini.to_fat_ptr"(%4491) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %4493 = "mini.field_access"(%4488) {"offset" = 2 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterable">
    "mini.castassign"(%4493, %4492) ({
      %4494 = "mini.to_fat_ptr"(%4492) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "should_offset"} : (!mini.fatptr<"IntIterable">, !mini.fatptr<"IntIterable">) -> ()
    %4495 = "mini.unwrap"(%4490) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4496 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4497 = "mini.method_call"(%4496, %4495) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4498 = "mini.to_fat_ptr"(%4497) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4499 = "mini.field_access"(%4488) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterator">
    "mini.castassign"(%4499, %4498) ({
      %4500 = "mini.to_fat_ptr"(%4498) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "should_offset"} : (!mini.fatptr<"IntIterator">, !mini.fatptr<"IntIterator">) -> ()
    %4501 = "mini.field_access"(%4488) {"offset" = 2 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterable">
    %4502 = "mini.unwrap"(%4501) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4503 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4504 = "mini.method_call"(%4503, %4502) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %4505 = "mini.to_fat_ptr"(%4504) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %4506 = "mini.field_access"(%4488) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterator">
    "mini.castassign"(%4506, %4505) ({
      %4507 = "mini.to_fat_ptr"(%4505) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "should_offset"} : (!mini.fatptr<"IntIterator">, !mini.fatptr<"IntIterator">) -> ()
    %4508 = "mini.field_access"(%4488) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterator">
    %4509 = "mini.unwrap"(%4508) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4510 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4511 = "mini.method_call"(%4510, %4509) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4512 = builtin.unrealized_conversion_cast %4511 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4513 = "mini.field_access"(%4488) {"offset" = 3 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ProductIterator">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.castassign"(%4513, %4512) ({
      %4514 = builtin.unrealized_conversion_cast %4512 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "ProductIterator_init_first_iterableIntIterable_second_iterableIntIterable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb502(%4515 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4516 : !llvm.ptr, %4517 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4518 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4519 = "mini.invariant"(%4516) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4520 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb503] : () -> ()
  ^bb504:
    %4521 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%4521, %4520) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb505] : () -> ()
  ^bb506:
    %4522 = "llvm.getelementptr"(%4516) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4523 = "llvm.load"(%4522) : (!llvm.ptr) -> !llvm.ptr
    %4524 = "llvm.getelementptr"(%4523) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4525 = "llvm.getelementptr"(%4523) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4526 = "llvm.getelementptr"(%4523) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4527 = "llvm.getelementptr"(%4523) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4528 = "llvm.load"(%4524) : (!llvm.ptr) -> i64
    %4529 = "llvm.load"(%4525) : (!llvm.ptr) -> i64
    %4530 = "llvm.load"(%4526) : (!llvm.ptr) -> !llvm.ptr
    %4531 = "llvm.load"(%4527) : (!llvm.ptr) -> !llvm.ptr
    %4532 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4533 = "llvm.ptrtoint"(%4532) : (!llvm.ptr) -> i64
    %4534 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4535 = "mini.subtype"(%4530, %4529, %4528, %4534, %4533, %4531) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4535) [^bb504, ^bb504] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb503:
    %4536 = "llvm.getelementptr"(%4516) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4537 = "llvm.load"(%4536) : (!llvm.ptr) -> !llvm.ptr
    %4538 = "llvm.getelementptr"(%4537) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4539 = "llvm.getelementptr"(%4537) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4540 = "llvm.getelementptr"(%4537) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4541 = "llvm.getelementptr"(%4537) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4542 = "llvm.load"(%4538) : (!llvm.ptr) -> i64
    %4543 = "llvm.load"(%4539) : (!llvm.ptr) -> i64
    %4544 = "llvm.load"(%4540) : (!llvm.ptr) -> !llvm.ptr
    %4545 = "llvm.load"(%4541) : (!llvm.ptr) -> !llvm.ptr
    %4546 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4547 = "llvm.ptrtoint"(%4546) : (!llvm.ptr) -> i64
    %4548 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4549 = "mini.subtype"(%4544, %4543, %4542, %4548, %4547, %4545) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4549) [^bb506, ^bb506] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb505:
    %4550 = "llvm.extractvalue"(%4515) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4551 = "llvm.load"(%4520) : (!llvm.ptr) -> i32
    %4552 = "llvm.getelementptr"(%4550, %4551) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4553 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4554 = "llvm.getelementptr"(%4552, %4553) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4554) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterator_B_init_first_iterableIntIterable_second_iterableIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb507(%4555 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4556 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4557 : !llvm.ptr):
    %4558 = "mini.wrap"(%4555) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterator">
    %4559 = "mini.to_fat_ptr"(%4558) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator", "to_typ_name" = "ProductIterator", "invariant"} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"ProductIterator">
    %4560 = "mini.field_access"(%4559) {"offset" = 3 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ProductIterator">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %4561 = builtin.unrealized_conversion_cast %4560 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.while"() ({
      %4562 = "mini.checkflag"(%4561) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %4563 = "mini.unwrap"(%4562) : (i1) -> i1
    }, {
      %4564 = "mini.narrow"(%4561) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %4565 = "mini.field_access"(%4559) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterator">
      %4566 = "mini.unwrap"(%4565) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4567 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %4568 = "mini.method_call"(%4567, %4566) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %4569 = builtin.unrealized_conversion_cast %4568 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %4570 = "mini.checkflag"(%4569) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %4571 = "mini.unwrap"(%4570) : (i1) -> i1
      %4572 = builtin.unrealized_conversion_cast %4569 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%4571) ({
        %4573 = "mini.narrow"(%4572) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %4574 = "mini.unwrap"(%4564) : (!mini.ptr<i32>) -> i32
        %4575 = "mini.unwrap"(%4573) : (!mini.ptr<i32>) -> i32
        %4576 = "mini.create_tuple"(%4574, %4575) {"typ" = !llvm.struct<(i32, i32)>} : (i32, i32) -> !mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>
        %4577 = "mini.unionize"(%4576) {"from_typ" = !llvm.struct<(i32, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "tuple_typ", "to_typ_name" = "union_typ"} : (!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>) -> !mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>
        "mini.return"(%4577) : (!mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>) -> ()
        "mini.castassign"(%4572, %4573) ({
          %4578 = "mini.unionize"(%4573) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
      %4579 = "mini.field_access"(%4559) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterator">
      %4580 = "mini.unwrap"(%4579) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4581 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %4582 = "mini.method_call"(%4581, %4580) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %4583 = builtin.unrealized_conversion_cast %4582 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %4584 = "mini.field_access"(%4559) {"offset" = 3 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ProductIterator">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.castassign"(%4584, %4583) ({
        %4585 = builtin.unrealized_conversion_cast %4583 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
      %4586 = "mini.field_access"(%4559) {"offset" = 2 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterable">
      %4587 = "mini.unwrap"(%4586) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4588 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %4589 = "mini.method_call"(%4588, %4587) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
      %4590 = "mini.to_fat_ptr"(%4589) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
      %4591 = "mini.field_access"(%4559) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ProductIterator">) -> !mini.fatptr<"IntIterator">
      "mini.castassign"(%4591, %4590) ({
        %4592 = "mini.to_fat_ptr"(%4590) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "should_offset"} : (!mini.fatptr<"IntIterator">, !mini.fatptr<"IntIterator">) -> ()
      %4593 = "mini.field_access"(%4559) {"offset" = 3 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"ProductIterator">) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.castassign"(%4561, %4593) ({
        %4594 = builtin.unrealized_conversion_cast %4593 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : () -> ()
    %4595 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %4596 = "mini.unionize"(%4595) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>
    "mini.return"(%4596) : (!mini.union<[!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>]>, !mini.nil]>) -> ()
  }) {"func_name" = "ProductIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb508(%4597 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4598 : !llvm.ptr):
    %4599 = "mini.invariant"(%4598) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4600 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb509] : () -> ()
  ^bb509:
    %4601 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%4601, %4600) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb510] : () -> ()
  ^bb510:
    %4602 = "llvm.extractvalue"(%4597) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4603 = "llvm.load"(%4600) : (!llvm.ptr) -> i32
    %4604 = "llvm.getelementptr"(%4602, %4603) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4605 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4606 = "llvm.getelementptr"(%4604, %4605) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4606) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, i32, i32)>, "offset" = 0 : i32, "meth_name" = "Range_field_start"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, i32, i32)>, "offset" = 1 : i32, "meth_name" = "Range_field_end"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, i32, i32)>, "offset" = 2 : i32, "meth_name" = "Range_field_step"} : () -> ()
  "mini.func"() ({
  ^bb511(%4607 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4608 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4609 : !llvm.ptr, %4610 : i32):
    %4611 = "mini.wrap"(%4607) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %4612 = "mini.to_fat_ptr"(%4611) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range", "invariant"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %4613 = "mini.wrap"(%4610) : (i32) -> !mini.ptr<i32>
    %4614 = builtin.unrealized_conversion_cast %4613 : !mini.ptr<i32> to !mini.ptr<i32>
    %4615 = "mini.field_access"(%4612) {"offset" = 1 : i64, "vtable_bytes" = 456 : i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    "mini.castassign"(%4615, %4614) ({
      %4616 = builtin.unrealized_conversion_cast %4614 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %4617 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4618 = "mini.field_access"(%4612) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    "mini.castassign"(%4618, %4617) ({
      %4619 = builtin.unrealized_conversion_cast %4617 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %4620 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4621 = "mini.field_access"(%4612) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    "mini.castassign"(%4621, %4620) ({
      %4622 = builtin.unrealized_conversion_cast %4620 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Range_init_endPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb512(%4623 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4624 : !llvm.ptr, %4625 : i32):
    %4626 = "mini.invariant"(%4624) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4627 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb513] : () -> ()
  ^bb514:
    %4628 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%4628, %4627) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb515] : () -> ()
  ^bb513:
    %4629 = "llvm.getelementptr"(%4624) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4630 = "llvm.load"(%4629) : (!llvm.ptr) -> !llvm.ptr
    %4631 = "llvm.getelementptr"(%4630) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4632 = "llvm.getelementptr"(%4630) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4633 = "llvm.getelementptr"(%4630) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4634 = "llvm.getelementptr"(%4630) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4635 = "llvm.load"(%4631) : (!llvm.ptr) -> i64
    %4636 = "llvm.load"(%4632) : (!llvm.ptr) -> i64
    %4637 = "llvm.load"(%4633) : (!llvm.ptr) -> !llvm.ptr
    %4638 = "llvm.load"(%4634) : (!llvm.ptr) -> !llvm.ptr
    %4639 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4640 = "llvm.ptrtoint"(%4639) : (!llvm.ptr) -> i64
    %4641 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4642 = "mini.subtype"(%4637, %4636, %4635, %4641, %4640, %4638) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4642) [^bb514, ^bb514] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb515:
    %4643 = "llvm.extractvalue"(%4623) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4644 = "llvm.load"(%4627) : (!llvm.ptr) -> i32
    %4645 = "llvm.getelementptr"(%4643, %4644) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4646 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4647 = "llvm.getelementptr"(%4645, %4646) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4647) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_init_endPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb516(%4648 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4649 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4650 : !llvm.ptr, %4651 : i32, %4652 : i32):
    %4653 = "mini.wrap"(%4648) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %4654 = "mini.to_fat_ptr"(%4653) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range", "invariant"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %4655 = "mini.wrap"(%4651) : (i32) -> !mini.ptr<i32>
    %4656 = builtin.unrealized_conversion_cast %4655 : !mini.ptr<i32> to !mini.ptr<i32>
    %4657 = "mini.field_access"(%4654) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    "mini.castassign"(%4657, %4656) ({
      %4658 = builtin.unrealized_conversion_cast %4656 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %4659 = "mini.wrap"(%4652) : (i32) -> !mini.ptr<i32>
    %4660 = builtin.unrealized_conversion_cast %4659 : !mini.ptr<i32> to !mini.ptr<i32>
    %4661 = "mini.field_access"(%4654) {"offset" = 1 : i64, "vtable_bytes" = 456 : i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    "mini.castassign"(%4661, %4660) ({
      %4662 = builtin.unrealized_conversion_cast %4660 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %4663 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4664 = "mini.field_access"(%4654) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    "mini.castassign"(%4664, %4663) ({
      %4665 = builtin.unrealized_conversion_cast %4663 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Range_init_startPtri32_endPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb517(%4666 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4667 : !llvm.ptr, %4668 : i32, %4669 : i32):
    %4670 = "mini.invariant"(%4667) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4671 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb518] : () -> ()
  ^bb519:
    %4672 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%4672, %4671) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb520] : () -> ()
  ^bb521:
    %4673 = "llvm.getelementptr"(%4667) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4674 = "llvm.load"(%4673) : (!llvm.ptr) -> !llvm.ptr
    %4675 = "llvm.getelementptr"(%4674) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4676 = "llvm.getelementptr"(%4674) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4677 = "llvm.getelementptr"(%4674) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4678 = "llvm.getelementptr"(%4674) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4679 = "llvm.load"(%4675) : (!llvm.ptr) -> i64
    %4680 = "llvm.load"(%4676) : (!llvm.ptr) -> i64
    %4681 = "llvm.load"(%4677) : (!llvm.ptr) -> !llvm.ptr
    %4682 = "llvm.load"(%4678) : (!llvm.ptr) -> !llvm.ptr
    %4683 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4684 = "llvm.ptrtoint"(%4683) : (!llvm.ptr) -> i64
    %4685 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4686 = "mini.subtype"(%4681, %4680, %4679, %4685, %4684, %4682) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4686) [^bb519, ^bb519] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb518:
    %4687 = "llvm.getelementptr"(%4667) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4688 = "llvm.load"(%4687) : (!llvm.ptr) -> !llvm.ptr
    %4689 = "llvm.getelementptr"(%4688) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4690 = "llvm.getelementptr"(%4688) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4691 = "llvm.getelementptr"(%4688) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4692 = "llvm.getelementptr"(%4688) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4693 = "llvm.load"(%4689) : (!llvm.ptr) -> i64
    %4694 = "llvm.load"(%4690) : (!llvm.ptr) -> i64
    %4695 = "llvm.load"(%4691) : (!llvm.ptr) -> !llvm.ptr
    %4696 = "llvm.load"(%4692) : (!llvm.ptr) -> !llvm.ptr
    %4697 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4698 = "llvm.ptrtoint"(%4697) : (!llvm.ptr) -> i64
    %4699 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4700 = "mini.subtype"(%4695, %4694, %4693, %4699, %4698, %4696) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4700) [^bb521, ^bb521] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb520:
    %4701 = "llvm.extractvalue"(%4666) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4702 = "llvm.load"(%4671) : (!llvm.ptr) -> i32
    %4703 = "llvm.getelementptr"(%4701, %4702) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4704 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4705 = "llvm.getelementptr"(%4703, %4704) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4705) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_init_startPtri32_endPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb522(%4706 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4707 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4708 : !llvm.ptr, %4709 : i32):
    %4710 = "mini.wrap"(%4706) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %4711 = "mini.to_fat_ptr"(%4710) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range", "invariant"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %4712 = "mini.wrap"(%4709) : (i32) -> !mini.ptr<i32>
    %4713 = builtin.unrealized_conversion_cast %4712 : !mini.ptr<i32> to !mini.ptr<i32>
    %4714 = "mini.field_access"(%4711) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    "mini.castassign"(%4714, %4713) ({
      %4715 = builtin.unrealized_conversion_cast %4713 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %4716 = "mini.to_fat_ptr"(%4711) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range", "invariant"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    "mini.return"(%4716) : (!mini.fatptr<"Range">) -> ()
  }) {"func_name" = "Range_step_stepPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb523(%4717 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4718 : !llvm.ptr, %4719 : i32):
    %4720 = "mini.invariant"(%4718) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4721 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb524] : () -> ()
  ^bb525:
    %4722 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%4722, %4721) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb526] : () -> ()
  ^bb524:
    %4723 = "llvm.getelementptr"(%4718) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4724 = "llvm.load"(%4723) : (!llvm.ptr) -> !llvm.ptr
    %4725 = "llvm.getelementptr"(%4724) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4726 = "llvm.getelementptr"(%4724) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4727 = "llvm.getelementptr"(%4724) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4728 = "llvm.getelementptr"(%4724) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4729 = "llvm.load"(%4725) : (!llvm.ptr) -> i64
    %4730 = "llvm.load"(%4726) : (!llvm.ptr) -> i64
    %4731 = "llvm.load"(%4727) : (!llvm.ptr) -> !llvm.ptr
    %4732 = "llvm.load"(%4728) : (!llvm.ptr) -> !llvm.ptr
    %4733 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4734 = "llvm.ptrtoint"(%4733) : (!llvm.ptr) -> i64
    %4735 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4736 = "mini.subtype"(%4731, %4730, %4729, %4735, %4734, %4732) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4736) [^bb525, ^bb525] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb526:
    %4737 = "llvm.extractvalue"(%4717) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4738 = "llvm.load"(%4721) : (!llvm.ptr) -> i32
    %4739 = "llvm.getelementptr"(%4737, %4738) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4740 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4741 = "llvm.getelementptr"(%4739, %4740) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4741) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_step_stepPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb527(%4742 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4743 : !llvm.ptr, %4744 : !llvm.struct<(!llvm.ptr)>):
    %4745 = "mini.invariant"(%4743) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4746 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb528] : () -> ()
  ^bb529:
    %4747 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%4747, %4746) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb530] : () -> ()
  ^bb528:
    %4748 = "llvm.getelementptr"(%4743) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4749 = "llvm.load"(%4748) : (!llvm.ptr) -> !llvm.ptr
    %4750 = "llvm.getelementptr"(%4749) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4751 = "llvm.getelementptr"(%4749) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4752 = "llvm.getelementptr"(%4749) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4753 = "llvm.getelementptr"(%4749) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4754 = "llvm.load"(%4750) : (!llvm.ptr) -> i64
    %4755 = "llvm.load"(%4751) : (!llvm.ptr) -> i64
    %4756 = "llvm.load"(%4752) : (!llvm.ptr) -> !llvm.ptr
    %4757 = "llvm.load"(%4753) : (!llvm.ptr) -> !llvm.ptr
    %4758 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %4759 = "llvm.ptrtoint"(%4758) : (!llvm.ptr) -> i64
    %4760 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %4761 = "mini.subtype"(%4756, %4755, %4754, %4760, %4759, %4757) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4761) [^bb529, ^bb529] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb530:
    %4762 = "llvm.extractvalue"(%4742) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4763 = "llvm.load"(%4746) : (!llvm.ptr) -> i32
    %4764 = "llvm.getelementptr"(%4762, %4763) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4765 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4766 = "llvm.getelementptr"(%4764, %4765) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4766) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb531(%4767 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4768 : !llvm.ptr, %4769 : i32, %4770 : !llvm.struct<(!llvm.ptr)>):
    %4771 = "mini.invariant"(%4768) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4772 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb532] : () -> ()
  ^bb533:
    %4773 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%4773, %4772) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb534] : () -> ()
  ^bb535:
    %4774 = "llvm.getelementptr"(%4768) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4775 = "llvm.load"(%4774) : (!llvm.ptr) -> !llvm.ptr
    %4776 = "llvm.getelementptr"(%4775) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4777 = "llvm.getelementptr"(%4775) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4778 = "llvm.getelementptr"(%4775) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4779 = "llvm.getelementptr"(%4775) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4780 = "llvm.load"(%4776) : (!llvm.ptr) -> i64
    %4781 = "llvm.load"(%4777) : (!llvm.ptr) -> i64
    %4782 = "llvm.load"(%4778) : (!llvm.ptr) -> !llvm.ptr
    %4783 = "llvm.load"(%4779) : (!llvm.ptr) -> !llvm.ptr
    %4784 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %4785 = "llvm.ptrtoint"(%4784) : (!llvm.ptr) -> i64
    %4786 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %4787 = "mini.subtype"(%4782, %4781, %4780, %4786, %4785, %4783) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4787) [^bb533, ^bb533] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb532:
    %4788 = "llvm.getelementptr"(%4768) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4789 = "llvm.load"(%4788) : (!llvm.ptr) -> !llvm.ptr
    %4790 = "llvm.getelementptr"(%4789) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4791 = "llvm.getelementptr"(%4789) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4792 = "llvm.getelementptr"(%4789) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4793 = "llvm.getelementptr"(%4789) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4794 = "llvm.load"(%4790) : (!llvm.ptr) -> i64
    %4795 = "llvm.load"(%4791) : (!llvm.ptr) -> i64
    %4796 = "llvm.load"(%4792) : (!llvm.ptr) -> !llvm.ptr
    %4797 = "llvm.load"(%4793) : (!llvm.ptr) -> !llvm.ptr
    %4798 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %4799 = "llvm.ptrtoint"(%4798) : (!llvm.ptr) -> i64
    %4800 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %4801 = "mini.subtype"(%4796, %4795, %4794, %4800, %4799, %4797) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4801) [^bb535, ^bb535] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb534:
    %4802 = "llvm.extractvalue"(%4767) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4803 = "llvm.load"(%4772) : (!llvm.ptr) -> i32
    %4804 = "llvm.getelementptr"(%4802, %4803) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4805 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4806 = "llvm.getelementptr"(%4804, %4805) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4806) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb536(%4807 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4808 : !llvm.ptr, %4809 : !llvm.struct<(!llvm.ptr)>):
    %4810 = "mini.invariant"(%4808) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4811 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb537] : () -> ()
  ^bb538:
    %4812 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%4812, %4811) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb539] : () -> ()
  ^bb537:
    %4813 = "llvm.getelementptr"(%4808) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4814 = "llvm.load"(%4813) : (!llvm.ptr) -> !llvm.ptr
    %4815 = "llvm.getelementptr"(%4814) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4816 = "llvm.getelementptr"(%4814) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4817 = "llvm.getelementptr"(%4814) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4818 = "llvm.getelementptr"(%4814) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4819 = "llvm.load"(%4815) : (!llvm.ptr) -> i64
    %4820 = "llvm.load"(%4816) : (!llvm.ptr) -> i64
    %4821 = "llvm.load"(%4817) : (!llvm.ptr) -> !llvm.ptr
    %4822 = "llvm.load"(%4818) : (!llvm.ptr) -> !llvm.ptr
    %4823 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %4824 = "llvm.ptrtoint"(%4823) : (!llvm.ptr) -> i64
    %4825 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %4826 = "mini.subtype"(%4821, %4820, %4819, %4825, %4824, %4822) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4826) [^bb538, ^bb538] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb539:
    %4827 = "llvm.extractvalue"(%4807) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4828 = "llvm.load"(%4811) : (!llvm.ptr) -> i32
    %4829 = "llvm.getelementptr"(%4827, %4828) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4830 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4831 = "llvm.getelementptr"(%4829, %4830) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4831) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb540(%4832 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4833 : !llvm.ptr, %4834 : !llvm.struct<(!llvm.ptr)>):
    %4835 = "mini.invariant"(%4833) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4836 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb541] : () -> ()
  ^bb542:
    %4837 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%4837, %4836) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb543] : () -> ()
  ^bb541:
    %4838 = "llvm.getelementptr"(%4833) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4839 = "llvm.load"(%4838) : (!llvm.ptr) -> !llvm.ptr
    %4840 = "llvm.getelementptr"(%4839) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4841 = "llvm.getelementptr"(%4839) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4842 = "llvm.getelementptr"(%4839) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4843 = "llvm.getelementptr"(%4839) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4844 = "llvm.load"(%4840) : (!llvm.ptr) -> i64
    %4845 = "llvm.load"(%4841) : (!llvm.ptr) -> i64
    %4846 = "llvm.load"(%4842) : (!llvm.ptr) -> !llvm.ptr
    %4847 = "llvm.load"(%4843) : (!llvm.ptr) -> !llvm.ptr
    %4848 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %4849 = "llvm.ptrtoint"(%4848) : (!llvm.ptr) -> i64
    %4850 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %4851 = "mini.subtype"(%4846, %4845, %4844, %4850, %4849, %4847) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4851) [^bb542, ^bb542] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb543:
    %4852 = "llvm.extractvalue"(%4832) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4853 = "llvm.load"(%4836) : (!llvm.ptr) -> i32
    %4854 = "llvm.getelementptr"(%4852, %4853) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4855 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4856 = "llvm.getelementptr"(%4854, %4855) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4856) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb544(%4857 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4858 : !llvm.ptr, %4859 : !llvm.struct<(!llvm.ptr)>):
    %4860 = "mini.invariant"(%4858) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4861 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb545] : () -> ()
  ^bb546:
    %4862 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%4862, %4861) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb547] : () -> ()
  ^bb545:
    %4863 = "llvm.getelementptr"(%4858) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4864 = "llvm.load"(%4863) : (!llvm.ptr) -> !llvm.ptr
    %4865 = "llvm.getelementptr"(%4864) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4866 = "llvm.getelementptr"(%4864) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4867 = "llvm.getelementptr"(%4864) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4868 = "llvm.getelementptr"(%4864) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4869 = "llvm.load"(%4865) : (!llvm.ptr) -> i64
    %4870 = "llvm.load"(%4866) : (!llvm.ptr) -> i64
    %4871 = "llvm.load"(%4867) : (!llvm.ptr) -> !llvm.ptr
    %4872 = "llvm.load"(%4868) : (!llvm.ptr) -> !llvm.ptr
    %4873 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %4874 = "llvm.ptrtoint"(%4873) : (!llvm.ptr) -> i64
    %4875 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %4876 = "mini.subtype"(%4871, %4870, %4869, %4875, %4874, %4872) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4876) [^bb546, ^bb546] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb547:
    %4877 = "llvm.extractvalue"(%4857) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4878 = "llvm.load"(%4861) : (!llvm.ptr) -> i32
    %4879 = "llvm.getelementptr"(%4877, %4878) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4880 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4881 = "llvm.getelementptr"(%4879, %4880) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4881) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb548(%4882 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4883 : !llvm.ptr, %4884 : !llvm.struct<(!llvm.ptr)>):
    %4885 = "mini.invariant"(%4883) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4886 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb549] : () -> ()
  ^bb550:
    %4887 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%4887, %4886) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb551] : () -> ()
  ^bb549:
    %4888 = "llvm.getelementptr"(%4883) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4889 = "llvm.load"(%4888) : (!llvm.ptr) -> !llvm.ptr
    %4890 = "llvm.getelementptr"(%4889) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4891 = "llvm.getelementptr"(%4889) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4892 = "llvm.getelementptr"(%4889) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4893 = "llvm.getelementptr"(%4889) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4894 = "llvm.load"(%4890) : (!llvm.ptr) -> i64
    %4895 = "llvm.load"(%4891) : (!llvm.ptr) -> i64
    %4896 = "llvm.load"(%4892) : (!llvm.ptr) -> !llvm.ptr
    %4897 = "llvm.load"(%4893) : (!llvm.ptr) -> !llvm.ptr
    %4898 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %4899 = "llvm.ptrtoint"(%4898) : (!llvm.ptr) -> i64
    %4900 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %4901 = "mini.subtype"(%4896, %4895, %4894, %4900, %4899, %4897) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4901) [^bb550, ^bb550] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb551:
    %4902 = "llvm.extractvalue"(%4882) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4903 = "llvm.load"(%4886) : (!llvm.ptr) -> i32
    %4904 = "llvm.getelementptr"(%4902, %4903) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4905 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4906 = "llvm.getelementptr"(%4904, %4905) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4906) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb552(%4907 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4908 : !llvm.ptr, %4909 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4910 = "mini.invariant"(%4908) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4911 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb553] : () -> ()
  ^bb554:
    %4912 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%4912, %4911) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb555] : () -> ()
  ^bb553:
    %4913 = "llvm.getelementptr"(%4908) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4914 = "llvm.load"(%4913) : (!llvm.ptr) -> !llvm.ptr
    %4915 = "llvm.getelementptr"(%4914) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4916 = "llvm.getelementptr"(%4914) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4917 = "llvm.getelementptr"(%4914) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4918 = "llvm.getelementptr"(%4914) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4919 = "llvm.load"(%4915) : (!llvm.ptr) -> i64
    %4920 = "llvm.load"(%4916) : (!llvm.ptr) -> i64
    %4921 = "llvm.load"(%4917) : (!llvm.ptr) -> !llvm.ptr
    %4922 = "llvm.load"(%4918) : (!llvm.ptr) -> !llvm.ptr
    %4923 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4924 = "llvm.ptrtoint"(%4923) : (!llvm.ptr) -> i64
    %4925 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4926 = "mini.subtype"(%4921, %4920, %4919, %4925, %4924, %4922) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4926) [^bb554, ^bb554] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb555:
    %4927 = "llvm.extractvalue"(%4907) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4928 = "llvm.load"(%4911) : (!llvm.ptr) -> i32
    %4929 = "llvm.getelementptr"(%4927, %4928) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4930 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4931 = "llvm.getelementptr"(%4929, %4930) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4931) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb556(%4932 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4933 : !llvm.ptr, %4934 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4935 = "mini.invariant"(%4933) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4936 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb557] : () -> ()
  ^bb558:
    %4937 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%4937, %4936) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb559] : () -> ()
  ^bb557:
    %4938 = "llvm.getelementptr"(%4933) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4939 = "llvm.load"(%4938) : (!llvm.ptr) -> !llvm.ptr
    %4940 = "llvm.getelementptr"(%4939) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4941 = "llvm.getelementptr"(%4939) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4942 = "llvm.getelementptr"(%4939) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4943 = "llvm.getelementptr"(%4939) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4944 = "llvm.load"(%4940) : (!llvm.ptr) -> i64
    %4945 = "llvm.load"(%4941) : (!llvm.ptr) -> i64
    %4946 = "llvm.load"(%4942) : (!llvm.ptr) -> !llvm.ptr
    %4947 = "llvm.load"(%4943) : (!llvm.ptr) -> !llvm.ptr
    %4948 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4949 = "llvm.ptrtoint"(%4948) : (!llvm.ptr) -> i64
    %4950 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4951 = "mini.subtype"(%4946, %4945, %4944, %4950, %4949, %4947) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4951) [^bb558, ^bb558] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb559:
    %4952 = "llvm.extractvalue"(%4932) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4953 = "llvm.load"(%4936) : (!llvm.ptr) -> i32
    %4954 = "llvm.getelementptr"(%4952, %4953) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4955 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4956 = "llvm.getelementptr"(%4954, %4955) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4956) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb560(%4957 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4958 : !llvm.ptr, %4959 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4960 = "mini.invariant"(%4958) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4961 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb561] : () -> ()
  ^bb562:
    %4962 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%4962, %4961) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb563] : () -> ()
  ^bb561:
    %4963 = "llvm.getelementptr"(%4958) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4964 = "llvm.load"(%4963) : (!llvm.ptr) -> !llvm.ptr
    %4965 = "llvm.getelementptr"(%4964) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4966 = "llvm.getelementptr"(%4964) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4967 = "llvm.getelementptr"(%4964) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4968 = "llvm.getelementptr"(%4964) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4969 = "llvm.load"(%4965) : (!llvm.ptr) -> i64
    %4970 = "llvm.load"(%4966) : (!llvm.ptr) -> i64
    %4971 = "llvm.load"(%4967) : (!llvm.ptr) -> !llvm.ptr
    %4972 = "llvm.load"(%4968) : (!llvm.ptr) -> !llvm.ptr
    %4973 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4974 = "llvm.ptrtoint"(%4973) : (!llvm.ptr) -> i64
    %4975 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %4976 = "mini.subtype"(%4971, %4970, %4969, %4975, %4974, %4972) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%4976) [^bb562, ^bb562] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb563:
    %4977 = "llvm.extractvalue"(%4957) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4978 = "llvm.load"(%4961) : (!llvm.ptr) -> i32
    %4979 = "llvm.getelementptr"(%4977, %4978) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4980 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %4981 = "llvm.getelementptr"(%4979, %4980) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4981) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb564(%4982 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4983 : !llvm.ptr, %4984 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4985 = "mini.invariant"(%4983) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4986 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb565] : () -> ()
  ^bb566:
    %4987 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
    "llvm.store"(%4987, %4986) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb567] : () -> ()
  ^bb565:
    %4988 = "llvm.getelementptr"(%4983) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %4989 = "llvm.load"(%4988) : (!llvm.ptr) -> !llvm.ptr
    %4990 = "llvm.getelementptr"(%4989) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4991 = "llvm.getelementptr"(%4989) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4992 = "llvm.getelementptr"(%4989) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4993 = "llvm.getelementptr"(%4989) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4994 = "llvm.load"(%4990) : (!llvm.ptr) -> i64
    %4995 = "llvm.load"(%4991) : (!llvm.ptr) -> i64
    %4996 = "llvm.load"(%4992) : (!llvm.ptr) -> !llvm.ptr
    %4997 = "llvm.load"(%4993) : (!llvm.ptr) -> !llvm.ptr
    %4998 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %4999 = "llvm.ptrtoint"(%4998) : (!llvm.ptr) -> i64
    %5000 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %5001 = "mini.subtype"(%4996, %4995, %4994, %5000, %4999, %4997) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5001) [^bb566, ^bb566] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb567:
    %5002 = "llvm.extractvalue"(%4982) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5003 = "llvm.load"(%4986) : (!llvm.ptr) -> i32
    %5004 = "llvm.getelementptr"(%5002, %5003) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5005 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5006 = "llvm.getelementptr"(%5004, %5005) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5006) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb568(%5007 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5008 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5009 : !llvm.ptr):
    %5010 = "mini.wrap"(%5007) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %5011 = "mini.to_fat_ptr"(%5010) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range", "invariant"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %5012 = "mini.field_access"(%5011) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %5013 = "mini.field_access"(%5011) {"offset" = 1 : i64, "vtable_bytes" = 456 : i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %5014 = "mini.field_access"(%5011) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %5015 = "mini.unwrap"(%5012) : (!mini.ptr<i32>) -> i32
    %5016 = "mini.unwrap"(%5013) : (!mini.ptr<i32>) -> i32
    %5017 = "mini.unwrap"(%5014) : (!mini.ptr<i32>) -> i32
    %5018 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "RangeIterator", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"RangeIterator">
    %5019 = "mini.field_access"(%5011) {"offset" = 0 : i64, "vtable_bytes" = 456 : i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %5020 = "mini.field_access"(%5011) {"offset" = 1 : i64, "vtable_bytes" = 456 : i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %5021 = "mini.field_access"(%5011) {"offset" = 2 : i64, "vtable_bytes" = 456 : i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %5022 = builtin.unrealized_conversion_cast %5019 : !mini.ptr<i32> to !mini.ptr<i32>
    %5023 = "mini.unwrap"(%5022) : (!mini.ptr<i32>) -> i32
    %5024 = builtin.unrealized_conversion_cast %5020 : !mini.ptr<i32> to !mini.ptr<i32>
    %5025 = "mini.unwrap"(%5024) : (!mini.ptr<i32>) -> i32
    %5026 = builtin.unrealized_conversion_cast %5021 : !mini.ptr<i32> to !mini.ptr<i32>
    %5027 = "mini.unwrap"(%5026) : (!mini.ptr<i32>) -> i32
    %5028 = "mini.unwrap"(%5018) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5029 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5030 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5031 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5032 = "mini.parameterizations_array"(%5029, %5030, %5031) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5032, %5028, %5023, %5025, %5027) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 9 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32, i32) -> ()
    %5033 = "mini.to_fat_ptr"(%5018) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%5033) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "Range_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb569(%5034 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5035 : !llvm.ptr):
    %5036 = "mini.invariant"(%5035) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5037 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb570] : () -> ()
  ^bb570:
    %5038 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
    "llvm.store"(%5038, %5037) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb571] : () -> ()
  ^bb571:
    %5039 = "llvm.extractvalue"(%5034) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5040 = "llvm.load"(%5037) : (!llvm.ptr) -> i32
    %5041 = "llvm.getelementptr"(%5039, %5040) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5042 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5043 = "llvm.getelementptr"(%5041, %5042) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5043) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, i32, i32)>, "offset" = 0 : i32, "meth_name" = "RangeIterator_field_counter"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, i32, i32)>, "offset" = 1 : i32, "meth_name" = "RangeIterator_field_end"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, i32, i32)>, "offset" = 2 : i32, "meth_name" = "RangeIterator_field_step"} : () -> ()
  "mini.func"() ({
  ^bb572(%5044 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5045 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5046 : !llvm.ptr, %5047 : i32, %5048 : i32, %5049 : i32):
    %5050 = "mini.wrap"(%5044) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"RangeIterator">
    %5051 = "mini.to_fat_ptr"(%5050) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %5052 = "mini.wrap"(%5047) : (i32) -> !mini.ptr<i32>
    %5053 = builtin.unrealized_conversion_cast %5052 : !mini.ptr<i32> to !mini.ptr<i32>
    %5054 = "mini.field_access"(%5051) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    "mini.castassign"(%5054, %5053) ({
      %5055 = builtin.unrealized_conversion_cast %5053 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %5056 = "mini.wrap"(%5048) : (i32) -> !mini.ptr<i32>
    %5057 = builtin.unrealized_conversion_cast %5056 : !mini.ptr<i32> to !mini.ptr<i32>
    %5058 = "mini.field_access"(%5051) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    "mini.castassign"(%5058, %5057) ({
      %5059 = builtin.unrealized_conversion_cast %5057 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %5060 = "mini.wrap"(%5049) : (i32) -> !mini.ptr<i32>
    %5061 = builtin.unrealized_conversion_cast %5060 : !mini.ptr<i32> to !mini.ptr<i32>
    %5062 = "mini.field_access"(%5051) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    "mini.castassign"(%5062, %5061) ({
      %5063 = builtin.unrealized_conversion_cast %5061 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "RangeIterator_init_counterPtri32_endPtri32_stepPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb573(%5064 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5065 : !llvm.ptr, %5066 : i32, %5067 : i32, %5068 : i32):
    %5069 = "mini.invariant"(%5065) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5070 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb574] : () -> ()
  ^bb575:
    %5071 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%5071, %5070) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb576] : () -> ()
  ^bb577:
    %5072 = "llvm.getelementptr"(%5065) <{"rawConstantIndices" = array<i32: 0, 2>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5073 = "llvm.load"(%5072) : (!llvm.ptr) -> !llvm.ptr
    %5074 = "llvm.getelementptr"(%5073) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5075 = "llvm.getelementptr"(%5073) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5076 = "llvm.getelementptr"(%5073) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5077 = "llvm.getelementptr"(%5073) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5078 = "llvm.load"(%5074) : (!llvm.ptr) -> i64
    %5079 = "llvm.load"(%5075) : (!llvm.ptr) -> i64
    %5080 = "llvm.load"(%5076) : (!llvm.ptr) -> !llvm.ptr
    %5081 = "llvm.load"(%5077) : (!llvm.ptr) -> !llvm.ptr
    %5082 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5083 = "llvm.ptrtoint"(%5082) : (!llvm.ptr) -> i64
    %5084 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5085 = "mini.subtype"(%5080, %5079, %5078, %5084, %5083, %5081) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5085) [^bb575, ^bb575] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb578:
    %5086 = "llvm.getelementptr"(%5065) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5087 = "llvm.load"(%5086) : (!llvm.ptr) -> !llvm.ptr
    %5088 = "llvm.getelementptr"(%5087) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5089 = "llvm.getelementptr"(%5087) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5090 = "llvm.getelementptr"(%5087) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5091 = "llvm.getelementptr"(%5087) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5092 = "llvm.load"(%5088) : (!llvm.ptr) -> i64
    %5093 = "llvm.load"(%5089) : (!llvm.ptr) -> i64
    %5094 = "llvm.load"(%5090) : (!llvm.ptr) -> !llvm.ptr
    %5095 = "llvm.load"(%5091) : (!llvm.ptr) -> !llvm.ptr
    %5096 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5097 = "llvm.ptrtoint"(%5096) : (!llvm.ptr) -> i64
    %5098 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5099 = "mini.subtype"(%5094, %5093, %5092, %5098, %5097, %5095) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5099) [^bb577, ^bb577] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb574:
    %5100 = "llvm.getelementptr"(%5065) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5101 = "llvm.load"(%5100) : (!llvm.ptr) -> !llvm.ptr
    %5102 = "llvm.getelementptr"(%5101) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5103 = "llvm.getelementptr"(%5101) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5104 = "llvm.getelementptr"(%5101) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5105 = "llvm.getelementptr"(%5101) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5106 = "llvm.load"(%5102) : (!llvm.ptr) -> i64
    %5107 = "llvm.load"(%5103) : (!llvm.ptr) -> i64
    %5108 = "llvm.load"(%5104) : (!llvm.ptr) -> !llvm.ptr
    %5109 = "llvm.load"(%5105) : (!llvm.ptr) -> !llvm.ptr
    %5110 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5111 = "llvm.ptrtoint"(%5110) : (!llvm.ptr) -> i64
    %5112 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5113 = "mini.subtype"(%5108, %5107, %5106, %5112, %5111, %5109) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5113) [^bb578, ^bb578] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb576:
    %5114 = "llvm.extractvalue"(%5064) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5115 = "llvm.load"(%5070) : (!llvm.ptr) -> i32
    %5116 = "llvm.getelementptr"(%5114, %5115) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5117 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5118 = "llvm.getelementptr"(%5116, %5117) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5118) : (!llvm.ptr) -> ()
  }) {"func_name" = "RangeIterator_B_init_counterPtri32_endPtri32_stepPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb579(%5119 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5120 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5121 : !llvm.ptr):
    %5122 = "mini.wrap"(%5119) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"RangeIterator">
    %5123 = "mini.to_fat_ptr"(%5122) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %5124 = "mini.field_access"(%5123) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %5125 = "mini.field_access"(%5123) {"offset" = 1 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %5126 = "mini.unwrap"(%5124) : (!mini.ptr<i32>) -> i32
    %5127 = "mini.unwrap"(%5125) : (!mini.ptr<i32>) -> i32
    %5128 = "mini.comparison"(%5126, %5127) {"op" = "GT"} : (i32, i32) -> i1
    %5129 = "mini.wrap"(%5128) : (i1) -> !mini.ptr<i32>
    %5130 = "mini.unwrap"(%5129) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5130) ({
      %5131 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %5132 = "mini.unionize"(%5131) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%5132) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %5133 = "mini.field_access"(%5123) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %5134 = "mini.field_access"(%5123) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %5135 = "mini.unwrap"(%5133) : (!mini.ptr<i32>) -> i32
    %5136 = "mini.unwrap"(%5134) : (!mini.ptr<i32>) -> i32
    %5137 = "mini.arithmetic"(%5135, %5136) {"op" = "ADD"} : (i32, i32) -> i32
    %5138 = "mini.wrap"(%5137) : (i32) -> !mini.ptr<i32>
    %5139 = "mini.field_access"(%5123) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    "mini.castassign"(%5139, %5138) ({
      %5140 = builtin.unrealized_conversion_cast %5138 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %5141 = "mini.field_access"(%5123) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %5142 = "mini.field_access"(%5123) {"offset" = 2 : i64, "vtable_bytes" = 72 : i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %5143 = "mini.unwrap"(%5141) : (!mini.ptr<i32>) -> i32
    %5144 = "mini.unwrap"(%5142) : (!mini.ptr<i32>) -> i32
    %5145 = "mini.arithmetic"(%5143, %5144) {"op" = "SUB"} : (i32, i32) -> i32
    %5146 = "mini.wrap"(%5145) : (i32) -> !mini.ptr<i32>
    %5147 = "mini.unionize"(%5146) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%5147) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "RangeIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb580(%5148 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5149 : !llvm.ptr):
    %5150 = "mini.invariant"(%5149) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5151 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb581] : () -> ()
  ^bb581:
    %5152 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%5152, %5151) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb582] : () -> ()
  ^bb582:
    %5153 = "llvm.extractvalue"(%5148) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5154 = "llvm.load"(%5151) : (!llvm.ptr) -> i32
    %5155 = "llvm.getelementptr"(%5153, %5154) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5156 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5157 = "llvm.getelementptr"(%5155, %5156) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5157) : (!llvm.ptr) -> ()
  }) {"func_name" = "RangeIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, i32)>, "offset" = 0 : i32, "meth_name" = "OutOfBoundsDetails_field_bounds"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, i32)>, "offset" = 1 : i32, "meth_name" = "OutOfBoundsDetails_field_index"} : () -> ()
  "mini.func"() ({
  ^bb583(%5158 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5159 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5160 : !llvm.ptr, %5161 : i32, %5162 : i32):
    %5163 = "mini.wrap"(%5158) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"OutOfBoundsDetails">
    %5164 = "mini.to_fat_ptr"(%5163) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "OutOfBoundsDetails", "invariant"} : (!mini.fatptr<"OutOfBoundsDetails">) -> !mini.fatptr<"OutOfBoundsDetails">
    %5165 = "mini.wrap"(%5161) : (i32) -> !mini.ptr<i32>
    %5166 = builtin.unrealized_conversion_cast %5165 : !mini.ptr<i32> to !mini.ptr<i32>
    %5167 = "mini.field_access"(%5164) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32} : (!mini.fatptr<"OutOfBoundsDetails">) -> !mini.ptr<i32>
    "mini.castassign"(%5167, %5166) ({
      %5168 = builtin.unrealized_conversion_cast %5166 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %5169 = "mini.wrap"(%5162) : (i32) -> !mini.ptr<i32>
    %5170 = builtin.unrealized_conversion_cast %5169 : !mini.ptr<i32> to !mini.ptr<i32>
    %5171 = "mini.field_access"(%5164) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32} : (!mini.fatptr<"OutOfBoundsDetails">) -> !mini.ptr<i32>
    "mini.castassign"(%5171, %5170) ({
      %5172 = builtin.unrealized_conversion_cast %5170 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "OutOfBoundsDetails_init_boundsPtri32_indexPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb584(%5173 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5174 : !llvm.ptr, %5175 : i32, %5176 : i32):
    %5177 = "mini.invariant"(%5174) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5178 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb585] : () -> ()
  ^bb586:
    %5179 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%5179, %5178) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb587] : () -> ()
  ^bb588:
    %5180 = "llvm.getelementptr"(%5174) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5181 = "llvm.load"(%5180) : (!llvm.ptr) -> !llvm.ptr
    %5182 = "llvm.getelementptr"(%5181) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5183 = "llvm.getelementptr"(%5181) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5184 = "llvm.getelementptr"(%5181) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5185 = "llvm.getelementptr"(%5181) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5186 = "llvm.load"(%5182) : (!llvm.ptr) -> i64
    %5187 = "llvm.load"(%5183) : (!llvm.ptr) -> i64
    %5188 = "llvm.load"(%5184) : (!llvm.ptr) -> !llvm.ptr
    %5189 = "llvm.load"(%5185) : (!llvm.ptr) -> !llvm.ptr
    %5190 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5191 = "llvm.ptrtoint"(%5190) : (!llvm.ptr) -> i64
    %5192 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5193 = "mini.subtype"(%5188, %5187, %5186, %5192, %5191, %5189) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5193) [^bb586, ^bb586] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb585:
    %5194 = "llvm.getelementptr"(%5174) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5195 = "llvm.load"(%5194) : (!llvm.ptr) -> !llvm.ptr
    %5196 = "llvm.getelementptr"(%5195) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5197 = "llvm.getelementptr"(%5195) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5198 = "llvm.getelementptr"(%5195) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5199 = "llvm.getelementptr"(%5195) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5200 = "llvm.load"(%5196) : (!llvm.ptr) -> i64
    %5201 = "llvm.load"(%5197) : (!llvm.ptr) -> i64
    %5202 = "llvm.load"(%5198) : (!llvm.ptr) -> !llvm.ptr
    %5203 = "llvm.load"(%5199) : (!llvm.ptr) -> !llvm.ptr
    %5204 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5205 = "llvm.ptrtoint"(%5204) : (!llvm.ptr) -> i64
    %5206 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5207 = "mini.subtype"(%5202, %5201, %5200, %5206, %5205, %5203) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5207) [^bb588, ^bb588] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb587:
    %5208 = "llvm.extractvalue"(%5173) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5209 = "llvm.load"(%5178) : (!llvm.ptr) -> i32
    %5210 = "llvm.getelementptr"(%5208, %5209) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5211 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5212 = "llvm.getelementptr"(%5210, %5211) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5212) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBoundsDetails_B_init_boundsPtri32_indexPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb589(%5213 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5214 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5215 : !llvm.ptr):
    %5216 = "mini.wrap"(%5213) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"OutOfBoundsDetails">
    %5217 = "mini.to_fat_ptr"(%5216) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "OutOfBoundsDetails", "invariant"} : (!mini.fatptr<"OutOfBoundsDetails">) -> !mini.fatptr<"OutOfBoundsDetails">
    %5218 = "mini.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5219 = "mini.create_buffer"(%5218) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %5220 = builtin.unrealized_conversion_cast %5219 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %5221 = "mini.refer"(%5220) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5222 = "mini.literal"() {"typ" = !llvm.array<44 x i8>, "value" = "The size of the collection being indexed was"} : () -> !llvm.ptr
    %5223 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %5224 = "mini.buffer_indexation"(%5221, %5223) {"typ" = !llvm.array<44 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%5224, %5222) {"typ" = !llvm.array<44 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %5225 = "mini.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5226 = "mini.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5227 = "mini.unwrap"(%5221) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5228 = "mini.unwrap"(%5225) : (!mini.ptr<i32>) -> i32
    %5229 = "mini.unwrap"(%5226) : (!mini.ptr<i32>) -> i32
    %5230 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %5231 = "mini.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5232 = "mini.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5233 = builtin.unrealized_conversion_cast %5221 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %5234 = "mini.unwrap"(%5233) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5235 = builtin.unrealized_conversion_cast %5231 : !mini.ptr<i32> to !mini.ptr<i32>
    %5236 = "mini.unwrap"(%5235) : (!mini.ptr<i32>) -> i32
    %5237 = builtin.unrealized_conversion_cast %5232 : !mini.ptr<i32> to !mini.ptr<i32>
    %5238 = "mini.unwrap"(%5237) : (!mini.ptr<i32>) -> i32
    %5239 = "mini.unwrap"(%5230) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5240 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %5241 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5242 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5243 = "mini.parameterizations_array"(%5240, %5241, %5242) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5243, %5239, %5234, %5236, %5238) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %5244 = builtin.unrealized_conversion_cast %5230 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %5245 = "mini.unwrap"(%5244) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %5246 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %5247 = "mini.parameterizations_array"(%5246) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%5247, %5245) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %5248 = "mini.field_access"(%5217) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32} : (!mini.fatptr<"OutOfBoundsDetails">) -> !mini.ptr<i32>
    %5249 = "mini.unionize"(%5248) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %5250 = "mini.unwrap"(%5249) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %5251 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5252 = "mini.parameterizations_array"(%5251) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%5252, %5250) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %5253 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5254 = "mini.create_buffer"(%5253) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %5255 = builtin.unrealized_conversion_cast %5254 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %5256 = "mini.refer"(%5255) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5257 = "mini.literal"() {"typ" = !llvm.array<25 x i8>, "value" = "The indexing argument was"} : () -> !llvm.ptr
    %5258 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %5259 = "mini.buffer_indexation"(%5256, %5258) {"typ" = !llvm.array<25 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%5259, %5257) {"typ" = !llvm.array<25 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %5260 = "mini.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5261 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5262 = "mini.unwrap"(%5256) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5263 = "mini.unwrap"(%5260) : (!mini.ptr<i32>) -> i32
    %5264 = "mini.unwrap"(%5261) : (!mini.ptr<i32>) -> i32
    %5265 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %5266 = "mini.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5267 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5268 = builtin.unrealized_conversion_cast %5256 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %5269 = "mini.unwrap"(%5268) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5270 = builtin.unrealized_conversion_cast %5266 : !mini.ptr<i32> to !mini.ptr<i32>
    %5271 = "mini.unwrap"(%5270) : (!mini.ptr<i32>) -> i32
    %5272 = builtin.unrealized_conversion_cast %5267 : !mini.ptr<i32> to !mini.ptr<i32>
    %5273 = "mini.unwrap"(%5272) : (!mini.ptr<i32>) -> i32
    %5274 = "mini.unwrap"(%5265) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5275 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %5276 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5277 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5278 = "mini.parameterizations_array"(%5275, %5276, %5277) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5278, %5274, %5269, %5271, %5273) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %5279 = builtin.unrealized_conversion_cast %5265 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %5280 = "mini.unwrap"(%5279) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %5281 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %5282 = "mini.parameterizations_array"(%5281) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%5282, %5280) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %5283 = "mini.field_access"(%5217) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32} : (!mini.fatptr<"OutOfBoundsDetails">) -> !mini.ptr<i32>
    %5284 = "mini.unionize"(%5283) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %5285 = "mini.unwrap"(%5284) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %5286 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5287 = "mini.parameterizations_array"(%5286) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%5287, %5285) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "OutOfBoundsDetails_report_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb590(%5288 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5289 : !llvm.ptr):
    %5290 = "mini.invariant"(%5289) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5291 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb591] : () -> ()
  ^bb591:
    %5292 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%5292, %5291) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb592] : () -> ()
  ^bb592:
    %5293 = "llvm.extractvalue"(%5288) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5294 = "llvm.load"(%5291) : (!llvm.ptr) -> i32
    %5295 = "llvm.getelementptr"(%5293, %5294) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5296 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5297 = "llvm.getelementptr"(%5295, %5296) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5297) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBoundsDetails_B_report_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 0 : i32, "meth_name" = "OutOfBounds_field_details"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 1 : i32, "meth_name" = "OutOfBounds_field_line_number"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 2 : i32, "meth_name" = "OutOfBounds_field_file_name"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 3 : i32, "meth_name" = "OutOfBounds_field_message"} : () -> ()
  "mini.func"() ({
  ^bb593(%5298 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5299 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5300 : !llvm.ptr, %5301 : i32, %5302 : i32):
    %5303 = "mini.wrap"(%5298) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"OutOfBounds">
    %5304 = "mini.to_fat_ptr"(%5303) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "OutOfBounds", "to_typ_name" = "OutOfBounds", "invariant"} : (!mini.fatptr<"OutOfBounds">) -> !mini.fatptr<"OutOfBounds">
    %5305 = "mini.wrap"(%5301) : (i32) -> !mini.ptr<i32>
    %5306 = builtin.unrealized_conversion_cast %5305 : !mini.ptr<i32> to !mini.ptr<i32>
    %5307 = "mini.wrap"(%5302) : (i32) -> !mini.ptr<i32>
    %5308 = builtin.unrealized_conversion_cast %5307 : !mini.ptr<i32> to !mini.ptr<i32>
    %5309 = "mini.unwrap"(%5306) : (!mini.ptr<i32>) -> i32
    %5310 = "mini.unwrap"(%5308) : (!mini.ptr<i32>) -> i32
    %5311 = "mini.new"() {"typ" = !llvm.struct<(i32, i32)>, "class_name" = "OutOfBoundsDetails", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"OutOfBoundsDetails">
    %5312 = builtin.unrealized_conversion_cast %5306 : !mini.ptr<i32> to !mini.ptr<i32>
    %5313 = "mini.unwrap"(%5312) : (!mini.ptr<i32>) -> i32
    %5314 = builtin.unrealized_conversion_cast %5308 : !mini.ptr<i32> to !mini.ptr<i32>
    %5315 = "mini.unwrap"(%5314) : (!mini.ptr<i32>) -> i32
    %5316 = "mini.unwrap"(%5311) : (!mini.fatptr<"OutOfBoundsDetails">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5317 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5318 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5319 = "mini.parameterizations_array"(%5317, %5318) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5319, %5316, %5313, %5315) {"offset" = 2 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %5320 = "mini.field_access"(%5304) {"offset" = 0 : i64, "vtable_bytes" = 232 : i32} : (!mini.fatptr<"OutOfBounds">) -> !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>
    "mini.castassign"(%5320, %5311) ({
      %5321 = builtin.unrealized_conversion_cast %5311 : !mini.fatptr<"OutOfBoundsDetails"> to !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>, !mini.fatptr<"OutOfBoundsDetails">) -> ()
    %5322 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5323 = "mini.field_access"(%5304) {"offset" = 1 : i64, "vtable_bytes" = 232 : i32} : (!mini.fatptr<"OutOfBounds">) -> !mini.ptr<i32>
    "mini.castassign"(%5323, %5322) ({
      %5324 = builtin.unrealized_conversion_cast %5322 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %5325 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5326 = "mini.create_buffer"(%5325) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %5327 = builtin.unrealized_conversion_cast %5326 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %5328 = "mini.refer"(%5327) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5329 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %5330 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %5331 = "mini.buffer_indexation"(%5328, %5330) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%5331, %5329) {"typ" = !llvm.array<0 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %5332 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5333 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5334 = "mini.unwrap"(%5328) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5335 = "mini.unwrap"(%5332) : (!mini.ptr<i32>) -> i32
    %5336 = "mini.unwrap"(%5333) : (!mini.ptr<i32>) -> i32
    %5337 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %5338 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5339 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5340 = builtin.unrealized_conversion_cast %5328 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %5341 = "mini.unwrap"(%5340) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5342 = builtin.unrealized_conversion_cast %5338 : !mini.ptr<i32> to !mini.ptr<i32>
    %5343 = "mini.unwrap"(%5342) : (!mini.ptr<i32>) -> i32
    %5344 = builtin.unrealized_conversion_cast %5339 : !mini.ptr<i32> to !mini.ptr<i32>
    %5345 = "mini.unwrap"(%5344) : (!mini.ptr<i32>) -> i32
    %5346 = "mini.unwrap"(%5337) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5347 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %5348 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5349 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5350 = "mini.parameterizations_array"(%5347, %5348, %5349) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5350, %5346, %5341, %5343, %5345) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %5351 = "mini.field_access"(%5304) {"offset" = 2 : i64, "vtable_bytes" = 232 : i32} : (!mini.fatptr<"OutOfBounds">) -> !mini.fatptr<"String">
    "mini.castassign"(%5351, %5337) ({
      %5352 = "mini.to_fat_ptr"(%5337) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "should_offset"} : (!mini.fatptr<"String">, !mini.fatptr<"String">) -> ()
    %5353 = "mini.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5354 = "mini.create_buffer"(%5353) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %5355 = builtin.unrealized_conversion_cast %5354 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %5356 = "mini.refer"(%5355) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5357 = "mini.literal"() {"typ" = !llvm.array<65 x i8>, "value" = "An out-of-bounds error occurred while indexing into a collection."} : () -> !llvm.ptr
    %5358 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %5359 = "mini.buffer_indexation"(%5356, %5358) {"typ" = !llvm.array<65 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%5359, %5357) {"typ" = !llvm.array<65 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %5360 = "mini.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5361 = "mini.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5362 = "mini.unwrap"(%5356) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5363 = "mini.unwrap"(%5360) : (!mini.ptr<i32>) -> i32
    %5364 = "mini.unwrap"(%5361) : (!mini.ptr<i32>) -> i32
    %5365 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %5366 = "mini.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5367 = "mini.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5368 = builtin.unrealized_conversion_cast %5356 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %5369 = "mini.unwrap"(%5368) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5370 = builtin.unrealized_conversion_cast %5366 : !mini.ptr<i32> to !mini.ptr<i32>
    %5371 = "mini.unwrap"(%5370) : (!mini.ptr<i32>) -> i32
    %5372 = builtin.unrealized_conversion_cast %5367 : !mini.ptr<i32> to !mini.ptr<i32>
    %5373 = "mini.unwrap"(%5372) : (!mini.ptr<i32>) -> i32
    %5374 = "mini.unwrap"(%5365) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5375 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %5376 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5377 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5378 = "mini.parameterizations_array"(%5375, %5376, %5377) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5378, %5374, %5369, %5371, %5373) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %5379 = "mini.field_access"(%5304) {"offset" = 3 : i64, "vtable_bytes" = 232 : i32} : (!mini.fatptr<"OutOfBounds">) -> !mini.fatptr<"String">
    "mini.castassign"(%5379, %5365) ({
      %5380 = "mini.to_fat_ptr"(%5365) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "should_offset"} : (!mini.fatptr<"String">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "OutOfBounds_init_boundsPtri32_indexPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb594(%5381 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5382 : !llvm.ptr, %5383 : i32, %5384 : i32):
    %5385 = "mini.invariant"(%5382) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5386 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb595] : () -> ()
  ^bb596:
    %5387 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%5387, %5386) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb597] : () -> ()
  ^bb598:
    %5388 = "llvm.getelementptr"(%5382) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5389 = "llvm.load"(%5388) : (!llvm.ptr) -> !llvm.ptr
    %5390 = "llvm.getelementptr"(%5389) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5391 = "llvm.getelementptr"(%5389) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5392 = "llvm.getelementptr"(%5389) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5393 = "llvm.getelementptr"(%5389) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5394 = "llvm.load"(%5390) : (!llvm.ptr) -> i64
    %5395 = "llvm.load"(%5391) : (!llvm.ptr) -> i64
    %5396 = "llvm.load"(%5392) : (!llvm.ptr) -> !llvm.ptr
    %5397 = "llvm.load"(%5393) : (!llvm.ptr) -> !llvm.ptr
    %5398 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5399 = "llvm.ptrtoint"(%5398) : (!llvm.ptr) -> i64
    %5400 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5401 = "mini.subtype"(%5396, %5395, %5394, %5400, %5399, %5397) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5401) [^bb596, ^bb596] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb595:
    %5402 = "llvm.getelementptr"(%5382) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5403 = "llvm.load"(%5402) : (!llvm.ptr) -> !llvm.ptr
    %5404 = "llvm.getelementptr"(%5403) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5405 = "llvm.getelementptr"(%5403) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5406 = "llvm.getelementptr"(%5403) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5407 = "llvm.getelementptr"(%5403) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5408 = "llvm.load"(%5404) : (!llvm.ptr) -> i64
    %5409 = "llvm.load"(%5405) : (!llvm.ptr) -> i64
    %5410 = "llvm.load"(%5406) : (!llvm.ptr) -> !llvm.ptr
    %5411 = "llvm.load"(%5407) : (!llvm.ptr) -> !llvm.ptr
    %5412 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5413 = "llvm.ptrtoint"(%5412) : (!llvm.ptr) -> i64
    %5414 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5415 = "mini.subtype"(%5410, %5409, %5408, %5414, %5413, %5411) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5415) [^bb598, ^bb598] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb597:
    %5416 = "llvm.extractvalue"(%5381) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5417 = "llvm.load"(%5386) : (!llvm.ptr) -> i32
    %5418 = "llvm.getelementptr"(%5416, %5417) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5419 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5420 = "llvm.getelementptr"(%5418, %5419) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5420) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_init_boundsPtri32_indexPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb599(%5421 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5422 : !llvm.ptr, %5423 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5424 = "mini.invariant"(%5422) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5425 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb600] : () -> ()
  ^bb601:
    %5426 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%5426, %5425) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb602] : () -> ()
  ^bb600:
    %5427 = "llvm.getelementptr"(%5422) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5428 = "llvm.load"(%5427) : (!llvm.ptr) -> !llvm.ptr
    %5429 = "llvm.getelementptr"(%5428) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5430 = "llvm.getelementptr"(%5428) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5431 = "llvm.getelementptr"(%5428) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5432 = "llvm.getelementptr"(%5428) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5433 = "llvm.load"(%5429) : (!llvm.ptr) -> i64
    %5434 = "llvm.load"(%5430) : (!llvm.ptr) -> i64
    %5435 = "llvm.load"(%5431) : (!llvm.ptr) -> !llvm.ptr
    %5436 = "llvm.load"(%5432) : (!llvm.ptr) -> !llvm.ptr
    %5437 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %5438 = "llvm.ptrtoint"(%5437) : (!llvm.ptr) -> i64
    %5439 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %5440 = "mini.subtype"(%5435, %5434, %5433, %5439, %5438, %5436) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5440) [^bb601, ^bb601] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb602:
    %5441 = "llvm.extractvalue"(%5421) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5442 = "llvm.load"(%5425) : (!llvm.ptr) -> i32
    %5443 = "llvm.getelementptr"(%5441, %5442) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5444 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5445 = "llvm.getelementptr"(%5443, %5444) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5445) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb603(%5446 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5447 : !llvm.ptr):
    %5448 = "mini.invariant"(%5447) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5449 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb604] : () -> ()
  ^bb604:
    %5450 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%5450, %5449) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb605] : () -> ()
  ^bb605:
    %5451 = "llvm.extractvalue"(%5446) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5452 = "llvm.load"(%5449) : (!llvm.ptr) -> i32
    %5453 = "llvm.getelementptr"(%5451, %5452) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5454 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5455 = "llvm.getelementptr"(%5453, %5454) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5455) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb606(%5456 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5457 : !llvm.ptr, %5458 : i32, %5459 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5460 = "mini.invariant"(%5457) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5461 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb607] : () -> ()
  ^bb608:
    %5462 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%5462, %5461) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb609] : () -> ()
  ^bb610:
    %5463 = "llvm.getelementptr"(%5457) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5464 = "llvm.load"(%5463) : (!llvm.ptr) -> !llvm.ptr
    %5465 = "llvm.getelementptr"(%5464) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5466 = "llvm.getelementptr"(%5464) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5467 = "llvm.getelementptr"(%5464) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5468 = "llvm.getelementptr"(%5464) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5469 = "llvm.load"(%5465) : (!llvm.ptr) -> i64
    %5470 = "llvm.load"(%5466) : (!llvm.ptr) -> i64
    %5471 = "llvm.load"(%5467) : (!llvm.ptr) -> !llvm.ptr
    %5472 = "llvm.load"(%5468) : (!llvm.ptr) -> !llvm.ptr
    %5473 = "mini.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
    %5474 = "llvm.ptrtoint"(%5473) : (!llvm.ptr) -> i64
    %5475 = "llvm.mlir.constant"() <{"value" = 6499063144389013426 : i64}> : () -> i64
    %5476 = "mini.subtype"(%5471, %5470, %5469, %5475, %5474, %5472) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5476) [^bb608, ^bb608] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb607:
    %5477 = "llvm.getelementptr"(%5457) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5478 = "llvm.load"(%5477) : (!llvm.ptr) -> !llvm.ptr
    %5479 = "llvm.getelementptr"(%5478) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5480 = "llvm.getelementptr"(%5478) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5481 = "llvm.getelementptr"(%5478) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5482 = "llvm.getelementptr"(%5478) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5483 = "llvm.load"(%5479) : (!llvm.ptr) -> i64
    %5484 = "llvm.load"(%5480) : (!llvm.ptr) -> i64
    %5485 = "llvm.load"(%5481) : (!llvm.ptr) -> !llvm.ptr
    %5486 = "llvm.load"(%5482) : (!llvm.ptr) -> !llvm.ptr
    %5487 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5488 = "llvm.ptrtoint"(%5487) : (!llvm.ptr) -> i64
    %5489 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5490 = "mini.subtype"(%5485, %5484, %5483, %5489, %5488, %5486) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5490) [^bb610, ^bb610] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb609:
    %5491 = "llvm.extractvalue"(%5456) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5492 = "llvm.load"(%5461) : (!llvm.ptr) -> i32
    %5493 = "llvm.getelementptr"(%5491, %5492) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5494 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5495 = "llvm.getelementptr"(%5493, %5494) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5495) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_set_info_line_numberPtri32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb611(%5496 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5497 : !llvm.ptr):
    %5498 = "mini.invariant"(%5497) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5499 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb612] : () -> ()
  ^bb612:
    %5500 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%5500, %5499) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb613] : () -> ()
  ^bb613:
    %5501 = "llvm.extractvalue"(%5496) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5502 = "llvm.load"(%5499) : (!llvm.ptr) -> i32
    %5503 = "llvm.getelementptr"(%5501, %5502) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5504 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5505 = "llvm.getelementptr"(%5503, %5504) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5505) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_report_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb614(%5506 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5507 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5508 : !llvm.ptr):
    %5509 = "mini.wrap"(%5506) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"OutOfBounds">
    %5510 = "mini.to_fat_ptr"(%5509) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "OutOfBounds", "to_typ_name" = "OutOfBounds", "invariant"} : (!mini.fatptr<"OutOfBounds">) -> !mini.fatptr<"OutOfBounds">
    %5511 = "mini.field_access"(%5510) {"offset" = 3 : i64, "vtable_bytes" = 232 : i32} : (!mini.fatptr<"OutOfBounds">) -> !mini.fatptr<"String">
    %5512 = builtin.unrealized_conversion_cast %5511 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %5513 = "mini.unwrap"(%5512) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %5514 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %5515 = "mini.parameterizations_array"(%5514) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%5515, %5513) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %5516 = "mini.field_access"(%5510) {"offset" = 0 : i64, "vtable_bytes" = 232 : i32} : (!mini.fatptr<"OutOfBounds">) -> !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>
    %5517 = "mini.checkflag"(%5516) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>) -> i1
    %5518 = "mini.unwrap"(%5517) : (i1) -> i1
    %5519 = builtin.unrealized_conversion_cast %5516 : !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]> to !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>
    "mini.if"(%5518) ({
      %5520 = "mini.to_fat_ptr"(%5519) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "OutOfBoundsDetails", "invariant"} : (!mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>) -> !mini.fatptr<"OutOfBoundsDetails">
      %5521 = "mini.unwrap"(%5520) : (!mini.fatptr<"OutOfBoundsDetails">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5522 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%5522, %5521) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      "mini.castassign"(%5519, %5520) ({
        %5523 = builtin.unrealized_conversion_cast %5520 : !mini.fatptr<"OutOfBoundsDetails"> to !mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.fatptr<"OutOfBoundsDetails">, !mini.nil]>, !mini.fatptr<"OutOfBoundsDetails">) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "OutOfBounds_print_message_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb615(%5524 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5525 : !llvm.ptr):
    %5526 = "mini.invariant"(%5525) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5527 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb616] : () -> ()
  ^bb616:
    %5528 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%5528, %5527) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb617] : () -> ()
  ^bb617:
    %5529 = "llvm.extractvalue"(%5524) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5530 = "llvm.load"(%5527) : (!llvm.ptr) -> i32
    %5531 = "llvm.getelementptr"(%5529, %5530) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<29 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5532 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5533 = "llvm.getelementptr"(%5531, %5532) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5533) : (!llvm.ptr) -> ()
  }) {"func_name" = "OutOfBounds_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "offset" = 0 : i32, "meth_name" = "IntArray_field_buffer"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "offset" = 1 : i32, "meth_name" = "IntArray_field_length"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "offset" = 2 : i32, "meth_name" = "IntArray_field_capacity"} : () -> ()
  "mini.func"() ({
  ^bb618(%5534 : !llvm.ptr, %5535 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5536 = "mini.wrap"(%5535) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntIterable">
    %5537 = "mini.to_fat_ptr"(%5536) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %5538 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5539 = "mini.create_buffer"(%5538) {"typ" = i32} : (!mini.ptr<i32>) -> !llvm.ptr
    %5540 = builtin.unrealized_conversion_cast %5539 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %5541 = "mini.refer"(%5540) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %5542 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5543 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5544 = "mini.unwrap"(%5541) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %5545 = "mini.unwrap"(%5542) : (!mini.ptr<i32>) -> i32
    %5546 = "mini.unwrap"(%5543) : (!mini.ptr<i32>) -> i32
    %5547 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"IntArray">
    %5548 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5549 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5550 = builtin.unrealized_conversion_cast %5541 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %5551 = "mini.unwrap"(%5550) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %5552 = builtin.unrealized_conversion_cast %5548 : !mini.ptr<i32> to !mini.ptr<i32>
    %5553 = "mini.unwrap"(%5552) : (!mini.ptr<i32>) -> i32
    %5554 = builtin.unrealized_conversion_cast %5549 : !mini.ptr<i32> to !mini.ptr<i32>
    %5555 = "mini.unwrap"(%5554) : (!mini.ptr<i32>) -> i32
    %5556 = "mini.unwrap"(%5547) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5557 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %5558 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5559 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %5560 = "mini.parameterizations_array"(%5557, %5558, %5559) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5560, %5556, %5551, %5553, %5555) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %5561 = "mini.to_fat_ptr"(%5547) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5562 = "mini.refer"(%5561) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5563 = "mini.unwrap"(%5537) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5564 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5565 = "mini.method_call"(%5564, %5563) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %5566 = "mini.to_fat_ptr"(%5565) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntIterator">
    %5567 = "mini.to_fat_ptr"(%5566) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterator", "to_typ_name" = "IntIterator", "invariant"} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    %5568 = "mini.refer"(%5567) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntIterator">) -> !mini.fatptr<"IntIterator">
    "mini.while"() ({
      %5569 = "mini.unwrap"(%5568) : (!mini.fatptr<"IntIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5570 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %5571 = "mini.method_call"(%5570, %5569) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %5572 = builtin.unrealized_conversion_cast %5571 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %5573 = "mini.checkflag"(%5572) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %5574 = "mini.unwrap"(%5573) : (i1) -> i1
    }, {
      %5575 = "mini.narrow"(%5572) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %5576 = builtin.unrealized_conversion_cast %5575 : !mini.ptr<i32> to !mini.ptr<i32>
      %5577 = "mini.unwrap"(%5576) : (!mini.ptr<i32>) -> i32
      %5578 = "mini.unwrap"(%5562) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5579 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %5580 = "mini.parameterizations_array"(%5579) : (!llvm.ptr) -> !llvm.ptr
      %5581 = "mini.method_call"(%5580, %5578, %5577) {"offset" = 9 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.fatptr<"IntArray">
      %5582 = "mini.to_fat_ptr"(%5581) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
      "mini.castassign"(%5572, %5575) ({
        %5583 = builtin.unrealized_conversion_cast %5575 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %5584 = "mini.to_fat_ptr"(%5562) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    "mini.return"(%5584) : (!mini.fatptr<"IntArray">) -> ()
  }) {"func_name" = "IntArray__Self_from_iterable_iterableIntIterable", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb619(%5585 : !llvm.ptr, %5586 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5587 = "mini.invariant"(%5585) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5588 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb620] : () -> ()
  ^bb621:
    %5589 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%5589, %5588) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb622] : () -> ()
  ^bb620:
    %5590 = "llvm.getelementptr"(%5585) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5591 = "llvm.load"(%5590) : (!llvm.ptr) -> !llvm.ptr
    %5592 = "llvm.getelementptr"(%5591) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5593 = "llvm.getelementptr"(%5591) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5594 = "llvm.getelementptr"(%5591) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5595 = "llvm.getelementptr"(%5591) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5596 = "llvm.load"(%5592) : (!llvm.ptr) -> i64
    %5597 = "llvm.load"(%5593) : (!llvm.ptr) -> i64
    %5598 = "llvm.load"(%5594) : (!llvm.ptr) -> !llvm.ptr
    %5599 = "llvm.load"(%5595) : (!llvm.ptr) -> !llvm.ptr
    %5600 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %5601 = "llvm.ptrtoint"(%5600) : (!llvm.ptr) -> i64
    %5602 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %5603 = "mini.subtype"(%5598, %5597, %5596, %5602, %5601, %5599) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5603) [^bb621, ^bb621] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb622:
    %5604 = "mini.addr_of"() {"global_name" = @IntArray} : () -> !llvm.ptr
    %5605 = "llvm.load"(%5588) : (!llvm.ptr) -> i32
    %5606 = "llvm.getelementptr"(%5604, %5605) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5607 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5608 = "llvm.getelementptr"(%5606, %5607) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5608) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B__Self_from_iterable_iterableIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb623(%5609 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5610 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5611 : !llvm.ptr):
    %5612 = "mini.wrap"(%5609) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5613 = "mini.to_fat_ptr"(%5612) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5614 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5615 = "mini.create_buffer"(%5614) {"typ" = i32} : (!mini.ptr<i32>) -> !llvm.ptr
    %5616 = "mini.field_access"(%5613) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    "mini.castassign"(%5616, %5615) ({
      %5617 = builtin.unrealized_conversion_cast %5615 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ", "should_offset"} : (!mini.buffer<!mini.ptr<i32>>, !llvm.ptr) -> ()
    %5618 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5619 = "mini.field_access"(%5613) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    "mini.castassign"(%5619, %5618) ({
      %5620 = builtin.unrealized_conversion_cast %5618 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %5621 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5622 = "mini.field_access"(%5613) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    "mini.castassign"(%5622, %5621) ({
      %5623 = builtin.unrealized_conversion_cast %5621 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb624(%5624 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5625 : !llvm.ptr):
    %5626 = "mini.invariant"(%5625) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5627 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb625] : () -> ()
  ^bb625:
    %5628 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%5628, %5627) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb626] : () -> ()
  ^bb626:
    %5629 = "llvm.extractvalue"(%5624) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5630 = "llvm.load"(%5627) : (!llvm.ptr) -> i32
    %5631 = "llvm.getelementptr"(%5629, %5630) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5632 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5633 = "llvm.getelementptr"(%5631, %5632) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5633) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb627(%5634 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5635 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5636 : !llvm.ptr, %5637 : !llvm.struct<(!llvm.ptr)>, %5638 : i32, %5639 : i32):
    %5640 = "mini.wrap"(%5634) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5641 = "mini.to_fat_ptr"(%5640) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5642 = "mini.wrap"(%5637) : (!llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i32>>
    %5643 = builtin.unrealized_conversion_cast %5642 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %5644 = "mini.field_access"(%5641) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    "mini.castassign"(%5644, %5643) ({
      %5645 = builtin.unrealized_conversion_cast %5643 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ", "should_offset"} : (!mini.buffer<!mini.ptr<i32>>, !mini.buffer<!mini.ptr<i32>>) -> ()
    %5646 = "mini.wrap"(%5638) : (i32) -> !mini.ptr<i32>
    %5647 = builtin.unrealized_conversion_cast %5646 : !mini.ptr<i32> to !mini.ptr<i32>
    %5648 = "mini.field_access"(%5641) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    "mini.castassign"(%5648, %5647) ({
      %5649 = builtin.unrealized_conversion_cast %5647 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %5650 = "mini.wrap"(%5639) : (i32) -> !mini.ptr<i32>
    %5651 = builtin.unrealized_conversion_cast %5650 : !mini.ptr<i32> to !mini.ptr<i32>
    %5652 = "mini.field_access"(%5641) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    "mini.castassign"(%5652, %5651) ({
      %5653 = builtin.unrealized_conversion_cast %5651 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray_init_bufferBufferPtri32_lengthPtri32_capacityPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb628(%5654 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5655 : !llvm.ptr, %5656 : !llvm.struct<(!llvm.ptr)>, %5657 : i32, %5658 : i32):
    %5659 = "mini.invariant"(%5655) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5660 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb629] : () -> ()
  ^bb630:
    %5661 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%5661, %5660) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb631] : () -> ()
  ^bb632:
    %5662 = "llvm.getelementptr"(%5655) <{"rawConstantIndices" = array<i32: 0, 2>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5663 = "llvm.load"(%5662) : (!llvm.ptr) -> !llvm.ptr
    %5664 = "llvm.getelementptr"(%5663) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5665 = "llvm.getelementptr"(%5663) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5666 = "llvm.getelementptr"(%5663) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5667 = "llvm.getelementptr"(%5663) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5668 = "llvm.load"(%5664) : (!llvm.ptr) -> i64
    %5669 = "llvm.load"(%5665) : (!llvm.ptr) -> i64
    %5670 = "llvm.load"(%5666) : (!llvm.ptr) -> !llvm.ptr
    %5671 = "llvm.load"(%5667) : (!llvm.ptr) -> !llvm.ptr
    %5672 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5673 = "llvm.ptrtoint"(%5672) : (!llvm.ptr) -> i64
    %5674 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5675 = "mini.subtype"(%5670, %5669, %5668, %5674, %5673, %5671) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5675) [^bb630, ^bb630] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb633:
    %5676 = "llvm.getelementptr"(%5655) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5677 = "llvm.load"(%5676) : (!llvm.ptr) -> !llvm.ptr
    %5678 = "llvm.getelementptr"(%5677) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5679 = "llvm.getelementptr"(%5677) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5680 = "llvm.getelementptr"(%5677) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5681 = "llvm.getelementptr"(%5677) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5682 = "llvm.load"(%5678) : (!llvm.ptr) -> i64
    %5683 = "llvm.load"(%5679) : (!llvm.ptr) -> i64
    %5684 = "llvm.load"(%5680) : (!llvm.ptr) -> !llvm.ptr
    %5685 = "llvm.load"(%5681) : (!llvm.ptr) -> !llvm.ptr
    %5686 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5687 = "llvm.ptrtoint"(%5686) : (!llvm.ptr) -> i64
    %5688 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5689 = "mini.subtype"(%5684, %5683, %5682, %5688, %5687, %5685) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5689) [^bb632, ^bb632] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb629:
    %5690 = "llvm.getelementptr"(%5655) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5691 = "llvm.load"(%5690) : (!llvm.ptr) -> !llvm.ptr
    %5692 = "llvm.getelementptr"(%5691) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5693 = "llvm.getelementptr"(%5691) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5694 = "llvm.getelementptr"(%5691) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5695 = "llvm.getelementptr"(%5691) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5696 = "llvm.load"(%5692) : (!llvm.ptr) -> i64
    %5697 = "llvm.load"(%5693) : (!llvm.ptr) -> i64
    %5698 = "llvm.load"(%5694) : (!llvm.ptr) -> !llvm.ptr
    %5699 = "llvm.load"(%5695) : (!llvm.ptr) -> !llvm.ptr
    %5700 = "mini.addr_of"() {"global_name" = @buffer_typ} : () -> !llvm.ptr
    %5701 = "llvm.ptrtoint"(%5700) : (!llvm.ptr) -> i64
    %5702 = "llvm.mlir.constant"() <{"value" = 18128551326514141379 : i64}> : () -> i64
    %5703 = "mini.subtype"(%5698, %5697, %5696, %5702, %5701, %5699) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5703) [^bb633, ^bb633] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb631:
    %5704 = "llvm.extractvalue"(%5654) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5705 = "llvm.load"(%5660) : (!llvm.ptr) -> i32
    %5706 = "llvm.getelementptr"(%5704, %5705) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5707 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5708 = "llvm.getelementptr"(%5706, %5707) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5708) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_init_bufferBufferPtri32_lengthPtri32_capacityPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb634(%5709 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5710 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5711 : !llvm.ptr):
    %5712 = "mini.wrap"(%5709) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5713 = "mini.to_fat_ptr"(%5712) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5714 = "mini.field_access"(%5713) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5715 = builtin.unrealized_conversion_cast %5714 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%5715) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray_length_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb635(%5716 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5717 : !llvm.ptr):
    %5718 = "mini.invariant"(%5717) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5719 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb636] : () -> ()
  ^bb636:
    %5720 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
    "llvm.store"(%5720, %5719) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb637] : () -> ()
  ^bb637:
    %5721 = "llvm.extractvalue"(%5716) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5722 = "llvm.load"(%5719) : (!llvm.ptr) -> i32
    %5723 = "llvm.getelementptr"(%5721, %5722) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5724 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5725 = "llvm.getelementptr"(%5723, %5724) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5725) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_length_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb638(%5726 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5727 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5728 : !llvm.ptr):
    %5729 = "mini.wrap"(%5726) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5730 = "mini.to_fat_ptr"(%5729) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5731 = "mini.field_access"(%5730) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5732 = builtin.unrealized_conversion_cast %5731 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%5732) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray_capacity_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb639(%5733 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5734 : !llvm.ptr):
    %5735 = "mini.invariant"(%5734) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5736 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb640] : () -> ()
  ^bb640:
    %5737 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
    "llvm.store"(%5737, %5736) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb641] : () -> ()
  ^bb641:
    %5738 = "llvm.extractvalue"(%5733) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5739 = "llvm.load"(%5736) : (!llvm.ptr) -> i32
    %5740 = "llvm.getelementptr"(%5738, %5739) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5741 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5742 = "llvm.getelementptr"(%5740, %5741) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5742) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb642(%5743 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5744 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5745 : !llvm.ptr):
    %5746 = "mini.wrap"(%5743) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5747 = "mini.to_fat_ptr"(%5746) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5748 = "mini.field_access"(%5747) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %5749 = builtin.unrealized_conversion_cast %5748 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    "mini.return"(%5749) : (!mini.buffer<!mini.ptr<i32>>) -> ()
  }) {"func_name" = "IntArray_buffer_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb643(%5750 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5751 : !llvm.ptr):
    %5752 = "mini.invariant"(%5751) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5753 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb644] : () -> ()
  ^bb644:
    %5754 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
    "llvm.store"(%5754, %5753) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb645] : () -> ()
  ^bb645:
    %5755 = "llvm.extractvalue"(%5750) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5756 = "llvm.load"(%5753) : (!llvm.ptr) -> i32
    %5757 = "llvm.getelementptr"(%5755, %5756) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5758 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5759 = "llvm.getelementptr"(%5757, %5758) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5759) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_buffer_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb646(%5760 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5761 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5762 : !llvm.ptr, %5763 : i32):
    %5764 = "mini.wrap"(%5760) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5765 = "mini.to_fat_ptr"(%5764) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5766 = "mini.wrap"(%5763) : (i32) -> !mini.ptr<i32>
    %5767 = builtin.unrealized_conversion_cast %5766 : !mini.ptr<i32> to !mini.ptr<i32>
    %5768 = "mini.field_access"(%5765) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5769 = "mini.field_access"(%5765) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5770 = "mini.unwrap"(%5768) : (!mini.ptr<i32>) -> i32
    %5771 = "mini.unwrap"(%5769) : (!mini.ptr<i32>) -> i32
    %5772 = "mini.comparison"(%5770, %5771) {"op" = "LT"} : (i32, i32) -> i1
    %5773 = "mini.wrap"(%5772) : (i1) -> !mini.ptr<i32>
    %5774 = "mini.unwrap"(%5773) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5774) ({
      %5775 = "mini.field_access"(%5765) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %5776 = "mini.field_access"(%5765) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5777 = "mini.buffer_indexation"(%5775, %5776) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.castassign"(%5777, %5767) ({
        %5778 = builtin.unrealized_conversion_cast %5767 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %5779 = "mini.field_access"(%5765) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5780 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5781 = "mini.unwrap"(%5779) : (!mini.ptr<i32>) -> i32
      %5782 = "mini.unwrap"(%5780) : (!mini.ptr<i32>) -> i32
      %5783 = "mini.arithmetic"(%5781, %5782) {"op" = "ADD"} : (i32, i32) -> i32
      %5784 = "mini.wrap"(%5783) : (i32) -> !mini.ptr<i32>
      %5785 = "mini.field_access"(%5765) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      "mini.castassign"(%5785, %5784) ({
        %5786 = builtin.unrealized_conversion_cast %5784 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %5787 = "mini.to_fat_ptr"(%5765) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
      "mini.return"(%5787) : (!mini.fatptr<"IntArray">) -> ()
    }) : (i1) -> ()
    %5788 = "mini.field_access"(%5765) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5789 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5790 = "mini.unwrap"(%5788) : (!mini.ptr<i32>) -> i32
    %5791 = "mini.unwrap"(%5789) : (!mini.ptr<i32>) -> i32
    %5792 = "mini.arithmetic"(%5790, %5791) {"op" = "MUL"} : (i32, i32) -> i32
    %5793 = "mini.wrap"(%5792) : (i32) -> !mini.ptr<i32>
    %5794 = "mini.field_access"(%5765) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    "mini.castassign"(%5794, %5793) ({
      %5795 = builtin.unrealized_conversion_cast %5793 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %5796 = "mini.field_access"(%5765) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %5797 = builtin.unrealized_conversion_cast %5796 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %5798 = "mini.refer"(%5797) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %5799 = "mini.field_access"(%5765) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5800 = "mini.create_buffer"(%5799) {"typ" = i32} : (!mini.ptr<i32>) -> !llvm.ptr
    %5801 = "mini.field_access"(%5765) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    "mini.castassign"(%5801, %5800) ({
      %5802 = builtin.unrealized_conversion_cast %5800 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ", "should_offset"} : (!mini.buffer<!mini.ptr<i32>>, !llvm.ptr) -> ()
    %5803 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %5804 = "mini.field_access"(%5765) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5805 = "mini.unwrap"(%5803) : (!mini.ptr<i32>) -> i32
      %5806 = "mini.unwrap"(%5804) : (!mini.ptr<i32>) -> i32
      %5807 = "mini.comparison"(%5805, %5806) {"op" = "LT"} : (i32, i32) -> i1
      %5808 = "mini.wrap"(%5807) : (i1) -> !mini.ptr<i32>
      %5809 = "mini.unwrap"(%5808) : (!mini.ptr<i32>) -> i1
    }, {
      %5810 = "mini.buffer_indexation"(%5798, %5803) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %5811 = "mini.field_access"(%5765) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %5812 = "mini.buffer_indexation"(%5811, %5803) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.castassign"(%5812, %5810) ({
        %5813 = builtin.unrealized_conversion_cast %5810 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %5814 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5815 = "mini.unwrap"(%5803) : (!mini.ptr<i32>) -> i32
      %5816 = "mini.unwrap"(%5814) : (!mini.ptr<i32>) -> i32
      %5817 = "mini.arithmetic"(%5815, %5816) {"op" = "ADD"} : (i32, i32) -> i32
      %5818 = "mini.wrap"(%5817) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%5803, %5818) ({
        %5819 = builtin.unrealized_conversion_cast %5818 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %5820 = "mini.field_access"(%5765) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %5821 = "mini.field_access"(%5765) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5822 = "mini.buffer_indexation"(%5820, %5821) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%5822, %5767) ({
      %5823 = builtin.unrealized_conversion_cast %5767 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %5824 = "mini.field_access"(%5765) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5825 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5826 = "mini.unwrap"(%5824) : (!mini.ptr<i32>) -> i32
    %5827 = "mini.unwrap"(%5825) : (!mini.ptr<i32>) -> i32
    %5828 = "mini.arithmetic"(%5826, %5827) {"op" = "ADD"} : (i32, i32) -> i32
    %5829 = "mini.wrap"(%5828) : (i32) -> !mini.ptr<i32>
    %5830 = "mini.field_access"(%5765) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    "mini.castassign"(%5830, %5829) ({
      %5831 = builtin.unrealized_conversion_cast %5829 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %5832 = "mini.to_fat_ptr"(%5765) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    "mini.return"(%5832) : (!mini.fatptr<"IntArray">) -> ()
  }) {"func_name" = "IntArray_append_xPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb647(%5833 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5834 : !llvm.ptr, %5835 : i32):
    %5836 = "mini.invariant"(%5834) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5837 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb648] : () -> ()
  ^bb649:
    %5838 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
    "llvm.store"(%5838, %5837) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb650] : () -> ()
  ^bb648:
    %5839 = "llvm.getelementptr"(%5834) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5840 = "llvm.load"(%5839) : (!llvm.ptr) -> !llvm.ptr
    %5841 = "llvm.getelementptr"(%5840) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5842 = "llvm.getelementptr"(%5840) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5843 = "llvm.getelementptr"(%5840) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5844 = "llvm.getelementptr"(%5840) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5845 = "llvm.load"(%5841) : (!llvm.ptr) -> i64
    %5846 = "llvm.load"(%5842) : (!llvm.ptr) -> i64
    %5847 = "llvm.load"(%5843) : (!llvm.ptr) -> !llvm.ptr
    %5848 = "llvm.load"(%5844) : (!llvm.ptr) -> !llvm.ptr
    %5849 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %5850 = "llvm.ptrtoint"(%5849) : (!llvm.ptr) -> i64
    %5851 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %5852 = "mini.subtype"(%5847, %5846, %5845, %5851, %5850, %5848) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%5852) [^bb649, ^bb649] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb650:
    %5853 = "llvm.extractvalue"(%5833) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5854 = "llvm.load"(%5837) : (!llvm.ptr) -> i32
    %5855 = "llvm.getelementptr"(%5853, %5854) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5856 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %5857 = "llvm.getelementptr"(%5855, %5856) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5857) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_append_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb651(%5858 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5859 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5860 : !llvm.ptr, %5861 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5862 = "mini.wrap"(%5858) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5863 = "mini.to_fat_ptr"(%5862) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5864 = "mini.wrap"(%5861) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %5865 = "mini.to_fat_ptr"(%5864) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %5866 = "mini.unwrap"(%5865) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5867 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5868 = "mini.method_call"(%5867, %5866) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i32>>
    %5869 = builtin.unrealized_conversion_cast %5868 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %5870 = builtin.unrealized_conversion_cast %5869 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %5871 = "mini.refer"(%5870) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %5872 = "mini.unwrap"(%5865) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5873 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5874 = "mini.method_call"(%5873, %5872) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %5875 = builtin.unrealized_conversion_cast %5874 : !mini.ptr<i32> to !mini.ptr<i32>
    %5876 = "mini.field_access"(%5863) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5877 = "mini.unwrap"(%5876) : (!mini.ptr<i32>) -> i32
    %5878 = "mini.unwrap"(%5875) : (!mini.ptr<i32>) -> i32
    %5879 = "mini.arithmetic"(%5877, %5878) {"op" = "ADD"} : (i32, i32) -> i32
    %5880 = "mini.wrap"(%5879) : (i32) -> !mini.ptr<i32>
    %5881 = "mini.field_access"(%5863) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5882 = "mini.unwrap"(%5880) : (!mini.ptr<i32>) -> i32
    %5883 = "mini.unwrap"(%5881) : (!mini.ptr<i32>) -> i32
    %5884 = "mini.comparison"(%5882, %5883) {"op" = "LT"} : (i32, i32) -> i1
    %5885 = "mini.wrap"(%5884) : (i1) -> !mini.ptr<i32>
    %5886 = "mini.unwrap"(%5885) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5886) ({
      %5887 = "mini.field_access"(%5863) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5888 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      "mini.while"() ({
        %5889 = "mini.field_access"(%5863) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
        %5890 = "mini.unwrap"(%5889) : (!mini.ptr<i32>) -> i32
        %5891 = "mini.unwrap"(%5875) : (!mini.ptr<i32>) -> i32
        %5892 = "mini.arithmetic"(%5890, %5891) {"op" = "ADD"} : (i32, i32) -> i32
        %5893 = "mini.wrap"(%5892) : (i32) -> !mini.ptr<i32>
        %5894 = "mini.unwrap"(%5887) : (!mini.ptr<i32>) -> i32
        %5895 = "mini.unwrap"(%5893) : (!mini.ptr<i32>) -> i32
        %5896 = "mini.comparison"(%5894, %5895) {"op" = "LT"} : (i32, i32) -> i1
        %5897 = "mini.wrap"(%5896) : (i1) -> !mini.ptr<i32>
        %5898 = "mini.unwrap"(%5897) : (!mini.ptr<i32>) -> i1
      }, {
        %5899 = "mini.buffer_indexation"(%5871, %5888) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
        %5900 = "mini.field_access"(%5863) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
        %5901 = "mini.buffer_indexation"(%5900, %5887) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
        "mini.castassign"(%5901, %5899) ({
          %5902 = builtin.unrealized_conversion_cast %5899 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        %5903 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %5904 = "mini.unwrap"(%5887) : (!mini.ptr<i32>) -> i32
        %5905 = "mini.unwrap"(%5903) : (!mini.ptr<i32>) -> i32
        %5906 = "mini.arithmetic"(%5904, %5905) {"op" = "ADD"} : (i32, i32) -> i32
        %5907 = "mini.wrap"(%5906) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%5887, %5907) ({
          %5908 = builtin.unrealized_conversion_cast %5907 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        %5909 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %5910 = "mini.unwrap"(%5888) : (!mini.ptr<i32>) -> i32
        %5911 = "mini.unwrap"(%5909) : (!mini.ptr<i32>) -> i32
        %5912 = "mini.arithmetic"(%5910, %5911) {"op" = "ADD"} : (i32, i32) -> i32
        %5913 = "mini.wrap"(%5912) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%5888, %5913) ({
          %5914 = builtin.unrealized_conversion_cast %5913 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      }) : () -> ()
      %5915 = "mini.field_access"(%5863) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5916 = "mini.unwrap"(%5915) : (!mini.ptr<i32>) -> i32
      %5917 = "mini.unwrap"(%5875) : (!mini.ptr<i32>) -> i32
      %5918 = "mini.arithmetic"(%5916, %5917) {"op" = "ADD"} : (i32, i32) -> i32
      %5919 = "mini.wrap"(%5918) : (i32) -> !mini.ptr<i32>
      %5920 = "mini.field_access"(%5863) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      "mini.castassign"(%5920, %5919) ({
        %5921 = builtin.unrealized_conversion_cast %5919 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %5922 = "mini.to_fat_ptr"(%5863) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
      "mini.return"(%5922) : (!mini.fatptr<"IntArray">) -> ()
    }) : (i1) -> ()
    %5923 = "mini.field_access"(%5863) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5924 = "mini.unwrap"(%5923) : (!mini.ptr<i32>) -> i32
    %5925 = "mini.unwrap"(%5875) : (!mini.ptr<i32>) -> i32
    %5926 = "mini.arithmetic"(%5924, %5925) {"op" = "ADD"} : (i32, i32) -> i32
    %5927 = "mini.wrap"(%5926) : (i32) -> !mini.ptr<i32>
    %5928 = "mini.field_access"(%5863) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    "mini.castassign"(%5928, %5927) ({
      %5929 = builtin.unrealized_conversion_cast %5927 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %5930 = "mini.field_access"(%5863) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %5931 = builtin.unrealized_conversion_cast %5930 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %5932 = "mini.refer"(%5931) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %5933 = "mini.field_access"(%5863) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5934 = "mini.create_buffer"(%5933) {"typ" = i32} : (!mini.ptr<i32>) -> !llvm.ptr
    %5935 = "mini.field_access"(%5863) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    "mini.castassign"(%5935, %5934) ({
      %5936 = builtin.unrealized_conversion_cast %5934 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ", "should_offset"} : (!mini.buffer<!mini.ptr<i32>>, !llvm.ptr) -> ()
    %5937 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5938 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %5939 = "mini.field_access"(%5863) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5940 = "mini.unwrap"(%5939) : (!mini.ptr<i32>) -> i32
      %5941 = "mini.unwrap"(%5875) : (!mini.ptr<i32>) -> i32
      %5942 = "mini.arithmetic"(%5940, %5941) {"op" = "ADD"} : (i32, i32) -> i32
      %5943 = "mini.wrap"(%5942) : (i32) -> !mini.ptr<i32>
      %5944 = "mini.unwrap"(%5937) : (!mini.ptr<i32>) -> i32
      %5945 = "mini.unwrap"(%5943) : (!mini.ptr<i32>) -> i32
      %5946 = "mini.comparison"(%5944, %5945) {"op" = "LT"} : (i32, i32) -> i1
      %5947 = "mini.wrap"(%5946) : (i1) -> !mini.ptr<i32>
      %5948 = "mini.unwrap"(%5947) : (!mini.ptr<i32>) -> i1
    }, {
      %5949 = "mini.field_access"(%5863) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %5950 = "mini.unwrap"(%5937) : (!mini.ptr<i32>) -> i32
      %5951 = "mini.unwrap"(%5949) : (!mini.ptr<i32>) -> i32
      %5952 = "mini.comparison"(%5950, %5951) {"op" = "LT"} : (i32, i32) -> i1
      %5953 = "mini.wrap"(%5952) : (i1) -> !mini.ptr<i32>
      %5954 = "mini.unwrap"(%5953) : (!mini.ptr<i32>) -> i1
      "mini.if"(%5954) ({
        %5955 = "mini.buffer_indexation"(%5932, %5937) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
        %5956 = "mini.field_access"(%5863) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
        %5957 = "mini.buffer_indexation"(%5956, %5937) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
        "mini.castassign"(%5957, %5955) ({
          %5958 = builtin.unrealized_conversion_cast %5955 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        %5959 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %5960 = "mini.unwrap"(%5937) : (!mini.ptr<i32>) -> i32
        %5961 = "mini.unwrap"(%5959) : (!mini.ptr<i32>) -> i32
        %5962 = "mini.arithmetic"(%5960, %5961) {"op" = "ADD"} : (i32, i32) -> i32
        %5963 = "mini.wrap"(%5962) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%5937, %5963) ({
          %5964 = builtin.unrealized_conversion_cast %5963 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        "mini.continue"() [^bb652] : () -> ()
      }) : (i1) -> ()
      %5965 = "mini.buffer_indexation"(%5871, %5938) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %5966 = "mini.field_access"(%5863) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %5967 = "mini.buffer_indexation"(%5966, %5937) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.castassign"(%5967, %5965) ({
        %5968 = builtin.unrealized_conversion_cast %5965 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %5969 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5970 = "mini.unwrap"(%5937) : (!mini.ptr<i32>) -> i32
      %5971 = "mini.unwrap"(%5969) : (!mini.ptr<i32>) -> i32
      %5972 = "mini.arithmetic"(%5970, %5971) {"op" = "ADD"} : (i32, i32) -> i32
      %5973 = "mini.wrap"(%5972) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%5937, %5973) ({
        %5974 = builtin.unrealized_conversion_cast %5973 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %5975 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5976 = "mini.unwrap"(%5938) : (!mini.ptr<i32>) -> i32
      %5977 = "mini.unwrap"(%5975) : (!mini.ptr<i32>) -> i32
      %5978 = "mini.arithmetic"(%5976, %5977) {"op" = "ADD"} : (i32, i32) -> i32
      %5979 = "mini.wrap"(%5978) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%5938, %5979) ({
        %5980 = builtin.unrealized_conversion_cast %5979 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %5981 = "mini.field_access"(%5863) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %5982 = "mini.unwrap"(%5981) : (!mini.ptr<i32>) -> i32
    %5983 = "mini.unwrap"(%5875) : (!mini.ptr<i32>) -> i32
    %5984 = "mini.arithmetic"(%5982, %5983) {"op" = "ADD"} : (i32, i32) -> i32
    %5985 = "mini.wrap"(%5984) : (i32) -> !mini.ptr<i32>
    %5986 = "mini.field_access"(%5863) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    "mini.castassign"(%5986, %5985) ({
      %5987 = builtin.unrealized_conversion_cast %5985 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %5988 = "mini.to_fat_ptr"(%5863) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    "mini.return"(%5988) : (!mini.fatptr<"IntArray">) -> ()
  }) {"func_name" = "IntArray_extend_aryIntArray", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb653(%5989 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5990 : !llvm.ptr, %5991 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5992 = "mini.invariant"(%5990) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5993 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb654] : () -> ()
  ^bb655:
    %5994 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
    "llvm.store"(%5994, %5993) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb656] : () -> ()
  ^bb654:
    %5995 = "llvm.getelementptr"(%5990) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %5996 = "llvm.load"(%5995) : (!llvm.ptr) -> !llvm.ptr
    %5997 = "llvm.getelementptr"(%5996) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5998 = "llvm.getelementptr"(%5996) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5999 = "llvm.getelementptr"(%5996) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6000 = "llvm.getelementptr"(%5996) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6001 = "llvm.load"(%5997) : (!llvm.ptr) -> i64
    %6002 = "llvm.load"(%5998) : (!llvm.ptr) -> i64
    %6003 = "llvm.load"(%5999) : (!llvm.ptr) -> !llvm.ptr
    %6004 = "llvm.load"(%6000) : (!llvm.ptr) -> !llvm.ptr
    %6005 = "mini.addr_of"() {"global_name" = @IntArray} : () -> !llvm.ptr
    %6006 = "llvm.ptrtoint"(%6005) : (!llvm.ptr) -> i64
    %6007 = "llvm.mlir.constant"() <{"value" = 7629948565578263212 : i64}> : () -> i64
    %6008 = "mini.subtype"(%6003, %6002, %6001, %6007, %6006, %6004) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6008) [^bb655, ^bb655] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb656:
    %6009 = "llvm.extractvalue"(%5989) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6010 = "llvm.load"(%5993) : (!llvm.ptr) -> i32
    %6011 = "llvm.getelementptr"(%6009, %6010) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6012 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6013 = "llvm.getelementptr"(%6011, %6012) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6013) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_extend_aryIntArray", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb657(%6014 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6015 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6016 : !llvm.ptr, %6017 : i32):
    %6018 = "mini.wrap"(%6014) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %6019 = "mini.to_fat_ptr"(%6018) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6020 = "mini.wrap"(%6017) : (i32) -> !mini.ptr<i32>
    %6021 = builtin.unrealized_conversion_cast %6020 : !mini.ptr<i32> to !mini.ptr<i32>
    %6022 = "mini.field_access"(%6019) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6023 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6024 = "mini.unwrap"(%6022) : (!mini.ptr<i32>) -> i32
    %6025 = "mini.unwrap"(%6023) : (!mini.ptr<i32>) -> i32
    %6026 = "mini.arithmetic"(%6024, %6025) {"op" = "SUB"} : (i32, i32) -> i32
    %6027 = "mini.wrap"(%6026) : (i32) -> !mini.ptr<i32>
    %6028 = "mini.unwrap"(%6021) : (!mini.ptr<i32>) -> i32
    %6029 = "mini.unwrap"(%6027) : (!mini.ptr<i32>) -> i32
    %6030 = "mini.comparison"(%6028, %6029) {"op" = "GT"} : (i32, i32) -> i1
    %6031 = "mini.wrap"(%6030) : (i1) -> !mini.ptr<i32>
    %6032 = "mini.unwrap"(%6031) : (!mini.ptr<i32>) -> i1
    "mini.if"(%6032) ({
      %6033 = "mini.field_access"(%6019) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %6034 = "mini.unwrap"(%6033) : (!mini.ptr<i32>) -> i32
      %6035 = "mini.unwrap"(%6021) : (!mini.ptr<i32>) -> i32
      %6036 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "OutOfBounds", "num_data_fields" = 4 : i32} : () -> !mini.fatptr<"OutOfBounds">
      %6037 = "mini.field_access"(%6019) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %6038 = builtin.unrealized_conversion_cast %6037 : !mini.ptr<i32> to !mini.ptr<i32>
      %6039 = "mini.unwrap"(%6038) : (!mini.ptr<i32>) -> i32
      %6040 = builtin.unrealized_conversion_cast %6021 : !mini.ptr<i32> to !mini.ptr<i32>
      %6041 = "mini.unwrap"(%6040) : (!mini.ptr<i32>) -> i32
      %6042 = "mini.unwrap"(%6036) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6043 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %6044 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %6045 = "mini.parameterizations_array"(%6043, %6044) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%6045, %6042, %6039, %6041) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %6046 = "mini.literal"() {"value" = 617 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6047 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6048 = "mini.create_buffer"(%6047) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
      %6049 = builtin.unrealized_conversion_cast %6048 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %6050 = "mini.refer"(%6049) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %6051 = "mini.literal"() {"typ" = !llvm.array<58 x i8>, "value" = "c:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\tmpvy1dmse8.mini"} : () -> !llvm.ptr
      %6052 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      %6053 = "mini.buffer_indexation"(%6050, %6052) {"typ" = !llvm.array<58 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
      "mini.assign"(%6053, %6051) {"typ" = !llvm.array<58 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
      %6054 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6055 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6056 = "mini.unwrap"(%6050) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %6057 = "mini.unwrap"(%6054) : (!mini.ptr<i32>) -> i32
      %6058 = "mini.unwrap"(%6055) : (!mini.ptr<i32>) -> i32
      %6059 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
      %6060 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6061 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6062 = builtin.unrealized_conversion_cast %6050 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %6063 = "mini.unwrap"(%6062) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %6064 = builtin.unrealized_conversion_cast %6060 : !mini.ptr<i32> to !mini.ptr<i32>
      %6065 = "mini.unwrap"(%6064) : (!mini.ptr<i32>) -> i32
      %6066 = builtin.unrealized_conversion_cast %6061 : !mini.ptr<i32> to !mini.ptr<i32>
      %6067 = "mini.unwrap"(%6066) : (!mini.ptr<i32>) -> i32
      %6068 = "mini.unwrap"(%6059) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6069 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %6070 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %6071 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %6072 = "mini.parameterizations_array"(%6069, %6070, %6071) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%6072, %6068, %6063, %6065, %6067) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %6073 = builtin.unrealized_conversion_cast %6046 : !mini.ptr<i32> to !mini.ptr<i32>
      %6074 = "mini.unwrap"(%6073) : (!mini.ptr<i32>) -> i32
      %6075 = "mini.to_fat_ptr"(%6059) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      %6076 = "mini.unwrap"(%6075) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6077 = "mini.unwrap"(%6036) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6078 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %6079 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %6080 = "mini.parameterizations_array"(%6078, %6079) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%6080, %6077, %6074, %6076) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %6081 = builtin.unrealized_conversion_cast %6036 : !mini.fatptr<"OutOfBounds"> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
      %6082 = "mini.unwrap"(%6081) : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %6083 = "mini.coro_yield"(%6082) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %6084 = "mini.wrap"(%6083) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>
    }) : (i1) -> ()
    %6085 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6086 = "mini.unwrap"(%6021) : (!mini.ptr<i32>) -> i32
    %6087 = "mini.unwrap"(%6085) : (!mini.ptr<i32>) -> i32
    %6088 = "mini.comparison"(%6086, %6087) {"op" = "GE"} : (i32, i32) -> i1
    %6089 = "mini.wrap"(%6088) : (i1) -> !mini.ptr<i32>
    %6090 = "mini.unwrap"(%6089) : (!mini.ptr<i32>) -> i1
    "mini.if"(%6090) ({
      %6091 = "mini.field_access"(%6019) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %6092 = "mini.buffer_indexation"(%6091, %6021) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %6093 = builtin.unrealized_conversion_cast %6092 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%6093) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %6094 = "mini.field_access"(%6019) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6095 = "mini.unwrap"(%6094) : (!mini.ptr<i32>) -> i32
    %6096 = "mini.unwrap"(%6021) : (!mini.ptr<i32>) -> i32
    %6097 = "mini.arithmetic"(%6095, %6096) {"op" = "ADD"} : (i32, i32) -> i32
    %6098 = "mini.wrap"(%6097) : (i32) -> !mini.ptr<i32>
    %6099 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6100 = "mini.unwrap"(%6098) : (!mini.ptr<i32>) -> i32
    %6101 = "mini.unwrap"(%6099) : (!mini.ptr<i32>) -> i32
    %6102 = "mini.comparison"(%6100, %6101) {"op" = "LT"} : (i32, i32) -> i1
    %6103 = "mini.wrap"(%6102) : (i1) -> !mini.ptr<i32>
    %6104 = "mini.unwrap"(%6103) : (!mini.ptr<i32>) -> i1
    "mini.if"(%6104) ({
      %6105 = "mini.field_access"(%6019) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %6106 = "mini.unwrap"(%6105) : (!mini.ptr<i32>) -> i32
      %6107 = "mini.unwrap"(%6021) : (!mini.ptr<i32>) -> i32
      %6108 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "OutOfBounds", "num_data_fields" = 4 : i32} : () -> !mini.fatptr<"OutOfBounds">
      %6109 = "mini.field_access"(%6019) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %6110 = builtin.unrealized_conversion_cast %6109 : !mini.ptr<i32> to !mini.ptr<i32>
      %6111 = "mini.unwrap"(%6110) : (!mini.ptr<i32>) -> i32
      %6112 = builtin.unrealized_conversion_cast %6021 : !mini.ptr<i32> to !mini.ptr<i32>
      %6113 = "mini.unwrap"(%6112) : (!mini.ptr<i32>) -> i32
      %6114 = "mini.unwrap"(%6108) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6115 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %6116 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %6117 = "mini.parameterizations_array"(%6115, %6116) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%6117, %6114, %6111, %6113) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %6118 = "mini.literal"() {"value" = 619 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6119 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6120 = "mini.create_buffer"(%6119) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
      %6121 = builtin.unrealized_conversion_cast %6120 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %6122 = "mini.refer"(%6121) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %6123 = "mini.literal"() {"typ" = !llvm.array<58 x i8>, "value" = "c:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\tmpvy1dmse8.mini"} : () -> !llvm.ptr
      %6124 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      %6125 = "mini.buffer_indexation"(%6122, %6124) {"typ" = !llvm.array<58 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
      "mini.assign"(%6125, %6123) {"typ" = !llvm.array<58 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
      %6126 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6127 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6128 = "mini.unwrap"(%6122) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %6129 = "mini.unwrap"(%6126) : (!mini.ptr<i32>) -> i32
      %6130 = "mini.unwrap"(%6127) : (!mini.ptr<i32>) -> i32
      %6131 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
      %6132 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6133 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6134 = builtin.unrealized_conversion_cast %6122 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %6135 = "mini.unwrap"(%6134) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %6136 = builtin.unrealized_conversion_cast %6132 : !mini.ptr<i32> to !mini.ptr<i32>
      %6137 = "mini.unwrap"(%6136) : (!mini.ptr<i32>) -> i32
      %6138 = builtin.unrealized_conversion_cast %6133 : !mini.ptr<i32> to !mini.ptr<i32>
      %6139 = "mini.unwrap"(%6138) : (!mini.ptr<i32>) -> i32
      %6140 = "mini.unwrap"(%6131) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6141 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %6142 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %6143 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %6144 = "mini.parameterizations_array"(%6141, %6142, %6143) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%6144, %6140, %6135, %6137, %6139) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %6145 = builtin.unrealized_conversion_cast %6118 : !mini.ptr<i32> to !mini.ptr<i32>
      %6146 = "mini.unwrap"(%6145) : (!mini.ptr<i32>) -> i32
      %6147 = "mini.to_fat_ptr"(%6131) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      %6148 = "mini.unwrap"(%6147) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6149 = "mini.unwrap"(%6108) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6150 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %6151 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %6152 = "mini.parameterizations_array"(%6150, %6151) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%6152, %6149, %6146, %6148) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %6153 = builtin.unrealized_conversion_cast %6108 : !mini.fatptr<"OutOfBounds"> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
      %6154 = "mini.unwrap"(%6153) : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %6155 = "mini.coro_yield"(%6154) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %6156 = "mini.wrap"(%6155) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>
    }) : (i1) -> ()
    %6157 = "mini.field_access"(%6019) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %6158 = "mini.field_access"(%6019) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6159 = "mini.unwrap"(%6158) : (!mini.ptr<i32>) -> i32
    %6160 = "mini.unwrap"(%6021) : (!mini.ptr<i32>) -> i32
    %6161 = "mini.arithmetic"(%6159, %6160) {"op" = "ADD"} : (i32, i32) -> i32
    %6162 = "mini.wrap"(%6161) : (i32) -> !mini.ptr<i32>
    %6163 = "mini.buffer_indexation"(%6157, %6162) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    %6164 = builtin.unrealized_conversion_cast %6163 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%6164) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArray__index_xPtri32", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb658(%6165 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6166 : !llvm.ptr, %6167 : i32):
    %6168 = "mini.invariant"(%6166) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6169 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb659] : () -> ()
  ^bb660:
    %6170 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
    "llvm.store"(%6170, %6169) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb661] : () -> ()
  ^bb659:
    %6171 = "llvm.getelementptr"(%6166) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6172 = "llvm.load"(%6171) : (!llvm.ptr) -> !llvm.ptr
    %6173 = "llvm.getelementptr"(%6172) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6174 = "llvm.getelementptr"(%6172) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6175 = "llvm.getelementptr"(%6172) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6176 = "llvm.getelementptr"(%6172) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6177 = "llvm.load"(%6173) : (!llvm.ptr) -> i64
    %6178 = "llvm.load"(%6174) : (!llvm.ptr) -> i64
    %6179 = "llvm.load"(%6175) : (!llvm.ptr) -> !llvm.ptr
    %6180 = "llvm.load"(%6176) : (!llvm.ptr) -> !llvm.ptr
    %6181 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %6182 = "llvm.ptrtoint"(%6181) : (!llvm.ptr) -> i64
    %6183 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %6184 = "mini.subtype"(%6179, %6178, %6177, %6183, %6182, %6180) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6184) [^bb660, ^bb660] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb661:
    %6185 = "llvm.extractvalue"(%6165) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6186 = "llvm.load"(%6169) : (!llvm.ptr) -> i32
    %6187 = "llvm.getelementptr"(%6185, %6186) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6188 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6189 = "llvm.getelementptr"(%6187, %6188) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6189) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B__index_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb662(%6190 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6191 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6192 : !llvm.ptr):
    %6193 = "mini.wrap"(%6190) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %6194 = "mini.to_fat_ptr"(%6193) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6195 = "mini.field_access"(%6194) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6196 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6197 = "mini.unwrap"(%6195) : (!mini.ptr<i32>) -> i32
    %6198 = "mini.unwrap"(%6196) : (!mini.ptr<i32>) -> i32
    %6199 = "mini.comparison"(%6197, %6198) {"op" = "EQ"} : (i32, i32) -> i1
    %6200 = "mini.wrap"(%6199) : (i1) -> !mini.ptr<i32>
    %6201 = "mini.unwrap"(%6200) : (!mini.ptr<i32>) -> i1
    "mini.if"(%6201) ({
      %6202 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %6203 = "mini.unionize"(%6202) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%6203) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %6204 = "mini.field_access"(%6194) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6205 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6206 = "mini.unwrap"(%6204) : (!mini.ptr<i32>) -> i32
    %6207 = "mini.unwrap"(%6205) : (!mini.ptr<i32>) -> i32
    %6208 = "mini.arithmetic"(%6206, %6207) {"op" = "SUB"} : (i32, i32) -> i32
    %6209 = "mini.wrap"(%6208) : (i32) -> !mini.ptr<i32>
    %6210 = "mini.field_access"(%6194) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    "mini.castassign"(%6210, %6209) ({
      %6211 = builtin.unrealized_conversion_cast %6209 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %6212 = "mini.field_access"(%6194) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
    %6213 = "mini.field_access"(%6194) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6214 = "mini.buffer_indexation"(%6212, %6213) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    %6215 = "mini.unionize"(%6214) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%6215) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "IntArray_pop_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb663(%6216 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6217 : !llvm.ptr):
    %6218 = "mini.invariant"(%6217) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6219 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb664] : () -> ()
  ^bb664:
    %6220 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
    "llvm.store"(%6220, %6219) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb665] : () -> ()
  ^bb665:
    %6221 = "llvm.extractvalue"(%6216) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6222 = "llvm.load"(%6219) : (!llvm.ptr) -> i32
    %6223 = "llvm.getelementptr"(%6221, %6222) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6224 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6225 = "llvm.getelementptr"(%6223, %6224) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6225) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_pop_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb666(%6226 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6227 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6228 : !llvm.ptr):
    %6229 = "mini.wrap"(%6226) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %6230 = "mini.to_fat_ptr"(%6229) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6231 = "mini.field_access"(%6230) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6232 = "mini.create_buffer"(%6231) {"typ" = i32} : (!mini.ptr<i32>) -> !llvm.ptr
    %6233 = builtin.unrealized_conversion_cast %6232 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %6234 = "mini.refer"(%6233) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %6235 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %6236 = "mini.field_access"(%6230) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %6237 = "mini.unwrap"(%6235) : (!mini.ptr<i32>) -> i32
      %6238 = "mini.unwrap"(%6236) : (!mini.ptr<i32>) -> i32
      %6239 = "mini.comparison"(%6237, %6238) {"op" = "LT"} : (i32, i32) -> i1
      %6240 = "mini.wrap"(%6239) : (i1) -> !mini.ptr<i32>
      %6241 = "mini.unwrap"(%6240) : (!mini.ptr<i32>) -> i1
    }, {
      %6242 = "mini.field_access"(%6230) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %6243 = "mini.buffer_indexation"(%6242, %6235) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %6244 = "mini.buffer_indexation"(%6234, %6235) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.castassign"(%6244, %6243) ({
        %6245 = builtin.unrealized_conversion_cast %6243 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %6246 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6247 = "mini.unwrap"(%6235) : (!mini.ptr<i32>) -> i32
      %6248 = "mini.unwrap"(%6246) : (!mini.ptr<i32>) -> i32
      %6249 = "mini.arithmetic"(%6247, %6248) {"op" = "ADD"} : (i32, i32) -> i32
      %6250 = "mini.wrap"(%6249) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%6235, %6250) ({
        %6251 = builtin.unrealized_conversion_cast %6250 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %6252 = "mini.field_access"(%6230) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6253 = "mini.field_access"(%6230) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6254 = "mini.unwrap"(%6234) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %6255 = "mini.unwrap"(%6252) : (!mini.ptr<i32>) -> i32
    %6256 = "mini.unwrap"(%6253) : (!mini.ptr<i32>) -> i32
    %6257 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"IntArray">
    %6258 = "mini.field_access"(%6230) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6259 = "mini.field_access"(%6230) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6260 = builtin.unrealized_conversion_cast %6234 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %6261 = "mini.unwrap"(%6260) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %6262 = builtin.unrealized_conversion_cast %6258 : !mini.ptr<i32> to !mini.ptr<i32>
    %6263 = "mini.unwrap"(%6262) : (!mini.ptr<i32>) -> i32
    %6264 = builtin.unrealized_conversion_cast %6259 : !mini.ptr<i32> to !mini.ptr<i32>
    %6265 = "mini.unwrap"(%6264) : (!mini.ptr<i32>) -> i32
    %6266 = "mini.unwrap"(%6257) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6267 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %6268 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %6269 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %6270 = "mini.parameterizations_array"(%6267, %6268, %6269) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6270, %6266, %6261, %6263, %6265) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %6271 = "mini.to_fat_ptr"(%6257) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6272 = "mini.refer"(%6271) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6273 = "mini.to_fat_ptr"(%6272) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    "mini.return"(%6273) : (!mini.fatptr<"IntArray">) -> ()
  }) {"func_name" = "IntArray_copy_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb667(%6274 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6275 : !llvm.ptr):
    %6276 = "mini.invariant"(%6275) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6277 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb668] : () -> ()
  ^bb668:
    %6278 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
    "llvm.store"(%6278, %6277) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb669] : () -> ()
  ^bb669:
    %6279 = "llvm.extractvalue"(%6274) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6280 = "llvm.load"(%6277) : (!llvm.ptr) -> i32
    %6281 = "llvm.getelementptr"(%6279, %6280) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6282 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6283 = "llvm.getelementptr"(%6281, %6282) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6283) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_copy_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb670(%6284 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6285 : !llvm.ptr, %6286 : !llvm.struct<(!llvm.ptr)>):
    %6287 = "mini.invariant"(%6285) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6288 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb671] : () -> ()
  ^bb672:
    %6289 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
    "llvm.store"(%6289, %6288) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb673] : () -> ()
  ^bb671:
    %6290 = "llvm.getelementptr"(%6285) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6291 = "llvm.load"(%6290) : (!llvm.ptr) -> !llvm.ptr
    %6292 = "llvm.getelementptr"(%6291) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6293 = "llvm.getelementptr"(%6291) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6294 = "llvm.getelementptr"(%6291) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6295 = "llvm.getelementptr"(%6291) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6296 = "llvm.load"(%6292) : (!llvm.ptr) -> i64
    %6297 = "llvm.load"(%6293) : (!llvm.ptr) -> i64
    %6298 = "llvm.load"(%6294) : (!llvm.ptr) -> !llvm.ptr
    %6299 = "llvm.load"(%6295) : (!llvm.ptr) -> !llvm.ptr
    %6300 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6301 = "llvm.ptrtoint"(%6300) : (!llvm.ptr) -> i64
    %6302 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6303 = "mini.subtype"(%6298, %6297, %6296, %6302, %6301, %6299) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6303) [^bb672, ^bb672] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb673:
    %6304 = "llvm.extractvalue"(%6284) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6305 = "llvm.load"(%6288) : (!llvm.ptr) -> i32
    %6306 = "llvm.getelementptr"(%6304, %6305) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6307 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6308 = "llvm.getelementptr"(%6306, %6307) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6308) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_each_fFunctionPtri32_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb674(%6309 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6310 : !llvm.ptr, %6311 : i32, %6312 : !llvm.struct<(!llvm.ptr)>):
    %6313 = "mini.invariant"(%6310) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6314 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb675] : () -> ()
  ^bb676:
    %6315 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
    "llvm.store"(%6315, %6314) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb677] : () -> ()
  ^bb678:
    %6316 = "llvm.getelementptr"(%6310) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6317 = "llvm.load"(%6316) : (!llvm.ptr) -> !llvm.ptr
    %6318 = "llvm.getelementptr"(%6317) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6319 = "llvm.getelementptr"(%6317) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6320 = "llvm.getelementptr"(%6317) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6321 = "llvm.getelementptr"(%6317) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6322 = "llvm.load"(%6318) : (!llvm.ptr) -> i64
    %6323 = "llvm.load"(%6319) : (!llvm.ptr) -> i64
    %6324 = "llvm.load"(%6320) : (!llvm.ptr) -> !llvm.ptr
    %6325 = "llvm.load"(%6321) : (!llvm.ptr) -> !llvm.ptr
    %6326 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6327 = "llvm.ptrtoint"(%6326) : (!llvm.ptr) -> i64
    %6328 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6329 = "mini.subtype"(%6324, %6323, %6322, %6328, %6327, %6325) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6329) [^bb676, ^bb676] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb675:
    %6330 = "llvm.getelementptr"(%6310) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6331 = "llvm.load"(%6330) : (!llvm.ptr) -> !llvm.ptr
    %6332 = "llvm.getelementptr"(%6331) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6333 = "llvm.getelementptr"(%6331) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6334 = "llvm.getelementptr"(%6331) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6335 = "llvm.getelementptr"(%6331) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6336 = "llvm.load"(%6332) : (!llvm.ptr) -> i64
    %6337 = "llvm.load"(%6333) : (!llvm.ptr) -> i64
    %6338 = "llvm.load"(%6334) : (!llvm.ptr) -> !llvm.ptr
    %6339 = "llvm.load"(%6335) : (!llvm.ptr) -> !llvm.ptr
    %6340 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %6341 = "llvm.ptrtoint"(%6340) : (!llvm.ptr) -> i64
    %6342 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %6343 = "mini.subtype"(%6338, %6337, %6336, %6342, %6341, %6339) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6343) [^bb678, ^bb678] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb677:
    %6344 = "llvm.extractvalue"(%6309) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6345 = "llvm.load"(%6314) : (!llvm.ptr) -> i32
    %6346 = "llvm.getelementptr"(%6344, %6345) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6347 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6348 = "llvm.getelementptr"(%6346, %6347) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6348) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_reduce_initial_valPtri32_fFunctionPtri32._Ptri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb679(%6349 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6350 : !llvm.ptr, %6351 : !llvm.struct<(!llvm.ptr)>):
    %6352 = "mini.invariant"(%6350) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6353 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb680] : () -> ()
  ^bb681:
    %6354 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
    "llvm.store"(%6354, %6353) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb682] : () -> ()
  ^bb680:
    %6355 = "llvm.getelementptr"(%6350) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6356 = "llvm.load"(%6355) : (!llvm.ptr) -> !llvm.ptr
    %6357 = "llvm.getelementptr"(%6356) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6358 = "llvm.getelementptr"(%6356) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6359 = "llvm.getelementptr"(%6356) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6360 = "llvm.getelementptr"(%6356) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6361 = "llvm.load"(%6357) : (!llvm.ptr) -> i64
    %6362 = "llvm.load"(%6358) : (!llvm.ptr) -> i64
    %6363 = "llvm.load"(%6359) : (!llvm.ptr) -> !llvm.ptr
    %6364 = "llvm.load"(%6360) : (!llvm.ptr) -> !llvm.ptr
    %6365 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6366 = "llvm.ptrtoint"(%6365) : (!llvm.ptr) -> i64
    %6367 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6368 = "mini.subtype"(%6363, %6362, %6361, %6367, %6366, %6364) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6368) [^bb681, ^bb681] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb682:
    %6369 = "llvm.extractvalue"(%6349) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6370 = "llvm.load"(%6353) : (!llvm.ptr) -> i32
    %6371 = "llvm.getelementptr"(%6369, %6370) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6372 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6373 = "llvm.getelementptr"(%6371, %6372) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6373) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_all_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb683(%6374 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6375 : !llvm.ptr, %6376 : !llvm.struct<(!llvm.ptr)>):
    %6377 = "mini.invariant"(%6375) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6378 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb684] : () -> ()
  ^bb685:
    %6379 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
    "llvm.store"(%6379, %6378) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb686] : () -> ()
  ^bb684:
    %6380 = "llvm.getelementptr"(%6375) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6381 = "llvm.load"(%6380) : (!llvm.ptr) -> !llvm.ptr
    %6382 = "llvm.getelementptr"(%6381) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6383 = "llvm.getelementptr"(%6381) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6384 = "llvm.getelementptr"(%6381) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6385 = "llvm.getelementptr"(%6381) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6386 = "llvm.load"(%6382) : (!llvm.ptr) -> i64
    %6387 = "llvm.load"(%6383) : (!llvm.ptr) -> i64
    %6388 = "llvm.load"(%6384) : (!llvm.ptr) -> !llvm.ptr
    %6389 = "llvm.load"(%6385) : (!llvm.ptr) -> !llvm.ptr
    %6390 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6391 = "llvm.ptrtoint"(%6390) : (!llvm.ptr) -> i64
    %6392 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6393 = "mini.subtype"(%6388, %6387, %6386, %6392, %6391, %6389) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6393) [^bb685, ^bb685] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb686:
    %6394 = "llvm.extractvalue"(%6374) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6395 = "llvm.load"(%6378) : (!llvm.ptr) -> i32
    %6396 = "llvm.getelementptr"(%6394, %6395) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6397 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6398 = "llvm.getelementptr"(%6396, %6397) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6398) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_any_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb687(%6399 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6400 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6401 : !llvm.ptr, %6402 : !llvm.struct<(!llvm.ptr)>):
    %6403 = "mini.wrap"(%6399) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %6404 = "mini.to_fat_ptr"(%6403) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6405 = "mini.wrap"(%6402) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %6406 = builtin.unrealized_conversion_cast %6405 : !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>> to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %6407 = "mini.field_access"(%6404) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6408 = "mini.create_buffer"(%6407) {"typ" = i32} : (!mini.ptr<i32>) -> !llvm.ptr
    %6409 = builtin.unrealized_conversion_cast %6408 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %6410 = "mini.refer"(%6409) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %6411 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %6412 = "mini.field_access"(%6404) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
      %6413 = "mini.unwrap"(%6411) : (!mini.ptr<i32>) -> i32
      %6414 = "mini.unwrap"(%6412) : (!mini.ptr<i32>) -> i32
      %6415 = "mini.comparison"(%6413, %6414) {"op" = "LT"} : (i32, i32) -> i1
      %6416 = "mini.wrap"(%6415) : (i1) -> !mini.ptr<i32>
      %6417 = "mini.unwrap"(%6416) : (!mini.ptr<i32>) -> i1
    }, {
      %6418 = "mini.field_access"(%6404) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.buffer<!mini.ptr<i32>>
      %6419 = "mini.buffer_indexation"(%6418, %6411) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %6420 = builtin.unrealized_conversion_cast %6419 : !mini.ptr<i32> to !mini.ptr<i32>
      %6421 = "mini.unwrap"(%6420) : (!mini.ptr<i32>) -> i32
      %6422 = "mini.unwrap"(%6406) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.ptr
      %6423 = "mini.fptr_call"(%6422, %6421) {"ret_type" = i32} : (!llvm.ptr, i32) -> !mini.ptr<i32>
      %6424 = "mini.buffer_indexation"(%6410, %6411) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.castassign"(%6424, %6423) ({
        %6425 = builtin.unrealized_conversion_cast %6423 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %6426 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6427 = "mini.unwrap"(%6411) : (!mini.ptr<i32>) -> i32
      %6428 = "mini.unwrap"(%6426) : (!mini.ptr<i32>) -> i32
      %6429 = "mini.arithmetic"(%6427, %6428) {"op" = "ADD"} : (i32, i32) -> i32
      %6430 = "mini.wrap"(%6429) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%6411, %6430) ({
        %6431 = builtin.unrealized_conversion_cast %6430 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %6432 = "mini.field_access"(%6404) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6433 = "mini.field_access"(%6404) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6434 = "mini.unwrap"(%6410) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %6435 = "mini.unwrap"(%6432) : (!mini.ptr<i32>) -> i32
    %6436 = "mini.unwrap"(%6433) : (!mini.ptr<i32>) -> i32
    %6437 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"IntArray">
    %6438 = "mini.field_access"(%6404) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6439 = "mini.field_access"(%6404) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32} : (!mini.fatptr<"IntArray">) -> !mini.ptr<i32>
    %6440 = builtin.unrealized_conversion_cast %6410 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %6441 = "mini.unwrap"(%6440) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %6442 = builtin.unrealized_conversion_cast %6438 : !mini.ptr<i32> to !mini.ptr<i32>
    %6443 = "mini.unwrap"(%6442) : (!mini.ptr<i32>) -> i32
    %6444 = builtin.unrealized_conversion_cast %6439 : !mini.ptr<i32> to !mini.ptr<i32>
    %6445 = "mini.unwrap"(%6444) : (!mini.ptr<i32>) -> i32
    %6446 = "mini.unwrap"(%6437) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6447 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %6448 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %6449 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %6450 = "mini.parameterizations_array"(%6447, %6448, %6449) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6450, %6446, %6441, %6443, %6445) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %6451 = "mini.to_fat_ptr"(%6437) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6452 = "mini.refer"(%6451) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6453 = "mini.to_fat_ptr"(%6452) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntIterable">
    "mini.return"(%6453) : (!mini.fatptr<"IntIterable">) -> ()
  }) {"func_name" = "IntArray_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb688(%6454 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6455 : !llvm.ptr, %6456 : !llvm.struct<(!llvm.ptr)>):
    %6457 = "mini.invariant"(%6455) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6458 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb689] : () -> ()
  ^bb690:
    %6459 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
    "llvm.store"(%6459, %6458) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb691] : () -> ()
  ^bb689:
    %6460 = "llvm.getelementptr"(%6455) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6461 = "llvm.load"(%6460) : (!llvm.ptr) -> !llvm.ptr
    %6462 = "llvm.getelementptr"(%6461) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6463 = "llvm.getelementptr"(%6461) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6464 = "llvm.getelementptr"(%6461) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6465 = "llvm.getelementptr"(%6461) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6466 = "llvm.load"(%6462) : (!llvm.ptr) -> i64
    %6467 = "llvm.load"(%6463) : (!llvm.ptr) -> i64
    %6468 = "llvm.load"(%6464) : (!llvm.ptr) -> !llvm.ptr
    %6469 = "llvm.load"(%6465) : (!llvm.ptr) -> !llvm.ptr
    %6470 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6471 = "llvm.ptrtoint"(%6470) : (!llvm.ptr) -> i64
    %6472 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6473 = "mini.subtype"(%6468, %6467, %6466, %6472, %6471, %6469) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6473) [^bb690, ^bb690] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb691:
    %6474 = "llvm.extractvalue"(%6454) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6475 = "llvm.load"(%6458) : (!llvm.ptr) -> i32
    %6476 = "llvm.getelementptr"(%6474, %6475) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6477 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6478 = "llvm.getelementptr"(%6476, %6477) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6478) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_map_fFunctionPtri32_to_Ptri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb692(%6479 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6480 : !llvm.ptr, %6481 : !llvm.struct<(!llvm.ptr)>):
    %6482 = "mini.invariant"(%6480) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6483 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb693] : () -> ()
  ^bb694:
    %6484 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
    "llvm.store"(%6484, %6483) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb695] : () -> ()
  ^bb693:
    %6485 = "llvm.getelementptr"(%6480) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6486 = "llvm.load"(%6485) : (!llvm.ptr) -> !llvm.ptr
    %6487 = "llvm.getelementptr"(%6486) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6488 = "llvm.getelementptr"(%6486) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6489 = "llvm.getelementptr"(%6486) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6490 = "llvm.getelementptr"(%6486) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6491 = "llvm.load"(%6487) : (!llvm.ptr) -> i64
    %6492 = "llvm.load"(%6488) : (!llvm.ptr) -> i64
    %6493 = "llvm.load"(%6489) : (!llvm.ptr) -> !llvm.ptr
    %6494 = "llvm.load"(%6490) : (!llvm.ptr) -> !llvm.ptr
    %6495 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6496 = "llvm.ptrtoint"(%6495) : (!llvm.ptr) -> i64
    %6497 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6498 = "mini.subtype"(%6493, %6492, %6491, %6497, %6496, %6494) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6498) [^bb694, ^bb694] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb695:
    %6499 = "llvm.extractvalue"(%6479) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6500 = "llvm.load"(%6483) : (!llvm.ptr) -> i32
    %6501 = "llvm.getelementptr"(%6499, %6500) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6502 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6503 = "llvm.getelementptr"(%6501, %6502) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6503) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_filter_fFunctionPtri32_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb696(%6504 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6505 : !llvm.ptr, %6506 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6507 = "mini.invariant"(%6505) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6508 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb697] : () -> ()
  ^bb698:
    %6509 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
    "llvm.store"(%6509, %6508) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb699] : () -> ()
  ^bb697:
    %6510 = "llvm.getelementptr"(%6505) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6511 = "llvm.load"(%6510) : (!llvm.ptr) -> !llvm.ptr
    %6512 = "llvm.getelementptr"(%6511) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6513 = "llvm.getelementptr"(%6511) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6514 = "llvm.getelementptr"(%6511) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6515 = "llvm.getelementptr"(%6511) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6516 = "llvm.load"(%6512) : (!llvm.ptr) -> i64
    %6517 = "llvm.load"(%6513) : (!llvm.ptr) -> i64
    %6518 = "llvm.load"(%6514) : (!llvm.ptr) -> !llvm.ptr
    %6519 = "llvm.load"(%6515) : (!llvm.ptr) -> !llvm.ptr
    %6520 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %6521 = "llvm.ptrtoint"(%6520) : (!llvm.ptr) -> i64
    %6522 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %6523 = "mini.subtype"(%6518, %6517, %6516, %6522, %6521, %6519) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6523) [^bb698, ^bb698] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb699:
    %6524 = "llvm.extractvalue"(%6504) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6525 = "llvm.load"(%6508) : (!llvm.ptr) -> i32
    %6526 = "llvm.getelementptr"(%6524, %6525) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6527 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6528 = "llvm.getelementptr"(%6526, %6527) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6528) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_chain_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb700(%6529 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6530 : !llvm.ptr, %6531 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6532 = "mini.invariant"(%6530) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6533 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb701] : () -> ()
  ^bb702:
    %6534 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
    "llvm.store"(%6534, %6533) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb703] : () -> ()
  ^bb701:
    %6535 = "llvm.getelementptr"(%6530) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6536 = "llvm.load"(%6535) : (!llvm.ptr) -> !llvm.ptr
    %6537 = "llvm.getelementptr"(%6536) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6538 = "llvm.getelementptr"(%6536) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6539 = "llvm.getelementptr"(%6536) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6540 = "llvm.getelementptr"(%6536) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6541 = "llvm.load"(%6537) : (!llvm.ptr) -> i64
    %6542 = "llvm.load"(%6538) : (!llvm.ptr) -> i64
    %6543 = "llvm.load"(%6539) : (!llvm.ptr) -> !llvm.ptr
    %6544 = "llvm.load"(%6540) : (!llvm.ptr) -> !llvm.ptr
    %6545 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %6546 = "llvm.ptrtoint"(%6545) : (!llvm.ptr) -> i64
    %6547 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %6548 = "mini.subtype"(%6543, %6542, %6541, %6547, %6546, %6544) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6548) [^bb702, ^bb702] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb703:
    %6549 = "llvm.extractvalue"(%6529) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6550 = "llvm.load"(%6533) : (!llvm.ptr) -> i32
    %6551 = "llvm.getelementptr"(%6549, %6550) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6552 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6553 = "llvm.getelementptr"(%6551, %6552) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6553) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_interleave_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb704(%6554 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6555 : !llvm.ptr, %6556 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6557 = "mini.invariant"(%6555) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6558 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb705] : () -> ()
  ^bb706:
    %6559 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
    "llvm.store"(%6559, %6558) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb707] : () -> ()
  ^bb705:
    %6560 = "llvm.getelementptr"(%6555) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6561 = "llvm.load"(%6560) : (!llvm.ptr) -> !llvm.ptr
    %6562 = "llvm.getelementptr"(%6561) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6563 = "llvm.getelementptr"(%6561) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6564 = "llvm.getelementptr"(%6561) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6565 = "llvm.getelementptr"(%6561) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6566 = "llvm.load"(%6562) : (!llvm.ptr) -> i64
    %6567 = "llvm.load"(%6563) : (!llvm.ptr) -> i64
    %6568 = "llvm.load"(%6564) : (!llvm.ptr) -> !llvm.ptr
    %6569 = "llvm.load"(%6565) : (!llvm.ptr) -> !llvm.ptr
    %6570 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %6571 = "llvm.ptrtoint"(%6570) : (!llvm.ptr) -> i64
    %6572 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %6573 = "mini.subtype"(%6568, %6567, %6566, %6572, %6571, %6569) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6573) [^bb706, ^bb706] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb707:
    %6574 = "llvm.extractvalue"(%6554) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6575 = "llvm.load"(%6558) : (!llvm.ptr) -> i32
    %6576 = "llvm.getelementptr"(%6574, %6575) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6577 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6578 = "llvm.getelementptr"(%6576, %6577) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6578) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_zip_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb708(%6579 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6580 : !llvm.ptr, %6581 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6582 = "mini.invariant"(%6580) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6583 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb709] : () -> ()
  ^bb710:
    %6584 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
    "llvm.store"(%6584, %6583) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb711] : () -> ()
  ^bb709:
    %6585 = "llvm.getelementptr"(%6580) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6586 = "llvm.load"(%6585) : (!llvm.ptr) -> !llvm.ptr
    %6587 = "llvm.getelementptr"(%6586) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6588 = "llvm.getelementptr"(%6586) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6589 = "llvm.getelementptr"(%6586) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6590 = "llvm.getelementptr"(%6586) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6591 = "llvm.load"(%6587) : (!llvm.ptr) -> i64
    %6592 = "llvm.load"(%6588) : (!llvm.ptr) -> i64
    %6593 = "llvm.load"(%6589) : (!llvm.ptr) -> !llvm.ptr
    %6594 = "llvm.load"(%6590) : (!llvm.ptr) -> !llvm.ptr
    %6595 = "mini.addr_of"() {"global_name" = @IntIterable} : () -> !llvm.ptr
    %6596 = "llvm.ptrtoint"(%6595) : (!llvm.ptr) -> i64
    %6597 = "llvm.mlir.constant"() <{"value" = 10461781953294393041 : i64}> : () -> i64
    %6598 = "mini.subtype"(%6593, %6592, %6591, %6597, %6596, %6594) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6598) [^bb710, ^bb710] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb711:
    %6599 = "llvm.extractvalue"(%6579) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6600 = "llvm.load"(%6583) : (!llvm.ptr) -> i32
    %6601 = "llvm.getelementptr"(%6599, %6600) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6602 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6603 = "llvm.getelementptr"(%6601, %6602) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6603) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_product_otherIntIterable", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb712(%6604 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6605 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6606 : !llvm.ptr):
    %6607 = "mini.wrap"(%6604) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %6608 = "mini.to_fat_ptr"(%6607) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6609 = "mini.unwrap"(%6608) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6610 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "IntArrayIterator", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"IntArrayIterator">
    %6611 = "mini.to_fat_ptr"(%6608) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6612 = "mini.unwrap"(%6611) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6613 = "mini.unwrap"(%6610) : (!mini.fatptr<"IntArrayIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6614 = "mini.parameterization"() {"id_hierarchy" = ["IntArray"], "name_hierarchy" = ["IntArray"]} : () -> !llvm.ptr
    %6615 = "mini.parameterizations_array"(%6614) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6615, %6613, %6612) {"offset" = 2 : i32, "vptrs" = [#none], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %6616 = "mini.to_fat_ptr"(%6610) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArrayIterator", "to_typ_name" = "Iterator", "invariant"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"Iterator">
    "mini.return"(%6616) : (!mini.fatptr<"Iterator">) -> ()
  }) {"func_name" = "IntArray_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb713(%6617 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6618 : !llvm.ptr):
    %6619 = "mini.invariant"(%6618) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6620 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb714] : () -> ()
  ^bb714:
    %6621 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
    "llvm.store"(%6621, %6620) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb715] : () -> ()
  ^bb715:
    %6622 = "llvm.extractvalue"(%6617) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6623 = "llvm.load"(%6620) : (!llvm.ptr) -> i32
    %6624 = "llvm.getelementptr"(%6622, %6623) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6625 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6626 = "llvm.getelementptr"(%6624, %6625) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6626) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb716(%6627 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6628 : !llvm.ptr):
    %6629 = "mini.invariant"(%6628) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6630 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb717] : () -> ()
  ^bb717:
    %6631 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
    "llvm.store"(%6631, %6630) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb718] : () -> ()
  ^bb718:
    %6632 = "llvm.extractvalue"(%6627) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6633 = "llvm.load"(%6630) : (!llvm.ptr) -> i32
    %6634 = "llvm.getelementptr"(%6632, %6633) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6635 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6636 = "llvm.getelementptr"(%6634, %6635) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6636) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArray_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "offset" = 0 : i32, "meth_name" = "IntArrayIterator_field_array"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "offset" = 1 : i32, "meth_name" = "IntArrayIterator_field_index"} : () -> ()
  "mini.func"() ({
  ^bb719(%6637 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6638 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6639 : !llvm.ptr, %6640 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6641 = "mini.wrap"(%6637) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArrayIterator">
    %6642 = "mini.to_fat_ptr"(%6641) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArrayIterator", "to_typ_name" = "IntArrayIterator", "invariant"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArrayIterator">
    %6643 = "mini.wrap"(%6640) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %6644 = "mini.to_fat_ptr"(%6643) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %6645 = "mini.field_access"(%6642) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArray">
    "mini.castassign"(%6645, %6644) ({
      %6646 = "mini.to_fat_ptr"(%6644) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "should_offset"} : (!mini.fatptr<"IntArray">, !mini.fatptr<"IntArray">) -> ()
    %6647 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6648 = "mini.field_access"(%6642) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"IntArrayIterator">) -> !mini.ptr<i32>
    "mini.castassign"(%6648, %6647) ({
      %6649 = builtin.unrealized_conversion_cast %6647 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "IntArrayIterator_init_arrayIntArray", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb720(%6650 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6651 : !llvm.ptr, %6652 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6653 = "mini.invariant"(%6651) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6654 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb721] : () -> ()
  ^bb722:
    %6655 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%6655, %6654) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb723] : () -> ()
  ^bb721:
    %6656 = "llvm.getelementptr"(%6651) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6657 = "llvm.load"(%6656) : (!llvm.ptr) -> !llvm.ptr
    %6658 = "llvm.getelementptr"(%6657) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6659 = "llvm.getelementptr"(%6657) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6660 = "llvm.getelementptr"(%6657) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6661 = "llvm.getelementptr"(%6657) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6662 = "llvm.load"(%6658) : (!llvm.ptr) -> i64
    %6663 = "llvm.load"(%6659) : (!llvm.ptr) -> i64
    %6664 = "llvm.load"(%6660) : (!llvm.ptr) -> !llvm.ptr
    %6665 = "llvm.load"(%6661) : (!llvm.ptr) -> !llvm.ptr
    %6666 = "mini.addr_of"() {"global_name" = @IntArray} : () -> !llvm.ptr
    %6667 = "llvm.ptrtoint"(%6666) : (!llvm.ptr) -> i64
    %6668 = "llvm.mlir.constant"() <{"value" = 7629948565578263212 : i64}> : () -> i64
    %6669 = "mini.subtype"(%6664, %6663, %6662, %6668, %6667, %6665) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6669) [^bb722, ^bb722] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb723:
    %6670 = "llvm.extractvalue"(%6650) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6671 = "llvm.load"(%6654) : (!llvm.ptr) -> i32
    %6672 = "llvm.getelementptr"(%6670, %6671) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6673 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6674 = "llvm.getelementptr"(%6672, %6673) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6674) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArrayIterator_B_init_arrayIntArray", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb724(%6675 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6676 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6677 : !llvm.ptr):
    %6678 = "mini.wrap"(%6675) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArrayIterator">
    %6679 = "mini.to_fat_ptr"(%6678) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArrayIterator", "to_typ_name" = "IntArrayIterator", "invariant"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArrayIterator">
    %6680 = "mini.field_access"(%6679) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"IntArrayIterator">) -> !mini.ptr<i32>
    %6681 = "mini.field_access"(%6679) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArray">
    %6682 = "mini.unwrap"(%6681) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6683 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6684 = "mini.method_call"(%6683, %6682) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %6685 = builtin.unrealized_conversion_cast %6684 : !mini.ptr<i32> to !mini.ptr<i32>
    %6686 = "mini.unwrap"(%6680) : (!mini.ptr<i32>) -> i32
    %6687 = "mini.unwrap"(%6685) : (!mini.ptr<i32>) -> i32
    %6688 = "mini.comparison"(%6686, %6687) {"op" = "LT"} : (i32, i32) -> i1
    %6689 = "mini.wrap"(%6688) : (i1) -> !mini.ptr<i32>
    %6690 = "mini.unwrap"(%6689) : (!mini.ptr<i32>) -> i1
    "mini.if"(%6690) ({
      %6691 = "mini.field_access"(%6679) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"IntArrayIterator">) -> !mini.ptr<i32>
      %6692 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6693 = "mini.unwrap"(%6691) : (!mini.ptr<i32>) -> i32
      %6694 = "mini.unwrap"(%6692) : (!mini.ptr<i32>) -> i32
      %6695 = "mini.arithmetic"(%6693, %6694) {"op" = "ADD"} : (i32, i32) -> i32
      %6696 = "mini.wrap"(%6695) : (i32) -> !mini.ptr<i32>
      %6697 = "mini.field_access"(%6679) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"IntArrayIterator">) -> !mini.ptr<i32>
      "mini.castassign"(%6697, %6696) ({
        %6698 = builtin.unrealized_conversion_cast %6696 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %6699 = "mini.field_access"(%6679) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArray">
      %6700 = "mini.unwrap"(%6699) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6701 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %6702 = "mini.method_call"(%6701, %6700) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i32>>
      %6703 = builtin.unrealized_conversion_cast %6702 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
      %6704 = "mini.field_access"(%6679) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"IntArrayIterator">) -> !mini.ptr<i32>
      %6705 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6706 = "mini.unwrap"(%6704) : (!mini.ptr<i32>) -> i32
      %6707 = "mini.unwrap"(%6705) : (!mini.ptr<i32>) -> i32
      %6708 = "mini.arithmetic"(%6706, %6707) {"op" = "SUB"} : (i32, i32) -> i32
      %6709 = "mini.wrap"(%6708) : (i32) -> !mini.ptr<i32>
      %6710 = "mini.buffer_indexation"(%6703, %6709) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
      %6711 = "mini.unionize"(%6710) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.return"(%6711) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %6712 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %6713 = "mini.unionize"(%6712) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    "mini.return"(%6713) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> ()
  }) {"func_name" = "IntArrayIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb725(%6714 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6715 : !llvm.ptr):
    %6716 = "mini.invariant"(%6715) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6717 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb726] : () -> ()
  ^bb726:
    %6718 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%6718, %6717) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb727] : () -> ()
  ^bb727:
    %6719 = "llvm.extractvalue"(%6714) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6720 = "llvm.load"(%6717) : (!llvm.ptr) -> i32
    %6721 = "llvm.getelementptr"(%6719, %6720) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6722 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6723 = "llvm.getelementptr"(%6721, %6722) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6723) : (!llvm.ptr) -> ()
  }) {"func_name" = "IntArrayIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "Pair_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "Pair_field_second"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "Pair_field_Pair_0"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr)>, "offset" = 3 : i32, "meth_name" = "Pair_field_Pair_1"} : () -> ()
  "mini.func"() ({
  ^bb728(%6724 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6725 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6726 : !llvm.ptr, %6727 : !llvm.struct<(!llvm.ptr, i160)>, %6728 : !llvm.struct<(!llvm.ptr, i160)>):
    %6729 = "mini.wrap"(%6724) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">]>
    %6730 = "mini.to_fat_ptr"(%6729) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Pair", "to_typ_name" = "Pair", "invariant"} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">]>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">]>
    %6731 = "mini.wrap"(%6727) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Pair">
    %6732 = "mini.to_fat_ptr"(%6731) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Pair">
    %6733 = "mini.field_access"(%6730) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">]>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Pair">
    "mini.castassign"(%6733, %6732) ({
      %6734 = "mini.to_fat_ptr"(%6732) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Pair">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"T", !mini.fatptr<"Object">, "Pair">) -> ()
    %6735 = "mini.wrap"(%6728) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">
    %6736 = "mini.to_fat_ptr"(%6735) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"U", !mini.fatptr<"Object">, "Pair">) -> !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">
    %6737 = "mini.field_access"(%6730) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">]>) -> !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">
    "mini.castassign"(%6737, %6736) ({
      %6738 = "mini.to_fat_ptr"(%6736) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"U", !mini.fatptr<"Object">, "Pair">) -> !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"U", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">) -> ()
  }) {"func_name" = "Pair_init_firstT_secondU", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb729(%6739 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6740 : !llvm.ptr, %6741 : !llvm.struct<(!llvm.ptr, i160)>, %6742 : !llvm.struct<(!llvm.ptr, i160)>):
    %6743 = "mini.invariant"(%6740) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6744 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb730] : () -> ()
  ^bb731:
    %6745 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%6745, %6744) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb732] : () -> ()
  ^bb733:
    %6746 = "llvm.getelementptr"(%6740) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6747 = "llvm.load"(%6746) : (!llvm.ptr) -> !llvm.ptr
    %6748 = "llvm.getelementptr"(%6747) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6749 = "llvm.getelementptr"(%6747) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6750 = "llvm.getelementptr"(%6747) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6751 = "llvm.getelementptr"(%6747) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6752 = "llvm.load"(%6748) : (!llvm.ptr) -> i64
    %6753 = "llvm.load"(%6749) : (!llvm.ptr) -> i64
    %6754 = "llvm.load"(%6750) : (!llvm.ptr) -> !llvm.ptr
    %6755 = "llvm.load"(%6751) : (!llvm.ptr) -> !llvm.ptr
    %6756 = "mini.addr_of"() {"global_name" = @Object} : () -> !llvm.ptr
    %6757 = "llvm.ptrtoint"(%6756) : (!llvm.ptr) -> i64
    %6758 = "llvm.mlir.constant"() <{"value" = 3282773614056351330 : i64}> : () -> i64
    %6759 = "mini.subtype"(%6754, %6753, %6752, %6758, %6757, %6755) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6759) [^bb731, ^bb731] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb730:
    %6760 = "llvm.getelementptr"(%6740) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6761 = "llvm.load"(%6760) : (!llvm.ptr) -> !llvm.ptr
    %6762 = "llvm.getelementptr"(%6761) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6763 = "llvm.getelementptr"(%6761) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6764 = "llvm.getelementptr"(%6761) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6765 = "llvm.getelementptr"(%6761) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6766 = "llvm.load"(%6762) : (!llvm.ptr) -> i64
    %6767 = "llvm.load"(%6763) : (!llvm.ptr) -> i64
    %6768 = "llvm.load"(%6764) : (!llvm.ptr) -> !llvm.ptr
    %6769 = "llvm.load"(%6765) : (!llvm.ptr) -> !llvm.ptr
    %6770 = "mini.addr_of"() {"global_name" = @Object} : () -> !llvm.ptr
    %6771 = "llvm.ptrtoint"(%6770) : (!llvm.ptr) -> i64
    %6772 = "llvm.mlir.constant"() <{"value" = 3282773614056351330 : i64}> : () -> i64
    %6773 = "mini.subtype"(%6768, %6767, %6766, %6772, %6771, %6769) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6773) [^bb733, ^bb733] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb732:
    %6774 = "llvm.extractvalue"(%6739) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6775 = "llvm.load"(%6744) : (!llvm.ptr) -> i32
    %6776 = "llvm.getelementptr"(%6774, %6775) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6777 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6778 = "llvm.getelementptr"(%6776, %6777) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6778) : (!llvm.ptr) -> ()
  }) {"func_name" = "Pair_B_init_firstT_secondU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb734(%6779 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6780 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6781 : !llvm.ptr):
    %6782 = "mini.wrap"(%6779) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">]>
    %6783 = "mini.to_fat_ptr"(%6782) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Pair", "to_typ_name" = "Pair", "invariant"} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">]>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">]>
    %6784 = "mini.field_access"(%6783) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">]>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Pair">
    %6785 = "mini.to_fat_ptr"(%6784) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Pair">
    "mini.return"(%6785) : (!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">) -> ()
  }) {"func_name" = "Pair_first_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb735(%6786 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6787 : !llvm.ptr):
    %6788 = "mini.invariant"(%6787) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6789 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb736] : () -> ()
  ^bb736:
    %6790 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%6790, %6789) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb737] : () -> ()
  ^bb737:
    %6791 = "llvm.extractvalue"(%6786) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6792 = "llvm.load"(%6789) : (!llvm.ptr) -> i32
    %6793 = "llvm.getelementptr"(%6791, %6792) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6794 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6795 = "llvm.getelementptr"(%6793, %6794) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6795) : (!llvm.ptr) -> ()
  }) {"func_name" = "Pair_B_first_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb738(%6796 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6797 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6798 : !llvm.ptr):
    %6799 = "mini.wrap"(%6796) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">]>
    %6800 = "mini.to_fat_ptr"(%6799) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Pair", "to_typ_name" = "Pair", "invariant"} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">]>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">]>
    %6801 = "mini.field_access"(%6800) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">, !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">]>) -> !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">
    %6802 = "mini.to_fat_ptr"(%6801) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"U", !mini.fatptr<"Object">, "Pair">) -> !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">
    "mini.return"(%6802) : (!mini.type_param<"U", !mini.fatptr<"Object">, "Pair">) -> ()
  }) {"func_name" = "Pair_second_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb739(%6803 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6804 : !llvm.ptr):
    %6805 = "mini.invariant"(%6804) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6806 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb740] : () -> ()
  ^bb740:
    %6807 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%6807, %6806) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb741] : () -> ()
  ^bb741:
    %6808 = "llvm.extractvalue"(%6803) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6809 = "llvm.load"(%6806) : (!llvm.ptr) -> i32
    %6810 = "llvm.getelementptr"(%6808, %6809) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6811 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6812 = "llvm.getelementptr"(%6810, %6811) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6812) : (!llvm.ptr) -> ()
  }) {"func_name" = "Pair_B_second_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "Iterator2_field_Iterator2_0"} : () -> ()
  "mini.func"() ({
  ^bb742(%6813 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6814 : !llvm.ptr):
    %6815 = "mini.invariant"(%6814) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6816 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb743] : () -> ()
  ^bb743:
    %6817 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%6817, %6816) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb744] : () -> ()
  ^bb744:
    %6818 = "llvm.extractvalue"(%6813) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6819 = "llvm.load"(%6816) : (!llvm.ptr) -> i32
    %6820 = "llvm.getelementptr"(%6818, %6819) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6821 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6822 = "llvm.getelementptr"(%6820, %6821) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6822) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "Iterable2_field_Iterable2_0"} : () -> ()
  "mini.func"() ({
  ^bb745(%6823 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6824 : !llvm.ptr):
    %6825 = "mini.invariant"(%6824) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6826 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb746] : () -> ()
  ^bb746:
    %6827 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%6827, %6826) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb747] : () -> ()
  ^bb747:
    %6828 = "llvm.extractvalue"(%6823) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6829 = "llvm.load"(%6826) : (!llvm.ptr) -> i32
    %6830 = "llvm.getelementptr"(%6828, %6829) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6831 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6832 = "llvm.getelementptr"(%6830, %6831) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6832) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb748(%6833 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6834 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6835 : !llvm.ptr, %6836 : !llvm.struct<(!llvm.ptr)>):
    %6837 = "mini.wrap"(%6833) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6838 = "mini.to_fat_ptr"(%6837) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6839 = "mini.wrap"(%6836) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.nothing>
    %6840 = builtin.unrealized_conversion_cast %6839 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.nothing> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.nothing>
    %6841 = "mini.unwrap"(%6838) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6842 = "mini.field_access"(%6838) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %6843 = "llvm.load"(%6842) : (!mini.reified_type) -> !llvm.ptr
    %6844 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6845 = "mini.method_call"(%6844, %6841) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6846 = "mini.to_fat_ptr"(%6845) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6847 = "mini.to_fat_ptr"(%6846) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6848 = "mini.refer"(%6847) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.while"() ({
      %6849 = "mini.unwrap"(%6848) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6850 = "mini.field_access"(%6838) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
      %6851 = "llvm.load"(%6850) : (!mini.reified_type) -> !llvm.ptr
      %6852 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %6853 = "mini.method_call"(%6852, %6849) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
      %6854 = builtin.unrealized_conversion_cast %6853 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>
      %6855 = "mini.checkflag"(%6854) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>) -> i1
      %6856 = "mini.unwrap"(%6855) : (i1) -> i1
    }, {
      %6857 = "mini.to_fat_ptr"(%6854) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "Object"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      %6858 = "mini.to_fat_ptr"(%6857) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      %6859 = "mini.unwrap"(%6858) : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %6860 = "mini.unwrap"(%6840) : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.nothing>) -> !llvm.ptr
      "mini.fptr_call"(%6860, %6859) {"ret_type" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%6854, %6857) ({
        %6861 = "mini.to_fat_ptr"(%6857) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>, !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> ()
    }) : () -> ()
  }) {"func_name" = "Iterable2_each_fFunctionT_to_Nothing", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb749(%6862 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6863 : !llvm.ptr, %6864 : !llvm.struct<(!llvm.ptr)>):
    %6865 = "mini.invariant"(%6863) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6866 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb750] : () -> ()
  ^bb751:
    %6867 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%6867, %6866) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb752] : () -> ()
  ^bb750:
    %6868 = "llvm.getelementptr"(%6863) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6869 = "llvm.load"(%6868) : (!llvm.ptr) -> !llvm.ptr
    %6870 = "llvm.getelementptr"(%6869) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6871 = "llvm.getelementptr"(%6869) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6872 = "llvm.getelementptr"(%6869) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6873 = "llvm.getelementptr"(%6869) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6874 = "llvm.load"(%6870) : (!llvm.ptr) -> i64
    %6875 = "llvm.load"(%6871) : (!llvm.ptr) -> i64
    %6876 = "llvm.load"(%6872) : (!llvm.ptr) -> !llvm.ptr
    %6877 = "llvm.load"(%6873) : (!llvm.ptr) -> !llvm.ptr
    %6878 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6879 = "llvm.ptrtoint"(%6878) : (!llvm.ptr) -> i64
    %6880 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6881 = "mini.subtype"(%6876, %6875, %6874, %6880, %6879, %6877) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6881) [^bb751, ^bb751] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb752:
    %6882 = "llvm.extractvalue"(%6862) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6883 = "llvm.load"(%6866) : (!llvm.ptr) -> i32
    %6884 = "llvm.getelementptr"(%6882, %6883) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6885 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6886 = "llvm.getelementptr"(%6884, %6885) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6886) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb753(%6887 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6888 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6889 : !llvm.ptr, %6890 : !llvm.struct<(!llvm.ptr, i160)>, %6891 : !llvm.struct<(!llvm.ptr)>):
    %6892 = "mini.wrap"(%6887) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6893 = "mini.to_fat_ptr"(%6892) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6894 = "mini.wrap"(%6890) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
    %6895 = "mini.to_fat_ptr"(%6894) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
    %6896 = "mini.wrap"(%6891) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">>
    %6897 = builtin.unrealized_conversion_cast %6896 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">>
    %6898 = "mini.unwrap"(%6893) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6899 = "mini.field_access"(%6893) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %6900 = "llvm.load"(%6899) : (!mini.reified_type) -> !llvm.ptr
    %6901 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6902 = "mini.method_call"(%6901, %6898) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6903 = "mini.to_fat_ptr"(%6902) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6904 = "mini.to_fat_ptr"(%6903) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6905 = "mini.refer"(%6904) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.while"() ({
      %6906 = "mini.unwrap"(%6905) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6907 = "mini.field_access"(%6893) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
      %6908 = "llvm.load"(%6907) : (!mini.reified_type) -> !llvm.ptr
      %6909 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %6910 = "mini.method_call"(%6909, %6906) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
      %6911 = builtin.unrealized_conversion_cast %6910 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>
      %6912 = "mini.checkflag"(%6911) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>) -> i1
      %6913 = "mini.unwrap"(%6912) : (i1) -> i1
    }, {
      %6914 = "mini.to_fat_ptr"(%6911) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "Object"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      %6915 = "mini.to_fat_ptr"(%6895) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      %6916 = "mini.unwrap"(%6915) : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %6917 = "mini.to_fat_ptr"(%6914) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      %6918 = "mini.unwrap"(%6917) : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %6919 = "mini.unwrap"(%6897) : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">>) -> !llvm.ptr
      %6920 = "mini.fptr_call"(%6919, %6916, %6918) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      "mini.castassign"(%6895, %6920) ({
        %6921 = "mini.to_fat_ptr"(%6920) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> ()
      "mini.castassign"(%6911, %6914) ({
        %6922 = "mini.to_fat_ptr"(%6914) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>, !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> ()
    }) : () -> ()
    %6923 = "mini.to_fat_ptr"(%6895) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
    "mini.return"(%6923) : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> ()
  }) {"func_name" = "Iterable2_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb754(%6924 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6925 : !llvm.ptr, %6926 : !llvm.struct<(!llvm.ptr, i160)>, %6927 : !llvm.struct<(!llvm.ptr)>):
    %6928 = "mini.invariant"(%6925) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6929 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb755] : () -> ()
  ^bb756:
    %6930 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%6930, %6929) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb757] : () -> ()
  ^bb758:
    %6931 = "llvm.getelementptr"(%6925) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6932 = "llvm.load"(%6931) : (!llvm.ptr) -> !llvm.ptr
    %6933 = "llvm.getelementptr"(%6932) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6934 = "llvm.getelementptr"(%6932) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6935 = "llvm.getelementptr"(%6932) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6936 = "llvm.getelementptr"(%6932) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6937 = "llvm.load"(%6933) : (!llvm.ptr) -> i64
    %6938 = "llvm.load"(%6934) : (!llvm.ptr) -> i64
    %6939 = "llvm.load"(%6935) : (!llvm.ptr) -> !llvm.ptr
    %6940 = "llvm.load"(%6936) : (!llvm.ptr) -> !llvm.ptr
    %6941 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %6942 = "llvm.ptrtoint"(%6941) : (!llvm.ptr) -> i64
    %6943 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %6944 = "mini.subtype"(%6939, %6938, %6937, %6943, %6942, %6940) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6944) [^bb756, ^bb756] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb755:
    %6945 = "llvm.getelementptr"(%6925) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %6946 = "llvm.load"(%6945) : (!llvm.ptr) -> !llvm.ptr
    %6947 = "llvm.getelementptr"(%6946) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6948 = "llvm.getelementptr"(%6946) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6949 = "llvm.getelementptr"(%6946) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6950 = "llvm.getelementptr"(%6946) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6951 = "llvm.load"(%6947) : (!llvm.ptr) -> i64
    %6952 = "llvm.load"(%6948) : (!llvm.ptr) -> i64
    %6953 = "llvm.load"(%6949) : (!llvm.ptr) -> !llvm.ptr
    %6954 = "llvm.load"(%6950) : (!llvm.ptr) -> !llvm.ptr
    %6955 = "mini.addr_of"() {"global_name" = @Object} : () -> !llvm.ptr
    %6956 = "llvm.ptrtoint"(%6955) : (!llvm.ptr) -> i64
    %6957 = "llvm.mlir.constant"() <{"value" = 3282773614056351330 : i64}> : () -> i64
    %6958 = "mini.subtype"(%6953, %6952, %6951, %6957, %6956, %6954) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%6958) [^bb758, ^bb758] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb757:
    %6959 = "llvm.extractvalue"(%6924) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6960 = "llvm.load"(%6929) : (!llvm.ptr) -> i32
    %6961 = "llvm.getelementptr"(%6959, %6960) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6962 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %6963 = "llvm.getelementptr"(%6961, %6962) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6963) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb759(%6964 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6965 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6966 : !llvm.ptr, %6967 : !llvm.struct<(!llvm.ptr)>):
    %6968 = "mini.wrap"(%6964) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6969 = "mini.to_fat_ptr"(%6968) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6970 = "mini.wrap"(%6967) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %6971 = builtin.unrealized_conversion_cast %6970 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %6972 = "mini.unwrap"(%6969) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6973 = "mini.field_access"(%6969) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %6974 = "llvm.load"(%6973) : (!mini.reified_type) -> !llvm.ptr
    %6975 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6976 = "mini.method_call"(%6975, %6972) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6977 = "mini.to_fat_ptr"(%6976) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6978 = "mini.to_fat_ptr"(%6977) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %6979 = "mini.refer"(%6978) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.while"() ({
      %6980 = "mini.unwrap"(%6979) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6981 = "mini.field_access"(%6969) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
      %6982 = "llvm.load"(%6981) : (!mini.reified_type) -> !llvm.ptr
      %6983 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %6984 = "mini.method_call"(%6983, %6980) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
      %6985 = builtin.unrealized_conversion_cast %6984 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>
      %6986 = "mini.checkflag"(%6985) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>) -> i1
      %6987 = "mini.unwrap"(%6986) : (i1) -> i1
    }, {
      %6988 = "mini.to_fat_ptr"(%6985) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "Object"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      %6989 = "mini.to_fat_ptr"(%6988) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      %6990 = "mini.unwrap"(%6989) : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %6991 = "mini.unwrap"(%6971) : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %6992 = "mini.fptr_call"(%6991, %6990) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.ptr<i1>
      %6993 = "mini.unwrap"(%6992) : (!mini.ptr<i1>) -> i1
      "mini.if"(%6993) ({
        "mini.continue"() [^bb760] : () -> ()
      }) : (i1) -> ()
      %6994 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %6995 = builtin.unrealized_conversion_cast %6994 : !mini.ptr<i1> to !mini.ptr<i1>
      "mini.return"(%6995) : (!mini.ptr<i1>) -> ()
      "mini.castassign"(%6985, %6988) ({
        %6996 = "mini.to_fat_ptr"(%6988) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>, !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> ()
    }) : () -> ()
    %6997 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %6998 = builtin.unrealized_conversion_cast %6997 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%6998) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "Iterable2_all_fFunctionT_to_Ptri1", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb761(%6999 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7000 : !llvm.ptr, %7001 : !llvm.struct<(!llvm.ptr)>):
    %7002 = "mini.invariant"(%7000) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7003 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb762] : () -> ()
  ^bb763:
    %7004 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%7004, %7003) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb764] : () -> ()
  ^bb762:
    %7005 = "llvm.getelementptr"(%7000) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7006 = "llvm.load"(%7005) : (!llvm.ptr) -> !llvm.ptr
    %7007 = "llvm.getelementptr"(%7006) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7008 = "llvm.getelementptr"(%7006) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7009 = "llvm.getelementptr"(%7006) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7010 = "llvm.getelementptr"(%7006) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7011 = "llvm.load"(%7007) : (!llvm.ptr) -> i64
    %7012 = "llvm.load"(%7008) : (!llvm.ptr) -> i64
    %7013 = "llvm.load"(%7009) : (!llvm.ptr) -> !llvm.ptr
    %7014 = "llvm.load"(%7010) : (!llvm.ptr) -> !llvm.ptr
    %7015 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %7016 = "llvm.ptrtoint"(%7015) : (!llvm.ptr) -> i64
    %7017 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %7018 = "mini.subtype"(%7013, %7012, %7011, %7017, %7016, %7014) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7018) [^bb763, ^bb763] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb764:
    %7019 = "llvm.extractvalue"(%6999) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7020 = "llvm.load"(%7003) : (!llvm.ptr) -> i32
    %7021 = "llvm.getelementptr"(%7019, %7020) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7022 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7023 = "llvm.getelementptr"(%7021, %7022) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7023) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb765(%7024 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7025 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7026 : !llvm.ptr, %7027 : !llvm.struct<(!llvm.ptr)>):
    %7028 = "mini.wrap"(%7024) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7029 = "mini.to_fat_ptr"(%7028) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7030 = "mini.wrap"(%7027) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %7031 = builtin.unrealized_conversion_cast %7030 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %7032 = "mini.unwrap"(%7029) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7033 = "mini.field_access"(%7029) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %7034 = "llvm.load"(%7033) : (!mini.reified_type) -> !llvm.ptr
    %7035 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7036 = "mini.method_call"(%7035, %7032) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7037 = "mini.to_fat_ptr"(%7036) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7038 = "mini.to_fat_ptr"(%7037) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7039 = "mini.refer"(%7038) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.while"() ({
      %7040 = "mini.unwrap"(%7039) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7041 = "mini.field_access"(%7029) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
      %7042 = "llvm.load"(%7041) : (!mini.reified_type) -> !llvm.ptr
      %7043 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %7044 = "mini.method_call"(%7043, %7040) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
      %7045 = builtin.unrealized_conversion_cast %7044 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>
      %7046 = "mini.checkflag"(%7045) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>) -> i1
      %7047 = "mini.unwrap"(%7046) : (i1) -> i1
    }, {
      %7048 = "mini.to_fat_ptr"(%7045) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "Object"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      %7049 = "mini.to_fat_ptr"(%7048) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      %7050 = "mini.unwrap"(%7049) : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %7051 = "mini.unwrap"(%7031) : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %7052 = "mini.fptr_call"(%7051, %7050) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.ptr<i1>
      %7053 = "mini.unwrap"(%7052) : (!mini.ptr<i1>) -> i1
      "mini.if"(%7053) ({
        %7054 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
        %7055 = builtin.unrealized_conversion_cast %7054 : !mini.ptr<i1> to !mini.ptr<i1>
        "mini.return"(%7055) : (!mini.ptr<i1>) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%7045, %7048) ({
        %7056 = "mini.to_fat_ptr"(%7048) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.nil]>, !mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">) -> ()
    }) : () -> ()
    %7057 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %7058 = builtin.unrealized_conversion_cast %7057 : !mini.ptr<i1> to !mini.ptr<i1>
    "mini.return"(%7058) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "Iterable2_any_fFunctionT_to_Ptri1", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb766(%7059 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7060 : !llvm.ptr, %7061 : !llvm.struct<(!llvm.ptr)>):
    %7062 = "mini.invariant"(%7060) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7063 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb767] : () -> ()
  ^bb768:
    %7064 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%7064, %7063) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb769] : () -> ()
  ^bb767:
    %7065 = "llvm.getelementptr"(%7060) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7066 = "llvm.load"(%7065) : (!llvm.ptr) -> !llvm.ptr
    %7067 = "llvm.getelementptr"(%7066) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7068 = "llvm.getelementptr"(%7066) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7069 = "llvm.getelementptr"(%7066) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7070 = "llvm.getelementptr"(%7066) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7071 = "llvm.load"(%7067) : (!llvm.ptr) -> i64
    %7072 = "llvm.load"(%7068) : (!llvm.ptr) -> i64
    %7073 = "llvm.load"(%7069) : (!llvm.ptr) -> !llvm.ptr
    %7074 = "llvm.load"(%7070) : (!llvm.ptr) -> !llvm.ptr
    %7075 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %7076 = "llvm.ptrtoint"(%7075) : (!llvm.ptr) -> i64
    %7077 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %7078 = "mini.subtype"(%7073, %7072, %7071, %7077, %7076, %7074) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7078) [^bb768, ^bb768] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb769:
    %7079 = "llvm.extractvalue"(%7059) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7080 = "llvm.load"(%7063) : (!llvm.ptr) -> i32
    %7081 = "llvm.getelementptr"(%7079, %7080) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7082 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7083 = "llvm.getelementptr"(%7081, %7082) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7083) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb770(%7084 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7085 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7086 : !llvm.ptr, %7087 : !llvm.struct<(!llvm.ptr)>):
    %7088 = "mini.wrap"(%7084) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7089 = "mini.to_fat_ptr"(%7088) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7090 = "mini.wrap"(%7087) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">>
    %7091 = builtin.unrealized_conversion_cast %7090 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">>
    %7092 = "mini.unwrap"(%7089) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7093 = "mini.unwrap"(%7091) : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">>) -> !llvm.struct<(!llvm.ptr)>
    %7094 = "mini.field_access"(%7089) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %7095 = "llvm.load"(%7094) : (!mini.reified_type) -> !llvm.ptr
    %7096 = "llvm.getelementptr"(%7086) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7097 = "llvm.load"(%7096) : (!llvm.ptr) -> !llvm.ptr
    %7098 = "mini.parameterization_indexation"(%7097) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
    %7099 = "mini.parameterization"(%7095, %7098) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["Iterable2.T_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %7100 = "mini.parameterization"(%7095, %7098) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["Iterable2.U_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %7101 = "mini.new"(%7099, %7100) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr, !llvm.ptr)>, "class_name" = "MapIterable2", "num_data_fields" = 2 : i32, "has_type_fields"} : (!llvm.ptr, !llvm.ptr) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>
    %7102 = "mini.to_fat_ptr"(%7089) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>
    %7103 = "mini.unwrap"(%7102) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7104 = builtin.unrealized_conversion_cast %7091 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">>
    %7105 = "mini.unwrap"(%7104) : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">>) -> !llvm.struct<(!llvm.ptr)>
    %7106 = "mini.unwrap"(%7101) : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7107 = "mini.field_access"(%7089) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %7108 = "llvm.load"(%7107) : (!mini.reified_type) -> !llvm.ptr
    %7109 = "llvm.getelementptr"(%7086) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7110 = "llvm.load"(%7109) : (!llvm.ptr) -> !llvm.ptr
    %7111 = "mini.parameterization_indexation"(%7110) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
    %7112 = "mini.parameterization"(%7108, %7111) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Object", ["Iterable2.T_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %7113 = "mini.parameterization"(%7108, %7111) {"id_hierarchy" = ["function_typ", [1 : i32], [0 : i32]], "name_hierarchy" = ["FunctionIterable2.T_subtype_Object_to_Iterable2.U_subtype_Object", ["Iterable2.U_subtype_Object"], ["Iterable2.T_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %7114 = "mini.parameterizations_array"(%7112, %7113) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7114, %7106, %7103, %7105) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 51 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %7115 = "mini.to_fat_ptr"(%7101) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.return"(%7115) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_map_fFunctionT_to_U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb771(%7116 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7117 : !llvm.ptr, %7118 : !llvm.struct<(!llvm.ptr)>):
    %7119 = "mini.invariant"(%7117) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7120 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb772] : () -> ()
  ^bb773:
    %7121 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%7121, %7120) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb774] : () -> ()
  ^bb772:
    %7122 = "llvm.getelementptr"(%7117) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7123 = "llvm.load"(%7122) : (!llvm.ptr) -> !llvm.ptr
    %7124 = "llvm.getelementptr"(%7123) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7125 = "llvm.getelementptr"(%7123) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7126 = "llvm.getelementptr"(%7123) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7127 = "llvm.getelementptr"(%7123) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7128 = "llvm.load"(%7124) : (!llvm.ptr) -> i64
    %7129 = "llvm.load"(%7125) : (!llvm.ptr) -> i64
    %7130 = "llvm.load"(%7126) : (!llvm.ptr) -> !llvm.ptr
    %7131 = "llvm.load"(%7127) : (!llvm.ptr) -> !llvm.ptr
    %7132 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %7133 = "llvm.ptrtoint"(%7132) : (!llvm.ptr) -> i64
    %7134 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %7135 = "mini.subtype"(%7130, %7129, %7128, %7134, %7133, %7131) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7135) [^bb773, ^bb773] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb774:
    %7136 = "llvm.extractvalue"(%7116) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7137 = "llvm.load"(%7120) : (!llvm.ptr) -> i32
    %7138 = "llvm.getelementptr"(%7136, %7137) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7139 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7140 = "llvm.getelementptr"(%7138, %7139) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7140) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb775(%7141 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7142 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7143 : !llvm.ptr, %7144 : !llvm.struct<(!llvm.ptr)>):
    %7145 = "mini.wrap"(%7141) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7146 = "mini.to_fat_ptr"(%7145) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7147 = "mini.wrap"(%7144) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %7148 = builtin.unrealized_conversion_cast %7147 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.ptr<i1>>
    %7149 = "mini.unwrap"(%7146) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7150 = "mini.unwrap"(%7148) : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %7151 = "mini.field_access"(%7146) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %7152 = "llvm.load"(%7151) : (!mini.reified_type) -> !llvm.ptr
    %7153 = "mini.parameterization"(%7152) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["Iterable2.T_subtype_Object"]} : (!llvm.ptr) -> !llvm.ptr
    %7154 = "mini.new"(%7153) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr)>, "class_name" = "FilterIterable2", "num_data_fields" = 2 : i32, "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7155 = "mini.to_fat_ptr"(%7146) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>
    %7156 = "mini.unwrap"(%7155) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7157 = builtin.unrealized_conversion_cast %7148 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %7158 = "mini.unwrap"(%7157) : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %7159 = "mini.unwrap"(%7154) : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7160 = "mini.field_access"(%7146) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %7161 = "llvm.load"(%7160) : (!mini.reified_type) -> !llvm.ptr
    %7162 = "mini.parameterization"(%7161) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Object", ["Iterable2.T_subtype_Object"]]} : (!llvm.ptr) -> !llvm.ptr
    %7163 = "mini.parameterization"(%7161) {"id_hierarchy" = ["function_typ", ["bool_typ"], [0 : i32]], "name_hierarchy" = ["FunctionIterable2.T_subtype_Object_to_Ptri1", ["Ptri1"], ["Iterable2.T_subtype_Object"]]} : (!llvm.ptr) -> !llvm.ptr
    %7164 = "mini.parameterizations_array"(%7162, %7163) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7164, %7159, %7156, %7158) {"offset" = 3 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 50 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %7165 = "mini.to_fat_ptr"(%7154) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.return"(%7165) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb776(%7166 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7167 : !llvm.ptr, %7168 : !llvm.struct<(!llvm.ptr)>):
    %7169 = "mini.invariant"(%7167) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7170 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb777] : () -> ()
  ^bb778:
    %7171 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%7171, %7170) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb779] : () -> ()
  ^bb777:
    %7172 = "llvm.getelementptr"(%7167) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7173 = "llvm.load"(%7172) : (!llvm.ptr) -> !llvm.ptr
    %7174 = "llvm.getelementptr"(%7173) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7175 = "llvm.getelementptr"(%7173) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7176 = "llvm.getelementptr"(%7173) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7177 = "llvm.getelementptr"(%7173) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7178 = "llvm.load"(%7174) : (!llvm.ptr) -> i64
    %7179 = "llvm.load"(%7175) : (!llvm.ptr) -> i64
    %7180 = "llvm.load"(%7176) : (!llvm.ptr) -> !llvm.ptr
    %7181 = "llvm.load"(%7177) : (!llvm.ptr) -> !llvm.ptr
    %7182 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %7183 = "llvm.ptrtoint"(%7182) : (!llvm.ptr) -> i64
    %7184 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %7185 = "mini.subtype"(%7180, %7179, %7178, %7184, %7183, %7181) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7185) [^bb778, ^bb778] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb779:
    %7186 = "llvm.extractvalue"(%7166) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7187 = "llvm.load"(%7170) : (!llvm.ptr) -> i32
    %7188 = "llvm.getelementptr"(%7186, %7187) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7189 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7190 = "llvm.getelementptr"(%7188, %7189) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7190) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb780(%7191 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7192 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7193 : !llvm.ptr, %7194 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7195 = "mini.wrap"(%7191) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7196 = "mini.to_fat_ptr"(%7195) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7197 = "mini.wrap"(%7194) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7198 = "mini.to_fat_ptr"(%7197) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7199 = "mini.unwrap"(%7196) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7200 = "mini.unwrap"(%7198) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7201 = "mini.field_access"(%7196) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %7202 = "llvm.load"(%7201) : (!mini.reified_type) -> !llvm.ptr
    %7203 = "mini.parameterization"(%7202) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["Iterable2.T_subtype_Object"]} : (!llvm.ptr) -> !llvm.ptr
    %7204 = "mini.new"(%7203) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr)>, "class_name" = "ChainIterable2", "num_data_fields" = 2 : i32, "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7205 = "mini.to_fat_ptr"(%7196) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %7206 = "mini.unwrap"(%7205) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7207 = "mini.to_fat_ptr"(%7198) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %7208 = "mini.unwrap"(%7207) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7209 = "mini.unwrap"(%7204) : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7210 = "mini.field_access"(%7196) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %7211 = "llvm.load"(%7210) : (!mini.reified_type) -> !llvm.ptr
    %7212 = "mini.parameterization"(%7211) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Object", ["Iterable2.T_subtype_Object"]]} : (!llvm.ptr) -> !llvm.ptr
    %7213 = "mini.parameterization"(%7211) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Object", ["Iterable2.T_subtype_Object"]]} : (!llvm.ptr) -> !llvm.ptr
    %7214 = "mini.parameterizations_array"(%7212, %7213) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7214, %7209, %7206, %7208) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 50 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7215 = "mini.to_fat_ptr"(%7204) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.return"(%7215) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_chain_otherIterable2T", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb781(%7216 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7217 : !llvm.ptr, %7218 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7219 = "mini.invariant"(%7217) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7220 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb782] : () -> ()
  ^bb783:
    %7221 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%7221, %7220) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb784] : () -> ()
  ^bb782:
    %7222 = "llvm.getelementptr"(%7217) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7223 = "llvm.load"(%7222) : (!llvm.ptr) -> !llvm.ptr
    %7224 = "llvm.getelementptr"(%7223) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7225 = "llvm.getelementptr"(%7223) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7226 = "llvm.getelementptr"(%7223) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7227 = "llvm.getelementptr"(%7223) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7228 = "llvm.load"(%7224) : (!llvm.ptr) -> i64
    %7229 = "llvm.load"(%7225) : (!llvm.ptr) -> i64
    %7230 = "llvm.load"(%7226) : (!llvm.ptr) -> !llvm.ptr
    %7231 = "llvm.load"(%7227) : (!llvm.ptr) -> !llvm.ptr
    %7232 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %7233 = "llvm.ptrtoint"(%7232) : (!llvm.ptr) -> i64
    %7234 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %7235 = "mini.subtype"(%7230, %7229, %7228, %7234, %7233, %7231) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7235) [^bb783, ^bb783] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb784:
    %7236 = "llvm.extractvalue"(%7216) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7237 = "llvm.load"(%7220) : (!llvm.ptr) -> i32
    %7238 = "llvm.getelementptr"(%7236, %7237) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7239 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7240 = "llvm.getelementptr"(%7238, %7239) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7240) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb785(%7241 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7242 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7243 : !llvm.ptr, %7244 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7245 = "mini.wrap"(%7241) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7246 = "mini.to_fat_ptr"(%7245) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7247 = "mini.wrap"(%7244) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7248 = "mini.to_fat_ptr"(%7247) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7249 = "mini.unwrap"(%7246) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7250 = "mini.unwrap"(%7248) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7251 = "mini.field_access"(%7246) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %7252 = "llvm.load"(%7251) : (!mini.reified_type) -> !llvm.ptr
    %7253 = "mini.parameterization"(%7252) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["Iterable2.T_subtype_Object"]} : (!llvm.ptr) -> !llvm.ptr
    %7254 = "mini.new"(%7253) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr)>, "class_name" = "InterleaveIterable2", "num_data_fields" = 2 : i32, "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7255 = "mini.to_fat_ptr"(%7246) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %7256 = "mini.unwrap"(%7255) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7257 = "mini.to_fat_ptr"(%7248) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %7258 = "mini.unwrap"(%7257) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7259 = "mini.unwrap"(%7254) : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7260 = "mini.field_access"(%7246) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %7261 = "llvm.load"(%7260) : (!mini.reified_type) -> !llvm.ptr
    %7262 = "mini.parameterization"(%7261) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Object", ["Iterable2.T_subtype_Object"]]} : (!llvm.ptr) -> !llvm.ptr
    %7263 = "mini.parameterization"(%7261) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Object", ["Iterable2.T_subtype_Object"]]} : (!llvm.ptr) -> !llvm.ptr
    %7264 = "mini.parameterizations_array"(%7262, %7263) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7264, %7259, %7256, %7258) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 50 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7265 = "mini.to_fat_ptr"(%7254) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.return"(%7265) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_interleave_otherIterable2T", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb786(%7266 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7267 : !llvm.ptr, %7268 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7269 = "mini.invariant"(%7267) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7270 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb787] : () -> ()
  ^bb788:
    %7271 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%7271, %7270) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb789] : () -> ()
  ^bb787:
    %7272 = "llvm.getelementptr"(%7267) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7273 = "llvm.load"(%7272) : (!llvm.ptr) -> !llvm.ptr
    %7274 = "llvm.getelementptr"(%7273) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7275 = "llvm.getelementptr"(%7273) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7276 = "llvm.getelementptr"(%7273) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7277 = "llvm.getelementptr"(%7273) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7278 = "llvm.load"(%7274) : (!llvm.ptr) -> i64
    %7279 = "llvm.load"(%7275) : (!llvm.ptr) -> i64
    %7280 = "llvm.load"(%7276) : (!llvm.ptr) -> !llvm.ptr
    %7281 = "llvm.load"(%7277) : (!llvm.ptr) -> !llvm.ptr
    %7282 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %7283 = "llvm.ptrtoint"(%7282) : (!llvm.ptr) -> i64
    %7284 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %7285 = "mini.subtype"(%7280, %7279, %7278, %7284, %7283, %7281) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7285) [^bb788, ^bb788] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb789:
    %7286 = "llvm.extractvalue"(%7266) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7287 = "llvm.load"(%7270) : (!llvm.ptr) -> i32
    %7288 = "llvm.getelementptr"(%7286, %7287) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7289 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7290 = "llvm.getelementptr"(%7288, %7289) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7290) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb790(%7291 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7292 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7293 : !llvm.ptr, %7294 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7295 = "mini.wrap"(%7291) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7296 = "mini.to_fat_ptr"(%7295) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7297 = "mini.wrap"(%7294) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>
    %7298 = "mini.to_fat_ptr"(%7297) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>
    %7299 = "mini.unwrap"(%7296) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7300 = "mini.unwrap"(%7298) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7301 = "mini.field_access"(%7296) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %7302 = "llvm.load"(%7301) : (!mini.reified_type) -> !llvm.ptr
    %7303 = "llvm.getelementptr"(%7293) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7304 = "llvm.load"(%7303) : (!llvm.ptr) -> !llvm.ptr
    %7305 = "mini.parameterization_indexation"(%7304) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
    %7306 = "mini.parameterization"(%7302, %7305) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["Iterable2.T_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %7307 = "mini.parameterization"(%7302, %7305) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["Iterable2.U_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %7308 = "mini.parameterization"(%7302, %7305) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairIterable2.T_subtype_Object._Iterable2.U_subtype_Object", ["Iterable2.T_subtype_Object"], ["Iterable2.U_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %7309 = "mini.new"(%7306, %7307, %7308) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "class_name" = "ZipIterable2", "num_data_fields" = 2 : i32, "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>
    %7310 = "mini.to_fat_ptr"(%7296) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>
    %7311 = "mini.unwrap"(%7310) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7312 = "mini.to_fat_ptr"(%7298) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>
    %7313 = "mini.unwrap"(%7312) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7314 = "mini.unwrap"(%7309) : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7315 = "mini.field_access"(%7296) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %7316 = "llvm.load"(%7315) : (!mini.reified_type) -> !llvm.ptr
    %7317 = "llvm.getelementptr"(%7293) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7318 = "llvm.load"(%7317) : (!llvm.ptr) -> !llvm.ptr
    %7319 = "mini.parameterization_indexation"(%7318) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
    %7320 = "mini.parameterization"(%7316, %7319) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Object", ["Iterable2.T_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %7321 = "mini.parameterization"(%7316, %7319) {"id_hierarchy" = ["Iterable2", [1 : i32]], "name_hierarchy" = ["Iterable2Iterable2.U_subtype_Object", ["Iterable2.U_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %7322 = "mini.parameterizations_array"(%7320, %7321) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7322, %7314, %7311, %7313) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7323 = "mini.to_fat_ptr"(%7309) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable2", "to_typ_name" = "ZipIterable2", "invariant"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.return"(%7323) : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_zip_otherIterable2U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb791(%7324 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7325 : !llvm.ptr, %7326 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7327 = "mini.invariant"(%7325) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7328 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb792] : () -> ()
  ^bb793:
    %7329 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%7329, %7328) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb794] : () -> ()
  ^bb792:
    %7330 = "llvm.getelementptr"(%7325) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7331 = "llvm.load"(%7330) : (!llvm.ptr) -> !llvm.ptr
    %7332 = "llvm.getelementptr"(%7331) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7333 = "llvm.getelementptr"(%7331) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7334 = "llvm.getelementptr"(%7331) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7335 = "llvm.getelementptr"(%7331) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7336 = "llvm.load"(%7332) : (!llvm.ptr) -> i64
    %7337 = "llvm.load"(%7333) : (!llvm.ptr) -> i64
    %7338 = "llvm.load"(%7334) : (!llvm.ptr) -> !llvm.ptr
    %7339 = "llvm.load"(%7335) : (!llvm.ptr) -> !llvm.ptr
    %7340 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %7341 = "llvm.ptrtoint"(%7340) : (!llvm.ptr) -> i64
    %7342 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %7343 = "mini.subtype"(%7338, %7337, %7336, %7342, %7341, %7339) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7343) [^bb793, ^bb793] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb794:
    %7344 = "llvm.extractvalue"(%7324) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7345 = "llvm.load"(%7328) : (!llvm.ptr) -> i32
    %7346 = "llvm.getelementptr"(%7344, %7345) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7347 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7348 = "llvm.getelementptr"(%7346, %7347) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7348) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb795(%7349 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7350 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7351 : !llvm.ptr, %7352 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7353 = "mini.wrap"(%7349) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7354 = "mini.to_fat_ptr"(%7353) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7355 = "mini.wrap"(%7352) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>
    %7356 = "mini.to_fat_ptr"(%7355) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>
    %7357 = "mini.unwrap"(%7354) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7358 = "mini.unwrap"(%7356) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7359 = "mini.field_access"(%7354) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %7360 = "llvm.load"(%7359) : (!mini.reified_type) -> !llvm.ptr
    %7361 = "llvm.getelementptr"(%7351) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7362 = "llvm.load"(%7361) : (!llvm.ptr) -> !llvm.ptr
    %7363 = "mini.parameterization_indexation"(%7362) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
    %7364 = "mini.parameterization"(%7360, %7363) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["Iterable2.T_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %7365 = "mini.parameterization"(%7360, %7363) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["Iterable2.U_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %7366 = "mini.parameterization"(%7360, %7363) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairIterable2.T_subtype_Object._Iterable2.U_subtype_Object", ["Iterable2.T_subtype_Object"], ["Iterable2.U_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %7367 = "mini.new"(%7364, %7365, %7366) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "class_name" = "ProductIterable2", "num_data_fields" = 2 : i32, "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>
    %7368 = "mini.to_fat_ptr"(%7354) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">]>
    %7369 = "mini.unwrap"(%7368) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7370 = "mini.to_fat_ptr"(%7356) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>
    %7371 = "mini.unwrap"(%7370) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7372 = "mini.unwrap"(%7367) : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7373 = "mini.field_access"(%7354) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.reified_type
    %7374 = "llvm.load"(%7373) : (!mini.reified_type) -> !llvm.ptr
    %7375 = "llvm.getelementptr"(%7351) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7376 = "llvm.load"(%7375) : (!llvm.ptr) -> !llvm.ptr
    %7377 = "mini.parameterization_indexation"(%7376) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
    %7378 = "mini.parameterization"(%7374, %7377) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2Iterable2.T_subtype_Object", ["Iterable2.T_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %7379 = "mini.parameterization"(%7374, %7377) {"id_hierarchy" = ["Iterable2", [1 : i32]], "name_hierarchy" = ["Iterable2Iterable2.U_subtype_Object", ["Iterable2.U_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %7380 = "mini.parameterizations_array"(%7378, %7379) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7380, %7372, %7369, %7371) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7381 = "mini.to_fat_ptr"(%7367) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable2", "to_typ_name" = "ProductIterable2", "invariant"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.return"(%7381) : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "Iterable2">]>) -> ()
  }) {"func_name" = "Iterable2_product_otherIterable2U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb796(%7382 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7383 : !llvm.ptr, %7384 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7385 = "mini.invariant"(%7383) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7386 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb797] : () -> ()
  ^bb798:
    %7387 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%7387, %7386) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb799] : () -> ()
  ^bb797:
    %7388 = "llvm.getelementptr"(%7383) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7389 = "llvm.load"(%7388) : (!llvm.ptr) -> !llvm.ptr
    %7390 = "llvm.getelementptr"(%7389) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7391 = "llvm.getelementptr"(%7389) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7392 = "llvm.getelementptr"(%7389) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7393 = "llvm.getelementptr"(%7389) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7394 = "llvm.load"(%7390) : (!llvm.ptr) -> i64
    %7395 = "llvm.load"(%7391) : (!llvm.ptr) -> i64
    %7396 = "llvm.load"(%7392) : (!llvm.ptr) -> !llvm.ptr
    %7397 = "llvm.load"(%7393) : (!llvm.ptr) -> !llvm.ptr
    %7398 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %7399 = "llvm.ptrtoint"(%7398) : (!llvm.ptr) -> i64
    %7400 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %7401 = "mini.subtype"(%7396, %7395, %7394, %7400, %7399, %7397) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7401) [^bb798, ^bb798] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb799:
    %7402 = "llvm.extractvalue"(%7382) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7403 = "llvm.load"(%7386) : (!llvm.ptr) -> i32
    %7404 = "llvm.getelementptr"(%7402, %7403) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7405 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7406 = "llvm.getelementptr"(%7404, %7405) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7406) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "Array_field_buffer"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "Array_field_length"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "Array_field_capacity"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.ptr)>, "offset" = 3 : i32, "meth_name" = "Array_field_Array_0"} : () -> ()
  "mini.func"() ({
  ^bb800(%7407 : !llvm.ptr, %7408 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7409 = "mini.wrap"(%7408) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7410 = "mini.to_fat_ptr"(%7409) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7411 = "mini.parameterization"() {"id_hierarchy" = ["Object"], "name_hierarchy" = ["Array.T_subtype_Object"]} : () -> !llvm.ptr
    %7412 = "mini.new"(%7411) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32, !llvm.ptr)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7413 = "mini.unwrap"(%7412) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7414 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%7414, %7413) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 69 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7415 = "mini.to_fat_ptr"(%7412) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7416 = "mini.refer"(%7415) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7417 = "mini.unwrap"(%7410) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7418 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7419 = "mini.method_call"(%7418, %7417) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %7420 = "mini.to_fat_ptr"(%7419) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7421 = "mini.to_fat_ptr"(%7420) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7422 = "mini.refer"(%7421) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    "mini.while"() ({
      %7423 = "mini.unwrap"(%7422) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7424 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %7425 = "mini.method_call"(%7424, %7423) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
      %7426 = builtin.unrealized_conversion_cast %7425 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
      %7427 = "mini.checkflag"(%7426) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> i1
      %7428 = "mini.unwrap"(%7427) : (i1) -> i1
    }, {
      %7429 = "mini.to_fat_ptr"(%7426) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "Object"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
      %7430 = "mini.to_fat_ptr"(%7429) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Array">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
      %7431 = "mini.unwrap"(%7430) : (!mini.type_param<"T", !mini.fatptr<"Object">, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
      %7432 = "mini.unwrap"(%7416) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7433 = "mini.parameterization"() {"id_hierarchy" = ["Object"], "name_hierarchy" = ["Array.T_subtype_Object"]} : () -> !llvm.ptr
      %7434 = "mini.parameterizations_array"(%7433) : (!llvm.ptr) -> !llvm.ptr
      %7435 = "mini.method_call"(%7434, %7432, %7431) {"offset" = 9 : i32, "vptrs" = ["Object"], "vtable_size" = 69 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
      %7436 = "mini.to_fat_ptr"(%7435) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
      "mini.castassign"(%7426, %7429) ({
        %7437 = "mini.to_fat_ptr"(%7429) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Array">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>, !mini.type_param<"T", !mini.fatptr<"Object">, "Array">) -> ()
    }) : () -> ()
    %7438 = "mini.to_fat_ptr"(%7416) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    "mini.return"(%7438) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> ()
  }) {"func_name" = "Array__Self_from_iterable_iterableIterable2T", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb801(%7439 : !llvm.ptr, %7440 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7441 = "mini.invariant"(%7439) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7442 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb802] : () -> ()
  ^bb803:
    %7443 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%7443, %7442) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb804] : () -> ()
  ^bb802:
    %7444 = "llvm.getelementptr"(%7439) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7445 = "llvm.load"(%7444) : (!llvm.ptr) -> !llvm.ptr
    %7446 = "llvm.getelementptr"(%7445) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7447 = "llvm.getelementptr"(%7445) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7448 = "llvm.getelementptr"(%7445) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7449 = "llvm.getelementptr"(%7445) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7450 = "llvm.load"(%7446) : (!llvm.ptr) -> i64
    %7451 = "llvm.load"(%7447) : (!llvm.ptr) -> i64
    %7452 = "llvm.load"(%7448) : (!llvm.ptr) -> !llvm.ptr
    %7453 = "llvm.load"(%7449) : (!llvm.ptr) -> !llvm.ptr
    %7454 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %7455 = "llvm.ptrtoint"(%7454) : (!llvm.ptr) -> i64
    %7456 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %7457 = "mini.subtype"(%7452, %7451, %7450, %7456, %7455, %7453) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7457) [^bb803, ^bb803] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb804:
    %7458 = "mini.addr_of"() {"global_name" = @Array} : () -> !llvm.ptr
    %7459 = "llvm.load"(%7442) : (!llvm.ptr) -> i32
    %7460 = "llvm.getelementptr"(%7458, %7459) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7461 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7462 = "llvm.getelementptr"(%7460, %7461) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7462) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B__Self_from_iterable_iterableIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb805(%7463 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7464 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7465 : !llvm.ptr):
    %7466 = "mini.wrap"(%7463) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7467 = "mini.to_fat_ptr"(%7466) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7468 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7469 = "mini.create_buffer"(%7468) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.ptr<i32>) -> !llvm.ptr
    %7470 = "mini.field_access"(%7467) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    "mini.castassign"(%7470, %7469) ({
      %7471 = builtin.unrealized_conversion_cast %7469 : !llvm.ptr to !mini.buffer<!mini.fatptr<"T">>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ", "should_offset"} : (!mini.buffer<!mini.fatptr<"T">>, !llvm.ptr) -> ()
    %7472 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7473 = "mini.field_access"(%7467) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    "mini.castassign"(%7473, %7472) ({
      %7474 = builtin.unrealized_conversion_cast %7472 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %7475 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7476 = "mini.field_access"(%7467) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    "mini.castassign"(%7476, %7475) ({
      %7477 = builtin.unrealized_conversion_cast %7475 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb806(%7478 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7479 : !llvm.ptr):
    %7480 = "mini.invariant"(%7479) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7481 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb807] : () -> ()
  ^bb807:
    %7482 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%7482, %7481) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb808] : () -> ()
  ^bb808:
    %7483 = "llvm.extractvalue"(%7478) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7484 = "llvm.load"(%7481) : (!llvm.ptr) -> i32
    %7485 = "llvm.getelementptr"(%7483, %7484) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7486 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7487 = "llvm.getelementptr"(%7485, %7486) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7487) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb809(%7488 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7489 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7490 : !llvm.ptr, %7491 : i32):
    %7492 = "mini.wrap"(%7488) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7493 = "mini.to_fat_ptr"(%7492) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7494 = "mini.wrap"(%7491) : (i32) -> !mini.ptr<i32>
    %7495 = builtin.unrealized_conversion_cast %7494 : !mini.ptr<i32> to !mini.ptr<i32>
    %7496 = "mini.field_access"(%7493) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    "mini.castassign"(%7496, %7495) ({
      %7497 = builtin.unrealized_conversion_cast %7495 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %7498 = "mini.field_access"(%7493) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    %7499 = "mini.create_buffer"(%7498) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.ptr<i32>) -> !llvm.ptr
    %7500 = "mini.field_access"(%7493) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    "mini.castassign"(%7500, %7499) ({
      %7501 = builtin.unrealized_conversion_cast %7499 : !llvm.ptr to !mini.buffer<!mini.fatptr<"T">>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ", "should_offset"} : (!mini.buffer<!mini.fatptr<"T">>, !llvm.ptr) -> ()
    %7502 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7503 = "mini.field_access"(%7493) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    "mini.castassign"(%7503, %7502) ({
      %7504 = builtin.unrealized_conversion_cast %7502 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_init_capacityPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb810(%7505 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7506 : !llvm.ptr, %7507 : i32):
    %7508 = "mini.invariant"(%7506) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7509 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb811] : () -> ()
  ^bb812:
    %7510 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%7510, %7509) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb813] : () -> ()
  ^bb811:
    %7511 = "llvm.getelementptr"(%7506) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7512 = "llvm.load"(%7511) : (!llvm.ptr) -> !llvm.ptr
    %7513 = "llvm.getelementptr"(%7512) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7514 = "llvm.getelementptr"(%7512) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7515 = "llvm.getelementptr"(%7512) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7516 = "llvm.getelementptr"(%7512) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7517 = "llvm.load"(%7513) : (!llvm.ptr) -> i64
    %7518 = "llvm.load"(%7514) : (!llvm.ptr) -> i64
    %7519 = "llvm.load"(%7515) : (!llvm.ptr) -> !llvm.ptr
    %7520 = "llvm.load"(%7516) : (!llvm.ptr) -> !llvm.ptr
    %7521 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %7522 = "llvm.ptrtoint"(%7521) : (!llvm.ptr) -> i64
    %7523 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %7524 = "mini.subtype"(%7519, %7518, %7517, %7523, %7522, %7520) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7524) [^bb812, ^bb812] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb813:
    %7525 = "llvm.extractvalue"(%7505) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7526 = "llvm.load"(%7509) : (!llvm.ptr) -> i32
    %7527 = "llvm.getelementptr"(%7525, %7526) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7528 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7529 = "llvm.getelementptr"(%7527, %7528) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7529) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_init_capacityPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb814(%7530 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7531 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7532 : !llvm.ptr):
    %7533 = "mini.wrap"(%7530) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7534 = "mini.to_fat_ptr"(%7533) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7535 = "mini.field_access"(%7534) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    %7536 = builtin.unrealized_conversion_cast %7535 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%7536) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_length_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb815(%7537 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7538 : !llvm.ptr):
    %7539 = "mini.invariant"(%7538) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7540 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb816] : () -> ()
  ^bb816:
    %7541 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%7541, %7540) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb817] : () -> ()
  ^bb817:
    %7542 = "llvm.extractvalue"(%7537) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7543 = "llvm.load"(%7540) : (!llvm.ptr) -> i32
    %7544 = "llvm.getelementptr"(%7542, %7543) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7545 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7546 = "llvm.getelementptr"(%7544, %7545) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7546) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_length_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb818(%7547 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7548 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7549 : !llvm.ptr):
    %7550 = "mini.wrap"(%7547) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7551 = "mini.to_fat_ptr"(%7550) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7552 = "mini.field_access"(%7551) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    %7553 = builtin.unrealized_conversion_cast %7552 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%7553) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_capacity_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb819(%7554 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7555 : !llvm.ptr):
    %7556 = "mini.invariant"(%7555) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7557 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb820] : () -> ()
  ^bb820:
    %7558 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
    "llvm.store"(%7558, %7557) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb821] : () -> ()
  ^bb821:
    %7559 = "llvm.extractvalue"(%7554) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7560 = "llvm.load"(%7557) : (!llvm.ptr) -> i32
    %7561 = "llvm.getelementptr"(%7559, %7560) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7562 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7563 = "llvm.getelementptr"(%7561, %7562) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7563) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb822(%7564 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7565 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7566 : !llvm.ptr, %7567 : !llvm.struct<(!llvm.ptr, i160)>):
    %7568 = "mini.wrap"(%7564) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7569 = "mini.to_fat_ptr"(%7568) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7570 = "mini.wrap"(%7567) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
    %7571 = "mini.to_fat_ptr"(%7570) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Array">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
    %7572 = "mini.field_access"(%7569) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    %7573 = "mini.field_access"(%7569) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    %7574 = "mini.unwrap"(%7572) : (!mini.ptr<i32>) -> i32
    %7575 = "mini.unwrap"(%7573) : (!mini.ptr<i32>) -> i32
    %7576 = "mini.comparison"(%7574, %7575) {"op" = "GE"} : (i32, i32) -> i1
    %7577 = "mini.wrap"(%7576) : (i1) -> !mini.ptr<i32>
    %7578 = "mini.unwrap"(%7577) : (!mini.ptr<i32>) -> i1
    "mini.if"(%7578) ({
      %7579 = "mini.unwrap"(%7569) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7580 = "mini.field_access"(%7569) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.reified_type
      %7581 = "llvm.load"(%7580) : (!mini.reified_type) -> !llvm.ptr
      %7582 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%7582, %7579) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 69 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    }) : (i1) -> ()
    %7583 = "mini.field_access"(%7569) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    %7584 = "mini.field_access"(%7569) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    %7585 = "mini.buffer_indexation"(%7583, %7584) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
    "mini.castassign"(%7585, %7571) ({
      %7586 = "mini.to_fat_ptr"(%7571) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Array">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Array">, !mini.type_param<"T", !mini.fatptr<"Object">, "Array">) -> ()
    %7587 = "mini.field_access"(%7569) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    %7588 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7589 = "mini.unwrap"(%7587) : (!mini.ptr<i32>) -> i32
    %7590 = "mini.unwrap"(%7588) : (!mini.ptr<i32>) -> i32
    %7591 = "mini.arithmetic"(%7589, %7590) {"op" = "ADD"} : (i32, i32) -> i32
    %7592 = "mini.wrap"(%7591) : (i32) -> !mini.ptr<i32>
    %7593 = "mini.field_access"(%7569) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    "mini.castassign"(%7593, %7592) ({
      %7594 = builtin.unrealized_conversion_cast %7592 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %7595 = "mini.to_fat_ptr"(%7569) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    "mini.return"(%7595) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> ()
  }) {"func_name" = "Array_append_xT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb823(%7596 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7597 : !llvm.ptr, %7598 : !llvm.struct<(!llvm.ptr, i160)>):
    %7599 = "mini.invariant"(%7597) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7600 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb824] : () -> ()
  ^bb825:
    %7601 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
    "llvm.store"(%7601, %7600) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb826] : () -> ()
  ^bb824:
    %7602 = "llvm.getelementptr"(%7597) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7603 = "llvm.load"(%7602) : (!llvm.ptr) -> !llvm.ptr
    %7604 = "llvm.getelementptr"(%7603) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7605 = "llvm.getelementptr"(%7603) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7606 = "llvm.getelementptr"(%7603) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7607 = "llvm.getelementptr"(%7603) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7608 = "llvm.load"(%7604) : (!llvm.ptr) -> i64
    %7609 = "llvm.load"(%7605) : (!llvm.ptr) -> i64
    %7610 = "llvm.load"(%7606) : (!llvm.ptr) -> !llvm.ptr
    %7611 = "llvm.load"(%7607) : (!llvm.ptr) -> !llvm.ptr
    %7612 = "mini.addr_of"() {"global_name" = @Object} : () -> !llvm.ptr
    %7613 = "llvm.ptrtoint"(%7612) : (!llvm.ptr) -> i64
    %7614 = "llvm.mlir.constant"() <{"value" = 3282773614056351330 : i64}> : () -> i64
    %7615 = "mini.subtype"(%7610, %7609, %7608, %7614, %7613, %7611) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7615) [^bb825, ^bb825] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb826:
    %7616 = "llvm.extractvalue"(%7596) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7617 = "llvm.load"(%7600) : (!llvm.ptr) -> i32
    %7618 = "llvm.getelementptr"(%7616, %7617) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7619 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7620 = "llvm.getelementptr"(%7618, %7619) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7620) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_append_xT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb827(%7621 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7622 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7623 : !llvm.ptr):
    %7624 = "mini.wrap"(%7621) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7625 = "mini.to_fat_ptr"(%7624) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7626 = "mini.field_access"(%7625) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    %7627 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7628 = "mini.unwrap"(%7626) : (!mini.ptr<i32>) -> i32
    %7629 = "mini.unwrap"(%7627) : (!mini.ptr<i32>) -> i32
    %7630 = "mini.arithmetic"(%7628, %7629) {"op" = "MUL"} : (i32, i32) -> i32
    %7631 = "mini.wrap"(%7630) : (i32) -> !mini.ptr<i32>
    %7632 = "mini.field_access"(%7625) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    "mini.castassign"(%7632, %7631) ({
      %7633 = builtin.unrealized_conversion_cast %7631 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %7634 = "mini.field_access"(%7625) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    %7635 = builtin.unrealized_conversion_cast %7634 : !mini.buffer<!mini.fatptr<"T">> to !mini.buffer<!mini.fatptr<"T">>
    %7636 = "mini.refer"(%7635) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.fatptr<"T">>) -> !mini.buffer<!mini.fatptr<"T">>
    %7637 = "mini.field_access"(%7625) {"offset" = 2 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    %7638 = "mini.create_buffer"(%7637) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.ptr<i32>) -> !llvm.ptr
    %7639 = "mini.field_access"(%7625) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    "mini.castassign"(%7639, %7638) ({
      %7640 = builtin.unrealized_conversion_cast %7638 : !llvm.ptr to !mini.buffer<!mini.fatptr<"T">>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ", "should_offset"} : (!mini.buffer<!mini.fatptr<"T">>, !llvm.ptr) -> ()
    %7641 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %7642 = "mini.field_access"(%7625) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
      %7643 = "mini.unwrap"(%7641) : (!mini.ptr<i32>) -> i32
      %7644 = "mini.unwrap"(%7642) : (!mini.ptr<i32>) -> i32
      %7645 = "mini.comparison"(%7643, %7644) {"op" = "LT"} : (i32, i32) -> i1
      %7646 = "mini.wrap"(%7645) : (i1) -> !mini.ptr<i32>
      %7647 = "mini.unwrap"(%7646) : (!mini.ptr<i32>) -> i1
    }, {
      %7648 = "mini.buffer_indexation"(%7636, %7641) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
      %7649 = "mini.field_access"(%7625) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
      %7650 = "mini.buffer_indexation"(%7649, %7641) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
      "mini.castassign"(%7650, %7648) ({
        %7651 = "mini.to_fat_ptr"(%7648) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Array">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Array">, !mini.type_param<"T", !mini.fatptr<"Object">, "Array">) -> ()
      %7652 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %7653 = "mini.unwrap"(%7641) : (!mini.ptr<i32>) -> i32
      %7654 = "mini.unwrap"(%7652) : (!mini.ptr<i32>) -> i32
      %7655 = "mini.arithmetic"(%7653, %7654) {"op" = "ADD"} : (i32, i32) -> i32
      %7656 = "mini.wrap"(%7655) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%7641, %7656) ({
        %7657 = builtin.unrealized_conversion_cast %7656 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
  }) {"func_name" = "Array_grow_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb828(%7658 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7659 : !llvm.ptr):
    %7660 = "mini.invariant"(%7659) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7661 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb829] : () -> ()
  ^bb829:
    %7662 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
    "llvm.store"(%7662, %7661) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb830] : () -> ()
  ^bb830:
    %7663 = "llvm.extractvalue"(%7658) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7664 = "llvm.load"(%7661) : (!llvm.ptr) -> i32
    %7665 = "llvm.getelementptr"(%7663, %7664) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7666 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7667 = "llvm.getelementptr"(%7665, %7666) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7667) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_grow_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb831(%7668 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7669 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7670 : !llvm.ptr, %7671 : i32):
    %7672 = "mini.wrap"(%7668) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7673 = "mini.to_fat_ptr"(%7672) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7674 = "mini.wrap"(%7671) : (i32) -> !mini.ptr<i32>
    %7675 = builtin.unrealized_conversion_cast %7674 : !mini.ptr<i32> to !mini.ptr<i32>
    %7676 = "mini.field_access"(%7673) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    %7677 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7678 = "mini.unwrap"(%7676) : (!mini.ptr<i32>) -> i32
    %7679 = "mini.unwrap"(%7677) : (!mini.ptr<i32>) -> i32
    %7680 = "mini.arithmetic"(%7678, %7679) {"op" = "SUB"} : (i32, i32) -> i32
    %7681 = "mini.wrap"(%7680) : (i32) -> !mini.ptr<i32>
    %7682 = "mini.unwrap"(%7675) : (!mini.ptr<i32>) -> i32
    %7683 = "mini.unwrap"(%7681) : (!mini.ptr<i32>) -> i32
    %7684 = "mini.comparison"(%7682, %7683) {"op" = "GT"} : (i32, i32) -> i1
    %7685 = "mini.wrap"(%7684) : (i1) -> !mini.ptr<i32>
    %7686 = "mini.field_access"(%7673) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    %7687 = "mini.unwrap"(%7686) : (!mini.ptr<i32>) -> i32
    %7688 = "mini.unwrap"(%7675) : (!mini.ptr<i32>) -> i32
    %7689 = "mini.arithmetic"(%7687, %7688) {"op" = "ADD"} : (i32, i32) -> i32
    %7690 = "mini.wrap"(%7689) : (i32) -> !mini.ptr<i32>
    %7691 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7692 = "mini.unwrap"(%7690) : (!mini.ptr<i32>) -> i32
    %7693 = "mini.unwrap"(%7691) : (!mini.ptr<i32>) -> i32
    %7694 = "mini.comparison"(%7692, %7693) {"op" = "LT"} : (i32, i32) -> i1
    %7695 = "mini.wrap"(%7694) : (i1) -> !mini.ptr<i32>
    %7696 = "mini.unwrap"(%7685) : (!mini.ptr<i32>) -> i1
    %7697 = "mini.unwrap"(%7695) : (!mini.ptr<i32>) -> i1
    %7698 = "mini.logical"(%7696, %7697) {"op" = "or"} : (i1, i1) -> i1
    %7699 = "mini.wrap"(%7698) : (i1) -> !mini.ptr<i1>
    %7700 = "mini.unwrap"(%7699) : (!mini.ptr<i1>) -> i1
    "mini.if"(%7700) ({
      %7701 = builtin.unrealized_conversion_cast %7675 : !mini.ptr<i32> to !mini.ptr<i32>
      %7702 = "mini.unwrap"(%7701) : (!mini.ptr<i32>) -> i32
      %7703 = "mini.unwrap"(%7673) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7704 = "mini.field_access"(%7673) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.reified_type
      %7705 = "llvm.load"(%7704) : (!mini.reified_type) -> !llvm.ptr
      %7706 = "mini.parameterization"(%7705) {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : (!llvm.ptr) -> !llvm.ptr
      %7707 = "mini.parameterizations_array"(%7706) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%7707, %7703, %7702) {"offset" = 12 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 69 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    }) : (i1) -> ()
    %7708 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7709 = "mini.unwrap"(%7675) : (!mini.ptr<i32>) -> i32
    %7710 = "mini.unwrap"(%7708) : (!mini.ptr<i32>) -> i32
    %7711 = "mini.comparison"(%7709, %7710) {"op" = "LT"} : (i32, i32) -> i1
    %7712 = "mini.wrap"(%7711) : (i1) -> !mini.ptr<i32>
    %7713 = "mini.unwrap"(%7712) : (!mini.ptr<i32>) -> i1
    "mini.if"(%7713) ({
      %7714 = "mini.field_access"(%7673) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
      %7715 = "mini.unwrap"(%7714) : (!mini.ptr<i32>) -> i32
      %7716 = "mini.unwrap"(%7675) : (!mini.ptr<i32>) -> i32
      %7717 = "mini.arithmetic"(%7715, %7716) {"op" = "ADD"} : (i32, i32) -> i32
      %7718 = "mini.wrap"(%7717) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%7675, %7718) ({
        %7719 = builtin.unrealized_conversion_cast %7718 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %7720 = "mini.field_access"(%7673) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    %7721 = "mini.buffer_indexation"(%7720, %7675) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
    %7722 = "mini.to_fat_ptr"(%7721) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Array">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
    "mini.return"(%7722) : (!mini.type_param<"T", !mini.fatptr<"Object">, "Array">) -> ()
  }) {"func_name" = "Array__index_xPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb832(%7723 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7724 : !llvm.ptr, %7725 : i32):
    %7726 = "mini.invariant"(%7724) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7727 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb833] : () -> ()
  ^bb834:
    %7728 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
    "llvm.store"(%7728, %7727) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb835] : () -> ()
  ^bb833:
    %7729 = "llvm.getelementptr"(%7724) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7730 = "llvm.load"(%7729) : (!llvm.ptr) -> !llvm.ptr
    %7731 = "llvm.getelementptr"(%7730) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7732 = "llvm.getelementptr"(%7730) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7733 = "llvm.getelementptr"(%7730) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7734 = "llvm.getelementptr"(%7730) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7735 = "llvm.load"(%7731) : (!llvm.ptr) -> i64
    %7736 = "llvm.load"(%7732) : (!llvm.ptr) -> i64
    %7737 = "llvm.load"(%7733) : (!llvm.ptr) -> !llvm.ptr
    %7738 = "llvm.load"(%7734) : (!llvm.ptr) -> !llvm.ptr
    %7739 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %7740 = "llvm.ptrtoint"(%7739) : (!llvm.ptr) -> i64
    %7741 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %7742 = "mini.subtype"(%7737, %7736, %7735, %7741, %7740, %7738) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7742) [^bb834, ^bb834] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb835:
    %7743 = "llvm.extractvalue"(%7723) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7744 = "llvm.load"(%7727) : (!llvm.ptr) -> i32
    %7745 = "llvm.getelementptr"(%7743, %7744) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7746 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7747 = "llvm.getelementptr"(%7745, %7746) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7747) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B__index_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb836(%7748 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7749 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7750 : !llvm.ptr, %7751 : i32):
    %7752 = "mini.wrap"(%7748) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7753 = "mini.to_fat_ptr"(%7752) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7754 = "mini.wrap"(%7751) : (i32) -> !mini.ptr<i32>
    %7755 = builtin.unrealized_conversion_cast %7754 : !mini.ptr<i32> to !mini.ptr<i32>
    %7756 = "mini.field_access"(%7753) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    %7757 = "mini.unwrap"(%7756) : (!mini.ptr<i32>) -> i32
    %7758 = "mini.unwrap"(%7755) : (!mini.ptr<i32>) -> i32
    %7759 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "OutOfBounds", "num_data_fields" = 4 : i32} : () -> !mini.fatptr<"OutOfBounds">
    %7760 = "mini.field_access"(%7753) {"offset" = 1 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.ptr<i32>
    %7761 = builtin.unrealized_conversion_cast %7760 : !mini.ptr<i32> to !mini.ptr<i32>
    %7762 = "mini.unwrap"(%7761) : (!mini.ptr<i32>) -> i32
    %7763 = builtin.unrealized_conversion_cast %7755 : !mini.ptr<i32> to !mini.ptr<i32>
    %7764 = "mini.unwrap"(%7763) : (!mini.ptr<i32>) -> i32
    %7765 = "mini.unwrap"(%7759) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7766 = "mini.field_access"(%7753) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.reified_type
    %7767 = "llvm.load"(%7766) : (!mini.reified_type) -> !llvm.ptr
    %7768 = "mini.parameterization"(%7767) {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : (!llvm.ptr) -> !llvm.ptr
    %7769 = "mini.parameterization"(%7767) {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : (!llvm.ptr) -> !llvm.ptr
    %7770 = "mini.parameterizations_array"(%7768, %7769) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7770, %7765, %7762, %7764) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %7771 = "mini.literal"() {"value" = 774 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7772 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7773 = "mini.create_buffer"(%7772) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %7774 = builtin.unrealized_conversion_cast %7773 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %7775 = "mini.refer"(%7774) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7776 = "mini.literal"() {"typ" = !llvm.array<58 x i8>, "value" = "c:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\tmpvy1dmse8.mini"} : () -> !llvm.ptr
    %7777 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %7778 = "mini.buffer_indexation"(%7775, %7777) {"typ" = !llvm.array<58 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%7778, %7776) {"typ" = !llvm.array<58 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %7779 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7780 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7781 = "mini.unwrap"(%7775) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7782 = "mini.unwrap"(%7779) : (!mini.ptr<i32>) -> i32
    %7783 = "mini.unwrap"(%7780) : (!mini.ptr<i32>) -> i32
    %7784 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %7785 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7786 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7787 = builtin.unrealized_conversion_cast %7775 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %7788 = "mini.unwrap"(%7787) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7789 = builtin.unrealized_conversion_cast %7785 : !mini.ptr<i32> to !mini.ptr<i32>
    %7790 = "mini.unwrap"(%7789) : (!mini.ptr<i32>) -> i32
    %7791 = builtin.unrealized_conversion_cast %7786 : !mini.ptr<i32> to !mini.ptr<i32>
    %7792 = "mini.unwrap"(%7791) : (!mini.ptr<i32>) -> i32
    %7793 = "mini.unwrap"(%7784) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7794 = "mini.field_access"(%7753) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.reified_type
    %7795 = "llvm.load"(%7794) : (!mini.reified_type) -> !llvm.ptr
    %7796 = "mini.parameterization"(%7795) {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : (!llvm.ptr) -> !llvm.ptr
    %7797 = "mini.parameterization"(%7795) {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : (!llvm.ptr) -> !llvm.ptr
    %7798 = "mini.parameterization"(%7795) {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : (!llvm.ptr) -> !llvm.ptr
    %7799 = "mini.parameterizations_array"(%7796, %7797, %7798) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7799, %7793, %7788, %7790, %7792) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %7800 = builtin.unrealized_conversion_cast %7771 : !mini.ptr<i32> to !mini.ptr<i32>
    %7801 = "mini.unwrap"(%7800) : (!mini.ptr<i32>) -> i32
    %7802 = "mini.to_fat_ptr"(%7784) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %7803 = "mini.unwrap"(%7802) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7804 = "mini.unwrap"(%7759) : (!mini.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7805 = "mini.field_access"(%7753) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.reified_type
    %7806 = "llvm.load"(%7805) : (!mini.reified_type) -> !llvm.ptr
    %7807 = "mini.parameterization"(%7806) {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : (!llvm.ptr) -> !llvm.ptr
    %7808 = "mini.parameterization"(%7806) {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : (!llvm.ptr) -> !llvm.ptr
    %7809 = "mini.parameterizations_array"(%7807, %7808) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7809, %7804, %7801, %7803) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 29 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7810 = builtin.unrealized_conversion_cast %7759 : !mini.fatptr<"OutOfBounds"> to !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>
    %7811 = "mini.unwrap"(%7810) : (!mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7812 = "mini.coro_yield"(%7811) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7813 = "mini.wrap"(%7812) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>
  }) {"func_name" = "Array_throw_oob_xPtri32", "result_type" = !llvm.void, "yield_type" = !mini.fatptr<"OutOfBounds">} : () -> ()
  "mini.func"() ({
  ^bb837(%7814 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7815 : !llvm.ptr, %7816 : i32):
    %7817 = "mini.invariant"(%7815) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7818 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb838] : () -> ()
  ^bb839:
    %7819 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
    "llvm.store"(%7819, %7818) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb840] : () -> ()
  ^bb838:
    %7820 = "llvm.getelementptr"(%7815) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7821 = "llvm.load"(%7820) : (!llvm.ptr) -> !llvm.ptr
    %7822 = "llvm.getelementptr"(%7821) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7823 = "llvm.getelementptr"(%7821) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7824 = "llvm.getelementptr"(%7821) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7825 = "llvm.getelementptr"(%7821) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7826 = "llvm.load"(%7822) : (!llvm.ptr) -> i64
    %7827 = "llvm.load"(%7823) : (!llvm.ptr) -> i64
    %7828 = "llvm.load"(%7824) : (!llvm.ptr) -> !llvm.ptr
    %7829 = "llvm.load"(%7825) : (!llvm.ptr) -> !llvm.ptr
    %7830 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %7831 = "llvm.ptrtoint"(%7830) : (!llvm.ptr) -> i64
    %7832 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %7833 = "mini.subtype"(%7828, %7827, %7826, %7832, %7831, %7829) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7833) [^bb839, ^bb839] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb840:
    %7834 = "llvm.extractvalue"(%7814) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7835 = "llvm.load"(%7818) : (!llvm.ptr) -> i32
    %7836 = "llvm.getelementptr"(%7834, %7835) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7837 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7838 = "llvm.getelementptr"(%7836, %7837) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7838) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_throw_oob_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb841(%7839 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7840 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7841 : !llvm.ptr, %7842 : i32):
    %7843 = "mini.wrap"(%7839) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7844 = "mini.to_fat_ptr"(%7843) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7845 = "mini.wrap"(%7842) : (i32) -> !mini.ptr<i32>
    %7846 = builtin.unrealized_conversion_cast %7845 : !mini.ptr<i32> to !mini.ptr<i32>
    %7847 = "mini.field_access"(%7844) {"offset" = 0 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.buffer<!mini.fatptr<"T">>
    %7848 = "mini.buffer_indexation"(%7847, %7846) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.fatptr<"T">>, !mini.ptr<i32>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
    %7849 = "mini.to_fat_ptr"(%7848) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Array">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
    "mini.return"(%7849) : (!mini.type_param<"T", !mini.fatptr<"Object">, "Array">) -> ()
  }) {"func_name" = "Array_unsafe_index_xPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb842(%7850 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7851 : !llvm.ptr, %7852 : i32):
    %7853 = "mini.invariant"(%7851) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7854 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb843] : () -> ()
  ^bb844:
    %7855 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
    "llvm.store"(%7855, %7854) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb845] : () -> ()
  ^bb843:
    %7856 = "llvm.getelementptr"(%7851) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7857 = "llvm.load"(%7856) : (!llvm.ptr) -> !llvm.ptr
    %7858 = "llvm.getelementptr"(%7857) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7859 = "llvm.getelementptr"(%7857) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7860 = "llvm.getelementptr"(%7857) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7861 = "llvm.getelementptr"(%7857) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7862 = "llvm.load"(%7858) : (!llvm.ptr) -> i64
    %7863 = "llvm.load"(%7859) : (!llvm.ptr) -> i64
    %7864 = "llvm.load"(%7860) : (!llvm.ptr) -> !llvm.ptr
    %7865 = "llvm.load"(%7861) : (!llvm.ptr) -> !llvm.ptr
    %7866 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %7867 = "llvm.ptrtoint"(%7866) : (!llvm.ptr) -> i64
    %7868 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %7869 = "mini.subtype"(%7864, %7863, %7862, %7868, %7867, %7865) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7869) [^bb844, ^bb844] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb845:
    %7870 = "llvm.extractvalue"(%7850) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7871 = "llvm.load"(%7854) : (!llvm.ptr) -> i32
    %7872 = "llvm.getelementptr"(%7870, %7871) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7873 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7874 = "llvm.getelementptr"(%7872, %7873) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7874) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_unsafe_index_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb846(%7875 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7876 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7877 : !llvm.ptr):
    %7878 = "mini.wrap"(%7875) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7879 = "mini.to_fat_ptr"(%7878) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7880 = "mini.unwrap"(%7879) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7881 = "mini.field_access"(%7879) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.reified_type
    %7882 = "llvm.load"(%7881) : (!mini.reified_type) -> !llvm.ptr
    %7883 = "mini.parameterization"(%7882) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["Array.T_subtype_Object"]} : (!llvm.ptr) -> !llvm.ptr
    %7884 = "mini.new"(%7883) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.ptr)>, "class_name" = "ArrayIterator", "num_data_fields" = 2 : i32, "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>
    %7885 = "mini.to_fat_ptr"(%7879) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>
    %7886 = "mini.unwrap"(%7885) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7887 = "mini.unwrap"(%7884) : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7888 = "mini.field_access"(%7879) {"offset" = 3 : i64, "vtable_bytes" = 552 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.reified_type
    %7889 = "llvm.load"(%7888) : (!mini.reified_type) -> !llvm.ptr
    %7890 = "mini.parameterization"(%7889) {"id_hierarchy" = ["Array", [0 : i32]], "name_hierarchy" = ["ArrayArray.T_subtype_Object", ["Array.T_subtype_Object"]]} : (!llvm.ptr) -> !llvm.ptr
    %7891 = "mini.parameterizations_array"(%7890) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7891, %7887, %7886) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7892 = "mini.to_fat_ptr"(%7884) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "Array">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.return"(%7892) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> ()
  }) {"func_name" = "Array_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb847(%7893 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7894 : !llvm.ptr):
    %7895 = "mini.invariant"(%7894) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7896 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb848] : () -> ()
  ^bb848:
    %7897 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
    "llvm.store"(%7897, %7896) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb849] : () -> ()
  ^bb849:
    %7898 = "llvm.extractvalue"(%7893) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7899 = "llvm.load"(%7896) : (!llvm.ptr) -> i32
    %7900 = "llvm.getelementptr"(%7898, %7899) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7901 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7902 = "llvm.getelementptr"(%7900, %7901) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7902) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb850(%7903 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7904 : !llvm.ptr, %7905 : !llvm.struct<(!llvm.ptr)>):
    %7906 = "mini.invariant"(%7904) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7907 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb851] : () -> ()
  ^bb852:
    %7908 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
    "llvm.store"(%7908, %7907) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb853] : () -> ()
  ^bb851:
    %7909 = "llvm.getelementptr"(%7904) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7910 = "llvm.load"(%7909) : (!llvm.ptr) -> !llvm.ptr
    %7911 = "llvm.getelementptr"(%7910) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7912 = "llvm.getelementptr"(%7910) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7913 = "llvm.getelementptr"(%7910) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7914 = "llvm.getelementptr"(%7910) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7915 = "llvm.load"(%7911) : (!llvm.ptr) -> i64
    %7916 = "llvm.load"(%7912) : (!llvm.ptr) -> i64
    %7917 = "llvm.load"(%7913) : (!llvm.ptr) -> !llvm.ptr
    %7918 = "llvm.load"(%7914) : (!llvm.ptr) -> !llvm.ptr
    %7919 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %7920 = "llvm.ptrtoint"(%7919) : (!llvm.ptr) -> i64
    %7921 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %7922 = "mini.subtype"(%7917, %7916, %7915, %7921, %7920, %7918) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7922) [^bb852, ^bb852] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb853:
    %7923 = "llvm.extractvalue"(%7903) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7924 = "llvm.load"(%7907) : (!llvm.ptr) -> i32
    %7925 = "llvm.getelementptr"(%7923, %7924) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7926 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7927 = "llvm.getelementptr"(%7925, %7926) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7927) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb854(%7928 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7929 : !llvm.ptr, %7930 : !llvm.struct<(!llvm.ptr, i160)>, %7931 : !llvm.struct<(!llvm.ptr)>):
    %7932 = "mini.invariant"(%7929) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7933 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb855] : () -> ()
  ^bb856:
    %7934 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
    "llvm.store"(%7934, %7933) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb857] : () -> ()
  ^bb858:
    %7935 = "llvm.getelementptr"(%7929) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7936 = "llvm.load"(%7935) : (!llvm.ptr) -> !llvm.ptr
    %7937 = "llvm.getelementptr"(%7936) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7938 = "llvm.getelementptr"(%7936) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7939 = "llvm.getelementptr"(%7936) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7940 = "llvm.getelementptr"(%7936) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7941 = "llvm.load"(%7937) : (!llvm.ptr) -> i64
    %7942 = "llvm.load"(%7938) : (!llvm.ptr) -> i64
    %7943 = "llvm.load"(%7939) : (!llvm.ptr) -> !llvm.ptr
    %7944 = "llvm.load"(%7940) : (!llvm.ptr) -> !llvm.ptr
    %7945 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %7946 = "llvm.ptrtoint"(%7945) : (!llvm.ptr) -> i64
    %7947 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %7948 = "mini.subtype"(%7943, %7942, %7941, %7947, %7946, %7944) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7948) [^bb856, ^bb856] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb855:
    %7949 = "llvm.getelementptr"(%7929) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7950 = "llvm.load"(%7949) : (!llvm.ptr) -> !llvm.ptr
    %7951 = "llvm.getelementptr"(%7950) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7952 = "llvm.getelementptr"(%7950) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7953 = "llvm.getelementptr"(%7950) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7954 = "llvm.getelementptr"(%7950) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7955 = "llvm.load"(%7951) : (!llvm.ptr) -> i64
    %7956 = "llvm.load"(%7952) : (!llvm.ptr) -> i64
    %7957 = "llvm.load"(%7953) : (!llvm.ptr) -> !llvm.ptr
    %7958 = "llvm.load"(%7954) : (!llvm.ptr) -> !llvm.ptr
    %7959 = "mini.addr_of"() {"global_name" = @Object} : () -> !llvm.ptr
    %7960 = "llvm.ptrtoint"(%7959) : (!llvm.ptr) -> i64
    %7961 = "llvm.mlir.constant"() <{"value" = 3282773614056351330 : i64}> : () -> i64
    %7962 = "mini.subtype"(%7957, %7956, %7955, %7961, %7960, %7958) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7962) [^bb858, ^bb858] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb857:
    %7963 = "llvm.extractvalue"(%7928) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7964 = "llvm.load"(%7933) : (!llvm.ptr) -> i32
    %7965 = "llvm.getelementptr"(%7963, %7964) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7966 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7967 = "llvm.getelementptr"(%7965, %7966) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7967) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb859(%7968 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7969 : !llvm.ptr, %7970 : !llvm.struct<(!llvm.ptr)>):
    %7971 = "mini.invariant"(%7969) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7972 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb860] : () -> ()
  ^bb861:
    %7973 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
    "llvm.store"(%7973, %7972) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb862] : () -> ()
  ^bb860:
    %7974 = "llvm.getelementptr"(%7969) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %7975 = "llvm.load"(%7974) : (!llvm.ptr) -> !llvm.ptr
    %7976 = "llvm.getelementptr"(%7975) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7977 = "llvm.getelementptr"(%7975) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7978 = "llvm.getelementptr"(%7975) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7979 = "llvm.getelementptr"(%7975) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7980 = "llvm.load"(%7976) : (!llvm.ptr) -> i64
    %7981 = "llvm.load"(%7977) : (!llvm.ptr) -> i64
    %7982 = "llvm.load"(%7978) : (!llvm.ptr) -> !llvm.ptr
    %7983 = "llvm.load"(%7979) : (!llvm.ptr) -> !llvm.ptr
    %7984 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %7985 = "llvm.ptrtoint"(%7984) : (!llvm.ptr) -> i64
    %7986 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %7987 = "mini.subtype"(%7982, %7981, %7980, %7986, %7985, %7983) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%7987) [^bb861, ^bb861] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb862:
    %7988 = "llvm.extractvalue"(%7968) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7989 = "llvm.load"(%7972) : (!llvm.ptr) -> i32
    %7990 = "llvm.getelementptr"(%7988, %7989) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7991 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %7992 = "llvm.getelementptr"(%7990, %7991) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7992) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb863(%7993 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7994 : !llvm.ptr, %7995 : !llvm.struct<(!llvm.ptr)>):
    %7996 = "mini.invariant"(%7994) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7997 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb864] : () -> ()
  ^bb865:
    %7998 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
    "llvm.store"(%7998, %7997) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb866] : () -> ()
  ^bb864:
    %7999 = "llvm.getelementptr"(%7994) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8000 = "llvm.load"(%7999) : (!llvm.ptr) -> !llvm.ptr
    %8001 = "llvm.getelementptr"(%8000) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8002 = "llvm.getelementptr"(%8000) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8003 = "llvm.getelementptr"(%8000) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8004 = "llvm.getelementptr"(%8000) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8005 = "llvm.load"(%8001) : (!llvm.ptr) -> i64
    %8006 = "llvm.load"(%8002) : (!llvm.ptr) -> i64
    %8007 = "llvm.load"(%8003) : (!llvm.ptr) -> !llvm.ptr
    %8008 = "llvm.load"(%8004) : (!llvm.ptr) -> !llvm.ptr
    %8009 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8010 = "llvm.ptrtoint"(%8009) : (!llvm.ptr) -> i64
    %8011 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8012 = "mini.subtype"(%8007, %8006, %8005, %8011, %8010, %8008) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8012) [^bb865, ^bb865] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb866:
    %8013 = "llvm.extractvalue"(%7993) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8014 = "llvm.load"(%7997) : (!llvm.ptr) -> i32
    %8015 = "llvm.getelementptr"(%8013, %8014) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8016 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8017 = "llvm.getelementptr"(%8015, %8016) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8017) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb867(%8018 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8019 : !llvm.ptr, %8020 : !llvm.struct<(!llvm.ptr)>):
    %8021 = "mini.invariant"(%8019) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8022 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb868] : () -> ()
  ^bb869:
    %8023 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
    "llvm.store"(%8023, %8022) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb870] : () -> ()
  ^bb868:
    %8024 = "llvm.getelementptr"(%8019) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8025 = "llvm.load"(%8024) : (!llvm.ptr) -> !llvm.ptr
    %8026 = "llvm.getelementptr"(%8025) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8027 = "llvm.getelementptr"(%8025) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8028 = "llvm.getelementptr"(%8025) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8029 = "llvm.getelementptr"(%8025) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8030 = "llvm.load"(%8026) : (!llvm.ptr) -> i64
    %8031 = "llvm.load"(%8027) : (!llvm.ptr) -> i64
    %8032 = "llvm.load"(%8028) : (!llvm.ptr) -> !llvm.ptr
    %8033 = "llvm.load"(%8029) : (!llvm.ptr) -> !llvm.ptr
    %8034 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8035 = "llvm.ptrtoint"(%8034) : (!llvm.ptr) -> i64
    %8036 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8037 = "mini.subtype"(%8032, %8031, %8030, %8036, %8035, %8033) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8037) [^bb869, ^bb869] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb870:
    %8038 = "llvm.extractvalue"(%8018) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8039 = "llvm.load"(%8022) : (!llvm.ptr) -> i32
    %8040 = "llvm.getelementptr"(%8038, %8039) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8041 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8042 = "llvm.getelementptr"(%8040, %8041) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8042) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb871(%8043 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8044 : !llvm.ptr, %8045 : !llvm.struct<(!llvm.ptr)>):
    %8046 = "mini.invariant"(%8044) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8047 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb872] : () -> ()
  ^bb873:
    %8048 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
    "llvm.store"(%8048, %8047) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb874] : () -> ()
  ^bb872:
    %8049 = "llvm.getelementptr"(%8044) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8050 = "llvm.load"(%8049) : (!llvm.ptr) -> !llvm.ptr
    %8051 = "llvm.getelementptr"(%8050) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8052 = "llvm.getelementptr"(%8050) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8053 = "llvm.getelementptr"(%8050) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8054 = "llvm.getelementptr"(%8050) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8055 = "llvm.load"(%8051) : (!llvm.ptr) -> i64
    %8056 = "llvm.load"(%8052) : (!llvm.ptr) -> i64
    %8057 = "llvm.load"(%8053) : (!llvm.ptr) -> !llvm.ptr
    %8058 = "llvm.load"(%8054) : (!llvm.ptr) -> !llvm.ptr
    %8059 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8060 = "llvm.ptrtoint"(%8059) : (!llvm.ptr) -> i64
    %8061 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8062 = "mini.subtype"(%8057, %8056, %8055, %8061, %8060, %8058) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8062) [^bb873, ^bb873] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb874:
    %8063 = "llvm.extractvalue"(%8043) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8064 = "llvm.load"(%8047) : (!llvm.ptr) -> i32
    %8065 = "llvm.getelementptr"(%8063, %8064) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8066 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8067 = "llvm.getelementptr"(%8065, %8066) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8067) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb875(%8068 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8069 : !llvm.ptr, %8070 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8071 = "mini.invariant"(%8069) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8072 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb876] : () -> ()
  ^bb877:
    %8073 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
    "llvm.store"(%8073, %8072) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb878] : () -> ()
  ^bb876:
    %8074 = "llvm.getelementptr"(%8069) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8075 = "llvm.load"(%8074) : (!llvm.ptr) -> !llvm.ptr
    %8076 = "llvm.getelementptr"(%8075) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8077 = "llvm.getelementptr"(%8075) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8078 = "llvm.getelementptr"(%8075) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8079 = "llvm.getelementptr"(%8075) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8080 = "llvm.load"(%8076) : (!llvm.ptr) -> i64
    %8081 = "llvm.load"(%8077) : (!llvm.ptr) -> i64
    %8082 = "llvm.load"(%8078) : (!llvm.ptr) -> !llvm.ptr
    %8083 = "llvm.load"(%8079) : (!llvm.ptr) -> !llvm.ptr
    %8084 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8085 = "llvm.ptrtoint"(%8084) : (!llvm.ptr) -> i64
    %8086 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8087 = "mini.subtype"(%8082, %8081, %8080, %8086, %8085, %8083) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8087) [^bb877, ^bb877] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb878:
    %8088 = "llvm.extractvalue"(%8068) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8089 = "llvm.load"(%8072) : (!llvm.ptr) -> i32
    %8090 = "llvm.getelementptr"(%8088, %8089) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8091 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8092 = "llvm.getelementptr"(%8090, %8091) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8092) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb879(%8093 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8094 : !llvm.ptr, %8095 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8096 = "mini.invariant"(%8094) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8097 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb880] : () -> ()
  ^bb881:
    %8098 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
    "llvm.store"(%8098, %8097) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb882] : () -> ()
  ^bb880:
    %8099 = "llvm.getelementptr"(%8094) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8100 = "llvm.load"(%8099) : (!llvm.ptr) -> !llvm.ptr
    %8101 = "llvm.getelementptr"(%8100) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8102 = "llvm.getelementptr"(%8100) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8103 = "llvm.getelementptr"(%8100) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8104 = "llvm.getelementptr"(%8100) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8105 = "llvm.load"(%8101) : (!llvm.ptr) -> i64
    %8106 = "llvm.load"(%8102) : (!llvm.ptr) -> i64
    %8107 = "llvm.load"(%8103) : (!llvm.ptr) -> !llvm.ptr
    %8108 = "llvm.load"(%8104) : (!llvm.ptr) -> !llvm.ptr
    %8109 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8110 = "llvm.ptrtoint"(%8109) : (!llvm.ptr) -> i64
    %8111 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8112 = "mini.subtype"(%8107, %8106, %8105, %8111, %8110, %8108) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8112) [^bb881, ^bb881] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb882:
    %8113 = "llvm.extractvalue"(%8093) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8114 = "llvm.load"(%8097) : (!llvm.ptr) -> i32
    %8115 = "llvm.getelementptr"(%8113, %8114) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8116 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8117 = "llvm.getelementptr"(%8115, %8116) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8117) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb883(%8118 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8119 : !llvm.ptr, %8120 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8121 = "mini.invariant"(%8119) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8122 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb884] : () -> ()
  ^bb885:
    %8123 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
    "llvm.store"(%8123, %8122) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb886] : () -> ()
  ^bb884:
    %8124 = "llvm.getelementptr"(%8119) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8125 = "llvm.load"(%8124) : (!llvm.ptr) -> !llvm.ptr
    %8126 = "llvm.getelementptr"(%8125) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8127 = "llvm.getelementptr"(%8125) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8128 = "llvm.getelementptr"(%8125) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8129 = "llvm.getelementptr"(%8125) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8130 = "llvm.load"(%8126) : (!llvm.ptr) -> i64
    %8131 = "llvm.load"(%8127) : (!llvm.ptr) -> i64
    %8132 = "llvm.load"(%8128) : (!llvm.ptr) -> !llvm.ptr
    %8133 = "llvm.load"(%8129) : (!llvm.ptr) -> !llvm.ptr
    %8134 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8135 = "llvm.ptrtoint"(%8134) : (!llvm.ptr) -> i64
    %8136 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8137 = "mini.subtype"(%8132, %8131, %8130, %8136, %8135, %8133) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8137) [^bb885, ^bb885] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb886:
    %8138 = "llvm.extractvalue"(%8118) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8139 = "llvm.load"(%8122) : (!llvm.ptr) -> i32
    %8140 = "llvm.getelementptr"(%8138, %8139) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8141 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8142 = "llvm.getelementptr"(%8140, %8141) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8142) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb887(%8143 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8144 : !llvm.ptr, %8145 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8146 = "mini.invariant"(%8144) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8147 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb888] : () -> ()
  ^bb889:
    %8148 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
    "llvm.store"(%8148, %8147) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb890] : () -> ()
  ^bb888:
    %8149 = "llvm.getelementptr"(%8144) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8150 = "llvm.load"(%8149) : (!llvm.ptr) -> !llvm.ptr
    %8151 = "llvm.getelementptr"(%8150) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8152 = "llvm.getelementptr"(%8150) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8153 = "llvm.getelementptr"(%8150) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8154 = "llvm.getelementptr"(%8150) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8155 = "llvm.load"(%8151) : (!llvm.ptr) -> i64
    %8156 = "llvm.load"(%8152) : (!llvm.ptr) -> i64
    %8157 = "llvm.load"(%8153) : (!llvm.ptr) -> !llvm.ptr
    %8158 = "llvm.load"(%8154) : (!llvm.ptr) -> !llvm.ptr
    %8159 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8160 = "llvm.ptrtoint"(%8159) : (!llvm.ptr) -> i64
    %8161 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8162 = "mini.subtype"(%8157, %8156, %8155, %8161, %8160, %8158) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8162) [^bb889, ^bb889] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb890:
    %8163 = "llvm.extractvalue"(%8143) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8164 = "llvm.load"(%8147) : (!llvm.ptr) -> i32
    %8165 = "llvm.getelementptr"(%8163, %8164) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<69 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8166 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8167 = "llvm.getelementptr"(%8165, %8166) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8167) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "ArrayIterator_field_array"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "ArrayIterator_field_index"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "ArrayIterator_field_ArrayIterator_0"} : () -> ()
  "mini.func"() ({
  ^bb891(%8168 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8169 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8170 : !llvm.ptr, %8171 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8172 = "mini.wrap"(%8168) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>
    %8173 = "mini.to_fat_ptr"(%8172) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator", "invariant"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>
    %8174 = "mini.wrap"(%8171) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>
    %8175 = "mini.to_fat_ptr"(%8174) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>
    %8176 = "mini.field_access"(%8173) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>
    "mini.castassign"(%8176, %8175) ({
      %8177 = "mini.to_fat_ptr"(%8175) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "invariant"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Array", "to_typ_name" = "Array", "should_offset"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>, !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> ()
    %8178 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8179 = "mini.field_access"(%8173) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !mini.ptr<i32>
    "mini.castassign"(%8179, %8178) ({
      %8180 = builtin.unrealized_conversion_cast %8178 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "ArrayIterator_init_arrayArrayT", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb892(%8181 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8182 : !llvm.ptr, %8183 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8184 = "mini.invariant"(%8182) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8185 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb893] : () -> ()
  ^bb894:
    %8186 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%8186, %8185) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb895] : () -> ()
  ^bb893:
    %8187 = "llvm.getelementptr"(%8182) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8188 = "llvm.load"(%8187) : (!llvm.ptr) -> !llvm.ptr
    %8189 = "llvm.getelementptr"(%8188) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8190 = "llvm.getelementptr"(%8188) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8191 = "llvm.getelementptr"(%8188) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8192 = "llvm.getelementptr"(%8188) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8193 = "llvm.load"(%8189) : (!llvm.ptr) -> i64
    %8194 = "llvm.load"(%8190) : (!llvm.ptr) -> i64
    %8195 = "llvm.load"(%8191) : (!llvm.ptr) -> !llvm.ptr
    %8196 = "llvm.load"(%8192) : (!llvm.ptr) -> !llvm.ptr
    %8197 = "mini.addr_of"() {"global_name" = @Array} : () -> !llvm.ptr
    %8198 = "llvm.ptrtoint"(%8197) : (!llvm.ptr) -> i64
    %8199 = "llvm.mlir.constant"() <{"value" = 13185201323315417072 : i64}> : () -> i64
    %8200 = "mini.subtype"(%8195, %8194, %8193, %8199, %8198, %8196) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8200) [^bb894, ^bb894] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb895:
    %8201 = "llvm.extractvalue"(%8181) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8202 = "llvm.load"(%8185) : (!llvm.ptr) -> i32
    %8203 = "llvm.getelementptr"(%8201, %8202) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8204 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8205 = "llvm.getelementptr"(%8203, %8204) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8205) : (!llvm.ptr) -> ()
  }) {"func_name" = "ArrayIterator_B_init_arrayArrayT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb896(%8206 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8207 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8208 : !llvm.ptr):
    %8209 = "mini.wrap"(%8206) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>
    %8210 = "mini.to_fat_ptr"(%8209) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator", "invariant"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>
    %8211 = "mini.field_access"(%8210) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !mini.ptr<i32>
    %8212 = "mini.field_access"(%8210) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>
    %8213 = "mini.unwrap"(%8212) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8214 = "mini.field_access"(%8210) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !mini.reified_type
    %8215 = "llvm.load"(%8214) : (!mini.reified_type) -> !llvm.ptr
    %8216 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8217 = "mini.method_call"(%8216, %8213) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 69 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %8218 = builtin.unrealized_conversion_cast %8217 : !mini.ptr<i32> to !mini.ptr<i32>
    %8219 = "mini.unwrap"(%8211) : (!mini.ptr<i32>) -> i32
    %8220 = "mini.unwrap"(%8218) : (!mini.ptr<i32>) -> i32
    %8221 = "mini.comparison"(%8219, %8220) {"op" = "GE"} : (i32, i32) -> i1
    %8222 = "mini.wrap"(%8221) : (i1) -> !mini.ptr<i32>
    %8223 = "mini.unwrap"(%8222) : (!mini.ptr<i32>) -> i1
    "mini.if"(%8223) ({
      %8224 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %8225 = "mini.unionize"(%8224) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
      "mini.return"(%8225) : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %8226 = "mini.field_access"(%8210) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !mini.ptr<i32>
    %8227 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8228 = "mini.unwrap"(%8226) : (!mini.ptr<i32>) -> i32
    %8229 = "mini.unwrap"(%8227) : (!mini.ptr<i32>) -> i32
    %8230 = "mini.arithmetic"(%8228, %8229) {"op" = "ADD"} : (i32, i32) -> i32
    %8231 = "mini.wrap"(%8230) : (i32) -> !mini.ptr<i32>
    %8232 = "mini.field_access"(%8210) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !mini.ptr<i32>
    "mini.castassign"(%8232, %8231) ({
      %8233 = builtin.unrealized_conversion_cast %8231 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8234 = "mini.field_access"(%8210) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !mini.ptr<i32>
    %8235 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8236 = "mini.unwrap"(%8234) : (!mini.ptr<i32>) -> i32
    %8237 = "mini.unwrap"(%8235) : (!mini.ptr<i32>) -> i32
    %8238 = "mini.arithmetic"(%8236, %8237) {"op" = "SUB"} : (i32, i32) -> i32
    %8239 = "mini.wrap"(%8238) : (i32) -> !mini.ptr<i32>
    %8240 = builtin.unrealized_conversion_cast %8239 : !mini.ptr<i32> to !mini.ptr<i32>
    %8241 = "mini.unwrap"(%8240) : (!mini.ptr<i32>) -> i32
    %8242 = "mini.field_access"(%8210) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>
    %8243 = "mini.unwrap"(%8242) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8244 = "mini.field_access"(%8210) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">]>) -> !mini.reified_type
    %8245 = "llvm.load"(%8244) : (!mini.reified_type) -> !llvm.ptr
    %8246 = "mini.parameterization"(%8245) {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : (!llvm.ptr) -> !llvm.ptr
    %8247 = "mini.parameterizations_array"(%8246) : (!llvm.ptr) -> !llvm.ptr
    %8248 = "mini.method_call"(%8247, %8243, %8241) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 69 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Array">
    %8249 = "mini.to_fat_ptr"(%8248) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "Array">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator">
    %8250 = builtin.unrealized_conversion_cast %8249 : !mini.type_param<"T", !mini.fatptr<"Object">, "ArrayIterator"> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
    "mini.return"(%8250) : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "ArrayIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb897(%8251 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8252 : !llvm.ptr):
    %8253 = "mini.invariant"(%8252) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8254 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb898] : () -> ()
  ^bb898:
    %8255 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%8255, %8254) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb899] : () -> ()
  ^bb899:
    %8256 = "llvm.extractvalue"(%8251) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8257 = "llvm.load"(%8254) : (!llvm.ptr) -> i32
    %8258 = "llvm.getelementptr"(%8256, %8257) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8259 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8260 = "llvm.getelementptr"(%8258, %8259) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8260) : (!llvm.ptr) -> ()
  }) {"func_name" = "ArrayIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "MapIterable2_field_iterable"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "MapIterable2_field_f"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "MapIterable2_field_MapIterable2_0"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr, !llvm.ptr)>, "offset" = 3 : i32, "meth_name" = "MapIterable2_field_MapIterable2_1"} : () -> ()
  "mini.func"() ({
  ^bb900(%8261 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8262 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8263 : !llvm.ptr, %8264 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8265 : !llvm.struct<(!llvm.ptr)>):
    %8266 = "mini.wrap"(%8261) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>
    %8267 = "mini.to_fat_ptr"(%8266) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable2", "to_typ_name" = "MapIterable2", "invariant"} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>
    %8268 = "mini.wrap"(%8264) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>
    %8269 = "mini.to_fat_ptr"(%8268) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>
    %8270 = "mini.field_access"(%8267) {"offset" = 0 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>
    "mini.castassign"(%8270, %8269) ({
      %8271 = "mini.to_fat_ptr"(%8269) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "should_offset"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>) -> ()
    %8272 = "mini.wrap"(%8265) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">>
    %8273 = builtin.unrealized_conversion_cast %8272 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">>
    %8274 = "mini.field_access"(%8267) {"offset" = 1 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">>
    "mini.castassign"(%8274, %8273) ({
      %8275 = builtin.unrealized_conversion_cast %8273 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ", "should_offset"} : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">>, !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">>) -> ()
  }) {"func_name" = "MapIterable2_init_iterableIterable2T_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb901(%8276 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8277 : !llvm.ptr, %8278 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8279 : !llvm.struct<(!llvm.ptr)>):
    %8280 = "mini.invariant"(%8277) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8281 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb902] : () -> ()
  ^bb903:
    %8282 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%8282, %8281) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb904] : () -> ()
  ^bb905:
    %8283 = "llvm.getelementptr"(%8277) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8284 = "llvm.load"(%8283) : (!llvm.ptr) -> !llvm.ptr
    %8285 = "llvm.getelementptr"(%8284) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8286 = "llvm.getelementptr"(%8284) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8287 = "llvm.getelementptr"(%8284) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8288 = "llvm.getelementptr"(%8284) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8289 = "llvm.load"(%8285) : (!llvm.ptr) -> i64
    %8290 = "llvm.load"(%8286) : (!llvm.ptr) -> i64
    %8291 = "llvm.load"(%8287) : (!llvm.ptr) -> !llvm.ptr
    %8292 = "llvm.load"(%8288) : (!llvm.ptr) -> !llvm.ptr
    %8293 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8294 = "llvm.ptrtoint"(%8293) : (!llvm.ptr) -> i64
    %8295 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8296 = "mini.subtype"(%8291, %8290, %8289, %8295, %8294, %8292) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8296) [^bb903, ^bb903] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb902:
    %8297 = "llvm.getelementptr"(%8277) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8298 = "llvm.load"(%8297) : (!llvm.ptr) -> !llvm.ptr
    %8299 = "llvm.getelementptr"(%8298) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8300 = "llvm.getelementptr"(%8298) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8301 = "llvm.getelementptr"(%8298) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8302 = "llvm.getelementptr"(%8298) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8303 = "llvm.load"(%8299) : (!llvm.ptr) -> i64
    %8304 = "llvm.load"(%8300) : (!llvm.ptr) -> i64
    %8305 = "llvm.load"(%8301) : (!llvm.ptr) -> !llvm.ptr
    %8306 = "llvm.load"(%8302) : (!llvm.ptr) -> !llvm.ptr
    %8307 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8308 = "llvm.ptrtoint"(%8307) : (!llvm.ptr) -> i64
    %8309 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8310 = "mini.subtype"(%8305, %8304, %8303, %8309, %8308, %8306) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8310) [^bb905, ^bb905] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb904:
    %8311 = "llvm.extractvalue"(%8276) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8312 = "llvm.load"(%8281) : (!llvm.ptr) -> i32
    %8313 = "llvm.getelementptr"(%8311, %8312) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8314 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8315 = "llvm.getelementptr"(%8313, %8314) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8315) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_init_iterableIterable2T_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb906(%8316 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8317 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8318 : !llvm.ptr):
    %8319 = "mini.wrap"(%8316) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>
    %8320 = "mini.to_fat_ptr"(%8319) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterable2", "to_typ_name" = "MapIterable2", "invariant"} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>
    %8321 = "mini.field_access"(%8320) {"offset" = 0 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>
    %8322 = "mini.unwrap"(%8321) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8323 = "mini.field_access"(%8320) {"offset" = 2 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.reified_type
    %8324 = "llvm.load"(%8323) : (!mini.reified_type) -> !llvm.ptr
    %8325 = "mini.field_access"(%8320) {"offset" = 3 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.reified_type
    %8326 = "llvm.load"(%8325) : (!mini.reified_type) -> !llvm.ptr
    %8327 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8328 = "mini.method_call"(%8327, %8322) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %8329 = "mini.to_fat_ptr"(%8328) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>
    %8330 = "mini.field_access"(%8320) {"offset" = 1 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">>
    %8331 = "mini.unwrap"(%8329) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8332 = "mini.unwrap"(%8330) : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">>) -> !llvm.struct<(!llvm.ptr)>
    %8333 = "mini.field_access"(%8320) {"offset" = 2 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.reified_type
    %8334 = "llvm.load"(%8333) : (!mini.reified_type) -> !llvm.ptr
    %8335 = "mini.field_access"(%8320) {"offset" = 3 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.reified_type
    %8336 = "llvm.load"(%8335) : (!mini.reified_type) -> !llvm.ptr
    %8337 = "mini.parameterization"(%8334, %8336) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["MapIterable2.T_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %8338 = "mini.parameterization"(%8334, %8336) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["MapIterable2.U_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %8339 = "mini.new"(%8337, %8338) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr, !llvm.ptr)>, "class_name" = "MapIterator2", "num_data_fields" = 2 : i32, "has_type_fields"} : (!llvm.ptr, !llvm.ptr) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>
    %8340 = "mini.field_access"(%8320) {"offset" = 0 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>
    %8341 = "mini.unwrap"(%8340) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8342 = "mini.field_access"(%8320) {"offset" = 2 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.reified_type
    %8343 = "llvm.load"(%8342) : (!mini.reified_type) -> !llvm.ptr
    %8344 = "mini.field_access"(%8320) {"offset" = 3 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.reified_type
    %8345 = "llvm.load"(%8344) : (!mini.reified_type) -> !llvm.ptr
    %8346 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8347 = "mini.method_call"(%8346, %8341) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %8348 = "mini.to_fat_ptr"(%8347) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>
    %8349 = "mini.field_access"(%8320) {"offset" = 1 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">>
    %8350 = "mini.to_fat_ptr"(%8348) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">]>
    %8351 = "mini.unwrap"(%8350) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8352 = builtin.unrealized_conversion_cast %8349 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">>
    %8353 = "mini.unwrap"(%8352) : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">>) -> !llvm.struct<(!llvm.ptr)>
    %8354 = "mini.unwrap"(%8339) : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8355 = "mini.field_access"(%8320) {"offset" = 2 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.reified_type
    %8356 = "llvm.load"(%8355) : (!mini.reified_type) -> !llvm.ptr
    %8357 = "mini.field_access"(%8320) {"offset" = 3 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.reified_type
    %8358 = "llvm.load"(%8357) : (!mini.reified_type) -> !llvm.ptr
    %8359 = "mini.parameterization"(%8356, %8358) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2MapIterable2.T_subtype_Object", ["MapIterable2.T_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %8360 = "mini.parameterization"(%8356, %8358) {"id_hierarchy" = ["function_typ", [1 : i32], [0 : i32]], "name_hierarchy" = ["FunctionMapIterable2.T_subtype_Object_to_MapIterable2.U_subtype_Object", ["MapIterable2.U_subtype_Object"], ["MapIterable2.T_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %8361 = "mini.parameterizations_array"(%8359, %8360) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8361, %8354, %8351, %8353) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %8362 = "mini.to_fat_ptr"(%8339) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.return"(%8362) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> ()
  }) {"func_name" = "MapIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb907(%8363 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8364 : !llvm.ptr):
    %8365 = "mini.invariant"(%8364) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8366 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb908] : () -> ()
  ^bb908:
    %8367 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%8367, %8366) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb909] : () -> ()
  ^bb909:
    %8368 = "llvm.extractvalue"(%8363) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8369 = "llvm.load"(%8366) : (!llvm.ptr) -> i32
    %8370 = "llvm.getelementptr"(%8368, %8369) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8371 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8372 = "llvm.getelementptr"(%8370, %8371) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8372) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb910(%8373 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8374 : !llvm.ptr, %8375 : !llvm.struct<(!llvm.ptr)>):
    %8376 = "mini.invariant"(%8374) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8377 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb911] : () -> ()
  ^bb912:
    %8378 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%8378, %8377) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb913] : () -> ()
  ^bb911:
    %8379 = "llvm.getelementptr"(%8374) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8380 = "llvm.load"(%8379) : (!llvm.ptr) -> !llvm.ptr
    %8381 = "llvm.getelementptr"(%8380) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8382 = "llvm.getelementptr"(%8380) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8383 = "llvm.getelementptr"(%8380) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8384 = "llvm.getelementptr"(%8380) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8385 = "llvm.load"(%8381) : (!llvm.ptr) -> i64
    %8386 = "llvm.load"(%8382) : (!llvm.ptr) -> i64
    %8387 = "llvm.load"(%8383) : (!llvm.ptr) -> !llvm.ptr
    %8388 = "llvm.load"(%8384) : (!llvm.ptr) -> !llvm.ptr
    %8389 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8390 = "llvm.ptrtoint"(%8389) : (!llvm.ptr) -> i64
    %8391 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8392 = "mini.subtype"(%8387, %8386, %8385, %8391, %8390, %8388) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8392) [^bb912, ^bb912] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb913:
    %8393 = "llvm.extractvalue"(%8373) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8394 = "llvm.load"(%8377) : (!llvm.ptr) -> i32
    %8395 = "llvm.getelementptr"(%8393, %8394) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8396 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8397 = "llvm.getelementptr"(%8395, %8396) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8397) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb914(%8398 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8399 : !llvm.ptr, %8400 : !llvm.struct<(!llvm.ptr, i160)>, %8401 : !llvm.struct<(!llvm.ptr)>):
    %8402 = "mini.invariant"(%8399) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8403 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb915] : () -> ()
  ^bb916:
    %8404 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%8404, %8403) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb917] : () -> ()
  ^bb918:
    %8405 = "llvm.getelementptr"(%8399) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8406 = "llvm.load"(%8405) : (!llvm.ptr) -> !llvm.ptr
    %8407 = "llvm.getelementptr"(%8406) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8408 = "llvm.getelementptr"(%8406) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8409 = "llvm.getelementptr"(%8406) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8410 = "llvm.getelementptr"(%8406) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8411 = "llvm.load"(%8407) : (!llvm.ptr) -> i64
    %8412 = "llvm.load"(%8408) : (!llvm.ptr) -> i64
    %8413 = "llvm.load"(%8409) : (!llvm.ptr) -> !llvm.ptr
    %8414 = "llvm.load"(%8410) : (!llvm.ptr) -> !llvm.ptr
    %8415 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8416 = "llvm.ptrtoint"(%8415) : (!llvm.ptr) -> i64
    %8417 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8418 = "mini.subtype"(%8413, %8412, %8411, %8417, %8416, %8414) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8418) [^bb916, ^bb916] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb915:
    %8419 = "llvm.getelementptr"(%8399) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8420 = "llvm.load"(%8419) : (!llvm.ptr) -> !llvm.ptr
    %8421 = "llvm.getelementptr"(%8420) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8422 = "llvm.getelementptr"(%8420) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8423 = "llvm.getelementptr"(%8420) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8424 = "llvm.getelementptr"(%8420) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8425 = "llvm.load"(%8421) : (!llvm.ptr) -> i64
    %8426 = "llvm.load"(%8422) : (!llvm.ptr) -> i64
    %8427 = "llvm.load"(%8423) : (!llvm.ptr) -> !llvm.ptr
    %8428 = "llvm.load"(%8424) : (!llvm.ptr) -> !llvm.ptr
    %8429 = "mini.addr_of"() {"global_name" = @Object} : () -> !llvm.ptr
    %8430 = "llvm.ptrtoint"(%8429) : (!llvm.ptr) -> i64
    %8431 = "llvm.mlir.constant"() <{"value" = 3282773614056351330 : i64}> : () -> i64
    %8432 = "mini.subtype"(%8427, %8426, %8425, %8431, %8430, %8428) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8432) [^bb918, ^bb918] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb917:
    %8433 = "llvm.extractvalue"(%8398) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8434 = "llvm.load"(%8403) : (!llvm.ptr) -> i32
    %8435 = "llvm.getelementptr"(%8433, %8434) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8436 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8437 = "llvm.getelementptr"(%8435, %8436) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8437) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb919(%8438 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8439 : !llvm.ptr, %8440 : !llvm.struct<(!llvm.ptr)>):
    %8441 = "mini.invariant"(%8439) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8442 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb920] : () -> ()
  ^bb921:
    %8443 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%8443, %8442) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb922] : () -> ()
  ^bb920:
    %8444 = "llvm.getelementptr"(%8439) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8445 = "llvm.load"(%8444) : (!llvm.ptr) -> !llvm.ptr
    %8446 = "llvm.getelementptr"(%8445) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8447 = "llvm.getelementptr"(%8445) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8448 = "llvm.getelementptr"(%8445) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8449 = "llvm.getelementptr"(%8445) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8450 = "llvm.load"(%8446) : (!llvm.ptr) -> i64
    %8451 = "llvm.load"(%8447) : (!llvm.ptr) -> i64
    %8452 = "llvm.load"(%8448) : (!llvm.ptr) -> !llvm.ptr
    %8453 = "llvm.load"(%8449) : (!llvm.ptr) -> !llvm.ptr
    %8454 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8455 = "llvm.ptrtoint"(%8454) : (!llvm.ptr) -> i64
    %8456 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8457 = "mini.subtype"(%8452, %8451, %8450, %8456, %8455, %8453) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8457) [^bb921, ^bb921] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb922:
    %8458 = "llvm.extractvalue"(%8438) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8459 = "llvm.load"(%8442) : (!llvm.ptr) -> i32
    %8460 = "llvm.getelementptr"(%8458, %8459) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8461 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8462 = "llvm.getelementptr"(%8460, %8461) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8462) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb923(%8463 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8464 : !llvm.ptr, %8465 : !llvm.struct<(!llvm.ptr)>):
    %8466 = "mini.invariant"(%8464) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8467 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb924] : () -> ()
  ^bb925:
    %8468 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%8468, %8467) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb926] : () -> ()
  ^bb924:
    %8469 = "llvm.getelementptr"(%8464) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8470 = "llvm.load"(%8469) : (!llvm.ptr) -> !llvm.ptr
    %8471 = "llvm.getelementptr"(%8470) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8472 = "llvm.getelementptr"(%8470) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8473 = "llvm.getelementptr"(%8470) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8474 = "llvm.getelementptr"(%8470) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8475 = "llvm.load"(%8471) : (!llvm.ptr) -> i64
    %8476 = "llvm.load"(%8472) : (!llvm.ptr) -> i64
    %8477 = "llvm.load"(%8473) : (!llvm.ptr) -> !llvm.ptr
    %8478 = "llvm.load"(%8474) : (!llvm.ptr) -> !llvm.ptr
    %8479 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8480 = "llvm.ptrtoint"(%8479) : (!llvm.ptr) -> i64
    %8481 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8482 = "mini.subtype"(%8477, %8476, %8475, %8481, %8480, %8478) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8482) [^bb925, ^bb925] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb926:
    %8483 = "llvm.extractvalue"(%8463) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8484 = "llvm.load"(%8467) : (!llvm.ptr) -> i32
    %8485 = "llvm.getelementptr"(%8483, %8484) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8486 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8487 = "llvm.getelementptr"(%8485, %8486) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8487) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb927(%8488 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8489 : !llvm.ptr, %8490 : !llvm.struct<(!llvm.ptr)>):
    %8491 = "mini.invariant"(%8489) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8492 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb928] : () -> ()
  ^bb929:
    %8493 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%8493, %8492) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb930] : () -> ()
  ^bb928:
    %8494 = "llvm.getelementptr"(%8489) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8495 = "llvm.load"(%8494) : (!llvm.ptr) -> !llvm.ptr
    %8496 = "llvm.getelementptr"(%8495) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8497 = "llvm.getelementptr"(%8495) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8498 = "llvm.getelementptr"(%8495) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8499 = "llvm.getelementptr"(%8495) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8500 = "llvm.load"(%8496) : (!llvm.ptr) -> i64
    %8501 = "llvm.load"(%8497) : (!llvm.ptr) -> i64
    %8502 = "llvm.load"(%8498) : (!llvm.ptr) -> !llvm.ptr
    %8503 = "llvm.load"(%8499) : (!llvm.ptr) -> !llvm.ptr
    %8504 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8505 = "llvm.ptrtoint"(%8504) : (!llvm.ptr) -> i64
    %8506 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8507 = "mini.subtype"(%8502, %8501, %8500, %8506, %8505, %8503) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8507) [^bb929, ^bb929] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb930:
    %8508 = "llvm.extractvalue"(%8488) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8509 = "llvm.load"(%8492) : (!llvm.ptr) -> i32
    %8510 = "llvm.getelementptr"(%8508, %8509) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8511 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8512 = "llvm.getelementptr"(%8510, %8511) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8512) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb931(%8513 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8514 : !llvm.ptr, %8515 : !llvm.struct<(!llvm.ptr)>):
    %8516 = "mini.invariant"(%8514) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8517 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb932] : () -> ()
  ^bb933:
    %8518 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%8518, %8517) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb934] : () -> ()
  ^bb932:
    %8519 = "llvm.getelementptr"(%8514) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8520 = "llvm.load"(%8519) : (!llvm.ptr) -> !llvm.ptr
    %8521 = "llvm.getelementptr"(%8520) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8522 = "llvm.getelementptr"(%8520) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8523 = "llvm.getelementptr"(%8520) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8524 = "llvm.getelementptr"(%8520) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8525 = "llvm.load"(%8521) : (!llvm.ptr) -> i64
    %8526 = "llvm.load"(%8522) : (!llvm.ptr) -> i64
    %8527 = "llvm.load"(%8523) : (!llvm.ptr) -> !llvm.ptr
    %8528 = "llvm.load"(%8524) : (!llvm.ptr) -> !llvm.ptr
    %8529 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8530 = "llvm.ptrtoint"(%8529) : (!llvm.ptr) -> i64
    %8531 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8532 = "mini.subtype"(%8527, %8526, %8525, %8531, %8530, %8528) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8532) [^bb933, ^bb933] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb934:
    %8533 = "llvm.extractvalue"(%8513) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8534 = "llvm.load"(%8517) : (!llvm.ptr) -> i32
    %8535 = "llvm.getelementptr"(%8533, %8534) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8536 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8537 = "llvm.getelementptr"(%8535, %8536) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8537) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb935(%8538 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8539 : !llvm.ptr, %8540 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8541 = "mini.invariant"(%8539) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8542 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb936] : () -> ()
  ^bb937:
    %8543 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%8543, %8542) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb938] : () -> ()
  ^bb936:
    %8544 = "llvm.getelementptr"(%8539) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8545 = "llvm.load"(%8544) : (!llvm.ptr) -> !llvm.ptr
    %8546 = "llvm.getelementptr"(%8545) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8547 = "llvm.getelementptr"(%8545) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8548 = "llvm.getelementptr"(%8545) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8549 = "llvm.getelementptr"(%8545) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8550 = "llvm.load"(%8546) : (!llvm.ptr) -> i64
    %8551 = "llvm.load"(%8547) : (!llvm.ptr) -> i64
    %8552 = "llvm.load"(%8548) : (!llvm.ptr) -> !llvm.ptr
    %8553 = "llvm.load"(%8549) : (!llvm.ptr) -> !llvm.ptr
    %8554 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8555 = "llvm.ptrtoint"(%8554) : (!llvm.ptr) -> i64
    %8556 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8557 = "mini.subtype"(%8552, %8551, %8550, %8556, %8555, %8553) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8557) [^bb937, ^bb937] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb938:
    %8558 = "llvm.extractvalue"(%8538) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8559 = "llvm.load"(%8542) : (!llvm.ptr) -> i32
    %8560 = "llvm.getelementptr"(%8558, %8559) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8561 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8562 = "llvm.getelementptr"(%8560, %8561) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8562) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb939(%8563 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8564 : !llvm.ptr, %8565 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8566 = "mini.invariant"(%8564) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8567 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb940] : () -> ()
  ^bb941:
    %8568 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%8568, %8567) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb942] : () -> ()
  ^bb940:
    %8569 = "llvm.getelementptr"(%8564) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8570 = "llvm.load"(%8569) : (!llvm.ptr) -> !llvm.ptr
    %8571 = "llvm.getelementptr"(%8570) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8572 = "llvm.getelementptr"(%8570) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8573 = "llvm.getelementptr"(%8570) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8574 = "llvm.getelementptr"(%8570) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8575 = "llvm.load"(%8571) : (!llvm.ptr) -> i64
    %8576 = "llvm.load"(%8572) : (!llvm.ptr) -> i64
    %8577 = "llvm.load"(%8573) : (!llvm.ptr) -> !llvm.ptr
    %8578 = "llvm.load"(%8574) : (!llvm.ptr) -> !llvm.ptr
    %8579 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8580 = "llvm.ptrtoint"(%8579) : (!llvm.ptr) -> i64
    %8581 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8582 = "mini.subtype"(%8577, %8576, %8575, %8581, %8580, %8578) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8582) [^bb941, ^bb941] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb942:
    %8583 = "llvm.extractvalue"(%8563) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8584 = "llvm.load"(%8567) : (!llvm.ptr) -> i32
    %8585 = "llvm.getelementptr"(%8583, %8584) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8586 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8587 = "llvm.getelementptr"(%8585, %8586) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8587) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb943(%8588 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8589 : !llvm.ptr, %8590 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8591 = "mini.invariant"(%8589) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8592 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb944] : () -> ()
  ^bb945:
    %8593 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%8593, %8592) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb946] : () -> ()
  ^bb944:
    %8594 = "llvm.getelementptr"(%8589) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8595 = "llvm.load"(%8594) : (!llvm.ptr) -> !llvm.ptr
    %8596 = "llvm.getelementptr"(%8595) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8597 = "llvm.getelementptr"(%8595) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8598 = "llvm.getelementptr"(%8595) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8599 = "llvm.getelementptr"(%8595) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8600 = "llvm.load"(%8596) : (!llvm.ptr) -> i64
    %8601 = "llvm.load"(%8597) : (!llvm.ptr) -> i64
    %8602 = "llvm.load"(%8598) : (!llvm.ptr) -> !llvm.ptr
    %8603 = "llvm.load"(%8599) : (!llvm.ptr) -> !llvm.ptr
    %8604 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8605 = "llvm.ptrtoint"(%8604) : (!llvm.ptr) -> i64
    %8606 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8607 = "mini.subtype"(%8602, %8601, %8600, %8606, %8605, %8603) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8607) [^bb945, ^bb945] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb946:
    %8608 = "llvm.extractvalue"(%8588) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8609 = "llvm.load"(%8592) : (!llvm.ptr) -> i32
    %8610 = "llvm.getelementptr"(%8608, %8609) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8611 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8612 = "llvm.getelementptr"(%8610, %8611) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8612) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb947(%8613 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8614 : !llvm.ptr, %8615 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %8616 = "mini.invariant"(%8614) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8617 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb948] : () -> ()
  ^bb949:
    %8618 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%8618, %8617) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb950] : () -> ()
  ^bb948:
    %8619 = "llvm.getelementptr"(%8614) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8620 = "llvm.load"(%8619) : (!llvm.ptr) -> !llvm.ptr
    %8621 = "llvm.getelementptr"(%8620) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8622 = "llvm.getelementptr"(%8620) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8623 = "llvm.getelementptr"(%8620) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8624 = "llvm.getelementptr"(%8620) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8625 = "llvm.load"(%8621) : (!llvm.ptr) -> i64
    %8626 = "llvm.load"(%8622) : (!llvm.ptr) -> i64
    %8627 = "llvm.load"(%8623) : (!llvm.ptr) -> !llvm.ptr
    %8628 = "llvm.load"(%8624) : (!llvm.ptr) -> !llvm.ptr
    %8629 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8630 = "llvm.ptrtoint"(%8629) : (!llvm.ptr) -> i64
    %8631 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8632 = "mini.subtype"(%8627, %8626, %8625, %8631, %8630, %8628) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8632) [^bb949, ^bb949] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb950:
    %8633 = "llvm.extractvalue"(%8613) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8634 = "llvm.load"(%8617) : (!llvm.ptr) -> i32
    %8635 = "llvm.getelementptr"(%8633, %8634) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8636 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8637 = "llvm.getelementptr"(%8635, %8636) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8637) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "MapIterator2_field_iterator"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "MapIterator2_field_f"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "MapIterator2_field_MapIterator2_0"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr, !llvm.ptr)>, "offset" = 3 : i32, "meth_name" = "MapIterator2_field_MapIterator2_1"} : () -> ()
  "mini.func"() ({
  ^bb951(%8638 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8639 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8640 : !llvm.ptr, %8641 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8642 : !llvm.struct<(!llvm.ptr)>):
    %8643 = "mini.wrap"(%8638) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">]>
    %8644 = "mini.to_fat_ptr"(%8643) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator2", "to_typ_name" = "MapIterator2", "invariant"} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">]>) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">]>
    %8645 = "mini.wrap"(%8641) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">]>
    %8646 = "mini.to_fat_ptr"(%8645) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">]>
    %8647 = "mini.field_access"(%8644) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">]>
    "mini.castassign"(%8647, %8646) ({
      %8648 = "mini.to_fat_ptr"(%8646) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "should_offset"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">]>) -> ()
    %8649 = "mini.wrap"(%8642) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">>
    %8650 = builtin.unrealized_conversion_cast %8649 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">>
    %8651 = "mini.field_access"(%8644) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">]>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">>
    "mini.castassign"(%8651, %8650) ({
      %8652 = builtin.unrealized_conversion_cast %8650 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ", "should_offset"} : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">>, !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">>) -> ()
  }) {"func_name" = "MapIterator2_init_iteratorIterator2T_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb952(%8653 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8654 : !llvm.ptr, %8655 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8656 : !llvm.struct<(!llvm.ptr)>):
    %8657 = "mini.invariant"(%8654) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8658 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb953] : () -> ()
  ^bb954:
    %8659 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%8659, %8658) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb955] : () -> ()
  ^bb956:
    %8660 = "llvm.getelementptr"(%8654) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8661 = "llvm.load"(%8660) : (!llvm.ptr) -> !llvm.ptr
    %8662 = "llvm.getelementptr"(%8661) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8663 = "llvm.getelementptr"(%8661) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8664 = "llvm.getelementptr"(%8661) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8665 = "llvm.getelementptr"(%8661) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8666 = "llvm.load"(%8662) : (!llvm.ptr) -> i64
    %8667 = "llvm.load"(%8663) : (!llvm.ptr) -> i64
    %8668 = "llvm.load"(%8664) : (!llvm.ptr) -> !llvm.ptr
    %8669 = "llvm.load"(%8665) : (!llvm.ptr) -> !llvm.ptr
    %8670 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8671 = "llvm.ptrtoint"(%8670) : (!llvm.ptr) -> i64
    %8672 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8673 = "mini.subtype"(%8668, %8667, %8666, %8672, %8671, %8669) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8673) [^bb954, ^bb954] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb953:
    %8674 = "llvm.getelementptr"(%8654) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8675 = "llvm.load"(%8674) : (!llvm.ptr) -> !llvm.ptr
    %8676 = "llvm.getelementptr"(%8675) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8677 = "llvm.getelementptr"(%8675) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8678 = "llvm.getelementptr"(%8675) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8679 = "llvm.getelementptr"(%8675) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8680 = "llvm.load"(%8676) : (!llvm.ptr) -> i64
    %8681 = "llvm.load"(%8677) : (!llvm.ptr) -> i64
    %8682 = "llvm.load"(%8678) : (!llvm.ptr) -> !llvm.ptr
    %8683 = "llvm.load"(%8679) : (!llvm.ptr) -> !llvm.ptr
    %8684 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %8685 = "llvm.ptrtoint"(%8684) : (!llvm.ptr) -> i64
    %8686 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %8687 = "mini.subtype"(%8682, %8681, %8680, %8686, %8685, %8683) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8687) [^bb956, ^bb956] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb955:
    %8688 = "llvm.extractvalue"(%8653) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8689 = "llvm.load"(%8658) : (!llvm.ptr) -> i32
    %8690 = "llvm.getelementptr"(%8688, %8689) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8691 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8692 = "llvm.getelementptr"(%8690, %8691) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8692) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterator2_B_init_iteratorIterator2T_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb957(%8693 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8694 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8695 : !llvm.ptr):
    %8696 = "mini.wrap"(%8693) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">]>
    %8697 = "mini.to_fat_ptr"(%8696) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "MapIterator2", "to_typ_name" = "MapIterator2", "invariant"} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">]>) -> !mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">]>
    %8698 = "mini.field_access"(%8697) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">]>
    %8699 = "mini.unwrap"(%8698) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8700 = "mini.field_access"(%8697) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">]>) -> !mini.reified_type
    %8701 = "llvm.load"(%8700) : (!mini.reified_type) -> !llvm.ptr
    %8702 = "mini.field_access"(%8697) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">]>) -> !mini.reified_type
    %8703 = "llvm.load"(%8702) : (!mini.reified_type) -> !llvm.ptr
    %8704 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8705 = "mini.method_call"(%8704, %8699) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
    %8706 = builtin.unrealized_conversion_cast %8705 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.nil]>
    %8707 = "mini.checkflag"(%8706) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.nil]>) -> i1
    %8708 = "mini.unwrap"(%8707) : (i1) -> i1
    %8709 = builtin.unrealized_conversion_cast %8706 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.nil]>
    "mini.if"(%8708) ({
      %8710 = "mini.to_fat_ptr"(%8709) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "Object"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.nil]>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">
      %8711 = "mini.to_fat_ptr"(%8710) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">
      %8712 = "mini.unwrap"(%8711) : (!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %8713 = "mini.field_access"(%8697) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"MapIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">]>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">>
      %8714 = "mini.unwrap"(%8713) : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">], !mini.any, !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">>) -> !llvm.ptr
      %8715 = "mini.fptr_call"(%8714, %8712) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2">
      %8716 = builtin.unrealized_conversion_cast %8715 : !mini.type_param<"U", !mini.fatptr<"Object">, "MapIterator2"> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
      "mini.return"(%8716) : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>) -> ()
      "mini.castassign"(%8709, %8710) ({
        %8717 = builtin.unrealized_conversion_cast %8710 : !mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2"> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">, !mini.nil]>, !mini.type_param<"T", !mini.fatptr<"Object">, "MapIterator2">) -> ()
    }) : (i1) -> ()
    %8718 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %8719 = "mini.unionize"(%8718) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
    "mini.return"(%8719) : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "MapIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb958(%8720 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8721 : !llvm.ptr):
    %8722 = "mini.invariant"(%8721) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8723 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb959] : () -> ()
  ^bb959:
    %8724 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%8724, %8723) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb960] : () -> ()
  ^bb960:
    %8725 = "llvm.extractvalue"(%8720) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8726 = "llvm.load"(%8723) : (!llvm.ptr) -> i32
    %8727 = "llvm.getelementptr"(%8725, %8726) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8728 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8729 = "llvm.getelementptr"(%8727, %8728) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8729) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "FilterIterable2_field_iterable"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "FilterIterable2_field_f"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "FilterIterable2_field_FilterIterable2_0"} : () -> ()
  "mini.func"() ({
  ^bb961(%8730 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8731 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8732 : !llvm.ptr, %8733 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8734 : !llvm.struct<(!llvm.ptr)>):
    %8735 = "mini.wrap"(%8730) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>
    %8736 = "mini.to_fat_ptr"(%8735) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable2", "to_typ_name" = "FilterIterable2", "invariant"} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>
    %8737 = "mini.wrap"(%8733) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>
    %8738 = "mini.to_fat_ptr"(%8737) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>
    %8739 = "mini.field_access"(%8736) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>
    "mini.castassign"(%8739, %8738) ({
      %8740 = "mini.to_fat_ptr"(%8738) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "should_offset"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> ()
    %8741 = "mini.wrap"(%8734) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %8742 = builtin.unrealized_conversion_cast %8741 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %8743 = "mini.field_access"(%8736) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    "mini.castassign"(%8743, %8742) ({
      %8744 = builtin.unrealized_conversion_cast %8742 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ", "should_offset"} : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">], !mini.any, !mini.ptr<i1>>, !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">], !mini.any, !mini.ptr<i1>>) -> ()
  }) {"func_name" = "FilterIterable2_init_iterableIterable2T_fFunctionT_to_Ptri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb962(%8745 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8746 : !llvm.ptr, %8747 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8748 : !llvm.struct<(!llvm.ptr)>):
    %8749 = "mini.invariant"(%8746) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8750 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb963] : () -> ()
  ^bb964:
    %8751 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%8751, %8750) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb965] : () -> ()
  ^bb966:
    %8752 = "llvm.getelementptr"(%8746) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8753 = "llvm.load"(%8752) : (!llvm.ptr) -> !llvm.ptr
    %8754 = "llvm.getelementptr"(%8753) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8755 = "llvm.getelementptr"(%8753) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8756 = "llvm.getelementptr"(%8753) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8757 = "llvm.getelementptr"(%8753) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8758 = "llvm.load"(%8754) : (!llvm.ptr) -> i64
    %8759 = "llvm.load"(%8755) : (!llvm.ptr) -> i64
    %8760 = "llvm.load"(%8756) : (!llvm.ptr) -> !llvm.ptr
    %8761 = "llvm.load"(%8757) : (!llvm.ptr) -> !llvm.ptr
    %8762 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8763 = "llvm.ptrtoint"(%8762) : (!llvm.ptr) -> i64
    %8764 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8765 = "mini.subtype"(%8760, %8759, %8758, %8764, %8763, %8761) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8765) [^bb964, ^bb964] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb963:
    %8766 = "llvm.getelementptr"(%8746) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8767 = "llvm.load"(%8766) : (!llvm.ptr) -> !llvm.ptr
    %8768 = "llvm.getelementptr"(%8767) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8769 = "llvm.getelementptr"(%8767) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8770 = "llvm.getelementptr"(%8767) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8771 = "llvm.getelementptr"(%8767) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8772 = "llvm.load"(%8768) : (!llvm.ptr) -> i64
    %8773 = "llvm.load"(%8769) : (!llvm.ptr) -> i64
    %8774 = "llvm.load"(%8770) : (!llvm.ptr) -> !llvm.ptr
    %8775 = "llvm.load"(%8771) : (!llvm.ptr) -> !llvm.ptr
    %8776 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %8777 = "llvm.ptrtoint"(%8776) : (!llvm.ptr) -> i64
    %8778 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %8779 = "mini.subtype"(%8774, %8773, %8772, %8778, %8777, %8775) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8779) [^bb966, ^bb966] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb965:
    %8780 = "llvm.extractvalue"(%8745) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8781 = "llvm.load"(%8750) : (!llvm.ptr) -> i32
    %8782 = "llvm.getelementptr"(%8780, %8781) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8783 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8784 = "llvm.getelementptr"(%8782, %8783) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8784) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_init_iterableIterable2T_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb967(%8785 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8786 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8787 : !llvm.ptr):
    %8788 = "mini.wrap"(%8785) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>
    %8789 = "mini.to_fat_ptr"(%8788) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterable2", "to_typ_name" = "FilterIterable2", "invariant"} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>
    %8790 = "mini.field_access"(%8789) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>
    %8791 = "mini.unwrap"(%8790) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8792 = "mini.field_access"(%8789) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.reified_type
    %8793 = "llvm.load"(%8792) : (!mini.reified_type) -> !llvm.ptr
    %8794 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8795 = "mini.method_call"(%8794, %8791) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %8796 = "mini.to_fat_ptr"(%8795) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>
    %8797 = "mini.field_access"(%8789) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %8798 = "mini.unwrap"(%8796) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8799 = "mini.unwrap"(%8797) : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %8800 = "mini.field_access"(%8789) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.reified_type
    %8801 = "llvm.load"(%8800) : (!mini.reified_type) -> !llvm.ptr
    %8802 = "mini.parameterization"(%8801) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["FilterIterable2.T_subtype_Object"]} : (!llvm.ptr) -> !llvm.ptr
    %8803 = "mini.new"(%8802) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr)>, "class_name" = "FilterIterator2", "num_data_fields" = 2 : i32, "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>
    %8804 = "mini.field_access"(%8789) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>
    %8805 = "mini.unwrap"(%8804) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8806 = "mini.field_access"(%8789) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.reified_type
    %8807 = "llvm.load"(%8806) : (!mini.reified_type) -> !llvm.ptr
    %8808 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8809 = "mini.method_call"(%8808, %8805) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %8810 = "mini.to_fat_ptr"(%8809) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>
    %8811 = "mini.field_access"(%8789) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">], !mini.any, !mini.ptr<i1>>
    %8812 = "mini.to_fat_ptr"(%8810) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>
    %8813 = "mini.unwrap"(%8812) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8814 = builtin.unrealized_conversion_cast %8811 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
    %8815 = "mini.unwrap"(%8814) : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %8816 = "mini.unwrap"(%8803) : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8817 = "mini.field_access"(%8789) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.reified_type
    %8818 = "llvm.load"(%8817) : (!mini.reified_type) -> !llvm.ptr
    %8819 = "mini.parameterization"(%8818) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2FilterIterable2.T_subtype_Object", ["FilterIterable2.T_subtype_Object"]]} : (!llvm.ptr) -> !llvm.ptr
    %8820 = "mini.parameterization"(%8818) {"id_hierarchy" = ["function_typ", ["bool_typ"], [0 : i32]], "name_hierarchy" = ["FunctionFilterIterable2.T_subtype_Object_to_Ptri1", ["Ptri1"], ["FilterIterable2.T_subtype_Object"]]} : (!llvm.ptr) -> !llvm.ptr
    %8821 = "mini.parameterizations_array"(%8819, %8820) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8821, %8816, %8813, %8815) {"offset" = 3 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %8822 = "mini.to_fat_ptr"(%8803) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.return"(%8822) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> ()
  }) {"func_name" = "FilterIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb968(%8823 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8824 : !llvm.ptr):
    %8825 = "mini.invariant"(%8824) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8826 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb969] : () -> ()
  ^bb969:
    %8827 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%8827, %8826) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb970] : () -> ()
  ^bb970:
    %8828 = "llvm.extractvalue"(%8823) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8829 = "llvm.load"(%8826) : (!llvm.ptr) -> i32
    %8830 = "llvm.getelementptr"(%8828, %8829) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8831 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8832 = "llvm.getelementptr"(%8830, %8831) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8832) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb971(%8833 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8834 : !llvm.ptr, %8835 : !llvm.struct<(!llvm.ptr)>):
    %8836 = "mini.invariant"(%8834) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8837 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb972] : () -> ()
  ^bb973:
    %8838 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%8838, %8837) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb974] : () -> ()
  ^bb972:
    %8839 = "llvm.getelementptr"(%8834) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8840 = "llvm.load"(%8839) : (!llvm.ptr) -> !llvm.ptr
    %8841 = "llvm.getelementptr"(%8840) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8842 = "llvm.getelementptr"(%8840) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8843 = "llvm.getelementptr"(%8840) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8844 = "llvm.getelementptr"(%8840) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8845 = "llvm.load"(%8841) : (!llvm.ptr) -> i64
    %8846 = "llvm.load"(%8842) : (!llvm.ptr) -> i64
    %8847 = "llvm.load"(%8843) : (!llvm.ptr) -> !llvm.ptr
    %8848 = "llvm.load"(%8844) : (!llvm.ptr) -> !llvm.ptr
    %8849 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8850 = "llvm.ptrtoint"(%8849) : (!llvm.ptr) -> i64
    %8851 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8852 = "mini.subtype"(%8847, %8846, %8845, %8851, %8850, %8848) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8852) [^bb973, ^bb973] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb974:
    %8853 = "llvm.extractvalue"(%8833) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8854 = "llvm.load"(%8837) : (!llvm.ptr) -> i32
    %8855 = "llvm.getelementptr"(%8853, %8854) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8856 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8857 = "llvm.getelementptr"(%8855, %8856) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8857) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb975(%8858 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8859 : !llvm.ptr, %8860 : !llvm.struct<(!llvm.ptr, i160)>, %8861 : !llvm.struct<(!llvm.ptr)>):
    %8862 = "mini.invariant"(%8859) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8863 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb976] : () -> ()
  ^bb977:
    %8864 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%8864, %8863) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb978] : () -> ()
  ^bb979:
    %8865 = "llvm.getelementptr"(%8859) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8866 = "llvm.load"(%8865) : (!llvm.ptr) -> !llvm.ptr
    %8867 = "llvm.getelementptr"(%8866) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8868 = "llvm.getelementptr"(%8866) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8869 = "llvm.getelementptr"(%8866) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8870 = "llvm.getelementptr"(%8866) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8871 = "llvm.load"(%8867) : (!llvm.ptr) -> i64
    %8872 = "llvm.load"(%8868) : (!llvm.ptr) -> i64
    %8873 = "llvm.load"(%8869) : (!llvm.ptr) -> !llvm.ptr
    %8874 = "llvm.load"(%8870) : (!llvm.ptr) -> !llvm.ptr
    %8875 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8876 = "llvm.ptrtoint"(%8875) : (!llvm.ptr) -> i64
    %8877 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8878 = "mini.subtype"(%8873, %8872, %8871, %8877, %8876, %8874) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8878) [^bb977, ^bb977] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb976:
    %8879 = "llvm.getelementptr"(%8859) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8880 = "llvm.load"(%8879) : (!llvm.ptr) -> !llvm.ptr
    %8881 = "llvm.getelementptr"(%8880) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8882 = "llvm.getelementptr"(%8880) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8883 = "llvm.getelementptr"(%8880) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8884 = "llvm.getelementptr"(%8880) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8885 = "llvm.load"(%8881) : (!llvm.ptr) -> i64
    %8886 = "llvm.load"(%8882) : (!llvm.ptr) -> i64
    %8887 = "llvm.load"(%8883) : (!llvm.ptr) -> !llvm.ptr
    %8888 = "llvm.load"(%8884) : (!llvm.ptr) -> !llvm.ptr
    %8889 = "mini.addr_of"() {"global_name" = @Object} : () -> !llvm.ptr
    %8890 = "llvm.ptrtoint"(%8889) : (!llvm.ptr) -> i64
    %8891 = "llvm.mlir.constant"() <{"value" = 3282773614056351330 : i64}> : () -> i64
    %8892 = "mini.subtype"(%8887, %8886, %8885, %8891, %8890, %8888) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8892) [^bb979, ^bb979] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb978:
    %8893 = "llvm.extractvalue"(%8858) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8894 = "llvm.load"(%8863) : (!llvm.ptr) -> i32
    %8895 = "llvm.getelementptr"(%8893, %8894) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8896 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8897 = "llvm.getelementptr"(%8895, %8896) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8897) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb980(%8898 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8899 : !llvm.ptr, %8900 : !llvm.struct<(!llvm.ptr)>):
    %8901 = "mini.invariant"(%8899) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8902 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb981] : () -> ()
  ^bb982:
    %8903 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%8903, %8902) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb983] : () -> ()
  ^bb981:
    %8904 = "llvm.getelementptr"(%8899) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8905 = "llvm.load"(%8904) : (!llvm.ptr) -> !llvm.ptr
    %8906 = "llvm.getelementptr"(%8905) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8907 = "llvm.getelementptr"(%8905) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8908 = "llvm.getelementptr"(%8905) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8909 = "llvm.getelementptr"(%8905) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8910 = "llvm.load"(%8906) : (!llvm.ptr) -> i64
    %8911 = "llvm.load"(%8907) : (!llvm.ptr) -> i64
    %8912 = "llvm.load"(%8908) : (!llvm.ptr) -> !llvm.ptr
    %8913 = "llvm.load"(%8909) : (!llvm.ptr) -> !llvm.ptr
    %8914 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8915 = "llvm.ptrtoint"(%8914) : (!llvm.ptr) -> i64
    %8916 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8917 = "mini.subtype"(%8912, %8911, %8910, %8916, %8915, %8913) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8917) [^bb982, ^bb982] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb983:
    %8918 = "llvm.extractvalue"(%8898) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8919 = "llvm.load"(%8902) : (!llvm.ptr) -> i32
    %8920 = "llvm.getelementptr"(%8918, %8919) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8921 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8922 = "llvm.getelementptr"(%8920, %8921) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8922) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb984(%8923 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8924 : !llvm.ptr, %8925 : !llvm.struct<(!llvm.ptr)>):
    %8926 = "mini.invariant"(%8924) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8927 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb985] : () -> ()
  ^bb986:
    %8928 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%8928, %8927) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb987] : () -> ()
  ^bb985:
    %8929 = "llvm.getelementptr"(%8924) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8930 = "llvm.load"(%8929) : (!llvm.ptr) -> !llvm.ptr
    %8931 = "llvm.getelementptr"(%8930) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8932 = "llvm.getelementptr"(%8930) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8933 = "llvm.getelementptr"(%8930) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8934 = "llvm.getelementptr"(%8930) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8935 = "llvm.load"(%8931) : (!llvm.ptr) -> i64
    %8936 = "llvm.load"(%8932) : (!llvm.ptr) -> i64
    %8937 = "llvm.load"(%8933) : (!llvm.ptr) -> !llvm.ptr
    %8938 = "llvm.load"(%8934) : (!llvm.ptr) -> !llvm.ptr
    %8939 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8940 = "llvm.ptrtoint"(%8939) : (!llvm.ptr) -> i64
    %8941 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8942 = "mini.subtype"(%8937, %8936, %8935, %8941, %8940, %8938) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8942) [^bb986, ^bb986] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb987:
    %8943 = "llvm.extractvalue"(%8923) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8944 = "llvm.load"(%8927) : (!llvm.ptr) -> i32
    %8945 = "llvm.getelementptr"(%8943, %8944) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8946 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8947 = "llvm.getelementptr"(%8945, %8946) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8947) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb988(%8948 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8949 : !llvm.ptr, %8950 : !llvm.struct<(!llvm.ptr)>):
    %8951 = "mini.invariant"(%8949) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8952 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb989] : () -> ()
  ^bb990:
    %8953 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%8953, %8952) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb991] : () -> ()
  ^bb989:
    %8954 = "llvm.getelementptr"(%8949) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8955 = "llvm.load"(%8954) : (!llvm.ptr) -> !llvm.ptr
    %8956 = "llvm.getelementptr"(%8955) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8957 = "llvm.getelementptr"(%8955) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8958 = "llvm.getelementptr"(%8955) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8959 = "llvm.getelementptr"(%8955) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8960 = "llvm.load"(%8956) : (!llvm.ptr) -> i64
    %8961 = "llvm.load"(%8957) : (!llvm.ptr) -> i64
    %8962 = "llvm.load"(%8958) : (!llvm.ptr) -> !llvm.ptr
    %8963 = "llvm.load"(%8959) : (!llvm.ptr) -> !llvm.ptr
    %8964 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8965 = "llvm.ptrtoint"(%8964) : (!llvm.ptr) -> i64
    %8966 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8967 = "mini.subtype"(%8962, %8961, %8960, %8966, %8965, %8963) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8967) [^bb990, ^bb990] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb991:
    %8968 = "llvm.extractvalue"(%8948) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8969 = "llvm.load"(%8952) : (!llvm.ptr) -> i32
    %8970 = "llvm.getelementptr"(%8968, %8969) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8971 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8972 = "llvm.getelementptr"(%8970, %8971) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8972) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb992(%8973 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8974 : !llvm.ptr, %8975 : !llvm.struct<(!llvm.ptr)>):
    %8976 = "mini.invariant"(%8974) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %8977 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb993] : () -> ()
  ^bb994:
    %8978 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%8978, %8977) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb995] : () -> ()
  ^bb993:
    %8979 = "llvm.getelementptr"(%8974) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %8980 = "llvm.load"(%8979) : (!llvm.ptr) -> !llvm.ptr
    %8981 = "llvm.getelementptr"(%8980) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8982 = "llvm.getelementptr"(%8980) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8983 = "llvm.getelementptr"(%8980) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8984 = "llvm.getelementptr"(%8980) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %8985 = "llvm.load"(%8981) : (!llvm.ptr) -> i64
    %8986 = "llvm.load"(%8982) : (!llvm.ptr) -> i64
    %8987 = "llvm.load"(%8983) : (!llvm.ptr) -> !llvm.ptr
    %8988 = "llvm.load"(%8984) : (!llvm.ptr) -> !llvm.ptr
    %8989 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %8990 = "llvm.ptrtoint"(%8989) : (!llvm.ptr) -> i64
    %8991 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %8992 = "mini.subtype"(%8987, %8986, %8985, %8991, %8990, %8988) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%8992) [^bb994, ^bb994] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb995:
    %8993 = "llvm.extractvalue"(%8973) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %8994 = "llvm.load"(%8977) : (!llvm.ptr) -> i32
    %8995 = "llvm.getelementptr"(%8993, %8994) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %8996 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %8997 = "llvm.getelementptr"(%8995, %8996) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%8997) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb996(%8998 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %8999 : !llvm.ptr, %9000 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9001 = "mini.invariant"(%8999) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9002 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb997] : () -> ()
  ^bb998:
    %9003 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%9003, %9002) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb999] : () -> ()
  ^bb997:
    %9004 = "llvm.getelementptr"(%8999) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9005 = "llvm.load"(%9004) : (!llvm.ptr) -> !llvm.ptr
    %9006 = "llvm.getelementptr"(%9005) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9007 = "llvm.getelementptr"(%9005) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9008 = "llvm.getelementptr"(%9005) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9009 = "llvm.getelementptr"(%9005) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9010 = "llvm.load"(%9006) : (!llvm.ptr) -> i64
    %9011 = "llvm.load"(%9007) : (!llvm.ptr) -> i64
    %9012 = "llvm.load"(%9008) : (!llvm.ptr) -> !llvm.ptr
    %9013 = "llvm.load"(%9009) : (!llvm.ptr) -> !llvm.ptr
    %9014 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9015 = "llvm.ptrtoint"(%9014) : (!llvm.ptr) -> i64
    %9016 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9017 = "mini.subtype"(%9012, %9011, %9010, %9016, %9015, %9013) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9017) [^bb998, ^bb998] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb999:
    %9018 = "llvm.extractvalue"(%8998) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9019 = "llvm.load"(%9002) : (!llvm.ptr) -> i32
    %9020 = "llvm.getelementptr"(%9018, %9019) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9021 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9022 = "llvm.getelementptr"(%9020, %9021) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9022) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1000(%9023 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9024 : !llvm.ptr, %9025 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9026 = "mini.invariant"(%9024) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9027 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1001] : () -> ()
  ^bb1002:
    %9028 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%9028, %9027) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1003] : () -> ()
  ^bb1001:
    %9029 = "llvm.getelementptr"(%9024) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9030 = "llvm.load"(%9029) : (!llvm.ptr) -> !llvm.ptr
    %9031 = "llvm.getelementptr"(%9030) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9032 = "llvm.getelementptr"(%9030) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9033 = "llvm.getelementptr"(%9030) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9034 = "llvm.getelementptr"(%9030) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9035 = "llvm.load"(%9031) : (!llvm.ptr) -> i64
    %9036 = "llvm.load"(%9032) : (!llvm.ptr) -> i64
    %9037 = "llvm.load"(%9033) : (!llvm.ptr) -> !llvm.ptr
    %9038 = "llvm.load"(%9034) : (!llvm.ptr) -> !llvm.ptr
    %9039 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9040 = "llvm.ptrtoint"(%9039) : (!llvm.ptr) -> i64
    %9041 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9042 = "mini.subtype"(%9037, %9036, %9035, %9041, %9040, %9038) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9042) [^bb1002, ^bb1002] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1003:
    %9043 = "llvm.extractvalue"(%9023) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9044 = "llvm.load"(%9027) : (!llvm.ptr) -> i32
    %9045 = "llvm.getelementptr"(%9043, %9044) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9046 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9047 = "llvm.getelementptr"(%9045, %9046) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9047) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1004(%9048 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9049 : !llvm.ptr, %9050 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9051 = "mini.invariant"(%9049) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9052 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1005] : () -> ()
  ^bb1006:
    %9053 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%9053, %9052) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1007] : () -> ()
  ^bb1005:
    %9054 = "llvm.getelementptr"(%9049) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9055 = "llvm.load"(%9054) : (!llvm.ptr) -> !llvm.ptr
    %9056 = "llvm.getelementptr"(%9055) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9057 = "llvm.getelementptr"(%9055) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9058 = "llvm.getelementptr"(%9055) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9059 = "llvm.getelementptr"(%9055) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9060 = "llvm.load"(%9056) : (!llvm.ptr) -> i64
    %9061 = "llvm.load"(%9057) : (!llvm.ptr) -> i64
    %9062 = "llvm.load"(%9058) : (!llvm.ptr) -> !llvm.ptr
    %9063 = "llvm.load"(%9059) : (!llvm.ptr) -> !llvm.ptr
    %9064 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9065 = "llvm.ptrtoint"(%9064) : (!llvm.ptr) -> i64
    %9066 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9067 = "mini.subtype"(%9062, %9061, %9060, %9066, %9065, %9063) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9067) [^bb1006, ^bb1006] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1007:
    %9068 = "llvm.extractvalue"(%9048) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9069 = "llvm.load"(%9052) : (!llvm.ptr) -> i32
    %9070 = "llvm.getelementptr"(%9068, %9069) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9071 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9072 = "llvm.getelementptr"(%9070, %9071) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9072) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1008(%9073 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9074 : !llvm.ptr, %9075 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9076 = "mini.invariant"(%9074) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9077 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1009] : () -> ()
  ^bb1010:
    %9078 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%9078, %9077) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1011] : () -> ()
  ^bb1009:
    %9079 = "llvm.getelementptr"(%9074) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9080 = "llvm.load"(%9079) : (!llvm.ptr) -> !llvm.ptr
    %9081 = "llvm.getelementptr"(%9080) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9082 = "llvm.getelementptr"(%9080) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9083 = "llvm.getelementptr"(%9080) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9084 = "llvm.getelementptr"(%9080) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9085 = "llvm.load"(%9081) : (!llvm.ptr) -> i64
    %9086 = "llvm.load"(%9082) : (!llvm.ptr) -> i64
    %9087 = "llvm.load"(%9083) : (!llvm.ptr) -> !llvm.ptr
    %9088 = "llvm.load"(%9084) : (!llvm.ptr) -> !llvm.ptr
    %9089 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9090 = "llvm.ptrtoint"(%9089) : (!llvm.ptr) -> i64
    %9091 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9092 = "mini.subtype"(%9087, %9086, %9085, %9091, %9090, %9088) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9092) [^bb1010, ^bb1010] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1011:
    %9093 = "llvm.extractvalue"(%9073) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9094 = "llvm.load"(%9077) : (!llvm.ptr) -> i32
    %9095 = "llvm.getelementptr"(%9093, %9094) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9096 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9097 = "llvm.getelementptr"(%9095, %9096) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9097) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "FilterIterator2_field_iterator"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "FilterIterator2_field_f"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "FilterIterator2_field_FilterIterator2_0"} : () -> ()
  "mini.func"() ({
  ^bb1012(%9098 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9099 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9100 : !llvm.ptr, %9101 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9102 : !llvm.struct<(!llvm.ptr)>):
    %9103 = "mini.wrap"(%9098) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>
    %9104 = "mini.to_fat_ptr"(%9103) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator2", "to_typ_name" = "FilterIterator2", "invariant"} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>
    %9105 = "mini.wrap"(%9101) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>
    %9106 = "mini.to_fat_ptr"(%9105) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>
    %9107 = "mini.field_access"(%9104) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>
    "mini.castassign"(%9107, %9106) ({
      %9108 = "mini.to_fat_ptr"(%9106) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "should_offset"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> ()
    %9109 = "mini.wrap"(%9102) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
    %9110 = builtin.unrealized_conversion_cast %9109 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
    %9111 = "mini.field_access"(%9104) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
    "mini.castassign"(%9111, %9110) ({
      %9112 = builtin.unrealized_conversion_cast %9110 : !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">], !mini.any, !mini.ptr<i1>> to !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr)>, "to_typ" = !llvm.struct<(!llvm.ptr)>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ", "should_offset"} : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">], !mini.any, !mini.ptr<i1>>, !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">], !mini.any, !mini.ptr<i1>>) -> ()
  }) {"func_name" = "FilterIterator2_init_iteratorIterator2T_fFunctionT_to_Ptri1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1013(%9113 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9114 : !llvm.ptr, %9115 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9116 : !llvm.struct<(!llvm.ptr)>):
    %9117 = "mini.invariant"(%9114) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9118 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1014] : () -> ()
  ^bb1015:
    %9119 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%9119, %9118) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1016] : () -> ()
  ^bb1017:
    %9120 = "llvm.getelementptr"(%9114) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9121 = "llvm.load"(%9120) : (!llvm.ptr) -> !llvm.ptr
    %9122 = "llvm.getelementptr"(%9121) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9123 = "llvm.getelementptr"(%9121) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9124 = "llvm.getelementptr"(%9121) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9125 = "llvm.getelementptr"(%9121) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9126 = "llvm.load"(%9122) : (!llvm.ptr) -> i64
    %9127 = "llvm.load"(%9123) : (!llvm.ptr) -> i64
    %9128 = "llvm.load"(%9124) : (!llvm.ptr) -> !llvm.ptr
    %9129 = "llvm.load"(%9125) : (!llvm.ptr) -> !llvm.ptr
    %9130 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9131 = "llvm.ptrtoint"(%9130) : (!llvm.ptr) -> i64
    %9132 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9133 = "mini.subtype"(%9128, %9127, %9126, %9132, %9131, %9129) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9133) [^bb1015, ^bb1015] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1014:
    %9134 = "llvm.getelementptr"(%9114) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9135 = "llvm.load"(%9134) : (!llvm.ptr) -> !llvm.ptr
    %9136 = "llvm.getelementptr"(%9135) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9137 = "llvm.getelementptr"(%9135) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9138 = "llvm.getelementptr"(%9135) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9139 = "llvm.getelementptr"(%9135) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9140 = "llvm.load"(%9136) : (!llvm.ptr) -> i64
    %9141 = "llvm.load"(%9137) : (!llvm.ptr) -> i64
    %9142 = "llvm.load"(%9138) : (!llvm.ptr) -> !llvm.ptr
    %9143 = "llvm.load"(%9139) : (!llvm.ptr) -> !llvm.ptr
    %9144 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %9145 = "llvm.ptrtoint"(%9144) : (!llvm.ptr) -> i64
    %9146 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %9147 = "mini.subtype"(%9142, %9141, %9140, %9146, %9145, %9143) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9147) [^bb1017, ^bb1017] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1016:
    %9148 = "llvm.extractvalue"(%9113) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9149 = "llvm.load"(%9118) : (!llvm.ptr) -> i32
    %9150 = "llvm.getelementptr"(%9148, %9149) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9151 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9152 = "llvm.getelementptr"(%9150, %9151) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9152) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterator2_B_init_iteratorIterator2T_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1018(%9153 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9154 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9155 : !llvm.ptr):
    %9156 = "mini.wrap"(%9153) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>
    %9157 = "mini.to_fat_ptr"(%9156) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "FilterIterator2", "to_typ_name" = "FilterIterator2", "invariant"} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> !mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>
    %9158 = "mini.field_access"(%9157) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>
    %9159 = "mini.unwrap"(%9158) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9160 = "mini.field_access"(%9157) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> !mini.reified_type
    %9161 = "llvm.load"(%9160) : (!mini.reified_type) -> !llvm.ptr
    %9162 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9163 = "mini.method_call"(%9162, %9159) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
    %9164 = builtin.unrealized_conversion_cast %9163 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">, !mini.nil]>
    %9165 = builtin.unrealized_conversion_cast %9164 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">, !mini.nil]>
    "mini.while"() ({
      %9166 = "mini.checkflag"(%9165) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">, !mini.nil]>) -> i1
      %9167 = "mini.unwrap"(%9166) : (i1) -> i1
    }, {
      %9168 = "mini.to_fat_ptr"(%9165) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "Object"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">, !mini.nil]>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">
      %9169 = "mini.to_fat_ptr"(%9168) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">
      %9170 = "mini.unwrap"(%9169) : (!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
      %9171 = "mini.field_access"(%9157) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> !mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">], !mini.any, !mini.ptr<i1>>
      %9172 = "mini.unwrap"(%9171) : (!mini.function<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %9173 = "mini.fptr_call"(%9172, %9170) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.ptr<i1>
      %9174 = "mini.unwrap"(%9173) : (!mini.ptr<i1>) -> i1
      "mini.if"(%9174) ({
        %9175 = builtin.unrealized_conversion_cast %9168 : !mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2"> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
        "mini.return"(%9175) : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>) -> ()
      }) : (i1) -> ()
      %9176 = "mini.field_access"(%9157) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>
      %9177 = "mini.unwrap"(%9176) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9178 = "mini.field_access"(%9157) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"FilterIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">]>) -> !mini.reified_type
      %9179 = "llvm.load"(%9178) : (!mini.reified_type) -> !llvm.ptr
      %9180 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %9181 = "mini.method_call"(%9180, %9177) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
      %9182 = builtin.unrealized_conversion_cast %9181 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">, !mini.nil]>
      "mini.castassign"(%9165, %9182) ({
        %9183 = builtin.unrealized_conversion_cast %9182 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "FilterIterator2">, !mini.nil]>) -> ()
    }) : () -> ()
    %9184 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %9185 = "mini.unionize"(%9184) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
    "mini.return"(%9185) : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "FilterIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1019(%9186 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9187 : !llvm.ptr):
    %9188 = "mini.invariant"(%9187) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9189 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1020] : () -> ()
  ^bb1020:
    %9190 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%9190, %9189) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1021] : () -> ()
  ^bb1021:
    %9191 = "llvm.extractvalue"(%9186) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9192 = "llvm.load"(%9189) : (!llvm.ptr) -> i32
    %9193 = "llvm.getelementptr"(%9191, %9192) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9194 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9195 = "llvm.getelementptr"(%9193, %9194) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9195) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "ChainIterable2_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "ChainIterable2_field_second"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "ChainIterable2_field_ChainIterable2_0"} : () -> ()
  "mini.func"() ({
  ^bb1022(%9196 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9197 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9198 : !llvm.ptr, %9199 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9200 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9201 = "mini.wrap"(%9196) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9202 = "mini.to_fat_ptr"(%9201) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable2", "to_typ_name" = "ChainIterable2", "invariant"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9203 = "mini.wrap"(%9199) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9204 = "mini.to_fat_ptr"(%9203) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9205 = "mini.field_access"(%9202) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    "mini.castassign"(%9205, %9204) ({
      %9206 = "mini.to_fat_ptr"(%9204) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "should_offset"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> ()
    %9207 = "mini.wrap"(%9200) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9208 = "mini.to_fat_ptr"(%9207) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9209 = "mini.field_access"(%9202) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    "mini.castassign"(%9209, %9208) ({
      %9210 = "mini.to_fat_ptr"(%9208) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "should_offset"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> ()
  }) {"func_name" = "ChainIterable2_init_firstIterable2T_secondIterable2T", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1023(%9211 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9212 : !llvm.ptr, %9213 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9214 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9215 = "mini.invariant"(%9212) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9216 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1024] : () -> ()
  ^bb1025:
    %9217 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%9217, %9216) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1026] : () -> ()
  ^bb1027:
    %9218 = "llvm.getelementptr"(%9212) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9219 = "llvm.load"(%9218) : (!llvm.ptr) -> !llvm.ptr
    %9220 = "llvm.getelementptr"(%9219) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9221 = "llvm.getelementptr"(%9219) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9222 = "llvm.getelementptr"(%9219) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9223 = "llvm.getelementptr"(%9219) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9224 = "llvm.load"(%9220) : (!llvm.ptr) -> i64
    %9225 = "llvm.load"(%9221) : (!llvm.ptr) -> i64
    %9226 = "llvm.load"(%9222) : (!llvm.ptr) -> !llvm.ptr
    %9227 = "llvm.load"(%9223) : (!llvm.ptr) -> !llvm.ptr
    %9228 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9229 = "llvm.ptrtoint"(%9228) : (!llvm.ptr) -> i64
    %9230 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9231 = "mini.subtype"(%9226, %9225, %9224, %9230, %9229, %9227) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9231) [^bb1025, ^bb1025] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1024:
    %9232 = "llvm.getelementptr"(%9212) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9233 = "llvm.load"(%9232) : (!llvm.ptr) -> !llvm.ptr
    %9234 = "llvm.getelementptr"(%9233) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9235 = "llvm.getelementptr"(%9233) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9236 = "llvm.getelementptr"(%9233) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9237 = "llvm.getelementptr"(%9233) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9238 = "llvm.load"(%9234) : (!llvm.ptr) -> i64
    %9239 = "llvm.load"(%9235) : (!llvm.ptr) -> i64
    %9240 = "llvm.load"(%9236) : (!llvm.ptr) -> !llvm.ptr
    %9241 = "llvm.load"(%9237) : (!llvm.ptr) -> !llvm.ptr
    %9242 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9243 = "llvm.ptrtoint"(%9242) : (!llvm.ptr) -> i64
    %9244 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9245 = "mini.subtype"(%9240, %9239, %9238, %9244, %9243, %9241) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9245) [^bb1027, ^bb1027] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1026:
    %9246 = "llvm.extractvalue"(%9211) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9247 = "llvm.load"(%9216) : (!llvm.ptr) -> i32
    %9248 = "llvm.getelementptr"(%9246, %9247) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9249 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9250 = "llvm.getelementptr"(%9248, %9249) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9250) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_init_firstIterable2T_secondIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1028(%9251 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9252 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9253 : !llvm.ptr):
    %9254 = "mini.wrap"(%9251) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9255 = "mini.to_fat_ptr"(%9254) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterable2", "to_typ_name" = "ChainIterable2", "invariant"} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9256 = "mini.field_access"(%9255) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9257 = "mini.unwrap"(%9256) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9258 = "mini.field_access"(%9255) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.reified_type
    %9259 = "llvm.load"(%9258) : (!mini.reified_type) -> !llvm.ptr
    %9260 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9261 = "mini.method_call"(%9260, %9257) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %9262 = "mini.to_fat_ptr"(%9261) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9263 = "mini.field_access"(%9255) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9264 = "mini.unwrap"(%9263) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9265 = "mini.field_access"(%9255) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.reified_type
    %9266 = "llvm.load"(%9265) : (!mini.reified_type) -> !llvm.ptr
    %9267 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9268 = "mini.method_call"(%9267, %9264) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %9269 = "mini.to_fat_ptr"(%9268) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9270 = "mini.unwrap"(%9262) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9271 = "mini.unwrap"(%9269) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9272 = "mini.field_access"(%9255) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.reified_type
    %9273 = "llvm.load"(%9272) : (!mini.reified_type) -> !llvm.ptr
    %9274 = "mini.parameterization"(%9273) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["ChainIterable2.T_subtype_Object"]} : (!llvm.ptr) -> !llvm.ptr
    %9275 = "mini.new"(%9274) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1, !llvm.ptr)>, "class_name" = "ChainIterator2", "num_data_fields" = 3 : i32, "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9276 = "mini.field_access"(%9255) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9277 = "mini.unwrap"(%9276) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9278 = "mini.field_access"(%9255) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.reified_type
    %9279 = "llvm.load"(%9278) : (!mini.reified_type) -> !llvm.ptr
    %9280 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9281 = "mini.method_call"(%9280, %9277) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %9282 = "mini.to_fat_ptr"(%9281) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9283 = "mini.field_access"(%9255) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9284 = "mini.unwrap"(%9283) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9285 = "mini.field_access"(%9255) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.reified_type
    %9286 = "llvm.load"(%9285) : (!mini.reified_type) -> !llvm.ptr
    %9287 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9288 = "mini.method_call"(%9287, %9284) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %9289 = "mini.to_fat_ptr"(%9288) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>
    %9290 = "mini.to_fat_ptr"(%9282) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    %9291 = "mini.unwrap"(%9290) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9292 = "mini.to_fat_ptr"(%9289) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    %9293 = "mini.unwrap"(%9292) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9294 = "mini.unwrap"(%9275) : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9295 = "mini.field_access"(%9255) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.reified_type
    %9296 = "llvm.load"(%9295) : (!mini.reified_type) -> !llvm.ptr
    %9297 = "mini.parameterization"(%9296) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2ChainIterable2.T_subtype_Object", ["ChainIterable2.T_subtype_Object"]]} : (!llvm.ptr) -> !llvm.ptr
    %9298 = "mini.parameterization"(%9296) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2ChainIterable2.T_subtype_Object", ["ChainIterable2.T_subtype_Object"]]} : (!llvm.ptr) -> !llvm.ptr
    %9299 = "mini.parameterizations_array"(%9297, %9298) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9299, %9294, %9291, %9293) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %9300 = "mini.to_fat_ptr"(%9275) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.return"(%9300) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> ()
  }) {"func_name" = "ChainIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1029(%9301 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9302 : !llvm.ptr):
    %9303 = "mini.invariant"(%9302) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9304 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1030] : () -> ()
  ^bb1030:
    %9305 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%9305, %9304) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1031] : () -> ()
  ^bb1031:
    %9306 = "llvm.extractvalue"(%9301) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9307 = "llvm.load"(%9304) : (!llvm.ptr) -> i32
    %9308 = "llvm.getelementptr"(%9306, %9307) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9309 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9310 = "llvm.getelementptr"(%9308, %9309) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9310) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1032(%9311 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9312 : !llvm.ptr, %9313 : !llvm.struct<(!llvm.ptr)>):
    %9314 = "mini.invariant"(%9312) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9315 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1033] : () -> ()
  ^bb1034:
    %9316 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%9316, %9315) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1035] : () -> ()
  ^bb1033:
    %9317 = "llvm.getelementptr"(%9312) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9318 = "llvm.load"(%9317) : (!llvm.ptr) -> !llvm.ptr
    %9319 = "llvm.getelementptr"(%9318) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9320 = "llvm.getelementptr"(%9318) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9321 = "llvm.getelementptr"(%9318) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9322 = "llvm.getelementptr"(%9318) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9323 = "llvm.load"(%9319) : (!llvm.ptr) -> i64
    %9324 = "llvm.load"(%9320) : (!llvm.ptr) -> i64
    %9325 = "llvm.load"(%9321) : (!llvm.ptr) -> !llvm.ptr
    %9326 = "llvm.load"(%9322) : (!llvm.ptr) -> !llvm.ptr
    %9327 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9328 = "llvm.ptrtoint"(%9327) : (!llvm.ptr) -> i64
    %9329 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9330 = "mini.subtype"(%9325, %9324, %9323, %9329, %9328, %9326) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9330) [^bb1034, ^bb1034] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1035:
    %9331 = "llvm.extractvalue"(%9311) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9332 = "llvm.load"(%9315) : (!llvm.ptr) -> i32
    %9333 = "llvm.getelementptr"(%9331, %9332) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9334 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9335 = "llvm.getelementptr"(%9333, %9334) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9335) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1036(%9336 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9337 : !llvm.ptr, %9338 : !llvm.struct<(!llvm.ptr, i160)>, %9339 : !llvm.struct<(!llvm.ptr)>):
    %9340 = "mini.invariant"(%9337) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9341 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1037] : () -> ()
  ^bb1038:
    %9342 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%9342, %9341) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1039] : () -> ()
  ^bb1040:
    %9343 = "llvm.getelementptr"(%9337) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9344 = "llvm.load"(%9343) : (!llvm.ptr) -> !llvm.ptr
    %9345 = "llvm.getelementptr"(%9344) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9346 = "llvm.getelementptr"(%9344) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9347 = "llvm.getelementptr"(%9344) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9348 = "llvm.getelementptr"(%9344) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9349 = "llvm.load"(%9345) : (!llvm.ptr) -> i64
    %9350 = "llvm.load"(%9346) : (!llvm.ptr) -> i64
    %9351 = "llvm.load"(%9347) : (!llvm.ptr) -> !llvm.ptr
    %9352 = "llvm.load"(%9348) : (!llvm.ptr) -> !llvm.ptr
    %9353 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9354 = "llvm.ptrtoint"(%9353) : (!llvm.ptr) -> i64
    %9355 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9356 = "mini.subtype"(%9351, %9350, %9349, %9355, %9354, %9352) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9356) [^bb1038, ^bb1038] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1037:
    %9357 = "llvm.getelementptr"(%9337) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9358 = "llvm.load"(%9357) : (!llvm.ptr) -> !llvm.ptr
    %9359 = "llvm.getelementptr"(%9358) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9360 = "llvm.getelementptr"(%9358) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9361 = "llvm.getelementptr"(%9358) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9362 = "llvm.getelementptr"(%9358) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9363 = "llvm.load"(%9359) : (!llvm.ptr) -> i64
    %9364 = "llvm.load"(%9360) : (!llvm.ptr) -> i64
    %9365 = "llvm.load"(%9361) : (!llvm.ptr) -> !llvm.ptr
    %9366 = "llvm.load"(%9362) : (!llvm.ptr) -> !llvm.ptr
    %9367 = "mini.addr_of"() {"global_name" = @Object} : () -> !llvm.ptr
    %9368 = "llvm.ptrtoint"(%9367) : (!llvm.ptr) -> i64
    %9369 = "llvm.mlir.constant"() <{"value" = 3282773614056351330 : i64}> : () -> i64
    %9370 = "mini.subtype"(%9365, %9364, %9363, %9369, %9368, %9366) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9370) [^bb1040, ^bb1040] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1039:
    %9371 = "llvm.extractvalue"(%9336) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9372 = "llvm.load"(%9341) : (!llvm.ptr) -> i32
    %9373 = "llvm.getelementptr"(%9371, %9372) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9374 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9375 = "llvm.getelementptr"(%9373, %9374) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9375) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1041(%9376 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9377 : !llvm.ptr, %9378 : !llvm.struct<(!llvm.ptr)>):
    %9379 = "mini.invariant"(%9377) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9380 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1042] : () -> ()
  ^bb1043:
    %9381 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%9381, %9380) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1044] : () -> ()
  ^bb1042:
    %9382 = "llvm.getelementptr"(%9377) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9383 = "llvm.load"(%9382) : (!llvm.ptr) -> !llvm.ptr
    %9384 = "llvm.getelementptr"(%9383) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9385 = "llvm.getelementptr"(%9383) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9386 = "llvm.getelementptr"(%9383) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9387 = "llvm.getelementptr"(%9383) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9388 = "llvm.load"(%9384) : (!llvm.ptr) -> i64
    %9389 = "llvm.load"(%9385) : (!llvm.ptr) -> i64
    %9390 = "llvm.load"(%9386) : (!llvm.ptr) -> !llvm.ptr
    %9391 = "llvm.load"(%9387) : (!llvm.ptr) -> !llvm.ptr
    %9392 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9393 = "llvm.ptrtoint"(%9392) : (!llvm.ptr) -> i64
    %9394 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9395 = "mini.subtype"(%9390, %9389, %9388, %9394, %9393, %9391) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9395) [^bb1043, ^bb1043] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1044:
    %9396 = "llvm.extractvalue"(%9376) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9397 = "llvm.load"(%9380) : (!llvm.ptr) -> i32
    %9398 = "llvm.getelementptr"(%9396, %9397) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9399 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9400 = "llvm.getelementptr"(%9398, %9399) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9400) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1045(%9401 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9402 : !llvm.ptr, %9403 : !llvm.struct<(!llvm.ptr)>):
    %9404 = "mini.invariant"(%9402) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9405 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1046] : () -> ()
  ^bb1047:
    %9406 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%9406, %9405) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1048] : () -> ()
  ^bb1046:
    %9407 = "llvm.getelementptr"(%9402) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9408 = "llvm.load"(%9407) : (!llvm.ptr) -> !llvm.ptr
    %9409 = "llvm.getelementptr"(%9408) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9410 = "llvm.getelementptr"(%9408) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9411 = "llvm.getelementptr"(%9408) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9412 = "llvm.getelementptr"(%9408) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9413 = "llvm.load"(%9409) : (!llvm.ptr) -> i64
    %9414 = "llvm.load"(%9410) : (!llvm.ptr) -> i64
    %9415 = "llvm.load"(%9411) : (!llvm.ptr) -> !llvm.ptr
    %9416 = "llvm.load"(%9412) : (!llvm.ptr) -> !llvm.ptr
    %9417 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9418 = "llvm.ptrtoint"(%9417) : (!llvm.ptr) -> i64
    %9419 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9420 = "mini.subtype"(%9415, %9414, %9413, %9419, %9418, %9416) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9420) [^bb1047, ^bb1047] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1048:
    %9421 = "llvm.extractvalue"(%9401) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9422 = "llvm.load"(%9405) : (!llvm.ptr) -> i32
    %9423 = "llvm.getelementptr"(%9421, %9422) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9424 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9425 = "llvm.getelementptr"(%9423, %9424) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9425) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1049(%9426 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9427 : !llvm.ptr, %9428 : !llvm.struct<(!llvm.ptr)>):
    %9429 = "mini.invariant"(%9427) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9430 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1050] : () -> ()
  ^bb1051:
    %9431 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%9431, %9430) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1052] : () -> ()
  ^bb1050:
    %9432 = "llvm.getelementptr"(%9427) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9433 = "llvm.load"(%9432) : (!llvm.ptr) -> !llvm.ptr
    %9434 = "llvm.getelementptr"(%9433) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9435 = "llvm.getelementptr"(%9433) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9436 = "llvm.getelementptr"(%9433) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9437 = "llvm.getelementptr"(%9433) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9438 = "llvm.load"(%9434) : (!llvm.ptr) -> i64
    %9439 = "llvm.load"(%9435) : (!llvm.ptr) -> i64
    %9440 = "llvm.load"(%9436) : (!llvm.ptr) -> !llvm.ptr
    %9441 = "llvm.load"(%9437) : (!llvm.ptr) -> !llvm.ptr
    %9442 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9443 = "llvm.ptrtoint"(%9442) : (!llvm.ptr) -> i64
    %9444 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9445 = "mini.subtype"(%9440, %9439, %9438, %9444, %9443, %9441) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9445) [^bb1051, ^bb1051] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1052:
    %9446 = "llvm.extractvalue"(%9426) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9447 = "llvm.load"(%9430) : (!llvm.ptr) -> i32
    %9448 = "llvm.getelementptr"(%9446, %9447) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9449 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9450 = "llvm.getelementptr"(%9448, %9449) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9450) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1053(%9451 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9452 : !llvm.ptr, %9453 : !llvm.struct<(!llvm.ptr)>):
    %9454 = "mini.invariant"(%9452) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9455 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1054] : () -> ()
  ^bb1055:
    %9456 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%9456, %9455) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1056] : () -> ()
  ^bb1054:
    %9457 = "llvm.getelementptr"(%9452) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9458 = "llvm.load"(%9457) : (!llvm.ptr) -> !llvm.ptr
    %9459 = "llvm.getelementptr"(%9458) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9460 = "llvm.getelementptr"(%9458) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9461 = "llvm.getelementptr"(%9458) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9462 = "llvm.getelementptr"(%9458) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9463 = "llvm.load"(%9459) : (!llvm.ptr) -> i64
    %9464 = "llvm.load"(%9460) : (!llvm.ptr) -> i64
    %9465 = "llvm.load"(%9461) : (!llvm.ptr) -> !llvm.ptr
    %9466 = "llvm.load"(%9462) : (!llvm.ptr) -> !llvm.ptr
    %9467 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9468 = "llvm.ptrtoint"(%9467) : (!llvm.ptr) -> i64
    %9469 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9470 = "mini.subtype"(%9465, %9464, %9463, %9469, %9468, %9466) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9470) [^bb1055, ^bb1055] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1056:
    %9471 = "llvm.extractvalue"(%9451) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9472 = "llvm.load"(%9455) : (!llvm.ptr) -> i32
    %9473 = "llvm.getelementptr"(%9471, %9472) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9474 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9475 = "llvm.getelementptr"(%9473, %9474) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9475) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1057(%9476 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9477 : !llvm.ptr, %9478 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9479 = "mini.invariant"(%9477) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9480 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1058] : () -> ()
  ^bb1059:
    %9481 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%9481, %9480) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1060] : () -> ()
  ^bb1058:
    %9482 = "llvm.getelementptr"(%9477) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9483 = "llvm.load"(%9482) : (!llvm.ptr) -> !llvm.ptr
    %9484 = "llvm.getelementptr"(%9483) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9485 = "llvm.getelementptr"(%9483) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9486 = "llvm.getelementptr"(%9483) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9487 = "llvm.getelementptr"(%9483) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9488 = "llvm.load"(%9484) : (!llvm.ptr) -> i64
    %9489 = "llvm.load"(%9485) : (!llvm.ptr) -> i64
    %9490 = "llvm.load"(%9486) : (!llvm.ptr) -> !llvm.ptr
    %9491 = "llvm.load"(%9487) : (!llvm.ptr) -> !llvm.ptr
    %9492 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9493 = "llvm.ptrtoint"(%9492) : (!llvm.ptr) -> i64
    %9494 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9495 = "mini.subtype"(%9490, %9489, %9488, %9494, %9493, %9491) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9495) [^bb1059, ^bb1059] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1060:
    %9496 = "llvm.extractvalue"(%9476) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9497 = "llvm.load"(%9480) : (!llvm.ptr) -> i32
    %9498 = "llvm.getelementptr"(%9496, %9497) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9499 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9500 = "llvm.getelementptr"(%9498, %9499) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9500) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1061(%9501 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9502 : !llvm.ptr, %9503 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9504 = "mini.invariant"(%9502) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9505 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1062] : () -> ()
  ^bb1063:
    %9506 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%9506, %9505) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1064] : () -> ()
  ^bb1062:
    %9507 = "llvm.getelementptr"(%9502) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9508 = "llvm.load"(%9507) : (!llvm.ptr) -> !llvm.ptr
    %9509 = "llvm.getelementptr"(%9508) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9510 = "llvm.getelementptr"(%9508) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9511 = "llvm.getelementptr"(%9508) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9512 = "llvm.getelementptr"(%9508) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9513 = "llvm.load"(%9509) : (!llvm.ptr) -> i64
    %9514 = "llvm.load"(%9510) : (!llvm.ptr) -> i64
    %9515 = "llvm.load"(%9511) : (!llvm.ptr) -> !llvm.ptr
    %9516 = "llvm.load"(%9512) : (!llvm.ptr) -> !llvm.ptr
    %9517 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9518 = "llvm.ptrtoint"(%9517) : (!llvm.ptr) -> i64
    %9519 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9520 = "mini.subtype"(%9515, %9514, %9513, %9519, %9518, %9516) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9520) [^bb1063, ^bb1063] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1064:
    %9521 = "llvm.extractvalue"(%9501) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9522 = "llvm.load"(%9505) : (!llvm.ptr) -> i32
    %9523 = "llvm.getelementptr"(%9521, %9522) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9524 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9525 = "llvm.getelementptr"(%9523, %9524) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9525) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1065(%9526 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9527 : !llvm.ptr, %9528 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9529 = "mini.invariant"(%9527) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9530 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1066] : () -> ()
  ^bb1067:
    %9531 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%9531, %9530) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1068] : () -> ()
  ^bb1066:
    %9532 = "llvm.getelementptr"(%9527) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9533 = "llvm.load"(%9532) : (!llvm.ptr) -> !llvm.ptr
    %9534 = "llvm.getelementptr"(%9533) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9535 = "llvm.getelementptr"(%9533) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9536 = "llvm.getelementptr"(%9533) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9537 = "llvm.getelementptr"(%9533) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9538 = "llvm.load"(%9534) : (!llvm.ptr) -> i64
    %9539 = "llvm.load"(%9535) : (!llvm.ptr) -> i64
    %9540 = "llvm.load"(%9536) : (!llvm.ptr) -> !llvm.ptr
    %9541 = "llvm.load"(%9537) : (!llvm.ptr) -> !llvm.ptr
    %9542 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9543 = "llvm.ptrtoint"(%9542) : (!llvm.ptr) -> i64
    %9544 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9545 = "mini.subtype"(%9540, %9539, %9538, %9544, %9543, %9541) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9545) [^bb1067, ^bb1067] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1068:
    %9546 = "llvm.extractvalue"(%9526) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9547 = "llvm.load"(%9530) : (!llvm.ptr) -> i32
    %9548 = "llvm.getelementptr"(%9546, %9547) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9549 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9550 = "llvm.getelementptr"(%9548, %9549) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9550) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1069(%9551 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9552 : !llvm.ptr, %9553 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9554 = "mini.invariant"(%9552) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9555 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1070] : () -> ()
  ^bb1071:
    %9556 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%9556, %9555) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1072] : () -> ()
  ^bb1070:
    %9557 = "llvm.getelementptr"(%9552) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9558 = "llvm.load"(%9557) : (!llvm.ptr) -> !llvm.ptr
    %9559 = "llvm.getelementptr"(%9558) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9560 = "llvm.getelementptr"(%9558) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9561 = "llvm.getelementptr"(%9558) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9562 = "llvm.getelementptr"(%9558) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9563 = "llvm.load"(%9559) : (!llvm.ptr) -> i64
    %9564 = "llvm.load"(%9560) : (!llvm.ptr) -> i64
    %9565 = "llvm.load"(%9561) : (!llvm.ptr) -> !llvm.ptr
    %9566 = "llvm.load"(%9562) : (!llvm.ptr) -> !llvm.ptr
    %9567 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9568 = "llvm.ptrtoint"(%9567) : (!llvm.ptr) -> i64
    %9569 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9570 = "mini.subtype"(%9565, %9564, %9563, %9569, %9568, %9566) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9570) [^bb1071, ^bb1071] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1072:
    %9571 = "llvm.extractvalue"(%9551) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9572 = "llvm.load"(%9555) : (!llvm.ptr) -> i32
    %9573 = "llvm.getelementptr"(%9571, %9572) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9574 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9575 = "llvm.getelementptr"(%9573, %9574) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9575) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "ChainIterator2_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "ChainIterator2_field_second"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "ChainIterator2_field_on_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1, !llvm.ptr)>, "offset" = 3 : i32, "meth_name" = "ChainIterator2_field_ChainIterator2_0"} : () -> ()
  "mini.func"() ({
  ^bb1073(%9576 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9577 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9578 : !llvm.ptr, %9579 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9580 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9581 = "mini.wrap"(%9576) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    %9582 = "mini.to_fat_ptr"(%9581) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator2", "to_typ_name" = "ChainIterator2", "invariant"} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    %9583 = "mini.wrap"(%9579) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    %9584 = "mini.to_fat_ptr"(%9583) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    %9585 = "mini.field_access"(%9582) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    "mini.castassign"(%9585, %9584) ({
      %9586 = "mini.to_fat_ptr"(%9584) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "should_offset"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> ()
    %9587 = "mini.wrap"(%9580) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    %9588 = "mini.to_fat_ptr"(%9587) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    %9589 = "mini.field_access"(%9582) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    "mini.castassign"(%9589, %9588) ({
      %9590 = "mini.to_fat_ptr"(%9588) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "should_offset"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> ()
    %9591 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %9592 = "mini.field_access"(%9582) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.ptr<i1>
    "mini.castassign"(%9592, %9591) ({
      %9593 = builtin.unrealized_conversion_cast %9591 : !mini.ptr<i1> to !mini.ptr<i1>
    }) {"from_typ" = i1, "to_typ" = i1, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ", "should_offset"} : (!mini.ptr<i1>, !mini.ptr<i1>) -> ()
  }) {"func_name" = "ChainIterator2_init_firstIterator2T_secondIterator2T", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1074(%9594 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9595 : !llvm.ptr, %9596 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9597 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9598 = "mini.invariant"(%9595) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9599 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1075] : () -> ()
  ^bb1076:
    %9600 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%9600, %9599) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1077] : () -> ()
  ^bb1078:
    %9601 = "llvm.getelementptr"(%9595) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9602 = "llvm.load"(%9601) : (!llvm.ptr) -> !llvm.ptr
    %9603 = "llvm.getelementptr"(%9602) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9604 = "llvm.getelementptr"(%9602) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9605 = "llvm.getelementptr"(%9602) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9606 = "llvm.getelementptr"(%9602) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9607 = "llvm.load"(%9603) : (!llvm.ptr) -> i64
    %9608 = "llvm.load"(%9604) : (!llvm.ptr) -> i64
    %9609 = "llvm.load"(%9605) : (!llvm.ptr) -> !llvm.ptr
    %9610 = "llvm.load"(%9606) : (!llvm.ptr) -> !llvm.ptr
    %9611 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %9612 = "llvm.ptrtoint"(%9611) : (!llvm.ptr) -> i64
    %9613 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %9614 = "mini.subtype"(%9609, %9608, %9607, %9613, %9612, %9610) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9614) [^bb1076, ^bb1076] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1075:
    %9615 = "llvm.getelementptr"(%9595) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9616 = "llvm.load"(%9615) : (!llvm.ptr) -> !llvm.ptr
    %9617 = "llvm.getelementptr"(%9616) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9618 = "llvm.getelementptr"(%9616) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9619 = "llvm.getelementptr"(%9616) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9620 = "llvm.getelementptr"(%9616) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9621 = "llvm.load"(%9617) : (!llvm.ptr) -> i64
    %9622 = "llvm.load"(%9618) : (!llvm.ptr) -> i64
    %9623 = "llvm.load"(%9619) : (!llvm.ptr) -> !llvm.ptr
    %9624 = "llvm.load"(%9620) : (!llvm.ptr) -> !llvm.ptr
    %9625 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %9626 = "llvm.ptrtoint"(%9625) : (!llvm.ptr) -> i64
    %9627 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %9628 = "mini.subtype"(%9623, %9622, %9621, %9627, %9626, %9624) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9628) [^bb1078, ^bb1078] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1077:
    %9629 = "llvm.extractvalue"(%9594) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9630 = "llvm.load"(%9599) : (!llvm.ptr) -> i32
    %9631 = "llvm.getelementptr"(%9629, %9630) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9632 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9633 = "llvm.getelementptr"(%9631, %9632) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9633) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterator2_B_init_firstIterator2T_secondIterator2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1079(%9634 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9635 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9636 : !llvm.ptr):
    %9637 = "mini.wrap"(%9634) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    %9638 = "mini.to_fat_ptr"(%9637) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ChainIterator2", "to_typ_name" = "ChainIterator2", "invariant"} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    %9639 = "mini.field_access"(%9638) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.ptr<i1>
    %9640 = "mini.unwrap"(%9639) : (!mini.ptr<i1>) -> i1
    "mini.if"(%9640) ({
      %9641 = "mini.field_access"(%9638) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
      %9642 = "mini.unwrap"(%9641) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9643 = "mini.field_access"(%9638) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.reified_type
      %9644 = "llvm.load"(%9643) : (!mini.reified_type) -> !llvm.ptr
      %9645 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %9646 = "mini.method_call"(%9645, %9642) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
      %9647 = builtin.unrealized_conversion_cast %9646 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
      %9648 = "mini.checkflag"(%9647) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> i1
      %9649 = "mini.unwrap"(%9648) : (i1) -> i1
      %9650 = builtin.unrealized_conversion_cast %9647 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
      "mini.if"(%9649) ({
        %9651 = "mini.to_fat_ptr"(%9650) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "Object"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">
        %9652 = builtin.unrealized_conversion_cast %9651 : !mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2"> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
        "mini.return"(%9652) : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>) -> ()
        "mini.castassign"(%9650, %9651) ({
          %9653 = builtin.unrealized_conversion_cast %9651 : !mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2"> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
        }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>, !mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">) -> ()
      }) : (i1) -> ()
      %9654 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %9655 = "mini.field_access"(%9638) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.ptr<i1>
      "mini.castassign"(%9655, %9654) ({
        %9656 = builtin.unrealized_conversion_cast %9654 : !mini.ptr<i1> to !mini.ptr<i1>
      }) {"from_typ" = i1, "to_typ" = i1, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ", "should_offset"} : (!mini.ptr<i1>, !mini.ptr<i1>) -> ()
    }) : (i1) -> ()
    %9657 = "mini.field_access"(%9638) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    %9658 = "mini.unwrap"(%9657) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9659 = "mini.field_access"(%9638) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"ChainIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>) -> !mini.reified_type
    %9660 = "llvm.load"(%9659) : (!mini.reified_type) -> !llvm.ptr
    %9661 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9662 = "mini.method_call"(%9661, %9658) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
    %9663 = builtin.unrealized_conversion_cast %9662 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.nil, !mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]>
    %9664 = builtin.unrealized_conversion_cast %9663 : !mini.union<[!mini.nil, !mini.type_param<"T", !mini.fatptr<"Object">, "ChainIterator2">]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
    "mini.return"(%9664) : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "ChainIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1080(%9665 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9666 : !llvm.ptr):
    %9667 = "mini.invariant"(%9666) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9668 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1081] : () -> ()
  ^bb1081:
    %9669 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%9669, %9668) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1082] : () -> ()
  ^bb1082:
    %9670 = "llvm.extractvalue"(%9665) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9671 = "llvm.load"(%9668) : (!llvm.ptr) -> i32
    %9672 = "llvm.getelementptr"(%9670, %9671) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9673 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9674 = "llvm.getelementptr"(%9672, %9673) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9674) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "InterleaveIterable2_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "InterleaveIterable2_field_second"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "InterleaveIterable2_field_InterleaveIterable2_0"} : () -> ()
  "mini.func"() ({
  ^bb1083(%9675 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9676 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9677 : !llvm.ptr, %9678 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9679 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9680 = "mini.wrap"(%9675) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9681 = "mini.to_fat_ptr"(%9680) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable2", "to_typ_name" = "InterleaveIterable2", "invariant"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9682 = "mini.wrap"(%9678) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9683 = "mini.to_fat_ptr"(%9682) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9684 = "mini.field_access"(%9681) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    "mini.castassign"(%9684, %9683) ({
      %9685 = "mini.to_fat_ptr"(%9683) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "should_offset"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> ()
    %9686 = "mini.wrap"(%9679) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9687 = "mini.to_fat_ptr"(%9686) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9688 = "mini.field_access"(%9681) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    "mini.castassign"(%9688, %9687) ({
      %9689 = "mini.to_fat_ptr"(%9687) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "should_offset"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> ()
  }) {"func_name" = "InterleaveIterable2_init_firstIterable2T_secondIterable2T", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1084(%9690 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9691 : !llvm.ptr, %9692 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9693 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9694 = "mini.invariant"(%9691) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9695 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1085] : () -> ()
  ^bb1086:
    %9696 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%9696, %9695) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1087] : () -> ()
  ^bb1088:
    %9697 = "llvm.getelementptr"(%9691) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9698 = "llvm.load"(%9697) : (!llvm.ptr) -> !llvm.ptr
    %9699 = "llvm.getelementptr"(%9698) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9700 = "llvm.getelementptr"(%9698) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9701 = "llvm.getelementptr"(%9698) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9702 = "llvm.getelementptr"(%9698) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9703 = "llvm.load"(%9699) : (!llvm.ptr) -> i64
    %9704 = "llvm.load"(%9700) : (!llvm.ptr) -> i64
    %9705 = "llvm.load"(%9701) : (!llvm.ptr) -> !llvm.ptr
    %9706 = "llvm.load"(%9702) : (!llvm.ptr) -> !llvm.ptr
    %9707 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9708 = "llvm.ptrtoint"(%9707) : (!llvm.ptr) -> i64
    %9709 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9710 = "mini.subtype"(%9705, %9704, %9703, %9709, %9708, %9706) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9710) [^bb1086, ^bb1086] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1085:
    %9711 = "llvm.getelementptr"(%9691) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9712 = "llvm.load"(%9711) : (!llvm.ptr) -> !llvm.ptr
    %9713 = "llvm.getelementptr"(%9712) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9714 = "llvm.getelementptr"(%9712) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9715 = "llvm.getelementptr"(%9712) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9716 = "llvm.getelementptr"(%9712) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9717 = "llvm.load"(%9713) : (!llvm.ptr) -> i64
    %9718 = "llvm.load"(%9714) : (!llvm.ptr) -> i64
    %9719 = "llvm.load"(%9715) : (!llvm.ptr) -> !llvm.ptr
    %9720 = "llvm.load"(%9716) : (!llvm.ptr) -> !llvm.ptr
    %9721 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9722 = "llvm.ptrtoint"(%9721) : (!llvm.ptr) -> i64
    %9723 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9724 = "mini.subtype"(%9719, %9718, %9717, %9723, %9722, %9720) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9724) [^bb1088, ^bb1088] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1087:
    %9725 = "llvm.extractvalue"(%9690) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9726 = "llvm.load"(%9695) : (!llvm.ptr) -> i32
    %9727 = "llvm.getelementptr"(%9725, %9726) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9728 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9729 = "llvm.getelementptr"(%9727, %9728) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9729) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_init_firstIterable2T_secondIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1089(%9730 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9731 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9732 : !llvm.ptr):
    %9733 = "mini.wrap"(%9730) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9734 = "mini.to_fat_ptr"(%9733) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterable2", "to_typ_name" = "InterleaveIterable2", "invariant"} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9735 = "mini.field_access"(%9734) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9736 = "mini.unwrap"(%9735) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9737 = "mini.field_access"(%9734) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.reified_type
    %9738 = "llvm.load"(%9737) : (!mini.reified_type) -> !llvm.ptr
    %9739 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9740 = "mini.method_call"(%9739, %9736) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %9741 = "mini.to_fat_ptr"(%9740) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9742 = "mini.field_access"(%9734) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9743 = "mini.unwrap"(%9742) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9744 = "mini.field_access"(%9734) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.reified_type
    %9745 = "llvm.load"(%9744) : (!mini.reified_type) -> !llvm.ptr
    %9746 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9747 = "mini.method_call"(%9746, %9743) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %9748 = "mini.to_fat_ptr"(%9747) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9749 = "mini.unwrap"(%9741) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9750 = "mini.unwrap"(%9748) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9751 = "mini.field_access"(%9734) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.reified_type
    %9752 = "llvm.load"(%9751) : (!mini.reified_type) -> !llvm.ptr
    %9753 = "mini.parameterization"(%9752) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["InterleaveIterable2.T_subtype_Object"]} : (!llvm.ptr) -> !llvm.ptr
    %9754 = "mini.new"(%9753) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1, !llvm.ptr)>, "class_name" = "InterleaveIterator2", "num_data_fields" = 3 : i32, "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9755 = "mini.field_access"(%9734) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9756 = "mini.unwrap"(%9755) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9757 = "mini.field_access"(%9734) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.reified_type
    %9758 = "llvm.load"(%9757) : (!mini.reified_type) -> !llvm.ptr
    %9759 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9760 = "mini.method_call"(%9759, %9756) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %9761 = "mini.to_fat_ptr"(%9760) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9762 = "mini.field_access"(%9734) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9763 = "mini.unwrap"(%9762) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9764 = "mini.field_access"(%9734) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.reified_type
    %9765 = "llvm.load"(%9764) : (!mini.reified_type) -> !llvm.ptr
    %9766 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %9767 = "mini.method_call"(%9766, %9763) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %9768 = "mini.to_fat_ptr"(%9767) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>
    %9769 = "mini.to_fat_ptr"(%9761) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    %9770 = "mini.unwrap"(%9769) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9771 = "mini.to_fat_ptr"(%9768) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    %9772 = "mini.unwrap"(%9771) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9773 = "mini.unwrap"(%9754) : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %9774 = "mini.field_access"(%9734) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.reified_type
    %9775 = "llvm.load"(%9774) : (!mini.reified_type) -> !llvm.ptr
    %9776 = "mini.parameterization"(%9775) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2InterleaveIterable2.T_subtype_Object", ["InterleaveIterable2.T_subtype_Object"]]} : (!llvm.ptr) -> !llvm.ptr
    %9777 = "mini.parameterization"(%9775) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2InterleaveIterable2.T_subtype_Object", ["InterleaveIterable2.T_subtype_Object"]]} : (!llvm.ptr) -> !llvm.ptr
    %9778 = "mini.parameterizations_array"(%9776, %9777) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%9778, %9773, %9770, %9772) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %9779 = "mini.to_fat_ptr"(%9754) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.return"(%9779) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> ()
  }) {"func_name" = "InterleaveIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1090(%9780 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9781 : !llvm.ptr):
    %9782 = "mini.invariant"(%9781) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9783 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1091] : () -> ()
  ^bb1091:
    %9784 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%9784, %9783) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1092] : () -> ()
  ^bb1092:
    %9785 = "llvm.extractvalue"(%9780) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9786 = "llvm.load"(%9783) : (!llvm.ptr) -> i32
    %9787 = "llvm.getelementptr"(%9785, %9786) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9788 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9789 = "llvm.getelementptr"(%9787, %9788) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9789) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1093(%9790 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9791 : !llvm.ptr, %9792 : !llvm.struct<(!llvm.ptr)>):
    %9793 = "mini.invariant"(%9791) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9794 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1094] : () -> ()
  ^bb1095:
    %9795 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%9795, %9794) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1096] : () -> ()
  ^bb1094:
    %9796 = "llvm.getelementptr"(%9791) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9797 = "llvm.load"(%9796) : (!llvm.ptr) -> !llvm.ptr
    %9798 = "llvm.getelementptr"(%9797) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9799 = "llvm.getelementptr"(%9797) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9800 = "llvm.getelementptr"(%9797) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9801 = "llvm.getelementptr"(%9797) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9802 = "llvm.load"(%9798) : (!llvm.ptr) -> i64
    %9803 = "llvm.load"(%9799) : (!llvm.ptr) -> i64
    %9804 = "llvm.load"(%9800) : (!llvm.ptr) -> !llvm.ptr
    %9805 = "llvm.load"(%9801) : (!llvm.ptr) -> !llvm.ptr
    %9806 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9807 = "llvm.ptrtoint"(%9806) : (!llvm.ptr) -> i64
    %9808 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9809 = "mini.subtype"(%9804, %9803, %9802, %9808, %9807, %9805) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9809) [^bb1095, ^bb1095] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1096:
    %9810 = "llvm.extractvalue"(%9790) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9811 = "llvm.load"(%9794) : (!llvm.ptr) -> i32
    %9812 = "llvm.getelementptr"(%9810, %9811) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9813 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9814 = "llvm.getelementptr"(%9812, %9813) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9814) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1097(%9815 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9816 : !llvm.ptr, %9817 : !llvm.struct<(!llvm.ptr, i160)>, %9818 : !llvm.struct<(!llvm.ptr)>):
    %9819 = "mini.invariant"(%9816) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9820 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1098] : () -> ()
  ^bb1099:
    %9821 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%9821, %9820) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1100] : () -> ()
  ^bb1101:
    %9822 = "llvm.getelementptr"(%9816) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9823 = "llvm.load"(%9822) : (!llvm.ptr) -> !llvm.ptr
    %9824 = "llvm.getelementptr"(%9823) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9825 = "llvm.getelementptr"(%9823) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9826 = "llvm.getelementptr"(%9823) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9827 = "llvm.getelementptr"(%9823) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9828 = "llvm.load"(%9824) : (!llvm.ptr) -> i64
    %9829 = "llvm.load"(%9825) : (!llvm.ptr) -> i64
    %9830 = "llvm.load"(%9826) : (!llvm.ptr) -> !llvm.ptr
    %9831 = "llvm.load"(%9827) : (!llvm.ptr) -> !llvm.ptr
    %9832 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9833 = "llvm.ptrtoint"(%9832) : (!llvm.ptr) -> i64
    %9834 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9835 = "mini.subtype"(%9830, %9829, %9828, %9834, %9833, %9831) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9835) [^bb1099, ^bb1099] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1098:
    %9836 = "llvm.getelementptr"(%9816) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9837 = "llvm.load"(%9836) : (!llvm.ptr) -> !llvm.ptr
    %9838 = "llvm.getelementptr"(%9837) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9839 = "llvm.getelementptr"(%9837) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9840 = "llvm.getelementptr"(%9837) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9841 = "llvm.getelementptr"(%9837) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9842 = "llvm.load"(%9838) : (!llvm.ptr) -> i64
    %9843 = "llvm.load"(%9839) : (!llvm.ptr) -> i64
    %9844 = "llvm.load"(%9840) : (!llvm.ptr) -> !llvm.ptr
    %9845 = "llvm.load"(%9841) : (!llvm.ptr) -> !llvm.ptr
    %9846 = "mini.addr_of"() {"global_name" = @Object} : () -> !llvm.ptr
    %9847 = "llvm.ptrtoint"(%9846) : (!llvm.ptr) -> i64
    %9848 = "llvm.mlir.constant"() <{"value" = 3282773614056351330 : i64}> : () -> i64
    %9849 = "mini.subtype"(%9844, %9843, %9842, %9848, %9847, %9845) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9849) [^bb1101, ^bb1101] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1100:
    %9850 = "llvm.extractvalue"(%9815) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9851 = "llvm.load"(%9820) : (!llvm.ptr) -> i32
    %9852 = "llvm.getelementptr"(%9850, %9851) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9853 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9854 = "llvm.getelementptr"(%9852, %9853) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9854) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1102(%9855 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9856 : !llvm.ptr, %9857 : !llvm.struct<(!llvm.ptr)>):
    %9858 = "mini.invariant"(%9856) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9859 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1103] : () -> ()
  ^bb1104:
    %9860 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%9860, %9859) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1105] : () -> ()
  ^bb1103:
    %9861 = "llvm.getelementptr"(%9856) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9862 = "llvm.load"(%9861) : (!llvm.ptr) -> !llvm.ptr
    %9863 = "llvm.getelementptr"(%9862) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9864 = "llvm.getelementptr"(%9862) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9865 = "llvm.getelementptr"(%9862) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9866 = "llvm.getelementptr"(%9862) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9867 = "llvm.load"(%9863) : (!llvm.ptr) -> i64
    %9868 = "llvm.load"(%9864) : (!llvm.ptr) -> i64
    %9869 = "llvm.load"(%9865) : (!llvm.ptr) -> !llvm.ptr
    %9870 = "llvm.load"(%9866) : (!llvm.ptr) -> !llvm.ptr
    %9871 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9872 = "llvm.ptrtoint"(%9871) : (!llvm.ptr) -> i64
    %9873 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9874 = "mini.subtype"(%9869, %9868, %9867, %9873, %9872, %9870) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9874) [^bb1104, ^bb1104] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1105:
    %9875 = "llvm.extractvalue"(%9855) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9876 = "llvm.load"(%9859) : (!llvm.ptr) -> i32
    %9877 = "llvm.getelementptr"(%9875, %9876) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9878 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9879 = "llvm.getelementptr"(%9877, %9878) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9879) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1106(%9880 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9881 : !llvm.ptr, %9882 : !llvm.struct<(!llvm.ptr)>):
    %9883 = "mini.invariant"(%9881) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9884 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1107] : () -> ()
  ^bb1108:
    %9885 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%9885, %9884) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1109] : () -> ()
  ^bb1107:
    %9886 = "llvm.getelementptr"(%9881) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9887 = "llvm.load"(%9886) : (!llvm.ptr) -> !llvm.ptr
    %9888 = "llvm.getelementptr"(%9887) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9889 = "llvm.getelementptr"(%9887) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9890 = "llvm.getelementptr"(%9887) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9891 = "llvm.getelementptr"(%9887) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9892 = "llvm.load"(%9888) : (!llvm.ptr) -> i64
    %9893 = "llvm.load"(%9889) : (!llvm.ptr) -> i64
    %9894 = "llvm.load"(%9890) : (!llvm.ptr) -> !llvm.ptr
    %9895 = "llvm.load"(%9891) : (!llvm.ptr) -> !llvm.ptr
    %9896 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9897 = "llvm.ptrtoint"(%9896) : (!llvm.ptr) -> i64
    %9898 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9899 = "mini.subtype"(%9894, %9893, %9892, %9898, %9897, %9895) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9899) [^bb1108, ^bb1108] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1109:
    %9900 = "llvm.extractvalue"(%9880) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9901 = "llvm.load"(%9884) : (!llvm.ptr) -> i32
    %9902 = "llvm.getelementptr"(%9900, %9901) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9903 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9904 = "llvm.getelementptr"(%9902, %9903) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9904) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1110(%9905 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9906 : !llvm.ptr, %9907 : !llvm.struct<(!llvm.ptr)>):
    %9908 = "mini.invariant"(%9906) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9909 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1111] : () -> ()
  ^bb1112:
    %9910 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%9910, %9909) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1113] : () -> ()
  ^bb1111:
    %9911 = "llvm.getelementptr"(%9906) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9912 = "llvm.load"(%9911) : (!llvm.ptr) -> !llvm.ptr
    %9913 = "llvm.getelementptr"(%9912) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9914 = "llvm.getelementptr"(%9912) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9915 = "llvm.getelementptr"(%9912) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9916 = "llvm.getelementptr"(%9912) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9917 = "llvm.load"(%9913) : (!llvm.ptr) -> i64
    %9918 = "llvm.load"(%9914) : (!llvm.ptr) -> i64
    %9919 = "llvm.load"(%9915) : (!llvm.ptr) -> !llvm.ptr
    %9920 = "llvm.load"(%9916) : (!llvm.ptr) -> !llvm.ptr
    %9921 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9922 = "llvm.ptrtoint"(%9921) : (!llvm.ptr) -> i64
    %9923 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9924 = "mini.subtype"(%9919, %9918, %9917, %9923, %9922, %9920) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9924) [^bb1112, ^bb1112] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1113:
    %9925 = "llvm.extractvalue"(%9905) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9926 = "llvm.load"(%9909) : (!llvm.ptr) -> i32
    %9927 = "llvm.getelementptr"(%9925, %9926) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9928 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9929 = "llvm.getelementptr"(%9927, %9928) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9929) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1114(%9930 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9931 : !llvm.ptr, %9932 : !llvm.struct<(!llvm.ptr)>):
    %9933 = "mini.invariant"(%9931) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9934 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1115] : () -> ()
  ^bb1116:
    %9935 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%9935, %9934) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1117] : () -> ()
  ^bb1115:
    %9936 = "llvm.getelementptr"(%9931) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9937 = "llvm.load"(%9936) : (!llvm.ptr) -> !llvm.ptr
    %9938 = "llvm.getelementptr"(%9937) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9939 = "llvm.getelementptr"(%9937) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9940 = "llvm.getelementptr"(%9937) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9941 = "llvm.getelementptr"(%9937) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9942 = "llvm.load"(%9938) : (!llvm.ptr) -> i64
    %9943 = "llvm.load"(%9939) : (!llvm.ptr) -> i64
    %9944 = "llvm.load"(%9940) : (!llvm.ptr) -> !llvm.ptr
    %9945 = "llvm.load"(%9941) : (!llvm.ptr) -> !llvm.ptr
    %9946 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %9947 = "llvm.ptrtoint"(%9946) : (!llvm.ptr) -> i64
    %9948 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %9949 = "mini.subtype"(%9944, %9943, %9942, %9948, %9947, %9945) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9949) [^bb1116, ^bb1116] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1117:
    %9950 = "llvm.extractvalue"(%9930) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9951 = "llvm.load"(%9934) : (!llvm.ptr) -> i32
    %9952 = "llvm.getelementptr"(%9950, %9951) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9953 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9954 = "llvm.getelementptr"(%9952, %9953) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9954) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1118(%9955 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9956 : !llvm.ptr, %9957 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9958 = "mini.invariant"(%9956) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9959 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1119] : () -> ()
  ^bb1120:
    %9960 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%9960, %9959) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1121] : () -> ()
  ^bb1119:
    %9961 = "llvm.getelementptr"(%9956) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9962 = "llvm.load"(%9961) : (!llvm.ptr) -> !llvm.ptr
    %9963 = "llvm.getelementptr"(%9962) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9964 = "llvm.getelementptr"(%9962) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9965 = "llvm.getelementptr"(%9962) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9966 = "llvm.getelementptr"(%9962) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9967 = "llvm.load"(%9963) : (!llvm.ptr) -> i64
    %9968 = "llvm.load"(%9964) : (!llvm.ptr) -> i64
    %9969 = "llvm.load"(%9965) : (!llvm.ptr) -> !llvm.ptr
    %9970 = "llvm.load"(%9966) : (!llvm.ptr) -> !llvm.ptr
    %9971 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9972 = "llvm.ptrtoint"(%9971) : (!llvm.ptr) -> i64
    %9973 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9974 = "mini.subtype"(%9969, %9968, %9967, %9973, %9972, %9970) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9974) [^bb1120, ^bb1120] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1121:
    %9975 = "llvm.extractvalue"(%9955) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %9976 = "llvm.load"(%9959) : (!llvm.ptr) -> i32
    %9977 = "llvm.getelementptr"(%9975, %9976) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %9978 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %9979 = "llvm.getelementptr"(%9977, %9978) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%9979) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1122(%9980 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %9981 : !llvm.ptr, %9982 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %9983 = "mini.invariant"(%9981) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %9984 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1123] : () -> ()
  ^bb1124:
    %9985 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%9985, %9984) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1125] : () -> ()
  ^bb1123:
    %9986 = "llvm.getelementptr"(%9981) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %9987 = "llvm.load"(%9986) : (!llvm.ptr) -> !llvm.ptr
    %9988 = "llvm.getelementptr"(%9987) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9989 = "llvm.getelementptr"(%9987) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9990 = "llvm.getelementptr"(%9987) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9991 = "llvm.getelementptr"(%9987) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %9992 = "llvm.load"(%9988) : (!llvm.ptr) -> i64
    %9993 = "llvm.load"(%9989) : (!llvm.ptr) -> i64
    %9994 = "llvm.load"(%9990) : (!llvm.ptr) -> !llvm.ptr
    %9995 = "llvm.load"(%9991) : (!llvm.ptr) -> !llvm.ptr
    %9996 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %9997 = "llvm.ptrtoint"(%9996) : (!llvm.ptr) -> i64
    %9998 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %9999 = "mini.subtype"(%9994, %9993, %9992, %9998, %9997, %9995) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%9999) [^bb1124, ^bb1124] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1125:
    %10000 = "llvm.extractvalue"(%9980) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10001 = "llvm.load"(%9984) : (!llvm.ptr) -> i32
    %10002 = "llvm.getelementptr"(%10000, %10001) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10003 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10004 = "llvm.getelementptr"(%10002, %10003) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10004) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1126(%10005 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10006 : !llvm.ptr, %10007 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10008 = "mini.invariant"(%10006) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10009 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1127] : () -> ()
  ^bb1128:
    %10010 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%10010, %10009) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1129] : () -> ()
  ^bb1127:
    %10011 = "llvm.getelementptr"(%10006) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10012 = "llvm.load"(%10011) : (!llvm.ptr) -> !llvm.ptr
    %10013 = "llvm.getelementptr"(%10012) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10014 = "llvm.getelementptr"(%10012) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10015 = "llvm.getelementptr"(%10012) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10016 = "llvm.getelementptr"(%10012) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10017 = "llvm.load"(%10013) : (!llvm.ptr) -> i64
    %10018 = "llvm.load"(%10014) : (!llvm.ptr) -> i64
    %10019 = "llvm.load"(%10015) : (!llvm.ptr) -> !llvm.ptr
    %10020 = "llvm.load"(%10016) : (!llvm.ptr) -> !llvm.ptr
    %10021 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10022 = "llvm.ptrtoint"(%10021) : (!llvm.ptr) -> i64
    %10023 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10024 = "mini.subtype"(%10019, %10018, %10017, %10023, %10022, %10020) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10024) [^bb1128, ^bb1128] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1129:
    %10025 = "llvm.extractvalue"(%10005) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10026 = "llvm.load"(%10009) : (!llvm.ptr) -> i32
    %10027 = "llvm.getelementptr"(%10025, %10026) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10028 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10029 = "llvm.getelementptr"(%10027, %10028) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10029) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1130(%10030 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10031 : !llvm.ptr, %10032 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10033 = "mini.invariant"(%10031) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10034 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1131] : () -> ()
  ^bb1132:
    %10035 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%10035, %10034) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1133] : () -> ()
  ^bb1131:
    %10036 = "llvm.getelementptr"(%10031) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10037 = "llvm.load"(%10036) : (!llvm.ptr) -> !llvm.ptr
    %10038 = "llvm.getelementptr"(%10037) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10039 = "llvm.getelementptr"(%10037) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10040 = "llvm.getelementptr"(%10037) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10041 = "llvm.getelementptr"(%10037) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10042 = "llvm.load"(%10038) : (!llvm.ptr) -> i64
    %10043 = "llvm.load"(%10039) : (!llvm.ptr) -> i64
    %10044 = "llvm.load"(%10040) : (!llvm.ptr) -> !llvm.ptr
    %10045 = "llvm.load"(%10041) : (!llvm.ptr) -> !llvm.ptr
    %10046 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10047 = "llvm.ptrtoint"(%10046) : (!llvm.ptr) -> i64
    %10048 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10049 = "mini.subtype"(%10044, %10043, %10042, %10048, %10047, %10045) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10049) [^bb1132, ^bb1132] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1133:
    %10050 = "llvm.extractvalue"(%10030) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10051 = "llvm.load"(%10034) : (!llvm.ptr) -> i32
    %10052 = "llvm.getelementptr"(%10050, %10051) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10053 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10054 = "llvm.getelementptr"(%10052, %10053) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10054) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "InterleaveIterator2_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "InterleaveIterator2_field_second"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "InterleaveIterator2_field_on_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1, !llvm.ptr)>, "offset" = 3 : i32, "meth_name" = "InterleaveIterator2_field_InterleaveIterator2_0"} : () -> ()
  "mini.func"() ({
  ^bb1134(%10055 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10056 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10057 : !llvm.ptr, %10058 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10059 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10060 = "mini.wrap"(%10055) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    %10061 = "mini.to_fat_ptr"(%10060) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator2", "to_typ_name" = "InterleaveIterator2", "invariant"} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    %10062 = "mini.wrap"(%10058) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    %10063 = "mini.to_fat_ptr"(%10062) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    %10064 = "mini.field_access"(%10061) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    "mini.castassign"(%10064, %10063) ({
      %10065 = "mini.to_fat_ptr"(%10063) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "should_offset"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> ()
    %10066 = "mini.wrap"(%10059) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    %10067 = "mini.to_fat_ptr"(%10066) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    %10068 = "mini.field_access"(%10061) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    "mini.castassign"(%10068, %10067) ({
      %10069 = "mini.to_fat_ptr"(%10067) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "should_offset"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> ()
    %10070 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %10071 = "mini.field_access"(%10061) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.ptr<i1>
    "mini.castassign"(%10071, %10070) ({
      %10072 = builtin.unrealized_conversion_cast %10070 : !mini.ptr<i1> to !mini.ptr<i1>
    }) {"from_typ" = i1, "to_typ" = i1, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ", "should_offset"} : (!mini.ptr<i1>, !mini.ptr<i1>) -> ()
  }) {"func_name" = "InterleaveIterator2_init_firstIterator2T_secondIterator2T", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1135(%10073 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10074 : !llvm.ptr, %10075 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10076 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10077 = "mini.invariant"(%10074) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10078 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1136] : () -> ()
  ^bb1137:
    %10079 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%10079, %10078) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1138] : () -> ()
  ^bb1139:
    %10080 = "llvm.getelementptr"(%10074) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10081 = "llvm.load"(%10080) : (!llvm.ptr) -> !llvm.ptr
    %10082 = "llvm.getelementptr"(%10081) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10083 = "llvm.getelementptr"(%10081) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10084 = "llvm.getelementptr"(%10081) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10085 = "llvm.getelementptr"(%10081) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10086 = "llvm.load"(%10082) : (!llvm.ptr) -> i64
    %10087 = "llvm.load"(%10083) : (!llvm.ptr) -> i64
    %10088 = "llvm.load"(%10084) : (!llvm.ptr) -> !llvm.ptr
    %10089 = "llvm.load"(%10085) : (!llvm.ptr) -> !llvm.ptr
    %10090 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %10091 = "llvm.ptrtoint"(%10090) : (!llvm.ptr) -> i64
    %10092 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %10093 = "mini.subtype"(%10088, %10087, %10086, %10092, %10091, %10089) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10093) [^bb1137, ^bb1137] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1136:
    %10094 = "llvm.getelementptr"(%10074) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10095 = "llvm.load"(%10094) : (!llvm.ptr) -> !llvm.ptr
    %10096 = "llvm.getelementptr"(%10095) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10097 = "llvm.getelementptr"(%10095) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10098 = "llvm.getelementptr"(%10095) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10099 = "llvm.getelementptr"(%10095) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10100 = "llvm.load"(%10096) : (!llvm.ptr) -> i64
    %10101 = "llvm.load"(%10097) : (!llvm.ptr) -> i64
    %10102 = "llvm.load"(%10098) : (!llvm.ptr) -> !llvm.ptr
    %10103 = "llvm.load"(%10099) : (!llvm.ptr) -> !llvm.ptr
    %10104 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %10105 = "llvm.ptrtoint"(%10104) : (!llvm.ptr) -> i64
    %10106 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %10107 = "mini.subtype"(%10102, %10101, %10100, %10106, %10105, %10103) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10107) [^bb1139, ^bb1139] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1138:
    %10108 = "llvm.extractvalue"(%10073) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10109 = "llvm.load"(%10078) : (!llvm.ptr) -> i32
    %10110 = "llvm.getelementptr"(%10108, %10109) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10111 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10112 = "llvm.getelementptr"(%10110, %10111) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10112) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterator2_B_init_firstIterator2T_secondIterator2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1140(%10113 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10114 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10115 : !llvm.ptr):
    %10116 = "mini.wrap"(%10113) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    %10117 = "mini.to_fat_ptr"(%10116) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "InterleaveIterator2", "to_typ_name" = "InterleaveIterator2", "invariant"} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    %10118 = "mini.field_access"(%10117) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.ptr<i1>
    %10119 = "mini.unwrap"(%10118) : (!mini.ptr<i1>) -> i1
    "mini.if"(%10119) ({
      %10120 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %10121 = "mini.field_access"(%10117) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.ptr<i1>
      "mini.castassign"(%10121, %10120) ({
        %10122 = builtin.unrealized_conversion_cast %10120 : !mini.ptr<i1> to !mini.ptr<i1>
      }) {"from_typ" = i1, "to_typ" = i1, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ", "should_offset"} : (!mini.ptr<i1>, !mini.ptr<i1>) -> ()
      %10123 = "mini.field_access"(%10117) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
      %10124 = "mini.unwrap"(%10123) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %10125 = "mini.field_access"(%10117) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.reified_type
      %10126 = "llvm.load"(%10125) : (!mini.reified_type) -> !llvm.ptr
      %10127 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %10128 = "mini.method_call"(%10127, %10124) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
      %10129 = builtin.unrealized_conversion_cast %10128 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">, !mini.nil]>
      %10130 = builtin.unrealized_conversion_cast %10129 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
      "mini.return"(%10130) : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %10131 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %10132 = "mini.field_access"(%10117) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.ptr<i1>
    "mini.castassign"(%10132, %10131) ({
      %10133 = builtin.unrealized_conversion_cast %10131 : !mini.ptr<i1> to !mini.ptr<i1>
    }) {"from_typ" = i1, "to_typ" = i1, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ", "should_offset"} : (!mini.ptr<i1>, !mini.ptr<i1>) -> ()
    %10134 = "mini.field_access"(%10117) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>
    %10135 = "mini.unwrap"(%10134) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10136 = "mini.field_access"(%10117) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"InterleaveIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">]>) -> !mini.reified_type
    %10137 = "llvm.load"(%10136) : (!mini.reified_type) -> !llvm.ptr
    %10138 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %10139 = "mini.method_call"(%10138, %10135) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
    %10140 = builtin.unrealized_conversion_cast %10139 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">, !mini.nil]>
    %10141 = builtin.unrealized_conversion_cast %10140 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "InterleaveIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
    "mini.return"(%10141) : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "InterleaveIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1141(%10142 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10143 : !llvm.ptr):
    %10144 = "mini.invariant"(%10143) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10145 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1142] : () -> ()
  ^bb1142:
    %10146 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%10146, %10145) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1143] : () -> ()
  ^bb1143:
    %10147 = "llvm.extractvalue"(%10142) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10148 = "llvm.load"(%10145) : (!llvm.ptr) -> i32
    %10149 = "llvm.getelementptr"(%10147, %10148) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10150 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10151 = "llvm.getelementptr"(%10149, %10150) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10151) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "ZipIterable2_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "ZipIterable2_field_second"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "ZipIterable2_field_ZipIterable2_0"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 3 : i32, "meth_name" = "ZipIterable2_field_ZipIterable2_1"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 4 : i32, "meth_name" = "ZipIterable2_field_ZipIterable2_2"} : () -> ()
  "mini.func"() ({
  ^bb1144(%10152 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10153 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10154 : !llvm.ptr, %10155 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10156 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10157 = "mini.wrap"(%10152) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10158 = "mini.to_fat_ptr"(%10157) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable2", "to_typ_name" = "ZipIterable2", "invariant"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10159 = "mini.wrap"(%10155) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10160 = "mini.to_fat_ptr"(%10159) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10161 = "mini.field_access"(%10158) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>
    "mini.castassign"(%10161, %10160) ({
      %10162 = "mini.to_fat_ptr"(%10160) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "should_offset"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>) -> ()
    %10163 = "mini.wrap"(%10156) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10164 = "mini.to_fat_ptr"(%10163) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10165 = "mini.field_access"(%10158) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>
    "mini.castassign"(%10165, %10164) ({
      %10166 = "mini.to_fat_ptr"(%10164) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "should_offset"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> ()
  }) {"func_name" = "ZipIterable2_init_firstIterable2T_secondIterable2U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1145(%10167 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10168 : !llvm.ptr, %10169 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10170 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10171 = "mini.invariant"(%10168) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10172 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1146] : () -> ()
  ^bb1147:
    %10173 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%10173, %10172) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1148] : () -> ()
  ^bb1149:
    %10174 = "llvm.getelementptr"(%10168) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10175 = "llvm.load"(%10174) : (!llvm.ptr) -> !llvm.ptr
    %10176 = "llvm.getelementptr"(%10175) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10177 = "llvm.getelementptr"(%10175) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10178 = "llvm.getelementptr"(%10175) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10179 = "llvm.getelementptr"(%10175) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10180 = "llvm.load"(%10176) : (!llvm.ptr) -> i64
    %10181 = "llvm.load"(%10177) : (!llvm.ptr) -> i64
    %10182 = "llvm.load"(%10178) : (!llvm.ptr) -> !llvm.ptr
    %10183 = "llvm.load"(%10179) : (!llvm.ptr) -> !llvm.ptr
    %10184 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10185 = "llvm.ptrtoint"(%10184) : (!llvm.ptr) -> i64
    %10186 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10187 = "mini.subtype"(%10182, %10181, %10180, %10186, %10185, %10183) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10187) [^bb1147, ^bb1147] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1146:
    %10188 = "llvm.getelementptr"(%10168) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10189 = "llvm.load"(%10188) : (!llvm.ptr) -> !llvm.ptr
    %10190 = "llvm.getelementptr"(%10189) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10191 = "llvm.getelementptr"(%10189) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10192 = "llvm.getelementptr"(%10189) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10193 = "llvm.getelementptr"(%10189) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10194 = "llvm.load"(%10190) : (!llvm.ptr) -> i64
    %10195 = "llvm.load"(%10191) : (!llvm.ptr) -> i64
    %10196 = "llvm.load"(%10192) : (!llvm.ptr) -> !llvm.ptr
    %10197 = "llvm.load"(%10193) : (!llvm.ptr) -> !llvm.ptr
    %10198 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10199 = "llvm.ptrtoint"(%10198) : (!llvm.ptr) -> i64
    %10200 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10201 = "mini.subtype"(%10196, %10195, %10194, %10200, %10199, %10197) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10201) [^bb1149, ^bb1149] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1148:
    %10202 = "llvm.extractvalue"(%10167) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10203 = "llvm.load"(%10172) : (!llvm.ptr) -> i32
    %10204 = "llvm.getelementptr"(%10202, %10203) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10205 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10206 = "llvm.getelementptr"(%10204, %10205) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10206) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_init_firstIterable2T_secondIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1150(%10207 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10208 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10209 : !llvm.ptr):
    %10210 = "mini.wrap"(%10207) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10211 = "mini.to_fat_ptr"(%10210) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterable2", "to_typ_name" = "ZipIterable2", "invariant"} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10212 = "mini.field_access"(%10211) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10213 = "mini.unwrap"(%10212) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10214 = "mini.field_access"(%10211) {"offset" = 2 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.reified_type
    %10215 = "llvm.load"(%10214) : (!mini.reified_type) -> !llvm.ptr
    %10216 = "mini.field_access"(%10211) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.reified_type
    %10217 = "llvm.load"(%10216) : (!mini.reified_type) -> !llvm.ptr
    %10218 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %10219 = "mini.method_call"(%10218, %10213) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %10220 = "mini.to_fat_ptr"(%10219) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10221 = "mini.field_access"(%10211) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10222 = "mini.unwrap"(%10221) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10223 = "mini.field_access"(%10211) {"offset" = 2 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.reified_type
    %10224 = "llvm.load"(%10223) : (!mini.reified_type) -> !llvm.ptr
    %10225 = "mini.field_access"(%10211) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.reified_type
    %10226 = "llvm.load"(%10225) : (!mini.reified_type) -> !llvm.ptr
    %10227 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %10228 = "mini.method_call"(%10227, %10222) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %10229 = "mini.to_fat_ptr"(%10228) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10230 = "mini.unwrap"(%10220) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10231 = "mini.unwrap"(%10229) : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10232 = "mini.field_access"(%10211) {"offset" = 2 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.reified_type
    %10233 = "llvm.load"(%10232) : (!mini.reified_type) -> !llvm.ptr
    %10234 = "mini.field_access"(%10211) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.reified_type
    %10235 = "llvm.load"(%10234) : (!mini.reified_type) -> !llvm.ptr
    %10236 = "mini.parameterization"(%10233, %10235) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["ZipIterable2.T_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %10237 = "mini.parameterization"(%10233, %10235) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["ZipIterable2.U_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %10238 = "mini.parameterization"(%10233, %10235) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairZipIterable2.T_subtype_Object._ZipIterable2.U_subtype_Object", ["ZipIterable2.T_subtype_Object"], ["ZipIterable2.U_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %10239 = "mini.new"(%10236, %10237, %10238) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "class_name" = "ZipIterator2", "num_data_fields" = 2 : i32, "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10240 = "mini.field_access"(%10211) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10241 = "mini.unwrap"(%10240) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10242 = "mini.field_access"(%10211) {"offset" = 2 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.reified_type
    %10243 = "llvm.load"(%10242) : (!mini.reified_type) -> !llvm.ptr
    %10244 = "mini.field_access"(%10211) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.reified_type
    %10245 = "llvm.load"(%10244) : (!mini.reified_type) -> !llvm.ptr
    %10246 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %10247 = "mini.method_call"(%10246, %10241) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %10248 = "mini.to_fat_ptr"(%10247) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10249 = "mini.field_access"(%10211) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10250 = "mini.unwrap"(%10249) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10251 = "mini.field_access"(%10211) {"offset" = 2 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.reified_type
    %10252 = "llvm.load"(%10251) : (!mini.reified_type) -> !llvm.ptr
    %10253 = "mini.field_access"(%10211) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.reified_type
    %10254 = "llvm.load"(%10253) : (!mini.reified_type) -> !llvm.ptr
    %10255 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %10256 = "mini.method_call"(%10255, %10250) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %10257 = "mini.to_fat_ptr"(%10256) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>
    %10258 = "mini.to_fat_ptr"(%10248) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">]>
    %10259 = "mini.unwrap"(%10258) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10260 = "mini.to_fat_ptr"(%10257) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>
    %10261 = "mini.unwrap"(%10260) : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10262 = "mini.unwrap"(%10239) : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10263 = "mini.field_access"(%10211) {"offset" = 2 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.reified_type
    %10264 = "llvm.load"(%10263) : (!mini.reified_type) -> !llvm.ptr
    %10265 = "mini.field_access"(%10211) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.reified_type
    %10266 = "llvm.load"(%10265) : (!mini.reified_type) -> !llvm.ptr
    %10267 = "mini.parameterization"(%10264, %10266) {"id_hierarchy" = ["Iterator2", [0 : i32]], "name_hierarchy" = ["Iterator2ZipIterable2.T_subtype_Object", ["ZipIterable2.T_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %10268 = "mini.parameterization"(%10264, %10266) {"id_hierarchy" = ["Iterator2", [1 : i32]], "name_hierarchy" = ["Iterator2ZipIterable2.U_subtype_Object", ["ZipIterable2.U_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %10269 = "mini.parameterizations_array"(%10267, %10268) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%10269, %10262, %10259, %10261) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %10270 = "mini.to_fat_ptr"(%10239) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.return"(%10270) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> ()
  }) {"func_name" = "ZipIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1151(%10271 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10272 : !llvm.ptr):
    %10273 = "mini.invariant"(%10272) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10274 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1152] : () -> ()
  ^bb1152:
    %10275 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%10275, %10274) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1153] : () -> ()
  ^bb1153:
    %10276 = "llvm.extractvalue"(%10271) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10277 = "llvm.load"(%10274) : (!llvm.ptr) -> i32
    %10278 = "llvm.getelementptr"(%10276, %10277) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10279 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10280 = "llvm.getelementptr"(%10278, %10279) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10280) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1154(%10281 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10282 : !llvm.ptr, %10283 : !llvm.struct<(!llvm.ptr)>):
    %10284 = "mini.invariant"(%10282) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10285 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1155] : () -> ()
  ^bb1156:
    %10286 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%10286, %10285) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1157] : () -> ()
  ^bb1155:
    %10287 = "llvm.getelementptr"(%10282) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10288 = "llvm.load"(%10287) : (!llvm.ptr) -> !llvm.ptr
    %10289 = "llvm.getelementptr"(%10288) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10290 = "llvm.getelementptr"(%10288) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10291 = "llvm.getelementptr"(%10288) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10292 = "llvm.getelementptr"(%10288) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10293 = "llvm.load"(%10289) : (!llvm.ptr) -> i64
    %10294 = "llvm.load"(%10290) : (!llvm.ptr) -> i64
    %10295 = "llvm.load"(%10291) : (!llvm.ptr) -> !llvm.ptr
    %10296 = "llvm.load"(%10292) : (!llvm.ptr) -> !llvm.ptr
    %10297 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10298 = "llvm.ptrtoint"(%10297) : (!llvm.ptr) -> i64
    %10299 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10300 = "mini.subtype"(%10295, %10294, %10293, %10299, %10298, %10296) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10300) [^bb1156, ^bb1156] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1157:
    %10301 = "llvm.extractvalue"(%10281) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10302 = "llvm.load"(%10285) : (!llvm.ptr) -> i32
    %10303 = "llvm.getelementptr"(%10301, %10302) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10304 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10305 = "llvm.getelementptr"(%10303, %10304) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10305) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1158(%10306 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10307 : !llvm.ptr, %10308 : !llvm.struct<(!llvm.ptr, i160)>, %10309 : !llvm.struct<(!llvm.ptr)>):
    %10310 = "mini.invariant"(%10307) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10311 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1159] : () -> ()
  ^bb1160:
    %10312 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%10312, %10311) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1161] : () -> ()
  ^bb1162:
    %10313 = "llvm.getelementptr"(%10307) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10314 = "llvm.load"(%10313) : (!llvm.ptr) -> !llvm.ptr
    %10315 = "llvm.getelementptr"(%10314) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10316 = "llvm.getelementptr"(%10314) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10317 = "llvm.getelementptr"(%10314) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10318 = "llvm.getelementptr"(%10314) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10319 = "llvm.load"(%10315) : (!llvm.ptr) -> i64
    %10320 = "llvm.load"(%10316) : (!llvm.ptr) -> i64
    %10321 = "llvm.load"(%10317) : (!llvm.ptr) -> !llvm.ptr
    %10322 = "llvm.load"(%10318) : (!llvm.ptr) -> !llvm.ptr
    %10323 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10324 = "llvm.ptrtoint"(%10323) : (!llvm.ptr) -> i64
    %10325 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10326 = "mini.subtype"(%10321, %10320, %10319, %10325, %10324, %10322) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10326) [^bb1160, ^bb1160] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1159:
    %10327 = "llvm.getelementptr"(%10307) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10328 = "llvm.load"(%10327) : (!llvm.ptr) -> !llvm.ptr
    %10329 = "llvm.getelementptr"(%10328) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10330 = "llvm.getelementptr"(%10328) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10331 = "llvm.getelementptr"(%10328) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10332 = "llvm.getelementptr"(%10328) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10333 = "llvm.load"(%10329) : (!llvm.ptr) -> i64
    %10334 = "llvm.load"(%10330) : (!llvm.ptr) -> i64
    %10335 = "llvm.load"(%10331) : (!llvm.ptr) -> !llvm.ptr
    %10336 = "llvm.load"(%10332) : (!llvm.ptr) -> !llvm.ptr
    %10337 = "mini.addr_of"() {"global_name" = @Pair} : () -> !llvm.ptr
    %10338 = "llvm.ptrtoint"(%10337) : (!llvm.ptr) -> i64
    %10339 = "llvm.mlir.constant"() <{"value" = 9197944775169318296 : i64}> : () -> i64
    %10340 = "mini.subtype"(%10335, %10334, %10333, %10339, %10338, %10336) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10340) [^bb1162, ^bb1162] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1161:
    %10341 = "llvm.extractvalue"(%10306) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10342 = "llvm.load"(%10311) : (!llvm.ptr) -> i32
    %10343 = "llvm.getelementptr"(%10341, %10342) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10344 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10345 = "llvm.getelementptr"(%10343, %10344) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10345) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1163(%10346 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10347 : !llvm.ptr, %10348 : !llvm.struct<(!llvm.ptr)>):
    %10349 = "mini.invariant"(%10347) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10350 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1164] : () -> ()
  ^bb1165:
    %10351 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%10351, %10350) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1166] : () -> ()
  ^bb1164:
    %10352 = "llvm.getelementptr"(%10347) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10353 = "llvm.load"(%10352) : (!llvm.ptr) -> !llvm.ptr
    %10354 = "llvm.getelementptr"(%10353) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10355 = "llvm.getelementptr"(%10353) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10356 = "llvm.getelementptr"(%10353) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10357 = "llvm.getelementptr"(%10353) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10358 = "llvm.load"(%10354) : (!llvm.ptr) -> i64
    %10359 = "llvm.load"(%10355) : (!llvm.ptr) -> i64
    %10360 = "llvm.load"(%10356) : (!llvm.ptr) -> !llvm.ptr
    %10361 = "llvm.load"(%10357) : (!llvm.ptr) -> !llvm.ptr
    %10362 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10363 = "llvm.ptrtoint"(%10362) : (!llvm.ptr) -> i64
    %10364 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10365 = "mini.subtype"(%10360, %10359, %10358, %10364, %10363, %10361) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10365) [^bb1165, ^bb1165] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1166:
    %10366 = "llvm.extractvalue"(%10346) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10367 = "llvm.load"(%10350) : (!llvm.ptr) -> i32
    %10368 = "llvm.getelementptr"(%10366, %10367) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10369 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10370 = "llvm.getelementptr"(%10368, %10369) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10370) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1167(%10371 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10372 : !llvm.ptr, %10373 : !llvm.struct<(!llvm.ptr)>):
    %10374 = "mini.invariant"(%10372) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10375 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1168] : () -> ()
  ^bb1169:
    %10376 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%10376, %10375) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1170] : () -> ()
  ^bb1168:
    %10377 = "llvm.getelementptr"(%10372) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10378 = "llvm.load"(%10377) : (!llvm.ptr) -> !llvm.ptr
    %10379 = "llvm.getelementptr"(%10378) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10380 = "llvm.getelementptr"(%10378) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10381 = "llvm.getelementptr"(%10378) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10382 = "llvm.getelementptr"(%10378) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10383 = "llvm.load"(%10379) : (!llvm.ptr) -> i64
    %10384 = "llvm.load"(%10380) : (!llvm.ptr) -> i64
    %10385 = "llvm.load"(%10381) : (!llvm.ptr) -> !llvm.ptr
    %10386 = "llvm.load"(%10382) : (!llvm.ptr) -> !llvm.ptr
    %10387 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10388 = "llvm.ptrtoint"(%10387) : (!llvm.ptr) -> i64
    %10389 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10390 = "mini.subtype"(%10385, %10384, %10383, %10389, %10388, %10386) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10390) [^bb1169, ^bb1169] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1170:
    %10391 = "llvm.extractvalue"(%10371) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10392 = "llvm.load"(%10375) : (!llvm.ptr) -> i32
    %10393 = "llvm.getelementptr"(%10391, %10392) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10394 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10395 = "llvm.getelementptr"(%10393, %10394) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10395) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1171(%10396 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10397 : !llvm.ptr, %10398 : !llvm.struct<(!llvm.ptr)>):
    %10399 = "mini.invariant"(%10397) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10400 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1172] : () -> ()
  ^bb1173:
    %10401 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%10401, %10400) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1174] : () -> ()
  ^bb1172:
    %10402 = "llvm.getelementptr"(%10397) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10403 = "llvm.load"(%10402) : (!llvm.ptr) -> !llvm.ptr
    %10404 = "llvm.getelementptr"(%10403) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10405 = "llvm.getelementptr"(%10403) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10406 = "llvm.getelementptr"(%10403) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10407 = "llvm.getelementptr"(%10403) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10408 = "llvm.load"(%10404) : (!llvm.ptr) -> i64
    %10409 = "llvm.load"(%10405) : (!llvm.ptr) -> i64
    %10410 = "llvm.load"(%10406) : (!llvm.ptr) -> !llvm.ptr
    %10411 = "llvm.load"(%10407) : (!llvm.ptr) -> !llvm.ptr
    %10412 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10413 = "llvm.ptrtoint"(%10412) : (!llvm.ptr) -> i64
    %10414 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10415 = "mini.subtype"(%10410, %10409, %10408, %10414, %10413, %10411) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10415) [^bb1173, ^bb1173] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1174:
    %10416 = "llvm.extractvalue"(%10396) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10417 = "llvm.load"(%10400) : (!llvm.ptr) -> i32
    %10418 = "llvm.getelementptr"(%10416, %10417) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10419 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10420 = "llvm.getelementptr"(%10418, %10419) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10420) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1175(%10421 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10422 : !llvm.ptr, %10423 : !llvm.struct<(!llvm.ptr)>):
    %10424 = "mini.invariant"(%10422) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10425 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1176] : () -> ()
  ^bb1177:
    %10426 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%10426, %10425) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1178] : () -> ()
  ^bb1176:
    %10427 = "llvm.getelementptr"(%10422) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10428 = "llvm.load"(%10427) : (!llvm.ptr) -> !llvm.ptr
    %10429 = "llvm.getelementptr"(%10428) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10430 = "llvm.getelementptr"(%10428) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10431 = "llvm.getelementptr"(%10428) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10432 = "llvm.getelementptr"(%10428) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10433 = "llvm.load"(%10429) : (!llvm.ptr) -> i64
    %10434 = "llvm.load"(%10430) : (!llvm.ptr) -> i64
    %10435 = "llvm.load"(%10431) : (!llvm.ptr) -> !llvm.ptr
    %10436 = "llvm.load"(%10432) : (!llvm.ptr) -> !llvm.ptr
    %10437 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10438 = "llvm.ptrtoint"(%10437) : (!llvm.ptr) -> i64
    %10439 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10440 = "mini.subtype"(%10435, %10434, %10433, %10439, %10438, %10436) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10440) [^bb1177, ^bb1177] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1178:
    %10441 = "llvm.extractvalue"(%10421) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10442 = "llvm.load"(%10425) : (!llvm.ptr) -> i32
    %10443 = "llvm.getelementptr"(%10441, %10442) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10444 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10445 = "llvm.getelementptr"(%10443, %10444) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10445) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1179(%10446 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10447 : !llvm.ptr, %10448 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10449 = "mini.invariant"(%10447) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10450 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1180] : () -> ()
  ^bb1181:
    %10451 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%10451, %10450) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1182] : () -> ()
  ^bb1180:
    %10452 = "llvm.getelementptr"(%10447) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10453 = "llvm.load"(%10452) : (!llvm.ptr) -> !llvm.ptr
    %10454 = "llvm.getelementptr"(%10453) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10455 = "llvm.getelementptr"(%10453) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10456 = "llvm.getelementptr"(%10453) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10457 = "llvm.getelementptr"(%10453) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10458 = "llvm.load"(%10454) : (!llvm.ptr) -> i64
    %10459 = "llvm.load"(%10455) : (!llvm.ptr) -> i64
    %10460 = "llvm.load"(%10456) : (!llvm.ptr) -> !llvm.ptr
    %10461 = "llvm.load"(%10457) : (!llvm.ptr) -> !llvm.ptr
    %10462 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10463 = "llvm.ptrtoint"(%10462) : (!llvm.ptr) -> i64
    %10464 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10465 = "mini.subtype"(%10460, %10459, %10458, %10464, %10463, %10461) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10465) [^bb1181, ^bb1181] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1182:
    %10466 = "llvm.extractvalue"(%10446) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10467 = "llvm.load"(%10450) : (!llvm.ptr) -> i32
    %10468 = "llvm.getelementptr"(%10466, %10467) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10469 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10470 = "llvm.getelementptr"(%10468, %10469) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10470) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1183(%10471 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10472 : !llvm.ptr, %10473 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10474 = "mini.invariant"(%10472) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10475 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1184] : () -> ()
  ^bb1185:
    %10476 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%10476, %10475) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1186] : () -> ()
  ^bb1184:
    %10477 = "llvm.getelementptr"(%10472) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10478 = "llvm.load"(%10477) : (!llvm.ptr) -> !llvm.ptr
    %10479 = "llvm.getelementptr"(%10478) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10480 = "llvm.getelementptr"(%10478) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10481 = "llvm.getelementptr"(%10478) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10482 = "llvm.getelementptr"(%10478) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10483 = "llvm.load"(%10479) : (!llvm.ptr) -> i64
    %10484 = "llvm.load"(%10480) : (!llvm.ptr) -> i64
    %10485 = "llvm.load"(%10481) : (!llvm.ptr) -> !llvm.ptr
    %10486 = "llvm.load"(%10482) : (!llvm.ptr) -> !llvm.ptr
    %10487 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10488 = "llvm.ptrtoint"(%10487) : (!llvm.ptr) -> i64
    %10489 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10490 = "mini.subtype"(%10485, %10484, %10483, %10489, %10488, %10486) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10490) [^bb1185, ^bb1185] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1186:
    %10491 = "llvm.extractvalue"(%10471) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10492 = "llvm.load"(%10475) : (!llvm.ptr) -> i32
    %10493 = "llvm.getelementptr"(%10491, %10492) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10494 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10495 = "llvm.getelementptr"(%10493, %10494) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10495) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1187(%10496 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10497 : !llvm.ptr, %10498 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10499 = "mini.invariant"(%10497) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10500 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1188] : () -> ()
  ^bb1189:
    %10501 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%10501, %10500) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1190] : () -> ()
  ^bb1188:
    %10502 = "llvm.getelementptr"(%10497) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10503 = "llvm.load"(%10502) : (!llvm.ptr) -> !llvm.ptr
    %10504 = "llvm.getelementptr"(%10503) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10505 = "llvm.getelementptr"(%10503) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10506 = "llvm.getelementptr"(%10503) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10507 = "llvm.getelementptr"(%10503) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10508 = "llvm.load"(%10504) : (!llvm.ptr) -> i64
    %10509 = "llvm.load"(%10505) : (!llvm.ptr) -> i64
    %10510 = "llvm.load"(%10506) : (!llvm.ptr) -> !llvm.ptr
    %10511 = "llvm.load"(%10507) : (!llvm.ptr) -> !llvm.ptr
    %10512 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10513 = "llvm.ptrtoint"(%10512) : (!llvm.ptr) -> i64
    %10514 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10515 = "mini.subtype"(%10510, %10509, %10508, %10514, %10513, %10511) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10515) [^bb1189, ^bb1189] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1190:
    %10516 = "llvm.extractvalue"(%10496) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10517 = "llvm.load"(%10500) : (!llvm.ptr) -> i32
    %10518 = "llvm.getelementptr"(%10516, %10517) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10519 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10520 = "llvm.getelementptr"(%10518, %10519) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10520) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1191(%10521 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10522 : !llvm.ptr, %10523 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10524 = "mini.invariant"(%10522) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10525 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1192] : () -> ()
  ^bb1193:
    %10526 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%10526, %10525) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1194] : () -> ()
  ^bb1192:
    %10527 = "llvm.getelementptr"(%10522) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10528 = "llvm.load"(%10527) : (!llvm.ptr) -> !llvm.ptr
    %10529 = "llvm.getelementptr"(%10528) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10530 = "llvm.getelementptr"(%10528) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10531 = "llvm.getelementptr"(%10528) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10532 = "llvm.getelementptr"(%10528) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10533 = "llvm.load"(%10529) : (!llvm.ptr) -> i64
    %10534 = "llvm.load"(%10530) : (!llvm.ptr) -> i64
    %10535 = "llvm.load"(%10531) : (!llvm.ptr) -> !llvm.ptr
    %10536 = "llvm.load"(%10532) : (!llvm.ptr) -> !llvm.ptr
    %10537 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10538 = "llvm.ptrtoint"(%10537) : (!llvm.ptr) -> i64
    %10539 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10540 = "mini.subtype"(%10535, %10534, %10533, %10539, %10538, %10536) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10540) [^bb1193, ^bb1193] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1194:
    %10541 = "llvm.extractvalue"(%10521) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10542 = "llvm.load"(%10525) : (!llvm.ptr) -> i32
    %10543 = "llvm.getelementptr"(%10541, %10542) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10544 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10545 = "llvm.getelementptr"(%10543, %10544) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10545) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "ZipIterator2_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "ZipIterator2_field_second"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "ZipIterator2_field_ZipIterator2_0"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 3 : i32, "meth_name" = "ZipIterator2_field_ZipIterator2_1"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 4 : i32, "meth_name" = "ZipIterator2_field_ZipIterator2_2"} : () -> ()
  "mini.func"() ({
  ^bb1195(%10546 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10547 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10548 : !llvm.ptr, %10549 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10550 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10551 = "mini.wrap"(%10546) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>
    %10552 = "mini.to_fat_ptr"(%10551) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator2", "to_typ_name" = "ZipIterator2", "invariant"} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>
    %10553 = "mini.wrap"(%10549) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">]>
    %10554 = "mini.to_fat_ptr"(%10553) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">]>
    %10555 = "mini.field_access"(%10552) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">]>
    "mini.castassign"(%10555, %10554) ({
      %10556 = "mini.to_fat_ptr"(%10554) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "should_offset"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">]>) -> ()
    %10557 = "mini.wrap"(%10550) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>
    %10558 = "mini.to_fat_ptr"(%10557) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>
    %10559 = "mini.field_access"(%10552) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>
    "mini.castassign"(%10559, %10558) ({
      %10560 = "mini.to_fat_ptr"(%10558) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "should_offset"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> ()
  }) {"func_name" = "ZipIterator2_init_firstIterator2T_secondIterator2U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1196(%10561 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10562 : !llvm.ptr, %10563 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10564 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10565 = "mini.invariant"(%10562) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10566 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1197] : () -> ()
  ^bb1198:
    %10567 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%10567, %10566) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1199] : () -> ()
  ^bb1200:
    %10568 = "llvm.getelementptr"(%10562) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10569 = "llvm.load"(%10568) : (!llvm.ptr) -> !llvm.ptr
    %10570 = "llvm.getelementptr"(%10569) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10571 = "llvm.getelementptr"(%10569) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10572 = "llvm.getelementptr"(%10569) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10573 = "llvm.getelementptr"(%10569) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10574 = "llvm.load"(%10570) : (!llvm.ptr) -> i64
    %10575 = "llvm.load"(%10571) : (!llvm.ptr) -> i64
    %10576 = "llvm.load"(%10572) : (!llvm.ptr) -> !llvm.ptr
    %10577 = "llvm.load"(%10573) : (!llvm.ptr) -> !llvm.ptr
    %10578 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %10579 = "llvm.ptrtoint"(%10578) : (!llvm.ptr) -> i64
    %10580 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %10581 = "mini.subtype"(%10576, %10575, %10574, %10580, %10579, %10577) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10581) [^bb1198, ^bb1198] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1197:
    %10582 = "llvm.getelementptr"(%10562) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10583 = "llvm.load"(%10582) : (!llvm.ptr) -> !llvm.ptr
    %10584 = "llvm.getelementptr"(%10583) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10585 = "llvm.getelementptr"(%10583) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10586 = "llvm.getelementptr"(%10583) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10587 = "llvm.getelementptr"(%10583) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10588 = "llvm.load"(%10584) : (!llvm.ptr) -> i64
    %10589 = "llvm.load"(%10585) : (!llvm.ptr) -> i64
    %10590 = "llvm.load"(%10586) : (!llvm.ptr) -> !llvm.ptr
    %10591 = "llvm.load"(%10587) : (!llvm.ptr) -> !llvm.ptr
    %10592 = "mini.addr_of"() {"global_name" = @Iterator2} : () -> !llvm.ptr
    %10593 = "llvm.ptrtoint"(%10592) : (!llvm.ptr) -> i64
    %10594 = "llvm.mlir.constant"() <{"value" = 4189192806087951739 : i64}> : () -> i64
    %10595 = "mini.subtype"(%10590, %10589, %10588, %10594, %10593, %10591) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10595) [^bb1200, ^bb1200] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1199:
    %10596 = "llvm.extractvalue"(%10561) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10597 = "llvm.load"(%10566) : (!llvm.ptr) -> i32
    %10598 = "llvm.getelementptr"(%10596, %10597) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10599 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10600 = "llvm.getelementptr"(%10598, %10599) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10600) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterator2_B_init_firstIterator2T_secondIterator2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1201(%10601 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10602 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10603 : !llvm.ptr):
    %10604 = "mini.wrap"(%10601) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>
    %10605 = "mini.to_fat_ptr"(%10604) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ZipIterator2", "to_typ_name" = "ZipIterator2", "invariant"} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>
    %10606 = "mini.field_access"(%10605) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">]>
    %10607 = "mini.unwrap"(%10606) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10608 = "mini.field_access"(%10605) {"offset" = 2 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.reified_type
    %10609 = "llvm.load"(%10608) : (!mini.reified_type) -> !llvm.ptr
    %10610 = "mini.field_access"(%10605) {"offset" = 3 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.reified_type
    %10611 = "llvm.load"(%10610) : (!mini.reified_type) -> !llvm.ptr
    %10612 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %10613 = "mini.method_call"(%10612, %10607) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
    %10614 = builtin.unrealized_conversion_cast %10613 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.nil]>
    %10615 = "mini.field_access"(%10605) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>
    %10616 = "mini.unwrap"(%10615) : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10617 = "mini.field_access"(%10605) {"offset" = 2 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.reified_type
    %10618 = "llvm.load"(%10617) : (!mini.reified_type) -> !llvm.ptr
    %10619 = "mini.field_access"(%10605) {"offset" = 3 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.reified_type
    %10620 = "llvm.load"(%10619) : (!mini.reified_type) -> !llvm.ptr
    %10621 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %10622 = "mini.method_call"(%10621, %10616) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
    %10623 = builtin.unrealized_conversion_cast %10622 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">, !mini.nil]>
    %10624 = "mini.checkflag"(%10614) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.nil]>) -> i1
    %10625 = "mini.unwrap"(%10624) : (i1) -> i1
    %10626 = builtin.unrealized_conversion_cast %10614 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.nil]>
    "mini.if"(%10625) ({
      %10627 = "mini.to_fat_ptr"(%10626) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "Object"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.nil]>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">
      %10628 = "mini.checkflag"(%10623) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">, !mini.nil]>) -> i1
      %10629 = "mini.unwrap"(%10628) : (i1) -> i1
      %10630 = builtin.unrealized_conversion_cast %10623 : !mini.union<[!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">, !mini.nil]>
      "mini.if"(%10629) ({
        %10631 = "mini.to_fat_ptr"(%10630) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "Object"} : (!mini.union<[!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">, !mini.nil]>) -> !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">
        %10632 = "mini.unwrap"(%10627) : (!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
        %10633 = "mini.unwrap"(%10631) : (!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
        %10634 = "mini.field_access"(%10605) {"offset" = 2 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.reified_type
        %10635 = "llvm.load"(%10634) : (!mini.reified_type) -> !llvm.ptr
        %10636 = "mini.field_access"(%10605) {"offset" = 3 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.reified_type
        %10637 = "llvm.load"(%10636) : (!mini.reified_type) -> !llvm.ptr
        %10638 = "mini.parameterization"(%10635, %10637) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["ZipIterator2.T_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        %10639 = "mini.parameterization"(%10635, %10637) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["ZipIterator2.U_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        %10640 = "mini.new"(%10638, %10639) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "has_type_fields"} : (!llvm.ptr, !llvm.ptr) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>
        %10641 = "mini.to_fat_ptr"(%10627) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Pair">
        %10642 = "mini.unwrap"(%10641) : (!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %10643 = "mini.to_fat_ptr"(%10631) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">) -> !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">
        %10644 = "mini.unwrap"(%10643) : (!mini.type_param<"U", !mini.fatptr<"Object">, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %10645 = "mini.unwrap"(%10640) : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %10646 = "mini.field_access"(%10605) {"offset" = 2 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.reified_type
        %10647 = "llvm.load"(%10646) : (!mini.reified_type) -> !llvm.ptr
        %10648 = "mini.field_access"(%10605) {"offset" = 3 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]>) -> !mini.reified_type
        %10649 = "llvm.load"(%10648) : (!mini.reified_type) -> !llvm.ptr
        %10650 = "mini.parameterization"(%10647, %10649) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["ZipIterator2.T_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        %10651 = "mini.parameterization"(%10647, %10649) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["ZipIterator2.U_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        %10652 = "mini.parameterizations_array"(%10650, %10651) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mini.method_call"(%10652, %10645, %10642, %10644) {"offset" = 4 : i32, "vptrs" = ["Object", "Object"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %10653 = builtin.unrealized_conversion_cast %10640 : !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
        "mini.return"(%10653) : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>) -> ()
        "mini.castassign"(%10630, %10631) ({
          %10654 = builtin.unrealized_conversion_cast %10631 : !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2"> to !mini.union<[!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">, !mini.nil]>
        }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">, !mini.nil]>, !mini.type_param<"U", !mini.fatptr<"Object">, "ZipIterator2">) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%10626, %10627) ({
        %10655 = builtin.unrealized_conversion_cast %10627 : !mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2"> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">, !mini.nil]>, !mini.type_param<"T", !mini.fatptr<"Object">, "ZipIterator2">) -> ()
    }) : (i1) -> ()
    %10656 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %10657 = "mini.unionize"(%10656) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
    "mini.return"(%10657) : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "ZipIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1202(%10658 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10659 : !llvm.ptr):
    %10660 = "mini.invariant"(%10659) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10661 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1203] : () -> ()
  ^bb1203:
    %10662 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%10662, %10661) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1204] : () -> ()
  ^bb1204:
    %10663 = "llvm.extractvalue"(%10658) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10664 = "llvm.load"(%10661) : (!llvm.ptr) -> i32
    %10665 = "llvm.getelementptr"(%10663, %10664) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10666 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10667 = "llvm.getelementptr"(%10665, %10666) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10667) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "ProductIterable2_field_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "ProductIterable2_field_second"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "ProductIterable2_field_ProductIterable2_0"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 3 : i32, "meth_name" = "ProductIterable2_field_ProductIterable2_1"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 4 : i32, "meth_name" = "ProductIterable2_field_ProductIterable2_2"} : () -> ()
  "mini.func"() ({
  ^bb1205(%10668 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10669 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10670 : !llvm.ptr, %10671 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10672 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10673 = "mini.wrap"(%10668) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>
    %10674 = "mini.to_fat_ptr"(%10673) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable2", "to_typ_name" = "ProductIterable2", "invariant"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>
    %10675 = "mini.wrap"(%10671) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">]>
    %10676 = "mini.to_fat_ptr"(%10675) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">]>
    %10677 = "mini.field_access"(%10674) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">]>
    "mini.castassign"(%10677, %10676) ({
      %10678 = "mini.to_fat_ptr"(%10676) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "should_offset"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">]>) -> ()
    %10679 = "mini.wrap"(%10672) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>
    %10680 = "mini.to_fat_ptr"(%10679) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>
    %10681 = "mini.field_access"(%10674) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>
    "mini.castassign"(%10681, %10680) ({
      %10682 = "mini.to_fat_ptr"(%10680) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "should_offset"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> ()
  }) {"func_name" = "ProductIterable2_init_firstIterable2T_secondIterable2U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1206(%10683 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10684 : !llvm.ptr, %10685 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10686 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10687 = "mini.invariant"(%10684) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10688 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1207] : () -> ()
  ^bb1208:
    %10689 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%10689, %10688) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1209] : () -> ()
  ^bb1210:
    %10690 = "llvm.getelementptr"(%10684) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10691 = "llvm.load"(%10690) : (!llvm.ptr) -> !llvm.ptr
    %10692 = "llvm.getelementptr"(%10691) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10693 = "llvm.getelementptr"(%10691) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10694 = "llvm.getelementptr"(%10691) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10695 = "llvm.getelementptr"(%10691) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10696 = "llvm.load"(%10692) : (!llvm.ptr) -> i64
    %10697 = "llvm.load"(%10693) : (!llvm.ptr) -> i64
    %10698 = "llvm.load"(%10694) : (!llvm.ptr) -> !llvm.ptr
    %10699 = "llvm.load"(%10695) : (!llvm.ptr) -> !llvm.ptr
    %10700 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10701 = "llvm.ptrtoint"(%10700) : (!llvm.ptr) -> i64
    %10702 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10703 = "mini.subtype"(%10698, %10697, %10696, %10702, %10701, %10699) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10703) [^bb1208, ^bb1208] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1207:
    %10704 = "llvm.getelementptr"(%10684) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10705 = "llvm.load"(%10704) : (!llvm.ptr) -> !llvm.ptr
    %10706 = "llvm.getelementptr"(%10705) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10707 = "llvm.getelementptr"(%10705) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10708 = "llvm.getelementptr"(%10705) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10709 = "llvm.getelementptr"(%10705) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10710 = "llvm.load"(%10706) : (!llvm.ptr) -> i64
    %10711 = "llvm.load"(%10707) : (!llvm.ptr) -> i64
    %10712 = "llvm.load"(%10708) : (!llvm.ptr) -> !llvm.ptr
    %10713 = "llvm.load"(%10709) : (!llvm.ptr) -> !llvm.ptr
    %10714 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10715 = "llvm.ptrtoint"(%10714) : (!llvm.ptr) -> i64
    %10716 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10717 = "mini.subtype"(%10712, %10711, %10710, %10716, %10715, %10713) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10717) [^bb1210, ^bb1210] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1209:
    %10718 = "llvm.extractvalue"(%10683) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10719 = "llvm.load"(%10688) : (!llvm.ptr) -> i32
    %10720 = "llvm.getelementptr"(%10718, %10719) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10721 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10722 = "llvm.getelementptr"(%10720, %10721) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10722) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_init_firstIterable2T_secondIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1211(%10723 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10724 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10725 : !llvm.ptr):
    %10726 = "mini.wrap"(%10723) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>
    %10727 = "mini.to_fat_ptr"(%10726) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterable2", "to_typ_name" = "ProductIterable2", "invariant"} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>
    %10728 = "mini.field_access"(%10727) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">]>
    %10729 = "mini.field_access"(%10727) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>
    %10730 = "mini.unwrap"(%10728) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10731 = "mini.unwrap"(%10729) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10732 = "mini.field_access"(%10727) {"offset" = 2 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.reified_type
    %10733 = "llvm.load"(%10732) : (!mini.reified_type) -> !llvm.ptr
    %10734 = "mini.field_access"(%10727) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.reified_type
    %10735 = "llvm.load"(%10734) : (!mini.reified_type) -> !llvm.ptr
    %10736 = "mini.parameterization"(%10733, %10735) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["ProductIterable2.T_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %10737 = "mini.parameterization"(%10733, %10735) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["ProductIterable2.U_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %10738 = "mini.parameterization"(%10733, %10735) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairProductIterable2.T_subtype_Object._ProductIterable2.U_subtype_Object", ["ProductIterable2.T_subtype_Object"], ["ProductIterable2.U_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %10739 = "mini.new"(%10736, %10737, %10738) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "class_name" = "ProductIterator2", "num_data_fields" = 4 : i32, "has_type_fields"} : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>
    %10740 = "mini.field_access"(%10727) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">]>
    %10741 = "mini.field_access"(%10727) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>
    %10742 = "mini.to_fat_ptr"(%10740) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>
    %10743 = "mini.unwrap"(%10742) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10744 = "mini.to_fat_ptr"(%10741) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
    %10745 = "mini.unwrap"(%10744) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10746 = "mini.unwrap"(%10739) : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %10747 = "mini.field_access"(%10727) {"offset" = 2 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.reified_type
    %10748 = "llvm.load"(%10747) : (!mini.reified_type) -> !llvm.ptr
    %10749 = "mini.field_access"(%10727) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.reified_type
    %10750 = "llvm.load"(%10749) : (!mini.reified_type) -> !llvm.ptr
    %10751 = "mini.parameterization"(%10748, %10750) {"id_hierarchy" = ["Iterable2", [0 : i32]], "name_hierarchy" = ["Iterable2ProductIterable2.T_subtype_Object", ["ProductIterable2.T_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %10752 = "mini.parameterization"(%10748, %10750) {"id_hierarchy" = ["Iterable2", [1 : i32]], "name_hierarchy" = ["Iterable2ProductIterable2.U_subtype_Object", ["ProductIterable2.U_subtype_Object"]]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %10753 = "mini.parameterizations_array"(%10751, %10752) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%10753, %10746, %10743, %10745) {"offset" = 7 : i32, "vptrs" = [#none, #none], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %10754 = "mini.to_fat_ptr"(%10739) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterable2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    "mini.return"(%10754) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> ()
  }) {"func_name" = "ProductIterable2_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1212(%10755 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10756 : !llvm.ptr):
    %10757 = "mini.invariant"(%10756) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10758 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1213] : () -> ()
  ^bb1213:
    %10759 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%10759, %10758) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1214] : () -> ()
  ^bb1214:
    %10760 = "llvm.extractvalue"(%10755) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10761 = "llvm.load"(%10758) : (!llvm.ptr) -> i32
    %10762 = "llvm.getelementptr"(%10760, %10761) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10763 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10764 = "llvm.getelementptr"(%10762, %10763) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10764) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1215(%10765 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10766 : !llvm.ptr, %10767 : !llvm.struct<(!llvm.ptr)>):
    %10768 = "mini.invariant"(%10766) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10769 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1216] : () -> ()
  ^bb1217:
    %10770 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%10770, %10769) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1218] : () -> ()
  ^bb1216:
    %10771 = "llvm.getelementptr"(%10766) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10772 = "llvm.load"(%10771) : (!llvm.ptr) -> !llvm.ptr
    %10773 = "llvm.getelementptr"(%10772) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10774 = "llvm.getelementptr"(%10772) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10775 = "llvm.getelementptr"(%10772) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10776 = "llvm.getelementptr"(%10772) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10777 = "llvm.load"(%10773) : (!llvm.ptr) -> i64
    %10778 = "llvm.load"(%10774) : (!llvm.ptr) -> i64
    %10779 = "llvm.load"(%10775) : (!llvm.ptr) -> !llvm.ptr
    %10780 = "llvm.load"(%10776) : (!llvm.ptr) -> !llvm.ptr
    %10781 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10782 = "llvm.ptrtoint"(%10781) : (!llvm.ptr) -> i64
    %10783 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10784 = "mini.subtype"(%10779, %10778, %10777, %10783, %10782, %10780) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10784) [^bb1217, ^bb1217] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1218:
    %10785 = "llvm.extractvalue"(%10765) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10786 = "llvm.load"(%10769) : (!llvm.ptr) -> i32
    %10787 = "llvm.getelementptr"(%10785, %10786) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10788 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10789 = "llvm.getelementptr"(%10787, %10788) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10789) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1219(%10790 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10791 : !llvm.ptr, %10792 : !llvm.struct<(!llvm.ptr, i160)>, %10793 : !llvm.struct<(!llvm.ptr)>):
    %10794 = "mini.invariant"(%10791) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10795 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1220] : () -> ()
  ^bb1221:
    %10796 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%10796, %10795) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1222] : () -> ()
  ^bb1223:
    %10797 = "llvm.getelementptr"(%10791) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10798 = "llvm.load"(%10797) : (!llvm.ptr) -> !llvm.ptr
    %10799 = "llvm.getelementptr"(%10798) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10800 = "llvm.getelementptr"(%10798) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10801 = "llvm.getelementptr"(%10798) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10802 = "llvm.getelementptr"(%10798) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10803 = "llvm.load"(%10799) : (!llvm.ptr) -> i64
    %10804 = "llvm.load"(%10800) : (!llvm.ptr) -> i64
    %10805 = "llvm.load"(%10801) : (!llvm.ptr) -> !llvm.ptr
    %10806 = "llvm.load"(%10802) : (!llvm.ptr) -> !llvm.ptr
    %10807 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10808 = "llvm.ptrtoint"(%10807) : (!llvm.ptr) -> i64
    %10809 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10810 = "mini.subtype"(%10805, %10804, %10803, %10809, %10808, %10806) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10810) [^bb1221, ^bb1221] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1220:
    %10811 = "llvm.getelementptr"(%10791) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10812 = "llvm.load"(%10811) : (!llvm.ptr) -> !llvm.ptr
    %10813 = "llvm.getelementptr"(%10812) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10814 = "llvm.getelementptr"(%10812) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10815 = "llvm.getelementptr"(%10812) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10816 = "llvm.getelementptr"(%10812) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10817 = "llvm.load"(%10813) : (!llvm.ptr) -> i64
    %10818 = "llvm.load"(%10814) : (!llvm.ptr) -> i64
    %10819 = "llvm.load"(%10815) : (!llvm.ptr) -> !llvm.ptr
    %10820 = "llvm.load"(%10816) : (!llvm.ptr) -> !llvm.ptr
    %10821 = "mini.addr_of"() {"global_name" = @Pair} : () -> !llvm.ptr
    %10822 = "llvm.ptrtoint"(%10821) : (!llvm.ptr) -> i64
    %10823 = "llvm.mlir.constant"() <{"value" = 9197944775169318296 : i64}> : () -> i64
    %10824 = "mini.subtype"(%10819, %10818, %10817, %10823, %10822, %10820) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10824) [^bb1223, ^bb1223] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1222:
    %10825 = "llvm.extractvalue"(%10790) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10826 = "llvm.load"(%10795) : (!llvm.ptr) -> i32
    %10827 = "llvm.getelementptr"(%10825, %10826) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10828 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10829 = "llvm.getelementptr"(%10827, %10828) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10829) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1224(%10830 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10831 : !llvm.ptr, %10832 : !llvm.struct<(!llvm.ptr)>):
    %10833 = "mini.invariant"(%10831) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10834 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1225] : () -> ()
  ^bb1226:
    %10835 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%10835, %10834) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1227] : () -> ()
  ^bb1225:
    %10836 = "llvm.getelementptr"(%10831) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10837 = "llvm.load"(%10836) : (!llvm.ptr) -> !llvm.ptr
    %10838 = "llvm.getelementptr"(%10837) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10839 = "llvm.getelementptr"(%10837) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10840 = "llvm.getelementptr"(%10837) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10841 = "llvm.getelementptr"(%10837) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10842 = "llvm.load"(%10838) : (!llvm.ptr) -> i64
    %10843 = "llvm.load"(%10839) : (!llvm.ptr) -> i64
    %10844 = "llvm.load"(%10840) : (!llvm.ptr) -> !llvm.ptr
    %10845 = "llvm.load"(%10841) : (!llvm.ptr) -> !llvm.ptr
    %10846 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10847 = "llvm.ptrtoint"(%10846) : (!llvm.ptr) -> i64
    %10848 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10849 = "mini.subtype"(%10844, %10843, %10842, %10848, %10847, %10845) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10849) [^bb1226, ^bb1226] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1227:
    %10850 = "llvm.extractvalue"(%10830) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10851 = "llvm.load"(%10834) : (!llvm.ptr) -> i32
    %10852 = "llvm.getelementptr"(%10850, %10851) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10853 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10854 = "llvm.getelementptr"(%10852, %10853) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10854) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_all_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1228(%10855 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10856 : !llvm.ptr, %10857 : !llvm.struct<(!llvm.ptr)>):
    %10858 = "mini.invariant"(%10856) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10859 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1229] : () -> ()
  ^bb1230:
    %10860 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%10860, %10859) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1231] : () -> ()
  ^bb1229:
    %10861 = "llvm.getelementptr"(%10856) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10862 = "llvm.load"(%10861) : (!llvm.ptr) -> !llvm.ptr
    %10863 = "llvm.getelementptr"(%10862) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10864 = "llvm.getelementptr"(%10862) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10865 = "llvm.getelementptr"(%10862) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10866 = "llvm.getelementptr"(%10862) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10867 = "llvm.load"(%10863) : (!llvm.ptr) -> i64
    %10868 = "llvm.load"(%10864) : (!llvm.ptr) -> i64
    %10869 = "llvm.load"(%10865) : (!llvm.ptr) -> !llvm.ptr
    %10870 = "llvm.load"(%10866) : (!llvm.ptr) -> !llvm.ptr
    %10871 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10872 = "llvm.ptrtoint"(%10871) : (!llvm.ptr) -> i64
    %10873 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10874 = "mini.subtype"(%10869, %10868, %10867, %10873, %10872, %10870) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10874) [^bb1230, ^bb1230] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1231:
    %10875 = "llvm.extractvalue"(%10855) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10876 = "llvm.load"(%10859) : (!llvm.ptr) -> i32
    %10877 = "llvm.getelementptr"(%10875, %10876) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10878 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10879 = "llvm.getelementptr"(%10877, %10878) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10879) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_any_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1232(%10880 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10881 : !llvm.ptr, %10882 : !llvm.struct<(!llvm.ptr)>):
    %10883 = "mini.invariant"(%10881) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10884 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1233] : () -> ()
  ^bb1234:
    %10885 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%10885, %10884) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1235] : () -> ()
  ^bb1233:
    %10886 = "llvm.getelementptr"(%10881) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10887 = "llvm.load"(%10886) : (!llvm.ptr) -> !llvm.ptr
    %10888 = "llvm.getelementptr"(%10887) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10889 = "llvm.getelementptr"(%10887) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10890 = "llvm.getelementptr"(%10887) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10891 = "llvm.getelementptr"(%10887) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10892 = "llvm.load"(%10888) : (!llvm.ptr) -> i64
    %10893 = "llvm.load"(%10889) : (!llvm.ptr) -> i64
    %10894 = "llvm.load"(%10890) : (!llvm.ptr) -> !llvm.ptr
    %10895 = "llvm.load"(%10891) : (!llvm.ptr) -> !llvm.ptr
    %10896 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10897 = "llvm.ptrtoint"(%10896) : (!llvm.ptr) -> i64
    %10898 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10899 = "mini.subtype"(%10894, %10893, %10892, %10898, %10897, %10895) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10899) [^bb1234, ^bb1234] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1235:
    %10900 = "llvm.extractvalue"(%10880) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10901 = "llvm.load"(%10884) : (!llvm.ptr) -> i32
    %10902 = "llvm.getelementptr"(%10900, %10901) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10903 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10904 = "llvm.getelementptr"(%10902, %10903) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10904) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1236(%10905 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10906 : !llvm.ptr, %10907 : !llvm.struct<(!llvm.ptr)>):
    %10908 = "mini.invariant"(%10906) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10909 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1237] : () -> ()
  ^bb1238:
    %10910 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%10910, %10909) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1239] : () -> ()
  ^bb1237:
    %10911 = "llvm.getelementptr"(%10906) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10912 = "llvm.load"(%10911) : (!llvm.ptr) -> !llvm.ptr
    %10913 = "llvm.getelementptr"(%10912) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10914 = "llvm.getelementptr"(%10912) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10915 = "llvm.getelementptr"(%10912) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10916 = "llvm.getelementptr"(%10912) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10917 = "llvm.load"(%10913) : (!llvm.ptr) -> i64
    %10918 = "llvm.load"(%10914) : (!llvm.ptr) -> i64
    %10919 = "llvm.load"(%10915) : (!llvm.ptr) -> !llvm.ptr
    %10920 = "llvm.load"(%10916) : (!llvm.ptr) -> !llvm.ptr
    %10921 = "mini.addr_of"() {"global_name" = @function_typ} : () -> !llvm.ptr
    %10922 = "llvm.ptrtoint"(%10921) : (!llvm.ptr) -> i64
    %10923 = "llvm.mlir.constant"() <{"value" = 7927147055246173914 : i64}> : () -> i64
    %10924 = "mini.subtype"(%10919, %10918, %10917, %10923, %10922, %10920) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10924) [^bb1238, ^bb1238] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1239:
    %10925 = "llvm.extractvalue"(%10905) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10926 = "llvm.load"(%10909) : (!llvm.ptr) -> i32
    %10927 = "llvm.getelementptr"(%10925, %10926) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10928 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10929 = "llvm.getelementptr"(%10927, %10928) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10929) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_filter_fFunctionT_to_Ptri1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1240(%10930 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10931 : !llvm.ptr, %10932 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10933 = "mini.invariant"(%10931) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10934 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1241] : () -> ()
  ^bb1242:
    %10935 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%10935, %10934) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1243] : () -> ()
  ^bb1241:
    %10936 = "llvm.getelementptr"(%10931) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10937 = "llvm.load"(%10936) : (!llvm.ptr) -> !llvm.ptr
    %10938 = "llvm.getelementptr"(%10937) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10939 = "llvm.getelementptr"(%10937) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10940 = "llvm.getelementptr"(%10937) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10941 = "llvm.getelementptr"(%10937) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10942 = "llvm.load"(%10938) : (!llvm.ptr) -> i64
    %10943 = "llvm.load"(%10939) : (!llvm.ptr) -> i64
    %10944 = "llvm.load"(%10940) : (!llvm.ptr) -> !llvm.ptr
    %10945 = "llvm.load"(%10941) : (!llvm.ptr) -> !llvm.ptr
    %10946 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10947 = "llvm.ptrtoint"(%10946) : (!llvm.ptr) -> i64
    %10948 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10949 = "mini.subtype"(%10944, %10943, %10942, %10948, %10947, %10945) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10949) [^bb1242, ^bb1242] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1243:
    %10950 = "llvm.extractvalue"(%10930) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10951 = "llvm.load"(%10934) : (!llvm.ptr) -> i32
    %10952 = "llvm.getelementptr"(%10950, %10951) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10953 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10954 = "llvm.getelementptr"(%10952, %10953) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10954) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_chain_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1244(%10955 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10956 : !llvm.ptr, %10957 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10958 = "mini.invariant"(%10956) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10959 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1245] : () -> ()
  ^bb1246:
    %10960 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%10960, %10959) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1247] : () -> ()
  ^bb1245:
    %10961 = "llvm.getelementptr"(%10956) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10962 = "llvm.load"(%10961) : (!llvm.ptr) -> !llvm.ptr
    %10963 = "llvm.getelementptr"(%10962) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10964 = "llvm.getelementptr"(%10962) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10965 = "llvm.getelementptr"(%10962) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10966 = "llvm.getelementptr"(%10962) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10967 = "llvm.load"(%10963) : (!llvm.ptr) -> i64
    %10968 = "llvm.load"(%10964) : (!llvm.ptr) -> i64
    %10969 = "llvm.load"(%10965) : (!llvm.ptr) -> !llvm.ptr
    %10970 = "llvm.load"(%10966) : (!llvm.ptr) -> !llvm.ptr
    %10971 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10972 = "llvm.ptrtoint"(%10971) : (!llvm.ptr) -> i64
    %10973 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10974 = "mini.subtype"(%10969, %10968, %10967, %10973, %10972, %10970) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10974) [^bb1246, ^bb1246] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1247:
    %10975 = "llvm.extractvalue"(%10955) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %10976 = "llvm.load"(%10959) : (!llvm.ptr) -> i32
    %10977 = "llvm.getelementptr"(%10975, %10976) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %10978 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %10979 = "llvm.getelementptr"(%10977, %10978) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%10979) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_interleave_otherIterable2T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1248(%10980 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %10981 : !llvm.ptr, %10982 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %10983 = "mini.invariant"(%10981) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %10984 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1249] : () -> ()
  ^bb1250:
    %10985 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%10985, %10984) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1251] : () -> ()
  ^bb1249:
    %10986 = "llvm.getelementptr"(%10981) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %10987 = "llvm.load"(%10986) : (!llvm.ptr) -> !llvm.ptr
    %10988 = "llvm.getelementptr"(%10987) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10989 = "llvm.getelementptr"(%10987) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10990 = "llvm.getelementptr"(%10987) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10991 = "llvm.getelementptr"(%10987) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %10992 = "llvm.load"(%10988) : (!llvm.ptr) -> i64
    %10993 = "llvm.load"(%10989) : (!llvm.ptr) -> i64
    %10994 = "llvm.load"(%10990) : (!llvm.ptr) -> !llvm.ptr
    %10995 = "llvm.load"(%10991) : (!llvm.ptr) -> !llvm.ptr
    %10996 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %10997 = "llvm.ptrtoint"(%10996) : (!llvm.ptr) -> i64
    %10998 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %10999 = "mini.subtype"(%10994, %10993, %10992, %10998, %10997, %10995) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%10999) [^bb1250, ^bb1250] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1251:
    %11000 = "llvm.extractvalue"(%10980) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11001 = "llvm.load"(%10984) : (!llvm.ptr) -> i32
    %11002 = "llvm.getelementptr"(%11000, %11001) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11003 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11004 = "llvm.getelementptr"(%11002, %11003) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11004) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_zip_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1252(%11005 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11006 : !llvm.ptr, %11007 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %11008 = "mini.invariant"(%11006) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11009 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1253] : () -> ()
  ^bb1254:
    %11010 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%11010, %11009) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1255] : () -> ()
  ^bb1253:
    %11011 = "llvm.getelementptr"(%11006) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11012 = "llvm.load"(%11011) : (!llvm.ptr) -> !llvm.ptr
    %11013 = "llvm.getelementptr"(%11012) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11014 = "llvm.getelementptr"(%11012) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11015 = "llvm.getelementptr"(%11012) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11016 = "llvm.getelementptr"(%11012) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11017 = "llvm.load"(%11013) : (!llvm.ptr) -> i64
    %11018 = "llvm.load"(%11014) : (!llvm.ptr) -> i64
    %11019 = "llvm.load"(%11015) : (!llvm.ptr) -> !llvm.ptr
    %11020 = "llvm.load"(%11016) : (!llvm.ptr) -> !llvm.ptr
    %11021 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %11022 = "llvm.ptrtoint"(%11021) : (!llvm.ptr) -> i64
    %11023 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %11024 = "mini.subtype"(%11019, %11018, %11017, %11023, %11022, %11020) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11024) [^bb1254, ^bb1254] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1255:
    %11025 = "llvm.extractvalue"(%11005) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11026 = "llvm.load"(%11009) : (!llvm.ptr) -> i32
    %11027 = "llvm.getelementptr"(%11025, %11026) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11028 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11029 = "llvm.getelementptr"(%11027, %11028) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11029) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable2_B_product_otherIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 0 : i32, "meth_name" = "ProductIterator2_field_first_iterator"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 1 : i32, "meth_name" = "ProductIterator2_field_second_iterator"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 2 : i32, "meth_name" = "ProductIterator2_field_second_iterable"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 3 : i32, "meth_name" = "ProductIterator2_field_current_first"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 4 : i32, "meth_name" = "ProductIterator2_field_ProductIterator2_0"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 5 : i32, "meth_name" = "ProductIterator2_field_ProductIterator2_1"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr, !llvm.ptr)>, "offset" = 6 : i32, "meth_name" = "ProductIterator2_field_ProductIterator2_2"} : () -> ()
  "mini.func"() ({
  ^bb1256(%11030 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11031 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11032 : !llvm.ptr, %11033 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11034 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %11035 = "mini.wrap"(%11030) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
    %11036 = "mini.to_fat_ptr"(%11035) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator2", "to_typ_name" = "ProductIterator2", "invariant"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
    %11037 = "mini.wrap"(%11033) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>
    %11038 = "mini.to_fat_ptr"(%11037) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>
    %11039 = "mini.wrap"(%11034) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
    %11040 = "mini.to_fat_ptr"(%11039) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
    %11041 = "mini.field_access"(%11036) {"offset" = 2 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
    "mini.castassign"(%11041, %11040) ({
      %11042 = "mini.to_fat_ptr"(%11040) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "invariant"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterable2", "to_typ_name" = "Iterable2", "should_offset"} : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>, !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> ()
    %11043 = "mini.unwrap"(%11038) : (!mini.fatptr<"Iterable2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11044 = "mini.field_access"(%11036) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
    %11045 = "llvm.load"(%11044) : (!mini.reified_type) -> !llvm.ptr
    %11046 = "mini.field_access"(%11036) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
    %11047 = "llvm.load"(%11046) : (!mini.reified_type) -> !llvm.ptr
    %11048 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %11049 = "mini.method_call"(%11048, %11043) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %11050 = "mini.to_fat_ptr"(%11049) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>
    %11051 = "mini.field_access"(%11036) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>
    "mini.castassign"(%11051, %11050) ({
      %11052 = "mini.to_fat_ptr"(%11050) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "should_offset"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>) -> ()
    %11053 = "mini.field_access"(%11036) {"offset" = 2 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
    %11054 = "mini.unwrap"(%11053) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11055 = "mini.field_access"(%11036) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
    %11056 = "llvm.load"(%11055) : (!mini.reified_type) -> !llvm.ptr
    %11057 = "mini.field_access"(%11036) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
    %11058 = "llvm.load"(%11057) : (!mini.reified_type) -> !llvm.ptr
    %11059 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %11060 = "mini.method_call"(%11059, %11054) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
    %11061 = "mini.to_fat_ptr"(%11060) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
    %11062 = "mini.field_access"(%11036) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
    "mini.castassign"(%11062, %11061) ({
      %11063 = "mini.to_fat_ptr"(%11061) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "should_offset"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> ()
    %11064 = "mini.field_access"(%11036) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>
    %11065 = "mini.unwrap"(%11064) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11066 = "mini.field_access"(%11036) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
    %11067 = "llvm.load"(%11066) : (!mini.reified_type) -> !llvm.ptr
    %11068 = "mini.field_access"(%11036) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
    %11069 = "llvm.load"(%11068) : (!mini.reified_type) -> !llvm.ptr
    %11070 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %11071 = "mini.method_call"(%11070, %11065) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
    %11072 = builtin.unrealized_conversion_cast %11071 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>
    %11073 = "mini.field_access"(%11036) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>
    "mini.castassign"(%11073, %11072) ({
      %11074 = builtin.unrealized_conversion_cast %11072 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "ProductIterator2_init_first_iterableIterable2T_second_iterableIterable2U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1257(%11075 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11076 : !llvm.ptr, %11077 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11078 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %11079 = "mini.invariant"(%11076) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11080 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1258] : () -> ()
  ^bb1259:
    %11081 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%11081, %11080) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1260] : () -> ()
  ^bb1261:
    %11082 = "llvm.getelementptr"(%11076) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11083 = "llvm.load"(%11082) : (!llvm.ptr) -> !llvm.ptr
    %11084 = "llvm.getelementptr"(%11083) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11085 = "llvm.getelementptr"(%11083) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11086 = "llvm.getelementptr"(%11083) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11087 = "llvm.getelementptr"(%11083) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11088 = "llvm.load"(%11084) : (!llvm.ptr) -> i64
    %11089 = "llvm.load"(%11085) : (!llvm.ptr) -> i64
    %11090 = "llvm.load"(%11086) : (!llvm.ptr) -> !llvm.ptr
    %11091 = "llvm.load"(%11087) : (!llvm.ptr) -> !llvm.ptr
    %11092 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %11093 = "llvm.ptrtoint"(%11092) : (!llvm.ptr) -> i64
    %11094 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %11095 = "mini.subtype"(%11090, %11089, %11088, %11094, %11093, %11091) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11095) [^bb1259, ^bb1259] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1258:
    %11096 = "llvm.getelementptr"(%11076) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11097 = "llvm.load"(%11096) : (!llvm.ptr) -> !llvm.ptr
    %11098 = "llvm.getelementptr"(%11097) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11099 = "llvm.getelementptr"(%11097) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11100 = "llvm.getelementptr"(%11097) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11101 = "llvm.getelementptr"(%11097) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11102 = "llvm.load"(%11098) : (!llvm.ptr) -> i64
    %11103 = "llvm.load"(%11099) : (!llvm.ptr) -> i64
    %11104 = "llvm.load"(%11100) : (!llvm.ptr) -> !llvm.ptr
    %11105 = "llvm.load"(%11101) : (!llvm.ptr) -> !llvm.ptr
    %11106 = "mini.addr_of"() {"global_name" = @Iterable2} : () -> !llvm.ptr
    %11107 = "llvm.ptrtoint"(%11106) : (!llvm.ptr) -> i64
    %11108 = "llvm.mlir.constant"() <{"value" = 5693646204635713916 : i64}> : () -> i64
    %11109 = "mini.subtype"(%11104, %11103, %11102, %11108, %11107, %11105) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11109) [^bb1261, ^bb1261] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1260:
    %11110 = "llvm.extractvalue"(%11075) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11111 = "llvm.load"(%11080) : (!llvm.ptr) -> i32
    %11112 = "llvm.getelementptr"(%11110, %11111) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11113 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11114 = "llvm.getelementptr"(%11112, %11113) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11114) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterator2_B_init_first_iterableIterable2T_second_iterableIterable2U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1262(%11115 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11116 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11117 : !llvm.ptr):
    %11118 = "mini.wrap"(%11115) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
    %11119 = "mini.to_fat_ptr"(%11118) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ProductIterator2", "to_typ_name" = "ProductIterator2", "invariant"} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
    %11120 = "mini.field_access"(%11119) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>
    %11121 = builtin.unrealized_conversion_cast %11120 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>
    "mini.while"() ({
      %11122 = "mini.checkflag"(%11121) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>) -> i1
      %11123 = "mini.unwrap"(%11122) : (i1) -> i1
    }, {
      %11124 = "mini.to_fat_ptr"(%11121) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "Object"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>) -> !mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">
      %11125 = "mini.field_access"(%11119) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
      %11126 = "mini.unwrap"(%11125) : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %11127 = "mini.field_access"(%11119) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
      %11128 = "llvm.load"(%11127) : (!mini.reified_type) -> !llvm.ptr
      %11129 = "mini.field_access"(%11119) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
      %11130 = "llvm.load"(%11129) : (!mini.reified_type) -> !llvm.ptr
      %11131 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %11132 = "mini.method_call"(%11131, %11126) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
      %11133 = builtin.unrealized_conversion_cast %11132 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>
      %11134 = "mini.checkflag"(%11133) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>) -> i1
      %11135 = "mini.unwrap"(%11134) : (i1) -> i1
      %11136 = builtin.unrealized_conversion_cast %11133 : !mini.union<[!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>
      "mini.if"(%11135) ({
        %11137 = "mini.to_fat_ptr"(%11136) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "Object"} : (!mini.union<[!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>) -> !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">
        %11138 = "mini.unwrap"(%11124) : (!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
        %11139 = "mini.unwrap"(%11137) : (!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">) -> !llvm.struct<(!llvm.ptr, i160)>
        %11140 = "mini.field_access"(%11119) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
        %11141 = "llvm.load"(%11140) : (!mini.reified_type) -> !llvm.ptr
        %11142 = "mini.field_access"(%11119) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
        %11143 = "llvm.load"(%11142) : (!mini.reified_type) -> !llvm.ptr
        %11144 = "mini.parameterization"(%11141, %11143) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["ProductIterator2.T_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        %11145 = "mini.parameterization"(%11141, %11143) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["ProductIterator2.U_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        %11146 = "mini.new"(%11144, %11145) {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.ptr, !llvm.ptr)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "has_type_fields"} : (!llvm.ptr, !llvm.ptr) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
        %11147 = "mini.to_fat_ptr"(%11124) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">) -> !mini.type_param<"T", !mini.fatptr<"Object">, "Pair">
        %11148 = "mini.unwrap"(%11147) : (!mini.type_param<"T", !mini.fatptr<"Object">, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %11149 = "mini.to_fat_ptr"(%11137) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "Object"} : (!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">) -> !mini.type_param<"U", !mini.fatptr<"Object">, "Pair">
        %11150 = "mini.unwrap"(%11149) : (!mini.type_param<"U", !mini.fatptr<"Object">, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %11151 = "mini.unwrap"(%11146) : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %11152 = "mini.field_access"(%11119) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
        %11153 = "llvm.load"(%11152) : (!mini.reified_type) -> !llvm.ptr
        %11154 = "mini.field_access"(%11119) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
        %11155 = "llvm.load"(%11154) : (!mini.reified_type) -> !llvm.ptr
        %11156 = "mini.parameterization"(%11153, %11155) {"id_hierarchy" = [0 : i32], "name_hierarchy" = ["ProductIterator2.T_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        %11157 = "mini.parameterization"(%11153, %11155) {"id_hierarchy" = [1 : i32], "name_hierarchy" = ["ProductIterator2.U_subtype_Object"]} : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        %11158 = "mini.parameterizations_array"(%11156, %11157) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mini.method_call"(%11158, %11151, %11148, %11150) {"offset" = 4 : i32, "vptrs" = ["Object", "Object"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %11159 = builtin.unrealized_conversion_cast %11146 : !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
        "mini.return"(%11159) : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>) -> ()
        "mini.castassign"(%11136, %11137) ({
          %11160 = builtin.unrealized_conversion_cast %11137 : !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2"> to !mini.union<[!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>
        }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Object", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">) -> ()
      }) : (i1) -> ()
      %11161 = "mini.field_access"(%11119) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>
      %11162 = "mini.unwrap"(%11161) : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %11163 = "mini.field_access"(%11119) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
      %11164 = "llvm.load"(%11163) : (!mini.reified_type) -> !llvm.ptr
      %11165 = "mini.field_access"(%11119) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
      %11166 = "llvm.load"(%11165) : (!mini.reified_type) -> !llvm.ptr
      %11167 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %11168 = "mini.method_call"(%11167, %11162) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
      %11169 = builtin.unrealized_conversion_cast %11168 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>
      %11170 = "mini.field_access"(%11119) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>
      "mini.castassign"(%11170, %11169) ({
        %11171 = builtin.unrealized_conversion_cast %11169 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>) -> ()
      %11172 = "mini.field_access"(%11119) {"offset" = 2 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
      %11173 = "mini.unwrap"(%11172) : (!mini.fatptr<"Iterable2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %11174 = "mini.field_access"(%11119) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
      %11175 = "llvm.load"(%11174) : (!mini.reified_type) -> !llvm.ptr
      %11176 = "mini.field_access"(%11119) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.reified_type
      %11177 = "llvm.load"(%11176) : (!mini.reified_type) -> !llvm.ptr
      %11178 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %11179 = "mini.method_call"(%11178, %11173) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>
      %11180 = "mini.to_fat_ptr"(%11179) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "Iterable2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
      %11181 = "mini.field_access"(%11119) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
      "mini.castassign"(%11181, %11180) ({
        %11182 = "mini.to_fat_ptr"(%11180) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "invariant"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator2", "to_typ_name" = "Iterator2", "should_offset"} : (!mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>, !mini.fatptr<"Iterator2", [!mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> ()
      %11183 = "mini.field_access"(%11119) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator2", [!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.type_param<"U", !mini.fatptr<"Object">, "ProductIterator2">]>) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>
      "mini.castassign"(%11121, %11183) ({
        %11184 = builtin.unrealized_conversion_cast %11183 : !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]> to !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "ProductIterator2">, !mini.nil]>) -> ()
    }) : () -> ()
    %11185 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %11186 = "mini.unionize"(%11185) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>
    "mini.return"(%11186) : (!mini.union<[!mini.type_param<"T", !mini.fatptr<"Object">, "Iterator2">, !mini.nil]>) -> ()
  }) {"func_name" = "ProductIterator2_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1263(%11187 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11188 : !llvm.ptr):
    %11189 = "mini.invariant"(%11188) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11190 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1264] : () -> ()
  ^bb1264:
    %11191 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%11191, %11190) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1265] : () -> ()
  ^bb1265:
    %11192 = "llvm.extractvalue"(%11187) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11193 = "llvm.load"(%11190) : (!llvm.ptr) -> i32
    %11194 = "llvm.getelementptr"(%11192, %11193) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11195 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11196 = "llvm.getelementptr"(%11194, %11195) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11196) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterator2_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1266(%11197 : !llvm.ptr, %11198 : f64):
    %11199 = "mini.wrap"(%11198) : (f64) -> !mini.ptr<f64>
    %11200 = builtin.unrealized_conversion_cast %11199 : !mini.ptr<f64> to !mini.ptr<f64>
    %11201 = "mini.unwrap"(%11200) : (!mini.ptr<f64>) -> f64
    %11202 = "mini.intrinsic"(%11201) {"call_name" = "llvm.sqrt.f64", "num_args" = 1 : i32} : (f64) -> f64
    %11203 = "mini.wrap"(%11202) : (f64) -> !mini.ptr<f64>
    %11204 = builtin.unrealized_conversion_cast %11203 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.return"(%11204) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_sqrt_xPtrf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1267(%11205 : !llvm.ptr, %11206 : f64):
    %11207 = "mini.invariant"(%11205) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11208 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1268] : () -> ()
  ^bb1269:
    %11209 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%11209, %11208) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1270] : () -> ()
  ^bb1268:
    %11210 = "llvm.getelementptr"(%11205) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11211 = "llvm.load"(%11210) : (!llvm.ptr) -> !llvm.ptr
    %11212 = "llvm.getelementptr"(%11211) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11213 = "llvm.getelementptr"(%11211) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11214 = "llvm.getelementptr"(%11211) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11215 = "llvm.getelementptr"(%11211) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11216 = "llvm.load"(%11212) : (!llvm.ptr) -> i64
    %11217 = "llvm.load"(%11213) : (!llvm.ptr) -> i64
    %11218 = "llvm.load"(%11214) : (!llvm.ptr) -> !llvm.ptr
    %11219 = "llvm.load"(%11215) : (!llvm.ptr) -> !llvm.ptr
    %11220 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %11221 = "llvm.ptrtoint"(%11220) : (!llvm.ptr) -> i64
    %11222 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %11223 = "mini.subtype"(%11218, %11217, %11216, %11222, %11221, %11219) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11223) [^bb1269, ^bb1269] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1270:
    %11224 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %11225 = "llvm.load"(%11208) : (!llvm.ptr) -> i32
    %11226 = "llvm.getelementptr"(%11224, %11225) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11227 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11228 = "llvm.getelementptr"(%11226, %11227) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11228) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_sqrt_xPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1271(%11229 : !llvm.ptr, %11230 : !llvm.struct<(!llvm.ptr, i64)>):
    %11231 = "mini.wrap"(%11230) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %11232 = "mini.narrow"(%11231) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %11233 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11234 = "mini.unwrap"(%11232) : (!mini.ptr<i32>) -> i32
    %11235 = "mini.unwrap"(%11233) : (!mini.ptr<i32>) -> i32
    %11236 = "mini.comparison"(%11234, %11235) {"op" = "GE"} : (i32, i32) -> i1
    %11237 = "mini.wrap"(%11236) : (i1) -> !mini.ptr<i32>
    %11238 = "mini.unwrap"(%11237) : (!mini.ptr<i32>) -> i1
    "mini.if"(%11238) ({
      %11239 = "mini.unionize"(%11232) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
      "mini.return"(%11239) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
    }) : (i1) -> ()
    %11240 = "mini.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11241 = "mini.unwrap"(%11240) : (!mini.ptr<i32>) -> i32
    %11242 = "mini.unwrap"(%11232) : (!mini.ptr<i32>) -> i32
    %11243 = "mini.arithmetic"(%11241, %11242) {"op" = "MUL"} : (i32, i32) -> i32
    %11244 = "mini.wrap"(%11243) : (i32) -> !mini.ptr<i32>
    %11245 = "mini.unionize"(%11244) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    "mini.return"(%11245) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
  }) {"func_name" = "Math__Self_abs_xPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1272(%11246 : !llvm.ptr, %11247 : !llvm.struct<(!llvm.ptr, i64)>):
    %11248 = "mini.wrap"(%11247) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %11249 = "mini.narrow"(%11248) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<f64>
    %11250 = "mini.literal"() {"value" = 0.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %11251 = "mini.unwrap"(%11249) : (!mini.ptr<f64>) -> f64
    %11252 = "mini.unwrap"(%11250) : (!mini.ptr<f64>) -> f64
    %11253 = "mini.comparison"(%11251, %11252) {"op" = "GE"} : (f64, f64) -> i1
    %11254 = "mini.wrap"(%11253) : (i1) -> !mini.ptr<f64>
    %11255 = "mini.unwrap"(%11254) : (!mini.ptr<f64>) -> i1
    "mini.if"(%11255) ({
      %11256 = "mini.unionize"(%11249) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
      "mini.return"(%11256) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
    }) : (i1) -> ()
    %11257 = "mini.literal"() {"value" = 0.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %11258 = "mini.literal"() {"value" = 1.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %11259 = "mini.unwrap"(%11257) : (!mini.ptr<f64>) -> f64
    %11260 = "mini.unwrap"(%11258) : (!mini.ptr<f64>) -> f64
    %11261 = "mini.arithmetic"(%11259, %11260) {"op" = "SUB"} : (f64, f64) -> f64
    %11262 = "mini.wrap"(%11261) : (f64) -> !mini.ptr<f64>
    %11263 = "mini.unwrap"(%11262) : (!mini.ptr<f64>) -> f64
    %11264 = "mini.unwrap"(%11249) : (!mini.ptr<f64>) -> f64
    %11265 = "mini.arithmetic"(%11263, %11264) {"op" = "MUL"} : (f64, f64) -> f64
    %11266 = "mini.wrap"(%11265) : (f64) -> !mini.ptr<f64>
    %11267 = "mini.unionize"(%11266) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    "mini.return"(%11267) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
  }) {"func_name" = "Math__Self_abs_xPtrf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1273(%11268 : !llvm.ptr, %11269 : !llvm.struct<(!llvm.ptr, i64)>):
    %11270 = "mini.invariant"(%11268) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11271 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1274] : () -> ()
  ^bb1275:
    %11272 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%11272, %11271) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1276] : () -> ()
  ^bb1277:
    %11273 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%11273, %11271) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1276] : () -> ()
  ^bb1274:
    %11274 = "llvm.getelementptr"(%11268) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11275 = "llvm.load"(%11274) : (!llvm.ptr) -> !llvm.ptr
    %11276 = "llvm.getelementptr"(%11275) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11277 = "llvm.getelementptr"(%11275) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11278 = "llvm.getelementptr"(%11275) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11279 = "llvm.getelementptr"(%11275) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11280 = "llvm.load"(%11276) : (!llvm.ptr) -> i64
    %11281 = "llvm.load"(%11277) : (!llvm.ptr) -> i64
    %11282 = "llvm.load"(%11278) : (!llvm.ptr) -> !llvm.ptr
    %11283 = "llvm.load"(%11279) : (!llvm.ptr) -> !llvm.ptr
    %11284 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11285 = "llvm.ptrtoint"(%11284) : (!llvm.ptr) -> i64
    %11286 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11287 = "mini.subtype"(%11282, %11281, %11280, %11286, %11285, %11283) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11287) [^bb1275, ^bb1278] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1278:
    %11288 = "llvm.getelementptr"(%11268) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11289 = "llvm.load"(%11288) : (!llvm.ptr) -> !llvm.ptr
    %11290 = "llvm.getelementptr"(%11289) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11291 = "llvm.getelementptr"(%11289) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11292 = "llvm.getelementptr"(%11289) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11293 = "llvm.getelementptr"(%11289) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11294 = "llvm.load"(%11290) : (!llvm.ptr) -> i64
    %11295 = "llvm.load"(%11291) : (!llvm.ptr) -> i64
    %11296 = "llvm.load"(%11292) : (!llvm.ptr) -> !llvm.ptr
    %11297 = "llvm.load"(%11293) : (!llvm.ptr) -> !llvm.ptr
    %11298 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %11299 = "llvm.ptrtoint"(%11298) : (!llvm.ptr) -> i64
    %11300 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %11301 = "mini.subtype"(%11296, %11295, %11294, %11300, %11299, %11297) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11301) [^bb1277, ^bb1277] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1276:
    %11302 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %11303 = "llvm.load"(%11271) : (!llvm.ptr) -> i32
    %11304 = "llvm.getelementptr"(%11302, %11303) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11305 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11306 = "llvm.getelementptr"(%11304, %11305) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11306) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_abs_xPtri32__Self_abs_xPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1279(%11307 : !llvm.ptr, %11308 : !llvm.struct<(!llvm.ptr, i64)>, %11309 : !llvm.struct<(!llvm.ptr, i64)>):
    %11310 = "mini.wrap"(%11308) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %11311 = "mini.narrow"(%11310) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %11312 = "mini.wrap"(%11309) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %11313 = "mini.narrow"(%11312) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %11314 = "mini.unwrap"(%11311) : (!mini.ptr<i32>) -> i32
    %11315 = "mini.unwrap"(%11313) : (!mini.ptr<i32>) -> i32
    %11316 = "mini.comparison"(%11314, %11315) {"op" = "GT"} : (i32, i32) -> i1
    %11317 = "mini.wrap"(%11316) : (i1) -> !mini.ptr<i32>
    %11318 = "mini.unwrap"(%11317) : (!mini.ptr<i32>) -> i1
    "mini.if"(%11318) ({
      %11319 = "mini.unionize"(%11311) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
      "mini.return"(%11319) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
    }) : (i1) -> ()
    %11320 = "mini.unionize"(%11313) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    "mini.return"(%11320) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
  }) {"func_name" = "Math__Self_max_aPtri32_bPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1280(%11321 : !llvm.ptr, %11322 : !llvm.struct<(!llvm.ptr, i64)>, %11323 : !llvm.struct<(!llvm.ptr, i64)>):
    %11324 = "mini.wrap"(%11322) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %11325 = "mini.narrow"(%11324) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<f64>
    %11326 = "mini.wrap"(%11323) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %11327 = "mini.narrow"(%11326) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<f64>
    %11328 = "mini.unwrap"(%11325) : (!mini.ptr<f64>) -> f64
    %11329 = "mini.unwrap"(%11327) : (!mini.ptr<f64>) -> f64
    %11330 = "mini.comparison"(%11328, %11329) {"op" = "GT"} : (f64, f64) -> i1
    %11331 = "mini.wrap"(%11330) : (i1) -> !mini.ptr<f64>
    %11332 = "mini.unwrap"(%11331) : (!mini.ptr<f64>) -> i1
    "mini.if"(%11332) ({
      %11333 = "mini.unionize"(%11325) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
      "mini.return"(%11333) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
    }) : (i1) -> ()
    %11334 = "mini.unionize"(%11327) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    "mini.return"(%11334) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> ()
  }) {"func_name" = "Math__Self_max_aPtrf64_bPtrf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1281(%11335 : !llvm.ptr, %11336 : !llvm.struct<(!llvm.ptr, i64)>, %11337 : !llvm.struct<(!llvm.ptr, i64)>):
    %11338 = "mini.invariant"(%11335) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11339 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1282] : () -> ()
  ^bb1283:
    %11340 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%11340, %11339) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1284] : () -> ()
  ^bb1285:
    %11341 = "llvm.getelementptr"(%11335) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11342 = "llvm.load"(%11341) : (!llvm.ptr) -> !llvm.ptr
    %11343 = "llvm.getelementptr"(%11342) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11344 = "llvm.getelementptr"(%11342) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11345 = "llvm.getelementptr"(%11342) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11346 = "llvm.getelementptr"(%11342) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11347 = "llvm.load"(%11343) : (!llvm.ptr) -> i64
    %11348 = "llvm.load"(%11344) : (!llvm.ptr) -> i64
    %11349 = "llvm.load"(%11345) : (!llvm.ptr) -> !llvm.ptr
    %11350 = "llvm.load"(%11346) : (!llvm.ptr) -> !llvm.ptr
    %11351 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %11352 = "llvm.ptrtoint"(%11351) : (!llvm.ptr) -> i64
    %11353 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %11354 = "mini.subtype"(%11349, %11348, %11347, %11353, %11352, %11350) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11354) [^bb1283, ^bb1283] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1286:
    %11355 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%11355, %11339) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1284] : () -> ()
  ^bb1287:
    %11356 = "llvm.getelementptr"(%11335) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11357 = "llvm.load"(%11356) : (!llvm.ptr) -> !llvm.ptr
    %11358 = "llvm.getelementptr"(%11357) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11359 = "llvm.getelementptr"(%11357) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11360 = "llvm.getelementptr"(%11357) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11361 = "llvm.getelementptr"(%11357) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11362 = "llvm.load"(%11358) : (!llvm.ptr) -> i64
    %11363 = "llvm.load"(%11359) : (!llvm.ptr) -> i64
    %11364 = "llvm.load"(%11360) : (!llvm.ptr) -> !llvm.ptr
    %11365 = "llvm.load"(%11361) : (!llvm.ptr) -> !llvm.ptr
    %11366 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11367 = "llvm.ptrtoint"(%11366) : (!llvm.ptr) -> i64
    %11368 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11369 = "mini.subtype"(%11364, %11363, %11362, %11368, %11367, %11365) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11369) [^bb1286, ^bb1286] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1282:
    %11370 = "llvm.getelementptr"(%11335) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11371 = "llvm.load"(%11370) : (!llvm.ptr) -> !llvm.ptr
    %11372 = "llvm.getelementptr"(%11371) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11373 = "llvm.getelementptr"(%11371) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11374 = "llvm.getelementptr"(%11371) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11375 = "llvm.getelementptr"(%11371) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11376 = "llvm.load"(%11372) : (!llvm.ptr) -> i64
    %11377 = "llvm.load"(%11373) : (!llvm.ptr) -> i64
    %11378 = "llvm.load"(%11374) : (!llvm.ptr) -> !llvm.ptr
    %11379 = "llvm.load"(%11375) : (!llvm.ptr) -> !llvm.ptr
    %11380 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %11381 = "llvm.ptrtoint"(%11380) : (!llvm.ptr) -> i64
    %11382 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %11383 = "mini.subtype"(%11378, %11377, %11376, %11382, %11381, %11379) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11383) [^bb1285, ^bb1288] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1288:
    %11384 = "llvm.getelementptr"(%11335) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11385 = "llvm.load"(%11384) : (!llvm.ptr) -> !llvm.ptr
    %11386 = "llvm.getelementptr"(%11385) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11387 = "llvm.getelementptr"(%11385) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11388 = "llvm.getelementptr"(%11385) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11389 = "llvm.getelementptr"(%11385) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11390 = "llvm.load"(%11386) : (!llvm.ptr) -> i64
    %11391 = "llvm.load"(%11387) : (!llvm.ptr) -> i64
    %11392 = "llvm.load"(%11388) : (!llvm.ptr) -> !llvm.ptr
    %11393 = "llvm.load"(%11389) : (!llvm.ptr) -> !llvm.ptr
    %11394 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11395 = "llvm.ptrtoint"(%11394) : (!llvm.ptr) -> i64
    %11396 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11397 = "mini.subtype"(%11392, %11391, %11390, %11396, %11395, %11393) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11397) [^bb1287, ^bb1287] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1284:
    %11398 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %11399 = "llvm.load"(%11339) : (!llvm.ptr) -> i32
    %11400 = "llvm.getelementptr"(%11398, %11399) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11401 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11402 = "llvm.getelementptr"(%11400, %11401) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11402) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_max_aPtri32_bPtri32__Self_max_aPtrf64_bPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1289(%11403 : !llvm.ptr, %11404 : !llvm.struct<(!llvm.ptr, i64)>, %11405 : !llvm.struct<(!llvm.ptr, i64)>):
    %11406 = "mini.wrap"(%11404) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %11407 = "mini.narrow"(%11406) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %11408 = "mini.wrap"(%11405) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %11409 = "mini.narrow"(%11408) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %11410 = "mini.unwrap"(%11407) : (!mini.ptr<f64>) -> f64
    %11411 = "mini.unwrap"(%11409) : (!mini.ptr<f64>) -> f64
    %11412 = "mini.comparison"(%11410, %11411) {"op" = "LT"} : (f64, f64) -> i1
    %11413 = "mini.wrap"(%11412) : (i1) -> !mini.ptr<f64>
    %11414 = "mini.unwrap"(%11413) : (!mini.ptr<f64>) -> i1
    "mini.if"(%11414) ({
      %11415 = "mini.unionize"(%11407) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
      "mini.return"(%11415) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %11416 = "mini.unionize"(%11409) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    "mini.return"(%11416) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
  }) {"func_name" = "Math__Self_min_aPtrf64_bPtrf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1290(%11417 : !llvm.ptr, %11418 : !llvm.struct<(!llvm.ptr, i64)>, %11419 : !llvm.struct<(!llvm.ptr, i64)>):
    %11420 = "mini.wrap"(%11418) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %11421 = "mini.narrow"(%11420) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %11422 = "mini.wrap"(%11419) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %11423 = "mini.narrow"(%11422) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %11424 = "mini.unwrap"(%11421) : (!mini.ptr<i32>) -> i32
    %11425 = "mini.unwrap"(%11423) : (!mini.ptr<i32>) -> i32
    %11426 = "mini.comparison"(%11424, %11425) {"op" = "LT"} : (i32, i32) -> i1
    %11427 = "mini.wrap"(%11426) : (i1) -> !mini.ptr<i32>
    %11428 = "mini.unwrap"(%11427) : (!mini.ptr<i32>) -> i1
    "mini.if"(%11428) ({
      %11429 = "mini.unionize"(%11421) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
      "mini.return"(%11429) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %11430 = "mini.unionize"(%11423) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    "mini.return"(%11430) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
  }) {"func_name" = "Math__Self_min_aPtri32_bPtri32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1291(%11431 : !llvm.ptr, %11432 : !llvm.struct<(!llvm.ptr, i64)>, %11433 : !llvm.struct<(!llvm.ptr, i64)>):
    %11434 = "mini.invariant"(%11431) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11435 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1292] : () -> ()
  ^bb1293:
    %11436 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%11436, %11435) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1294] : () -> ()
  ^bb1295:
    %11437 = "llvm.getelementptr"(%11431) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11438 = "llvm.load"(%11437) : (!llvm.ptr) -> !llvm.ptr
    %11439 = "llvm.getelementptr"(%11438) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11440 = "llvm.getelementptr"(%11438) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11441 = "llvm.getelementptr"(%11438) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11442 = "llvm.getelementptr"(%11438) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11443 = "llvm.load"(%11439) : (!llvm.ptr) -> i64
    %11444 = "llvm.load"(%11440) : (!llvm.ptr) -> i64
    %11445 = "llvm.load"(%11441) : (!llvm.ptr) -> !llvm.ptr
    %11446 = "llvm.load"(%11442) : (!llvm.ptr) -> !llvm.ptr
    %11447 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11448 = "llvm.ptrtoint"(%11447) : (!llvm.ptr) -> i64
    %11449 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11450 = "mini.subtype"(%11445, %11444, %11443, %11449, %11448, %11446) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11450) [^bb1293, ^bb1293] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1296:
    %11451 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%11451, %11435) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1294] : () -> ()
  ^bb1297:
    %11452 = "llvm.getelementptr"(%11431) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11453 = "llvm.load"(%11452) : (!llvm.ptr) -> !llvm.ptr
    %11454 = "llvm.getelementptr"(%11453) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11455 = "llvm.getelementptr"(%11453) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11456 = "llvm.getelementptr"(%11453) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11457 = "llvm.getelementptr"(%11453) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11458 = "llvm.load"(%11454) : (!llvm.ptr) -> i64
    %11459 = "llvm.load"(%11455) : (!llvm.ptr) -> i64
    %11460 = "llvm.load"(%11456) : (!llvm.ptr) -> !llvm.ptr
    %11461 = "llvm.load"(%11457) : (!llvm.ptr) -> !llvm.ptr
    %11462 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %11463 = "llvm.ptrtoint"(%11462) : (!llvm.ptr) -> i64
    %11464 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %11465 = "mini.subtype"(%11460, %11459, %11458, %11464, %11463, %11461) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11465) [^bb1296, ^bb1296] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1292:
    %11466 = "llvm.getelementptr"(%11431) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11467 = "llvm.load"(%11466) : (!llvm.ptr) -> !llvm.ptr
    %11468 = "llvm.getelementptr"(%11467) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11469 = "llvm.getelementptr"(%11467) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11470 = "llvm.getelementptr"(%11467) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11471 = "llvm.getelementptr"(%11467) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11472 = "llvm.load"(%11468) : (!llvm.ptr) -> i64
    %11473 = "llvm.load"(%11469) : (!llvm.ptr) -> i64
    %11474 = "llvm.load"(%11470) : (!llvm.ptr) -> !llvm.ptr
    %11475 = "llvm.load"(%11471) : (!llvm.ptr) -> !llvm.ptr
    %11476 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11477 = "llvm.ptrtoint"(%11476) : (!llvm.ptr) -> i64
    %11478 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11479 = "mini.subtype"(%11474, %11473, %11472, %11478, %11477, %11475) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11479) [^bb1295, ^bb1298] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1298:
    %11480 = "llvm.getelementptr"(%11431) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11481 = "llvm.load"(%11480) : (!llvm.ptr) -> !llvm.ptr
    %11482 = "llvm.getelementptr"(%11481) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11483 = "llvm.getelementptr"(%11481) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11484 = "llvm.getelementptr"(%11481) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11485 = "llvm.getelementptr"(%11481) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11486 = "llvm.load"(%11482) : (!llvm.ptr) -> i64
    %11487 = "llvm.load"(%11483) : (!llvm.ptr) -> i64
    %11488 = "llvm.load"(%11484) : (!llvm.ptr) -> !llvm.ptr
    %11489 = "llvm.load"(%11485) : (!llvm.ptr) -> !llvm.ptr
    %11490 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %11491 = "llvm.ptrtoint"(%11490) : (!llvm.ptr) -> i64
    %11492 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %11493 = "mini.subtype"(%11488, %11487, %11486, %11492, %11491, %11489) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11493) [^bb1297, ^bb1297] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1294:
    %11494 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %11495 = "llvm.load"(%11435) : (!llvm.ptr) -> i32
    %11496 = "llvm.getelementptr"(%11494, %11495) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11497 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11498 = "llvm.getelementptr"(%11496, %11497) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11498) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_min_aPtrf64_bPtrf64__Self_min_aPtri32_bPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1299(%11499 : !llvm.ptr, %11500 : f64):
    %11501 = "mini.wrap"(%11500) : (f64) -> !mini.ptr<f64>
    %11502 = builtin.unrealized_conversion_cast %11501 : !mini.ptr<f64> to !mini.ptr<f64>
    %11503 = "mini.unwrap"(%11502) : (!mini.ptr<f64>) -> f64
    %11504 = "mini.intrinsic"(%11503) {"call_name" = "llvm.round.f64", "num_args" = 1 : i32} : (f64) -> f64
    %11505 = "mini.wrap"(%11504) : (f64) -> !mini.ptr<f64>
    %11506 = builtin.unrealized_conversion_cast %11505 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.return"(%11506) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_round_xPtrf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1300(%11507 : !llvm.ptr, %11508 : f64):
    %11509 = "mini.invariant"(%11507) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11510 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1301] : () -> ()
  ^bb1302:
    %11511 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%11511, %11510) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1303] : () -> ()
  ^bb1301:
    %11512 = "llvm.getelementptr"(%11507) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11513 = "llvm.load"(%11512) : (!llvm.ptr) -> !llvm.ptr
    %11514 = "llvm.getelementptr"(%11513) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11515 = "llvm.getelementptr"(%11513) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11516 = "llvm.getelementptr"(%11513) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11517 = "llvm.getelementptr"(%11513) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11518 = "llvm.load"(%11514) : (!llvm.ptr) -> i64
    %11519 = "llvm.load"(%11515) : (!llvm.ptr) -> i64
    %11520 = "llvm.load"(%11516) : (!llvm.ptr) -> !llvm.ptr
    %11521 = "llvm.load"(%11517) : (!llvm.ptr) -> !llvm.ptr
    %11522 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %11523 = "llvm.ptrtoint"(%11522) : (!llvm.ptr) -> i64
    %11524 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %11525 = "mini.subtype"(%11520, %11519, %11518, %11524, %11523, %11521) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11525) [^bb1302, ^bb1302] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1303:
    %11526 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %11527 = "llvm.load"(%11510) : (!llvm.ptr) -> i32
    %11528 = "llvm.getelementptr"(%11526, %11527) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11529 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11530 = "llvm.getelementptr"(%11528, %11529) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11530) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_round_xPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1304(%11531 : !llvm.ptr, %11532 : f64):
    %11533 = "mini.wrap"(%11532) : (f64) -> !mini.ptr<f64>
    %11534 = builtin.unrealized_conversion_cast %11533 : !mini.ptr<f64> to !mini.ptr<f64>
    %11535 = "mini.unwrap"(%11534) : (!mini.ptr<f64>) -> f64
    %11536 = "mini.intrinsic"(%11535) {"call_name" = "llvm.floor.f64", "num_args" = 1 : i32} : (f64) -> f64
    %11537 = "mini.wrap"(%11536) : (f64) -> !mini.ptr<f64>
    %11538 = builtin.unrealized_conversion_cast %11537 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.return"(%11538) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_floor_xPtrf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1305(%11539 : !llvm.ptr, %11540 : f64):
    %11541 = "mini.invariant"(%11539) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11542 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1306] : () -> ()
  ^bb1307:
    %11543 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%11543, %11542) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1308] : () -> ()
  ^bb1306:
    %11544 = "llvm.getelementptr"(%11539) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11545 = "llvm.load"(%11544) : (!llvm.ptr) -> !llvm.ptr
    %11546 = "llvm.getelementptr"(%11545) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11547 = "llvm.getelementptr"(%11545) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11548 = "llvm.getelementptr"(%11545) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11549 = "llvm.getelementptr"(%11545) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11550 = "llvm.load"(%11546) : (!llvm.ptr) -> i64
    %11551 = "llvm.load"(%11547) : (!llvm.ptr) -> i64
    %11552 = "llvm.load"(%11548) : (!llvm.ptr) -> !llvm.ptr
    %11553 = "llvm.load"(%11549) : (!llvm.ptr) -> !llvm.ptr
    %11554 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %11555 = "llvm.ptrtoint"(%11554) : (!llvm.ptr) -> i64
    %11556 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %11557 = "mini.subtype"(%11552, %11551, %11550, %11556, %11555, %11553) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11557) [^bb1307, ^bb1307] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1308:
    %11558 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %11559 = "llvm.load"(%11542) : (!llvm.ptr) -> i32
    %11560 = "llvm.getelementptr"(%11558, %11559) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11561 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11562 = "llvm.getelementptr"(%11560, %11561) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11562) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_floor_xPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1309(%11563 : !llvm.ptr, %11564 : f64):
    %11565 = "mini.wrap"(%11564) : (f64) -> !mini.ptr<f64>
    %11566 = builtin.unrealized_conversion_cast %11565 : !mini.ptr<f64> to !mini.ptr<f64>
    %11567 = "mini.unwrap"(%11566) : (!mini.ptr<f64>) -> f64
    %11568 = "mini.intrinsic"(%11567) {"call_name" = "llvm.ceil.f64", "num_args" = 1 : i32} : (f64) -> f64
    %11569 = "mini.wrap"(%11568) : (f64) -> !mini.ptr<f64>
    %11570 = builtin.unrealized_conversion_cast %11569 : !mini.ptr<f64> to !mini.ptr<f64>
    "mini.return"(%11570) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_ceiling_xPtrf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1310(%11571 : !llvm.ptr, %11572 : f64):
    %11573 = "mini.invariant"(%11571) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11574 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1311] : () -> ()
  ^bb1312:
    %11575 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%11575, %11574) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1313] : () -> ()
  ^bb1311:
    %11576 = "llvm.getelementptr"(%11571) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11577 = "llvm.load"(%11576) : (!llvm.ptr) -> !llvm.ptr
    %11578 = "llvm.getelementptr"(%11577) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11579 = "llvm.getelementptr"(%11577) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11580 = "llvm.getelementptr"(%11577) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11581 = "llvm.getelementptr"(%11577) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11582 = "llvm.load"(%11578) : (!llvm.ptr) -> i64
    %11583 = "llvm.load"(%11579) : (!llvm.ptr) -> i64
    %11584 = "llvm.load"(%11580) : (!llvm.ptr) -> !llvm.ptr
    %11585 = "llvm.load"(%11581) : (!llvm.ptr) -> !llvm.ptr
    %11586 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %11587 = "llvm.ptrtoint"(%11586) : (!llvm.ptr) -> i64
    %11588 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %11589 = "mini.subtype"(%11584, %11583, %11582, %11588, %11587, %11585) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11589) [^bb1312, ^bb1312] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1313:
    %11590 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %11591 = "llvm.load"(%11574) : (!llvm.ptr) -> i32
    %11592 = "llvm.getelementptr"(%11590, %11591) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11593 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11594 = "llvm.getelementptr"(%11592, %11593) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11594) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_ceiling_xPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "llvm.func"() <{"sym_name" = "clock", "function_type" = !llvm.func<i64 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "getchar", "function_type" = !llvm.func<i32 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fopen", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr)> (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fclose", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fgetc", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fprintf", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "system", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "mini.func"() ({
  ^bb1314(%11595 : !llvm.struct<(!llvm.ptr, i64)>):
    %11596 = "mini.wrap"(%11595) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %11597 = builtin.unrealized_conversion_cast %11596 : !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]> to !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %11598 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11599 = "mini.create_buffer"(%11598) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %11600 = builtin.unrealized_conversion_cast %11599 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %11601 = "mini.refer"(%11600) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %11602 = "mini.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "number"} : () -> !llvm.ptr
    %11603 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %11604 = "mini.buffer_indexation"(%11601, %11603) {"typ" = !llvm.array<6 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%11604, %11602) {"typ" = !llvm.array<6 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %11605 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11606 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11607 = "mini.unwrap"(%11601) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %11608 = "mini.unwrap"(%11605) : (!mini.ptr<i32>) -> i32
    %11609 = "mini.unwrap"(%11606) : (!mini.ptr<i32>) -> i32
    %11610 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %11611 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11612 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11613 = builtin.unrealized_conversion_cast %11601 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %11614 = "mini.unwrap"(%11613) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %11615 = builtin.unrealized_conversion_cast %11611 : !mini.ptr<i32> to !mini.ptr<i32>
    %11616 = "mini.unwrap"(%11615) : (!mini.ptr<i32>) -> i32
    %11617 = builtin.unrealized_conversion_cast %11612 : !mini.ptr<i32> to !mini.ptr<i32>
    %11618 = "mini.unwrap"(%11617) : (!mini.ptr<i32>) -> i32
    %11619 = "mini.unwrap"(%11610) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11620 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %11621 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11622 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11623 = "mini.parameterizations_array"(%11620, %11621, %11622) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11623, %11619, %11614, %11616, %11618) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %11624 = "mini.print"(%11610) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"String">) -> i32
  }) {"func_name" = "number_taker", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
    %11625 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11626 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11627 = "mini.unwrap"(%11625) : (!mini.ptr<i32>) -> i32
    %11628 = "mini.unwrap"(%11626) : (!mini.ptr<i32>) -> i32
    %11629 = "mini.comparison"(%11627, %11628) {"op" = "GT"} : (i32, i32) -> i1
    %11630 = "mini.wrap"(%11629) : (i1) -> !mini.ptr<i32>
    %11631 = "mini.unwrap"(%11630) : (!mini.ptr<i32>) -> i1
    "mini.if"(%11631) ({
      %11632 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %11633 = builtin.unrealized_conversion_cast %11632 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%11633) : (!mini.ptr<i32>) -> ()
    }, {
      %11634 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %11635 = builtin.unrealized_conversion_cast %11634 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%11635) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "early_return_in_else", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32)>, "offset" = 0 : i32, "meth_name" = "Integer_field_value"} : () -> ()
  "mini.func"() ({
  ^bb1315(%11636 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11637 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11638 : !llvm.ptr, %11639 : i32):
    %11640 = "mini.wrap"(%11636) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %11641 = "mini.to_fat_ptr"(%11640) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %11642 = "mini.wrap"(%11639) : (i32) -> !mini.ptr<i32>
    %11643 = builtin.unrealized_conversion_cast %11642 : !mini.ptr<i32> to !mini.ptr<i32>
    %11644 = "mini.field_access"(%11641) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    "mini.castassign"(%11644, %11643) ({
      %11645 = builtin.unrealized_conversion_cast %11643 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Integer_init_valuePtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1316(%11646 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11647 : !llvm.ptr, %11648 : i32):
    %11649 = "mini.invariant"(%11647) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11650 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1317] : () -> ()
  ^bb1318:
    %11651 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%11651, %11650) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1319] : () -> ()
  ^bb1317:
    %11652 = "llvm.getelementptr"(%11647) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11653 = "llvm.load"(%11652) : (!llvm.ptr) -> !llvm.ptr
    %11654 = "llvm.getelementptr"(%11653) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11655 = "llvm.getelementptr"(%11653) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11656 = "llvm.getelementptr"(%11653) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11657 = "llvm.getelementptr"(%11653) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11658 = "llvm.load"(%11654) : (!llvm.ptr) -> i64
    %11659 = "llvm.load"(%11655) : (!llvm.ptr) -> i64
    %11660 = "llvm.load"(%11656) : (!llvm.ptr) -> !llvm.ptr
    %11661 = "llvm.load"(%11657) : (!llvm.ptr) -> !llvm.ptr
    %11662 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11663 = "llvm.ptrtoint"(%11662) : (!llvm.ptr) -> i64
    %11664 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11665 = "mini.subtype"(%11660, %11659, %11658, %11664, %11663, %11661) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11665) [^bb1318, ^bb1318] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1319:
    %11666 = "llvm.extractvalue"(%11646) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11667 = "llvm.load"(%11650) : (!llvm.ptr) -> i32
    %11668 = "llvm.getelementptr"(%11666, %11667) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11669 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11670 = "llvm.getelementptr"(%11668, %11669) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11670) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B_init_valuePtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1320(%11671 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11672 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11673 : !llvm.ptr, %11674 : i32):
    %11675 = "mini.wrap"(%11671) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %11676 = "mini.to_fat_ptr"(%11675) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %11677 = "mini.wrap"(%11674) : (i32) -> !mini.ptr<i32>
    %11678 = builtin.unrealized_conversion_cast %11677 : !mini.ptr<i32> to !mini.ptr<i32>
    %11679 = "mini.field_access"(%11676) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11680 = "mini.unwrap"(%11679) : (!mini.ptr<i32>) -> i32
    %11681 = "mini.unwrap"(%11678) : (!mini.ptr<i32>) -> i32
    %11682 = "mini.arithmetic"(%11680, %11681) {"op" = "ADD"} : (i32, i32) -> i32
    %11683 = "mini.wrap"(%11682) : (i32) -> !mini.ptr<i32>
    %11684 = "mini.unwrap"(%11683) : (!mini.ptr<i32>) -> i32
    %11685 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32} : () -> !mini.fatptr<"Integer">
    %11686 = "mini.field_access"(%11676) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11687 = "mini.unwrap"(%11686) : (!mini.ptr<i32>) -> i32
    %11688 = "mini.unwrap"(%11678) : (!mini.ptr<i32>) -> i32
    %11689 = "mini.arithmetic"(%11687, %11688) {"op" = "ADD"} : (i32, i32) -> i32
    %11690 = "mini.wrap"(%11689) : (i32) -> !mini.ptr<i32>
    %11691 = builtin.unrealized_conversion_cast %11690 : !mini.ptr<i32> to !mini.ptr<i32>
    %11692 = "mini.unwrap"(%11691) : (!mini.ptr<i32>) -> i32
    %11693 = "mini.unwrap"(%11685) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11694 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11695 = "mini.parameterizations_array"(%11694) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11695, %11693, %11692) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %11696 = "mini.to_fat_ptr"(%11685) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%11696) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__ADD_otherPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1321(%11697 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11698 : !llvm.ptr, %11699 : i32):
    %11700 = "mini.invariant"(%11698) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11701 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1322] : () -> ()
  ^bb1323:
    %11702 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%11702, %11701) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1324] : () -> ()
  ^bb1322:
    %11703 = "llvm.getelementptr"(%11698) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11704 = "llvm.load"(%11703) : (!llvm.ptr) -> !llvm.ptr
    %11705 = "llvm.getelementptr"(%11704) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11706 = "llvm.getelementptr"(%11704) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11707 = "llvm.getelementptr"(%11704) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11708 = "llvm.getelementptr"(%11704) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11709 = "llvm.load"(%11705) : (!llvm.ptr) -> i64
    %11710 = "llvm.load"(%11706) : (!llvm.ptr) -> i64
    %11711 = "llvm.load"(%11707) : (!llvm.ptr) -> !llvm.ptr
    %11712 = "llvm.load"(%11708) : (!llvm.ptr) -> !llvm.ptr
    %11713 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11714 = "llvm.ptrtoint"(%11713) : (!llvm.ptr) -> i64
    %11715 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11716 = "mini.subtype"(%11711, %11710, %11709, %11715, %11714, %11712) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11716) [^bb1323, ^bb1323] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1324:
    %11717 = "llvm.extractvalue"(%11697) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11718 = "llvm.load"(%11701) : (!llvm.ptr) -> i32
    %11719 = "llvm.getelementptr"(%11717, %11718) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11720 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11721 = "llvm.getelementptr"(%11719, %11720) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11721) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__ADD_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1325(%11722 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11723 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11724 : !llvm.ptr, %11725 : i32):
    %11726 = "mini.wrap"(%11722) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %11727 = "mini.to_fat_ptr"(%11726) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %11728 = "mini.wrap"(%11725) : (i32) -> !mini.ptr<i32>
    %11729 = builtin.unrealized_conversion_cast %11728 : !mini.ptr<i32> to !mini.ptr<i32>
    %11730 = "mini.field_access"(%11727) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11731 = "mini.unwrap"(%11730) : (!mini.ptr<i32>) -> i32
    %11732 = "mini.unwrap"(%11729) : (!mini.ptr<i32>) -> i32
    %11733 = "mini.arithmetic"(%11731, %11732) {"op" = "SUB"} : (i32, i32) -> i32
    %11734 = "mini.wrap"(%11733) : (i32) -> !mini.ptr<i32>
    %11735 = "mini.unwrap"(%11734) : (!mini.ptr<i32>) -> i32
    %11736 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32} : () -> !mini.fatptr<"Integer">
    %11737 = "mini.field_access"(%11727) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11738 = "mini.unwrap"(%11737) : (!mini.ptr<i32>) -> i32
    %11739 = "mini.unwrap"(%11729) : (!mini.ptr<i32>) -> i32
    %11740 = "mini.arithmetic"(%11738, %11739) {"op" = "SUB"} : (i32, i32) -> i32
    %11741 = "mini.wrap"(%11740) : (i32) -> !mini.ptr<i32>
    %11742 = builtin.unrealized_conversion_cast %11741 : !mini.ptr<i32> to !mini.ptr<i32>
    %11743 = "mini.unwrap"(%11742) : (!mini.ptr<i32>) -> i32
    %11744 = "mini.unwrap"(%11736) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11745 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11746 = "mini.parameterizations_array"(%11745) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11746, %11744, %11743) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %11747 = "mini.to_fat_ptr"(%11736) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%11747) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__SUB_otherPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1326(%11748 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11749 : !llvm.ptr, %11750 : i32):
    %11751 = "mini.invariant"(%11749) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11752 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1327] : () -> ()
  ^bb1328:
    %11753 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%11753, %11752) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1329] : () -> ()
  ^bb1327:
    %11754 = "llvm.getelementptr"(%11749) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11755 = "llvm.load"(%11754) : (!llvm.ptr) -> !llvm.ptr
    %11756 = "llvm.getelementptr"(%11755) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11757 = "llvm.getelementptr"(%11755) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11758 = "llvm.getelementptr"(%11755) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11759 = "llvm.getelementptr"(%11755) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11760 = "llvm.load"(%11756) : (!llvm.ptr) -> i64
    %11761 = "llvm.load"(%11757) : (!llvm.ptr) -> i64
    %11762 = "llvm.load"(%11758) : (!llvm.ptr) -> !llvm.ptr
    %11763 = "llvm.load"(%11759) : (!llvm.ptr) -> !llvm.ptr
    %11764 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11765 = "llvm.ptrtoint"(%11764) : (!llvm.ptr) -> i64
    %11766 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11767 = "mini.subtype"(%11762, %11761, %11760, %11766, %11765, %11763) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11767) [^bb1328, ^bb1328] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1329:
    %11768 = "llvm.extractvalue"(%11748) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11769 = "llvm.load"(%11752) : (!llvm.ptr) -> i32
    %11770 = "llvm.getelementptr"(%11768, %11769) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11771 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11772 = "llvm.getelementptr"(%11770, %11771) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11772) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__SUB_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1330(%11773 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11774 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11775 : !llvm.ptr, %11776 : i32):
    %11777 = "mini.wrap"(%11773) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %11778 = "mini.to_fat_ptr"(%11777) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %11779 = "mini.wrap"(%11776) : (i32) -> !mini.ptr<i32>
    %11780 = builtin.unrealized_conversion_cast %11779 : !mini.ptr<i32> to !mini.ptr<i32>
    %11781 = "mini.field_access"(%11778) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11782 = "mini.unwrap"(%11781) : (!mini.ptr<i32>) -> i32
    %11783 = "mini.unwrap"(%11780) : (!mini.ptr<i32>) -> i32
    %11784 = "mini.arithmetic"(%11782, %11783) {"op" = "MUL"} : (i32, i32) -> i32
    %11785 = "mini.wrap"(%11784) : (i32) -> !mini.ptr<i32>
    %11786 = "mini.unwrap"(%11785) : (!mini.ptr<i32>) -> i32
    %11787 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32} : () -> !mini.fatptr<"Integer">
    %11788 = "mini.field_access"(%11778) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11789 = "mini.unwrap"(%11788) : (!mini.ptr<i32>) -> i32
    %11790 = "mini.unwrap"(%11780) : (!mini.ptr<i32>) -> i32
    %11791 = "mini.arithmetic"(%11789, %11790) {"op" = "MUL"} : (i32, i32) -> i32
    %11792 = "mini.wrap"(%11791) : (i32) -> !mini.ptr<i32>
    %11793 = builtin.unrealized_conversion_cast %11792 : !mini.ptr<i32> to !mini.ptr<i32>
    %11794 = "mini.unwrap"(%11793) : (!mini.ptr<i32>) -> i32
    %11795 = "mini.unwrap"(%11787) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11796 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11797 = "mini.parameterizations_array"(%11796) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11797, %11795, %11794) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %11798 = "mini.to_fat_ptr"(%11787) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%11798) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__MUL_otherPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1331(%11799 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11800 : !llvm.ptr, %11801 : i32):
    %11802 = "mini.invariant"(%11800) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11803 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1332] : () -> ()
  ^bb1333:
    %11804 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%11804, %11803) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1334] : () -> ()
  ^bb1332:
    %11805 = "llvm.getelementptr"(%11800) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11806 = "llvm.load"(%11805) : (!llvm.ptr) -> !llvm.ptr
    %11807 = "llvm.getelementptr"(%11806) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11808 = "llvm.getelementptr"(%11806) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11809 = "llvm.getelementptr"(%11806) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11810 = "llvm.getelementptr"(%11806) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11811 = "llvm.load"(%11807) : (!llvm.ptr) -> i64
    %11812 = "llvm.load"(%11808) : (!llvm.ptr) -> i64
    %11813 = "llvm.load"(%11809) : (!llvm.ptr) -> !llvm.ptr
    %11814 = "llvm.load"(%11810) : (!llvm.ptr) -> !llvm.ptr
    %11815 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11816 = "llvm.ptrtoint"(%11815) : (!llvm.ptr) -> i64
    %11817 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11818 = "mini.subtype"(%11813, %11812, %11811, %11817, %11816, %11814) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11818) [^bb1333, ^bb1333] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1334:
    %11819 = "llvm.extractvalue"(%11799) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11820 = "llvm.load"(%11803) : (!llvm.ptr) -> i32
    %11821 = "llvm.getelementptr"(%11819, %11820) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11822 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11823 = "llvm.getelementptr"(%11821, %11822) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11823) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__MUL_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1335(%11824 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11825 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11826 : !llvm.ptr, %11827 : i32):
    %11828 = "mini.wrap"(%11824) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %11829 = "mini.to_fat_ptr"(%11828) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %11830 = "mini.wrap"(%11827) : (i32) -> !mini.ptr<i32>
    %11831 = builtin.unrealized_conversion_cast %11830 : !mini.ptr<i32> to !mini.ptr<i32>
    %11832 = "mini.field_access"(%11829) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11833 = "mini.unwrap"(%11832) : (!mini.ptr<i32>) -> i32
    %11834 = "mini.unwrap"(%11831) : (!mini.ptr<i32>) -> i32
    %11835 = "mini.arithmetic"(%11833, %11834) {"op" = "DIV"} : (i32, i32) -> i32
    %11836 = "mini.wrap"(%11835) : (i32) -> !mini.ptr<i32>
    %11837 = "mini.unwrap"(%11836) : (!mini.ptr<i32>) -> i32
    %11838 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32} : () -> !mini.fatptr<"Integer">
    %11839 = "mini.field_access"(%11829) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11840 = "mini.unwrap"(%11839) : (!mini.ptr<i32>) -> i32
    %11841 = "mini.unwrap"(%11831) : (!mini.ptr<i32>) -> i32
    %11842 = "mini.arithmetic"(%11840, %11841) {"op" = "DIV"} : (i32, i32) -> i32
    %11843 = "mini.wrap"(%11842) : (i32) -> !mini.ptr<i32>
    %11844 = builtin.unrealized_conversion_cast %11843 : !mini.ptr<i32> to !mini.ptr<i32>
    %11845 = "mini.unwrap"(%11844) : (!mini.ptr<i32>) -> i32
    %11846 = "mini.unwrap"(%11838) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11847 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11848 = "mini.parameterizations_array"(%11847) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11848, %11846, %11845) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %11849 = "mini.to_fat_ptr"(%11838) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%11849) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__DIV_otherPtri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1336(%11850 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11851 : !llvm.ptr, %11852 : i32):
    %11853 = "mini.invariant"(%11851) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11854 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1337] : () -> ()
  ^bb1338:
    %11855 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%11855, %11854) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1339] : () -> ()
  ^bb1337:
    %11856 = "llvm.getelementptr"(%11851) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11857 = "llvm.load"(%11856) : (!llvm.ptr) -> !llvm.ptr
    %11858 = "llvm.getelementptr"(%11857) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11859 = "llvm.getelementptr"(%11857) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11860 = "llvm.getelementptr"(%11857) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11861 = "llvm.getelementptr"(%11857) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11862 = "llvm.load"(%11858) : (!llvm.ptr) -> i64
    %11863 = "llvm.load"(%11859) : (!llvm.ptr) -> i64
    %11864 = "llvm.load"(%11860) : (!llvm.ptr) -> !llvm.ptr
    %11865 = "llvm.load"(%11861) : (!llvm.ptr) -> !llvm.ptr
    %11866 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11867 = "llvm.ptrtoint"(%11866) : (!llvm.ptr) -> i64
    %11868 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11869 = "mini.subtype"(%11864, %11863, %11862, %11868, %11867, %11865) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11869) [^bb1338, ^bb1338] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1339:
    %11870 = "llvm.extractvalue"(%11850) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11871 = "llvm.load"(%11854) : (!llvm.ptr) -> i32
    %11872 = "llvm.getelementptr"(%11870, %11871) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11873 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11874 = "llvm.getelementptr"(%11872, %11873) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11874) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__DIV_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1340(%11875 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11876 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11877 : !llvm.ptr):
    %11878 = "mini.wrap"(%11875) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %11879 = "mini.to_fat_ptr"(%11878) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %11880 = "mini.field_access"(%11879) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %11881 = "mini.unionize"(%11880) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %11882 = "mini.unwrap"(%11881) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %11883 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11884 = "mini.parameterizations_array"(%11883) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%11884, %11882) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Integer_print_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1341(%11885 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11886 : !llvm.ptr):
    %11887 = "mini.invariant"(%11886) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11888 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1342] : () -> ()
  ^bb1342:
    %11889 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%11889, %11888) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1343] : () -> ()
  ^bb1343:
    %11890 = "llvm.extractvalue"(%11885) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11891 = "llvm.load"(%11888) : (!llvm.ptr) -> i32
    %11892 = "llvm.getelementptr"(%11890, %11891) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11893 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11894 = "llvm.getelementptr"(%11892, %11893) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11894) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B_print_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1344(%11895 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11896 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11897 : !llvm.ptr):
    %11898 = "mini.wrap"(%11895) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"BigBoy">
    %11899 = "mini.to_fat_ptr"(%11898) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "BigBoy", "to_typ_name" = "BigBoy", "invariant"} : (!mini.fatptr<"BigBoy">) -> !mini.fatptr<"BigBoy">
    %11900 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11901 = "mini.create_buffer"(%11900) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %11902 = builtin.unrealized_conversion_cast %11901 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %11903 = "mini.refer"(%11902) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %11904 = "mini.literal"() {"typ" = !llvm.array<10 x i8>, "value" = "Here I am!"} : () -> !llvm.ptr
    %11905 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %11906 = "mini.buffer_indexation"(%11903, %11905) {"typ" = !llvm.array<10 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%11906, %11904) {"typ" = !llvm.array<10 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %11907 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11908 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11909 = "mini.unwrap"(%11903) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %11910 = "mini.unwrap"(%11907) : (!mini.ptr<i32>) -> i32
    %11911 = "mini.unwrap"(%11908) : (!mini.ptr<i32>) -> i32
    %11912 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %11913 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11914 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %11915 = builtin.unrealized_conversion_cast %11903 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %11916 = "mini.unwrap"(%11915) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %11917 = builtin.unrealized_conversion_cast %11913 : !mini.ptr<i32> to !mini.ptr<i32>
    %11918 = "mini.unwrap"(%11917) : (!mini.ptr<i32>) -> i32
    %11919 = builtin.unrealized_conversion_cast %11914 : !mini.ptr<i32> to !mini.ptr<i32>
    %11920 = "mini.unwrap"(%11919) : (!mini.ptr<i32>) -> i32
    %11921 = "mini.unwrap"(%11912) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %11922 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %11923 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11924 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %11925 = "mini.parameterizations_array"(%11922, %11923, %11924) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%11925, %11921, %11916, %11918, %11920) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %11926 = builtin.unrealized_conversion_cast %11912 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %11927 = "mini.unwrap"(%11926) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %11928 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %11929 = "mini.parameterizations_array"(%11928) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%11929, %11927) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "BigBoy_introduce_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1345(%11930 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11931 : !llvm.ptr):
    %11932 = "mini.invariant"(%11931) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11933 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1346] : () -> ()
  ^bb1346:
    %11934 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%11934, %11933) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1347] : () -> ()
  ^bb1347:
    %11935 = "llvm.extractvalue"(%11930) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11936 = "llvm.load"(%11933) : (!llvm.ptr) -> i32
    %11937 = "llvm.getelementptr"(%11935, %11936) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11938 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11939 = "llvm.getelementptr"(%11937, %11938) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11939) : (!llvm.ptr) -> ()
  }) {"func_name" = "BigBoy_B_introduce_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1348(%11940 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11941 : !llvm.ptr):
    %11942 = "mini.invariant"(%11941) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11943 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1349] : () -> ()
  ^bb1349:
    %11944 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%11944, %11943) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1350] : () -> ()
  ^bb1350:
    %11945 = "llvm.extractvalue"(%11940) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11946 = "llvm.load"(%11943) : (!llvm.ptr) -> i32
    %11947 = "llvm.getelementptr"(%11945, %11946) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11948 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11949 = "llvm.getelementptr"(%11947, %11948) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11949) : (!llvm.ptr) -> ()
  }) {"func_name" = "BigBoy_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32)>, "offset" = 0 : i32, "meth_name" = "Integer2_field_value"} : () -> ()
  "mini.func"() ({
  ^bb1351(%11950 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11951 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11952 : !llvm.ptr):
    %11953 = "mini.wrap"(%11950) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer2">
    %11954 = "mini.to_fat_ptr"(%11953) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer2", "to_typ_name" = "Integer2", "invariant"} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %11955 = "mini.field_access"(%11954) {"offset" = 0 : i64, "vtable_bytes" = 320 : i32} : (!mini.fatptr<"Integer2">) -> !mini.ptr<i32>
    %11956 = builtin.unrealized_conversion_cast %11955 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%11956) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "Integer2_value_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1352(%11957 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11958 : !llvm.ptr):
    %11959 = "mini.invariant"(%11958) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11960 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1353] : () -> ()
  ^bb1353:
    %11961 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%11961, %11960) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1354] : () -> ()
  ^bb1354:
    %11962 = "llvm.extractvalue"(%11957) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11963 = "llvm.load"(%11960) : (!llvm.ptr) -> i32
    %11964 = "llvm.getelementptr"(%11962, %11963) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11965 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11966 = "llvm.getelementptr"(%11964, %11965) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11966) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_value_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1355(%11967 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11968 : !llvm.ptr, %11969 : i32):
    %11970 = "mini.invariant"(%11968) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11971 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1356] : () -> ()
  ^bb1357:
    %11972 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%11972, %11971) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1358] : () -> ()
  ^bb1356:
    %11973 = "llvm.getelementptr"(%11968) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11974 = "llvm.load"(%11973) : (!llvm.ptr) -> !llvm.ptr
    %11975 = "llvm.getelementptr"(%11974) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11976 = "llvm.getelementptr"(%11974) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11977 = "llvm.getelementptr"(%11974) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11978 = "llvm.getelementptr"(%11974) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %11979 = "llvm.load"(%11975) : (!llvm.ptr) -> i64
    %11980 = "llvm.load"(%11976) : (!llvm.ptr) -> i64
    %11981 = "llvm.load"(%11977) : (!llvm.ptr) -> !llvm.ptr
    %11982 = "llvm.load"(%11978) : (!llvm.ptr) -> !llvm.ptr
    %11983 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %11984 = "llvm.ptrtoint"(%11983) : (!llvm.ptr) -> i64
    %11985 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %11986 = "mini.subtype"(%11981, %11980, %11979, %11985, %11984, %11982) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%11986) [^bb1357, ^bb1357] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1358:
    %11987 = "llvm.extractvalue"(%11967) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %11988 = "llvm.load"(%11971) : (!llvm.ptr) -> i32
    %11989 = "llvm.getelementptr"(%11987, %11988) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %11990 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %11991 = "llvm.getelementptr"(%11989, %11990) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%11991) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_init_valuePtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1359(%11992 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11993 : !llvm.ptr, %11994 : i32):
    %11995 = "mini.invariant"(%11993) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %11996 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1360] : () -> ()
  ^bb1361:
    %11997 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%11997, %11996) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1362] : () -> ()
  ^bb1360:
    %11998 = "llvm.getelementptr"(%11993) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %11999 = "llvm.load"(%11998) : (!llvm.ptr) -> !llvm.ptr
    %12000 = "llvm.getelementptr"(%11999) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12001 = "llvm.getelementptr"(%11999) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12002 = "llvm.getelementptr"(%11999) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12003 = "llvm.getelementptr"(%11999) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12004 = "llvm.load"(%12000) : (!llvm.ptr) -> i64
    %12005 = "llvm.load"(%12001) : (!llvm.ptr) -> i64
    %12006 = "llvm.load"(%12002) : (!llvm.ptr) -> !llvm.ptr
    %12007 = "llvm.load"(%12003) : (!llvm.ptr) -> !llvm.ptr
    %12008 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %12009 = "llvm.ptrtoint"(%12008) : (!llvm.ptr) -> i64
    %12010 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %12011 = "mini.subtype"(%12006, %12005, %12004, %12010, %12009, %12007) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12011) [^bb1361, ^bb1361] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1362:
    %12012 = "llvm.extractvalue"(%11992) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12013 = "llvm.load"(%11996) : (!llvm.ptr) -> i32
    %12014 = "llvm.getelementptr"(%12012, %12013) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12015 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12016 = "llvm.getelementptr"(%12014, %12015) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12016) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__ADD_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1363(%12017 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12018 : !llvm.ptr, %12019 : i32):
    %12020 = "mini.invariant"(%12018) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12021 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1364] : () -> ()
  ^bb1365:
    %12022 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%12022, %12021) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1366] : () -> ()
  ^bb1364:
    %12023 = "llvm.getelementptr"(%12018) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12024 = "llvm.load"(%12023) : (!llvm.ptr) -> !llvm.ptr
    %12025 = "llvm.getelementptr"(%12024) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12026 = "llvm.getelementptr"(%12024) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12027 = "llvm.getelementptr"(%12024) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12028 = "llvm.getelementptr"(%12024) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12029 = "llvm.load"(%12025) : (!llvm.ptr) -> i64
    %12030 = "llvm.load"(%12026) : (!llvm.ptr) -> i64
    %12031 = "llvm.load"(%12027) : (!llvm.ptr) -> !llvm.ptr
    %12032 = "llvm.load"(%12028) : (!llvm.ptr) -> !llvm.ptr
    %12033 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %12034 = "llvm.ptrtoint"(%12033) : (!llvm.ptr) -> i64
    %12035 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %12036 = "mini.subtype"(%12031, %12030, %12029, %12035, %12034, %12032) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12036) [^bb1365, ^bb1365] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1366:
    %12037 = "llvm.extractvalue"(%12017) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12038 = "llvm.load"(%12021) : (!llvm.ptr) -> i32
    %12039 = "llvm.getelementptr"(%12037, %12038) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12040 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12041 = "llvm.getelementptr"(%12039, %12040) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12041) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__SUB_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1367(%12042 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12043 : !llvm.ptr, %12044 : i32):
    %12045 = "mini.invariant"(%12043) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12046 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1368] : () -> ()
  ^bb1369:
    %12047 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%12047, %12046) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1370] : () -> ()
  ^bb1368:
    %12048 = "llvm.getelementptr"(%12043) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12049 = "llvm.load"(%12048) : (!llvm.ptr) -> !llvm.ptr
    %12050 = "llvm.getelementptr"(%12049) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12051 = "llvm.getelementptr"(%12049) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12052 = "llvm.getelementptr"(%12049) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12053 = "llvm.getelementptr"(%12049) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12054 = "llvm.load"(%12050) : (!llvm.ptr) -> i64
    %12055 = "llvm.load"(%12051) : (!llvm.ptr) -> i64
    %12056 = "llvm.load"(%12052) : (!llvm.ptr) -> !llvm.ptr
    %12057 = "llvm.load"(%12053) : (!llvm.ptr) -> !llvm.ptr
    %12058 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %12059 = "llvm.ptrtoint"(%12058) : (!llvm.ptr) -> i64
    %12060 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %12061 = "mini.subtype"(%12056, %12055, %12054, %12060, %12059, %12057) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12061) [^bb1369, ^bb1369] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1370:
    %12062 = "llvm.extractvalue"(%12042) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12063 = "llvm.load"(%12046) : (!llvm.ptr) -> i32
    %12064 = "llvm.getelementptr"(%12062, %12063) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12065 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12066 = "llvm.getelementptr"(%12064, %12065) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12066) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__MUL_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1371(%12067 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12068 : !llvm.ptr, %12069 : i32):
    %12070 = "mini.invariant"(%12068) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12071 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1372] : () -> ()
  ^bb1373:
    %12072 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%12072, %12071) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1374] : () -> ()
  ^bb1372:
    %12073 = "llvm.getelementptr"(%12068) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12074 = "llvm.load"(%12073) : (!llvm.ptr) -> !llvm.ptr
    %12075 = "llvm.getelementptr"(%12074) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12076 = "llvm.getelementptr"(%12074) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12077 = "llvm.getelementptr"(%12074) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12078 = "llvm.getelementptr"(%12074) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12079 = "llvm.load"(%12075) : (!llvm.ptr) -> i64
    %12080 = "llvm.load"(%12076) : (!llvm.ptr) -> i64
    %12081 = "llvm.load"(%12077) : (!llvm.ptr) -> !llvm.ptr
    %12082 = "llvm.load"(%12078) : (!llvm.ptr) -> !llvm.ptr
    %12083 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %12084 = "llvm.ptrtoint"(%12083) : (!llvm.ptr) -> i64
    %12085 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %12086 = "mini.subtype"(%12081, %12080, %12079, %12085, %12084, %12082) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12086) [^bb1373, ^bb1373] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1374:
    %12087 = "llvm.extractvalue"(%12067) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12088 = "llvm.load"(%12071) : (!llvm.ptr) -> i32
    %12089 = "llvm.getelementptr"(%12087, %12088) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12090 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12091 = "llvm.getelementptr"(%12089, %12090) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12091) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__DIV_otherPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1375(%12092 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12093 : !llvm.ptr):
    %12094 = "mini.invariant"(%12093) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12095 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1376] : () -> ()
  ^bb1376:
    %12096 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%12096, %12095) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1377] : () -> ()
  ^bb1377:
    %12097 = "llvm.extractvalue"(%12092) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12098 = "llvm.load"(%12095) : (!llvm.ptr) -> i32
    %12099 = "llvm.getelementptr"(%12097, %12098) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12100 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12101 = "llvm.getelementptr"(%12099, %12100) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12101) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_print_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1378(%12102 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12103 : !llvm.ptr):
    %12104 = "mini.invariant"(%12103) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12105 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1379] : () -> ()
  ^bb1379:
    %12106 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%12106, %12105) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1380] : () -> ()
  ^bb1380:
    %12107 = "llvm.extractvalue"(%12102) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12108 = "llvm.load"(%12105) : (!llvm.ptr) -> i32
    %12109 = "llvm.getelementptr"(%12107, %12108) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12110 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12111 = "llvm.getelementptr"(%12109, %12110) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12111) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_introduce_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1381(%12112 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12113 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12114 : !llvm.ptr):
    %12115 = "mini.wrap"(%12112) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer2">
    %12116 = "mini.to_fat_ptr"(%12115) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer2", "to_typ_name" = "Integer2", "invariant"} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %12117 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12118 = "mini.create_buffer"(%12117) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %12119 = builtin.unrealized_conversion_cast %12118 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12120 = "mini.refer"(%12119) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12121 = "mini.literal"() {"typ" = !llvm.array<8 x i8>, "value" = "Integer2"} : () -> !llvm.ptr
    %12122 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %12123 = "mini.buffer_indexation"(%12120, %12122) {"typ" = !llvm.array<8 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%12123, %12121) {"typ" = !llvm.array<8 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %12124 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12125 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12126 = "mini.unwrap"(%12120) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12127 = "mini.unwrap"(%12124) : (!mini.ptr<i32>) -> i32
    %12128 = "mini.unwrap"(%12125) : (!mini.ptr<i32>) -> i32
    %12129 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %12130 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12131 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12132 = builtin.unrealized_conversion_cast %12120 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12133 = "mini.unwrap"(%12132) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12134 = builtin.unrealized_conversion_cast %12130 : !mini.ptr<i32> to !mini.ptr<i32>
    %12135 = "mini.unwrap"(%12134) : (!mini.ptr<i32>) -> i32
    %12136 = builtin.unrealized_conversion_cast %12131 : !mini.ptr<i32> to !mini.ptr<i32>
    %12137 = "mini.unwrap"(%12136) : (!mini.ptr<i32>) -> i32
    %12138 = "mini.unwrap"(%12129) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12139 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %12140 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12141 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12142 = "mini.parameterizations_array"(%12139, %12140, %12141) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12142, %12138, %12133, %12135, %12137) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %12143 = "mini.to_fat_ptr"(%12129) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%12143) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "Integer2_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1382(%12144 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12145 : !llvm.ptr):
    %12146 = "mini.invariant"(%12145) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12147 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1383] : () -> ()
  ^bb1383:
    %12148 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%12148, %12147) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1384] : () -> ()
  ^bb1384:
    %12149 = "llvm.extractvalue"(%12144) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12150 = "llvm.load"(%12147) : (!llvm.ptr) -> i32
    %12151 = "llvm.getelementptr"(%12149, %12150) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12152 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12153 = "llvm.getelementptr"(%12151, %12152) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12153) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, f64, i32)>, "offset" = 0 : i32, "meth_name" = "Animal_field_age"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, f64, i32)>, "offset" = 1 : i32, "meth_name" = "Animal_field_hp"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, f64, i32)>, "offset" = 2 : i32, "meth_name" = "Animal_field_skill"} : () -> ()
  "mini.func"() ({
  ^bb1385(%12154 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12155 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12156 : !llvm.ptr, %12157 : i32, %12158 : f64, %12159 : i32):
    %12160 = "mini.wrap"(%12154) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %12161 = "mini.to_fat_ptr"(%12160) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %12162 = "mini.wrap"(%12157) : (i32) -> !mini.ptr<i32>
    %12163 = builtin.unrealized_conversion_cast %12162 : !mini.ptr<i32> to !mini.ptr<i32>
    %12164 = "mini.field_access"(%12161) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<i32>
    "mini.castassign"(%12164, %12163) ({
      %12165 = builtin.unrealized_conversion_cast %12163 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %12166 = "mini.wrap"(%12158) : (f64) -> !mini.ptr<f64>
    %12167 = builtin.unrealized_conversion_cast %12166 : !mini.ptr<f64> to !mini.ptr<f64>
    %12168 = "mini.field_access"(%12161) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<f64>
    "mini.castassign"(%12168, %12167) ({
      %12169 = builtin.unrealized_conversion_cast %12167 : !mini.ptr<f64> to !mini.ptr<f64>
    }) {"from_typ" = f64, "to_typ" = f64, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ", "should_offset"} : (!mini.ptr<f64>, !mini.ptr<f64>) -> ()
    %12170 = "mini.wrap"(%12159) : (i32) -> !mini.ptr<i32>
    %12171 = builtin.unrealized_conversion_cast %12170 : !mini.ptr<i32> to !mini.ptr<i32>
    %12172 = "mini.field_access"(%12161) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<i32>
    "mini.castassign"(%12172, %12171) ({
      %12173 = builtin.unrealized_conversion_cast %12171 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Animal_init_agePtri32_hpPtrf64_skillPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1386(%12174 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12175 : !llvm.ptr, %12176 : i32, %12177 : f64, %12178 : i32):
    %12179 = "mini.invariant"(%12175) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12180 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1387] : () -> ()
  ^bb1388:
    %12181 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%12181, %12180) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1389] : () -> ()
  ^bb1390:
    %12182 = "llvm.getelementptr"(%12175) <{"rawConstantIndices" = array<i32: 0, 2>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12183 = "llvm.load"(%12182) : (!llvm.ptr) -> !llvm.ptr
    %12184 = "llvm.getelementptr"(%12183) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12185 = "llvm.getelementptr"(%12183) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12186 = "llvm.getelementptr"(%12183) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12187 = "llvm.getelementptr"(%12183) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12188 = "llvm.load"(%12184) : (!llvm.ptr) -> i64
    %12189 = "llvm.load"(%12185) : (!llvm.ptr) -> i64
    %12190 = "llvm.load"(%12186) : (!llvm.ptr) -> !llvm.ptr
    %12191 = "llvm.load"(%12187) : (!llvm.ptr) -> !llvm.ptr
    %12192 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %12193 = "llvm.ptrtoint"(%12192) : (!llvm.ptr) -> i64
    %12194 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %12195 = "mini.subtype"(%12190, %12189, %12188, %12194, %12193, %12191) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12195) [^bb1388, ^bb1388] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1391:
    %12196 = "llvm.getelementptr"(%12175) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12197 = "llvm.load"(%12196) : (!llvm.ptr) -> !llvm.ptr
    %12198 = "llvm.getelementptr"(%12197) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12199 = "llvm.getelementptr"(%12197) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12200 = "llvm.getelementptr"(%12197) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12201 = "llvm.getelementptr"(%12197) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12202 = "llvm.load"(%12198) : (!llvm.ptr) -> i64
    %12203 = "llvm.load"(%12199) : (!llvm.ptr) -> i64
    %12204 = "llvm.load"(%12200) : (!llvm.ptr) -> !llvm.ptr
    %12205 = "llvm.load"(%12201) : (!llvm.ptr) -> !llvm.ptr
    %12206 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %12207 = "llvm.ptrtoint"(%12206) : (!llvm.ptr) -> i64
    %12208 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %12209 = "mini.subtype"(%12204, %12203, %12202, %12208, %12207, %12205) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12209) [^bb1390, ^bb1390] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1387:
    %12210 = "llvm.getelementptr"(%12175) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12211 = "llvm.load"(%12210) : (!llvm.ptr) -> !llvm.ptr
    %12212 = "llvm.getelementptr"(%12211) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12213 = "llvm.getelementptr"(%12211) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12214 = "llvm.getelementptr"(%12211) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12215 = "llvm.getelementptr"(%12211) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12216 = "llvm.load"(%12212) : (!llvm.ptr) -> i64
    %12217 = "llvm.load"(%12213) : (!llvm.ptr) -> i64
    %12218 = "llvm.load"(%12214) : (!llvm.ptr) -> !llvm.ptr
    %12219 = "llvm.load"(%12215) : (!llvm.ptr) -> !llvm.ptr
    %12220 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %12221 = "llvm.ptrtoint"(%12220) : (!llvm.ptr) -> i64
    %12222 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %12223 = "mini.subtype"(%12218, %12217, %12216, %12222, %12221, %12219) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12223) [^bb1391, ^bb1391] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1389:
    %12224 = "llvm.extractvalue"(%12174) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12225 = "llvm.load"(%12180) : (!llvm.ptr) -> i32
    %12226 = "llvm.getelementptr"(%12224, %12225) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12227 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12228 = "llvm.getelementptr"(%12226, %12227) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12228) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_init_agePtri32_hpPtrf64_skillPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1392(%12229 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12230 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12231 : !llvm.ptr):
    %12232 = "mini.wrap"(%12229) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %12233 = "mini.to_fat_ptr"(%12232) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %12234 = "mini.field_access"(%12233) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<i32>
    %12235 = builtin.unrealized_conversion_cast %12234 : !mini.ptr<i32> to !mini.ptr<i32>
    %12236 = "mini.unwrap"(%12235) : (!mini.ptr<i32>) -> i32
    %12237 = "mini.unwrap"(%12233) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12238 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12239 = "mini.parameterizations_array"(%12238) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12239, %12237, %12236) {"offset" = 6 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %12240 = "mini.field_access"(%12233) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<i32>
    %12241 = builtin.unrealized_conversion_cast %12240 : !mini.ptr<i32> to !mini.ptr<i32>
    %12242 = "mini.unwrap"(%12241) : (!mini.ptr<i32>) -> i32
    %12243 = "mini.unwrap"(%12233) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12244 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12245 = "mini.parameterizations_array"(%12244) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12245, %12243, %12242) {"offset" = 6 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
  }) {"func_name" = "Animal_say_age_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1393(%12246 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12247 : !llvm.ptr):
    %12248 = "mini.invariant"(%12247) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12249 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1394] : () -> ()
  ^bb1394:
    %12250 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%12250, %12249) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1395] : () -> ()
  ^bb1395:
    %12251 = "llvm.extractvalue"(%12246) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12252 = "llvm.load"(%12249) : (!llvm.ptr) -> i32
    %12253 = "llvm.getelementptr"(%12251, %12252) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12254 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12255 = "llvm.getelementptr"(%12253, %12254) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12255) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_say_age_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1396(%12256 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12257 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12258 : !llvm.ptr):
    %12259 = "mini.wrap"(%12256) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %12260 = "mini.to_fat_ptr"(%12259) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %12261 = "mini.field_access"(%12260) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<i32>
    %12262 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %12263 = "mini.unwrap"(%12262) : (!mini.ptr<i1>) -> i1
    %12264 = builtin.unrealized_conversion_cast %12261 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.if"(%12263) ({
      %12265 = builtin.unrealized_conversion_cast %12264 : !mini.ptr<i32> to !mini.ptr<i32>
      %12266 = "mini.unionize"(%12265) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
      %12267 = "mini.unwrap"(%12266) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %12268 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %12269 = "mini.parameterizations_array"(%12268) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%12269, %12267) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%12264, %12265) ({
        %12270 = builtin.unrealized_conversion_cast %12265 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "Animal_say_skill_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1397(%12271 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12272 : !llvm.ptr):
    %12273 = "mini.invariant"(%12272) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12274 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1398] : () -> ()
  ^bb1398:
    %12275 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%12275, %12274) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1399] : () -> ()
  ^bb1399:
    %12276 = "llvm.extractvalue"(%12271) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12277 = "llvm.load"(%12274) : (!llvm.ptr) -> i32
    %12278 = "llvm.getelementptr"(%12276, %12277) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12279 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12280 = "llvm.getelementptr"(%12278, %12279) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12280) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_say_skill_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1400(%12281 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12282 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12283 : !llvm.ptr, %12284 : i32):
    %12285 = "mini.wrap"(%12281) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %12286 = "mini.to_fat_ptr"(%12285) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %12287 = "mini.wrap"(%12284) : (i32) -> !mini.ptr<i32>
    %12288 = builtin.unrealized_conversion_cast %12287 : !mini.ptr<i32> to !mini.ptr<i32>
    %12289 = "mini.unionize"(%12288) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %12290 = "mini.unwrap"(%12289) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12291 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12292 = "mini.parameterizations_array"(%12291) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12292, %12290) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Animal_say_messagePtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1401(%12293 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12294 : !llvm.ptr, %12295 : i32):
    %12296 = "mini.invariant"(%12294) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12297 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1402] : () -> ()
  ^bb1403:
    %12298 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%12298, %12297) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1404] : () -> ()
  ^bb1402:
    %12299 = "llvm.getelementptr"(%12294) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12300 = "llvm.load"(%12299) : (!llvm.ptr) -> !llvm.ptr
    %12301 = "llvm.getelementptr"(%12300) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12302 = "llvm.getelementptr"(%12300) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12303 = "llvm.getelementptr"(%12300) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12304 = "llvm.getelementptr"(%12300) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12305 = "llvm.load"(%12301) : (!llvm.ptr) -> i64
    %12306 = "llvm.load"(%12302) : (!llvm.ptr) -> i64
    %12307 = "llvm.load"(%12303) : (!llvm.ptr) -> !llvm.ptr
    %12308 = "llvm.load"(%12304) : (!llvm.ptr) -> !llvm.ptr
    %12309 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %12310 = "llvm.ptrtoint"(%12309) : (!llvm.ptr) -> i64
    %12311 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %12312 = "mini.subtype"(%12307, %12306, %12305, %12311, %12310, %12308) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12312) [^bb1403, ^bb1403] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1404:
    %12313 = "llvm.extractvalue"(%12293) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12314 = "llvm.load"(%12297) : (!llvm.ptr) -> i32
    %12315 = "llvm.getelementptr"(%12313, %12314) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12316 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12317 = "llvm.getelementptr"(%12315, %12316) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12317) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_say_messagePtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1405(%12318 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12319 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12320 : !llvm.ptr):
    %12321 = "mini.wrap"(%12318) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %12322 = "mini.to_fat_ptr"(%12321) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %12323 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12324 = "mini.literal"() {"value" = 5.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %12325 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12326 = "mini.unwrap"(%12323) : (!mini.ptr<i32>) -> i32
    %12327 = "mini.unwrap"(%12324) : (!mini.ptr<f64>) -> f64
    %12328 = "mini.unwrap"(%12325) : (!mini.ptr<i32>) -> i32
    %12329 = "mini.new"() {"typ" = !llvm.struct<(i32, f64, i32)>, "class_name" = "Animal", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"Animal">
    %12330 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12331 = "mini.literal"() {"value" = 5.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %12332 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12333 = builtin.unrealized_conversion_cast %12330 : !mini.ptr<i32> to !mini.ptr<i32>
    %12334 = "mini.unwrap"(%12333) : (!mini.ptr<i32>) -> i32
    %12335 = builtin.unrealized_conversion_cast %12331 : !mini.ptr<f64> to !mini.ptr<f64>
    %12336 = "mini.unwrap"(%12335) : (!mini.ptr<f64>) -> f64
    %12337 = builtin.unrealized_conversion_cast %12332 : !mini.ptr<i32> to !mini.ptr<i32>
    %12338 = "mini.unwrap"(%12337) : (!mini.ptr<i32>) -> i32
    %12339 = "mini.unwrap"(%12329) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12340 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12341 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %12342 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12343 = "mini.parameterizations_array"(%12340, %12341, %12342) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12343, %12339, %12334, %12336, %12338) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "f64_typ", "i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64, i32) -> ()
    %12344 = builtin.unrealized_conversion_cast %12329 : !mini.fatptr<"Animal"> to !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">]>
    "mini.return"(%12344) : (!mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">]>) -> ()
  }) {"func_name" = "Animal_do_nothing_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1406(%12345 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12346 : !llvm.ptr):
    %12347 = "mini.invariant"(%12346) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12348 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1407] : () -> ()
  ^bb1407:
    %12349 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%12349, %12348) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1408] : () -> ()
  ^bb1408:
    %12350 = "llvm.extractvalue"(%12345) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12351 = "llvm.load"(%12348) : (!llvm.ptr) -> i32
    %12352 = "llvm.getelementptr"(%12350, %12351) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12353 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12354 = "llvm.getelementptr"(%12352, %12353) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12354) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_do_nothing_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, f64)>, "offset" = 0 : i32, "meth_name" = "Beaver_field_color"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, f64)>, "offset" = 1 : i32, "meth_name" = "Beaver_field_name"} : () -> ()
  "mini.func"() ({
  ^bb1409(%12355 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12356 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12357 : !llvm.ptr, %12358 : i32, %12359 : f64):
    %12360 = "mini.wrap"(%12355) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Beaver">
    %12361 = "mini.to_fat_ptr"(%12360) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver", "invariant"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %12362 = "mini.wrap"(%12358) : (i32) -> !mini.ptr<i32>
    %12363 = builtin.unrealized_conversion_cast %12362 : !mini.ptr<i32> to !mini.ptr<i32>
    %12364 = "mini.field_access"(%12361) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"Beaver">) -> !mini.ptr<i32>
    "mini.castassign"(%12364, %12363) ({
      %12365 = builtin.unrealized_conversion_cast %12363 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %12366 = "mini.wrap"(%12359) : (f64) -> !mini.ptr<f64>
    %12367 = builtin.unrealized_conversion_cast %12366 : !mini.ptr<f64> to !mini.ptr<f64>
    %12368 = "mini.field_access"(%12361) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"Beaver">) -> !mini.ptr<f64>
    "mini.castassign"(%12368, %12367) ({
      %12369 = builtin.unrealized_conversion_cast %12367 : !mini.ptr<f64> to !mini.ptr<f64>
    }) {"from_typ" = f64, "to_typ" = f64, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ", "should_offset"} : (!mini.ptr<f64>, !mini.ptr<f64>) -> ()
  }) {"func_name" = "Beaver_init_colorPtri32_namePtrf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1410(%12370 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12371 : !llvm.ptr, %12372 : i32, %12373 : f64):
    %12374 = "mini.invariant"(%12371) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12375 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1411] : () -> ()
  ^bb1412:
    %12376 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%12376, %12375) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1413] : () -> ()
  ^bb1414:
    %12377 = "llvm.getelementptr"(%12371) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12378 = "llvm.load"(%12377) : (!llvm.ptr) -> !llvm.ptr
    %12379 = "llvm.getelementptr"(%12378) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12380 = "llvm.getelementptr"(%12378) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12381 = "llvm.getelementptr"(%12378) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12382 = "llvm.getelementptr"(%12378) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12383 = "llvm.load"(%12379) : (!llvm.ptr) -> i64
    %12384 = "llvm.load"(%12380) : (!llvm.ptr) -> i64
    %12385 = "llvm.load"(%12381) : (!llvm.ptr) -> !llvm.ptr
    %12386 = "llvm.load"(%12382) : (!llvm.ptr) -> !llvm.ptr
    %12387 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %12388 = "llvm.ptrtoint"(%12387) : (!llvm.ptr) -> i64
    %12389 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %12390 = "mini.subtype"(%12385, %12384, %12383, %12389, %12388, %12386) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12390) [^bb1412, ^bb1412] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1411:
    %12391 = "llvm.getelementptr"(%12371) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12392 = "llvm.load"(%12391) : (!llvm.ptr) -> !llvm.ptr
    %12393 = "llvm.getelementptr"(%12392) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12394 = "llvm.getelementptr"(%12392) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12395 = "llvm.getelementptr"(%12392) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12396 = "llvm.getelementptr"(%12392) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12397 = "llvm.load"(%12393) : (!llvm.ptr) -> i64
    %12398 = "llvm.load"(%12394) : (!llvm.ptr) -> i64
    %12399 = "llvm.load"(%12395) : (!llvm.ptr) -> !llvm.ptr
    %12400 = "llvm.load"(%12396) : (!llvm.ptr) -> !llvm.ptr
    %12401 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %12402 = "llvm.ptrtoint"(%12401) : (!llvm.ptr) -> i64
    %12403 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %12404 = "mini.subtype"(%12399, %12398, %12397, %12403, %12402, %12400) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12404) [^bb1414, ^bb1414] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1413:
    %12405 = "llvm.extractvalue"(%12370) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12406 = "llvm.load"(%12375) : (!llvm.ptr) -> i32
    %12407 = "llvm.getelementptr"(%12405, %12406) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12408 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12409 = "llvm.getelementptr"(%12407, %12408) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12409) : (!llvm.ptr) -> ()
  }) {"func_name" = "Beaver_B_init_colorPtri32_namePtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1415(%12410 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12411 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12412 : !llvm.ptr, %12413 : i32):
    %12414 = "mini.wrap"(%12410) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Beaver">
    %12415 = "mini.to_fat_ptr"(%12414) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver", "invariant"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %12416 = "mini.wrap"(%12413) : (i32) -> !mini.ptr<i32>
    %12417 = builtin.unrealized_conversion_cast %12416 : !mini.ptr<i32> to !mini.ptr<i32>
    %12418 = "mini.field_access"(%12415) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"Beaver">) -> !mini.ptr<i32>
    %12419 = "mini.unwrap"(%12418) : (!mini.ptr<i32>) -> i32
    %12420 = "mini.unwrap"(%12417) : (!mini.ptr<i32>) -> i32
    %12421 = "mini.arithmetic"(%12419, %12420) {"op" = "ADD"} : (i32, i32) -> i32
    %12422 = "mini.wrap"(%12421) : (i32) -> !mini.ptr<i32>
    %12423 = "mini.field_access"(%12415) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"Beaver">) -> !mini.ptr<i32>
    "mini.castassign"(%12423, %12422) ({
      %12424 = builtin.unrealized_conversion_cast %12422 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Beaver__ADD_xPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1416(%12425 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12426 : !llvm.ptr, %12427 : i32):
    %12428 = "mini.invariant"(%12426) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12429 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1417] : () -> ()
  ^bb1418:
    %12430 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%12430, %12429) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1419] : () -> ()
  ^bb1417:
    %12431 = "llvm.getelementptr"(%12426) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12432 = "llvm.load"(%12431) : (!llvm.ptr) -> !llvm.ptr
    %12433 = "llvm.getelementptr"(%12432) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12434 = "llvm.getelementptr"(%12432) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12435 = "llvm.getelementptr"(%12432) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12436 = "llvm.getelementptr"(%12432) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12437 = "llvm.load"(%12433) : (!llvm.ptr) -> i64
    %12438 = "llvm.load"(%12434) : (!llvm.ptr) -> i64
    %12439 = "llvm.load"(%12435) : (!llvm.ptr) -> !llvm.ptr
    %12440 = "llvm.load"(%12436) : (!llvm.ptr) -> !llvm.ptr
    %12441 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %12442 = "llvm.ptrtoint"(%12441) : (!llvm.ptr) -> i64
    %12443 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %12444 = "mini.subtype"(%12439, %12438, %12437, %12443, %12442, %12440) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12444) [^bb1418, ^bb1418] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1419:
    %12445 = "llvm.extractvalue"(%12425) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12446 = "llvm.load"(%12429) : (!llvm.ptr) -> i32
    %12447 = "llvm.getelementptr"(%12445, %12446) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12448 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12449 = "llvm.getelementptr"(%12447, %12448) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12449) : (!llvm.ptr) -> ()
  }) {"func_name" = "Beaver_B__ADD_xPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1420(%12450 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12451 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12452 : !llvm.ptr):
    %12453 = "mini.wrap"(%12450) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Beaver">
    %12454 = "mini.to_fat_ptr"(%12453) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver", "invariant"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %12455 = "mini.field_access"(%12454) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"Beaver">) -> !mini.ptr<i32>
    %12456 = "mini.unionize"(%12455) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %12457 = "mini.unwrap"(%12456) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12458 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12459 = "mini.parameterizations_array"(%12458) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12459, %12457) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Beaver_say_color_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1421(%12460 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12461 : !llvm.ptr):
    %12462 = "mini.invariant"(%12461) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12463 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1422] : () -> ()
  ^bb1422:
    %12464 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%12464, %12463) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1423] : () -> ()
  ^bb1423:
    %12465 = "llvm.extractvalue"(%12460) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12466 = "llvm.load"(%12463) : (!llvm.ptr) -> i32
    %12467 = "llvm.getelementptr"(%12465, %12466) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12468 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12469 = "llvm.getelementptr"(%12467, %12468) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12469) : (!llvm.ptr) -> ()
  }) {"func_name" = "Beaver_B_say_color_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "offset" = 0 : i32, "meth_name" = "ListNode_field_data"} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "offset" = 1 : i32, "meth_name" = "ListNode_field_next"} : () -> ()
  "mini.func"() ({
  ^bb1424(%12470 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12471 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12472 : !llvm.ptr, %12473 : i32):
    %12474 = "mini.wrap"(%12470) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %12475 = "mini.to_fat_ptr"(%12474) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12476 = "mini.wrap"(%12473) : (i32) -> !mini.ptr<i32>
    %12477 = builtin.unrealized_conversion_cast %12476 : !mini.ptr<i32> to !mini.ptr<i32>
    %12478 = "mini.field_access"(%12475) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ListNode">) -> !mini.ptr<i32>
    "mini.castassign"(%12478, %12477) ({
      %12479 = builtin.unrealized_conversion_cast %12477 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %12480 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %12481 = "mini.field_access"(%12475) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ListNode">) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    "mini.castassign"(%12481, %12480) ({
      %12482 = "mini.unionize"(%12480) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    }) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, !llvm.ptr) -> ()
  }) {"func_name" = "ListNode_init_dataPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1425(%12483 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12484 : !llvm.ptr, %12485 : i32):
    %12486 = "mini.invariant"(%12484) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12487 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1426] : () -> ()
  ^bb1427:
    %12488 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%12488, %12487) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1428] : () -> ()
  ^bb1426:
    %12489 = "llvm.getelementptr"(%12484) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12490 = "llvm.load"(%12489) : (!llvm.ptr) -> !llvm.ptr
    %12491 = "llvm.getelementptr"(%12490) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12492 = "llvm.getelementptr"(%12490) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12493 = "llvm.getelementptr"(%12490) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12494 = "llvm.getelementptr"(%12490) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12495 = "llvm.load"(%12491) : (!llvm.ptr) -> i64
    %12496 = "llvm.load"(%12492) : (!llvm.ptr) -> i64
    %12497 = "llvm.load"(%12493) : (!llvm.ptr) -> !llvm.ptr
    %12498 = "llvm.load"(%12494) : (!llvm.ptr) -> !llvm.ptr
    %12499 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %12500 = "llvm.ptrtoint"(%12499) : (!llvm.ptr) -> i64
    %12501 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %12502 = "mini.subtype"(%12497, %12496, %12495, %12501, %12500, %12498) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12502) [^bb1427, ^bb1427] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1428:
    %12503 = "llvm.extractvalue"(%12483) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12504 = "llvm.load"(%12487) : (!llvm.ptr) -> i32
    %12505 = "llvm.getelementptr"(%12503, %12504) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12506 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12507 = "llvm.getelementptr"(%12505, %12506) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12507) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_init_dataPtri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1429(%12508 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12509 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12510 : !llvm.ptr, %12511 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %12512 = "mini.wrap"(%12508) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %12513 = "mini.to_fat_ptr"(%12512) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12514 = "mini.wrap"(%12511) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %12515 = "mini.to_fat_ptr"(%12514) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12516 = "mini.field_access"(%12513) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ListNode">) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    "mini.castassign"(%12516, %12515) ({
      %12517 = builtin.unrealized_conversion_cast %12515 : !mini.fatptr<"ListNode"> to !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "ListNode", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, !mini.fatptr<"ListNode">) -> ()
    %12518 = "mini.to_fat_ptr"(%12515) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    "mini.return"(%12518) : (!mini.fatptr<"ListNode">) -> ()
  }) {"func_name" = "ListNode_push_nextListNode", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1430(%12519 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12520 : !llvm.ptr, %12521 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %12522 = "mini.invariant"(%12520) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12523 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1431] : () -> ()
  ^bb1432:
    %12524 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%12524, %12523) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1433] : () -> ()
  ^bb1431:
    %12525 = "llvm.getelementptr"(%12520) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12526 = "llvm.load"(%12525) : (!llvm.ptr) -> !llvm.ptr
    %12527 = "llvm.getelementptr"(%12526) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12528 = "llvm.getelementptr"(%12526) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12529 = "llvm.getelementptr"(%12526) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12530 = "llvm.getelementptr"(%12526) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12531 = "llvm.load"(%12527) : (!llvm.ptr) -> i64
    %12532 = "llvm.load"(%12528) : (!llvm.ptr) -> i64
    %12533 = "llvm.load"(%12529) : (!llvm.ptr) -> !llvm.ptr
    %12534 = "llvm.load"(%12530) : (!llvm.ptr) -> !llvm.ptr
    %12535 = "mini.addr_of"() {"global_name" = @ListNode} : () -> !llvm.ptr
    %12536 = "llvm.ptrtoint"(%12535) : (!llvm.ptr) -> i64
    %12537 = "llvm.mlir.constant"() <{"value" = 16690719123176460140 : i64}> : () -> i64
    %12538 = "mini.subtype"(%12533, %12532, %12531, %12537, %12536, %12534) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12538) [^bb1432, ^bb1432] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1433:
    %12539 = "llvm.extractvalue"(%12519) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12540 = "llvm.load"(%12523) : (!llvm.ptr) -> i32
    %12541 = "llvm.getelementptr"(%12539, %12540) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12542 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12543 = "llvm.getelementptr"(%12541, %12542) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12543) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_push_nextListNode", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1434(%12544 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12545 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12546 : !llvm.ptr):
    %12547 = "mini.wrap"(%12544) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %12548 = "mini.to_fat_ptr"(%12547) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12549 = "mini.field_access"(%12548) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ListNode">) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    %12550 = builtin.unrealized_conversion_cast %12549 : !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]> to !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    "mini.return"(%12550) : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> ()
  }) {"func_name" = "ListNode_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1435(%12551 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12552 : !llvm.ptr):
    %12553 = "mini.invariant"(%12552) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12554 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1436] : () -> ()
  ^bb1436:
    %12555 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%12555, %12554) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1437] : () -> ()
  ^bb1437:
    %12556 = "llvm.extractvalue"(%12551) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12557 = "llvm.load"(%12554) : (!llvm.ptr) -> i32
    %12558 = "llvm.getelementptr"(%12556, %12557) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12559 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12560 = "llvm.getelementptr"(%12558, %12559) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12560) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1438(%12561 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12562 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12563 : !llvm.ptr):
    %12564 = "mini.wrap"(%12561) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %12565 = "mini.to_fat_ptr"(%12564) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12566 = "mini.field_access"(%12565) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ListNode">) -> !mini.ptr<i32>
    %12567 = builtin.unrealized_conversion_cast %12566 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%12567) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "ListNode_data_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1439(%12568 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12569 : !llvm.ptr):
    %12570 = "mini.invariant"(%12569) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12571 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1440] : () -> ()
  ^bb1440:
    %12572 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%12572, %12571) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1441] : () -> ()
  ^bb1441:
    %12573 = "llvm.extractvalue"(%12568) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12574 = "llvm.load"(%12571) : (!llvm.ptr) -> i32
    %12575 = "llvm.getelementptr"(%12573, %12574) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12576 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12577 = "llvm.getelementptr"(%12575, %12576) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12577) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_data_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1442(%12578 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12579 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12580 : !llvm.ptr):
    %12581 = "mini.wrap"(%12578) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %12582 = "mini.to_fat_ptr"(%12581) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12583 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12584 = "mini.unwrap"(%12583) : (!mini.ptr<i32>) -> i32
    %12585 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ListNode", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"ListNode">
    %12586 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12587 = builtin.unrealized_conversion_cast %12586 : !mini.ptr<i32> to !mini.ptr<i32>
    %12588 = "mini.unwrap"(%12587) : (!mini.ptr<i32>) -> i32
    %12589 = "mini.unwrap"(%12585) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12590 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12591 = "mini.parameterizations_array"(%12590) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12591, %12589, %12588) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %12592 = "mini.to_fat_ptr"(%12585) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12593 = "mini.refer"(%12592) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12594 = "mini.to_fat_ptr"(%12582) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12595 = "mini.unwrap"(%12594) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12596 = "mini.unwrap"(%12593) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12597 = "mini.parameterization"() {"id_hierarchy" = ["ListNode"], "name_hierarchy" = ["ListNode"]} : () -> !llvm.ptr
    %12598 = "mini.parameterizations_array"(%12597) : (!llvm.ptr) -> !llvm.ptr
    %12599 = "mini.method_call"(%12598, %12596, %12595) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %12600 = "mini.to_fat_ptr"(%12599) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12601 = "mini.unwrap"(%12593) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12602 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ListIterator", "num_data_fields" = 1 : i32} : () -> !mini.fatptr<"ListIterator">
    %12603 = "mini.to_fat_ptr"(%12593) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12604 = "mini.unwrap"(%12603) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12605 = "mini.unwrap"(%12602) : (!mini.fatptr<"ListIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12606 = "mini.parameterization"() {"id_hierarchy" = ["ListNode"], "name_hierarchy" = ["ListNode"]} : () -> !llvm.ptr
    %12607 = "mini.parameterizations_array"(%12606) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12607, %12605, %12604) {"offset" = 1 : i32, "vptrs" = [#none], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %12608 = "mini.to_fat_ptr"(%12602) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator", "invariant"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    "mini.return"(%12608) : (!mini.fatptr<"ListIterator">) -> ()
  }) {"func_name" = "ListNode_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1443(%12609 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12610 : !llvm.ptr):
    %12611 = "mini.invariant"(%12610) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12612 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1444] : () -> ()
  ^bb1444:
    %12613 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%12613, %12612) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1445] : () -> ()
  ^bb1445:
    %12614 = "llvm.extractvalue"(%12609) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12615 = "llvm.load"(%12612) : (!llvm.ptr) -> i32
    %12616 = "llvm.getelementptr"(%12614, %12615) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12617 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12618 = "llvm.getelementptr"(%12616, %12617) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12618) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.getter_def"() {"struct_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "offset" = 0 : i32, "meth_name" = "ListIterator_field_node"} : () -> ()
  "mini.func"() ({
  ^bb1446(%12619 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12620 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12621 : !llvm.ptr, %12622 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %12623 = "mini.wrap"(%12619) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListIterator">
    %12624 = "mini.to_fat_ptr"(%12623) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator", "invariant"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %12625 = "mini.wrap"(%12622) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %12626 = "mini.to_fat_ptr"(%12625) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %12627 = "mini.field_access"(%12624) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListNode">
    "mini.castassign"(%12627, %12626) ({
      %12628 = "mini.to_fat_ptr"(%12626) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "should_offset"} : (!mini.fatptr<"ListNode">, !mini.fatptr<"ListNode">) -> ()
  }) {"func_name" = "ListIterator_init_nodeListNode", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1447(%12629 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12630 : !llvm.ptr, %12631 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %12632 = "mini.invariant"(%12630) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12633 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1448] : () -> ()
  ^bb1449:
    %12634 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%12634, %12633) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1450] : () -> ()
  ^bb1448:
    %12635 = "llvm.getelementptr"(%12630) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<1 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12636 = "llvm.load"(%12635) : (!llvm.ptr) -> !llvm.ptr
    %12637 = "llvm.getelementptr"(%12636) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12638 = "llvm.getelementptr"(%12636) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12639 = "llvm.getelementptr"(%12636) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12640 = "llvm.getelementptr"(%12636) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12641 = "llvm.load"(%12637) : (!llvm.ptr) -> i64
    %12642 = "llvm.load"(%12638) : (!llvm.ptr) -> i64
    %12643 = "llvm.load"(%12639) : (!llvm.ptr) -> !llvm.ptr
    %12644 = "llvm.load"(%12640) : (!llvm.ptr) -> !llvm.ptr
    %12645 = "mini.addr_of"() {"global_name" = @ListNode} : () -> !llvm.ptr
    %12646 = "llvm.ptrtoint"(%12645) : (!llvm.ptr) -> i64
    %12647 = "llvm.mlir.constant"() <{"value" = 16690719123176460140 : i64}> : () -> i64
    %12648 = "mini.subtype"(%12643, %12642, %12641, %12647, %12646, %12644) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12648) [^bb1449, ^bb1449] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1450:
    %12649 = "llvm.extractvalue"(%12629) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12650 = "llvm.load"(%12633) : (!llvm.ptr) -> i32
    %12651 = "llvm.getelementptr"(%12649, %12650) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12652 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12653 = "llvm.getelementptr"(%12651, %12652) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12653) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListIterator_B_init_nodeListNode", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1451(%12654 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12655 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12656 : !llvm.ptr):
    %12657 = "mini.wrap"(%12654) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListIterator">
    %12658 = "mini.to_fat_ptr"(%12657) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator", "invariant"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %12659 = "mini.field_access"(%12658) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListNode">
    %12660 = "mini.unwrap"(%12659) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12661 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %12662 = "mini.method_call"(%12661, %12660) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    %12663 = builtin.unrealized_conversion_cast %12662 : !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]> to !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    %12664 = "mini.checkflag"(%12663) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> i1
    %12665 = "mini.unwrap"(%12664) : (i1) -> i1
    %12666 = builtin.unrealized_conversion_cast %12663 : !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]> to !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    "mini.if"(%12665) ({
      %12667 = "mini.to_fat_ptr"(%12666) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "ListNode", "invariant"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> !mini.fatptr<"ListNode">
      %12668 = "mini.field_access"(%12658) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListNode">
      "mini.castassign"(%12668, %12667) ({
        %12669 = "mini.to_fat_ptr"(%12667) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "should_offset"} : (!mini.fatptr<"ListNode">, !mini.fatptr<"ListNode">) -> ()
      %12670 = "mini.field_access"(%12658) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListNode">
      %12671 = builtin.unrealized_conversion_cast %12670 : !mini.fatptr<"ListNode"> to !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
      "mini.return"(%12671) : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> ()
      "mini.castassign"(%12666, %12667) ({
        %12672 = builtin.unrealized_conversion_cast %12667 : !mini.fatptr<"ListNode"> to !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "ListNode", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, !mini.fatptr<"ListNode">) -> ()
    }) : (i1) -> ()
    %12673 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %12674 = "mini.unionize"(%12673) {"from_typ" = !llvm.array<0 x i8>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    "mini.return"(%12674) : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> ()
  }) {"func_name" = "ListIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1452(%12675 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12676 : !llvm.ptr):
    %12677 = "mini.invariant"(%12676) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12678 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1453] : () -> ()
  ^bb1453:
    %12679 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%12679, %12678) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1454] : () -> ()
  ^bb1454:
    %12680 = "llvm.extractvalue"(%12675) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12681 = "llvm.load"(%12678) : (!llvm.ptr) -> i32
    %12682 = "llvm.getelementptr"(%12680, %12681) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12683 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12684 = "llvm.getelementptr"(%12682, %12683) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12684) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1455(%12685 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %12686 = "mini.wrap"(%12685) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %12687 = "mini.to_fat_ptr"(%12686) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %12688 = "mini.unwrap"(%12687) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12689 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%12689, %12688) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
  }) {"func_name" = "make_em_speak", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1456(%12690 : i32):
    %12691 = "mini.wrap"(%12690) : (i32) -> !mini.ptr<i32>
    %12692 = builtin.unrealized_conversion_cast %12691 : !mini.ptr<i32> to !mini.ptr<i32>
    %12693 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12694 = "mini.unwrap"(%12692) : (!mini.ptr<i32>) -> i32
    %12695 = "mini.unwrap"(%12693) : (!mini.ptr<i32>) -> i32
    %12696 = "mini.comparison"(%12694, %12695) {"op" = "LT"} : (i32, i32) -> i1
    %12697 = "mini.wrap"(%12696) : (i1) -> !mini.ptr<i32>
    %12698 = "mini.unwrap"(%12697) : (!mini.ptr<i32>) -> i1
    "mini.if"(%12698) ({
      %12699 = builtin.unrealized_conversion_cast %12692 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%12699) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %12700 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12701 = "mini.unwrap"(%12692) : (!mini.ptr<i32>) -> i32
    %12702 = "mini.unwrap"(%12700) : (!mini.ptr<i32>) -> i32
    %12703 = "mini.arithmetic"(%12701, %12702) {"op" = "SUB"} : (i32, i32) -> i32
    %12704 = "mini.wrap"(%12703) : (i32) -> !mini.ptr<i32>
    %12705 = "mini.unwrap"(%12704) : (!mini.ptr<i32>) -> i32
    %12706 = "mini.call"(%12705) {"func_name" = "fibonacci", "ret_type" = i32} : (i32) -> !mini.ptr<i32>
    %12707 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12708 = "mini.unwrap"(%12692) : (!mini.ptr<i32>) -> i32
    %12709 = "mini.unwrap"(%12707) : (!mini.ptr<i32>) -> i32
    %12710 = "mini.arithmetic"(%12708, %12709) {"op" = "SUB"} : (i32, i32) -> i32
    %12711 = "mini.wrap"(%12710) : (i32) -> !mini.ptr<i32>
    %12712 = "mini.unwrap"(%12711) : (!mini.ptr<i32>) -> i32
    %12713 = "mini.call"(%12712) {"func_name" = "fibonacci", "ret_type" = i32} : (i32) -> !mini.ptr<i32>
    %12714 = "mini.unwrap"(%12706) : (!mini.ptr<i32>) -> i32
    %12715 = "mini.unwrap"(%12713) : (!mini.ptr<i32>) -> i32
    %12716 = "mini.arithmetic"(%12714, %12715) {"op" = "ADD"} : (i32, i32) -> i32
    %12717 = "mini.wrap"(%12716) : (i32) -> !mini.ptr<i32>
    %12718 = builtin.unrealized_conversion_cast %12717 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%12718) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "fibonacci", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1457(%12719 : i32):
    %12720 = "mini.wrap"(%12719) : (i32) -> !mini.ptr<i32>
    %12721 = builtin.unrealized_conversion_cast %12720 : !mini.ptr<i32> to !mini.ptr<i32>
    %12722 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12723 = "mini.unwrap"(%12721) : (!mini.ptr<i32>) -> i32
    %12724 = "mini.unwrap"(%12722) : (!mini.ptr<i32>) -> i32
    %12725 = "mini.comparison"(%12723, %12724) {"op" = "LT"} : (i32, i32) -> i1
    %12726 = "mini.wrap"(%12725) : (i1) -> !mini.ptr<i32>
    %12727 = "mini.unwrap"(%12726) : (!mini.ptr<i32>) -> i1
    "mini.if"(%12727) ({
      %12728 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %12729 = builtin.unrealized_conversion_cast %12728 : !mini.ptr<i32> to !mini.ptr<i32>
      "mini.return"(%12729) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %12730 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12731 = "mini.unwrap"(%12721) : (!mini.ptr<i32>) -> i32
    %12732 = "mini.unwrap"(%12730) : (!mini.ptr<i32>) -> i32
    %12733 = "mini.arithmetic"(%12731, %12732) {"op" = "SUB"} : (i32, i32) -> i32
    %12734 = "mini.wrap"(%12733) : (i32) -> !mini.ptr<i32>
    %12735 = "mini.unwrap"(%12734) : (!mini.ptr<i32>) -> i32
    %12736 = "mini.call"(%12735) {"func_name" = "factorial", "ret_type" = i32} : (i32) -> !mini.ptr<i32>
    %12737 = "mini.unwrap"(%12721) : (!mini.ptr<i32>) -> i32
    %12738 = "mini.unwrap"(%12736) : (!mini.ptr<i32>) -> i32
    %12739 = "mini.arithmetic"(%12737, %12738) {"op" = "MUL"} : (i32, i32) -> i32
    %12740 = "mini.wrap"(%12739) : (i32) -> !mini.ptr<i32>
    %12741 = builtin.unrealized_conversion_cast %12740 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%12741) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "factorial", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1458(%12742 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12743 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12744 : !llvm.ptr):
    %12745 = "mini.wrap"(%12742) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %12746 = "mini.to_fat_ptr"(%12745) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard", "invariant"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
  }) {"func_name" = "Bard_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1459(%12747 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12748 : !llvm.ptr):
    %12749 = "mini.invariant"(%12748) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12750 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1460] : () -> ()
  ^bb1460:
    %12751 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%12751, %12750) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1461] : () -> ()
  ^bb1461:
    %12752 = "llvm.extractvalue"(%12747) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12753 = "llvm.load"(%12750) : (!llvm.ptr) -> i32
    %12754 = "llvm.getelementptr"(%12752, %12753) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12755 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12756 = "llvm.getelementptr"(%12754, %12755) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12756) : (!llvm.ptr) -> ()
  }) {"func_name" = "Bard_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1462(%12757 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12758 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12759 : !llvm.ptr, %12760 : !llvm.struct<(!llvm.ptr, i160)>, %12761 : !llvm.struct<(!llvm.ptr, i160)>):
    %12762 = "mini.wrap"(%12757) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %12763 = "mini.to_fat_ptr"(%12762) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard", "invariant"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %12764 = "mini.wrap"(%12760) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %12765 = "mini.to_fat_ptr"(%12764) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Animal", "invariant"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !mini.fatptr<"Animal">
    %12766 = "mini.wrap"(%12761) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %12767 = "mini.to_fat_ptr"(%12766) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Beaver", "invariant"} : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.fatptr<"Beaver">
    %12768 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12769 = "mini.create_buffer"(%12768) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %12770 = builtin.unrealized_conversion_cast %12769 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12771 = "mini.refer"(%12770) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12772 = "mini.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "animal!"} : () -> !llvm.ptr
    %12773 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %12774 = "mini.buffer_indexation"(%12771, %12773) {"typ" = !llvm.array<7 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%12774, %12772) {"typ" = !llvm.array<7 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %12775 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12776 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12777 = "mini.unwrap"(%12771) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12778 = "mini.unwrap"(%12775) : (!mini.ptr<i32>) -> i32
    %12779 = "mini.unwrap"(%12776) : (!mini.ptr<i32>) -> i32
    %12780 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %12781 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12782 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12783 = builtin.unrealized_conversion_cast %12771 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12784 = "mini.unwrap"(%12783) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12785 = builtin.unrealized_conversion_cast %12781 : !mini.ptr<i32> to !mini.ptr<i32>
    %12786 = "mini.unwrap"(%12785) : (!mini.ptr<i32>) -> i32
    %12787 = builtin.unrealized_conversion_cast %12782 : !mini.ptr<i32> to !mini.ptr<i32>
    %12788 = "mini.unwrap"(%12787) : (!mini.ptr<i32>) -> i32
    %12789 = "mini.unwrap"(%12780) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12790 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %12791 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12792 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12793 = "mini.parameterizations_array"(%12790, %12791, %12792) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12793, %12789, %12784, %12786, %12788) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %12794 = builtin.unrealized_conversion_cast %12780 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %12795 = "mini.unwrap"(%12794) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12796 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %12797 = "mini.parameterizations_array"(%12796) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12797, %12795) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12798 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12799 = "mini.create_buffer"(%12798) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %12800 = builtin.unrealized_conversion_cast %12799 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %12801 = "mini.refer"(%12800) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %12802 = "mini.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "beaver!"} : () -> !llvm.ptr
    %12803 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %12804 = "mini.buffer_indexation"(%12801, %12803) {"typ" = !llvm.array<7 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%12804, %12802) {"typ" = !llvm.array<7 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %12805 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12806 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12807 = "mini.unwrap"(%12801) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12808 = "mini.unwrap"(%12805) : (!mini.ptr<i32>) -> i32
    %12809 = "mini.unwrap"(%12806) : (!mini.ptr<i32>) -> i32
    %12810 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %12811 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12812 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %12813 = builtin.unrealized_conversion_cast %12801 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %12814 = "mini.unwrap"(%12813) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %12815 = builtin.unrealized_conversion_cast %12811 : !mini.ptr<i32> to !mini.ptr<i32>
    %12816 = "mini.unwrap"(%12815) : (!mini.ptr<i32>) -> i32
    %12817 = builtin.unrealized_conversion_cast %12812 : !mini.ptr<i32> to !mini.ptr<i32>
    %12818 = "mini.unwrap"(%12817) : (!mini.ptr<i32>) -> i32
    %12819 = "mini.unwrap"(%12810) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %12820 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %12821 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12822 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12823 = "mini.parameterizations_array"(%12820, %12821, %12822) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%12823, %12819, %12814, %12816, %12818) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %12824 = builtin.unrealized_conversion_cast %12810 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %12825 = "mini.unwrap"(%12824) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12826 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %12827 = "mini.parameterizations_array"(%12826) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12827, %12825) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_aAnimal_bBeaver", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1463(%12828 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12829 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12830 : !llvm.ptr, %12831 : !llvm.struct<(!llvm.ptr, i160)>, %12832 : !llvm.struct<(!llvm.ptr, i160)>):
    %12833 = "mini.wrap"(%12828) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %12834 = "mini.to_fat_ptr"(%12833) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard", "invariant"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %12835 = "mini.wrap"(%12831) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %12836 = "mini.narrow"(%12835) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %12837 = "mini.wrap"(%12832) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %12838 = "mini.narrow"(%12837) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %12839 = "mini.unionize"(%12836) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %12840 = "mini.unwrap"(%12839) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12841 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12842 = "mini.parameterizations_array"(%12841) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12842, %12840) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12843 = "mini.unionize"(%12838) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %12844 = "mini.unwrap"(%12843) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12845 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12846 = "mini.parameterizations_array"(%12845) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12846, %12844) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_aPtri32_bPtri32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1464(%12847 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12848 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12849 : !llvm.ptr, %12850 : !llvm.struct<(!llvm.ptr, i160)>, %12851 : !llvm.struct<(!llvm.ptr, i160)>):
    %12852 = "mini.wrap"(%12847) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %12853 = "mini.to_fat_ptr"(%12852) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard", "invariant"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %12854 = "mini.wrap"(%12850) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %12855 = "mini.narrow"(%12854) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !mini.ptr<f64>
    %12856 = "mini.wrap"(%12851) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %12857 = "mini.narrow"(%12856) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %12858 = "mini.unionize"(%12855) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %12859 = "mini.unwrap"(%12858) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12860 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %12861 = "mini.parameterizations_array"(%12860) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12861, %12859) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12862 = "mini.unionize"(%12857) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %12863 = "mini.unwrap"(%12862) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12864 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %12865 = "mini.parameterizations_array"(%12864) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12865, %12863) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_aPtrf64_bPtrf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1465(%12866 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12867 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12868 : !llvm.ptr, %12869 : !llvm.struct<(!llvm.ptr, i160)>, %12870 : !llvm.struct<(!llvm.ptr, i160)>):
    %12871 = "mini.wrap"(%12866) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %12872 = "mini.to_fat_ptr"(%12871) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard", "invariant"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %12873 = "mini.wrap"(%12869) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %12874 = "mini.narrow"(%12873) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %12875 = "mini.wrap"(%12870) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %12876 = "mini.narrow"(%12875) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = f64, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %12877 = "mini.unionize"(%12874) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %12878 = "mini.unwrap"(%12877) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12879 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %12880 = "mini.parameterizations_array"(%12879) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12880, %12878) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %12881 = "mini.unionize"(%12876) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %12882 = "mini.unwrap"(%12881) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %12883 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %12884 = "mini.parameterizations_array"(%12883) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%12884, %12882) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_aPtri32_bPtrf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1466(%12885 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %12886 : !llvm.ptr, %12887 : !llvm.struct<(!llvm.ptr, i160)>, %12888 : !llvm.struct<(!llvm.ptr, i160)>):
    %12889 = "mini.invariant"(%12886) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %12890 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1467] : () -> ()
  ^bb1468:
    %12891 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%12891, %12890) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1469] : () -> ()
  ^bb1470:
    %12892 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%12892, %12890) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1469] : () -> ()
  ^bb1471:
    %12893 = "llvm.getelementptr"(%12886) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12894 = "llvm.load"(%12893) : (!llvm.ptr) -> !llvm.ptr
    %12895 = "llvm.getelementptr"(%12894) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12896 = "llvm.getelementptr"(%12894) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12897 = "llvm.getelementptr"(%12894) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12898 = "llvm.getelementptr"(%12894) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12899 = "llvm.load"(%12895) : (!llvm.ptr) -> i64
    %12900 = "llvm.load"(%12896) : (!llvm.ptr) -> i64
    %12901 = "llvm.load"(%12897) : (!llvm.ptr) -> !llvm.ptr
    %12902 = "llvm.load"(%12898) : (!llvm.ptr) -> !llvm.ptr
    %12903 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %12904 = "llvm.ptrtoint"(%12903) : (!llvm.ptr) -> i64
    %12905 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %12906 = "mini.subtype"(%12901, %12900, %12899, %12905, %12904, %12902) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12906) [^bb1468, ^bb1472] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1472:
    %12907 = "llvm.getelementptr"(%12886) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12908 = "llvm.load"(%12907) : (!llvm.ptr) -> !llvm.ptr
    %12909 = "llvm.getelementptr"(%12908) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12910 = "llvm.getelementptr"(%12908) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12911 = "llvm.getelementptr"(%12908) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12912 = "llvm.getelementptr"(%12908) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12913 = "llvm.load"(%12909) : (!llvm.ptr) -> i64
    %12914 = "llvm.load"(%12910) : (!llvm.ptr) -> i64
    %12915 = "llvm.load"(%12911) : (!llvm.ptr) -> !llvm.ptr
    %12916 = "llvm.load"(%12912) : (!llvm.ptr) -> !llvm.ptr
    %12917 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %12918 = "llvm.ptrtoint"(%12917) : (!llvm.ptr) -> i64
    %12919 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %12920 = "mini.subtype"(%12915, %12914, %12913, %12919, %12918, %12916) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12920) [^bb1470, ^bb1470] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1473:
    %12921 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%12921, %12890) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1469] : () -> ()
  ^bb1474:
    %12922 = "llvm.getelementptr"(%12886) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12923 = "llvm.load"(%12922) : (!llvm.ptr) -> !llvm.ptr
    %12924 = "llvm.getelementptr"(%12923) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12925 = "llvm.getelementptr"(%12923) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12926 = "llvm.getelementptr"(%12923) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12927 = "llvm.getelementptr"(%12923) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12928 = "llvm.load"(%12924) : (!llvm.ptr) -> i64
    %12929 = "llvm.load"(%12925) : (!llvm.ptr) -> i64
    %12930 = "llvm.load"(%12926) : (!llvm.ptr) -> !llvm.ptr
    %12931 = "llvm.load"(%12927) : (!llvm.ptr) -> !llvm.ptr
    %12932 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %12933 = "llvm.ptrtoint"(%12932) : (!llvm.ptr) -> i64
    %12934 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %12935 = "mini.subtype"(%12930, %12929, %12928, %12934, %12933, %12931) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12935) [^bb1473, ^bb1473] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1475:
    %12936 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%12936, %12890) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1469] : () -> ()
  ^bb1476:
    %12937 = "llvm.getelementptr"(%12886) <{"rawConstantIndices" = array<i32: 0, 1>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12938 = "llvm.load"(%12937) : (!llvm.ptr) -> !llvm.ptr
    %12939 = "llvm.getelementptr"(%12938) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12940 = "llvm.getelementptr"(%12938) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12941 = "llvm.getelementptr"(%12938) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12942 = "llvm.getelementptr"(%12938) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12943 = "llvm.load"(%12939) : (!llvm.ptr) -> i64
    %12944 = "llvm.load"(%12940) : (!llvm.ptr) -> i64
    %12945 = "llvm.load"(%12941) : (!llvm.ptr) -> !llvm.ptr
    %12946 = "llvm.load"(%12942) : (!llvm.ptr) -> !llvm.ptr
    %12947 = "mini.addr_of"() {"global_name" = @Beaver} : () -> !llvm.ptr
    %12948 = "llvm.ptrtoint"(%12947) : (!llvm.ptr) -> i64
    %12949 = "llvm.mlir.constant"() <{"value" = 12321971123808713154 : i64}> : () -> i64
    %12950 = "mini.subtype"(%12945, %12944, %12943, %12949, %12948, %12946) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12950) [^bb1475, ^bb1475] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1467:
    %12951 = "llvm.getelementptr"(%12886) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12952 = "llvm.load"(%12951) : (!llvm.ptr) -> !llvm.ptr
    %12953 = "llvm.getelementptr"(%12952) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12954 = "llvm.getelementptr"(%12952) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12955 = "llvm.getelementptr"(%12952) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12956 = "llvm.getelementptr"(%12952) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12957 = "llvm.load"(%12953) : (!llvm.ptr) -> i64
    %12958 = "llvm.load"(%12954) : (!llvm.ptr) -> i64
    %12959 = "llvm.load"(%12955) : (!llvm.ptr) -> !llvm.ptr
    %12960 = "llvm.load"(%12956) : (!llvm.ptr) -> !llvm.ptr
    %12961 = "mini.addr_of"() {"global_name" = @i32_typ} : () -> !llvm.ptr
    %12962 = "llvm.ptrtoint"(%12961) : (!llvm.ptr) -> i64
    %12963 = "llvm.mlir.constant"() <{"value" = 16193019123895293634 : i64}> : () -> i64
    %12964 = "mini.subtype"(%12959, %12958, %12957, %12963, %12962, %12960) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12964) [^bb1471, ^bb1477] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1477:
    %12965 = "llvm.getelementptr"(%12886) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12966 = "llvm.load"(%12965) : (!llvm.ptr) -> !llvm.ptr
    %12967 = "llvm.getelementptr"(%12966) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12968 = "llvm.getelementptr"(%12966) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12969 = "llvm.getelementptr"(%12966) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12970 = "llvm.getelementptr"(%12966) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12971 = "llvm.load"(%12967) : (!llvm.ptr) -> i64
    %12972 = "llvm.load"(%12968) : (!llvm.ptr) -> i64
    %12973 = "llvm.load"(%12969) : (!llvm.ptr) -> !llvm.ptr
    %12974 = "llvm.load"(%12970) : (!llvm.ptr) -> !llvm.ptr
    %12975 = "mini.addr_of"() {"global_name" = @f64_typ} : () -> !llvm.ptr
    %12976 = "llvm.ptrtoint"(%12975) : (!llvm.ptr) -> i64
    %12977 = "llvm.mlir.constant"() <{"value" = 17689428533612252835 : i64}> : () -> i64
    %12978 = "mini.subtype"(%12973, %12972, %12971, %12977, %12976, %12974) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12978) [^bb1474, ^bb1478] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1478:
    %12979 = "llvm.getelementptr"(%12886) <{"rawConstantIndices" = array<i32: 0, 0>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr) -> !llvm.ptr
    %12980 = "llvm.load"(%12979) : (!llvm.ptr) -> !llvm.ptr
    %12981 = "llvm.getelementptr"(%12980) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12982 = "llvm.getelementptr"(%12980) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12983 = "llvm.getelementptr"(%12980) <{"rawConstantIndices" = array<i32: 3>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12984 = "llvm.getelementptr"(%12980) <{"rawConstantIndices" = array<i32: 4>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %12985 = "llvm.load"(%12981) : (!llvm.ptr) -> i64
    %12986 = "llvm.load"(%12982) : (!llvm.ptr) -> i64
    %12987 = "llvm.load"(%12983) : (!llvm.ptr) -> !llvm.ptr
    %12988 = "llvm.load"(%12984) : (!llvm.ptr) -> !llvm.ptr
    %12989 = "mini.addr_of"() {"global_name" = @Animal} : () -> !llvm.ptr
    %12990 = "llvm.ptrtoint"(%12989) : (!llvm.ptr) -> i64
    %12991 = "llvm.mlir.constant"() <{"value" = 1075018126824711487 : i64}> : () -> i64
    %12992 = "mini.subtype"(%12987, %12986, %12985, %12991, %12990, %12988) : (!llvm.ptr, i64, i64, i64, i64, !llvm.ptr) -> i1
    "cf.cond_br"(%12992) [^bb1476, ^bb1476] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1469:
    %12993 = "llvm.extractvalue"(%12885) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %12994 = "llvm.load"(%12890) : (!llvm.ptr) -> i32
    %12995 = "llvm.getelementptr"(%12993, %12994) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %12996 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    %12997 = "llvm.getelementptr"(%12995, %12996) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%12997) : (!llvm.ptr) -> ()
  }) {"func_name" = "Bard_B_take_aAnimal_bBeaver_take_aPtri32_bPtri32_take_aPtrf64_bPtrf64_take_aPtri32_bPtrf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
    %12998 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "Exception", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"Exception">
    %12999 = "mini.unwrap"(%12998) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13000 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%13000, %12999) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13001 = "mini.literal"() {"value" = 1205 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13002 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13003 = "mini.create_buffer"(%13002) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %13004 = builtin.unrealized_conversion_cast %13003 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %13005 = "mini.refer"(%13004) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %13006 = "mini.literal"() {"typ" = !llvm.array<58 x i8>, "value" = "c:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\tmpvy1dmse8.mini"} : () -> !llvm.ptr
    %13007 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %13008 = "mini.buffer_indexation"(%13005, %13007) {"typ" = !llvm.array<58 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%13008, %13006) {"typ" = !llvm.array<58 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %13009 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13010 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13011 = "mini.unwrap"(%13005) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13012 = "mini.unwrap"(%13009) : (!mini.ptr<i32>) -> i32
    %13013 = "mini.unwrap"(%13010) : (!mini.ptr<i32>) -> i32
    %13014 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %13015 = "mini.literal"() {"value" = 58 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13016 = "mini.literal"() {"value" = 59 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13017 = builtin.unrealized_conversion_cast %13005 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13018 = "mini.unwrap"(%13017) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13019 = builtin.unrealized_conversion_cast %13015 : !mini.ptr<i32> to !mini.ptr<i32>
    %13020 = "mini.unwrap"(%13019) : (!mini.ptr<i32>) -> i32
    %13021 = builtin.unrealized_conversion_cast %13016 : !mini.ptr<i32> to !mini.ptr<i32>
    %13022 = "mini.unwrap"(%13021) : (!mini.ptr<i32>) -> i32
    %13023 = "mini.unwrap"(%13014) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13024 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13025 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13026 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13027 = "mini.parameterizations_array"(%13024, %13025, %13026) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13027, %13023, %13018, %13020, %13022) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13028 = builtin.unrealized_conversion_cast %13001 : !mini.ptr<i32> to !mini.ptr<i32>
    %13029 = "mini.unwrap"(%13028) : (!mini.ptr<i32>) -> i32
    %13030 = "mini.to_fat_ptr"(%13014) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %13031 = "mini.unwrap"(%13030) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13032 = "mini.unwrap"(%12998) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13033 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13034 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %13035 = "mini.parameterizations_array"(%13033, %13034) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13035, %13032, %13029, %13031) {"offset" = 5 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13036 = builtin.unrealized_conversion_cast %12998 : !mini.fatptr<"Exception"> to !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %13037 = "mini.unwrap"(%13036) : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13038 = "mini.coro_yield"(%13037) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13039 = "mini.wrap"(%13038) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
  }) {"func_name" = "throw", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
    %13040 = "mini.literal"() {"value" = 88 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13041 = "mini.unionize"(%13040) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13042 = "mini.unwrap"(%13041) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13043 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13044 = "mini.parameterizations_array"(%13043) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13044, %13042) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.coro_yield"() : () -> ()
    %13045 = "mini.literal"() {"value" = 90 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13046 = "mini.unionize"(%13045) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13047 = "mini.unwrap"(%13046) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13048 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13049 = "mini.parameterizations_array"(%13048) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13049, %13047) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "print88", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_nkbwsfpjcj_passer", "arg_types" = [], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_nkbwsfpjcj_buffer_filler", "arg_types" = [], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.func"() ({
    %13050 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13051 = "mini.create_buffer"(%13050) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %13052 = builtin.unrealized_conversion_cast %13051 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %13053 = "mini.refer"(%13052) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %13054 = "mini.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "one"} : () -> !llvm.ptr
    %13055 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %13056 = "mini.buffer_indexation"(%13053, %13055) {"typ" = !llvm.array<3 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%13056, %13054) {"typ" = !llvm.array<3 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %13057 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13058 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13059 = "mini.unwrap"(%13053) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13060 = "mini.unwrap"(%13057) : (!mini.ptr<i32>) -> i32
    %13061 = "mini.unwrap"(%13058) : (!mini.ptr<i32>) -> i32
    %13062 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %13063 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13064 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13065 = builtin.unrealized_conversion_cast %13053 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13066 = "mini.unwrap"(%13065) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13067 = builtin.unrealized_conversion_cast %13063 : !mini.ptr<i32> to !mini.ptr<i32>
    %13068 = "mini.unwrap"(%13067) : (!mini.ptr<i32>) -> i32
    %13069 = builtin.unrealized_conversion_cast %13064 : !mini.ptr<i32> to !mini.ptr<i32>
    %13070 = "mini.unwrap"(%13069) : (!mini.ptr<i32>) -> i32
    %13071 = "mini.unwrap"(%13062) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13072 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13073 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13074 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13075 = "mini.parameterizations_array"(%13072, %13073, %13074) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13075, %13071, %13066, %13068, %13070) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13076 = builtin.unrealized_conversion_cast %13062 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13077 = "mini.unwrap"(%13076) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13078 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %13079 = "mini.parameterizations_array"(%13078) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13079, %13077) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
    %13080 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13081 = "mini.create_buffer"(%13080) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %13082 = builtin.unrealized_conversion_cast %13081 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %13083 = "mini.refer"(%13082) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %13084 = "mini.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "two"} : () -> !llvm.ptr
    %13085 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %13086 = "mini.buffer_indexation"(%13083, %13085) {"typ" = !llvm.array<3 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%13086, %13084) {"typ" = !llvm.array<3 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %13087 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13088 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13089 = "mini.unwrap"(%13083) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13090 = "mini.unwrap"(%13087) : (!mini.ptr<i32>) -> i32
    %13091 = "mini.unwrap"(%13088) : (!mini.ptr<i32>) -> i32
    %13092 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %13093 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13094 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13095 = builtin.unrealized_conversion_cast %13083 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13096 = "mini.unwrap"(%13095) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13097 = builtin.unrealized_conversion_cast %13093 : !mini.ptr<i32> to !mini.ptr<i32>
    %13098 = "mini.unwrap"(%13097) : (!mini.ptr<i32>) -> i32
    %13099 = builtin.unrealized_conversion_cast %13094 : !mini.ptr<i32> to !mini.ptr<i32>
    %13100 = "mini.unwrap"(%13099) : (!mini.ptr<i32>) -> i32
    %13101 = "mini.unwrap"(%13092) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13102 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13103 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13104 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13105 = "mini.parameterizations_array"(%13102, %13103, %13104) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13105, %13101, %13096, %13098, %13100) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13106 = builtin.unrealized_conversion_cast %13092 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13107 = "mini.unwrap"(%13106) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13108 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %13109 = "mini.parameterizations_array"(%13108) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13109, %13107) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "grabo", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1479(%13110 : i32, %13111 : i32):
    %13112 = "mini.wrap"(%13110) : (i32) -> !mini.ptr<i32>
    %13113 = "mini.wrap"(%13111) : (i32) -> !mini.ptr<i32>
    %13114 = "mini.unwrap"(%13112) : (!mini.ptr<i32>) -> i32
    %13115 = "mini.unwrap"(%13113) : (!mini.ptr<i32>) -> i32
    %13116 = "mini.arithmetic"(%13114, %13115) {"op" = "ADD"} : (i32, i32) -> i32
    %13117 = "mini.wrap"(%13116) : (i32) -> !mini.ptr<i32>
    %13118 = builtin.unrealized_conversion_cast %13117 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%13118) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_yaamkgeagm", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1480(%13119 : i32):
    %13120 = "mini.wrap"(%13119) : (i32) -> !mini.ptr<i32>
    %13121 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13122 = "mini.unwrap"(%13120) : (!mini.ptr<i32>) -> i32
    %13123 = "mini.unwrap"(%13121) : (!mini.ptr<i32>) -> i32
    %13124 = "mini.arithmetic"(%13122, %13123) {"op" = "MUL"} : (i32, i32) -> i32
    %13125 = "mini.wrap"(%13124) : (i32) -> !mini.ptr<i32>
    %13126 = builtin.unrealized_conversion_cast %13125 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%13126) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_eglqhwygml", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
    %13127 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13128 = builtin.unrealized_conversion_cast %13127 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%13128) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_knrbnzgawf", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1481(%13129 : i32):
    %13130 = "mini.wrap"(%13129) : (i32) -> !mini.ptr<i32>
    %13131 = "mini.unionize"(%13130) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13132 = "mini.unwrap"(%13131) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13133 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13134 = "mini.parameterizations_array"(%13133) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13134, %13132) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_vkkrqfxprm", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1482(%13135 : i32):
    %13136 = "mini.wrap"(%13135) : (i32) -> !mini.ptr<i32>
    %13137 = builtin.unrealized_conversion_cast %13136 : !mini.ptr<i32> to !mini.ptr<i32>
    %13138 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13139 = "mini.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %13140 = builtin.unrealized_conversion_cast %13139 : !mini.ptr<i8> to !mini.ptr<i8>
    %13141 = "mini.literal"() {"value" = 1 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %13142 = builtin.unrealized_conversion_cast %13141 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.while"() ({
      %13143 = "mini.unwrap"(%13138) : (!mini.ptr<i32>) -> i32
      %13144 = "mini.unwrap"(%13137) : (!mini.ptr<i32>) -> i32
      %13145 = "mini.comparison"(%13143, %13144) {"op" = "LT"} : (i32, i32) -> i1
      %13146 = "mini.wrap"(%13145) : (i1) -> !mini.ptr<i32>
      %13147 = "mini.unwrap"(%13146) : (!mini.ptr<i32>) -> i1
    }, {
      %13148 = "mini.unwrap"(%13140) : (!mini.ptr<i8>) -> i8
      %13149 = "mini.unwrap"(%13142) : (!mini.ptr<i8>) -> i8
      %13150 = "mini.arithmetic"(%13148, %13149) {"op" = "ADD"} : (i8, i8) -> i8
      %13151 = "mini.wrap"(%13150) : (i8) -> !mini.ptr<i8>
      "mini.castassign"(%13140, %13151) ({
        %13152 = builtin.unrealized_conversion_cast %13151 : !mini.ptr<i8> to !mini.ptr<i8>
      }) {"from_typ" = i8, "to_typ" = i8, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ", "should_offset"} : (!mini.ptr<i8>, !mini.ptr<i8>) -> ()
      %13153 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %13154 = "mini.unwrap"(%13138) : (!mini.ptr<i32>) -> i32
      %13155 = "mini.unwrap"(%13153) : (!mini.ptr<i32>) -> i32
      %13156 = "mini.arithmetic"(%13154, %13155) {"op" = "ADD"} : (i32, i32) -> i32
      %13157 = "mini.wrap"(%13156) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%13138, %13157) ({
        %13158 = builtin.unrealized_conversion_cast %13157 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %13159 = builtin.unrealized_conversion_cast %13140 : !mini.ptr<i8> to !mini.ptr<i8>
    "mini.return"(%13159) : (!mini.ptr<i8>) -> ()
  }) {"func_name" = "i32toi8", "result_type" = i8, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1483(%13160 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %13161 = "mini.wrap"(%13160) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %13162 = "mini.to_fat_ptr"(%13161) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %13163 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13164 = "mini.create_buffer"(%13163) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %13165 = builtin.unrealized_conversion_cast %13164 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %13166 = "mini.refer"(%13165) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %13167 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %13168 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %13169 = "mini.buffer_indexation"(%13166, %13168) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%13169, %13167) {"typ" = !llvm.array<0 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %13170 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13171 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13172 = "mini.unwrap"(%13166) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13173 = "mini.unwrap"(%13170) : (!mini.ptr<i32>) -> i32
    %13174 = "mini.unwrap"(%13171) : (!mini.ptr<i32>) -> i32
    %13175 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %13176 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13177 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13178 = builtin.unrealized_conversion_cast %13166 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13179 = "mini.unwrap"(%13178) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13180 = builtin.unrealized_conversion_cast %13176 : !mini.ptr<i32> to !mini.ptr<i32>
    %13181 = "mini.unwrap"(%13180) : (!mini.ptr<i32>) -> i32
    %13182 = builtin.unrealized_conversion_cast %13177 : !mini.ptr<i32> to !mini.ptr<i32>
    %13183 = "mini.unwrap"(%13182) : (!mini.ptr<i32>) -> i32
    %13184 = "mini.unwrap"(%13175) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13185 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13186 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13187 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13188 = "mini.parameterizations_array"(%13185, %13186, %13187) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13188, %13184, %13179, %13181, %13183) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13189 = "mini.to_fat_ptr"(%13175) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %13190 = "mini.refer"(%13189) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %13191 = "mini.unwrap"(%13162) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13192 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13193 = "mini.method_call"(%13192, %13191) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %13194 = builtin.unrealized_conversion_cast %13193 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13195 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13196 = "mini.create_buffer"(%13195) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %13197 = builtin.unrealized_conversion_cast %13196 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %13198 = "mini.refer"(%13197) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %13199 = "mini.literal"() {"typ" = !llvm.array<1 x i8>, "value" = "r"} : () -> !llvm.ptr
    %13200 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %13201 = "mini.buffer_indexation"(%13198, %13200) {"typ" = !llvm.array<1 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%13201, %13199) {"typ" = !llvm.array<1 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %13202 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13203 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13204 = "mini.unwrap"(%13198) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13205 = "mini.unwrap"(%13202) : (!mini.ptr<i32>) -> i32
    %13206 = "mini.unwrap"(%13203) : (!mini.ptr<i32>) -> i32
    %13207 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %13208 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13209 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13210 = builtin.unrealized_conversion_cast %13198 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13211 = "mini.unwrap"(%13210) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13212 = builtin.unrealized_conversion_cast %13208 : !mini.ptr<i32> to !mini.ptr<i32>
    %13213 = "mini.unwrap"(%13212) : (!mini.ptr<i32>) -> i32
    %13214 = builtin.unrealized_conversion_cast %13209 : !mini.ptr<i32> to !mini.ptr<i32>
    %13215 = "mini.unwrap"(%13214) : (!mini.ptr<i32>) -> i32
    %13216 = "mini.unwrap"(%13207) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13217 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13218 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13219 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13220 = "mini.parameterizations_array"(%13217, %13218, %13219) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13220, %13216, %13211, %13213, %13215) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13221 = "mini.unwrap"(%13207) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13222 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13223 = "mini.method_call"(%13222, %13221) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %13224 = builtin.unrealized_conversion_cast %13223 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13225 = "mini.unwrap"(%13194) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13226 = "mini.unwrap"(%13224) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13227 = "mini.call"(%13225, %13226) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i32>>
    %13228 = builtin.unrealized_conversion_cast %13227 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %13229 = "mini.refer"(%13228) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    "mini.while"() ({
      %13230 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
      %13231 = "mini.unwrap"(%13230) : (!mini.ptr<i1>) -> i1
    }, {
      %13232 = "mini.unwrap"(%13229) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
      %13233 = "mini.call"(%13232) {"func_name" = "fgetc", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
      %13234 = "mini.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %13235 = "mini.unwrap"(%13233) : (!mini.ptr<i32>) -> i32
      %13236 = "mini.unwrap"(%13234) : (!mini.ptr<i32>) -> i32
      %13237 = "mini.comparison"(%13235, %13236) {"op" = "EQ"} : (i32, i32) -> i1
      %13238 = "mini.wrap"(%13237) : (i1) -> !mini.ptr<i32>
      %13239 = "mini.unwrap"(%13238) : (!mini.ptr<i32>) -> i1
      "mini.if"(%13239) ({
        "mini.break"() [^bb1484] : () -> ()
      }) : (i1) -> ()
      %13240 = "mini.unwrap"(%13233) : (!mini.ptr<i32>) -> i32
      %13241 = "mini.call"(%13240) {"func_name" = "i32toi8", "ret_type" = i8} : (i32) -> !mini.ptr<i8>
      %13242 = builtin.unrealized_conversion_cast %13241 : !mini.ptr<i8> to !mini.ptr<i8>
      %13243 = "mini.unwrap"(%13242) : (!mini.ptr<i8>) -> i8
      %13244 = "mini.unwrap"(%13190) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13245 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["Ptri8"]} : () -> !llvm.ptr
      %13246 = "mini.parameterizations_array"(%13245) : (!llvm.ptr) -> !llvm.ptr
      %13247 = "mini.method_call"(%13246, %13244, %13243) {"offset" = 8 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i8) -> !mini.fatptr<"String">
      %13248 = "mini.to_fat_ptr"(%13247) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    }) : () -> ()
    %13249 = "mini.unwrap"(%13229) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13250 = "mini.call"(%13249) {"func_name" = "fclose", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %13251 = "mini.to_fat_ptr"(%13190) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%13251) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "read_file", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1485(%13252 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %13253 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %13254 = "mini.wrap"(%13252) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %13255 = "mini.to_fat_ptr"(%13254) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %13256 = "mini.wrap"(%13253) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %13257 = "mini.to_fat_ptr"(%13256) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %13258 = "mini.unwrap"(%13255) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13259 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13260 = "mini.method_call"(%13259, %13258) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %13261 = builtin.unrealized_conversion_cast %13260 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13262 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13263 = "mini.create_buffer"(%13262) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %13264 = builtin.unrealized_conversion_cast %13263 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %13265 = "mini.refer"(%13264) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %13266 = "mini.literal"() {"typ" = !llvm.array<1 x i8>, "value" = "w"} : () -> !llvm.ptr
    %13267 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %13268 = "mini.buffer_indexation"(%13265, %13267) {"typ" = !llvm.array<1 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%13268, %13266) {"typ" = !llvm.array<1 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %13269 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13270 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13271 = "mini.unwrap"(%13265) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13272 = "mini.unwrap"(%13269) : (!mini.ptr<i32>) -> i32
    %13273 = "mini.unwrap"(%13270) : (!mini.ptr<i32>) -> i32
    %13274 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %13275 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13276 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13277 = builtin.unrealized_conversion_cast %13265 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13278 = "mini.unwrap"(%13277) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13279 = builtin.unrealized_conversion_cast %13275 : !mini.ptr<i32> to !mini.ptr<i32>
    %13280 = "mini.unwrap"(%13279) : (!mini.ptr<i32>) -> i32
    %13281 = builtin.unrealized_conversion_cast %13276 : !mini.ptr<i32> to !mini.ptr<i32>
    %13282 = "mini.unwrap"(%13281) : (!mini.ptr<i32>) -> i32
    %13283 = "mini.unwrap"(%13274) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13284 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13285 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13286 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13287 = "mini.parameterizations_array"(%13284, %13285, %13286) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13287, %13283, %13278, %13280, %13282) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13288 = "mini.unwrap"(%13274) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13289 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13290 = "mini.method_call"(%13289, %13288) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %13291 = builtin.unrealized_conversion_cast %13290 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13292 = "mini.unwrap"(%13261) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13293 = "mini.unwrap"(%13291) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13294 = "mini.call"(%13292, %13293) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i32>>
    %13295 = builtin.unrealized_conversion_cast %13294 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %13296 = "mini.refer"(%13295) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %13297 = "mini.unwrap"(%13257) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13298 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13299 = "mini.method_call"(%13298, %13297) {"offset" = 14 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %13300 = builtin.unrealized_conversion_cast %13299 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13301 = "mini.unwrap"(%13296) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13302 = "mini.unwrap"(%13300) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13303 = "mini.call"(%13301, %13302) {"func_name" = "fprintf", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %13304 = "mini.unwrap"(%13296) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13305 = "mini.call"(%13304) {"func_name" = "fclose", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
  }) {"func_name" = "write_file", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1486(%13306 : i32):
    %13307 = "mini.wrap"(%13306) : (i32) -> !mini.ptr<i32>
    %13308 = "mini.unwrap"(%13307) : (!mini.ptr<i32>) -> i32
    %13309 = "mini.unwrap"(%13307) : (!mini.ptr<i32>) -> i32
    %13310 = "mini.arithmetic"(%13308, %13309) {"op" = "MUL"} : (i32, i32) -> i32
    %13311 = "mini.wrap"(%13310) : (i32) -> !mini.ptr<i32>
    %13312 = "mini.unionize"(%13311) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13313 = "mini.unwrap"(%13312) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13314 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13315 = "mini.parameterizations_array"(%13314) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13315, %13313) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_wxaxuadnzs", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1487(%13316 : i32, %13317 : i32):
    %13318 = "mini.wrap"(%13316) : (i32) -> !mini.ptr<i32>
    %13319 = "mini.wrap"(%13317) : (i32) -> !mini.ptr<i32>
    %13320 = "mini.unwrap"(%13318) : (!mini.ptr<i32>) -> i32
    %13321 = "mini.unwrap"(%13319) : (!mini.ptr<i32>) -> i32
    %13322 = "mini.arithmetic"(%13320, %13321) {"op" = "ADD"} : (i32, i32) -> i32
    %13323 = "mini.wrap"(%13322) : (i32) -> !mini.ptr<i32>
    %13324 = builtin.unrealized_conversion_cast %13323 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%13324) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_crahlcufbd", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1488(%13325 : i32, %13326 : i32):
    %13327 = "mini.wrap"(%13325) : (i32) -> !mini.ptr<i32>
    %13328 = "mini.wrap"(%13326) : (i32) -> !mini.ptr<i32>
    %13329 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13330 = "mini.addr_of"() {"global_name" = @_functionliteral_crahlcufbd} : () -> !llvm.ptr
    %13331 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%13330, %13331) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    "mini.while"() ({
      %13332 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
      %13333 = "mini.unwrap"(%13332) : (!mini.ptr<i1>) -> i1
    }, {
      %13334 = builtin.unrealized_conversion_cast %13327 : !mini.ptr<i32> to !mini.ptr<i32>
      %13335 = "mini.unwrap"(%13334) : (!mini.ptr<i32>) -> i32
      %13336 = builtin.unrealized_conversion_cast %13328 : !mini.ptr<i32> to !mini.ptr<i32>
      %13337 = "mini.unwrap"(%13336) : (!mini.ptr<i32>) -> i32
      %13338 = "mini.unwrap"(%13331) : (!llvm.ptr) -> !llvm.ptr
      %13339 = "mini.fptr_call"(%13338, %13335, %13337) {"ret_type" = i32} : (!llvm.ptr, i32, i32) -> !mini.ptr<i32>
      %13340 = "mini.unwrap"(%13339) : (!mini.ptr<i32>) -> i32
      %13341 = "mini.unwrap"(%13329) : (!mini.ptr<i32>) -> i32
      %13342 = "mini.arithmetic"(%13340, %13341) {"op" = "ADD"} : (i32, i32) -> i32
      %13343 = "mini.wrap"(%13342) : (i32) -> !mini.ptr<i32>
      %13344 = "mini.unionize"(%13343) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13345 = "mini.unwrap"(%13344) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i32)>
      %13346 = "mini.coro_yield"(%13345) : (!llvm.struct<(!llvm.ptr, i32)>) -> !llvm.struct<(!llvm.ptr, i32)>
      %13347 = "mini.wrap"(%13346) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13348 = "mini.checkflag"(%13347) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %13349 = "mini.unwrap"(%13348) : (i1) -> i1
      %13350 = builtin.unrealized_conversion_cast %13347 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      "mini.if"(%13349) ({
        %13351 = "mini.narrow"(%13350) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
        %13352 = "mini.unwrap"(%13329) : (!mini.ptr<i32>) -> i32
        %13353 = "mini.unwrap"(%13351) : (!mini.ptr<i32>) -> i32
        %13354 = "mini.arithmetic"(%13352, %13353) {"op" = "ADD"} : (i32, i32) -> i32
        %13355 = "mini.wrap"(%13354) : (i32) -> !mini.ptr<i32>
        "mini.castassign"(%13329, %13355) ({
          %13356 = builtin.unrealized_conversion_cast %13355 : !mini.ptr<i32> to !mini.ptr<i32>
        }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        "mini.castassign"(%13350, %13351) ({
          %13357 = "mini.unionize"(%13351) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
        }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
      }) : (i1) -> ()
    }) : () -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_xqeabnjiyr", "result_type" = !llvm.void, "yield_type" = !mini.ptr<i32>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_fixnopussz_passer", "arg_types" = [i32, i32], "yield_type" = !llvm.struct<(!llvm.ptr, i32)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_fixnopussz_buffer_filler", "arg_types" = [i32, i32], "yield_type" = !llvm.struct<(!llvm.ptr, i32)>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_hlsrhtsaii_passer", "arg_types" = [], "ret_type" = i32, "ret_flag" = "i32_typ", "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_hlsrhtsaii_buffer_filler", "arg_types" = [], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_xsusoslele_passer", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_xsusoslele_buffer_filler", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.func"() ({
  ^bb1489(%13358 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %13359 = "mini.wrap"(%13358) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel">
    %13360 = "mini.literal"() {"value" = 88 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13361 = builtin.unrealized_conversion_cast %13360 : !mini.ptr<i32> to !mini.ptr<i32>
    %13362 = "mini.unwrap"(%13361) : (!mini.ptr<i32>) -> i32
    %13363 = "mini.unwrap"(%13359) : (!mini.fatptr<"Channel">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13364 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13365 = "mini.parameterizations_array"(%13364) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13365, %13363, %13362) {"offset" = 3 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_ouqxbxuqht", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1490(%13366 : i32):
    %13367 = "mini.wrap"(%13366) : (i32) -> !mini.ptr<i32>
    %13368 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13369 = "mini.unwrap"(%13367) : (!mini.ptr<i32>) -> i32
    %13370 = "mini.unwrap"(%13368) : (!mini.ptr<i32>) -> i32
    %13371 = "mini.arithmetic"(%13369, %13370) {"op" = "MOD"} : (i32, i32) -> i32
    %13372 = "mini.wrap"(%13371) : (i32) -> !mini.ptr<i32>
    %13373 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13374 = "mini.unwrap"(%13372) : (!mini.ptr<i32>) -> i32
    %13375 = "mini.unwrap"(%13373) : (!mini.ptr<i32>) -> i32
    %13376 = "mini.comparison"(%13374, %13375) {"op" = "EQ"} : (i32, i32) -> i1
    %13377 = "mini.wrap"(%13376) : (i1) -> !mini.ptr<i32>
    %13378 = builtin.unrealized_conversion_cast %13377 : !mini.ptr<i32> to !mini.ptr<i1>
    "mini.return"(%13378) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "_functionliteral_fvhcecxnhb", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1491(%13379 : i32):
    %13380 = "mini.wrap"(%13379) : (i32) -> !mini.ptr<i32>
    %13381 = "mini.unwrap"(%13380) : (!mini.ptr<i32>) -> i32
    %13382 = "mini.unwrap"(%13380) : (!mini.ptr<i32>) -> i32
    %13383 = "mini.arithmetic"(%13381, %13382) {"op" = "MUL"} : (i32, i32) -> i32
    %13384 = "mini.wrap"(%13383) : (i32) -> !mini.ptr<i32>
    %13385 = builtin.unrealized_conversion_cast %13384 : !mini.ptr<i32> to !mini.ptr<i32>
    "mini.return"(%13385) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_qzlnpbqcfv", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.main"() ({
    "cf.br"() [^bb1492] : () -> ()
  ^bb1492:
    "cf.br"() [^bb1493] : () -> ()
  ^bb1493:
    "cf.br"() [^bb1494] : () -> ()
  ^bb1494:
    "cf.br"() [^bb1495] : () -> ()
  ^bb1495:
    "cf.br"() [^bb1496] : () -> ()
  ^bb1496:
    "cf.br"() [^bb1497] : () -> ()
  ^bb1497:
    "cf.br"() [^bb1498] : () -> ()
  ^bb1498:
    "cf.br"() [^bb1499] : () -> ()
  ^bb1499:
    "cf.br"() [^bb1500] : () -> ()
  ^bb1500:
    "cf.br"() [^bb1501] : () -> ()
  ^bb1501:
    "cf.br"() [^bb1502] : () -> ()
  ^bb1502:
    "cf.br"() [^bb1503] : () -> ()
  ^bb1503:
    "cf.br"() [^bb1504] : () -> ()
  ^bb1504:
    "cf.br"() [^bb1505] : () -> ()
  ^bb1505:
    "cf.br"() [^bb1506] : () -> ()
  ^bb1506:
    "cf.br"() [^bb1507] : () -> ()
  ^bb1507:
    "cf.br"() [^bb1508] : () -> ()
  ^bb1508:
    "cf.br"() [^bb1509] : () -> ()
  ^bb1509:
    "cf.br"() [^bb1510] : () -> ()
  ^bb1510:
    "cf.br"() [^bb1511] : () -> ()
  ^bb1511:
    "cf.br"() [^bb1512] : () -> ()
  ^bb1512:
    "cf.br"() [^bb1513] : () -> ()
  ^bb1513:
    "cf.br"() [^bb1514] : () -> ()
  ^bb1514:
    "cf.br"() [^bb1515] : () -> ()
  ^bb1515:
    "cf.br"() [^bb1516] : () -> ()
  ^bb1516:
    "cf.br"() [^bb1517] : () -> ()
  ^bb1517:
    "cf.br"() [^bb1518] : () -> ()
  ^bb1518:
    "cf.br"() [^bb1519] : () -> ()
  ^bb1519:
    "cf.br"() [^bb1520] : () -> ()
  ^bb1520:
    "cf.br"() [^bb1521] : () -> ()
  ^bb1521:
    "cf.br"() [^bb1522] : () -> ()
  ^bb1522:
    "cf.br"() [^bb1523] : () -> ()
  ^bb1523:
    "cf.br"() [^bb1524] : () -> ()
  ^bb1524:
    "cf.br"() [^bb1525] : () -> ()
  ^bb1525:
    "cf.br"() [^bb1526] : () -> ()
  ^bb1526:
    "cf.br"() [^bb1527] : () -> ()
  ^bb1527:
    "cf.br"() [^bb1528] : () -> ()
  ^bb1528:
    "cf.br"() [^bb1529] : () -> ()
  ^bb1529:
    "cf.br"() [^bb1530] : () -> ()
  ^bb1530:
    "cf.br"() [^bb1531] : () -> ()
  ^bb1531:
    "cf.br"() [^bb1532] : () -> ()
  ^bb1532:
    "cf.br"() [^bb1533] : () -> ()
  ^bb1533:
    "cf.br"() [^bb1534] : () -> ()
  ^bb1534:
    "cf.br"() [^bb1535] : () -> ()
  ^bb1535:
    "cf.br"() [^bb1536] : () -> ()
  ^bb1536:
    "cf.br"() [^bb1537] : () -> ()
  ^bb1537:
    "cf.br"() [^bb1538] : () -> ()
  ^bb1538:
    "cf.br"() [^bb1539] : () -> ()
  ^bb1539:
    "cf.br"() [^bb1540] : () -> ()
  ^bb1540:
    "cf.br"() [^bb1541] : () -> ()
  ^bb1541:
    "cf.br"() [^bb1542] : () -> ()
  ^bb1542:
    "cf.br"() [^bb1543] : () -> ()
  ^bb1543:
    "cf.br"() [^bb1544] : () -> ()
  ^bb1544:
    "cf.br"() [^bb1545] : () -> ()
  ^bb1545:
    "cf.br"() [^bb1546] : () -> ()
  ^bb1546:
    "cf.br"() [^bb1547] : () -> ()
  ^bb1547:
    "cf.br"() [^bb1548] : () -> ()
  ^bb1548:
    "cf.br"() [^bb1549] : () -> ()
  ^bb1549:
    "cf.br"() [^bb1550] : () -> ()
  ^bb1550:
    "cf.br"() [^bb1551] : () -> ()
  ^bb1551:
    "cf.br"() [^bb1552] : () -> ()
  ^bb1552:
    "cf.br"() [^bb1553] : () -> ()
  ^bb1553:
    "cf.br"() [^bb1554] : () -> ()
  ^bb1554:
    "cf.br"() [^bb1555] : () -> ()
  ^bb1555:
    "cf.br"() [^bb1556] : () -> ()
  ^bb1556:
    "cf.br"() [^bb1557] : () -> ()
  ^bb1557:
    "cf.br"() [^bb1558] : () -> ()
  ^bb1558:
    "cf.br"() [^bb1559] : () -> ()
  ^bb1559:
    "cf.br"() [^bb1560] : () -> ()
  ^bb1560:
    "cf.br"() [^bb1561] : () -> ()
  ^bb1561:
    "cf.br"() [^bb1562] : () -> ()
  ^bb1562:
    "cf.br"() [^bb1563] : () -> ()
  ^bb1563:
    "cf.br"() [^bb1564] : () -> ()
  ^bb1564:
    "cf.br"() [^bb1565] : () -> ()
  ^bb1565:
    "cf.br"() [^bb1566] : () -> ()
  ^bb1566:
    "cf.br"() [^bb1567] : () -> ()
  ^bb1567:
    "cf.br"() [^bb1568] : () -> ()
  ^bb1568:
    "cf.br"() [^bb1569] : () -> ()
  ^bb1569:
    "cf.br"() [^bb1570] : () -> ()
  ^bb1570:
    "cf.br"() [^bb1571] : () -> ()
  ^bb1571:
    "cf.br"() [^bb1572] : () -> ()
  ^bb1572:
    "cf.br"() [^bb1573] : () -> ()
  ^bb1573:
    "cf.br"() [^bb1574] : () -> ()
  ^bb1574:
    "cf.br"() [^bb1575] : () -> ()
  ^bb1575:
    "cf.br"() [^bb1576] : () -> ()
  ^bb1576:
    "cf.br"() [^bb1577] : () -> ()
  ^bb1577:
    "cf.br"() [^bb1578] : () -> ()
  ^bb1578:
    "cf.br"() [^bb1579] : () -> ()
  ^bb1579:
    "cf.br"() [^bb1580] : () -> ()
  ^bb1580:
    "cf.br"() [^bb1581] : () -> ()
  ^bb1581:
    "cf.br"() [^bb1582] : () -> ()
  ^bb1582:
    "cf.br"() [^bb1583] : () -> ()
  ^bb1583:
    "cf.br"() [^bb1584] : () -> ()
  ^bb1584:
    "cf.br"() [^bb1585] : () -> ()
  ^bb1585:
    "cf.br"() [^bb1586] : () -> ()
  ^bb1586:
    "cf.br"() [^bb1587] : () -> ()
  ^bb1587:
    "cf.br"() [^bb1588] : () -> ()
  ^bb1588:
    "cf.br"() [^bb1589] : () -> ()
  ^bb1589:
    "cf.br"() [^bb1590] : () -> ()
  ^bb1590:
    "cf.br"() [^bb1591] : () -> ()
  ^bb1591:
    "cf.br"() [^bb1592] : () -> ()
  ^bb1592:
    "cf.br"() [^bb1593] : () -> ()
  ^bb1593:
    "cf.br"() [^bb1594] : () -> ()
  ^bb1594:
    "cf.br"() [^bb1595] : () -> ()
  ^bb1595:
    "cf.br"() [^bb1596] : () -> ()
  ^bb1596:
    "cf.br"() [^bb1597] : () -> ()
  ^bb1597:
    "cf.br"() [^bb1598] : () -> ()
  ^bb1598:
    "cf.br"() [^bb1599] : () -> ()
  ^bb1599:
    "cf.br"() [^bb1600] : () -> ()
  ^bb1600:
    "cf.br"() [^bb1601] : () -> ()
  ^bb1601:
    "cf.br"() [^bb1602] : () -> ()
  ^bb1602:
    "cf.br"() [^bb1603] : () -> ()
  ^bb1603:
    "cf.br"() [^bb1604] : () -> ()
  ^bb1604:
    "cf.br"() [^bb1605] : () -> ()
  ^bb1605:
    "cf.br"() [^bb1606] : () -> ()
  ^bb1606:
    "cf.br"() [^bb1607] : () -> ()
  ^bb1607:
    "cf.br"() [^bb1608] : () -> ()
  ^bb1608:
    "cf.br"() [^bb1609] : () -> ()
  ^bb1609:
    "cf.br"() [^bb1610] : () -> ()
  ^bb1610:
    "cf.br"() [^bb1611] : () -> ()
  ^bb1611:
    "cf.br"() [^bb1612] : () -> ()
  ^bb1612:
    "cf.br"() [^bb1613] : () -> ()
  ^bb1613:
    "cf.br"() [^bb1614] : () -> ()
  ^bb1614:
    "cf.br"() [^bb1615] : () -> ()
  ^bb1615:
    "cf.br"() [^bb1616] : () -> ()
  ^bb1616:
    "cf.br"() [^bb1617] : () -> ()
  ^bb1617:
    "cf.br"() [^bb1618] : () -> ()
  ^bb1618:
    "cf.br"() [^bb1619] : () -> ()
  ^bb1619:
    "cf.br"() [^bb1620] : () -> ()
  ^bb1620:
    "cf.br"() [^bb1621] : () -> ()
  ^bb1621:
    "cf.br"() [^bb1622] : () -> ()
  ^bb1622:
    "cf.br"() [^bb1623] : () -> ()
  ^bb1623:
    "cf.br"() [^bb1624] : () -> ()
  ^bb1624:
    "cf.br"() [^bb1625] : () -> ()
  ^bb1625:
    "cf.br"() [^bb1626] : () -> ()
  ^bb1626:
    "cf.br"() [^bb1627] : () -> ()
  ^bb1627:
    "cf.br"() [^bb1628] : () -> ()
  ^bb1628:
    "cf.br"() [^bb1629] : () -> ()
  ^bb1629:
    "cf.br"() [^bb1630] : () -> ()
  ^bb1630:
    "cf.br"() [^bb1631] : () -> ()
  ^bb1631:
    "cf.br"() [^bb1632] : () -> ()
  ^bb1632:
    "cf.br"() [^bb1633] : () -> ()
  ^bb1633:
    "cf.br"() [^bb1634] : () -> ()
  ^bb1634:
    "cf.br"() [^bb1635] : () -> ()
  ^bb1635:
    "cf.br"() [^bb1636] : () -> ()
  ^bb1636:
    "cf.br"() [^bb1637] : () -> ()
  ^bb1637:
    "cf.br"() [^bb1638] : () -> ()
  ^bb1638:
    "cf.br"() [^bb1639] : () -> ()
  ^bb1639:
    "cf.br"() [^bb1640] : () -> ()
  ^bb1640:
    "cf.br"() [^bb1641] : () -> ()
  ^bb1641:
    "cf.br"() [^bb1642] : () -> ()
  ^bb1642:
    "cf.br"() [^bb1643] : () -> ()
  ^bb1643:
    "cf.br"() [^bb1644] : () -> ()
  ^bb1644:
    "cf.br"() [^bb1645] : () -> ()
  ^bb1645:
    "cf.br"() [^bb1646] : () -> ()
  ^bb1646:
    "cf.br"() [^bb1647] : () -> ()
  ^bb1647:
    "cf.br"() [^bb1648] : () -> ()
  ^bb1648:
    "cf.br"() [^bb1649] : () -> ()
  ^bb1649:
    "cf.br"() [^bb1650] : () -> ()
  ^bb1650:
    "cf.br"() [^bb1651] : () -> ()
  ^bb1651:
    "cf.br"() [^bb1652] : () -> ()
  ^bb1652:
    "cf.br"() [^bb1653] : () -> ()
  ^bb1653:
    "cf.br"() [^bb1654] : () -> ()
  ^bb1654:
    "cf.br"() [^bb1655] : () -> ()
  ^bb1655:
    "cf.br"() [^bb1656] : () -> ()
  ^bb1656:
    "cf.br"() [^bb1657] : () -> ()
  ^bb1657:
    "cf.br"() [^bb1658] : () -> ()
  ^bb1658:
    "cf.br"() [^bb1659] : () -> ()
  ^bb1659:
    "cf.br"() [^bb1660] : () -> ()
  ^bb1660:
    "cf.br"() [^bb1661] : () -> ()
  ^bb1661:
    "cf.br"() [^bb1662] : () -> ()
  ^bb1662:
    "cf.br"() [^bb1663] : () -> ()
  ^bb1663:
    "cf.br"() [^bb1664] : () -> ()
  ^bb1664:
    "cf.br"() [^bb1665] : () -> ()
  ^bb1665:
    "cf.br"() [^bb1666] : () -> ()
  ^bb1666:
    "cf.br"() [^bb1667] : () -> ()
  ^bb1667:
    "cf.br"() [^bb1668] : () -> ()
  ^bb1668:
    "cf.br"() [^bb1669] : () -> ()
  ^bb1669:
    "cf.br"() [^bb1670] : () -> ()
  ^bb1670:
    "cf.br"() [^bb1671] : () -> ()
  ^bb1671:
    "cf.br"() [^bb1672] : () -> ()
  ^bb1672:
    "cf.br"() [^bb1673] : () -> ()
  ^bb1673:
    "cf.br"() [^bb1674] : () -> ()
  ^bb1674:
    "cf.br"() [^bb1675] : () -> ()
  ^bb1675:
    "cf.br"() [^bb1676] : () -> ()
  ^bb1676:
    "cf.br"() [^bb1677] : () -> ()
  ^bb1677:
    "cf.br"() [^bb1678] : () -> ()
  ^bb1678:
    "cf.br"() [^bb1679] : () -> ()
  ^bb1679:
    "cf.br"() [^bb1680] : () -> ()
  ^bb1680:
    "cf.br"() [^bb1681] : () -> ()
  ^bb1681:
    "cf.br"() [^bb1682] : () -> ()
  ^bb1682:
    "cf.br"() [^bb1683] : () -> ()
  ^bb1683:
    "cf.br"() [^bb1684] : () -> ()
  ^bb1684:
    "cf.br"() [^bb1685] : () -> ()
  ^bb1685:
    "cf.br"() [^bb1686] : () -> ()
  ^bb1686:
    "cf.br"() [^bb1687] : () -> ()
  ^bb1687:
    "cf.br"() [^bb1688] : () -> ()
  ^bb1688:
    "cf.br"() [^bb1689] : () -> ()
  ^bb1689:
    "cf.br"() [^bb1690] : () -> ()
  ^bb1690:
    "cf.br"() [^bb1691] : () -> ()
  ^bb1691:
    "cf.br"() [^bb1692] : () -> ()
  ^bb1692:
    "cf.br"() [^bb1693] : () -> ()
  ^bb1693:
    "cf.br"() [^bb1694] : () -> ()
  ^bb1694:
    "cf.br"() [^bb1695] : () -> ()
  ^bb1695:
    "cf.br"() [^bb1696] : () -> ()
  ^bb1696:
    "cf.br"() [^bb1697] : () -> ()
  ^bb1697:
    "cf.br"() [^bb1698] : () -> ()
  ^bb1698:
    "cf.br"() [^bb1699] : () -> ()
  ^bb1699:
    "cf.br"() [^bb1700] : () -> ()
  ^bb1700:
    "cf.br"() [^bb1701] : () -> ()
  ^bb1701:
    "cf.br"() [^bb1702] : () -> ()
  ^bb1702:
    "cf.br"() [^bb1703] : () -> ()
  ^bb1703:
    "cf.br"() [^bb1704] : () -> ()
  ^bb1704:
    "cf.br"() [^bb1705] : () -> ()
  ^bb1705:
    "cf.br"() [^bb1706] : () -> ()
  ^bb1706:
    "cf.br"() [^bb1707] : () -> ()
  ^bb1707:
    "cf.br"() [^bb1708] : () -> ()
  ^bb1708:
    "cf.br"() [^bb1709] : () -> ()
  ^bb1709:
    "cf.br"() [^bb1710] : () -> ()
  ^bb1710:
    "cf.br"() [^bb1711] : () -> ()
  ^bb1711:
    "cf.br"() [^bb1712] : () -> ()
  ^bb1712:
    "cf.br"() [^bb1713] : () -> ()
  ^bb1713:
    "cf.br"() [^bb1714] : () -> ()
  ^bb1714:
    "cf.br"() [^bb1715] : () -> ()
  ^bb1715:
    "cf.br"() [^bb1716] : () -> ()
  ^bb1716:
    "cf.br"() [^bb1717] : () -> ()
  ^bb1717:
    "cf.br"() [^bb1718] : () -> ()
  ^bb1718:
    "cf.br"() [^bb1719] : () -> ()
  ^bb1719:
    "cf.br"() [^bb1720] : () -> ()
  ^bb1720:
    "cf.br"() [^bb1721] : () -> ()
  ^bb1721:
    "cf.br"() [^bb1722] : () -> ()
  ^bb1722:
    "cf.br"() [^bb1723] : () -> ()
  ^bb1723:
    "cf.br"() [^bb1724] : () -> ()
  ^bb1724:
    "cf.br"() [^bb1725] : () -> ()
  ^bb1725:
    "cf.br"() [^bb1726] : () -> ()
  ^bb1726:
    "cf.br"() [^bb1727] : () -> ()
  ^bb1727:
    "cf.br"() [^bb1728] : () -> ()
  ^bb1728:
    "cf.br"() [^bb1729] : () -> ()
  ^bb1729:
    "cf.br"() [^bb1730] : () -> ()
  ^bb1730:
    "cf.br"() [^bb1731] : () -> ()
  ^bb1731:
    "cf.br"() [^bb1732] : () -> ()
  ^bb1732:
    "cf.br"() [^bb1733] : () -> ()
  ^bb1733:
    "cf.br"() [^bb1734] : () -> ()
  ^bb1734:
    "cf.br"() [^bb1735] : () -> ()
  ^bb1735:
    "cf.br"() [^bb1736] : () -> ()
  ^bb1736:
    "cf.br"() [^bb1737] : () -> ()
  ^bb1737:
    "cf.br"() [^bb1738] : () -> ()
  ^bb1738:
    "cf.br"() [^bb1739] : () -> ()
  ^bb1739:
    "cf.br"() [^bb1740] : () -> ()
  ^bb1740:
    "cf.br"() [^bb1741] : () -> ()
  ^bb1741:
    "cf.br"() [^bb1742] : () -> ()
  ^bb1742:
    "cf.br"() [^bb1743] : () -> ()
  ^bb1743:
    "cf.br"() [^bb1744] : () -> ()
  ^bb1744:
    "cf.br"() [^bb1745] : () -> ()
  ^bb1745:
    "cf.br"() [^bb1746] : () -> ()
  ^bb1746:
    "cf.br"() [^bb1747] : () -> ()
  ^bb1747:
    "cf.br"() [^bb1748] : () -> ()
  ^bb1748:
    "cf.br"() [^bb1749] : () -> ()
  ^bb1749:
    "cf.br"() [^bb1750] : () -> ()
  ^bb1750:
    "cf.br"() [^bb1751] : () -> ()
  ^bb1751:
    "cf.br"() [^bb1752] : () -> ()
  ^bb1752:
    "cf.br"() [^bb1753] : () -> ()
  ^bb1753:
    "cf.br"() [^bb1754] : () -> ()
  ^bb1754:
    "cf.br"() [^bb1755] : () -> ()
  ^bb1755:
    "cf.br"() [^bb1756] : () -> ()
  ^bb1756:
    "cf.br"() [^bb1757] : () -> ()
  ^bb1757:
    "cf.br"() [^bb1758] : () -> ()
  ^bb1758:
    "cf.br"() [^bb1759] : () -> ()
  ^bb1759:
    "cf.br"() [^bb1760] : () -> ()
  ^bb1760:
    "cf.br"() [^bb1761] : () -> ()
  ^bb1761:
    "cf.br"() [^bb1762] : () -> ()
  ^bb1762:
    "cf.br"() [^bb1763] : () -> ()
  ^bb1763:
    "cf.br"() [^bb1764] : () -> ()
  ^bb1764:
    "cf.br"() [^bb1765] : () -> ()
  ^bb1765:
    "cf.br"() [^bb1766] : () -> ()
  ^bb1766:
    "cf.br"() [^bb1767] : () -> ()
  ^bb1767:
    "cf.br"() [^bb1768] : () -> ()
  ^bb1768:
    "cf.br"() [^bb1769] : () -> ()
  ^bb1769:
    "cf.br"() [^bb1770] : () -> ()
  ^bb1770:
    "cf.br"() [^bb1771] : () -> ()
  ^bb1771:
    "cf.br"() [^bb1772] : () -> ()
  ^bb1772:
    "cf.br"() [^bb1773] : () -> ()
  ^bb1773:
    "cf.br"() [^bb1774] : () -> ()
  ^bb1774:
    "cf.br"() [^bb1775] : () -> ()
  ^bb1775:
    "cf.br"() [^bb1776] : () -> ()
  ^bb1776:
    "cf.br"() [^bb1777] : () -> ()
  ^bb1777:
    "cf.br"() [^bb1778] : () -> ()
  ^bb1778:
    "cf.br"() [^bb1779] : () -> ()
  ^bb1779:
    "cf.br"() [^bb1780] : () -> ()
  ^bb1780:
    "cf.br"() [^bb1781] : () -> ()
  ^bb1781:
    "cf.br"() [^bb1782] : () -> ()
  ^bb1782:
    "cf.br"() [^bb1783] : () -> ()
  ^bb1783:
    "cf.br"() [^bb1784] : () -> ()
  ^bb1784:
    "cf.br"() [^bb1785] : () -> ()
  ^bb1785:
    "cf.br"() [^bb1786] : () -> ()
  ^bb1786:
    "cf.br"() [^bb1787] : () -> ()
  ^bb1787:
    "cf.br"() [^bb1788] : () -> ()
  ^bb1788:
    "cf.br"() [^bb1789] : () -> ()
  ^bb1789:
    "cf.br"() [^bb1790] : () -> ()
  ^bb1790:
    "cf.br"() [^bb1791] : () -> ()
  ^bb1791:
    "cf.br"() [^bb1792] : () -> ()
  ^bb1792:
    "cf.br"() [^bb1793] : () -> ()
  ^bb1793:
    "cf.br"() [^bb1794] : () -> ()
  ^bb1794:
    "cf.br"() [^bb1795] : () -> ()
  ^bb1795:
    "cf.br"() [^bb1796] : () -> ()
  ^bb1796:
    "cf.br"() [^bb1797] : () -> ()
  ^bb1797:
    "cf.br"() [^bb1798] : () -> ()
  ^bb1798:
    "cf.br"() [^bb1799] : () -> ()
  ^bb1799:
    "cf.br"() [^bb1800] : () -> ()
  ^bb1800:
    "cf.br"() [^bb1801] : () -> ()
  ^bb1801:
    "cf.br"() [^bb1802] : () -> ()
  ^bb1802:
    "cf.br"() [^bb1803] : () -> ()
  ^bb1803:
    "cf.br"() [^bb1804] : () -> ()
  ^bb1804:
    "cf.br"() [^bb1805] : () -> ()
  ^bb1805:
    "cf.br"() [^bb1806] : () -> ()
  ^bb1806:
    "cf.br"() [^bb1807] : () -> ()
  ^bb1807:
    "cf.br"() [^bb1808] : () -> ()
  ^bb1808:
    "cf.br"() [^bb1809] : () -> ()
  ^bb1809:
    "cf.br"() [^bb1810] : () -> ()
  ^bb1810:
    "cf.br"() [^bb1811] : () -> ()
  ^bb1811:
    "cf.br"() [^bb1812] : () -> ()
  ^bb1812:
    "cf.br"() [^bb1813] : () -> ()
  ^bb1813:
    "cf.br"() [^bb1814] : () -> ()
  ^bb1814:
    "cf.br"() [^bb1815] : () -> ()
  ^bb1815:
    "cf.br"() [^bb1816] : () -> ()
  ^bb1816:
    "cf.br"() [^bb1817] : () -> ()
  ^bb1817:
    "cf.br"() [^bb1818] : () -> ()
  ^bb1818:
    "cf.br"() [^bb1819] : () -> ()
  ^bb1819:
    "cf.br"() [^bb1820] : () -> ()
  ^bb1820:
    "cf.br"() [^bb1821] : () -> ()
  ^bb1821:
    "cf.br"() [^bb1822] : () -> ()
  ^bb1822:
    "cf.br"() [^bb1823] : () -> ()
  ^bb1823:
    "cf.br"() [^bb1824] : () -> ()
  ^bb1824:
    "cf.br"() [^bb1825] : () -> ()
  ^bb1825:
    "cf.br"() [^bb1826] : () -> ()
  ^bb1826:
    "cf.br"() [^bb1827] : () -> ()
  ^bb1827:
    "cf.br"() [^bb1828] : () -> ()
  ^bb1828:
    %13386 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13387 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13388 = "mini.unwrap"(%13386) : (!mini.ptr<i32>) -> i32
    %13389 = "mini.unwrap"(%13387) : (!mini.ptr<i32>) -> i32
    %13390 = "mini.arithmetic"(%13388, %13389) {"op" = "ADD"} : (i32, i32) -> i32
    %13391 = "mini.wrap"(%13390) : (i32) -> !mini.ptr<i32>
    %13392 = "mini.unionize"(%13391) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13393 = "mini.unwrap"(%13392) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13394 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13395 = "mini.parameterizations_array"(%13394) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13395, %13393) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13396 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13397 = "mini.create_buffer"(%13396) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %13398 = builtin.unrealized_conversion_cast %13397 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %13399 = "mini.refer"(%13398) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %13400 = "mini.literal"() {"typ" = !llvm.array<13 x i8>, "value" = "Hello, World!"} : () -> !llvm.ptr
    %13401 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %13402 = "mini.buffer_indexation"(%13399, %13401) {"typ" = !llvm.array<13 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%13402, %13400) {"typ" = !llvm.array<13 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %13403 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13404 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13405 = "mini.unwrap"(%13399) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13406 = "mini.unwrap"(%13403) : (!mini.ptr<i32>) -> i32
    %13407 = "mini.unwrap"(%13404) : (!mini.ptr<i32>) -> i32
    %13408 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %13409 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13410 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13411 = builtin.unrealized_conversion_cast %13399 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13412 = "mini.unwrap"(%13411) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13413 = builtin.unrealized_conversion_cast %13409 : !mini.ptr<i32> to !mini.ptr<i32>
    %13414 = "mini.unwrap"(%13413) : (!mini.ptr<i32>) -> i32
    %13415 = builtin.unrealized_conversion_cast %13410 : !mini.ptr<i32> to !mini.ptr<i32>
    %13416 = "mini.unwrap"(%13415) : (!mini.ptr<i32>) -> i32
    %13417 = "mini.unwrap"(%13408) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13418 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13419 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13420 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13421 = "mini.parameterizations_array"(%13418, %13419, %13420) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13421, %13417, %13412, %13414, %13416) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13422 = builtin.unrealized_conversion_cast %13408 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13423 = "mini.unwrap"(%13422) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13424 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %13425 = "mini.parameterizations_array"(%13424) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13425, %13423) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13426 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %13427 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %13428 = "mini.unwrap"(%13426) : (!mini.ptr<i1>) -> i1
    %13429 = "mini.unwrap"(%13427) : (!mini.ptr<i1>) -> i1
    %13430 = "mini.logical"(%13428, %13429) {"op" = "and"} : (i1, i1) -> i1
    %13431 = "mini.wrap"(%13430) : (i1) -> !mini.ptr<i1>
    %13432 = "mini.unionize"(%13431) {"from_typ" = i1, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "bool_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i1>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13433 = "mini.unwrap"(%13432) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13434 = "mini.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["Ptri1"]} : () -> !llvm.ptr
    %13435 = "mini.parameterizations_array"(%13434) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13435, %13433) {"offset" = 0 : i32, "vptrs" = ["bool_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "cf.br"() [^bb1829] : () -> ()
  ^bb1829:
    "cf.br"() [^bb1830] : () -> ()
  ^bb1830:
    "cf.br"() [^bb1831] : () -> ()
  ^bb1831:
    "cf.br"() [^bb1832] : () -> ()
  ^bb1832:
    "cf.br"() [^bb1833] : () -> ()
  ^bb1833:
    "cf.br"() [^bb1834] : () -> ()
  ^bb1834:
    "cf.br"() [^bb1835] : () -> ()
  ^bb1835:
    "cf.br"() [^bb1836] : () -> ()
  ^bb1836:
    "cf.br"() [^bb1837] : () -> ()
  ^bb1837:
    "cf.br"() [^bb1838] : () -> ()
  ^bb1838:
    "cf.br"() [^bb1839] : () -> ()
  ^bb1839:
    "cf.br"() [^bb1840] : () -> ()
  ^bb1840:
    "cf.br"() [^bb1841] : () -> ()
  ^bb1841:
    "cf.br"() [^bb1842] : () -> ()
  ^bb1842:
    "cf.br"() [^bb1843] : () -> ()
  ^bb1843:
    "cf.br"() [^bb1844] : () -> ()
  ^bb1844:
    "cf.br"() [^bb1845] : () -> ()
  ^bb1845:
    "cf.br"() [^bb1846] : () -> ()
  ^bb1846:
    "cf.br"() [^bb1847] : () -> ()
  ^bb1847:
    "cf.br"() [^bb1848] : () -> ()
  ^bb1848:
    "cf.br"() [^bb1849] : () -> ()
  ^bb1849:
    "cf.br"() [^bb1850] : () -> ()
  ^bb1850:
    "cf.br"() [^bb1851] : () -> ()
  ^bb1851:
    "cf.br"() [^bb1852] : () -> ()
  ^bb1852:
    "cf.br"() [^bb1853] : () -> ()
  ^bb1853:
    "cf.br"() [^bb1854] : () -> ()
  ^bb1854:
    "cf.br"() [^bb1855] : () -> ()
  ^bb1855:
    "cf.br"() [^bb1856] : () -> ()
  ^bb1856:
    "cf.br"() [^bb1857] : () -> ()
  ^bb1857:
    "cf.br"() [^bb1858] : () -> ()
  ^bb1858:
    "cf.br"() [^bb1859] : () -> ()
  ^bb1859:
    "cf.br"() [^bb1860] : () -> ()
  ^bb1860:
    "cf.br"() [^bb1861] : () -> ()
  ^bb1861:
    "cf.br"() [^bb1862] : () -> ()
  ^bb1862:
    "cf.br"() [^bb1863] : () -> ()
  ^bb1863:
    "cf.br"() [^bb1864] : () -> ()
  ^bb1864:
    "cf.br"() [^bb1865] : () -> ()
  ^bb1865:
    "cf.br"() [^bb1866] : () -> ()
  ^bb1866:
    "cf.br"() [^bb1867] : () -> ()
  ^bb1867:
    "cf.br"() [^bb1868] : () -> ()
  ^bb1868:
    "cf.br"() [^bb1869] : () -> ()
  ^bb1869:
    "cf.br"() [^bb1870] : () -> ()
  ^bb1870:
    %13436 = "mini.new"() {"typ" = !llvm.struct<()>, "class_name" = "Bard", "num_data_fields" = 0 : i32} : () -> !mini.fatptr<"Bard">
    %13437 = "mini.unwrap"(%13436) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13438 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%13438, %13437) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13439 = "mini.to_fat_ptr"(%13436) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Bard", "to_typ_name" = "Bard", "invariant"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %13440 = "mini.refer"(%13439) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %13441 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13442 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13443 = "mini.unionize"(%13441) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %13444 = "mini.unwrap"(%13443) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13445 = "mini.unionize"(%13442) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %13446 = "mini.unwrap"(%13445) : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13447 = "mini.unwrap"(%13440) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13448 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13449 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13450 = "mini.parameterizations_array"(%13448, %13449) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13450, %13447, %13444, %13446) {"offset" = 1 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13451 = "mini.literal"() {"value" = 7.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %13452 = "mini.unionize"(%13451) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %13453 = "mini.literal"() {"value" = 1.400000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %13454 = "mini.reunionize"(%13452) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %13455 = "mini.unwrap"(%13454) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13456 = "mini.unionize"(%13453) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %13457 = "mini.unwrap"(%13456) : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13458 = "mini.unwrap"(%13440) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13459 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["i32_typ"], ["f64_typ"]], "name_hierarchy" = ["Ptri32_or_Ptrf64", ["Ptri32"], ["Ptrf64"]]} : () -> !llvm.ptr
    %13460 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %13461 = "mini.parameterizations_array"(%13459, %13460) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13461, %13458, %13455, %13457) {"offset" = 1 : i32, "vptrs" = ["union_typ", "f64_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13462 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13463 = "mini.create_buffer"(%13462) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %13464 = builtin.unrealized_conversion_cast %13463 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %13465 = "mini.refer"(%13464) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %13466 = "mini.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "start"} : () -> !llvm.ptr
    %13467 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %13468 = "mini.buffer_indexation"(%13465, %13467) {"typ" = !llvm.array<5 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%13468, %13466) {"typ" = !llvm.array<5 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %13469 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13470 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13471 = "mini.unwrap"(%13465) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13472 = "mini.unwrap"(%13469) : (!mini.ptr<i32>) -> i32
    %13473 = "mini.unwrap"(%13470) : (!mini.ptr<i32>) -> i32
    %13474 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %13475 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13476 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13477 = builtin.unrealized_conversion_cast %13465 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13478 = "mini.unwrap"(%13477) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13479 = builtin.unrealized_conversion_cast %13475 : !mini.ptr<i32> to !mini.ptr<i32>
    %13480 = "mini.unwrap"(%13479) : (!mini.ptr<i32>) -> i32
    %13481 = builtin.unrealized_conversion_cast %13476 : !mini.ptr<i32> to !mini.ptr<i32>
    %13482 = "mini.unwrap"(%13481) : (!mini.ptr<i32>) -> i32
    %13483 = "mini.unwrap"(%13474) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13484 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13485 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13486 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13487 = "mini.parameterizations_array"(%13484, %13485, %13486) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13487, %13483, %13478, %13480, %13482) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13488 = builtin.unrealized_conversion_cast %13474 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13489 = "mini.unwrap"(%13488) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13490 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %13491 = "mini.parameterizations_array"(%13490) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13491, %13489) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13492 = "mini.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13493 = "mini.literal"() {"value" = 8.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %13494 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13495 = "mini.unwrap"(%13492) : (!mini.ptr<i32>) -> i32
    %13496 = "mini.unwrap"(%13493) : (!mini.ptr<f64>) -> f64
    %13497 = "mini.unwrap"(%13494) : (!mini.ptr<i32>) -> i32
    %13498 = "mini.new"() {"typ" = !llvm.struct<(i32, f64, i32)>, "class_name" = "Animal", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"Animal">
    %13499 = "mini.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13500 = "mini.literal"() {"value" = 8.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %13501 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13502 = builtin.unrealized_conversion_cast %13499 : !mini.ptr<i32> to !mini.ptr<i32>
    %13503 = "mini.unwrap"(%13502) : (!mini.ptr<i32>) -> i32
    %13504 = builtin.unrealized_conversion_cast %13500 : !mini.ptr<f64> to !mini.ptr<f64>
    %13505 = "mini.unwrap"(%13504) : (!mini.ptr<f64>) -> f64
    %13506 = builtin.unrealized_conversion_cast %13501 : !mini.ptr<i32> to !mini.ptr<i32>
    %13507 = "mini.unwrap"(%13506) : (!mini.ptr<i32>) -> i32
    %13508 = "mini.unwrap"(%13498) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13509 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13510 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %13511 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13512 = "mini.parameterizations_array"(%13509, %13510, %13511) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13512, %13508, %13503, %13505, %13507) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "f64_typ", "i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64, i32) -> ()
    %13513 = "mini.to_fat_ptr"(%13498) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %13514 = "mini.refer"(%13513) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %13515 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13516 = "mini.create_buffer"(%13515) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %13517 = builtin.unrealized_conversion_cast %13516 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %13518 = "mini.refer"(%13517) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %13519 = "mini.literal"() {"typ" = !llvm.array<13 x i8>, "value" = "did get here!"} : () -> !llvm.ptr
    %13520 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %13521 = "mini.buffer_indexation"(%13518, %13520) {"typ" = !llvm.array<13 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%13521, %13519) {"typ" = !llvm.array<13 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %13522 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13523 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13524 = "mini.unwrap"(%13518) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13525 = "mini.unwrap"(%13522) : (!mini.ptr<i32>) -> i32
    %13526 = "mini.unwrap"(%13523) : (!mini.ptr<i32>) -> i32
    %13527 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %13528 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13529 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13530 = builtin.unrealized_conversion_cast %13518 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13531 = "mini.unwrap"(%13530) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13532 = builtin.unrealized_conversion_cast %13528 : !mini.ptr<i32> to !mini.ptr<i32>
    %13533 = "mini.unwrap"(%13532) : (!mini.ptr<i32>) -> i32
    %13534 = builtin.unrealized_conversion_cast %13529 : !mini.ptr<i32> to !mini.ptr<i32>
    %13535 = "mini.unwrap"(%13534) : (!mini.ptr<i32>) -> i32
    %13536 = "mini.unwrap"(%13527) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13537 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13538 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13539 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13540 = "mini.parameterizations_array"(%13537, %13538, %13539) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13540, %13536, %13531, %13533, %13535) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13541 = builtin.unrealized_conversion_cast %13527 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13542 = "mini.unwrap"(%13541) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13543 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %13544 = "mini.parameterizations_array"(%13543) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13544, %13542) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13545 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13546 = "mini.literal"() {"value" = 1.000000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %13547 = "mini.unwrap"(%13545) : (!mini.ptr<i32>) -> i32
    %13548 = "mini.unwrap"(%13546) : (!mini.ptr<f64>) -> f64
    %13549 = "mini.new"() {"typ" = !llvm.struct<(i32, f64)>, "class_name" = "Beaver", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"Beaver">
    %13550 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13551 = "mini.literal"() {"value" = 1.000000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %13552 = builtin.unrealized_conversion_cast %13550 : !mini.ptr<i32> to !mini.ptr<i32>
    %13553 = "mini.unwrap"(%13552) : (!mini.ptr<i32>) -> i32
    %13554 = builtin.unrealized_conversion_cast %13551 : !mini.ptr<f64> to !mini.ptr<f64>
    %13555 = "mini.unwrap"(%13554) : (!mini.ptr<f64>) -> f64
    %13556 = "mini.unwrap"(%13549) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13557 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13558 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %13559 = "mini.parameterizations_array"(%13557, %13558) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13559, %13556, %13553, %13555) {"offset" = 2 : i32, "vptrs" = ["i32_typ", "f64_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64) -> ()
    %13560 = "mini.to_fat_ptr"(%13549) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver", "invariant"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %13561 = "mini.refer"(%13560) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %13562 = builtin.unrealized_conversion_cast %13514 : !mini.fatptr<"Animal"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %13563 = "mini.unwrap"(%13562) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13564 = builtin.unrealized_conversion_cast %13561 : !mini.fatptr<"Beaver"> to !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %13565 = "mini.unwrap"(%13564) : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13566 = "mini.unwrap"(%13440) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13567 = "mini.parameterization"() {"id_hierarchy" = ["Animal"], "name_hierarchy" = ["Animal"]} : () -> !llvm.ptr
    %13568 = "mini.parameterization"() {"id_hierarchy" = ["Beaver"], "name_hierarchy" = ["Beaver"]} : () -> !llvm.ptr
    %13569 = "mini.parameterizations_array"(%13567, %13568) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13569, %13566, %13563, %13565) {"offset" = 1 : i32, "vptrs" = [#none, #none], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13570 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13571 = "mini.unionize"(%13570) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>
    %13572 = "mini.unwrap"(%13571) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13573 = "mini.reunionize"(%13452) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %13574 = "mini.unwrap"(%13573) : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13575 = "mini.unwrap"(%13440) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13576 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13577 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["i32_typ"], ["f64_typ"]], "name_hierarchy" = ["Ptri32_or_Ptrf64", ["Ptri32"], ["Ptrf64"]]} : () -> !llvm.ptr
    %13578 = "mini.parameterizations_array"(%13576, %13577) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13578, %13575, %13572, %13574) {"offset" = 1 : i32, "vptrs" = ["i32_typ", "union_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13579 = "mini.literal"() {"value" = 17 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13580 = "mini.create_buffer"(%13579) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %13581 = builtin.unrealized_conversion_cast %13580 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %13582 = "mini.refer"(%13581) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %13583 = "mini.literal"() {"typ" = !llvm.array<16 x i8>, "value" = "barry's color is"} : () -> !llvm.ptr
    %13584 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %13585 = "mini.buffer_indexation"(%13582, %13584) {"typ" = !llvm.array<16 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%13585, %13583) {"typ" = !llvm.array<16 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %13586 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13587 = "mini.literal"() {"value" = 17 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13588 = "mini.unwrap"(%13582) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13589 = "mini.unwrap"(%13586) : (!mini.ptr<i32>) -> i32
    %13590 = "mini.unwrap"(%13587) : (!mini.ptr<i32>) -> i32
    %13591 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %13592 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13593 = "mini.literal"() {"value" = 17 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13594 = builtin.unrealized_conversion_cast %13582 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %13595 = "mini.unwrap"(%13594) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %13596 = builtin.unrealized_conversion_cast %13592 : !mini.ptr<i32> to !mini.ptr<i32>
    %13597 = "mini.unwrap"(%13596) : (!mini.ptr<i32>) -> i32
    %13598 = builtin.unrealized_conversion_cast %13593 : !mini.ptr<i32> to !mini.ptr<i32>
    %13599 = "mini.unwrap"(%13598) : (!mini.ptr<i32>) -> i32
    %13600 = "mini.unwrap"(%13591) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13601 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %13602 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13603 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13604 = "mini.parameterizations_array"(%13601, %13602, %13603) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13604, %13600, %13595, %13597, %13599) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13605 = builtin.unrealized_conversion_cast %13591 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13606 = "mini.unwrap"(%13605) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13607 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %13608 = "mini.parameterizations_array"(%13607) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13608, %13606) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13609 = "mini.unwrap"(%13561) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13610 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%13610, %13609) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13611 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13612 = builtin.unrealized_conversion_cast %13611 : !mini.ptr<i32> to !mini.ptr<i32>
    %13613 = "mini.unwrap"(%13612) : (!mini.ptr<i32>) -> i32
    %13614 = "mini.unwrap"(%13561) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13615 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13616 = "mini.parameterizations_array"(%13615) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13616, %13614, %13613) {"offset" = 3 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %13617 = "mini.unwrap"(%13561) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13618 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%13618, %13617) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13619 = "mini.literal"() {"value" = 89 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13620 = "mini.unwrap"(%13619) : (!mini.ptr<i32>) -> i32
    %13621 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32} : () -> !mini.fatptr<"Integer">
    %13622 = "mini.literal"() {"value" = 89 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13623 = builtin.unrealized_conversion_cast %13622 : !mini.ptr<i32> to !mini.ptr<i32>
    %13624 = "mini.unwrap"(%13623) : (!mini.ptr<i32>) -> i32
    %13625 = "mini.unwrap"(%13621) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13626 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13627 = "mini.parameterizations_array"(%13626) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13627, %13625, %13624) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %13628 = "mini.to_fat_ptr"(%13621) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %13629 = "mini.refer"(%13628) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %13630 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13631 = builtin.unrealized_conversion_cast %13630 : !mini.ptr<i32> to !mini.ptr<i32>
    %13632 = "mini.unwrap"(%13631) : (!mini.ptr<i32>) -> i32
    %13633 = "mini.unwrap"(%13629) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13634 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13635 = "mini.parameterizations_array"(%13634) : (!llvm.ptr) -> !llvm.ptr
    %13636 = "mini.method_call"(%13635, %13633, %13632) {"offset" = 3 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.fatptr<"Integer">
    %13637 = "mini.to_fat_ptr"(%13636) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer", "to_typ_name" = "Integer", "invariant"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %13638 = "mini.unwrap"(%13637) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13639 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%13639, %13638) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13640 = "mini.literal"() {"value" = 9.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %13641 = builtin.unrealized_conversion_cast %13640 : !mini.ptr<f64> to !mini.ptr<f64>
    %13642 = "mini.unwrap"(%13641) : (!mini.ptr<f64>) -> f64
    %13643 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %13644 = "mini.parameterizations_array"(%13643) : (!llvm.ptr) -> !llvm.ptr
    %13645 = "mini.class_method_call"(%13644, %13642) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 17 : i64, "ret_type" = f64, "ret_type_unq" = f64, "class_name" = "Math"} : (!llvm.ptr, f64) -> !mini.ptr<f64>
    %13646 = builtin.unrealized_conversion_cast %13645 : !mini.ptr<f64> to !mini.ptr<f64>
    %13647 = "mini.literal"() {"value" = -9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13648 = "mini.unionize"(%13647) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i64)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %13649 = "mini.unwrap"(%13648) : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !llvm.struct<(!llvm.ptr, i64)>
    %13650 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13651 = "mini.parameterizations_array"(%13650) : (!llvm.ptr) -> !llvm.ptr
    %13652 = "mini.class_method_call"(%13651, %13649) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 17 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i64)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i64)>, "class_name" = "Math"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>
    %13653 = "mini.narrow"(%13652) {"from_typ" = !llvm.struct<(!llvm.ptr, i64)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.ptr<f64>]>) -> !mini.ptr<i32>
    %13654 = "mini.unionize"(%13653) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13655 = "mini.unwrap"(%13654) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13656 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13657 = "mini.parameterizations_array"(%13656) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13657, %13655) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13658 = "mini.unionize"(%13646) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13659 = "mini.unwrap"(%13658) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13660 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %13661 = "mini.parameterizations_array"(%13660) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13661, %13659) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13662 = "mini.unwrap"(%13514) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    "mini.call"(%13662) {"func_name" = "make_em_speak", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13663 = "mini.unwrap"(%13514) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13664 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13665 = "mini.method_call"(%13664, %13663) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">]>
    %13666 = builtin.unrealized_conversion_cast %13665 : !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">]> to !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">]>
    %13667 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13668 = "mini.unionize"(%13667) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
    "mini.while"() ({
      %13669 = "mini.checkflag"(%13668) {"typ_name" = "i32_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>) -> i1
      %13670 = "mini.unwrap"(%13669) : (i1) -> i1
    }, {
      %13671 = "mini.narrow"(%13668) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>) -> !mini.ptr<i32>
      %13672 = "mini.unionize"(%13671) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
      %13673 = "mini.unwrap"(%13672) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %13674 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13675 = "mini.parameterizations_array"(%13674) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%13675, %13673) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %13676 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %13677 = "mini.unwrap"(%13671) : (!mini.ptr<i32>) -> i32
      %13678 = "mini.unwrap"(%13676) : (!mini.ptr<i32>) -> i32
      %13679 = "mini.arithmetic"(%13677, %13678) {"op" = "ADD"} : (i32, i32) -> i32
      %13680 = "mini.wrap"(%13679) : (i32) -> !mini.ptr<i32>
      "mini.castassign"(%13671, %13680) ({
        %13681 = builtin.unrealized_conversion_cast %13680 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %13682 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %13683 = "mini.unwrap"(%13671) : (!mini.ptr<i32>) -> i32
      %13684 = "mini.unwrap"(%13682) : (!mini.ptr<i32>) -> i32
      %13685 = "mini.comparison"(%13683, %13684) {"op" = "EQ"} : (i32, i32) -> i1
      %13686 = "mini.wrap"(%13685) : (i1) -> !mini.ptr<i32>
      %13687 = "mini.unwrap"(%13686) : (!mini.ptr<i32>) -> i1
      %13688 = "mini.unionize"(%13671) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
      "mini.if"(%13687) ({
        %13689 = "mini.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %13690 = "mini.literal"() {"value" = 1.800000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
        %13691 = "mini.literal"() {"value" = 23 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %13692 = "mini.unwrap"(%13689) : (!mini.ptr<i32>) -> i32
        %13693 = "mini.unwrap"(%13690) : (!mini.ptr<f64>) -> f64
        %13694 = "mini.unwrap"(%13691) : (!mini.ptr<i32>) -> i32
        %13695 = "mini.new"() {"typ" = !llvm.struct<(i32, f64, i32)>, "class_name" = "Animal", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"Animal">
        %13696 = "mini.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %13697 = "mini.literal"() {"value" = 1.800000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
        %13698 = "mini.literal"() {"value" = 23 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %13699 = builtin.unrealized_conversion_cast %13696 : !mini.ptr<i32> to !mini.ptr<i32>
        %13700 = "mini.unwrap"(%13699) : (!mini.ptr<i32>) -> i32
        %13701 = builtin.unrealized_conversion_cast %13697 : !mini.ptr<f64> to !mini.ptr<f64>
        %13702 = "mini.unwrap"(%13701) : (!mini.ptr<f64>) -> f64
        %13703 = builtin.unrealized_conversion_cast %13698 : !mini.ptr<i32> to !mini.ptr<i32>
        %13704 = "mini.unwrap"(%13703) : (!mini.ptr<i32>) -> i32
        %13705 = "mini.unwrap"(%13695) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %13706 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
        %13707 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
        %13708 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
        %13709 = "mini.parameterizations_array"(%13706, %13707, %13708) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mini.method_call"(%13709, %13705, %13700, %13702, %13704) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "f64_typ", "i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64, i32) -> ()
        %13710 = "mini.to_fat_ptr"(%13695) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Animal", "to_typ_name" = "Animal", "invariant"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
        %13711 = "mini.refer"(%13710) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
        "mini.castassign"(%13688, %13711) ({
          %13712 = builtin.unrealized_conversion_cast %13711 : !mini.fatptr<"Animal"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
        }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Animal", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>, !mini.fatptr<"Animal">) -> ()
      }) : (i1) -> ()
      "mini.castassign"(%13668, %13688) ({
        %13713 = builtin.unrealized_conversion_cast %13688 : !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>, !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>) -> ()
    }) : () -> ()
    %13714 = "mini.checkflag"(%13668) {"typ_name" = "i32_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>) -> i1
    %13715 = "mini.unwrap"(%13714) : (i1) -> i1
    %13716 = builtin.unrealized_conversion_cast %13668 : !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
    "mini.if"(%13715) ({
      %13717 = "mini.narrow"(%13716) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>) -> !mini.ptr<i32>
      %13718 = "mini.unionize"(%13717) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
      %13719 = "mini.unwrap"(%13718) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %13720 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13721 = "mini.parameterizations_array"(%13720) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%13721, %13719) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%13716, %13717) ({
        %13722 = "mini.unionize"(%13717) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
      }) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %13723 = "mini.checkflag"(%13716) {"typ_name" = "Animal", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>) -> i1
    %13724 = "mini.unwrap"(%13723) : (i1) -> i1
    %13725 = builtin.unrealized_conversion_cast %13716 : !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
    "mini.if"(%13724) ({
      %13726 = "mini.to_fat_ptr"(%13725) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Animal", "invariant"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>) -> !mini.fatptr<"Animal">
      %13727 = "mini.unwrap"(%13726) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      "mini.call"(%13727) {"func_name" = "make_em_speak", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      "mini.castassign"(%13725, %13726) ({
        %13728 = builtin.unrealized_conversion_cast %13726 : !mini.fatptr<"Animal"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "Animal", "to_typ_name" = "union_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Animal">]>, !mini.fatptr<"Animal">) -> ()
    }) : (i1) -> ()
    %13729 = "mini.unwrap"(%13514) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13730 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%13730, %13729) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %13731 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13732 = "mini.unwrap"(%13731) : (!mini.ptr<i32>) -> i32
    %13733 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ListNode", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"ListNode">
    %13734 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13735 = builtin.unrealized_conversion_cast %13734 : !mini.ptr<i32> to !mini.ptr<i32>
    %13736 = "mini.unwrap"(%13735) : (!mini.ptr<i32>) -> i32
    %13737 = "mini.unwrap"(%13733) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13738 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13739 = "mini.parameterizations_array"(%13738) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13739, %13737, %13736) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %13740 = "mini.to_fat_ptr"(%13733) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %13741 = "mini.refer"(%13740) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %13742 = "mini.to_fat_ptr"(%13741) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %13743 = "mini.refer"(%13742) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %13744 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13745 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13746 = "mini.unwrap"(%13744) : (!mini.ptr<i32>) -> i32
    %13747 = "mini.unwrap"(%13745) : (!mini.ptr<i32>) -> i32
    %13748 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"Range">
    %13749 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13750 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13751 = builtin.unrealized_conversion_cast %13749 : !mini.ptr<i32> to !mini.ptr<i32>
    %13752 = "mini.unwrap"(%13751) : (!mini.ptr<i32>) -> i32
    %13753 = builtin.unrealized_conversion_cast %13750 : !mini.ptr<i32> to !mini.ptr<i32>
    %13754 = "mini.unwrap"(%13753) : (!mini.ptr<i32>) -> i32
    %13755 = "mini.unwrap"(%13748) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13756 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13757 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13758 = "mini.parameterizations_array"(%13756, %13757) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13758, %13755, %13752, %13754) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %13759 = "mini.unwrap"(%13748) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13760 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13761 = "mini.method_call"(%13760, %13759) {"offset" = 16 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %13762 = "mini.to_fat_ptr"(%13761) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"RangeIterator">
    %13763 = "mini.to_fat_ptr"(%13762) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %13764 = "mini.refer"(%13763) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %13765 = "mini.unwrap"(%13764) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13766 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %13767 = "mini.method_call"(%13766, %13765) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 9 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13768 = builtin.unrealized_conversion_cast %13767 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13769 = "mini.checkflag"(%13768) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %13770 = "mini.unwrap"(%13769) : (i1) -> i1
    }, {
      %13771 = "mini.narrow"(%13768) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %13772 = "mini.unwrap"(%13771) : (!mini.ptr<i32>) -> i32
      %13773 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ListNode", "num_data_fields" = 2 : i32} : () -> !mini.fatptr<"ListNode">
      %13774 = builtin.unrealized_conversion_cast %13771 : !mini.ptr<i32> to !mini.ptr<i32>
      %13775 = "mini.unwrap"(%13774) : (!mini.ptr<i32>) -> i32
      %13776 = "mini.unwrap"(%13773) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13777 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13778 = "mini.parameterizations_array"(%13777) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%13778, %13776, %13775) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %13779 = "mini.to_fat_ptr"(%13773) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      %13780 = "mini.unwrap"(%13779) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13781 = "mini.unwrap"(%13743) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13782 = "mini.parameterization"() {"id_hierarchy" = ["ListNode"], "name_hierarchy" = ["ListNode"]} : () -> !llvm.ptr
      %13783 = "mini.parameterizations_array"(%13782) : (!llvm.ptr) -> !llvm.ptr
      %13784 = "mini.method_call"(%13783, %13781, %13780) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
      %13785 = "mini.to_fat_ptr"(%13784) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      "mini.castassign"(%13743, %13785) ({
        %13786 = "mini.to_fat_ptr"(%13785) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "should_offset"} : (!mini.fatptr<"ListNode">, !mini.fatptr<"ListNode">) -> ()
      "mini.castassign"(%13768, %13771) ({
        %13787 = builtin.unrealized_conversion_cast %13771 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %13788 = "mini.unwrap"(%13741) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13789 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13790 = "mini.method_call"(%13789, %13788) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %13791 = builtin.unrealized_conversion_cast %13790 : !mini.ptr<i32> to !mini.ptr<i32>
    %13792 = "mini.unionize"(%13791) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13793 = "mini.unwrap"(%13792) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13794 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13795 = "mini.parameterizations_array"(%13794) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13795, %13793) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13796 = "mini.unwrap"(%13741) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13797 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13798 = "mini.method_call"(%13797, %13796) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListIterator">
    %13799 = "mini.to_fat_ptr"(%13798) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator", "invariant"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %13800 = "mini.to_fat_ptr"(%13799) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator", "invariant"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %13801 = "mini.refer"(%13800) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    "mini.while"() ({
      %13802 = "mini.unwrap"(%13801) : (!mini.fatptr<"ListIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13803 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %13804 = "mini.method_call"(%13803, %13802) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
      %13805 = builtin.unrealized_conversion_cast %13804 : !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]> to !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
      %13806 = "mini.checkflag"(%13805) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> i1
      %13807 = "mini.unwrap"(%13806) : (i1) -> i1
    }, {
      %13808 = "mini.to_fat_ptr"(%13805) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "ListNode", "invariant"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> !mini.fatptr<"ListNode">
      %13809 = "mini.unwrap"(%13808) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13810 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %13811 = "mini.method_call"(%13810, %13809) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
      %13812 = builtin.unrealized_conversion_cast %13811 : !mini.ptr<i32> to !mini.ptr<i32>
      %13813 = "mini.unionize"(%13812) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
      %13814 = "mini.unwrap"(%13813) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %13815 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13816 = "mini.parameterizations_array"(%13815) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%13816, %13814) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%13805, %13808) ({
        %13817 = "mini.to_fat_ptr"(%13808) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "invariant"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode", "should_offset"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, !mini.fatptr<"ListNode">) -> ()
    }) : () -> ()
    %13818 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    %13819 = "mini.addr_of"() {"global_name" = @print88} : () -> !llvm.ptr
    "llvm.store"(%13819, %13818) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %13820 = "mini.coro_create"(%13818) {"arg_passer" = @coroutine_nkbwsfpjcj_passer, "buffer_filler" = @coroutine_nkbwsfpjcj_buffer_filler} : (!llvm.ptr) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %13821 = builtin.unrealized_conversion_cast %13820 : !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing> to !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %13822 = "mini.refer"(%13821) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %13823 = "mini.coro_call"(%13822) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13824 = "mini.wrap"(%13823) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %13825 = "mini.literal"() {"value" = 89 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13826 = "mini.unionize"(%13825) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13827 = "mini.unwrap"(%13826) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13828 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13829 = "mini.parameterizations_array"(%13828) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13829, %13827) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13830 = "mini.coro_call"(%13822) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13831 = "mini.wrap"(%13830) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %13832 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13833 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13834 = "mini.unwrap"(%13832) : (!mini.ptr<i32>) -> i32
    %13835 = "mini.unwrap"(%13833) : (!mini.ptr<i32>) -> i32
    %13836 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"Range">
    %13837 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13838 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13839 = builtin.unrealized_conversion_cast %13837 : !mini.ptr<i32> to !mini.ptr<i32>
    %13840 = "mini.unwrap"(%13839) : (!mini.ptr<i32>) -> i32
    %13841 = builtin.unrealized_conversion_cast %13838 : !mini.ptr<i32> to !mini.ptr<i32>
    %13842 = "mini.unwrap"(%13841) : (!mini.ptr<i32>) -> i32
    %13843 = "mini.unwrap"(%13836) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13844 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13845 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13846 = "mini.parameterizations_array"(%13844, %13845) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13846, %13843, %13840, %13842) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %13847 = "mini.unwrap"(%13836) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13848 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %13849 = "mini.method_call"(%13848, %13847) {"offset" = 16 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %13850 = "mini.to_fat_ptr"(%13849) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"RangeIterator">
    %13851 = "mini.to_fat_ptr"(%13850) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %13852 = "mini.refer"(%13851) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %13853 = "mini.unwrap"(%13852) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %13854 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %13855 = "mini.method_call"(%13854, %13853) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 9 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13856 = builtin.unrealized_conversion_cast %13855 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %13857 = "mini.checkflag"(%13856) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %13858 = "mini.unwrap"(%13857) : (i1) -> i1
    }, {
      %13859 = "mini.narrow"(%13856) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %13860 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %13861 = "mini.unwrap"(%13859) : (!mini.ptr<i32>) -> i32
      %13862 = "mini.unwrap"(%13860) : (!mini.ptr<i32>) -> i32
      %13863 = "mini.comparison"(%13861, %13862) {"op" = "EQ"} : (i32, i32) -> i1
      %13864 = "mini.wrap"(%13863) : (i1) -> !mini.ptr<i32>
      %13865 = "mini.unwrap"(%13864) : (!mini.ptr<i32>) -> i1
      "mini.if"(%13865) ({
        "mini.break"() [^bb1871] : () -> ()
      }) : (i1) -> ()
      %13866 = "mini.unionize"(%13859) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
      %13867 = "mini.unwrap"(%13866) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %13868 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %13869 = "mini.parameterizations_array"(%13868) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%13869, %13867) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%13856, %13859) ({
        %13870 = builtin.unrealized_conversion_cast %13859 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %13871 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13872 = "mini.create_buffer"(%13871) {"typ" = i32} : (!mini.ptr<i32>) -> !llvm.ptr
    %13873 = builtin.unrealized_conversion_cast %13872 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %13874 = "mini.refer"(%13873) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %13875 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13876 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13877 = "mini.buffer_indexation"(%13874, %13876) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13877, %13875) ({
      %13878 = builtin.unrealized_conversion_cast %13875 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13879 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13880 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13881 = "mini.buffer_indexation"(%13874, %13880) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13881, %13879) ({
      %13882 = builtin.unrealized_conversion_cast %13879 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13883 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13884 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13885 = "mini.buffer_indexation"(%13874, %13884) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13885, %13883) ({
      %13886 = builtin.unrealized_conversion_cast %13883 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13887 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13888 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13889 = "mini.buffer_indexation"(%13874, %13888) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13889, %13887) ({
      %13890 = builtin.unrealized_conversion_cast %13887 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13891 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13892 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13893 = "mini.unwrap"(%13874) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13894 = "mini.unwrap"(%13891) : (!mini.ptr<i32>) -> i32
    %13895 = "mini.unwrap"(%13892) : (!mini.ptr<i32>) -> i32
    %13896 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"IntArray">
    %13897 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13898 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13899 = builtin.unrealized_conversion_cast %13874 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %13900 = "mini.unwrap"(%13899) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13901 = builtin.unrealized_conversion_cast %13897 : !mini.ptr<i32> to !mini.ptr<i32>
    %13902 = "mini.unwrap"(%13901) : (!mini.ptr<i32>) -> i32
    %13903 = builtin.unrealized_conversion_cast %13898 : !mini.ptr<i32> to !mini.ptr<i32>
    %13904 = "mini.unwrap"(%13903) : (!mini.ptr<i32>) -> i32
    %13905 = "mini.unwrap"(%13896) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13906 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %13907 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13908 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13909 = "mini.parameterizations_array"(%13906, %13907, %13908) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13909, %13905, %13900, %13902, %13904) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13910 = "mini.to_fat_ptr"(%13896) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %13911 = "mini.refer"(%13910) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %13912 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13913 = "mini.create_buffer"(%13912) {"typ" = i32} : (!mini.ptr<i32>) -> !llvm.ptr
    %13914 = builtin.unrealized_conversion_cast %13913 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %13915 = "mini.refer"(%13914) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %13916 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13917 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13918 = "mini.buffer_indexation"(%13915, %13917) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13918, %13916) ({
      %13919 = builtin.unrealized_conversion_cast %13916 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13920 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13921 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13922 = "mini.buffer_indexation"(%13915, %13921) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13922, %13920) ({
      %13923 = builtin.unrealized_conversion_cast %13920 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13924 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13925 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13926 = "mini.buffer_indexation"(%13915, %13925) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13926, %13924) ({
      %13927 = builtin.unrealized_conversion_cast %13924 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13928 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13929 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13930 = "mini.buffer_indexation"(%13915, %13929) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13930, %13928) ({
      %13931 = builtin.unrealized_conversion_cast %13928 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13932 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13933 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13934 = "mini.buffer_indexation"(%13915, %13933) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13934, %13932) ({
      %13935 = builtin.unrealized_conversion_cast %13932 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13936 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13937 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13938 = "mini.buffer_indexation"(%13915, %13937) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%13938, %13936) ({
      %13939 = builtin.unrealized_conversion_cast %13936 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %13940 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13941 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13942 = "mini.unwrap"(%13915) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13943 = "mini.unwrap"(%13940) : (!mini.ptr<i32>) -> i32
    %13944 = "mini.unwrap"(%13941) : (!mini.ptr<i32>) -> i32
    %13945 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"IntArray">
    %13946 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13947 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13948 = builtin.unrealized_conversion_cast %13915 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %13949 = "mini.unwrap"(%13948) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13950 = builtin.unrealized_conversion_cast %13946 : !mini.ptr<i32> to !mini.ptr<i32>
    %13951 = "mini.unwrap"(%13950) : (!mini.ptr<i32>) -> i32
    %13952 = builtin.unrealized_conversion_cast %13947 : !mini.ptr<i32> to !mini.ptr<i32>
    %13953 = "mini.unwrap"(%13952) : (!mini.ptr<i32>) -> i32
    %13954 = "mini.unwrap"(%13945) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13955 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %13956 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13957 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13958 = "mini.parameterizations_array"(%13955, %13956, %13957) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%13958, %13954, %13949, %13951, %13953) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %13959 = "mini.to_fat_ptr"(%13945) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %13960 = "mini.unwrap"(%13959) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13961 = "mini.unwrap"(%13911) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13962 = "mini.parameterization"() {"id_hierarchy" = ["IntArray"], "name_hierarchy" = ["IntArray"]} : () -> !llvm.ptr
    %13963 = "mini.parameterizations_array"(%13962) : (!llvm.ptr) -> !llvm.ptr
    %13964 = "mini.method_call"(%13963, %13961, %13960) {"offset" = 10 : i32, "vptrs" = [#none], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %13965 = "mini.to_fat_ptr"(%13964) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %13966 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13967 = builtin.unrealized_conversion_cast %13966 : !mini.ptr<i32> to !mini.ptr<i32>
    %13968 = "mini.unwrap"(%13967) : (!mini.ptr<i32>) -> i32
    %13969 = "mini.unwrap"(%13911) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13970 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13971 = "mini.parameterizations_array"(%13970) : (!llvm.ptr) -> !llvm.ptr
    %13972 = "mini.method_call"(%13971, %13969, %13968) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.ptr<i32>
    %13973 = builtin.unrealized_conversion_cast %13972 : !mini.ptr<i32> to !mini.ptr<i32>
    %13974 = "mini.unionize"(%13973) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %13975 = "mini.unwrap"(%13974) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %13976 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13977 = "mini.parameterizations_array"(%13976) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%13977, %13975) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %13978 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13979 = "mini.create_buffer"(%13978) {"typ" = i32} : (!mini.ptr<i32>) -> !llvm.ptr
    %13980 = builtin.unrealized_conversion_cast %13979 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %13981 = "mini.refer"(%13980) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %13982 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13983 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13984 = "mini.unwrap"(%13981) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13985 = "mini.unwrap"(%13982) : (!mini.ptr<i32>) -> i32
    %13986 = "mini.unwrap"(%13983) : (!mini.ptr<i32>) -> i32
    %13987 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"IntArray">
    %13988 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13989 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %13990 = builtin.unrealized_conversion_cast %13981 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %13991 = "mini.unwrap"(%13990) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %13992 = builtin.unrealized_conversion_cast %13988 : !mini.ptr<i32> to !mini.ptr<i32>
    %13993 = "mini.unwrap"(%13992) : (!mini.ptr<i32>) -> i32
    %13994 = builtin.unrealized_conversion_cast %13989 : !mini.ptr<i32> to !mini.ptr<i32>
    %13995 = "mini.unwrap"(%13994) : (!mini.ptr<i32>) -> i32
    %13996 = "mini.unwrap"(%13987) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %13997 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %13998 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %13999 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14000 = "mini.parameterizations_array"(%13997, %13998, %13999) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14000, %13996, %13991, %13993, %13995) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %14001 = "mini.to_fat_ptr"(%13987) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %14002 = "mini.refer"(%14001) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %14003 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14004 = "mini.create_buffer"(%14003) {"typ" = i32} : (!mini.ptr<i32>) -> !llvm.ptr
    %14005 = builtin.unrealized_conversion_cast %14004 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %14006 = "mini.refer"(%14005) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %14007 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14008 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14009 = "mini.buffer_indexation"(%14006, %14008) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14009, %14007) ({
      %14010 = builtin.unrealized_conversion_cast %14007 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14011 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14012 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14013 = "mini.buffer_indexation"(%14006, %14012) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14013, %14011) ({
      %14014 = builtin.unrealized_conversion_cast %14011 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14015 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14016 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14017 = "mini.buffer_indexation"(%14006, %14016) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14017, %14015) ({
      %14018 = builtin.unrealized_conversion_cast %14015 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14019 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14020 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14021 = "mini.buffer_indexation"(%14006, %14020) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14021, %14019) ({
      %14022 = builtin.unrealized_conversion_cast %14019 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14023 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14024 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14025 = "mini.unwrap"(%14006) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14026 = "mini.unwrap"(%14023) : (!mini.ptr<i32>) -> i32
    %14027 = "mini.unwrap"(%14024) : (!mini.ptr<i32>) -> i32
    %14028 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"IntArray">
    %14029 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14030 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14031 = builtin.unrealized_conversion_cast %14006 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %14032 = "mini.unwrap"(%14031) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14033 = builtin.unrealized_conversion_cast %14029 : !mini.ptr<i32> to !mini.ptr<i32>
    %14034 = "mini.unwrap"(%14033) : (!mini.ptr<i32>) -> i32
    %14035 = builtin.unrealized_conversion_cast %14030 : !mini.ptr<i32> to !mini.ptr<i32>
    %14036 = "mini.unwrap"(%14035) : (!mini.ptr<i32>) -> i32
    %14037 = "mini.unwrap"(%14028) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14038 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %14039 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14040 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14041 = "mini.parameterizations_array"(%14038, %14039, %14040) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14041, %14037, %14032, %14034, %14036) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %14042 = "mini.to_fat_ptr"(%14028) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %14043 = "mini.unwrap"(%14042) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14044 = "mini.unwrap"(%14002) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14045 = "mini.parameterization"() {"id_hierarchy" = ["IntArray"], "name_hierarchy" = ["IntArray"]} : () -> !llvm.ptr
    %14046 = "mini.parameterizations_array"(%14045) : (!llvm.ptr) -> !llvm.ptr
    %14047 = "mini.method_call"(%14046, %14044, %14043) {"offset" = 10 : i32, "vptrs" = [#none], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"IntArray">
    %14048 = "mini.to_fat_ptr"(%14047) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArray", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntArray">) -> !mini.fatptr<"IntArray">
    %14049 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14050 = builtin.unrealized_conversion_cast %14049 : !mini.ptr<i32> to !mini.ptr<i32>
    %14051 = "mini.unwrap"(%14050) : (!mini.ptr<i32>) -> i32
    %14052 = "mini.unwrap"(%14002) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14053 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14054 = "mini.parameterizations_array"(%14053) : (!llvm.ptr) -> !llvm.ptr
    %14055 = "mini.method_call"(%14054, %14052, %14051) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.ptr<i32>
    %14056 = builtin.unrealized_conversion_cast %14055 : !mini.ptr<i32> to !mini.ptr<i32>
    %14057 = "mini.unionize"(%14056) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14058 = "mini.unwrap"(%14057) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14059 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14060 = "mini.parameterizations_array"(%14059) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14060, %14058) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.call"() {"func_name" = "grabo", "ret_type" = !llvm.void} : () -> ()
    %14061 = "mini.checkflag"(%13911) {"typ_name" = "IntArray", "struct_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArray">) -> i1
    %14062 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14063 = builtin.unrealized_conversion_cast %14062 : !mini.ptr<i32> to !mini.ptr<i32>
    %14064 = "mini.unwrap"(%14063) : (!mini.ptr<i32>) -> i32
    %14065 = "mini.unwrap"(%13911) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14066 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14067 = "mini.parameterizations_array"(%14066) : (!llvm.ptr) -> !llvm.ptr
    %14068 = "mini.method_call"(%14067, %14065, %14064) {"offset" = 11 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.ptr<i32>
    %14069 = builtin.unrealized_conversion_cast %14068 : !mini.ptr<i32> to !mini.ptr<i32>
    %14070 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14071 = "mini.unwrap"(%14069) : (!mini.ptr<i32>) -> i32
    %14072 = "mini.unwrap"(%14070) : (!mini.ptr<i32>) -> i32
    %14073 = "mini.comparison"(%14071, %14072) {"op" = "EQ"} : (i32, i32) -> i1
    %14074 = "mini.wrap"(%14073) : (i1) -> !mini.ptr<i32>
    %14075 = "mini.unwrap"(%14061) : (i1) -> i1
    %14076 = "mini.unwrap"(%14074) : (!mini.ptr<i32>) -> i1
    %14077 = "mini.logical"(%14075, %14076) {"op" = "and"} : (i1, i1) -> i1
    %14078 = "mini.wrap"(%14077) : (i1) -> !mini.ptr<i1>
    %14079 = "mini.unwrap"(%14078) : (!mini.ptr<i1>) -> i1
    "mini.if"(%14079) ({
      %14080 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %14081 = "mini.create_buffer"(%14080) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
      %14082 = builtin.unrealized_conversion_cast %14081 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
      %14083 = "mini.refer"(%14082) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %14084 = "mini.literal"() {"typ" = !llvm.array<14 x i8>, "value" = "so it is true!"} : () -> !llvm.ptr
      %14085 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      %14086 = "mini.buffer_indexation"(%14083, %14085) {"typ" = !llvm.array<14 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
      "mini.assign"(%14086, %14084) {"typ" = !llvm.array<14 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
      %14087 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %14088 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %14089 = "mini.unwrap"(%14083) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %14090 = "mini.unwrap"(%14087) : (!mini.ptr<i32>) -> i32
      %14091 = "mini.unwrap"(%14088) : (!mini.ptr<i32>) -> i32
      %14092 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
      %14093 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %14094 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %14095 = builtin.unrealized_conversion_cast %14083 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
      %14096 = "mini.unwrap"(%14095) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %14097 = builtin.unrealized_conversion_cast %14093 : !mini.ptr<i32> to !mini.ptr<i32>
      %14098 = "mini.unwrap"(%14097) : (!mini.ptr<i32>) -> i32
      %14099 = builtin.unrealized_conversion_cast %14094 : !mini.ptr<i32> to !mini.ptr<i32>
      %14100 = "mini.unwrap"(%14099) : (!mini.ptr<i32>) -> i32
      %14101 = "mini.unwrap"(%14092) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %14102 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
      %14103 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %14104 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %14105 = "mini.parameterizations_array"(%14102, %14103, %14104) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%14105, %14101, %14096, %14098, %14100) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %14106 = builtin.unrealized_conversion_cast %14092 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
      %14107 = "mini.unwrap"(%14106) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %14108 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %14109 = "mini.parameterizations_array"(%14108) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%14109, %14107) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) : (i1) -> ()
    %14110 = "mini.literal"() {"value" = 5 : i64, "typ" = i64} : () -> !mini.ptr<i64>
    %14111 = builtin.unrealized_conversion_cast %14110 : !mini.ptr<i64> to !mini.ptr<i64>
    %14112 = "mini.unionize"(%14111) {"from_typ" = i64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i64>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14113 = "mini.unwrap"(%14112) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14114 = "mini.parameterization"() {"id_hierarchy" = ["i64_typ"], "name_hierarchy" = ["Ptri64"]} : () -> !llvm.ptr
    %14115 = "mini.parameterizations_array"(%14114) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14115, %14113) {"offset" = 0 : i32, "vptrs" = ["i64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14116 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14117 = "mini.int_to_float"(%14116) {"from_typ" = i32, "to_typ" = f64, "from_typ_name" = "i32_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<i32>) -> !mini.ptr<f64>
    %14118 = "mini.unionize"(%14117) {"from_typ" = f64, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14119 = "mini.unwrap"(%14118) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14120 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["Ptrf64"]} : () -> !llvm.ptr
    %14121 = "mini.parameterizations_array"(%14120) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14121, %14119) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14122 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14123 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14124 = "mini.unwrap"(%14122) : (!mini.ptr<i32>) -> i32
    %14125 = "mini.unwrap"(%14123) : (!mini.ptr<i32>) -> i32
    %14126 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"Range">
    %14127 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14128 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14129 = builtin.unrealized_conversion_cast %14127 : !mini.ptr<i32> to !mini.ptr<i32>
    %14130 = "mini.unwrap"(%14129) : (!mini.ptr<i32>) -> i32
    %14131 = builtin.unrealized_conversion_cast %14128 : !mini.ptr<i32> to !mini.ptr<i32>
    %14132 = "mini.unwrap"(%14131) : (!mini.ptr<i32>) -> i32
    %14133 = "mini.unwrap"(%14126) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14134 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14135 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14136 = "mini.parameterizations_array"(%14134, %14135) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14136, %14133, %14130, %14132) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %14137 = "mini.unwrap"(%14126) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14138 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %14139 = "mini.method_call"(%14138, %14137) {"offset" = 16 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %14140 = "mini.to_fat_ptr"(%14139) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"RangeIterator">
    %14141 = "mini.to_fat_ptr"(%14140) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %14142 = "mini.refer"(%14141) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %14143 = "mini.unwrap"(%14142) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %14144 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %14145 = "mini.method_call"(%14144, %14143) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 9 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %14146 = builtin.unrealized_conversion_cast %14145 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %14147 = "mini.checkflag"(%14146) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %14148 = "mini.unwrap"(%14147) : (i1) -> i1
    }, {
      %14149 = "mini.narrow"(%14146) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %14150 = "mini.unionize"(%14149) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
      %14151 = "mini.unwrap"(%14150) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %14152 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %14153 = "mini.parameterizations_array"(%14152) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%14153, %14151) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%14146, %14149) ({
        %14154 = builtin.unrealized_conversion_cast %14149 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %14155 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14156 = "mini.create_buffer"(%14155) {"typ" = i32} : (!mini.ptr<i32>) -> !llvm.ptr
    %14157 = builtin.unrealized_conversion_cast %14156 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %14158 = "mini.refer"(%14157) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %14159 = "mini.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14160 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14161 = "mini.buffer_indexation"(%14158, %14160) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14161, %14159) ({
      %14162 = builtin.unrealized_conversion_cast %14159 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14163 = "mini.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14164 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14165 = "mini.buffer_indexation"(%14158, %14164) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14165, %14163) ({
      %14166 = builtin.unrealized_conversion_cast %14163 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14167 = "mini.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14168 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14169 = "mini.buffer_indexation"(%14158, %14168) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14169, %14167) ({
      %14170 = builtin.unrealized_conversion_cast %14167 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14171 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14172 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14173 = "mini.unwrap"(%14158) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14174 = "mini.unwrap"(%14171) : (!mini.ptr<i32>) -> i32
    %14175 = "mini.unwrap"(%14172) : (!mini.ptr<i32>) -> i32
    %14176 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"IntArray">
    %14177 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14178 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14179 = builtin.unrealized_conversion_cast %14158 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %14180 = "mini.unwrap"(%14179) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14181 = builtin.unrealized_conversion_cast %14177 : !mini.ptr<i32> to !mini.ptr<i32>
    %14182 = "mini.unwrap"(%14181) : (!mini.ptr<i32>) -> i32
    %14183 = builtin.unrealized_conversion_cast %14178 : !mini.ptr<i32> to !mini.ptr<i32>
    %14184 = "mini.unwrap"(%14183) : (!mini.ptr<i32>) -> i32
    %14185 = "mini.unwrap"(%14176) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14186 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %14187 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14188 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14189 = "mini.parameterizations_array"(%14186, %14187, %14188) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14189, %14185, %14180, %14182, %14184) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %14190 = "mini.unwrap"(%14176) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14191 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %14192 = "mini.method_call"(%14191, %14190) {"offset" = 24 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %14193 = "mini.to_fat_ptr"(%14192) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "IntArrayIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"IntArrayIterator">
    %14194 = "mini.to_fat_ptr"(%14193) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntArrayIterator", "to_typ_name" = "IntArrayIterator", "invariant"} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArrayIterator">
    %14195 = "mini.refer"(%14194) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"IntArrayIterator">) -> !mini.fatptr<"IntArrayIterator">
    "mini.while"() ({
      %14196 = "mini.unwrap"(%14195) : (!mini.fatptr<"IntArrayIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %14197 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %14198 = "mini.method_call"(%14197, %14196) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %14199 = builtin.unrealized_conversion_cast %14198 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %14200 = "mini.checkflag"(%14199) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %14201 = "mini.unwrap"(%14200) : (i1) -> i1
    }, {
      %14202 = "mini.narrow"(%14199) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %14203 = "mini.unionize"(%14202) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
      %14204 = "mini.unwrap"(%14203) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %14205 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %14206 = "mini.parameterizations_array"(%14205) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%14206, %14204) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%14199, %14202) ({
        %14207 = builtin.unrealized_conversion_cast %14202 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %14208 = "mini.literal"() {"value" = 3 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %14209 = builtin.unrealized_conversion_cast %14208 : !mini.ptr<i8> to !mini.ptr<i8>
    %14210 = "mini.unionize"(%14209) {"from_typ" = i8, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i8>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14211 = "mini.unwrap"(%14210) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14212 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["Ptri8"]} : () -> !llvm.ptr
    %14213 = "mini.parameterizations_array"(%14212) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14213, %14211) {"offset" = 0 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14214 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14215 = "mini.create_buffer"(%14214) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %14216 = builtin.unrealized_conversion_cast %14215 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %14217 = "mini.refer"(%14216) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %14218 = "mini.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "boom!"} : () -> !llvm.ptr
    %14219 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %14220 = "mini.buffer_indexation"(%14217, %14219) {"typ" = !llvm.array<5 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%14220, %14218) {"typ" = !llvm.array<5 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %14221 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14222 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14223 = "mini.unwrap"(%14217) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %14224 = "mini.unwrap"(%14221) : (!mini.ptr<i32>) -> i32
    %14225 = "mini.unwrap"(%14222) : (!mini.ptr<i32>) -> i32
    %14226 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %14227 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14228 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14229 = builtin.unrealized_conversion_cast %14217 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %14230 = "mini.unwrap"(%14229) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %14231 = builtin.unrealized_conversion_cast %14227 : !mini.ptr<i32> to !mini.ptr<i32>
    %14232 = "mini.unwrap"(%14231) : (!mini.ptr<i32>) -> i32
    %14233 = builtin.unrealized_conversion_cast %14228 : !mini.ptr<i32> to !mini.ptr<i32>
    %14234 = "mini.unwrap"(%14233) : (!mini.ptr<i32>) -> i32
    %14235 = "mini.unwrap"(%14226) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14236 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %14237 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14238 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14239 = "mini.parameterizations_array"(%14236, %14237, %14238) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14239, %14235, %14230, %14232, %14234) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %14240 = "mini.unwrap"(%14226) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14241 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %14242 = "mini.method_call"(%14241, %14240) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 35 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %14243 = "mini.to_fat_ptr"(%14242) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "StringIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"StringIterator">
    %14244 = "mini.to_fat_ptr"(%14243) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator", "invariant"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    %14245 = "mini.refer"(%14244) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    "mini.while"() ({
      %14246 = "mini.unwrap"(%14245) : (!mini.fatptr<"StringIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %14247 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %14248 = "mini.method_call"(%14247, %14246) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.fatptr<"Character">, !mini.nil]>
      %14249 = builtin.unrealized_conversion_cast %14248 : !mini.union<[!mini.fatptr<"Character">, !mini.nil]> to !mini.union<[!mini.fatptr<"Character">, !mini.nil]>
      %14250 = "mini.checkflag"(%14249) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i160)>, "neg"} : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>) -> i1
      %14251 = "mini.unwrap"(%14250) : (i1) -> i1
    }, {
      %14252 = "mini.to_fat_ptr"(%14249) {"from_typ" = !llvm.struct<(!llvm.ptr, i160)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "union_typ", "to_typ_name" = "Character", "invariant"} : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>) -> !mini.fatptr<"Character">
      %14253 = builtin.unrealized_conversion_cast %14252 : !mini.fatptr<"Character"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
      %14254 = "mini.unwrap"(%14253) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %14255 = "mini.parameterization"() {"id_hierarchy" = ["Character"], "name_hierarchy" = ["Character"]} : () -> !llvm.ptr
      %14256 = "mini.parameterizations_array"(%14255) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%14256, %14254) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%14249, %14252) ({
        %14257 = "mini.to_fat_ptr"(%14252) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Character", "to_typ_name" = "Character", "invariant"} : (!mini.fatptr<"Character">) -> !mini.fatptr<"Character">
      }) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Character", "to_typ_name" = "Character", "should_offset"} : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>, !mini.fatptr<"Character">) -> ()
    }) : () -> ()
    %14258 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14259 = "mini.create_buffer"(%14258) {"typ" = i32} : (!mini.ptr<i32>) -> !llvm.ptr
    %14260 = builtin.unrealized_conversion_cast %14259 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %14261 = "mini.refer"(%14260) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %14262 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14263 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14264 = "mini.buffer_indexation"(%14261, %14263) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14264, %14262) ({
      %14265 = builtin.unrealized_conversion_cast %14262 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14266 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14267 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14268 = "mini.buffer_indexation"(%14261, %14267) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14268, %14266) ({
      %14269 = builtin.unrealized_conversion_cast %14266 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14270 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14271 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14272 = "mini.buffer_indexation"(%14261, %14271) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14272, %14270) ({
      %14273 = builtin.unrealized_conversion_cast %14270 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14274 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14275 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14276 = "mini.unwrap"(%14261) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14277 = "mini.unwrap"(%14274) : (!mini.ptr<i32>) -> i32
    %14278 = "mini.unwrap"(%14275) : (!mini.ptr<i32>) -> i32
    %14279 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"IntArray">
    %14280 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14281 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14282 = builtin.unrealized_conversion_cast %14261 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %14283 = "mini.unwrap"(%14282) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14284 = builtin.unrealized_conversion_cast %14280 : !mini.ptr<i32> to !mini.ptr<i32>
    %14285 = "mini.unwrap"(%14284) : (!mini.ptr<i32>) -> i32
    %14286 = builtin.unrealized_conversion_cast %14281 : !mini.ptr<i32> to !mini.ptr<i32>
    %14287 = "mini.unwrap"(%14286) : (!mini.ptr<i32>) -> i32
    %14288 = "mini.unwrap"(%14279) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14289 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %14290 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14291 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14292 = "mini.parameterizations_array"(%14289, %14290, %14291) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14292, %14288, %14283, %14285, %14287) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %14293 = "mini.unwrap"(%14279) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14294 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %14295 = "mini.method_call"(%14294, %14293) {"offset" = 25 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %14296 = "mini.to_fat_ptr"(%14295) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "String", "to_typ_name" = "String", "invariant"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %14297 = builtin.unrealized_conversion_cast %14296 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14298 = "mini.unwrap"(%14297) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14299 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %14300 = "mini.parameterizations_array"(%14299) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14300, %14298) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14301 = "mini.literal"() {"value" = 77 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14302 = "mini.unwrap"(%14301) : (!mini.ptr<i32>) -> i32
    %14303 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer2", "num_data_fields" = 1 : i32} : () -> !mini.fatptr<"Integer2">
    %14304 = "mini.literal"() {"value" = 77 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14305 = builtin.unrealized_conversion_cast %14304 : !mini.ptr<i32> to !mini.ptr<i32>
    %14306 = "mini.unwrap"(%14305) : (!mini.ptr<i32>) -> i32
    %14307 = "mini.unwrap"(%14303) : (!mini.fatptr<"Integer2">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14308 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14309 = "mini.parameterizations_array"(%14308) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14309, %14307, %14306) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 40 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %14310 = "mini.to_fat_ptr"(%14303) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Integer2", "to_typ_name" = "Integer2", "invariant"} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %14311 = "mini.refer"(%14310) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %14312 = "mini.unwrap"(%14311) : (!mini.fatptr<"Integer2">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14313 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%14313, %14312) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 40 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %14314 = builtin.unrealized_conversion_cast %14311 : !mini.fatptr<"Integer2"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14315 = "mini.unwrap"(%14314) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14316 = "mini.parameterization"() {"id_hierarchy" = ["Integer2"], "name_hierarchy" = ["Integer2"]} : () -> !llvm.ptr
    %14317 = "mini.parameterizations_array"(%14316) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14317, %14315) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14318 = "mini.unwrap"(%14311) : (!mini.fatptr<"Integer2">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14319 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%14319, %14318) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 40 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %14320 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14321 = builtin.unrealized_conversion_cast %14320 : !mini.ptr<i32> to !mini.ptr<i32>
    %14322 = "mini.unwrap"(%14321) : (!mini.ptr<i32>) -> i32
    %14323 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14324 = "mini.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14325 = "mini.unwrap"(%14323) : (!mini.ptr<i32>) -> i32
    %14326 = "mini.unwrap"(%14324) : (!mini.ptr<i32>) -> i32
    %14327 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"Range">
    %14328 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14329 = "mini.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14330 = builtin.unrealized_conversion_cast %14328 : !mini.ptr<i32> to !mini.ptr<i32>
    %14331 = "mini.unwrap"(%14330) : (!mini.ptr<i32>) -> i32
    %14332 = builtin.unrealized_conversion_cast %14329 : !mini.ptr<i32> to !mini.ptr<i32>
    %14333 = "mini.unwrap"(%14332) : (!mini.ptr<i32>) -> i32
    %14334 = "mini.unwrap"(%14327) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14335 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14336 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14337 = "mini.parameterizations_array"(%14335, %14336) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14337, %14334, %14331, %14333) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %14338 = "mini.unwrap"(%14327) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14339 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14340 = "mini.parameterizations_array"(%14339) : (!llvm.ptr) -> !llvm.ptr
    %14341 = "mini.method_call"(%14340, %14338, %14322) {"offset" = 5 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.fatptr<"Range">
    %14342 = "mini.to_fat_ptr"(%14341) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Range", "to_typ_name" = "Range", "invariant"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %14343 = "mini.unwrap"(%14342) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14344 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %14345 = "mini.method_call"(%14344, %14343) {"offset" = 16 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator">
    %14346 = "mini.to_fat_ptr"(%14345) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"Iterator">) -> !mini.fatptr<"RangeIterator">
    %14347 = "mini.to_fat_ptr"(%14346) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator", "invariant"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %14348 = "mini.refer"(%14347) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %14349 = "mini.unwrap"(%14348) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %14350 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %14351 = "mini.method_call"(%14350, %14349) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 9 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %14352 = builtin.unrealized_conversion_cast %14351 : !mini.union<[!mini.ptr<i32>, !mini.nil]> to !mini.union<[!mini.ptr<i32>, !mini.nil]>
      %14353 = "mini.checkflag"(%14352) {"typ_name" = "nil_typ", "struct_typ" = !llvm.struct<(!llvm.ptr, i32)>, "neg"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> i1
      %14354 = "mini.unwrap"(%14353) : (i1) -> i1
    }, {
      %14355 = "mini.narrow"(%14352) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = i32, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.ptr<i32>
      %14356 = "mini.unionize"(%14355) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
      %14357 = "mini.unwrap"(%14356) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %14358 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
      %14359 = "mini.parameterizations_array"(%14358) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%14359, %14357) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      "mini.castassign"(%14352, %14355) ({
        %14360 = builtin.unrealized_conversion_cast %14355 : !mini.ptr<i32> to !mini.ptr<i32>
      }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %14361 = "mini.addr_of"() {"global_name" = @_functionliteral_yaamkgeagm} : () -> !llvm.ptr
    %14362 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%14361, %14362) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %14363 = "mini.addr_of"() {"global_name" = @_functionliteral_eglqhwygml} : () -> !llvm.ptr
    %14364 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%14363, %14364) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %14365 = "mini.addr_of"() {"global_name" = @_functionliteral_knrbnzgawf} : () -> !llvm.ptr
    %14366 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%14365, %14366) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %14367 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14368 = builtin.unrealized_conversion_cast %14367 : !mini.ptr<i32> to !mini.ptr<i32>
    %14369 = "mini.unwrap"(%14368) : (!mini.ptr<i32>) -> i32
    %14370 = builtin.unrealized_conversion_cast %14362 : !llvm.ptr to !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %14371 = "mini.unwrap"(%14370) : (!mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14372 = builtin.unrealized_conversion_cast %14364 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %14373 = "mini.unwrap"(%14372) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14374 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14375 = "mini.create_buffer"(%14374) {"typ" = i32} : (!mini.ptr<i32>) -> !llvm.ptr
    %14376 = builtin.unrealized_conversion_cast %14375 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %14377 = "mini.refer"(%14376) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %14378 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14379 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14380 = "mini.buffer_indexation"(%14377, %14379) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14380, %14378) ({
      %14381 = builtin.unrealized_conversion_cast %14378 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14382 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14383 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14384 = "mini.buffer_indexation"(%14377, %14383) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14384, %14382) ({
      %14385 = builtin.unrealized_conversion_cast %14382 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14386 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14387 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14388 = "mini.buffer_indexation"(%14377, %14387) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14388, %14386) ({
      %14389 = builtin.unrealized_conversion_cast %14386 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14390 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14391 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14392 = "mini.buffer_indexation"(%14377, %14391) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14392, %14390) ({
      %14393 = builtin.unrealized_conversion_cast %14390 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14394 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14395 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14396 = "mini.unwrap"(%14377) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14397 = "mini.unwrap"(%14394) : (!mini.ptr<i32>) -> i32
    %14398 = "mini.unwrap"(%14395) : (!mini.ptr<i32>) -> i32
    %14399 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"IntArray">
    %14400 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14401 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14402 = builtin.unrealized_conversion_cast %14377 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %14403 = "mini.unwrap"(%14402) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14404 = builtin.unrealized_conversion_cast %14400 : !mini.ptr<i32> to !mini.ptr<i32>
    %14405 = "mini.unwrap"(%14404) : (!mini.ptr<i32>) -> i32
    %14406 = builtin.unrealized_conversion_cast %14401 : !mini.ptr<i32> to !mini.ptr<i32>
    %14407 = "mini.unwrap"(%14406) : (!mini.ptr<i32>) -> i32
    %14408 = "mini.unwrap"(%14399) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14409 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %14410 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14411 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14412 = "mini.parameterizations_array"(%14409, %14410, %14411) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14412, %14408, %14403, %14405, %14407) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %14413 = "mini.unwrap"(%14399) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14414 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri32", ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %14415 = "mini.parameterizations_array"(%14414) : (!llvm.ptr) -> !llvm.ptr
    %14416 = "mini.method_call"(%14415, %14413, %14373) {"offset" = 18 : i32, "vptrs" = ["function_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !mini.fatptr<"IntIterable">
    %14417 = "mini.to_fat_ptr"(%14416) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntArray", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntArray">
    %14418 = "mini.unwrap"(%14417) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14419 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14420 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32._Ptri32_to_Ptri32", ["Ptri32"], ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %14421 = "mini.parameterizations_array"(%14419, %14420) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %14422 = "mini.method_call"(%14421, %14418, %14369, %14371) {"offset" = 15 : i32, "vptrs" = ["i32_typ", "function_typ"], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %14423 = builtin.unrealized_conversion_cast %14422 : !mini.ptr<i32> to !mini.ptr<i32>
    %14424 = "mini.unionize"(%14423) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14425 = "mini.unwrap"(%14424) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14426 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14427 = "mini.parameterizations_array"(%14426) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14427, %14425) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14428 = "mini.addr_of"() {"global_name" = @_functionliteral_vkkrqfxprm} : () -> !llvm.ptr
    %14429 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%14428, %14429) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %14430 = builtin.unrealized_conversion_cast %14429 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>
    %14431 = "mini.unwrap"(%14430) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>) -> !llvm.struct<(!llvm.ptr)>
    %14432 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14433 = "mini.create_buffer"(%14432) {"typ" = i32} : (!mini.ptr<i32>) -> !llvm.ptr
    %14434 = builtin.unrealized_conversion_cast %14433 : !llvm.ptr to !mini.buffer<!mini.ptr<i32>>
    %14435 = "mini.refer"(%14434) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %14436 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14437 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14438 = "mini.buffer_indexation"(%14435, %14437) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14438, %14436) ({
      %14439 = builtin.unrealized_conversion_cast %14436 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14440 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14441 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14442 = "mini.buffer_indexation"(%14435, %14441) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14442, %14440) ({
      %14443 = builtin.unrealized_conversion_cast %14440 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14444 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14445 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14446 = "mini.buffer_indexation"(%14435, %14445) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14446, %14444) ({
      %14447 = builtin.unrealized_conversion_cast %14444 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14448 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14449 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14450 = "mini.buffer_indexation"(%14435, %14449) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.castassign"(%14450, %14448) ({
      %14451 = builtin.unrealized_conversion_cast %14448 : !mini.ptr<i32> to !mini.ptr<i32>
    }) {"from_typ" = i32, "to_typ" = i32, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ", "should_offset"} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %14452 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14453 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14454 = "mini.unwrap"(%14435) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14455 = "mini.unwrap"(%14452) : (!mini.ptr<i32>) -> i32
    %14456 = "mini.unwrap"(%14453) : (!mini.ptr<i32>) -> i32
    %14457 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "IntArray", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"IntArray">
    %14458 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14459 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14460 = builtin.unrealized_conversion_cast %14435 : !mini.buffer<!mini.ptr<i32>> to !mini.buffer<!mini.ptr<i32>>
    %14461 = "mini.unwrap"(%14460) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14462 = builtin.unrealized_conversion_cast %14458 : !mini.ptr<i32> to !mini.ptr<i32>
    %14463 = "mini.unwrap"(%14462) : (!mini.ptr<i32>) -> i32
    %14464 = builtin.unrealized_conversion_cast %14459 : !mini.ptr<i32> to !mini.ptr<i32>
    %14465 = "mini.unwrap"(%14464) : (!mini.ptr<i32>) -> i32
    %14466 = "mini.unwrap"(%14457) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14467 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri32"]} : () -> !llvm.ptr
    %14468 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14469 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14470 = "mini.parameterizations_array"(%14467, %14468, %14469) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14470, %14466, %14461, %14463, %14465) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %14471 = "mini.unwrap"(%14457) : (!mini.fatptr<"IntArray">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14472 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["nothing_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Nothing", ["Nothing"], ["Ptri32"]]} : () -> !llvm.ptr
    %14473 = "mini.parameterizations_array"(%14472) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14473, %14471, %14431) {"offset" = 14 : i32, "vptrs" = ["function_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %14474 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14475 = "mini.create_buffer"(%14474) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %14476 = builtin.unrealized_conversion_cast %14475 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %14477 = "mini.refer"(%14476) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %14478 = "mini.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "bigtings.txt"} : () -> !llvm.ptr
    %14479 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %14480 = "mini.buffer_indexation"(%14477, %14479) {"typ" = !llvm.array<12 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%14480, %14478) {"typ" = !llvm.array<12 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %14481 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14482 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14483 = "mini.unwrap"(%14477) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %14484 = "mini.unwrap"(%14481) : (!mini.ptr<i32>) -> i32
    %14485 = "mini.unwrap"(%14482) : (!mini.ptr<i32>) -> i32
    %14486 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %14487 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14488 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14489 = builtin.unrealized_conversion_cast %14477 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %14490 = "mini.unwrap"(%14489) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %14491 = builtin.unrealized_conversion_cast %14487 : !mini.ptr<i32> to !mini.ptr<i32>
    %14492 = "mini.unwrap"(%14491) : (!mini.ptr<i32>) -> i32
    %14493 = builtin.unrealized_conversion_cast %14488 : !mini.ptr<i32> to !mini.ptr<i32>
    %14494 = "mini.unwrap"(%14493) : (!mini.ptr<i32>) -> i32
    %14495 = "mini.unwrap"(%14486) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14496 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %14497 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14498 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14499 = "mini.parameterizations_array"(%14496, %14497, %14498) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14499, %14495, %14490, %14492, %14494) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %14500 = "mini.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14501 = "mini.create_buffer"(%14500) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %14502 = builtin.unrealized_conversion_cast %14501 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %14503 = "mini.refer"(%14502) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %14504 = "mini.literal"() {"typ" = !llvm.array<20 x i8>, "value" = "this\nis how\nwe do\nit"} : () -> !llvm.ptr
    %14505 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %14506 = "mini.buffer_indexation"(%14503, %14505) {"typ" = !llvm.array<20 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%14506, %14504) {"typ" = !llvm.array<20 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %14507 = "mini.literal"() {"value" = 20 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14508 = "mini.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14509 = "mini.unwrap"(%14503) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %14510 = "mini.unwrap"(%14507) : (!mini.ptr<i32>) -> i32
    %14511 = "mini.unwrap"(%14508) : (!mini.ptr<i32>) -> i32
    %14512 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %14513 = "mini.literal"() {"value" = 20 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14514 = "mini.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14515 = builtin.unrealized_conversion_cast %14503 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %14516 = "mini.unwrap"(%14515) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %14517 = builtin.unrealized_conversion_cast %14513 : !mini.ptr<i32> to !mini.ptr<i32>
    %14518 = "mini.unwrap"(%14517) : (!mini.ptr<i32>) -> i32
    %14519 = builtin.unrealized_conversion_cast %14514 : !mini.ptr<i32> to !mini.ptr<i32>
    %14520 = "mini.unwrap"(%14519) : (!mini.ptr<i32>) -> i32
    %14521 = "mini.unwrap"(%14512) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14522 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %14523 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14524 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14525 = "mini.parameterizations_array"(%14522, %14523, %14524) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14525, %14521, %14516, %14518, %14520) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %14526 = "mini.unwrap"(%14486) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14527 = "mini.unwrap"(%14512) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    "mini.call"(%14526, %14527) {"func_name" = "write_file", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %14528 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14529 = "mini.create_buffer"(%14528) {"typ" = i8} : (!mini.ptr<i32>) -> !llvm.ptr
    %14530 = builtin.unrealized_conversion_cast %14529 : !llvm.ptr to !mini.buffer<!mini.ptr<i8>>
    %14531 = "mini.refer"(%14530) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %14532 = "mini.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "bigtings.txt"} : () -> !llvm.ptr
    %14533 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    %14534 = "mini.buffer_indexation"(%14531, %14533) {"typ" = !llvm.array<12 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr) -> !llvm.ptr
    "mini.assign"(%14534, %14532) {"typ" = !llvm.array<12 x i8>} : (!llvm.ptr, !llvm.ptr) -> ()
    %14535 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14536 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14537 = "mini.unwrap"(%14531) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %14538 = "mini.unwrap"(%14535) : (!mini.ptr<i32>) -> i32
    %14539 = "mini.unwrap"(%14536) : (!mini.ptr<i32>) -> i32
    %14540 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"String">
    %14541 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14542 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14543 = builtin.unrealized_conversion_cast %14531 : !mini.buffer<!mini.ptr<i8>> to !mini.buffer<!mini.ptr<i8>>
    %14544 = "mini.unwrap"(%14543) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %14545 = builtin.unrealized_conversion_cast %14541 : !mini.ptr<i32> to !mini.ptr<i32>
    %14546 = "mini.unwrap"(%14545) : (!mini.ptr<i32>) -> i32
    %14547 = builtin.unrealized_conversion_cast %14542 : !mini.ptr<i32> to !mini.ptr<i32>
    %14548 = "mini.unwrap"(%14547) : (!mini.ptr<i32>) -> i32
    %14549 = "mini.unwrap"(%14540) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14550 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["BufferPtri8"]} : () -> !llvm.ptr
    %14551 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14552 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14553 = "mini.parameterizations_array"(%14550, %14551, %14552) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14553, %14549, %14544, %14546, %14548) {"offset" = 4 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 35 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %14554 = "mini.unwrap"(%14540) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14555 = "mini.call"(%14554) {"func_name" = "read_file", "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %14556 = builtin.unrealized_conversion_cast %14555 : !mini.fatptr<"String"> to !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14557 = "mini.unwrap"(%14556) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14558 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %14559 = "mini.parameterizations_array"(%14558) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14559, %14557) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14560 = "mini.addr_of"() {"global_name" = @_functionliteral_wxaxuadnzs} : () -> !llvm.ptr
    %14561 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%14560, %14561) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %14562 = builtin.unrealized_conversion_cast %14561 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>
    %14563 = "mini.unwrap"(%14562) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.nothing>) -> !llvm.struct<(!llvm.ptr)>
    %14564 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14565 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14566 = "mini.unwrap"(%14564) : (!mini.ptr<i32>) -> i32
    %14567 = "mini.unwrap"(%14565) : (!mini.ptr<i32>) -> i32
    %14568 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"Range">
    %14569 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14570 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14571 = builtin.unrealized_conversion_cast %14569 : !mini.ptr<i32> to !mini.ptr<i32>
    %14572 = "mini.unwrap"(%14571) : (!mini.ptr<i32>) -> i32
    %14573 = builtin.unrealized_conversion_cast %14570 : !mini.ptr<i32> to !mini.ptr<i32>
    %14574 = "mini.unwrap"(%14573) : (!mini.ptr<i32>) -> i32
    %14575 = "mini.unwrap"(%14568) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14576 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14577 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14578 = "mini.parameterizations_array"(%14576, %14577) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14578, %14575, %14572, %14574) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %14579 = "mini.unwrap"(%14568) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14580 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["nothing_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Nothing", ["Nothing"], ["Ptri32"]]} : () -> !llvm.ptr
    %14581 = "mini.parameterizations_array"(%14580) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14581, %14579, %14563) {"offset" = 6 : i32, "vptrs" = ["function_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %14582 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    %14583 = "mini.addr_of"() {"global_name" = @i32toi8} : () -> !llvm.ptr
    "llvm.store"(%14583, %14582) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %14584 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14585 = builtin.unrealized_conversion_cast %14584 : !mini.ptr<i32> to !mini.ptr<i32>
    %14586 = "mini.unwrap"(%14585) : (!mini.ptr<i32>) -> i32
    %14587 = "mini.unwrap"(%14582) : (!llvm.ptr) -> !llvm.ptr
    %14588 = "mini.fptr_call"(%14587, %14586) {"ret_type" = i8} : (!llvm.ptr, i32) -> !mini.ptr<i8>
    %14589 = "mini.unionize"(%14588) {"from_typ" = i8, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i8>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14590 = "mini.unwrap"(%14589) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14591 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["Ptri8"]} : () -> !llvm.ptr
    %14592 = "mini.parameterizations_array"(%14591) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14592, %14590) {"offset" = 0 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14593 = "mini.addr_of"() {"global_name" = @_functionliteral_xqeabnjiyr} : () -> !llvm.ptr
    %14594 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%14593, %14594) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %14595 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14596 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14597 = "mini.unwrap"(%14595) : (!mini.ptr<i32>) -> i32
    %14598 = "mini.unwrap"(%14596) : (!mini.ptr<i32>) -> i32
    %14599 = "mini.coro_create"(%14594, %14597, %14598) {"arg_passer" = @coroutine_fixnopussz_passer, "buffer_filler" = @coroutine_fixnopussz_buffer_filler} : (!llvm.ptr, i32, i32) -> !mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>
    %14600 = builtin.unrealized_conversion_cast %14599 : !mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing> to !mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>
    %14601 = "mini.refer"(%14600) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>
    %14602 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14603 = "mini.unionize"(%14602) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %14604 = "mini.unwrap"(%14603) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i32)>
    %14605 = "mini.coro_call"(%14601, %14604) : (!mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>, !llvm.struct<(!llvm.ptr, i32)>) -> !llvm.struct<(!llvm.ptr, i32)>
    %14606 = "mini.wrap"(%14605) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %14607 = "mini.reunionize"(%14606) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14608 = "mini.unwrap"(%14607) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14609 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["i32_typ"], ["nil_typ"]], "name_hierarchy" = ["Ptri32_or_Nil", ["Ptri32"], ["Nil"]]} : () -> !llvm.ptr
    %14610 = "mini.parameterizations_array"(%14609) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14610, %14608) {"offset" = 0 : i32, "vptrs" = ["union_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14611 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14612 = "mini.unionize"(%14611) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i32)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %14613 = "mini.unwrap"(%14612) : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i32)>
    %14614 = "mini.coro_call"(%14601, %14613) : (!mini.coroutine<[!mini.union<[!mini.ptr<i32>, !mini.nil]>], !mini.ptr<i32>, !mini.nothing>, !llvm.struct<(!llvm.ptr, i32)>) -> !llvm.struct<(!llvm.ptr, i32)>
    %14615 = "mini.wrap"(%14614) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %14616 = "mini.reunionize"(%14615) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14617 = "mini.unwrap"(%14616) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14618 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["i32_typ"], ["nil_typ"]], "name_hierarchy" = ["Ptri32_or_Nil", ["Ptri32"], ["Nil"]]} : () -> !llvm.ptr
    %14619 = "mini.parameterizations_array"(%14618) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14619, %14617) {"offset" = 0 : i32, "vptrs" = ["union_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14620 = "mini.coro_create"(%14366) {"arg_passer" = @coroutine_hlsrhtsaii_passer, "buffer_filler" = @coroutine_hlsrhtsaii_buffer_filler} : (!llvm.ptr) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>
    %14621 = builtin.unrealized_conversion_cast %14620 : !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>> to !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>
    %14622 = "mini.refer"(%14621) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>
    %14623 = "mini.coro_call"(%14622) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14624 = "mini.wrap"(%14623) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %14625 = "llvm.load"(%14622) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.ptr<i32>, !mini.nil]>>) -> !llvm.ptr
    %14626 = "mini.coro_get_result"(%14625) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i32)>
    %14627 = "mini.wrap"(%14626) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i32>, !mini.nil]>
    %14628 = "mini.reunionize"(%14627) {"from_typ" = !llvm.struct<(!llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i32>, !mini.nil]>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14629 = "mini.unwrap"(%14628) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14630 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["i32_typ"], ["nil_typ"]], "name_hierarchy" = ["Ptri32_or_Nil", ["Ptri32"], ["Nil"]]} : () -> !llvm.ptr
    %14631 = "mini.parameterizations_array"(%14630) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14631, %14629) {"offset" = 0 : i32, "vptrs" = ["union_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14632 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i32)>)>, "class_name" = "Channel", "num_data_fields" = 1 : i32} : () -> !mini.fatptr<"Channel">
    %14633 = "mini.unwrap"(%14632) : (!mini.fatptr<"Channel">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14634 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%14634, %14633) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %14635 = "mini.to_fat_ptr"(%14632) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "Channel", "to_typ_name" = "Channel", "invariant"} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    %14636 = "mini.refer"(%14635) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Channel">) -> !mini.fatptr<"Channel">
    %14637 = "mini.addr_of"() {"global_name" = @_functionliteral_ouqxbxuqht} : () -> !llvm.ptr
    %14638 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%14637, %14638) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %14639 = "mini.unwrap"(%14636) : (!mini.fatptr<"Channel">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14640 = "mini.coro_create"(%14638, %14639) {"arg_passer" = @coroutine_xsusoslele_passer, "buffer_filler" = @coroutine_xsusoslele_buffer_filler} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %14641 = builtin.unrealized_conversion_cast %14640 : !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing> to !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %14642 = "mini.refer"(%14641) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %14643 = "mini.coro_call"(%14642) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14644 = "mini.wrap"(%14643) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %14645 = "mini.unwrap"(%14636) : (!mini.fatptr<"Channel">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14646 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %14647 = "mini.method_call"(%14646, %14645) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 7 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %14648 = builtin.unrealized_conversion_cast %14647 : !mini.ptr<i32> to !mini.ptr<i32>
    %14649 = "mini.unionize"(%14648) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14650 = "mini.unwrap"(%14649) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14651 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14652 = "mini.parameterizations_array"(%14651) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14652, %14650) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14653 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14654 = builtin.unrealized_conversion_cast %14653 : !mini.ptr<i32> to !mini.ptr<i32>
    %14655 = "mini.unwrap"(%14654) : (!mini.ptr<i32>) -> i32
    %14656 = builtin.unrealized_conversion_cast %14362 : !llvm.ptr to !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %14657 = "mini.unwrap"(%14656) : (!mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14658 = "mini.addr_of"() {"global_name" = @_functionliteral_fvhcecxnhb} : () -> !llvm.ptr
    %14659 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%14658, %14659) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %14660 = builtin.unrealized_conversion_cast %14659 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>
    %14661 = "mini.unwrap"(%14660) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %14662 = "mini.addr_of"() {"global_name" = @_functionliteral_qzlnpbqcfv} : () -> !llvm.ptr
    %14663 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%14662, %14663) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %14664 = builtin.unrealized_conversion_cast %14663 : !llvm.ptr to !mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>
    %14665 = "mini.unwrap"(%14664) : (!mini.function<[!mini.ptr<i32>], !mini.any, !mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %14666 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14667 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14668 = "mini.unwrap"(%14666) : (!mini.ptr<i32>) -> i32
    %14669 = "mini.unwrap"(%14667) : (!mini.ptr<i32>) -> i32
    %14670 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32} : () -> !mini.fatptr<"Range">
    %14671 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14672 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14673 = builtin.unrealized_conversion_cast %14671 : !mini.ptr<i32> to !mini.ptr<i32>
    %14674 = "mini.unwrap"(%14673) : (!mini.ptr<i32>) -> i32
    %14675 = builtin.unrealized_conversion_cast %14672 : !mini.ptr<i32> to !mini.ptr<i32>
    %14676 = "mini.unwrap"(%14675) : (!mini.ptr<i32>) -> i32
    %14677 = "mini.unwrap"(%14670) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14678 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14679 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14680 = "mini.parameterizations_array"(%14678, %14679) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%14680, %14677, %14674, %14676) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %14681 = "mini.unwrap"(%14670) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14682 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri32", ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %14683 = "mini.parameterizations_array"(%14682) : (!llvm.ptr) -> !llvm.ptr
    %14684 = "mini.method_call"(%14683, %14681, %14665) {"offset" = 10 : i32, "vptrs" = ["function_typ"], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !mini.fatptr<"IntIterable">
    %14685 = "mini.to_fat_ptr"(%14684) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %14686 = "mini.unwrap"(%14685) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14687 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32_to_Ptri1", ["Ptri1"], ["Ptri32"]]} : () -> !llvm.ptr
    %14688 = "mini.parameterizations_array"(%14687) : (!llvm.ptr) -> !llvm.ptr
    %14689 = "mini.method_call"(%14688, %14686, %14661) {"offset" = 5 : i32, "vptrs" = ["function_typ"], "vtable_size" = 24 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !mini.fatptr<"IntIterable">
    %14690 = "mini.to_fat_ptr"(%14689) {"from_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "to_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "from_typ_name" = "IntIterable", "to_typ_name" = "IntIterable", "invariant"} : (!mini.fatptr<"IntIterable">) -> !mini.fatptr<"IntIterable">
    %14691 = "mini.unwrap"(%14690) : (!mini.fatptr<"IntIterable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %14692 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14693 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["FunctionPtri32._Ptri32_to_Ptri32", ["Ptri32"], ["Ptri32"], ["Ptri32"]]} : () -> !llvm.ptr
    %14694 = "mini.parameterizations_array"(%14692, %14693) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %14695 = "mini.method_call"(%14694, %14691, %14655, %14657) {"offset" = 1 : i32, "vptrs" = ["i32_typ", "function_typ"], "vtable_size" = 24 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %14696 = builtin.unrealized_conversion_cast %14695 : !mini.ptr<i32> to !mini.ptr<i32>
    %14697 = "mini.unionize"(%14696) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14698 = "mini.unwrap"(%14697) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14699 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14700 = "mini.parameterizations_array"(%14699) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14700, %14698) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14701 = "mini.literal"() {"value" = 256 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14702 = "mini.unionize"(%14701) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14703 = "mini.unwrap"(%14702) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14704 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14705 = "mini.parameterizations_array"(%14704) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14705, %14703) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %14706 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14707 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14708 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %14709 = "mini.unwrap"(%14706) : (!mini.ptr<i32>) -> i32
    %14710 = "mini.unwrap"(%14707) : (!mini.ptr<i32>) -> i32
    %14711 = "mini.unwrap"(%14708) : (!mini.ptr<i32>) -> i32
    %14712 = "mini.create_tuple"(%14709, %14710, %14711) {"typ" = !llvm.struct<(i32, i32, i32)>} : (i32, i32, i32) -> !mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>, !mini.ptr<i32>]>
    %14713 = "mini.tuple_indexation"(%14712) {"typ" = !llvm.struct<(i32, i32, i32)>, "index" = 1 : i32} : (!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %14714 = "mini.unionize"(%14713) {"from_typ" = i32, "to_typ" = !llvm.struct<(!llvm.ptr, i160)>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>
    %14715 = "mini.unwrap"(%14714) : (!mini.union<[!mini.ptr<i32>, !mini.fatptr<"Representable">, !mini.fatptr<"Character">, !mini.ptr<i1>, !mini.ptr<f64>, !mini.ptr<i64>, !mini.nil, !mini.ptr<i8>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %14716 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["Ptri32"]} : () -> !llvm.ptr
    %14717 = "mini.parameterizations_array"(%14716) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%14717, %14715) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) : () -> ()
}
