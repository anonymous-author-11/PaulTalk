import array;
import io;

/*
This is a multi-line comment!
*/

pair1 = Pair[i32, f64].new(5, 7.0);
t = pair1.second();
IO.print(t);

pair2 = Pair[f64, i32].new(7.0, 9);
t = pair2.second();
IO.print(t);

pair3 = Pair[Tuple[f64,f64,f64,f64], f64].new((1.0, 2.0, 3.0, 4.0), 5.0);
t = pair3.first();
fourth = t.[3];
IO.print(fourth);

class FancyPair extends Pair[Tuple[f64,f64,f64,f64], f64] {

	def init(@first : Tuple[f64,f64,f64,f64], @second : f64) {}

	def second() -> f64 {
		return @second;
	}
}

b = FancyPair.new((1.0, 2.0, 3.0, 4.0), 5.0);
IO.print(b.second());

ary = Array[i32].new();
ary.append(5).append(6).append(7).append(8);
add = (a : i32, b : i32) => { a + b; };
//addf = (a : f64, b : f64) => { a + b; };

IO.print(ary.reduce(0, add));
//IO.print([5,6,7].reduce(0, add));
times_two = (x : i32) => { x * 2; };
ftimes_two = (x : f64) => { x * 2.0; };
identity = (x : i32) => { x; };
to_float = (x : i32) => { y : f64 = x; y; };
ary2 = ary.map(times_two);
ary3 = ary2.map(identity).map(to_float);

for x in ary3 {
	IO.print(55);
	IO.print(x);
}

ary4 = ary.zip(ary3);
for pair in ary4 {
	IO.print(pair.first());
	IO.print(pair.second());
}

class Addable[T, U] {
	abstract def +(other : T) -> U {}
}

class Float64 extends Addable[Float64, Float64], Addable[Int32, Float64] {
	@value : f64

	def init(@value : f64) {
    }

    #[ret == @value]
	def value() -> f64 {
        return @value;
    }
	def +(other : Int32) -> Float64 {
		cast : f64 = other.value();
		return Float64.new(@value + cast);
	}
	def +(other : Float64) -> Float64 {
		return Float64.new(@value + other.value());
	}
}

class Int32 extends Addable[Int32, Int32], Addable[Float64, Float64] {
	@value : i32

	def init(@value : i32) {
    }

    #[ret == @value]
	def value() -> i32 {
        return @value;
    }
	def +(other : Int32) -> Int32 {
		return Int32.new(@value + other.value());
	}
	def +(other : Float64) -> Float64 {
		cast : f64 = @value;
		return Float64.new(cast + other.value());
	}
}

a = Int32.new(5);
b = Int32.new(7);
c = a + b;
IO.print(add_five(c).value());

def add_five(x : Addable[Float64, Float64]) -> Float64 {
	return x + Float64.new(5.0);
}

class Holder[T] where T <: Addable[Float64, Float64] {
	@held : T
	def init(@held : T) {}
	def value() -> Float64 {
		return @held + Float64.new(45.0);
	}
    def value=(x : T) {
        @held = x;
    }
}

holder = Holder[Int32].new(Int32.new(6));
IO.print(holder.value().value());
holder.value() = Int32.new(77);
IO.print(holder.value().value());

class Temp[T] {
    def init() {}
    def print() {
        IO.print(sizeof(T));
    }
}

temp = Temp[String | Nil].new();
temp.print();