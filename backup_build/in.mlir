builtin.module attributes  {"sym_name" = "ir"} {
  builtin.module attributes  {"sym_name" = "iteration"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Pair", "methods" = [@Pair_field_first, @Pair_field_second, @Pair_field_Pair_0, @Pair_field_Pair_1, @Pair_B_init_firstT_secondU, @Pair_B_first_, @Pair_B_second_, @Pair_init_firstT_secondU, @Pair_first_, @Pair_second_], "hash_tbl" = [@Object, @any_typ, @Pair, 18446744073709551615 : i64], "offset_tbl" = [20 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 9197944775169318296 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_Pair", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Container", "methods" = [], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 9056556090793359372 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Container", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Iterator", "methods" = [], "hash_tbl" = [@Iterator, @any_typ, @Container, @Object], "offset_tbl" = [10 : i32, 10 : i32, 13 : i32, 13 : i32], "prime" = 4611686018427388349 : i64, "hash_id" = 8673632051301757104 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Iterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Iterable", "methods" = [], "hash_tbl" = [@Iterable, @any_typ, @Container, @Object], "offset_tbl" = [10 : i32, 10 : i32, 35 : i32, 35 : i32], "prime" = 4611686018427388477 : i64, "hash_id" = 3037712219555723519 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Iterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Enumeration", "methods" = [@Enumeration_field_iterable, @Enumeration_field_Enumeration_0, @Enumeration_field_Enumeration_1, @Enumeration_B_init_iterableIterableT, @Enumeration_B_iterator_, @Enumeration_B_each_fFunctionT_to_Nothing, @Enumeration_B_reduce_accumulatorT_fFunctionT._T_to_T, @Enumeration_B_all_fFunctionT_to_Bool, @Enumeration_B_any_fFunctionT_to_Bool, @Enumeration_B_enumerate_, @Enumeration_B_map_fFunctionT_to_U, @Enumeration_B_filter_fFunctionT_to_Bool, @Enumeration_B_chain_otherIterableT, @Enumeration_B_interleave_otherIterableT, @Enumeration_B_zip_otherIterableU, @Enumeration_B_product_otherIterableU, @Enumeration_init_iterableIterableT, @Enumeration_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Enumeration_field_Enumeration_1, @Enumeration_B_iterator_, @Enumeration_B_each_fFunctionT_to_Nothing, @Enumeration_B_reduce_accumulatorT_fFunctionT._T_to_T, @Enumeration_B_all_fFunctionT_to_Bool, @Enumeration_B_any_fFunctionT_to_Bool, @Enumeration_B_enumerate_, @Enumeration_B_map_fFunctionT_to_U, @Enumeration_B_filter_fFunctionT_to_Bool, @Enumeration_B_chain_otherIterableT, @Enumeration_B_interleave_otherIterableT, @Enumeration_B_zip_otherIterableU, @Enumeration_B_product_otherIterableU, @Enumeration_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Iterable, 18446744073709551615 : i64, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Enumeration, @Object], "offset_tbl" = [10 : i32, 39 : i32, 0 : i32, 0 : i32, 64 : i32, 0 : i32, 10 : i32, 64 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 15641546954577583839 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_Enumeration", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Enumerator", "methods" = [@Enumerator_field_iterator, @Enumerator_field_index, @Enumerator_field_Enumerator_0, @Enumerator_field_Enumerator_1, @Enumerator_B_init_iteratorIteratorT, @Enumerator_B_next_, @Enumerator_init_iteratorIteratorT, @Enumerator_next_, @Enumerator_field_Enumerator_1, @Enumerator_B_next_, @Enumerator_next_], "hash_tbl" = [18446744073709551615 : i64, 18446744073709551615 : i64, @Container, @Iterator, @Object, 18446744073709551615 : i64, @any_typ, @Enumerator], "offset_tbl" = [0 : i32, 0 : i32, 21 : i32, 18 : i32, 21 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 15011521941800397744 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "data_size_fn" = "_data_size_Enumerator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "MapIterable", "methods" = [@MapIterable_field_iterable, @MapIterable_field_f, @MapIterable_field_MapIterable_0, @MapIterable_field_MapIterable_1, @MapIterable_B_init_iterableIterableT_fFunctionT_to_U, @MapIterable_B_iterator_, @MapIterable_B_each_fFunctionT_to_Nothing, @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapIterable_B_all_fFunctionT_to_Bool, @MapIterable_B_any_fFunctionT_to_Bool, @MapIterable_B_enumerate_, @MapIterable_B_map_fFunctionT_to_U, @MapIterable_B_filter_fFunctionT_to_Bool, @MapIterable_B_chain_otherIterableT, @MapIterable_B_interleave_otherIterableT, @MapIterable_B_zip_otherIterableU, @MapIterable_B_product_otherIterableU, @MapIterable_init_iterableIterableT_fFunctionT_to_U, @MapIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @MapIterable_field_MapIterable_1, @MapIterable_B_iterator_, @MapIterable_B_each_fFunctionT_to_Nothing, @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapIterable_B_all_fFunctionT_to_Bool, @MapIterable_B_any_fFunctionT_to_Bool, @MapIterable_B_enumerate_, @MapIterable_B_map_fFunctionT_to_U, @MapIterable_B_filter_fFunctionT_to_Bool, @MapIterable_B_chain_otherIterableT, @MapIterable_B_interleave_otherIterableT, @MapIterable_B_zip_otherIterableU, @MapIterable_B_product_otherIterableU, @MapIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [18446744073709551615 : i64, @Container, @MapIterable, @Iterable, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, @any_typ], "offset_tbl" = [0 : i32, 65 : i32, 10 : i32, 40 : i32, 65 : i32, 0 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388279 : i64, "hash_id" = 10957973502106259894 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_MapIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "MapIterator", "methods" = [@MapIterator_field_iterator, @MapIterator_field_f, @MapIterator_field_MapIterator_0, @MapIterator_field_MapIterator_1, @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U, @MapIterator_B_next_, @MapIterator_init_iteratorIteratorT_fFunctionT_to_U, @MapIterator_next_, @MapIterator_field_MapIterator_1, @MapIterator_B_next_, @MapIterator_next_], "hash_tbl" = [@Object, @any_typ, @MapIterator, @Container, 18446744073709551615 : i64, @Iterator, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [21 : i32, 10 : i32, 10 : i32, 21 : i32, 0 : i32, 18 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 18300190591082816834 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_MapIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FilterIterable", "methods" = [@FilterIterable_field_iterable, @FilterIterable_field_f, @FilterIterable_field_FilterIterable_0, @FilterIterable_B_init_iterableIterableT_fFunctionT_to_Bool, @FilterIterable_B_iterator_, @FilterIterable_B_each_fFunctionT_to_Nothing, @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @FilterIterable_B_all_fFunctionT_to_Bool, @FilterIterable_B_any_fFunctionT_to_Bool, @FilterIterable_B_enumerate_, @FilterIterable_B_map_fFunctionT_to_U, @FilterIterable_B_filter_fFunctionT_to_Bool, @FilterIterable_B_chain_otherIterableT, @FilterIterable_B_interleave_otherIterableT, @FilterIterable_B_zip_otherIterableU, @FilterIterable_B_product_otherIterableU, @FilterIterable_init_iterableIterableT_fFunctionT_to_Bool, @FilterIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @FilterIterable_field_FilterIterable_0, @FilterIterable_B_iterator_, @FilterIterable_B_each_fFunctionT_to_Nothing, @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @FilterIterable_B_all_fFunctionT_to_Bool, @FilterIterable_B_any_fFunctionT_to_Bool, @FilterIterable_B_enumerate_, @FilterIterable_B_map_fFunctionT_to_U, @FilterIterable_B_filter_fFunctionT_to_Bool, @FilterIterable_B_chain_otherIterableT, @FilterIterable_B_interleave_otherIterableT, @FilterIterable_B_zip_otherIterableU, @FilterIterable_B_product_otherIterableU, @FilterIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @FilterIterable, 18446744073709551615 : i64, @Container, @Iterable, 18446744073709551615 : i64], "offset_tbl" = [0 : i32, 64 : i32, 10 : i32, 10 : i32, 0 : i32, 64 : i32, 39 : i32, 0 : i32], "prime" = 4611686018427388319 : i64, "hash_id" = 8498466713076104350 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_FilterIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FilterIterator", "methods" = [@FilterIterator_field_iterator, @FilterIterator_field_f, @FilterIterator_field_FilterIterator_0, @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_Bool, @FilterIterator_B_next_, @FilterIterator_init_iteratorIteratorT_fFunctionT_to_Bool, @FilterIterator_next_, @FilterIterator_field_FilterIterator_0, @FilterIterator_B_next_, @FilterIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Iterator, @FilterIterator, 18446744073709551615 : i64], "offset_tbl" = [20 : i32, 10 : i32, 0 : i32, 20 : i32, 0 : i32, 17 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 17225378576809247733 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_FilterIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ChainIterable", "methods" = [@ChainIterable_field_first, @ChainIterable_field_second, @ChainIterable_field_ChainIterable_0, @ChainIterable_B_init_firstIterableT_secondIterableT, @ChainIterable_B_iterator_, @ChainIterable_B_each_fFunctionT_to_Nothing, @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainIterable_B_all_fFunctionT_to_Bool, @ChainIterable_B_any_fFunctionT_to_Bool, @ChainIterable_B_enumerate_, @ChainIterable_B_map_fFunctionT_to_U, @ChainIterable_B_filter_fFunctionT_to_Bool, @ChainIterable_B_chain_otherIterableT, @ChainIterable_B_interleave_otherIterableT, @ChainIterable_B_zip_otherIterableU, @ChainIterable_B_product_otherIterableU, @ChainIterable_init_firstIterableT_secondIterableT, @ChainIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ChainIterable_field_ChainIterable_0, @ChainIterable_B_iterator_, @ChainIterable_B_each_fFunctionT_to_Nothing, @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainIterable_B_all_fFunctionT_to_Bool, @ChainIterable_B_any_fFunctionT_to_Bool, @ChainIterable_B_enumerate_, @ChainIterable_B_map_fFunctionT_to_U, @ChainIterable_B_filter_fFunctionT_to_Bool, @ChainIterable_B_chain_otherIterableT, @ChainIterable_B_interleave_otherIterableT, @ChainIterable_B_zip_otherIterableU, @ChainIterable_B_product_otherIterableU, @ChainIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Iterable, 18446744073709551615 : i64, @ChainIterable, @Container, 18446744073709551615 : i64, 18446744073709551615 : i64, @Object], "offset_tbl" = [10 : i32, 39 : i32, 0 : i32, 10 : i32, 64 : i32, 0 : i32, 0 : i32, 64 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 16076497015278503801 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ChainIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ChainIterator", "methods" = [@ChainIterator_field_first, @ChainIterator_field_second, @ChainIterator_field_on_first, @ChainIterator_field_ChainIterator_0, @ChainIterator_B_init_firstIteratorT_secondIteratorT, @ChainIterator_B_next_, @ChainIterator_init_firstIteratorT_secondIteratorT, @ChainIterator_next_, @ChainIterator_field_ChainIterator_0, @ChainIterator_B_next_, @ChainIterator_next_], "hash_tbl" = [18446744073709551615 : i64, 18446744073709551615 : i64, @Container, @Iterator, @Object, 18446744073709551615 : i64, @any_typ, @ChainIterator], "offset_tbl" = [0 : i32, 0 : i32, 21 : i32, 18 : i32, 21 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 6043157723929225452 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "data_size_fn" = "_data_size_ChainIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "InterleaveIterable", "methods" = [@InterleaveIterable_field_first, @InterleaveIterable_field_second, @InterleaveIterable_field_InterleaveIterable_0, @InterleaveIterable_B_init_firstIterableT_secondIterableT, @InterleaveIterable_B_iterator_, @InterleaveIterable_B_each_fFunctionT_to_Nothing, @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleaveIterable_B_all_fFunctionT_to_Bool, @InterleaveIterable_B_any_fFunctionT_to_Bool, @InterleaveIterable_B_enumerate_, @InterleaveIterable_B_map_fFunctionT_to_U, @InterleaveIterable_B_filter_fFunctionT_to_Bool, @InterleaveIterable_B_chain_otherIterableT, @InterleaveIterable_B_interleave_otherIterableT, @InterleaveIterable_B_zip_otherIterableU, @InterleaveIterable_B_product_otherIterableU, @InterleaveIterable_init_firstIterableT_secondIterableT, @InterleaveIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @InterleaveIterable_field_InterleaveIterable_0, @InterleaveIterable_B_iterator_, @InterleaveIterable_B_each_fFunctionT_to_Nothing, @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleaveIterable_B_all_fFunctionT_to_Bool, @InterleaveIterable_B_any_fFunctionT_to_Bool, @InterleaveIterable_B_enumerate_, @InterleaveIterable_B_map_fFunctionT_to_U, @InterleaveIterable_B_filter_fFunctionT_to_Bool, @InterleaveIterable_B_chain_otherIterableT, @InterleaveIterable_B_interleave_otherIterableT, @InterleaveIterable_B_zip_otherIterableU, @InterleaveIterable_B_product_otherIterableU, @InterleaveIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [18446744073709551615 : i64, @Container, @InterleaveIterable, @Iterable, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, @any_typ], "offset_tbl" = [0 : i32, 64 : i32, 10 : i32, 39 : i32, 64 : i32, 0 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388279 : i64, "hash_id" = 4936782714255954462 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_InterleaveIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "InterleaveIterator", "methods" = [@InterleaveIterator_field_first, @InterleaveIterator_field_second, @InterleaveIterator_field_on_first, @InterleaveIterator_field_InterleaveIterator_0, @InterleaveIterator_B_init_firstIteratorT_secondIteratorT, @InterleaveIterator_B_next_, @InterleaveIterator_init_firstIteratorT_secondIteratorT, @InterleaveIterator_next_, @InterleaveIterator_field_InterleaveIterator_0, @InterleaveIterator_B_next_, @InterleaveIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, @InterleaveIterator, @Iterator, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [21 : i32, 10 : i32, 0 : i32, 21 : i32, 10 : i32, 18 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 14522079715461027111 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "data_size_fn" = "_data_size_InterleaveIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ZipIterable", "methods" = [@ZipIterable_field_first, @ZipIterable_field_second, @ZipIterable_field_ZipIterable_0, @ZipIterable_field_ZipIterable_1, @ZipIterable_field_ZipIterable_2, @ZipIterable_B_init_firstIterableT_secondIterableU, @ZipIterable_B_iterator_, @ZipIterable_B_each_fFunctionT_to_Nothing, @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZipIterable_B_all_fFunctionT_to_Bool, @ZipIterable_B_any_fFunctionT_to_Bool, @ZipIterable_B_enumerate_, @ZipIterable_B_map_fFunctionT_to_U, @ZipIterable_B_filter_fFunctionT_to_Bool, @ZipIterable_B_chain_otherIterableT, @ZipIterable_B_interleave_otherIterableT, @ZipIterable_B_zip_otherIterableU, @ZipIterable_B_product_otherIterableU, @ZipIterable_init_firstIterableT_secondIterableU, @ZipIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ZipIterable_field_ZipIterable_2, @ZipIterable_B_iterator_, @ZipIterable_B_each_fFunctionT_to_Nothing, @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZipIterable_B_all_fFunctionT_to_Bool, @ZipIterable_B_any_fFunctionT_to_Bool, @ZipIterable_B_enumerate_, @ZipIterable_B_map_fFunctionT_to_U, @ZipIterable_B_filter_fFunctionT_to_Bool, @ZipIterable_B_chain_otherIterableT, @ZipIterable_B_interleave_otherIterableT, @ZipIterable_B_zip_otherIterableU, @ZipIterable_B_product_otherIterableU, @ZipIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Iterable, 18446744073709551615 : i64, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @ZipIterable, @Object], "offset_tbl" = [10 : i32, 41 : i32, 0 : i32, 0 : i32, 66 : i32, 0 : i32, 10 : i32, 66 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 35232740166152944 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ZipIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ZipIterator", "methods" = [@ZipIterator_field_first, @ZipIterator_field_second, @ZipIterator_field_ZipIterator_0, @ZipIterator_field_ZipIterator_1, @ZipIterator_field_ZipIterator_2, @ZipIterator_B_init_firstIteratorT_secondIteratorU, @ZipIterator_B_next_, @ZipIterator_init_firstIteratorT_secondIteratorU, @ZipIterator_next_, @ZipIterator_field_ZipIterator_2, @ZipIterator_B_next_, @ZipIterator_next_], "hash_tbl" = [18446744073709551615 : i64, 18446744073709551615 : i64, @Container, @Iterator, @Object, 18446744073709551615 : i64, @any_typ, @ZipIterator], "offset_tbl" = [0 : i32, 0 : i32, 22 : i32, 19 : i32, 22 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 16305629627969966298 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ZipIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ProductIterable", "methods" = [@ProductIterable_field_first, @ProductIterable_field_second, @ProductIterable_field_ProductIterable_0, @ProductIterable_field_ProductIterable_1, @ProductIterable_field_ProductIterable_2, @ProductIterable_B_init_firstIterableT_secondIterableU, @ProductIterable_B_iterator_, @ProductIterable_B_each_fFunctionT_to_Nothing, @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductIterable_B_all_fFunctionT_to_Bool, @ProductIterable_B_any_fFunctionT_to_Bool, @ProductIterable_B_enumerate_, @ProductIterable_B_map_fFunctionT_to_U, @ProductIterable_B_filter_fFunctionT_to_Bool, @ProductIterable_B_chain_otherIterableT, @ProductIterable_B_interleave_otherIterableT, @ProductIterable_B_zip_otherIterableU, @ProductIterable_B_product_otherIterableU, @ProductIterable_init_firstIterableT_secondIterableU, @ProductIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ProductIterable_field_ProductIterable_2, @ProductIterable_B_iterator_, @ProductIterable_B_each_fFunctionT_to_Nothing, @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductIterable_B_all_fFunctionT_to_Bool, @ProductIterable_B_any_fFunctionT_to_Bool, @ProductIterable_B_enumerate_, @ProductIterable_B_map_fFunctionT_to_U, @ProductIterable_B_filter_fFunctionT_to_Bool, @ProductIterable_B_chain_otherIterableT, @ProductIterable_B_interleave_otherIterableT, @ProductIterable_B_zip_otherIterableU, @ProductIterable_B_product_otherIterableU, @ProductIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Object, @any_typ, @ProductIterable, @Container, 18446744073709551615 : i64, @Iterable, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [66 : i32, 10 : i32, 10 : i32, 66 : i32, 0 : i32, 41 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 4128338911757318636 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ProductIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ProductIterator", "methods" = [@ProductIterator_field_first_iterator, @ProductIterator_field_second_iterator, @ProductIterator_field_second_iterable, @ProductIterator_field_current_first, @ProductIterator_field_ProductIterator_0, @ProductIterator_field_ProductIterator_1, @ProductIterator_field_ProductIterator_2, @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU, @ProductIterator_B_next_, @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU, @ProductIterator_next_, @ProductIterator_field_ProductIterator_2, @ProductIterator_B_next_, @ProductIterator_next_], "hash_tbl" = [@any_typ, 18446744073709551615 : i64, @Iterator, 18446744073709551615 : i64, @Container, @Object, 18446744073709551615 : i64, @ProductIterator], "offset_tbl" = [10 : i32, 0 : i32, 21 : i32, 0 : i32, 24 : i32, 24 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 1697250377212095568 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_ProductIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Pair", "types" = [0 : i64, 1 : i64]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Pair_getter_first", "types" = [0 : i64, 1 : i64], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Pair_setter_first", "types" = [0 : i64, 1 : i64], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Pair_field_first", "getter_name" = "Pair_getter_first", "setter_name" = "Pair_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Pair_getter_second", "types" = [0 : i64, 1 : i64], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Pair_setter_second", "types" = [0 : i64, 1 : i64], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Pair_field_second", "getter_name" = "Pair_getter_second", "setter_name" = "Pair_setter_second"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "Pair_field_Pair_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Pair.T"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "Pair_field_Pair_1", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Pair.U"]} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr, %3 : !llvm.struct<(!llvm.ptr, i160)>, %4 : !llvm.struct<(!llvm.ptr, i160)>):
      %5 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %6 = "hi.cast"(%5) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %7 = "mid.wrap"(%3) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Pair">
      %8 = "hi.cast"(%7) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "Pair">
      %9 = "hi.cast"(%8) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "Pair">
      "mid.set_field"(%6, %9) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, !hi.type_param<"T", !hi.any, "Pair">) -> ()
      %10 = "mid.wrap"(%4) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"U", !hi.any, "Pair">
      %11 = "hi.cast"(%10) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"U", !hi.any, "Pair">
      %12 = "hi.cast"(%11) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"U", !hi.any, "Pair">
      "mid.set_field"(%6, %12) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, !hi.type_param<"U", !hi.any, "Pair">) -> ()
    }) {"func_name" = "Pair_init_firstT_secondU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%13 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %14 : !llvm.ptr):
      %15 = "mid.invariant"(%14) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %16 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb3:
      %17 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%17, %16) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb4] : () -> ()
    ^bb5:
      %18 = "llvm.getelementptr"(%14) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %19 = "mid.checkflag"(%18) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %20 = "llvm.load"(%19) : (!hi.bool) -> i1
      "cf.cond_br"(%20) [^bb3, ^bb3] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb2:
      %21 = "llvm.getelementptr"(%14) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %22 = "mid.checkflag"(%21) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %23 = "llvm.load"(%22) : (!hi.bool) -> i1
      "cf.cond_br"(%23) [^bb5, ^bb5] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb4:
      %24 = "llvm.extractvalue"(%13) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %25 = "llvm.load"(%16) : (!llvm.ptr) -> i32
      %26 = "llvm.getelementptr"(%24, %25) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %27 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %28 = "llvm.getelementptr"(%26, %27) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%28) : (!llvm.ptr) -> ()
    }) {"func_name" = "Pair_B_init_firstT_secondU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb6(%29 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %30 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %31 : !llvm.ptr):
      %32 = "mid.wrap"(%29) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %33 = "hi.cast"(%32) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %34 = "mid.get_field"(%33) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.type_param<"T", !hi.any, "Pair">
      %35 = "hi.cast"(%34) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "Pair">
      %36 = "hi.cast"(%35) {"from_typ" = !hi.type_param<"T", !hi.any, "Pair">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Pair">) -> !hi.type_param<"T", !hi.any, "Pair">
      "mid.return"(%36) : (!hi.type_param<"T", !hi.any, "Pair">) -> ()
    }) {"func_name" = "Pair_first_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb7(%37 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %38 : !llvm.ptr):
      %39 = "mid.invariant"(%38) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %40 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb8] : () -> ()
    ^bb8:
      %41 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
      "llvm.store"(%41, %40) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb9] : () -> ()
    ^bb9:
      %42 = "llvm.extractvalue"(%37) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %43 = "llvm.load"(%40) : (!llvm.ptr) -> i32
      %44 = "llvm.getelementptr"(%42, %43) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %45 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %46 = "llvm.getelementptr"(%44, %45) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%46) : (!llvm.ptr) -> ()
    }) {"func_name" = "Pair_B_first_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb10(%47 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %48 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %49 : !llvm.ptr):
      %50 = "mid.wrap"(%47) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %51 = "hi.cast"(%50) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "to_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>
      %52 = "mid.get_field"(%51) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Pair">, !hi.type_param<"U", !hi.any, "Pair">]>) -> !hi.type_param<"U", !hi.any, "Pair">
      %53 = "hi.cast"(%52) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"U", !hi.any, "Pair">
      %54 = "hi.cast"(%53) {"from_typ" = !hi.type_param<"U", !hi.any, "Pair">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "Pair">) -> !hi.type_param<"U", !hi.any, "Pair">
      "mid.return"(%54) : (!hi.type_param<"U", !hi.any, "Pair">) -> ()
    }) {"func_name" = "Pair_second_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb11(%55 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %56 : !llvm.ptr):
      %57 = "mid.invariant"(%56) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %58 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb12] : () -> ()
    ^bb12:
      %59 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%59, %58) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb13] : () -> ()
    ^bb13:
      %60 = "llvm.extractvalue"(%55) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %61 = "llvm.load"(%58) : (!llvm.ptr) -> i32
      %62 = "llvm.getelementptr"(%60, %61) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %63 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %64 = "llvm.getelementptr"(%62, %63) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%64) : (!llvm.ptr) -> ()
    }) {"func_name" = "Pair_B_second_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Container", "types" = []} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Iterator", "types" = []} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Iterator_field_Iterator_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Iterator.T"]} : () -> ()
    "mid.func"() ({
    ^bb14(%65 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %66 : !llvm.ptr):
      %67 = "mid.invariant"(%66) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %68 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb15] : () -> ()
    ^bb15:
      %69 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
      "llvm.store"(%69, %68) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb16] : () -> ()
    ^bb16:
      %70 = "llvm.extractvalue"(%65) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %71 = "llvm.load"(%68) : (!llvm.ptr) -> i32
      %72 = "llvm.getelementptr"(%70, %71) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %73 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %74 = "llvm.getelementptr"(%72, %73) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%74) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Iterable", "types" = []} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Iterable_field_Iterable_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Iterable.T"]} : () -> ()
    "mid.func"() ({
    ^bb17(%75 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %76 : !llvm.ptr):
      %77 = "mid.invariant"(%76) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %78 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb18] : () -> ()
    ^bb18:
      %79 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%79, %78) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb19] : () -> ()
    ^bb19:
      %80 = "llvm.extractvalue"(%75) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %81 = "llvm.load"(%78) : (!llvm.ptr) -> i32
      %82 = "llvm.getelementptr"(%80, %81) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %83 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %84 = "llvm.getelementptr"(%82, %83) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%84) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb20(%85 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %86 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %87 : !llvm.ptr, %88 : !llvm.struct<(!llvm.ptr)>):
      %89 = "mid.wrap"(%85) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %90 = "hi.cast"(%89) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %91 = "mid.wrap"(%88) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>
      %92 = "hi.cast"(%91) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>
      %93 = "mid.unwrap"(%90) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %94 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %95 = "mid.method_call"(%94, %93) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %96 = "hi.cast"(%95) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %97 = "mid.refer"(%96) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.while"() ({
        %98 = "mid.unwrap"(%97) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %99 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %100 = "mid.method_call"(%99, %98) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %101 = "hi.cast"(%100) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        %102 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Iterable.T"]} : () -> !llvm.ptr
        %103 = "mid.checkflag"(%101) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %104 = "mid.unwrap"(%103) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %105 = "hi.cast"(%101) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %106 = "hi.cast"(%105) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %107 = "mid.unwrap"(%106) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %108 = "mid.unwrap"(%92) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.nothing>) -> !llvm.ptr
        "mid.fptr_call"(%108, %107) {"ret_type" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %109 = "hi.cast"(%105) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        "mid.assign"(%101, %109) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, !hi.type_param<"T", !hi.any, "Iterable">) -> ()
      }) : () -> ()
    }) {"func_name" = "Iterable_each_fFunctionT_to_Nothing", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb21(%110 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %111 : !llvm.ptr):
      %112 = "mid.invariant"(%111) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %113 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb22] : () -> ()
    ^bb23:
      %114 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%114, %113) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb24] : () -> ()
    ^bb22:
      %115 = "llvm.getelementptr"(%111) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %116 = "mid.checkflag"(%115) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %117 = "llvm.load"(%116) : (!hi.bool) -> i1
      "cf.cond_br"(%117) [^bb23, ^bb23] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb24:
      %118 = "llvm.extractvalue"(%110) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %119 = "llvm.load"(%113) : (!llvm.ptr) -> i32
      %120 = "llvm.getelementptr"(%118, %119) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %121 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %122 = "llvm.getelementptr"(%120, %121) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%122) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb25(%123 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %124 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %125 : !llvm.ptr, %126 : !llvm.struct<(!llvm.ptr, i160)>, %127 : !llvm.struct<(!llvm.ptr)>):
      %128 = "mid.wrap"(%123) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %129 = "hi.cast"(%128) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %130 = "mid.wrap"(%126) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Iterable">
      %131 = "hi.cast"(%130) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
      %132 = "mid.wrap"(%127) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>
      %133 = "hi.cast"(%132) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>
      %134 = "mid.unwrap"(%129) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %135 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %136 = "mid.method_call"(%135, %134) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %137 = "hi.cast"(%136) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %138 = "mid.refer"(%137) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.while"() ({
        %139 = "mid.unwrap"(%138) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %140 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %141 = "mid.method_call"(%140, %139) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %142 = "hi.cast"(%141) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        %143 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Iterable.T"]} : () -> !llvm.ptr
        %144 = "mid.checkflag"(%142) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %145 = "mid.unwrap"(%144) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %146 = "hi.cast"(%142) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %147 = "hi.cast"(%131) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %148 = "mid.unwrap"(%147) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %149 = "hi.cast"(%146) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %150 = "mid.unwrap"(%149) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %151 = "mid.unwrap"(%133) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"T", !hi.any, "Iterable">>) -> !llvm.ptr
        %152 = "mid.fptr_call"(%151, %148, %150) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %153 = "hi.cast"(%152) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        "mid.assign"(%131, %153) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"T", !hi.any, "Iterable">) -> ()
        %154 = "hi.cast"(%146) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        "mid.assign"(%142, %154) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, !hi.type_param<"T", !hi.any, "Iterable">) -> ()
      }) : () -> ()
      %155 = "hi.cast"(%131) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
      "mid.return"(%155) : (!hi.type_param<"T", !hi.any, "Iterable">) -> ()
    }) {"func_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb26(%156 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %157 : !llvm.ptr):
      %158 = "mid.invariant"(%157) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %159 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb27] : () -> ()
    ^bb28:
      %160 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%160, %159) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb29] : () -> ()
    ^bb30:
      %161 = "llvm.getelementptr"(%157) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %162 = "mid.checkflag"(%161) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %163 = "llvm.load"(%162) : (!hi.bool) -> i1
      "cf.cond_br"(%163) [^bb28, ^bb28] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb27:
      %164 = "llvm.getelementptr"(%157) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %165 = "mid.checkflag"(%164) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %166 = "llvm.load"(%165) : (!hi.bool) -> i1
      "cf.cond_br"(%166) [^bb30, ^bb30] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb29:
      %167 = "llvm.extractvalue"(%156) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %168 = "llvm.load"(%159) : (!llvm.ptr) -> i32
      %169 = "llvm.getelementptr"(%167, %168) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %170 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %171 = "llvm.getelementptr"(%169, %170) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%171) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb31(%172 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %173 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %174 : !llvm.ptr, %175 : !llvm.struct<(!llvm.ptr)>):
      %176 = "mid.wrap"(%172) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %177 = "hi.cast"(%176) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %178 = "mid.wrap"(%175) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %179 = "hi.cast"(%178) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %180 = "mid.unwrap"(%177) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %181 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %182 = "mid.method_call"(%181, %180) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %183 = "hi.cast"(%182) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %184 = "mid.refer"(%183) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.while"() ({
        %185 = "mid.unwrap"(%184) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %186 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %187 = "mid.method_call"(%186, %185) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %188 = "hi.cast"(%187) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        %189 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Iterable.T"]} : () -> !llvm.ptr
        %190 = "mid.checkflag"(%188) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %191 = "mid.unwrap"(%190) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %192 = "hi.cast"(%188) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %193 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %194 = "hi.cast"(%192) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %195 = "mid.unwrap"(%194) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %196 = "mid.unwrap"(%179) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !llvm.ptr
        %197 = "mid.fptr_call"(%196, %195) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.bool
        %198 = "mid.unwrap"(%193) : (!hi.bool) -> i1
        %199 = "mid.unwrap"(%197) : (!hi.bool) -> i1
        %200 = "mid.comparison"(%198, %199) {"op" = "EQ"} : (i1, i1) -> i1
        %201 = "mid.wrap"(%200) : (i1) -> !hi.bool
        %202 = "mid.unwrap"(%201) : (!hi.bool) -> i1
        "mid.if"(%202) ({
          %203 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %204 = "hi.cast"(%203) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.return"(%204) : (!hi.bool) -> ()
        }) : (i1) -> ()
        %205 = "hi.cast"(%192) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        "mid.assign"(%188, %205) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, !hi.type_param<"T", !hi.any, "Iterable">) -> ()
      }) : () -> ()
      %206 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %207 = "hi.cast"(%206) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.return"(%207) : (!hi.bool) -> ()
    }) {"func_name" = "Iterable_all_fFunctionT_to_Bool", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb32(%208 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %209 : !llvm.ptr):
      %210 = "mid.invariant"(%209) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %211 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb33] : () -> ()
    ^bb34:
      %212 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%212, %211) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb35] : () -> ()
    ^bb33:
      %213 = "llvm.getelementptr"(%209) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %214 = "mid.checkflag"(%213) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %215 = "llvm.load"(%214) : (!hi.bool) -> i1
      "cf.cond_br"(%215) [^bb34, ^bb34] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb35:
      %216 = "llvm.extractvalue"(%208) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %217 = "llvm.load"(%211) : (!llvm.ptr) -> i32
      %218 = "llvm.getelementptr"(%216, %217) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %219 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %220 = "llvm.getelementptr"(%218, %219) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%220) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb36(%221 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %222 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %223 : !llvm.ptr, %224 : !llvm.struct<(!llvm.ptr)>):
      %225 = "mid.wrap"(%221) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %226 = "hi.cast"(%225) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %227 = "mid.wrap"(%224) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %228 = "hi.cast"(%227) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %229 = "mid.unwrap"(%226) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %230 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %231 = "mid.method_call"(%230, %229) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %232 = "hi.cast"(%231) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %233 = "mid.refer"(%232) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.while"() ({
        %234 = "mid.unwrap"(%233) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %235 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %236 = "mid.method_call"(%235, %234) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %237 = "hi.cast"(%236) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>
        %238 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Iterable.T"]} : () -> !llvm.ptr
        %239 = "mid.checkflag"(%237) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %240 = "mid.unwrap"(%239) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %241 = "hi.cast"(%237) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Iterable">
        %242 = "hi.cast"(%241) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        %243 = "mid.unwrap"(%242) : (!hi.type_param<"T", !hi.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
        %244 = "mid.unwrap"(%228) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !llvm.ptr
        %245 = "mid.fptr_call"(%244, %243) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.bool
        %246 = "mid.unwrap"(%245) : (!hi.bool) -> i1
        "mid.if"(%246) ({
          %247 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
          %248 = "hi.cast"(%247) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.return"(%248) : (!hi.bool) -> ()
        }) : (i1) -> ()
        %249 = "hi.cast"(%241) {"from_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "to_typ" = !hi.type_param<"T", !hi.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Iterable">) -> !hi.type_param<"T", !hi.any, "Iterable">
        "mid.assign"(%237, %249) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterable">, !hi.nil]>, !hi.type_param<"T", !hi.any, "Iterable">) -> ()
      }) : () -> ()
      %250 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %251 = "hi.cast"(%250) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.return"(%251) : (!hi.bool) -> ()
    }) {"func_name" = "Iterable_any_fFunctionT_to_Bool", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb37(%252 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %253 : !llvm.ptr):
      %254 = "mid.invariant"(%253) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %255 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb38] : () -> ()
    ^bb39:
      %256 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%256, %255) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb40] : () -> ()
    ^bb38:
      %257 = "llvm.getelementptr"(%253) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %258 = "mid.checkflag"(%257) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %259 = "llvm.load"(%258) : (!hi.bool) -> i1
      "cf.cond_br"(%259) [^bb39, ^bb39] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb40:
      %260 = "llvm.extractvalue"(%252) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %261 = "llvm.load"(%255) : (!llvm.ptr) -> i32
      %262 = "llvm.getelementptr"(%260, %261) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %263 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %264 = "llvm.getelementptr"(%262, %263) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%264) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb41(%265 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %266 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %267 : !llvm.ptr):
      %268 = "mid.wrap"(%265) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %269 = "hi.cast"(%268) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %270 = "mid.unwrap"(%269) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %271 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "Enumeration", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %272 = "hi.cast"(%269) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %273 = "mid.unwrap"(%272) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %274 = "mid.unwrap"(%271) : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %275 = "mid.parameterization"() {"id_hierarchy" = ["Iterable", ["any_typ"]], "name_hierarchy" = ["IterableIterable.T", ["Iterable.T"]]} : () -> !llvm.ptr
      %276 = "mid.parameterizations_array"(%275) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%276, %274, %273) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 54 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %277 = "hi.cast"(%271) {"from_typ" = !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Iterable">]>]>, "from_typ_name" = "Enumeration", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Iterable">]>]>
      "mid.return"(%277) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Iterable">]>]>) -> ()
    }) {"func_name" = "Iterable_enumerate_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb42(%278 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %279 : !llvm.ptr):
      %280 = "mid.invariant"(%279) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %281 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb43] : () -> ()
    ^bb43:
      %282 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%282, %281) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb44] : () -> ()
    ^bb44:
      %283 = "llvm.extractvalue"(%278) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %284 = "llvm.load"(%281) : (!llvm.ptr) -> i32
      %285 = "llvm.getelementptr"(%283, %284) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %286 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %287 = "llvm.getelementptr"(%285, %286) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%287) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb45(%288 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %289 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %290 : !llvm.ptr, %291 : !llvm.struct<(!llvm.ptr)>):
      %292 = "mid.wrap"(%288) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %293 = "hi.cast"(%292) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %294 = "mid.wrap"(%291) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>
      %295 = "hi.cast"(%294) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>
      %296 = "mid.unwrap"(%293) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %297 = "mid.unwrap"(%295) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>) -> !llvm.struct<(!llvm.ptr)>
      %298 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>
      %299 = "hi.cast"(%293) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      %300 = "mid.unwrap"(%299) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %301 = "hi.cast"(%295) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>
      %302 = "mid.unwrap"(%301) : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>) -> !llvm.struct<(!llvm.ptr)>
      %303 = "mid.unwrap"(%298) : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %304 = "mid.parameterization"() {"id_hierarchy" = ["Iterable", ["any_typ"]], "name_hierarchy" = ["IterableIterable.T", ["Iterable.T"]]} : () -> !llvm.ptr
      %305 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["any_typ"], ["any_typ"]], "name_hierarchy" = ["FunctionIterable.T_to_Iterable.U", ["Iterable.U"], ["Iterable.T"]]} : () -> !llvm.ptr
      %306 = "mid.parameterizations_array"(%304, %305) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%306, %303, %300, %302) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 55 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %307 = "hi.cast"(%298) {"from_typ" = !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "from_typ_name" = "MapIterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      "mid.return"(%307) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Iterable_map_fFunctionT_to_U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb46(%308 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %309 : !llvm.ptr):
      %310 = "mid.invariant"(%309) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %311 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb47] : () -> ()
    ^bb48:
      %312 = "llvm.mlir.constant"() <{"value" = 50 : i32}> : () -> i32
      "llvm.store"(%312, %311) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb49] : () -> ()
    ^bb47:
      %313 = "llvm.getelementptr"(%309) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %314 = "mid.checkflag"(%313) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %315 = "llvm.load"(%314) : (!hi.bool) -> i1
      "cf.cond_br"(%315) [^bb48, ^bb48] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb49:
      %316 = "llvm.extractvalue"(%308) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %317 = "llvm.load"(%311) : (!llvm.ptr) -> i32
      %318 = "llvm.getelementptr"(%316, %317) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %319 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %320 = "llvm.getelementptr"(%318, %319) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%320) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb50(%321 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %322 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %323 : !llvm.ptr, %324 : !llvm.struct<(!llvm.ptr)>):
      %325 = "mid.wrap"(%321) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %326 = "hi.cast"(%325) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %327 = "mid.wrap"(%324) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %328 = "hi.cast"(%327) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>
      %329 = "mid.unwrap"(%326) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %330 = "mid.unwrap"(%328) : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %331 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %332 = "hi.cast"(%326) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %333 = "mid.unwrap"(%332) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %334 = "hi.cast"(%328) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Iterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>
      %335 = "mid.unwrap"(%334) : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %336 = "mid.unwrap"(%331) : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %337 = "mid.parameterization"() {"id_hierarchy" = ["Iterable", ["any_typ"]], "name_hierarchy" = ["IterableIterable.T", ["Iterable.T"]]} : () -> !llvm.ptr
      %338 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["any_typ"]], "name_hierarchy" = ["FunctionIterable.T_to_Bool", ["Bool"], ["Iterable.T"]]} : () -> !llvm.ptr
      %339 = "mid.parameterizations_array"(%337, %338) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%339, %336, %333, %335) {"offset" = 3 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 54 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %340 = "hi.cast"(%331) {"from_typ" = !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "FilterIterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%340) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Iterable_filter_fFunctionT_to_Bool", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb51(%341 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %342 : !llvm.ptr):
      %343 = "mid.invariant"(%342) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %344 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb52] : () -> ()
    ^bb53:
      %345 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%345, %344) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb54] : () -> ()
    ^bb52:
      %346 = "llvm.getelementptr"(%342) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %347 = "mid.checkflag"(%346) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %348 = "llvm.load"(%347) : (!hi.bool) -> i1
      "cf.cond_br"(%348) [^bb53, ^bb53] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb54:
      %349 = "llvm.extractvalue"(%341) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %350 = "llvm.load"(%344) : (!llvm.ptr) -> i32
      %351 = "llvm.getelementptr"(%349, %350) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %352 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %353 = "llvm.getelementptr"(%351, %352) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%353) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb55(%354 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %355 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %356 : !llvm.ptr, %357 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %358 = "mid.wrap"(%354) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %359 = "hi.cast"(%358) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %360 = "mid.wrap"(%357) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %361 = "hi.cast"(%360) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %362 = "mid.unwrap"(%359) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %363 = "mid.unwrap"(%361) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %364 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ChainIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %365 = "hi.cast"(%359) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %366 = "mid.unwrap"(%365) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %367 = "hi.cast"(%361) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %368 = "mid.unwrap"(%367) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %369 = "mid.unwrap"(%364) : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %370 = "mid.parameterization"() {"id_hierarchy" = ["Iterable", ["any_typ"]], "name_hierarchy" = ["IterableIterable.T", ["Iterable.T"]]} : () -> !llvm.ptr
      %371 = "mid.parameterization"() {"id_hierarchy" = ["Iterable", ["any_typ"]], "name_hierarchy" = ["IterableIterable.T", ["Iterable.T"]]} : () -> !llvm.ptr
      %372 = "mid.parameterizations_array"(%370, %371) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%372, %369, %366, %368) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 54 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %373 = "hi.cast"(%364) {"from_typ" = !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "ChainIterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%373) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Iterable_chain_otherIterableT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb56(%374 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %375 : !llvm.ptr):
      %376 = "mid.invariant"(%375) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %377 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb57] : () -> ()
    ^bb58:
      %378 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%378, %377) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb59] : () -> ()
    ^bb57:
      %379 = "llvm.getelementptr"(%375) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %380 = "mid.checkflag"(%379) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %381 = "llvm.load"(%380) : (!hi.bool) -> i1
      "cf.cond_br"(%381) [^bb58, ^bb58] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb59:
      %382 = "llvm.extractvalue"(%374) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %383 = "llvm.load"(%377) : (!llvm.ptr) -> i32
      %384 = "llvm.getelementptr"(%382, %383) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %385 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %386 = "llvm.getelementptr"(%384, %385) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%386) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb60(%387 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %388 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %389 : !llvm.ptr, %390 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %391 = "mid.wrap"(%387) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %392 = "hi.cast"(%391) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %393 = "mid.wrap"(%390) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %394 = "hi.cast"(%393) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %395 = "mid.unwrap"(%392) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %396 = "mid.unwrap"(%394) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %397 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "InterleaveIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %398 = "hi.cast"(%392) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %399 = "mid.unwrap"(%398) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %400 = "hi.cast"(%394) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %401 = "mid.unwrap"(%400) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %402 = "mid.unwrap"(%397) : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %403 = "mid.parameterization"() {"id_hierarchy" = ["Iterable", ["any_typ"]], "name_hierarchy" = ["IterableIterable.T", ["Iterable.T"]]} : () -> !llvm.ptr
      %404 = "mid.parameterization"() {"id_hierarchy" = ["Iterable", ["any_typ"]], "name_hierarchy" = ["IterableIterable.T", ["Iterable.T"]]} : () -> !llvm.ptr
      %405 = "mid.parameterizations_array"(%403, %404) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%405, %402, %399, %401) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 54 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %406 = "hi.cast"(%397) {"from_typ" = !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      "mid.return"(%406) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> ()
    }) {"func_name" = "Iterable_interleave_otherIterableT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb61(%407 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %408 : !llvm.ptr):
      %409 = "mid.invariant"(%408) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %410 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb62] : () -> ()
    ^bb63:
      %411 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%411, %410) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb64] : () -> ()
    ^bb62:
      %412 = "llvm.getelementptr"(%408) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %413 = "mid.checkflag"(%412) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %414 = "llvm.load"(%413) : (!hi.bool) -> i1
      "cf.cond_br"(%414) [^bb63, ^bb63] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb64:
      %415 = "llvm.extractvalue"(%407) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %416 = "llvm.load"(%410) : (!llvm.ptr) -> i32
      %417 = "llvm.getelementptr"(%415, %416) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %418 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %419 = "llvm.getelementptr"(%417, %418) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%419) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb65(%420 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %421 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %422 : !llvm.ptr, %423 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %424 = "mid.wrap"(%420) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %425 = "hi.cast"(%424) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %426 = "mid.wrap"(%423) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %427 = "hi.cast"(%426) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %428 = "mid.unwrap"(%425) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %429 = "mid.unwrap"(%427) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %430 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>
      %431 = "hi.cast"(%425) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      %432 = "mid.unwrap"(%431) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %433 = "hi.cast"(%427) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      %434 = "mid.unwrap"(%433) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %435 = "mid.unwrap"(%430) : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %436 = "mid.parameterization"() {"id_hierarchy" = ["Iterable", ["any_typ"]], "name_hierarchy" = ["IterableIterable.T", ["Iterable.T"]]} : () -> !llvm.ptr
      %437 = "mid.parameterization"() {"id_hierarchy" = ["Iterable", ["any_typ"]], "name_hierarchy" = ["IterableIterable.U", ["Iterable.U"]]} : () -> !llvm.ptr
      %438 = "mid.parameterizations_array"(%436, %437) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%438, %435, %432, %434) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 56 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %439 = "hi.cast"(%430) {"from_typ" = !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>, "from_typ_name" = "ZipIterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>
      "mid.return"(%439) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>) -> ()
    }) {"func_name" = "Iterable_zip_otherIterableU", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb66(%440 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %441 : !llvm.ptr):
      %442 = "mid.invariant"(%441) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %443 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb67] : () -> ()
    ^bb68:
      %444 = "llvm.mlir.constant"() <{"value" = 52 : i32}> : () -> i32
      "llvm.store"(%444, %443) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb69] : () -> ()
    ^bb67:
      %445 = "llvm.getelementptr"(%441) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %446 = "mid.checkflag"(%445) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %447 = "llvm.load"(%446) : (!hi.bool) -> i1
      "cf.cond_br"(%447) [^bb68, ^bb68] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb69:
      %448 = "llvm.extractvalue"(%440) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %449 = "llvm.load"(%443) : (!llvm.ptr) -> i32
      %450 = "llvm.getelementptr"(%448, %449) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %451 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %452 = "llvm.getelementptr"(%450, %451) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%452) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb70(%453 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %454 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %455 : !llvm.ptr, %456 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %457 = "mid.wrap"(%453) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %458 = "hi.cast"(%457) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %459 = "mid.wrap"(%456) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %460 = "hi.cast"(%459) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %461 = "mid.unwrap"(%458) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %462 = "mid.unwrap"(%460) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %463 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ProductIterable", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>
      %464 = "hi.cast"(%458) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      %465 = "mid.unwrap"(%464) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %466 = "hi.cast"(%460) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>
      %467 = "mid.unwrap"(%466) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %468 = "mid.unwrap"(%463) : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %469 = "mid.parameterization"() {"id_hierarchy" = ["Iterable", ["any_typ"]], "name_hierarchy" = ["IterableIterable.T", ["Iterable.T"]]} : () -> !llvm.ptr
      %470 = "mid.parameterization"() {"id_hierarchy" = ["Iterable", ["any_typ"]], "name_hierarchy" = ["IterableIterable.U", ["Iterable.U"]]} : () -> !llvm.ptr
      %471 = "mid.parameterizations_array"(%469, %470) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%471, %468, %465, %467) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 56 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %472 = "hi.cast"(%463) {"from_typ" = !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>, "from_typ_name" = "ProductIterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>
      "mid.return"(%472) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Iterable">, !hi.type_param<"U", !hi.any, "Iterable">]>]>) -> ()
    }) {"func_name" = "Iterable_product_otherIterableU", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb71(%473 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %474 : !llvm.ptr):
      %475 = "mid.invariant"(%474) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %476 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb72] : () -> ()
    ^bb73:
      %477 = "llvm.mlir.constant"() <{"value" = 53 : i32}> : () -> i32
      "llvm.store"(%477, %476) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb74] : () -> ()
    ^bb72:
      %478 = "llvm.getelementptr"(%474) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %479 = "mid.checkflag"(%478) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %480 = "llvm.load"(%479) : (!hi.bool) -> i1
      "cf.cond_br"(%480) [^bb73, ^bb73] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb74:
      %481 = "llvm.extractvalue"(%473) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %482 = "llvm.load"(%476) : (!llvm.ptr) -> i32
      %483 = "llvm.getelementptr"(%481, %482) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<25 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %484 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %485 = "llvm.getelementptr"(%483, %484) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%485) : (!llvm.ptr) -> ()
    }) {"func_name" = "Iterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Enumeration", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Enumeration_getter_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableEnumeration.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Enumeration_setter_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableEnumeration.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Enumeration_field_iterable", "getter_name" = "Enumeration_getter_iterable", "setter_name" = "Enumeration_setter_iterable"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Enumeration_field_Enumeration_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Enumeration.T"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "Enumeration_field_Enumeration_1", "id_hierarchy" = ["Pair", ["i32_typ"], ["any_typ"]], "name_hierarchy" = ["Pairi32._Enumeration.T", ["i32"], ["Enumeration.T"]]} : () -> ()
    "mid.func"() ({
    ^bb75(%486 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %487 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %488 : !llvm.ptr, %489 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %490 = "mid.wrap"(%486) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %491 = "hi.cast"(%490) {"from_typ" = !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "to_typ" = !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "from_typ_name" = "Enumeration", "to_typ_name" = "Enumeration"} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %492 = "mid.wrap"(%489) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %493 = "hi.cast"(%492) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %494 = "hi.cast"(%493) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      "mid.set_field"(%491, %494) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> ()
    }) {"func_name" = "Enumeration_init_iterableIterableT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb76(%495 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %496 : !llvm.ptr):
      %497 = "mid.invariant"(%496) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %498 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb77] : () -> ()
    ^bb78:
      %499 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%499, %498) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb79] : () -> ()
    ^bb77:
      %500 = "llvm.getelementptr"(%496) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %501 = "mid.checkflag"(%500) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %502 = "llvm.load"(%501) : (!hi.bool) -> i1
      "cf.cond_br"(%502) [^bb78, ^bb78] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb79:
      %503 = "llvm.extractvalue"(%495) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %504 = "llvm.load"(%498) : (!llvm.ptr) -> i32
      %505 = "llvm.getelementptr"(%503, %504) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %506 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %507 = "llvm.getelementptr"(%505, %506) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%507) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_init_iterableIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb80(%508 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %509 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %510 : !llvm.ptr):
      %511 = "mid.wrap"(%508) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %512 = "hi.cast"(%511) {"from_typ" = !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "to_typ" = !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "from_typ_name" = "Enumeration", "to_typ_name" = "Enumeration"} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %513 = "mid.get_field"(%512) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %514 = "mid.unwrap"(%513) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %515 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %516 = "mid.method_call"(%515, %514) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %517 = "hi.cast"(%516) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %518 = "mid.unwrap"(%517) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %519 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "Enumerator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %520 = "mid.get_field"(%512) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"Enumeration", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %521 = "mid.unwrap"(%520) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %522 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %523 = "mid.method_call"(%522, %521) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %524 = "hi.cast"(%523) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumeration">]>
      %525 = "hi.cast"(%524) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %526 = "mid.unwrap"(%525) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %527 = "mid.unwrap"(%519) : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %528 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorEnumeration.T", ["Enumeration.T"]]} : () -> !llvm.ptr
      %529 = "mid.parameterizations_array"(%528) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%529, %527, %526) {"offset" = 4 : i32, "vptrs" = [#none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %530 = "hi.cast"(%519) {"from_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumeration">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumeration">]>]>, "from_typ_name" = "Enumerator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumeration">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumeration">]>]>
      "mid.return"(%530) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumeration">]>]>) -> ()
    }) {"func_name" = "Enumeration_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb81(%531 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %532 : !llvm.ptr):
      %533 = "mid.invariant"(%532) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %534 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb82] : () -> ()
    ^bb82:
      %535 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%535, %534) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb83] : () -> ()
    ^bb83:
      %536 = "llvm.extractvalue"(%531) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %537 = "llvm.load"(%534) : (!llvm.ptr) -> i32
      %538 = "llvm.getelementptr"(%536, %537) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %539 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %540 = "llvm.getelementptr"(%538, %539) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%540) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb84(%541 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %542 : !llvm.ptr):
      %543 = "mid.invariant"(%542) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %544 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb85] : () -> ()
    ^bb86:
      %545 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%545, %544) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb87] : () -> ()
    ^bb85:
      %546 = "llvm.getelementptr"(%542) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %547 = "mid.checkflag"(%546) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %548 = "llvm.load"(%547) : (!hi.bool) -> i1
      "cf.cond_br"(%548) [^bb86, ^bb86] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb87:
      %549 = "llvm.extractvalue"(%541) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %550 = "llvm.load"(%544) : (!llvm.ptr) -> i32
      %551 = "llvm.getelementptr"(%549, %550) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %552 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %553 = "llvm.getelementptr"(%551, %552) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%553) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb88(%554 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %555 : !llvm.ptr):
      %556 = "mid.invariant"(%555) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %557 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb89] : () -> ()
    ^bb90:
      %558 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%558, %557) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb91] : () -> ()
    ^bb92:
      %559 = "llvm.getelementptr"(%555) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %560 = "mid.checkflag"(%559) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %561 = "llvm.load"(%560) : (!hi.bool) -> i1
      "cf.cond_br"(%561) [^bb90, ^bb90] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb89:
      %562 = "llvm.getelementptr"(%555) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %563 = "mid.checkflag"(%562) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %564 = "llvm.load"(%563) : (!hi.bool) -> i1
      "cf.cond_br"(%564) [^bb92, ^bb92] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb91:
      %565 = "llvm.extractvalue"(%554) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %566 = "llvm.load"(%557) : (!llvm.ptr) -> i32
      %567 = "llvm.getelementptr"(%565, %566) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %568 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %569 = "llvm.getelementptr"(%567, %568) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%569) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb93(%570 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %571 : !llvm.ptr):
      %572 = "mid.invariant"(%571) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %573 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb94] : () -> ()
    ^bb95:
      %574 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%574, %573) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb96] : () -> ()
    ^bb94:
      %575 = "llvm.getelementptr"(%571) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %576 = "mid.checkflag"(%575) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %577 = "llvm.load"(%576) : (!hi.bool) -> i1
      "cf.cond_br"(%577) [^bb95, ^bb95] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb96:
      %578 = "llvm.extractvalue"(%570) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %579 = "llvm.load"(%573) : (!llvm.ptr) -> i32
      %580 = "llvm.getelementptr"(%578, %579) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %581 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %582 = "llvm.getelementptr"(%580, %581) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%582) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb97(%583 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %584 : !llvm.ptr):
      %585 = "mid.invariant"(%584) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %586 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb98] : () -> ()
    ^bb99:
      %587 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%587, %586) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb100] : () -> ()
    ^bb98:
      %588 = "llvm.getelementptr"(%584) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %589 = "mid.checkflag"(%588) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %590 = "llvm.load"(%589) : (!hi.bool) -> i1
      "cf.cond_br"(%590) [^bb99, ^bb99] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb100:
      %591 = "llvm.extractvalue"(%583) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %592 = "llvm.load"(%586) : (!llvm.ptr) -> i32
      %593 = "llvm.getelementptr"(%591, %592) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %594 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %595 = "llvm.getelementptr"(%593, %594) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%595) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb101(%596 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %597 : !llvm.ptr):
      %598 = "mid.invariant"(%597) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %599 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb102] : () -> ()
    ^bb102:
      %600 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%600, %599) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb103] : () -> ()
    ^bb103:
      %601 = "llvm.extractvalue"(%596) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %602 = "llvm.load"(%599) : (!llvm.ptr) -> i32
      %603 = "llvm.getelementptr"(%601, %602) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %604 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %605 = "llvm.getelementptr"(%603, %604) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%605) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb104(%606 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %607 : !llvm.ptr):
      %608 = "mid.invariant"(%607) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %609 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb105] : () -> ()
    ^bb106:
      %610 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%610, %609) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb107] : () -> ()
    ^bb105:
      %611 = "llvm.getelementptr"(%607) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %612 = "mid.checkflag"(%611) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %613 = "llvm.load"(%612) : (!hi.bool) -> i1
      "cf.cond_br"(%613) [^bb106, ^bb106] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb107:
      %614 = "llvm.extractvalue"(%606) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %615 = "llvm.load"(%609) : (!llvm.ptr) -> i32
      %616 = "llvm.getelementptr"(%614, %615) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %617 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %618 = "llvm.getelementptr"(%616, %617) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%618) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb108(%619 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %620 : !llvm.ptr):
      %621 = "mid.invariant"(%620) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %622 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb109] : () -> ()
    ^bb110:
      %623 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%623, %622) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb111] : () -> ()
    ^bb109:
      %624 = "llvm.getelementptr"(%620) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %625 = "mid.checkflag"(%624) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %626 = "llvm.load"(%625) : (!hi.bool) -> i1
      "cf.cond_br"(%626) [^bb110, ^bb110] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb111:
      %627 = "llvm.extractvalue"(%619) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %628 = "llvm.load"(%622) : (!llvm.ptr) -> i32
      %629 = "llvm.getelementptr"(%627, %628) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %630 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %631 = "llvm.getelementptr"(%629, %630) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%631) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb112(%632 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %633 : !llvm.ptr):
      %634 = "mid.invariant"(%633) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %635 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb113] : () -> ()
    ^bb114:
      %636 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%636, %635) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb115] : () -> ()
    ^bb113:
      %637 = "llvm.getelementptr"(%633) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %638 = "mid.checkflag"(%637) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %639 = "llvm.load"(%638) : (!hi.bool) -> i1
      "cf.cond_br"(%639) [^bb114, ^bb114] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb115:
      %640 = "llvm.extractvalue"(%632) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %641 = "llvm.load"(%635) : (!llvm.ptr) -> i32
      %642 = "llvm.getelementptr"(%640, %641) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %643 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %644 = "llvm.getelementptr"(%642, %643) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%644) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb116(%645 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %646 : !llvm.ptr):
      %647 = "mid.invariant"(%646) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %648 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb117] : () -> ()
    ^bb118:
      %649 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%649, %648) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb119] : () -> ()
    ^bb117:
      %650 = "llvm.getelementptr"(%646) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %651 = "mid.checkflag"(%650) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %652 = "llvm.load"(%651) : (!hi.bool) -> i1
      "cf.cond_br"(%652) [^bb118, ^bb118] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb119:
      %653 = "llvm.extractvalue"(%645) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %654 = "llvm.load"(%648) : (!llvm.ptr) -> i32
      %655 = "llvm.getelementptr"(%653, %654) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %656 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %657 = "llvm.getelementptr"(%655, %656) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%657) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb120(%658 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %659 : !llvm.ptr):
      %660 = "mid.invariant"(%659) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %661 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb121] : () -> ()
    ^bb122:
      %662 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%662, %661) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb123] : () -> ()
    ^bb121:
      %663 = "llvm.getelementptr"(%659) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %664 = "mid.checkflag"(%663) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %665 = "llvm.load"(%664) : (!hi.bool) -> i1
      "cf.cond_br"(%665) [^bb122, ^bb122] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb123:
      %666 = "llvm.extractvalue"(%658) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %667 = "llvm.load"(%661) : (!llvm.ptr) -> i32
      %668 = "llvm.getelementptr"(%666, %667) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %669 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %670 = "llvm.getelementptr"(%668, %669) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%670) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb124(%671 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %672 : !llvm.ptr):
      %673 = "mid.invariant"(%672) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %674 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb125] : () -> ()
    ^bb126:
      %675 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%675, %674) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb127] : () -> ()
    ^bb125:
      %676 = "llvm.getelementptr"(%672) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %677 = "mid.checkflag"(%676) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %678 = "llvm.load"(%677) : (!hi.bool) -> i1
      "cf.cond_br"(%678) [^bb126, ^bb126] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb127:
      %679 = "llvm.extractvalue"(%671) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %680 = "llvm.load"(%674) : (!llvm.ptr) -> i32
      %681 = "llvm.getelementptr"(%679, %680) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %682 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %683 = "llvm.getelementptr"(%681, %682) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%683) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumeration_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Enumerator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Enumerator_getter_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorEnumerator.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Enumerator_setter_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorEnumerator.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Enumerator_field_iterator", "getter_name" = "Enumerator_getter_iterator", "setter_name" = "Enumerator_setter_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Enumerator_getter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Enumerator_setter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Enumerator_field_index", "getter_name" = "Enumerator_getter_index", "setter_name" = "Enumerator_setter_index"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "Enumerator_field_Enumerator_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Enumerator.T"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "Enumerator_field_Enumerator_1", "id_hierarchy" = ["Pair", ["i32_typ"], ["any_typ"]], "name_hierarchy" = ["Pairi32._Enumerator.T", ["i32"], ["Enumerator.T"]]} : () -> ()
    "mid.func"() ({
    ^bb128(%684 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %685 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %686 : !llvm.ptr, %687 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %688 = "mid.wrap"(%684) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %689 = "hi.cast"(%688) {"from_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Enumerator", "to_typ_name" = "Enumerator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %690 = "mid.wrap"(%687) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %691 = "hi.cast"(%690) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %692 = "hi.cast"(%691) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      "mid.set_field"(%689, %692) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> ()
      %693 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %694 = "hi.cast"(%693) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%689, %694) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Enumerator_init_iteratorIteratorT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb129(%695 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %696 : !llvm.ptr):
      %697 = "mid.invariant"(%696) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %698 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb130] : () -> ()
    ^bb131:
      %699 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%699, %698) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb132] : () -> ()
    ^bb130:
      %700 = "llvm.getelementptr"(%696) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %701 = "mid.checkflag"(%700) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %702 = "llvm.load"(%701) : (!hi.bool) -> i1
      "cf.cond_br"(%702) [^bb131, ^bb131] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb132:
      %703 = "llvm.extractvalue"(%695) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %704 = "llvm.load"(%698) : (!llvm.ptr) -> i32
      %705 = "llvm.getelementptr"(%703, %704) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %706 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %707 = "llvm.getelementptr"(%705, %706) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%707) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerator_B_init_iteratorIteratorT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb133(%708 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %709 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %710 : !llvm.ptr):
      %711 = "mid.wrap"(%708) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %712 = "hi.cast"(%711) {"from_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Enumerator", "to_typ_name" = "Enumerator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %713 = "mid.get_field"(%712) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %714 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %715 = "mid.unwrap"(%713) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %716 = "mid.unwrap"(%714) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %717 = "mid.arithmetic"(%715, %716) {"op" = "ADD"} : (i32, i32) -> i32
      %718 = "mid.wrap"(%717) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %719 = "hi.cast"(%718) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%712, %719) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %720 = "mid.get_field"(%712) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %721 = "mid.unwrap"(%720) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %722 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %723 = "mid.method_call"(%722, %721) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %724 = "hi.cast"(%723) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>
      %725 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Enumerator.T"]} : () -> !llvm.ptr
      %726 = "mid.checkflag"(%724) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %727 = "mid.unwrap"(%726) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %728 = "hi.cast"(%724) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>
      "mid.if"(%727) ({
        %729 = "hi.cast"(%728) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Enumerator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Enumerator">
        %730 = "mid.get_field"(%712) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %731 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %732 = "mid.unwrap"(%730) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %733 = "mid.unwrap"(%731) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %734 = "mid.arithmetic"(%732, %733) {"op" = "SUB"} : (i32, i32) -> i32
        %735 = "mid.wrap"(%734) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %736 = "mid.unwrap"(%735) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %737 = "mid.unwrap"(%729) : (!hi.type_param<"T", !hi.any, "Enumerator">) -> !llvm.struct<(!llvm.ptr, i160)>
        %738 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumerator">]>
        %739 = "mid.get_field"(%712) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %740 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %741 = "mid.unwrap"(%739) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %742 = "mid.unwrap"(%740) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %743 = "mid.arithmetic"(%741, %742) {"op" = "SUB"} : (i32, i32) -> i32
        %744 = "mid.wrap"(%743) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %745 = "hi.cast"(%744) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.type_param<"T", !hi.any, "Pair">
        %746 = "mid.unwrap"(%745) : (!hi.type_param<"T", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %747 = "hi.cast"(%729) {"from_typ" = !hi.type_param<"T", !hi.any, "Enumerator">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Enumerator">) -> !hi.type_param<"U", !hi.any, "Pair">
        %748 = "mid.unwrap"(%747) : (!hi.type_param<"U", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %749 = "mid.unwrap"(%738) : (!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumerator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %750 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %751 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Enumerator.T"]} : () -> !llvm.ptr
        %752 = "mid.parameterizations_array"(%750, %751) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%752, %749, %746, %748) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "any_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %753 = "hi.cast"(%738) {"from_typ" = !hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumerator">]>, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumerator">]>, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumerator">]>) -> !hi.union<[!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumerator">]>, !hi.nil]>
        "mid.return"(%753) : (!hi.union<[!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumerator">]>, !hi.nil]>) -> ()
        %754 = "hi.cast"(%729) {"from_typ" = !hi.type_param<"T", !hi.any, "Enumerator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Enumerator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>
        "mid.assign"(%728, %754) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "Enumerator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %755 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %756 = "hi.cast"(%755) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumerator">]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumerator">]>, !hi.nil]>
      "mid.return"(%756) : (!hi.union<[!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Enumerator">]>, !hi.nil]>) -> ()
    }) {"func_name" = "Enumerator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb134(%757 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %758 : !llvm.ptr):
      %759 = "mid.invariant"(%758) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %760 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb135] : () -> ()
    ^bb135:
      %761 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%761, %760) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb136] : () -> ()
    ^bb136:
      %762 = "llvm.extractvalue"(%757) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %763 = "llvm.load"(%760) : (!llvm.ptr) -> i32
      %764 = "llvm.getelementptr"(%762, %763) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %765 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %766 = "llvm.getelementptr"(%764, %765) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%766) : (!llvm.ptr) -> ()
    }) {"func_name" = "Enumerator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_MapIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "MapIterable_getter_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableMapIterable.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MapIterable_setter_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableMapIterable.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MapIterable_field_iterable", "getter_name" = "MapIterable_getter_iterable", "setter_name" = "MapIterable_setter_iterable"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MapIterable_getter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterable.T_to_MapIterable.U"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MapIterable_setter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterable.T_to_MapIterable.U"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MapIterable_field_f", "getter_name" = "MapIterable_getter_f", "setter_name" = "MapIterable_setter_f"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "MapIterable_field_MapIterable_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["MapIterable.T"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "MapIterable_field_MapIterable_1", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["MapIterable.U"]} : () -> ()
    "mid.func"() ({
    ^bb137(%767 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %768 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %769 : !llvm.ptr, %770 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %771 : !llvm.struct<(!llvm.ptr)>):
      %772 = "mid.wrap"(%767) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>
      %773 = "hi.cast"(%772) {"from_typ" = !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>, "to_typ" = !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable"} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>
      %774 = "mid.wrap"(%770) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      %775 = "hi.cast"(%774) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      %776 = "hi.cast"(%775) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      "mid.set_field"(%773, %776) {"offset" = 0 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> ()
      %777 = "mid.wrap"(%771) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>
      %778 = "hi.cast"(%777) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>
      %779 = "hi.cast"(%778) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>
      "mid.set_field"(%773, %779) {"offset" = 1 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>, !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>) -> ()
    }) {"func_name" = "MapIterable_init_iterableIterableT_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb138(%780 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %781 : !llvm.ptr):
      %782 = "mid.invariant"(%781) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %783 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb139] : () -> ()
    ^bb140:
      %784 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%784, %783) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb141] : () -> ()
    ^bb142:
      %785 = "llvm.getelementptr"(%781) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %786 = "mid.checkflag"(%785) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %787 = "llvm.load"(%786) : (!hi.bool) -> i1
      "cf.cond_br"(%787) [^bb140, ^bb140] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb139:
      %788 = "llvm.getelementptr"(%781) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %789 = "mid.checkflag"(%788) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %790 = "llvm.load"(%789) : (!hi.bool) -> i1
      "cf.cond_br"(%790) [^bb142, ^bb142] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb141:
      %791 = "llvm.extractvalue"(%780) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %792 = "llvm.load"(%783) : (!llvm.ptr) -> i32
      %793 = "llvm.getelementptr"(%791, %792) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %794 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %795 = "llvm.getelementptr"(%793, %794) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%795) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_init_iterableIterableT_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb143(%796 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %797 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %798 : !llvm.ptr):
      %799 = "mid.wrap"(%796) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>
      %800 = "hi.cast"(%799) {"from_typ" = !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>, "to_typ" = !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable"} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>
      %801 = "mid.get_field"(%800) {"offset" = 0 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      %802 = "mid.unwrap"(%801) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %803 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %804 = "mid.method_call"(%803, %802) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %805 = "hi.cast"(%804) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      %806 = "mid.get_field"(%800) {"offset" = 1 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>
      %807 = "mid.unwrap"(%805) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %808 = "mid.unwrap"(%806) : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>) -> !llvm.struct<(!llvm.ptr)>
      %809 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>
      %810 = "mid.get_field"(%800) {"offset" = 0 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      %811 = "mid.unwrap"(%810) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %812 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %813 = "mid.method_call"(%812, %811) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %814 = "hi.cast"(%813) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterable">]>
      %815 = "mid.get_field"(%800) {"offset" = 1 : i64, "vtable_bytes" = 440 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MapIterable", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>
      %816 = "hi.cast"(%814) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>
      %817 = "mid.unwrap"(%816) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %818 = "hi.cast"(%815) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterable">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterable">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>
      %819 = "mid.unwrap"(%818) : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>) -> !llvm.struct<(!llvm.ptr)>
      %820 = "mid.unwrap"(%809) : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %821 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorMapIterable.T", ["MapIterable.T"]]} : () -> !llvm.ptr
      %822 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["any_typ"], ["any_typ"]], "name_hierarchy" = ["FunctionMapIterable.T_to_MapIterable.U", ["MapIterable.U"], ["MapIterable.T"]]} : () -> !llvm.ptr
      %823 = "mid.parameterizations_array"(%821, %822) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%823, %820, %817, %819) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %824 = "hi.cast"(%809) {"from_typ" = !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MapIterable">]>, "from_typ_name" = "MapIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterable">, !hi.type_param<"U", !hi.any, "MapIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MapIterable">]>
      "mid.return"(%824) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MapIterable">]>) -> ()
    }) {"func_name" = "MapIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb144(%825 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %826 : !llvm.ptr):
      %827 = "mid.invariant"(%826) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %828 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb145] : () -> ()
    ^bb145:
      %829 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%829, %828) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb146] : () -> ()
    ^bb146:
      %830 = "llvm.extractvalue"(%825) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %831 = "llvm.load"(%828) : (!llvm.ptr) -> i32
      %832 = "llvm.getelementptr"(%830, %831) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %833 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %834 = "llvm.getelementptr"(%832, %833) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%834) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb147(%835 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %836 : !llvm.ptr):
      %837 = "mid.invariant"(%836) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %838 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb148] : () -> ()
    ^bb149:
      %839 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%839, %838) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb150] : () -> ()
    ^bb148:
      %840 = "llvm.getelementptr"(%836) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %841 = "mid.checkflag"(%840) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %842 = "llvm.load"(%841) : (!hi.bool) -> i1
      "cf.cond_br"(%842) [^bb149, ^bb149] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb150:
      %843 = "llvm.extractvalue"(%835) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %844 = "llvm.load"(%838) : (!llvm.ptr) -> i32
      %845 = "llvm.getelementptr"(%843, %844) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %846 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %847 = "llvm.getelementptr"(%845, %846) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%847) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb151(%848 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %849 : !llvm.ptr):
      %850 = "mid.invariant"(%849) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %851 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb152] : () -> ()
    ^bb153:
      %852 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%852, %851) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb154] : () -> ()
    ^bb155:
      %853 = "llvm.getelementptr"(%849) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %854 = "mid.checkflag"(%853) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %855 = "llvm.load"(%854) : (!hi.bool) -> i1
      "cf.cond_br"(%855) [^bb153, ^bb153] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb152:
      %856 = "llvm.getelementptr"(%849) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %857 = "mid.checkflag"(%856) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %858 = "llvm.load"(%857) : (!hi.bool) -> i1
      "cf.cond_br"(%858) [^bb155, ^bb155] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb154:
      %859 = "llvm.extractvalue"(%848) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %860 = "llvm.load"(%851) : (!llvm.ptr) -> i32
      %861 = "llvm.getelementptr"(%859, %860) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %862 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %863 = "llvm.getelementptr"(%861, %862) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%863) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb156(%864 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %865 : !llvm.ptr):
      %866 = "mid.invariant"(%865) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %867 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb157] : () -> ()
    ^bb158:
      %868 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%868, %867) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb159] : () -> ()
    ^bb157:
      %869 = "llvm.getelementptr"(%865) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %870 = "mid.checkflag"(%869) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %871 = "llvm.load"(%870) : (!hi.bool) -> i1
      "cf.cond_br"(%871) [^bb158, ^bb158] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb159:
      %872 = "llvm.extractvalue"(%864) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %873 = "llvm.load"(%867) : (!llvm.ptr) -> i32
      %874 = "llvm.getelementptr"(%872, %873) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %875 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %876 = "llvm.getelementptr"(%874, %875) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%876) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb160(%877 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %878 : !llvm.ptr):
      %879 = "mid.invariant"(%878) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %880 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb161] : () -> ()
    ^bb162:
      %881 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%881, %880) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb163] : () -> ()
    ^bb161:
      %882 = "llvm.getelementptr"(%878) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %883 = "mid.checkflag"(%882) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %884 = "llvm.load"(%883) : (!hi.bool) -> i1
      "cf.cond_br"(%884) [^bb162, ^bb162] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb163:
      %885 = "llvm.extractvalue"(%877) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %886 = "llvm.load"(%880) : (!llvm.ptr) -> i32
      %887 = "llvm.getelementptr"(%885, %886) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %888 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %889 = "llvm.getelementptr"(%887, %888) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%889) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb164(%890 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %891 : !llvm.ptr):
      %892 = "mid.invariant"(%891) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %893 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb165] : () -> ()
    ^bb165:
      %894 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%894, %893) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb166] : () -> ()
    ^bb166:
      %895 = "llvm.extractvalue"(%890) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %896 = "llvm.load"(%893) : (!llvm.ptr) -> i32
      %897 = "llvm.getelementptr"(%895, %896) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %898 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %899 = "llvm.getelementptr"(%897, %898) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%899) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb167(%900 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %901 : !llvm.ptr):
      %902 = "mid.invariant"(%901) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %903 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb168] : () -> ()
    ^bb169:
      %904 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%904, %903) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb170] : () -> ()
    ^bb168:
      %905 = "llvm.getelementptr"(%901) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %906 = "mid.checkflag"(%905) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %907 = "llvm.load"(%906) : (!hi.bool) -> i1
      "cf.cond_br"(%907) [^bb169, ^bb169] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb170:
      %908 = "llvm.extractvalue"(%900) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %909 = "llvm.load"(%903) : (!llvm.ptr) -> i32
      %910 = "llvm.getelementptr"(%908, %909) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %911 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %912 = "llvm.getelementptr"(%910, %911) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%912) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb171(%913 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %914 : !llvm.ptr):
      %915 = "mid.invariant"(%914) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %916 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb172] : () -> ()
    ^bb173:
      %917 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%917, %916) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb174] : () -> ()
    ^bb172:
      %918 = "llvm.getelementptr"(%914) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %919 = "mid.checkflag"(%918) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %920 = "llvm.load"(%919) : (!hi.bool) -> i1
      "cf.cond_br"(%920) [^bb173, ^bb173] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb174:
      %921 = "llvm.extractvalue"(%913) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %922 = "llvm.load"(%916) : (!llvm.ptr) -> i32
      %923 = "llvm.getelementptr"(%921, %922) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %924 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %925 = "llvm.getelementptr"(%923, %924) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%925) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb175(%926 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %927 : !llvm.ptr):
      %928 = "mid.invariant"(%927) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %929 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb176] : () -> ()
    ^bb177:
      %930 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%930, %929) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb178] : () -> ()
    ^bb176:
      %931 = "llvm.getelementptr"(%927) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %932 = "mid.checkflag"(%931) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %933 = "llvm.load"(%932) : (!hi.bool) -> i1
      "cf.cond_br"(%933) [^bb177, ^bb177] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb178:
      %934 = "llvm.extractvalue"(%926) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %935 = "llvm.load"(%929) : (!llvm.ptr) -> i32
      %936 = "llvm.getelementptr"(%934, %935) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %937 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %938 = "llvm.getelementptr"(%936, %937) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%938) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb179(%939 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %940 : !llvm.ptr):
      %941 = "mid.invariant"(%940) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %942 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb180] : () -> ()
    ^bb181:
      %943 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%943, %942) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb182] : () -> ()
    ^bb180:
      %944 = "llvm.getelementptr"(%940) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %945 = "mid.checkflag"(%944) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %946 = "llvm.load"(%945) : (!hi.bool) -> i1
      "cf.cond_br"(%946) [^bb181, ^bb181] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb182:
      %947 = "llvm.extractvalue"(%939) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %948 = "llvm.load"(%942) : (!llvm.ptr) -> i32
      %949 = "llvm.getelementptr"(%947, %948) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %950 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %951 = "llvm.getelementptr"(%949, %950) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%951) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb183(%952 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %953 : !llvm.ptr):
      %954 = "mid.invariant"(%953) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %955 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb184] : () -> ()
    ^bb185:
      %956 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%956, %955) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb186] : () -> ()
    ^bb184:
      %957 = "llvm.getelementptr"(%953) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %958 = "mid.checkflag"(%957) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %959 = "llvm.load"(%958) : (!hi.bool) -> i1
      "cf.cond_br"(%959) [^bb185, ^bb185] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb186:
      %960 = "llvm.extractvalue"(%952) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %961 = "llvm.load"(%955) : (!llvm.ptr) -> i32
      %962 = "llvm.getelementptr"(%960, %961) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %963 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %964 = "llvm.getelementptr"(%962, %963) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%964) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb187(%965 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %966 : !llvm.ptr):
      %967 = "mid.invariant"(%966) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %968 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb188] : () -> ()
    ^bb189:
      %969 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%969, %968) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb190] : () -> ()
    ^bb188:
      %970 = "llvm.getelementptr"(%966) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %971 = "mid.checkflag"(%970) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %972 = "llvm.load"(%971) : (!hi.bool) -> i1
      "cf.cond_br"(%972) [^bb189, ^bb189] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb190:
      %973 = "llvm.extractvalue"(%965) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %974 = "llvm.load"(%968) : (!llvm.ptr) -> i32
      %975 = "llvm.getelementptr"(%973, %974) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %976 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %977 = "llvm.getelementptr"(%975, %976) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%977) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_MapIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "MapIterator_getter_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorMapIterator.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MapIterator_setter_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorMapIterator.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MapIterator_field_iterator", "getter_name" = "MapIterator_getter_iterator", "setter_name" = "MapIterator_setter_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MapIterator_getter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterator.T_to_MapIterator.U"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MapIterator_setter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterator.T_to_MapIterator.U"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MapIterator_field_f", "getter_name" = "MapIterator_getter_f", "setter_name" = "MapIterator_setter_f"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "MapIterator_field_MapIterator_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["MapIterator.T"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "MapIterator_field_MapIterator_1", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["MapIterator.U"]} : () -> ()
    "mid.func"() ({
    ^bb191(%978 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %979 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %980 : !llvm.ptr, %981 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %982 : !llvm.struct<(!llvm.ptr)>):
      %983 = "mid.wrap"(%978) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>
      %984 = "hi.cast"(%983) {"from_typ" = !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>, "to_typ" = !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>, "from_typ_name" = "MapIterator", "to_typ_name" = "MapIterator"} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>) -> !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>
      %985 = "mid.wrap"(%981) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>
      %986 = "hi.cast"(%985) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>
      %987 = "hi.cast"(%986) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>
      "mid.set_field"(%984, %987) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>) -> ()
      %988 = "mid.wrap"(%982) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>
      %989 = "hi.cast"(%988) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>
      %990 = "hi.cast"(%989) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>
      "mid.set_field"(%984, %990) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>, !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>) -> ()
    }) {"func_name" = "MapIterator_init_iteratorIteratorT_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb192(%991 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %992 : !llvm.ptr):
      %993 = "mid.invariant"(%992) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %994 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb193] : () -> ()
    ^bb194:
      %995 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%995, %994) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb195] : () -> ()
    ^bb196:
      %996 = "llvm.getelementptr"(%992) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %997 = "mid.checkflag"(%996) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %998 = "llvm.load"(%997) : (!hi.bool) -> i1
      "cf.cond_br"(%998) [^bb194, ^bb194] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb193:
      %999 = "llvm.getelementptr"(%992) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1000 = "mid.checkflag"(%999) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1001 = "llvm.load"(%1000) : (!hi.bool) -> i1
      "cf.cond_br"(%1001) [^bb196, ^bb196] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb195:
      %1002 = "llvm.extractvalue"(%991) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1003 = "llvm.load"(%994) : (!llvm.ptr) -> i32
      %1004 = "llvm.getelementptr"(%1002, %1003) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1005 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1006 = "llvm.getelementptr"(%1004, %1005) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1006) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb197(%1007 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1008 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1009 : !llvm.ptr):
      %1010 = "mid.wrap"(%1007) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>
      %1011 = "hi.cast"(%1010) {"from_typ" = !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>, "to_typ" = !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>, "from_typ_name" = "MapIterator", "to_typ_name" = "MapIterator"} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>) -> !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>
      %1012 = "mid.get_field"(%1011) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>
      %1013 = "mid.unwrap"(%1012) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1014 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1015 = "mid.method_call"(%1014, %1013) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %1016 = "hi.cast"(%1015) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>
      %1017 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["MapIterator.T"]} : () -> !llvm.ptr
      %1018 = "mid.checkflag"(%1016) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %1019 = "mid.unwrap"(%1018) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %1020 = "hi.cast"(%1016) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>
      "mid.if"(%1019) ({
        %1021 = "hi.cast"(%1020) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "MapIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "MapIterator">
        %1022 = "hi.cast"(%1021) {"from_typ" = !hi.type_param<"T", !hi.any, "MapIterator">, "to_typ" = !hi.type_param<"T", !hi.any, "MapIterator">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "MapIterator">) -> !hi.type_param<"T", !hi.any, "MapIterator">
        %1023 = "mid.unwrap"(%1022) : (!hi.type_param<"T", !hi.any, "MapIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1024 = "mid.get_field"(%1011) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MapIterator">, !hi.type_param<"U", !hi.any, "MapIterator">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>
        %1025 = "mid.unwrap"(%1024) : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>) -> !llvm.ptr
        %1026 = "mid.fptr_call"(%1025, %1023) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"U", !hi.any, "MapIterator">
        %1027 = "hi.cast"(%1026) {"from_typ" = !hi.type_param<"U", !hi.any, "MapIterator">, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "MapIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"U", !hi.any, "MapIterator">) -> !hi.union<[!hi.type_param<"U", !hi.any, "MapIterator">, !hi.nil]>
        "mid.return"(%1027) : (!hi.union<[!hi.type_param<"U", !hi.any, "MapIterator">, !hi.nil]>) -> ()
        %1028 = "hi.cast"(%1021) {"from_typ" = !hi.type_param<"T", !hi.any, "MapIterator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "MapIterator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>
        "mid.assign"(%1020, %1028) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "MapIterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %1029 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %1030 = "hi.cast"(%1029) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "MapIterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"U", !hi.any, "MapIterator">, !hi.nil]>
      "mid.return"(%1030) : (!hi.union<[!hi.type_param<"U", !hi.any, "MapIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "MapIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb198(%1031 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1032 : !llvm.ptr):
      %1033 = "mid.invariant"(%1032) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1034 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb199] : () -> ()
    ^bb199:
      %1035 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%1035, %1034) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb200] : () -> ()
    ^bb200:
      %1036 = "llvm.extractvalue"(%1031) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1037 = "llvm.load"(%1034) : (!llvm.ptr) -> i32
      %1038 = "llvm.getelementptr"(%1036, %1037) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1039 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1040 = "llvm.getelementptr"(%1038, %1039) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1040) : (!llvm.ptr) -> ()
    }) {"func_name" = "MapIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FilterIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "FilterIterable_getter_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableFilterIterable.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FilterIterable_setter_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableFilterIterable.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FilterIterable_field_iterable", "getter_name" = "FilterIterable_getter_iterable", "setter_name" = "FilterIterable_setter_iterable"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FilterIterable_getter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterable.T_to_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FilterIterable_setter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterable.T_to_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FilterIterable_field_f", "getter_name" = "FilterIterable_getter_f", "setter_name" = "FilterIterable_setter_f"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "FilterIterable_field_FilterIterable_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["FilterIterable.T"]} : () -> ()
    "mid.func"() ({
    ^bb201(%1041 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1042 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1043 : !llvm.ptr, %1044 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1045 : !llvm.struct<(!llvm.ptr)>):
      %1046 = "mid.wrap"(%1041) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1047 = "hi.cast"(%1046) {"from_typ" = !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "to_typ" = !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "FilterIterable", "to_typ_name" = "FilterIterable"} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1048 = "mid.wrap"(%1044) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1049 = "hi.cast"(%1048) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1050 = "hi.cast"(%1049) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      "mid.set_field"(%1047, %1050) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> ()
      %1051 = "mid.wrap"(%1045) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>
      %1052 = "hi.cast"(%1051) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>
      %1053 = "hi.cast"(%1052) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>
      "mid.set_field"(%1047, %1053) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>) -> ()
    }) {"func_name" = "FilterIterable_init_iterableIterableT_fFunctionT_to_Bool", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb202(%1054 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1055 : !llvm.ptr):
      %1056 = "mid.invariant"(%1055) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1057 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb203] : () -> ()
    ^bb204:
      %1058 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%1058, %1057) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb205] : () -> ()
    ^bb206:
      %1059 = "llvm.getelementptr"(%1055) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1060 = "mid.checkflag"(%1059) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1061 = "llvm.load"(%1060) : (!hi.bool) -> i1
      "cf.cond_br"(%1061) [^bb204, ^bb204] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb203:
      %1062 = "llvm.getelementptr"(%1055) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1063 = "mid.checkflag"(%1062) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1064 = "llvm.load"(%1063) : (!hi.bool) -> i1
      "cf.cond_br"(%1064) [^bb206, ^bb206] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb205:
      %1065 = "llvm.extractvalue"(%1054) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1066 = "llvm.load"(%1057) : (!llvm.ptr) -> i32
      %1067 = "llvm.getelementptr"(%1065, %1066) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1068 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1069 = "llvm.getelementptr"(%1067, %1068) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1069) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_init_iterableIterableT_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb207(%1070 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1071 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1072 : !llvm.ptr):
      %1073 = "mid.wrap"(%1070) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1074 = "hi.cast"(%1073) {"from_typ" = !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "to_typ" = !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "FilterIterable", "to_typ_name" = "FilterIterable"} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1075 = "mid.get_field"(%1074) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1076 = "mid.unwrap"(%1075) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1077 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1078 = "mid.method_call"(%1077, %1076) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1079 = "hi.cast"(%1078) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1080 = "mid.get_field"(%1074) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>
      %1081 = "mid.unwrap"(%1079) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1082 = "mid.unwrap"(%1080) : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %1083 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1084 = "mid.get_field"(%1074) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1085 = "mid.unwrap"(%1084) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1086 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1087 = "mid.method_call"(%1086, %1085) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1088 = "hi.cast"(%1087) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      %1089 = "mid.get_field"(%1074) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"FilterIterable", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>
      %1090 = "hi.cast"(%1088) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1091 = "mid.unwrap"(%1090) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1092 = "hi.cast"(%1089) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterable">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>
      %1093 = "mid.unwrap"(%1092) : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>) -> !llvm.struct<(!llvm.ptr)>
      %1094 = "mid.unwrap"(%1083) : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1095 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorFilterIterable.T", ["FilterIterable.T"]]} : () -> !llvm.ptr
      %1096 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["any_typ"]], "name_hierarchy" = ["FunctionFilterIterable.T_to_Bool", ["Bool"], ["FilterIterable.T"]]} : () -> !llvm.ptr
      %1097 = "mid.parameterizations_array"(%1095, %1096) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1097, %1094, %1091, %1093) {"offset" = 3 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %1098 = "hi.cast"(%1083) {"from_typ" = !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>, "from_typ_name" = "FilterIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>
      "mid.return"(%1098) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterable">]>) -> ()
    }) {"func_name" = "FilterIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb208(%1099 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1100 : !llvm.ptr):
      %1101 = "mid.invariant"(%1100) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1102 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb209] : () -> ()
    ^bb209:
      %1103 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%1103, %1102) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb210] : () -> ()
    ^bb210:
      %1104 = "llvm.extractvalue"(%1099) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1105 = "llvm.load"(%1102) : (!llvm.ptr) -> i32
      %1106 = "llvm.getelementptr"(%1104, %1105) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1107 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1108 = "llvm.getelementptr"(%1106, %1107) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1108) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb211(%1109 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1110 : !llvm.ptr):
      %1111 = "mid.invariant"(%1110) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1112 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb212] : () -> ()
    ^bb213:
      %1113 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1113, %1112) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb214] : () -> ()
    ^bb212:
      %1114 = "llvm.getelementptr"(%1110) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1115 = "mid.checkflag"(%1114) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1116 = "llvm.load"(%1115) : (!hi.bool) -> i1
      "cf.cond_br"(%1116) [^bb213, ^bb213] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb214:
      %1117 = "llvm.extractvalue"(%1109) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1118 = "llvm.load"(%1112) : (!llvm.ptr) -> i32
      %1119 = "llvm.getelementptr"(%1117, %1118) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1120 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1121 = "llvm.getelementptr"(%1119, %1120) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1121) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb215(%1122 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1123 : !llvm.ptr):
      %1124 = "mid.invariant"(%1123) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1125 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb216] : () -> ()
    ^bb217:
      %1126 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1126, %1125) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb218] : () -> ()
    ^bb219:
      %1127 = "llvm.getelementptr"(%1123) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1128 = "mid.checkflag"(%1127) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1129 = "llvm.load"(%1128) : (!hi.bool) -> i1
      "cf.cond_br"(%1129) [^bb217, ^bb217] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb216:
      %1130 = "llvm.getelementptr"(%1123) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1131 = "mid.checkflag"(%1130) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1132 = "llvm.load"(%1131) : (!hi.bool) -> i1
      "cf.cond_br"(%1132) [^bb219, ^bb219] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb218:
      %1133 = "llvm.extractvalue"(%1122) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1134 = "llvm.load"(%1125) : (!llvm.ptr) -> i32
      %1135 = "llvm.getelementptr"(%1133, %1134) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1136 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1137 = "llvm.getelementptr"(%1135, %1136) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1137) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb220(%1138 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1139 : !llvm.ptr):
      %1140 = "mid.invariant"(%1139) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1141 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb221] : () -> ()
    ^bb222:
      %1142 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1142, %1141) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb223] : () -> ()
    ^bb221:
      %1143 = "llvm.getelementptr"(%1139) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1144 = "mid.checkflag"(%1143) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1145 = "llvm.load"(%1144) : (!hi.bool) -> i1
      "cf.cond_br"(%1145) [^bb222, ^bb222] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb223:
      %1146 = "llvm.extractvalue"(%1138) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1147 = "llvm.load"(%1141) : (!llvm.ptr) -> i32
      %1148 = "llvm.getelementptr"(%1146, %1147) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1149 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1150 = "llvm.getelementptr"(%1148, %1149) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1150) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb224(%1151 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1152 : !llvm.ptr):
      %1153 = "mid.invariant"(%1152) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1154 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb225] : () -> ()
    ^bb226:
      %1155 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1155, %1154) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb227] : () -> ()
    ^bb225:
      %1156 = "llvm.getelementptr"(%1152) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1157 = "mid.checkflag"(%1156) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1158 = "llvm.load"(%1157) : (!hi.bool) -> i1
      "cf.cond_br"(%1158) [^bb226, ^bb226] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb227:
      %1159 = "llvm.extractvalue"(%1151) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1160 = "llvm.load"(%1154) : (!llvm.ptr) -> i32
      %1161 = "llvm.getelementptr"(%1159, %1160) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1162 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1163 = "llvm.getelementptr"(%1161, %1162) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1163) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb228(%1164 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1165 : !llvm.ptr):
      %1166 = "mid.invariant"(%1165) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1167 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb229] : () -> ()
    ^bb229:
      %1168 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1168, %1167) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb230] : () -> ()
    ^bb230:
      %1169 = "llvm.extractvalue"(%1164) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1170 = "llvm.load"(%1167) : (!llvm.ptr) -> i32
      %1171 = "llvm.getelementptr"(%1169, %1170) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1172 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1173 = "llvm.getelementptr"(%1171, %1172) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1173) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb231(%1174 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1175 : !llvm.ptr):
      %1176 = "mid.invariant"(%1175) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1177 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb232] : () -> ()
    ^bb233:
      %1178 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1178, %1177) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb234] : () -> ()
    ^bb232:
      %1179 = "llvm.getelementptr"(%1175) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1180 = "mid.checkflag"(%1179) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1181 = "llvm.load"(%1180) : (!hi.bool) -> i1
      "cf.cond_br"(%1181) [^bb233, ^bb233] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb234:
      %1182 = "llvm.extractvalue"(%1174) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1183 = "llvm.load"(%1177) : (!llvm.ptr) -> i32
      %1184 = "llvm.getelementptr"(%1182, %1183) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1185 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1186 = "llvm.getelementptr"(%1184, %1185) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1186) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb235(%1187 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1188 : !llvm.ptr):
      %1189 = "mid.invariant"(%1188) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1190 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb236] : () -> ()
    ^bb237:
      %1191 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1191, %1190) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb238] : () -> ()
    ^bb236:
      %1192 = "llvm.getelementptr"(%1188) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1193 = "mid.checkflag"(%1192) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1194 = "llvm.load"(%1193) : (!hi.bool) -> i1
      "cf.cond_br"(%1194) [^bb237, ^bb237] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb238:
      %1195 = "llvm.extractvalue"(%1187) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1196 = "llvm.load"(%1190) : (!llvm.ptr) -> i32
      %1197 = "llvm.getelementptr"(%1195, %1196) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1198 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1199 = "llvm.getelementptr"(%1197, %1198) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1199) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb239(%1200 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1201 : !llvm.ptr):
      %1202 = "mid.invariant"(%1201) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1203 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb240] : () -> ()
    ^bb241:
      %1204 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1204, %1203) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb242] : () -> ()
    ^bb240:
      %1205 = "llvm.getelementptr"(%1201) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1206 = "mid.checkflag"(%1205) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1207 = "llvm.load"(%1206) : (!hi.bool) -> i1
      "cf.cond_br"(%1207) [^bb241, ^bb241] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb242:
      %1208 = "llvm.extractvalue"(%1200) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1209 = "llvm.load"(%1203) : (!llvm.ptr) -> i32
      %1210 = "llvm.getelementptr"(%1208, %1209) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1211 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1212 = "llvm.getelementptr"(%1210, %1211) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1212) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb243(%1213 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1214 : !llvm.ptr):
      %1215 = "mid.invariant"(%1214) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1216 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb244] : () -> ()
    ^bb245:
      %1217 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1217, %1216) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb246] : () -> ()
    ^bb244:
      %1218 = "llvm.getelementptr"(%1214) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1219 = "mid.checkflag"(%1218) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1220 = "llvm.load"(%1219) : (!hi.bool) -> i1
      "cf.cond_br"(%1220) [^bb245, ^bb245] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb246:
      %1221 = "llvm.extractvalue"(%1213) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1222 = "llvm.load"(%1216) : (!llvm.ptr) -> i32
      %1223 = "llvm.getelementptr"(%1221, %1222) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1224 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1225 = "llvm.getelementptr"(%1223, %1224) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1225) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb247(%1226 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1227 : !llvm.ptr):
      %1228 = "mid.invariant"(%1227) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1229 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb248] : () -> ()
    ^bb249:
      %1230 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1230, %1229) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb250] : () -> ()
    ^bb248:
      %1231 = "llvm.getelementptr"(%1227) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1232 = "mid.checkflag"(%1231) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1233 = "llvm.load"(%1232) : (!hi.bool) -> i1
      "cf.cond_br"(%1233) [^bb249, ^bb249] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb250:
      %1234 = "llvm.extractvalue"(%1226) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1235 = "llvm.load"(%1229) : (!llvm.ptr) -> i32
      %1236 = "llvm.getelementptr"(%1234, %1235) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1237 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1238 = "llvm.getelementptr"(%1236, %1237) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1238) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb251(%1239 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1240 : !llvm.ptr):
      %1241 = "mid.invariant"(%1240) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1242 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb252] : () -> ()
    ^bb253:
      %1243 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1243, %1242) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb254] : () -> ()
    ^bb252:
      %1244 = "llvm.getelementptr"(%1240) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1245 = "mid.checkflag"(%1244) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1246 = "llvm.load"(%1245) : (!hi.bool) -> i1
      "cf.cond_br"(%1246) [^bb253, ^bb253] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb254:
      %1247 = "llvm.extractvalue"(%1239) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1248 = "llvm.load"(%1242) : (!llvm.ptr) -> i32
      %1249 = "llvm.getelementptr"(%1247, %1248) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1250 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1251 = "llvm.getelementptr"(%1249, %1250) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1251) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FilterIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "FilterIterator_getter_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorFilterIterator.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FilterIterator_setter_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorFilterIterator.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FilterIterator_field_iterator", "getter_name" = "FilterIterator_getter_iterator", "setter_name" = "FilterIterator_setter_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FilterIterator_getter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterator.T_to_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FilterIterator_setter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterator.T_to_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FilterIterator_field_f", "getter_name" = "FilterIterator_getter_f", "setter_name" = "FilterIterator_setter_f"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "FilterIterator_field_FilterIterator_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["FilterIterator.T"]} : () -> ()
    "mid.func"() ({
    ^bb255(%1252 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1253 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1254 : !llvm.ptr, %1255 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1256 : !llvm.struct<(!llvm.ptr)>):
      %1257 = "mid.wrap"(%1252) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1258 = "hi.cast"(%1257) {"from_typ" = !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "to_typ" = !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "from_typ_name" = "FilterIterator", "to_typ_name" = "FilterIterator"} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1259 = "mid.wrap"(%1255) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1260 = "hi.cast"(%1259) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1261 = "hi.cast"(%1260) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      "mid.set_field"(%1258, %1261) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> ()
      %1262 = "mid.wrap"(%1256) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>
      %1263 = "hi.cast"(%1262) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>
      %1264 = "hi.cast"(%1263) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>
      "mid.set_field"(%1258, %1264) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>) -> ()
    }) {"func_name" = "FilterIterator_init_iteratorIteratorT_fFunctionT_to_Bool", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb256(%1265 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1266 : !llvm.ptr):
      %1267 = "mid.invariant"(%1266) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1268 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb257] : () -> ()
    ^bb258:
      %1269 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%1269, %1268) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb259] : () -> ()
    ^bb260:
      %1270 = "llvm.getelementptr"(%1266) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1271 = "mid.checkflag"(%1270) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1272 = "llvm.load"(%1271) : (!hi.bool) -> i1
      "cf.cond_br"(%1272) [^bb258, ^bb258] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb257:
      %1273 = "llvm.getelementptr"(%1266) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1274 = "mid.checkflag"(%1273) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1275 = "llvm.load"(%1274) : (!hi.bool) -> i1
      "cf.cond_br"(%1275) [^bb260, ^bb260] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb259:
      %1276 = "llvm.extractvalue"(%1265) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1277 = "llvm.load"(%1268) : (!llvm.ptr) -> i32
      %1278 = "llvm.getelementptr"(%1276, %1277) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1279 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1280 = "llvm.getelementptr"(%1278, %1279) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1280) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb261(%1281 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1282 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1283 : !llvm.ptr):
      %1284 = "mid.wrap"(%1281) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1285 = "hi.cast"(%1284) {"from_typ" = !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "to_typ" = !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>, "from_typ_name" = "FilterIterator", "to_typ_name" = "FilterIterator"} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1286 = "mid.get_field"(%1285) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
      %1287 = "mid.unwrap"(%1286) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1288 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1289 = "mid.method_call"(%1288, %1287) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %1290 = "hi.cast"(%1289) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>
      %1291 = "hi.cast"(%1290) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>
      "mid.while"() ({
        %1292 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["FilterIterator.T"]} : () -> !llvm.ptr
        %1293 = "mid.checkflag"(%1291) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %1294 = "mid.unwrap"(%1293) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %1295 = "hi.cast"(%1291) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "FilterIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "FilterIterator">
        %1296 = "hi.cast"(%1295) {"from_typ" = !hi.type_param<"T", !hi.any, "FilterIterator">, "to_typ" = !hi.type_param<"T", !hi.any, "FilterIterator">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "FilterIterator">) -> !hi.type_param<"T", !hi.any, "FilterIterator">
        %1297 = "mid.unwrap"(%1296) : (!hi.type_param<"T", !hi.any, "FilterIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1298 = "mid.get_field"(%1285) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>
        %1299 = "mid.unwrap"(%1298) : (!hi.function<[!hi.type_param<"T", !hi.any, "FilterIterator">], !hi.any, !hi.bool>) -> !llvm.ptr
        %1300 = "mid.fptr_call"(%1299, %1297) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.bool
        %1301 = "mid.unwrap"(%1300) : (!hi.bool) -> i1
        "mid.if"(%1301) ({
          %1302 = "hi.cast"(%1295) {"from_typ" = !hi.type_param<"T", !hi.any, "FilterIterator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "FilterIterator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>
          "mid.return"(%1302) : (!hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %1303 = "mid.get_field"(%1285) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"FilterIterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>
        %1304 = "mid.unwrap"(%1303) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "FilterIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1305 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1306 = "mid.method_call"(%1305, %1304) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %1307 = "hi.cast"(%1306) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>
        %1308 = "hi.cast"(%1307) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>
        "mid.assign"(%1291, %1308) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>) -> ()
      }) : () -> ()
      %1309 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %1310 = "hi.cast"(%1309) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>
      "mid.return"(%1310) : (!hi.union<[!hi.type_param<"T", !hi.any, "FilterIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "FilterIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb262(%1311 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1312 : !llvm.ptr):
      %1313 = "mid.invariant"(%1312) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1314 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb263] : () -> ()
    ^bb263:
      %1315 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1315, %1314) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb264] : () -> ()
    ^bb264:
      %1316 = "llvm.extractvalue"(%1311) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1317 = "llvm.load"(%1314) : (!llvm.ptr) -> i32
      %1318 = "llvm.getelementptr"(%1316, %1317) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1319 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1320 = "llvm.getelementptr"(%1318, %1319) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1320) : (!llvm.ptr) -> ()
    }) {"func_name" = "FilterIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ChainIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainIterable_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChainIterable.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainIterable_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChainIterable.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainIterable_field_first", "getter_name" = "ChainIterable_getter_first", "setter_name" = "ChainIterable_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainIterable_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChainIterable.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainIterable_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChainIterable.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainIterable_field_second", "getter_name" = "ChainIterable_getter_second", "setter_name" = "ChainIterable_setter_second"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ChainIterable_field_ChainIterable_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ChainIterable.T"]} : () -> ()
    "mid.func"() ({
    ^bb265(%1321 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1322 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1323 : !llvm.ptr, %1324 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1325 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1326 = "mid.wrap"(%1321) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1327 = "hi.cast"(%1326) {"from_typ" = !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "ChainIterable", "to_typ_name" = "ChainIterable"} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1328 = "mid.wrap"(%1324) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1329 = "hi.cast"(%1328) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1330 = "hi.cast"(%1329) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      "mid.set_field"(%1327, %1330) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> ()
      %1331 = "mid.wrap"(%1325) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1332 = "hi.cast"(%1331) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1333 = "hi.cast"(%1332) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      "mid.set_field"(%1327, %1333) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> ()
    }) {"func_name" = "ChainIterable_init_firstIterableT_secondIterableT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb266(%1334 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1335 : !llvm.ptr):
      %1336 = "mid.invariant"(%1335) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1337 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb267] : () -> ()
    ^bb268:
      %1338 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%1338, %1337) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb269] : () -> ()
    ^bb270:
      %1339 = "llvm.getelementptr"(%1335) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1340 = "mid.checkflag"(%1339) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1341 = "llvm.load"(%1340) : (!hi.bool) -> i1
      "cf.cond_br"(%1341) [^bb268, ^bb268] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb267:
      %1342 = "llvm.getelementptr"(%1335) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1343 = "mid.checkflag"(%1342) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1344 = "llvm.load"(%1343) : (!hi.bool) -> i1
      "cf.cond_br"(%1344) [^bb270, ^bb270] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb269:
      %1345 = "llvm.extractvalue"(%1334) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1346 = "llvm.load"(%1337) : (!llvm.ptr) -> i32
      %1347 = "llvm.getelementptr"(%1345, %1346) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1348 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1349 = "llvm.getelementptr"(%1347, %1348) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1349) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_init_firstIterableT_secondIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb271(%1350 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1351 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1352 : !llvm.ptr):
      %1353 = "mid.wrap"(%1350) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1354 = "hi.cast"(%1353) {"from_typ" = !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "ChainIterable", "to_typ_name" = "ChainIterable"} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1355 = "mid.get_field"(%1354) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1356 = "mid.unwrap"(%1355) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1357 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1358 = "mid.method_call"(%1357, %1356) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1359 = "hi.cast"(%1358) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1360 = "mid.get_field"(%1354) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1361 = "mid.unwrap"(%1360) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1362 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1363 = "mid.method_call"(%1362, %1361) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1364 = "hi.cast"(%1363) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1365 = "mid.unwrap"(%1359) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1366 = "mid.unwrap"(%1364) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1367 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "ChainIterator", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1368 = "mid.get_field"(%1354) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1369 = "mid.unwrap"(%1368) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1370 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1371 = "mid.method_call"(%1370, %1369) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1372 = "hi.cast"(%1371) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1373 = "mid.get_field"(%1354) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ChainIterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1374 = "mid.unwrap"(%1373) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1375 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1376 = "mid.method_call"(%1375, %1374) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1377 = "hi.cast"(%1376) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      %1378 = "hi.cast"(%1372) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1379 = "mid.unwrap"(%1378) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1380 = "hi.cast"(%1377) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1381 = "mid.unwrap"(%1380) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1382 = "mid.unwrap"(%1367) : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1383 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorChainIterable.T", ["ChainIterable.T"]]} : () -> !llvm.ptr
      %1384 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorChainIterable.T", ["ChainIterable.T"]]} : () -> !llvm.ptr
      %1385 = "mid.parameterizations_array"(%1383, %1384) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1385, %1382, %1379, %1381) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1386 = "hi.cast"(%1367) {"from_typ" = !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>, "from_typ_name" = "ChainIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>
      "mid.return"(%1386) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterable">]>) -> ()
    }) {"func_name" = "ChainIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb272(%1387 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1388 : !llvm.ptr):
      %1389 = "mid.invariant"(%1388) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1390 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb273] : () -> ()
    ^bb273:
      %1391 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%1391, %1390) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb274] : () -> ()
    ^bb274:
      %1392 = "llvm.extractvalue"(%1387) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1393 = "llvm.load"(%1390) : (!llvm.ptr) -> i32
      %1394 = "llvm.getelementptr"(%1392, %1393) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1395 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1396 = "llvm.getelementptr"(%1394, %1395) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1396) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb275(%1397 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1398 : !llvm.ptr):
      %1399 = "mid.invariant"(%1398) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1400 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb276] : () -> ()
    ^bb277:
      %1401 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1401, %1400) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb278] : () -> ()
    ^bb276:
      %1402 = "llvm.getelementptr"(%1398) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1403 = "mid.checkflag"(%1402) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1404 = "llvm.load"(%1403) : (!hi.bool) -> i1
      "cf.cond_br"(%1404) [^bb277, ^bb277] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb278:
      %1405 = "llvm.extractvalue"(%1397) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1406 = "llvm.load"(%1400) : (!llvm.ptr) -> i32
      %1407 = "llvm.getelementptr"(%1405, %1406) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1408 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1409 = "llvm.getelementptr"(%1407, %1408) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1409) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb279(%1410 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1411 : !llvm.ptr):
      %1412 = "mid.invariant"(%1411) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1413 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb280] : () -> ()
    ^bb281:
      %1414 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1414, %1413) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb282] : () -> ()
    ^bb283:
      %1415 = "llvm.getelementptr"(%1411) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1416 = "mid.checkflag"(%1415) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1417 = "llvm.load"(%1416) : (!hi.bool) -> i1
      "cf.cond_br"(%1417) [^bb281, ^bb281] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb280:
      %1418 = "llvm.getelementptr"(%1411) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1419 = "mid.checkflag"(%1418) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1420 = "llvm.load"(%1419) : (!hi.bool) -> i1
      "cf.cond_br"(%1420) [^bb283, ^bb283] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb282:
      %1421 = "llvm.extractvalue"(%1410) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1422 = "llvm.load"(%1413) : (!llvm.ptr) -> i32
      %1423 = "llvm.getelementptr"(%1421, %1422) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1424 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1425 = "llvm.getelementptr"(%1423, %1424) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1425) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb284(%1426 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1427 : !llvm.ptr):
      %1428 = "mid.invariant"(%1427) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1429 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb285] : () -> ()
    ^bb286:
      %1430 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1430, %1429) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb287] : () -> ()
    ^bb285:
      %1431 = "llvm.getelementptr"(%1427) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1432 = "mid.checkflag"(%1431) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1433 = "llvm.load"(%1432) : (!hi.bool) -> i1
      "cf.cond_br"(%1433) [^bb286, ^bb286] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb287:
      %1434 = "llvm.extractvalue"(%1426) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1435 = "llvm.load"(%1429) : (!llvm.ptr) -> i32
      %1436 = "llvm.getelementptr"(%1434, %1435) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1437 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1438 = "llvm.getelementptr"(%1436, %1437) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1438) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb288(%1439 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1440 : !llvm.ptr):
      %1441 = "mid.invariant"(%1440) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1442 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb289] : () -> ()
    ^bb290:
      %1443 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1443, %1442) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb291] : () -> ()
    ^bb289:
      %1444 = "llvm.getelementptr"(%1440) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1445 = "mid.checkflag"(%1444) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1446 = "llvm.load"(%1445) : (!hi.bool) -> i1
      "cf.cond_br"(%1446) [^bb290, ^bb290] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb291:
      %1447 = "llvm.extractvalue"(%1439) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1448 = "llvm.load"(%1442) : (!llvm.ptr) -> i32
      %1449 = "llvm.getelementptr"(%1447, %1448) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1450 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1451 = "llvm.getelementptr"(%1449, %1450) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1451) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb292(%1452 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1453 : !llvm.ptr):
      %1454 = "mid.invariant"(%1453) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1455 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb293] : () -> ()
    ^bb293:
      %1456 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1456, %1455) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb294] : () -> ()
    ^bb294:
      %1457 = "llvm.extractvalue"(%1452) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1458 = "llvm.load"(%1455) : (!llvm.ptr) -> i32
      %1459 = "llvm.getelementptr"(%1457, %1458) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1460 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1461 = "llvm.getelementptr"(%1459, %1460) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1461) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb295(%1462 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1463 : !llvm.ptr):
      %1464 = "mid.invariant"(%1463) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1465 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb296] : () -> ()
    ^bb297:
      %1466 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1466, %1465) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb298] : () -> ()
    ^bb296:
      %1467 = "llvm.getelementptr"(%1463) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1468 = "mid.checkflag"(%1467) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1469 = "llvm.load"(%1468) : (!hi.bool) -> i1
      "cf.cond_br"(%1469) [^bb297, ^bb297] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb298:
      %1470 = "llvm.extractvalue"(%1462) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1471 = "llvm.load"(%1465) : (!llvm.ptr) -> i32
      %1472 = "llvm.getelementptr"(%1470, %1471) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1473 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1474 = "llvm.getelementptr"(%1472, %1473) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1474) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb299(%1475 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1476 : !llvm.ptr):
      %1477 = "mid.invariant"(%1476) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1478 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb300] : () -> ()
    ^bb301:
      %1479 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1479, %1478) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb302] : () -> ()
    ^bb300:
      %1480 = "llvm.getelementptr"(%1476) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1481 = "mid.checkflag"(%1480) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1482 = "llvm.load"(%1481) : (!hi.bool) -> i1
      "cf.cond_br"(%1482) [^bb301, ^bb301] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb302:
      %1483 = "llvm.extractvalue"(%1475) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1484 = "llvm.load"(%1478) : (!llvm.ptr) -> i32
      %1485 = "llvm.getelementptr"(%1483, %1484) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1486 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1487 = "llvm.getelementptr"(%1485, %1486) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1487) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb303(%1488 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1489 : !llvm.ptr):
      %1490 = "mid.invariant"(%1489) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1491 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb304] : () -> ()
    ^bb305:
      %1492 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1492, %1491) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb306] : () -> ()
    ^bb304:
      %1493 = "llvm.getelementptr"(%1489) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1494 = "mid.checkflag"(%1493) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1495 = "llvm.load"(%1494) : (!hi.bool) -> i1
      "cf.cond_br"(%1495) [^bb305, ^bb305] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb306:
      %1496 = "llvm.extractvalue"(%1488) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1497 = "llvm.load"(%1491) : (!llvm.ptr) -> i32
      %1498 = "llvm.getelementptr"(%1496, %1497) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1499 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1500 = "llvm.getelementptr"(%1498, %1499) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1500) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb307(%1501 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1502 : !llvm.ptr):
      %1503 = "mid.invariant"(%1502) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1504 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb308] : () -> ()
    ^bb309:
      %1505 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1505, %1504) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb310] : () -> ()
    ^bb308:
      %1506 = "llvm.getelementptr"(%1502) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1507 = "mid.checkflag"(%1506) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1508 = "llvm.load"(%1507) : (!hi.bool) -> i1
      "cf.cond_br"(%1508) [^bb309, ^bb309] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb310:
      %1509 = "llvm.extractvalue"(%1501) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1510 = "llvm.load"(%1504) : (!llvm.ptr) -> i32
      %1511 = "llvm.getelementptr"(%1509, %1510) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1512 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1513 = "llvm.getelementptr"(%1511, %1512) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1513) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb311(%1514 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1515 : !llvm.ptr):
      %1516 = "mid.invariant"(%1515) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1517 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb312] : () -> ()
    ^bb313:
      %1518 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1518, %1517) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb314] : () -> ()
    ^bb312:
      %1519 = "llvm.getelementptr"(%1515) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1520 = "mid.checkflag"(%1519) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1521 = "llvm.load"(%1520) : (!hi.bool) -> i1
      "cf.cond_br"(%1521) [^bb313, ^bb313] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb314:
      %1522 = "llvm.extractvalue"(%1514) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1523 = "llvm.load"(%1517) : (!llvm.ptr) -> i32
      %1524 = "llvm.getelementptr"(%1522, %1523) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1525 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1526 = "llvm.getelementptr"(%1524, %1525) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1526) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb315(%1527 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1528 : !llvm.ptr):
      %1529 = "mid.invariant"(%1528) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1530 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb316] : () -> ()
    ^bb317:
      %1531 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1531, %1530) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb318] : () -> ()
    ^bb316:
      %1532 = "llvm.getelementptr"(%1528) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1533 = "mid.checkflag"(%1532) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1534 = "llvm.load"(%1533) : (!hi.bool) -> i1
      "cf.cond_br"(%1534) [^bb317, ^bb317] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb318:
      %1535 = "llvm.extractvalue"(%1527) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1536 = "llvm.load"(%1530) : (!llvm.ptr) -> i32
      %1537 = "llvm.getelementptr"(%1535, %1536) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1538 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1539 = "llvm.getelementptr"(%1537, %1538) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1539) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ChainIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainIterator_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainIterator.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainIterator_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainIterator.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainIterator_field_first", "getter_name" = "ChainIterator_getter_first", "setter_name" = "ChainIterator_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainIterator_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainIterator.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainIterator_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainIterator.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainIterator_field_second", "getter_name" = "ChainIterator_getter_second", "setter_name" = "ChainIterator_setter_second"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainIterator_getter_on_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainIterator_setter_on_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainIterator_field_on_first", "getter_name" = "ChainIterator_getter_on_first", "setter_name" = "ChainIterator_setter_on_first"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "ChainIterator_field_ChainIterator_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ChainIterator.T"]} : () -> ()
    "mid.func"() ({
    ^bb319(%1540 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1541 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1542 : !llvm.ptr, %1543 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1544 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1545 = "mid.wrap"(%1540) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1546 = "hi.cast"(%1545) {"from_typ" = !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "to_typ" = !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "ChainIterator", "to_typ_name" = "ChainIterator"} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1547 = "mid.wrap"(%1543) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1548 = "hi.cast"(%1547) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1549 = "hi.cast"(%1548) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      "mid.set_field"(%1546, %1549) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> ()
      %1550 = "mid.wrap"(%1544) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1551 = "hi.cast"(%1550) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1552 = "hi.cast"(%1551) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      "mid.set_field"(%1546, %1552) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> ()
      %1553 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %1554 = "hi.cast"(%1553) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%1546, %1554) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, !hi.bool) -> ()
    }) {"func_name" = "ChainIterator_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb320(%1555 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1556 : !llvm.ptr):
      %1557 = "mid.invariant"(%1556) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1558 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb321] : () -> ()
    ^bb322:
      %1559 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1559, %1558) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb323] : () -> ()
    ^bb324:
      %1560 = "llvm.getelementptr"(%1556) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1561 = "mid.checkflag"(%1560) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1562 = "llvm.load"(%1561) : (!hi.bool) -> i1
      "cf.cond_br"(%1562) [^bb322, ^bb322] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb321:
      %1563 = "llvm.getelementptr"(%1556) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1564 = "mid.checkflag"(%1563) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1565 = "llvm.load"(%1564) : (!hi.bool) -> i1
      "cf.cond_br"(%1565) [^bb324, ^bb324] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb323:
      %1566 = "llvm.extractvalue"(%1555) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1567 = "llvm.load"(%1558) : (!llvm.ptr) -> i32
      %1568 = "llvm.getelementptr"(%1566, %1567) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1569 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1570 = "llvm.getelementptr"(%1568, %1569) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1570) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterator_B_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb325(%1571 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1572 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1573 : !llvm.ptr):
      %1574 = "mid.wrap"(%1571) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1575 = "hi.cast"(%1574) {"from_typ" = !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "to_typ" = !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "ChainIterator", "to_typ_name" = "ChainIterator"} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1576 = "mid.get_field"(%1575) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.bool
      %1577 = "mid.unwrap"(%1576) : (!hi.bool) -> i1
      "mid.if"(%1577) ({
        %1578 = "mid.get_field"(%1575) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
        %1579 = "mid.unwrap"(%1578) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1580 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1581 = "mid.method_call"(%1580, %1579) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %1582 = "hi.cast"(%1581) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>
        %1583 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ChainIterator.T"]} : () -> !llvm.ptr
        %1584 = "mid.checkflag"(%1582) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %1585 = "mid.unwrap"(%1584) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %1586 = "hi.cast"(%1582) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>
        "mid.if"(%1585) ({
          %1587 = "hi.cast"(%1586) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "ChainIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "ChainIterator">
          %1588 = "hi.cast"(%1587) {"from_typ" = !hi.type_param<"T", !hi.any, "ChainIterator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "ChainIterator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>
          "mid.return"(%1588) : (!hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>) -> ()
          %1589 = "hi.cast"(%1587) {"from_typ" = !hi.type_param<"T", !hi.any, "ChainIterator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "ChainIterator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>
          "mid.assign"(%1586, %1589) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %1590 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %1591 = "hi.cast"(%1590) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.set_field"(%1575, %1591) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, !hi.bool) -> ()
      }) : (i1) -> ()
      %1592 = "mid.get_field"(%1575) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %1593 = "mid.unwrap"(%1592) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1594 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1595 = "mid.method_call"(%1594, %1593) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %1596 = "hi.cast"(%1595) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>
      %1597 = "hi.cast"(%1596) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>
      "mid.return"(%1597) : (!hi.union<[!hi.type_param<"T", !hi.any, "ChainIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "ChainIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb326(%1598 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1599 : !llvm.ptr):
      %1600 = "mid.invariant"(%1599) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1601 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb327] : () -> ()
    ^bb327:
      %1602 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%1602, %1601) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb328] : () -> ()
    ^bb328:
      %1603 = "llvm.extractvalue"(%1598) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1604 = "llvm.load"(%1601) : (!llvm.ptr) -> i32
      %1605 = "llvm.getelementptr"(%1603, %1604) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1606 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1607 = "llvm.getelementptr"(%1605, %1606) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1607) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_InterleaveIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleaveIterable_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaveIterable.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleaveIterable_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaveIterable.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleaveIterable_field_first", "getter_name" = "InterleaveIterable_getter_first", "setter_name" = "InterleaveIterable_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleaveIterable_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaveIterable.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleaveIterable_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaveIterable.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleaveIterable_field_second", "getter_name" = "InterleaveIterable_getter_second", "setter_name" = "InterleaveIterable_setter_second"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "InterleaveIterable_field_InterleaveIterable_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["InterleaveIterable.T"]} : () -> ()
    "mid.func"() ({
    ^bb329(%1608 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1609 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1610 : !llvm.ptr, %1611 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1612 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1613 = "mid.wrap"(%1608) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1614 = "hi.cast"(%1613) {"from_typ" = !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "InterleaveIterable"} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1615 = "mid.wrap"(%1611) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1616 = "hi.cast"(%1615) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1617 = "hi.cast"(%1616) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      "mid.set_field"(%1614, %1617) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> ()
      %1618 = "mid.wrap"(%1612) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1619 = "hi.cast"(%1618) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1620 = "hi.cast"(%1619) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      "mid.set_field"(%1614, %1620) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> ()
    }) {"func_name" = "InterleaveIterable_init_firstIterableT_secondIterableT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb330(%1621 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1622 : !llvm.ptr):
      %1623 = "mid.invariant"(%1622) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1624 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb331] : () -> ()
    ^bb332:
      %1625 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%1625, %1624) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb333] : () -> ()
    ^bb334:
      %1626 = "llvm.getelementptr"(%1622) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1627 = "mid.checkflag"(%1626) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1628 = "llvm.load"(%1627) : (!hi.bool) -> i1
      "cf.cond_br"(%1628) [^bb332, ^bb332] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb331:
      %1629 = "llvm.getelementptr"(%1622) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1630 = "mid.checkflag"(%1629) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1631 = "llvm.load"(%1630) : (!hi.bool) -> i1
      "cf.cond_br"(%1631) [^bb334, ^bb334] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb333:
      %1632 = "llvm.extractvalue"(%1621) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1633 = "llvm.load"(%1624) : (!llvm.ptr) -> i32
      %1634 = "llvm.getelementptr"(%1632, %1633) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1635 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1636 = "llvm.getelementptr"(%1634, %1635) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1636) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_init_firstIterableT_secondIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb335(%1637 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1638 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1639 : !llvm.ptr):
      %1640 = "mid.wrap"(%1637) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1641 = "hi.cast"(%1640) {"from_typ" = !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "InterleaveIterable"} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1642 = "mid.get_field"(%1641) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1643 = "mid.unwrap"(%1642) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1644 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1645 = "mid.method_call"(%1644, %1643) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1646 = "hi.cast"(%1645) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1647 = "mid.get_field"(%1641) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1648 = "mid.unwrap"(%1647) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1649 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1650 = "mid.method_call"(%1649, %1648) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1651 = "hi.cast"(%1650) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1652 = "mid.unwrap"(%1646) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1653 = "mid.unwrap"(%1651) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1654 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "InterleaveIterator", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1655 = "mid.get_field"(%1641) {"offset" = 0 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1656 = "mid.unwrap"(%1655) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1657 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1658 = "mid.method_call"(%1657, %1656) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1659 = "hi.cast"(%1658) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1660 = "mid.get_field"(%1641) {"offset" = 1 : i64, "vtable_bytes" = 432 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"InterleaveIterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1661 = "mid.unwrap"(%1660) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1662 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1663 = "mid.method_call"(%1662, %1661) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1664 = "hi.cast"(%1663) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      %1665 = "hi.cast"(%1659) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1666 = "mid.unwrap"(%1665) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1667 = "hi.cast"(%1664) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1668 = "mid.unwrap"(%1667) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1669 = "mid.unwrap"(%1654) : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1670 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorInterleaveIterable.T", ["InterleaveIterable.T"]]} : () -> !llvm.ptr
      %1671 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorInterleaveIterable.T", ["InterleaveIterable.T"]]} : () -> !llvm.ptr
      %1672 = "mid.parameterizations_array"(%1670, %1671) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1672, %1669, %1666, %1668) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1673 = "hi.cast"(%1654) {"from_typ" = !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>
      "mid.return"(%1673) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterable">]>) -> ()
    }) {"func_name" = "InterleaveIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb336(%1674 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1675 : !llvm.ptr):
      %1676 = "mid.invariant"(%1675) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1677 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb337] : () -> ()
    ^bb337:
      %1678 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%1678, %1677) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb338] : () -> ()
    ^bb338:
      %1679 = "llvm.extractvalue"(%1674) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1680 = "llvm.load"(%1677) : (!llvm.ptr) -> i32
      %1681 = "llvm.getelementptr"(%1679, %1680) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1682 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1683 = "llvm.getelementptr"(%1681, %1682) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1683) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb339(%1684 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1685 : !llvm.ptr):
      %1686 = "mid.invariant"(%1685) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1687 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb340] : () -> ()
    ^bb341:
      %1688 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1688, %1687) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb342] : () -> ()
    ^bb340:
      %1689 = "llvm.getelementptr"(%1685) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1690 = "mid.checkflag"(%1689) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1691 = "llvm.load"(%1690) : (!hi.bool) -> i1
      "cf.cond_br"(%1691) [^bb341, ^bb341] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb342:
      %1692 = "llvm.extractvalue"(%1684) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1693 = "llvm.load"(%1687) : (!llvm.ptr) -> i32
      %1694 = "llvm.getelementptr"(%1692, %1693) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1695 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1696 = "llvm.getelementptr"(%1694, %1695) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1696) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb343(%1697 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1698 : !llvm.ptr):
      %1699 = "mid.invariant"(%1698) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1700 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb344] : () -> ()
    ^bb345:
      %1701 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1701, %1700) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb346] : () -> ()
    ^bb347:
      %1702 = "llvm.getelementptr"(%1698) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1703 = "mid.checkflag"(%1702) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1704 = "llvm.load"(%1703) : (!hi.bool) -> i1
      "cf.cond_br"(%1704) [^bb345, ^bb345] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb344:
      %1705 = "llvm.getelementptr"(%1698) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1706 = "mid.checkflag"(%1705) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1707 = "llvm.load"(%1706) : (!hi.bool) -> i1
      "cf.cond_br"(%1707) [^bb347, ^bb347] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb346:
      %1708 = "llvm.extractvalue"(%1697) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1709 = "llvm.load"(%1700) : (!llvm.ptr) -> i32
      %1710 = "llvm.getelementptr"(%1708, %1709) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1711 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1712 = "llvm.getelementptr"(%1710, %1711) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1712) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb348(%1713 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1714 : !llvm.ptr):
      %1715 = "mid.invariant"(%1714) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1716 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb349] : () -> ()
    ^bb350:
      %1717 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1717, %1716) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb351] : () -> ()
    ^bb349:
      %1718 = "llvm.getelementptr"(%1714) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1719 = "mid.checkflag"(%1718) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1720 = "llvm.load"(%1719) : (!hi.bool) -> i1
      "cf.cond_br"(%1720) [^bb350, ^bb350] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb351:
      %1721 = "llvm.extractvalue"(%1713) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1722 = "llvm.load"(%1716) : (!llvm.ptr) -> i32
      %1723 = "llvm.getelementptr"(%1721, %1722) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1724 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1725 = "llvm.getelementptr"(%1723, %1724) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1725) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb352(%1726 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1727 : !llvm.ptr):
      %1728 = "mid.invariant"(%1727) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1729 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb353] : () -> ()
    ^bb354:
      %1730 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1730, %1729) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb355] : () -> ()
    ^bb353:
      %1731 = "llvm.getelementptr"(%1727) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1732 = "mid.checkflag"(%1731) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1733 = "llvm.load"(%1732) : (!hi.bool) -> i1
      "cf.cond_br"(%1733) [^bb354, ^bb354] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb355:
      %1734 = "llvm.extractvalue"(%1726) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1735 = "llvm.load"(%1729) : (!llvm.ptr) -> i32
      %1736 = "llvm.getelementptr"(%1734, %1735) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1737 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1738 = "llvm.getelementptr"(%1736, %1737) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1738) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb356(%1739 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1740 : !llvm.ptr):
      %1741 = "mid.invariant"(%1740) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1742 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb357] : () -> ()
    ^bb357:
      %1743 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1743, %1742) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb358] : () -> ()
    ^bb358:
      %1744 = "llvm.extractvalue"(%1739) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1745 = "llvm.load"(%1742) : (!llvm.ptr) -> i32
      %1746 = "llvm.getelementptr"(%1744, %1745) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1747 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1748 = "llvm.getelementptr"(%1746, %1747) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1748) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb359(%1749 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1750 : !llvm.ptr):
      %1751 = "mid.invariant"(%1750) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1752 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb360] : () -> ()
    ^bb361:
      %1753 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1753, %1752) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb362] : () -> ()
    ^bb360:
      %1754 = "llvm.getelementptr"(%1750) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1755 = "mid.checkflag"(%1754) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1756 = "llvm.load"(%1755) : (!hi.bool) -> i1
      "cf.cond_br"(%1756) [^bb361, ^bb361] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb362:
      %1757 = "llvm.extractvalue"(%1749) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1758 = "llvm.load"(%1752) : (!llvm.ptr) -> i32
      %1759 = "llvm.getelementptr"(%1757, %1758) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1760 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1761 = "llvm.getelementptr"(%1759, %1760) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1761) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb363(%1762 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1763 : !llvm.ptr):
      %1764 = "mid.invariant"(%1763) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1765 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb364] : () -> ()
    ^bb365:
      %1766 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1766, %1765) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb366] : () -> ()
    ^bb364:
      %1767 = "llvm.getelementptr"(%1763) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1768 = "mid.checkflag"(%1767) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1769 = "llvm.load"(%1768) : (!hi.bool) -> i1
      "cf.cond_br"(%1769) [^bb365, ^bb365] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb366:
      %1770 = "llvm.extractvalue"(%1762) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1771 = "llvm.load"(%1765) : (!llvm.ptr) -> i32
      %1772 = "llvm.getelementptr"(%1770, %1771) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1773 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1774 = "llvm.getelementptr"(%1772, %1773) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1774) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb367(%1775 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1776 : !llvm.ptr):
      %1777 = "mid.invariant"(%1776) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1778 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb368] : () -> ()
    ^bb369:
      %1779 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1779, %1778) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb370] : () -> ()
    ^bb368:
      %1780 = "llvm.getelementptr"(%1776) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1781 = "mid.checkflag"(%1780) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1782 = "llvm.load"(%1781) : (!hi.bool) -> i1
      "cf.cond_br"(%1782) [^bb369, ^bb369] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb370:
      %1783 = "llvm.extractvalue"(%1775) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1784 = "llvm.load"(%1778) : (!llvm.ptr) -> i32
      %1785 = "llvm.getelementptr"(%1783, %1784) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1786 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1787 = "llvm.getelementptr"(%1785, %1786) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1787) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb371(%1788 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1789 : !llvm.ptr):
      %1790 = "mid.invariant"(%1789) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1791 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb372] : () -> ()
    ^bb373:
      %1792 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1792, %1791) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb374] : () -> ()
    ^bb372:
      %1793 = "llvm.getelementptr"(%1789) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1794 = "mid.checkflag"(%1793) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1795 = "llvm.load"(%1794) : (!hi.bool) -> i1
      "cf.cond_br"(%1795) [^bb373, ^bb373] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb374:
      %1796 = "llvm.extractvalue"(%1788) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1797 = "llvm.load"(%1791) : (!llvm.ptr) -> i32
      %1798 = "llvm.getelementptr"(%1796, %1797) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1799 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1800 = "llvm.getelementptr"(%1798, %1799) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1800) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb375(%1801 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1802 : !llvm.ptr):
      %1803 = "mid.invariant"(%1802) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1804 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb376] : () -> ()
    ^bb377:
      %1805 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1805, %1804) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb378] : () -> ()
    ^bb376:
      %1806 = "llvm.getelementptr"(%1802) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1807 = "mid.checkflag"(%1806) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1808 = "llvm.load"(%1807) : (!hi.bool) -> i1
      "cf.cond_br"(%1808) [^bb377, ^bb377] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb378:
      %1809 = "llvm.extractvalue"(%1801) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1810 = "llvm.load"(%1804) : (!llvm.ptr) -> i32
      %1811 = "llvm.getelementptr"(%1809, %1810) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1812 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1813 = "llvm.getelementptr"(%1811, %1812) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1813) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb379(%1814 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1815 : !llvm.ptr):
      %1816 = "mid.invariant"(%1815) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1817 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb380] : () -> ()
    ^bb381:
      %1818 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1818, %1817) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb382] : () -> ()
    ^bb380:
      %1819 = "llvm.getelementptr"(%1815) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1820 = "mid.checkflag"(%1819) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1821 = "llvm.load"(%1820) : (!hi.bool) -> i1
      "cf.cond_br"(%1821) [^bb381, ^bb381] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb382:
      %1822 = "llvm.extractvalue"(%1814) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1823 = "llvm.load"(%1817) : (!llvm.ptr) -> i32
      %1824 = "llvm.getelementptr"(%1822, %1823) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<54 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1825 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1826 = "llvm.getelementptr"(%1824, %1825) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1826) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_InterleaveIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleaveIterator_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaveIterator.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleaveIterator_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaveIterator.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleaveIterator_field_first", "getter_name" = "InterleaveIterator_getter_first", "setter_name" = "InterleaveIterator_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleaveIterator_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaveIterator.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleaveIterator_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaveIterator.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleaveIterator_field_second", "getter_name" = "InterleaveIterator_getter_second", "setter_name" = "InterleaveIterator_setter_second"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleaveIterator_getter_on_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleaveIterator_setter_on_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleaveIterator_field_on_first", "getter_name" = "InterleaveIterator_getter_on_first", "setter_name" = "InterleaveIterator_setter_on_first"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "InterleaveIterator_field_InterleaveIterator_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["InterleaveIterator.T"]} : () -> ()
    "mid.func"() ({
    ^bb383(%1827 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1828 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1829 : !llvm.ptr, %1830 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1831 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1832 = "mid.wrap"(%1827) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1833 = "hi.cast"(%1832) {"from_typ" = !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "to_typ" = !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "InterleaveIterator"} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1834 = "mid.wrap"(%1830) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1835 = "hi.cast"(%1834) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1836 = "hi.cast"(%1835) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      "mid.set_field"(%1833, %1836) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> ()
      %1837 = "mid.wrap"(%1831) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1838 = "hi.cast"(%1837) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1839 = "hi.cast"(%1838) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      "mid.set_field"(%1833, %1839) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> ()
      %1840 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %1841 = "hi.cast"(%1840) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%1833, %1841) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, !hi.bool) -> ()
    }) {"func_name" = "InterleaveIterator_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb384(%1842 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1843 : !llvm.ptr):
      %1844 = "mid.invariant"(%1843) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1845 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb385] : () -> ()
    ^bb386:
      %1846 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1846, %1845) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb387] : () -> ()
    ^bb388:
      %1847 = "llvm.getelementptr"(%1843) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1848 = "mid.checkflag"(%1847) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1849 = "llvm.load"(%1848) : (!hi.bool) -> i1
      "cf.cond_br"(%1849) [^bb386, ^bb386] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb385:
      %1850 = "llvm.getelementptr"(%1843) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1851 = "mid.checkflag"(%1850) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %1852 = "llvm.load"(%1851) : (!hi.bool) -> i1
      "cf.cond_br"(%1852) [^bb388, ^bb388] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb387:
      %1853 = "llvm.extractvalue"(%1842) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1854 = "llvm.load"(%1845) : (!llvm.ptr) -> i32
      %1855 = "llvm.getelementptr"(%1853, %1854) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1856 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1857 = "llvm.getelementptr"(%1855, %1856) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1857) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterator_B_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb389(%1858 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1859 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1860 : !llvm.ptr):
      %1861 = "mid.wrap"(%1858) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1862 = "hi.cast"(%1861) {"from_typ" = !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "to_typ" = !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "InterleaveIterator"} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1863 = "mid.get_field"(%1862) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.bool
      %1864 = "mid.unwrap"(%1863) : (!hi.bool) -> i1
      "mid.if"(%1864) ({
        %1865 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %1866 = "hi.cast"(%1865) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.set_field"(%1862, %1866) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, !hi.bool) -> ()
        %1867 = "mid.get_field"(%1862) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
        %1868 = "mid.unwrap"(%1867) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1869 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %1870 = "mid.method_call"(%1869, %1868) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %1871 = "hi.cast"(%1870) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>
        %1872 = "hi.cast"(%1871) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>
        "mid.return"(%1872) : (!hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %1873 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %1874 = "hi.cast"(%1873) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%1862, %1874) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, !hi.bool) -> ()
      %1875 = "mid.get_field"(%1862) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1876 = "mid.unwrap"(%1875) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1877 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1878 = "mid.method_call"(%1877, %1876) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %1879 = "hi.cast"(%1878) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>
      %1880 = "hi.cast"(%1879) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>
      "mid.return"(%1880) : (!hi.union<[!hi.type_param<"T", !hi.any, "InterleaveIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "InterleaveIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb390(%1881 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1882 : !llvm.ptr):
      %1883 = "mid.invariant"(%1882) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1884 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb391] : () -> ()
    ^bb391:
      %1885 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%1885, %1884) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb392] : () -> ()
    ^bb392:
      %1886 = "llvm.extractvalue"(%1881) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1887 = "llvm.load"(%1884) : (!llvm.ptr) -> i32
      %1888 = "llvm.getelementptr"(%1886, %1887) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1889 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1890 = "llvm.getelementptr"(%1888, %1889) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1890) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleaveIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ZipIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "ZipIterable_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipIterable.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ZipIterable_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipIterable.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ZipIterable_field_first", "getter_name" = "ZipIterable_getter_first", "setter_name" = "ZipIterable_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ZipIterable_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipIterable.U"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ZipIterable_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipIterable.U"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ZipIterable_field_second", "getter_name" = "ZipIterable_getter_second", "setter_name" = "ZipIterable_setter_second"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ZipIterable_field_ZipIterable_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ZipIterable.T"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "ZipIterable_field_ZipIterable_1", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ZipIterable.U"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 4 : i32, "meth_name" = "ZipIterable_field_ZipIterable_2", "id_hierarchy" = ["Pair", ["any_typ"], ["any_typ"]], "name_hierarchy" = ["PairZipIterable.T._ZipIterable.U", ["ZipIterable.T"], ["ZipIterable.U"]]} : () -> ()
    "mid.func"() ({
    ^bb393(%1891 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1892 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1893 : !llvm.ptr, %1894 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1895 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1896 = "mid.wrap"(%1891) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1897 = "hi.cast"(%1896) {"from_typ" = !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable"} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1898 = "mid.wrap"(%1894) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      %1899 = "hi.cast"(%1898) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      %1900 = "hi.cast"(%1899) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      "mid.set_field"(%1897, %1900) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> ()
      %1901 = "mid.wrap"(%1895) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1902 = "hi.cast"(%1901) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1903 = "hi.cast"(%1902) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      "mid.set_field"(%1897, %1903) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> ()
    }) {"func_name" = "ZipIterable_init_firstIterableT_secondIterableU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb394(%1904 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1905 : !llvm.ptr):
      %1906 = "mid.invariant"(%1905) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1907 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb395] : () -> ()
    ^bb396:
      %1908 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1908, %1907) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb397] : () -> ()
    ^bb398:
      %1909 = "llvm.getelementptr"(%1905) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1910 = "mid.checkflag"(%1909) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1911 = "llvm.load"(%1910) : (!hi.bool) -> i1
      "cf.cond_br"(%1911) [^bb396, ^bb396] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb395:
      %1912 = "llvm.getelementptr"(%1905) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1913 = "mid.checkflag"(%1912) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1914 = "llvm.load"(%1913) : (!hi.bool) -> i1
      "cf.cond_br"(%1914) [^bb398, ^bb398] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb397:
      %1915 = "llvm.extractvalue"(%1904) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1916 = "llvm.load"(%1907) : (!llvm.ptr) -> i32
      %1917 = "llvm.getelementptr"(%1915, %1916) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1918 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1919 = "llvm.getelementptr"(%1917, %1918) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1919) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_init_firstIterableT_secondIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb399(%1920 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1921 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1922 : !llvm.ptr):
      %1923 = "mid.wrap"(%1920) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1924 = "hi.cast"(%1923) {"from_typ" = !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable"} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1925 = "mid.get_field"(%1924) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      %1926 = "mid.unwrap"(%1925) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1927 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1928 = "mid.method_call"(%1927, %1926) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1929 = "hi.cast"(%1928) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      %1930 = "mid.get_field"(%1924) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1931 = "mid.unwrap"(%1930) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1932 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1933 = "mid.method_call"(%1932, %1931) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1934 = "hi.cast"(%1933) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1935 = "mid.unwrap"(%1929) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1936 = "mid.unwrap"(%1934) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1937 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1938 = "mid.get_field"(%1924) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      %1939 = "mid.unwrap"(%1938) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1940 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1941 = "mid.method_call"(%1940, %1939) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1942 = "hi.cast"(%1941) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterable">]>
      %1943 = "mid.get_field"(%1924) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ZipIterable", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1944 = "mid.unwrap"(%1943) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1945 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1946 = "mid.method_call"(%1945, %1944) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %1947 = "hi.cast"(%1946) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterable">]>
      %1948 = "hi.cast"(%1942) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>
      %1949 = "mid.unwrap"(%1948) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1950 = "hi.cast"(%1947) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>
      %1951 = "mid.unwrap"(%1950) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1952 = "mid.unwrap"(%1937) : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1953 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorZipIterable.T", ["ZipIterable.T"]]} : () -> !llvm.ptr
      %1954 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorZipIterable.U", ["ZipIterable.U"]]} : () -> !llvm.ptr
      %1955 = "mid.parameterizations_array"(%1953, %1954) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1955, %1952, %1949, %1951) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1956 = "hi.cast"(%1937) {"from_typ" = !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>]>, "from_typ_name" = "ZipIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>]>
      "mid.return"(%1956) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterable">, !hi.type_param<"U", !hi.any, "ZipIterable">]>]>) -> ()
    }) {"func_name" = "ZipIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb400(%1957 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1958 : !llvm.ptr):
      %1959 = "mid.invariant"(%1958) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1960 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb401] : () -> ()
    ^bb401:
      %1961 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1961, %1960) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb402] : () -> ()
    ^bb402:
      %1962 = "llvm.extractvalue"(%1957) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1963 = "llvm.load"(%1960) : (!llvm.ptr) -> i32
      %1964 = "llvm.getelementptr"(%1962, %1963) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1965 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1966 = "llvm.getelementptr"(%1964, %1965) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1966) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb403(%1967 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1968 : !llvm.ptr):
      %1969 = "mid.invariant"(%1968) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1970 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb404] : () -> ()
    ^bb405:
      %1971 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1971, %1970) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb406] : () -> ()
    ^bb404:
      %1972 = "llvm.getelementptr"(%1968) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1973 = "mid.checkflag"(%1972) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1974 = "llvm.load"(%1973) : (!hi.bool) -> i1
      "cf.cond_br"(%1974) [^bb405, ^bb405] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb406:
      %1975 = "llvm.extractvalue"(%1967) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1976 = "llvm.load"(%1970) : (!llvm.ptr) -> i32
      %1977 = "llvm.getelementptr"(%1975, %1976) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1978 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1979 = "llvm.getelementptr"(%1977, %1978) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1979) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb407(%1980 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1981 : !llvm.ptr):
      %1982 = "mid.invariant"(%1981) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1983 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb408] : () -> ()
    ^bb409:
      %1984 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1984, %1983) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb410] : () -> ()
    ^bb411:
      %1985 = "llvm.getelementptr"(%1981) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1986 = "mid.checkflag"(%1985) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1987 = "llvm.load"(%1986) : (!hi.bool) -> i1
      "cf.cond_br"(%1987) [^bb409, ^bb409] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb408:
      %1988 = "llvm.getelementptr"(%1981) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1989 = "mid.checkflag"(%1988) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %1990 = "llvm.load"(%1989) : (!hi.bool) -> i1
      "cf.cond_br"(%1990) [^bb411, ^bb411] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb410:
      %1991 = "llvm.extractvalue"(%1980) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1992 = "llvm.load"(%1983) : (!llvm.ptr) -> i32
      %1993 = "llvm.getelementptr"(%1991, %1992) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1994 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1995 = "llvm.getelementptr"(%1993, %1994) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1995) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb412(%1996 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1997 : !llvm.ptr):
      %1998 = "mid.invariant"(%1997) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1999 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb413] : () -> ()
    ^bb414:
      %2000 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%2000, %1999) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb415] : () -> ()
    ^bb413:
      %2001 = "llvm.getelementptr"(%1997) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2002 = "mid.checkflag"(%2001) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2003 = "llvm.load"(%2002) : (!hi.bool) -> i1
      "cf.cond_br"(%2003) [^bb414, ^bb414] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb415:
      %2004 = "llvm.extractvalue"(%1996) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2005 = "llvm.load"(%1999) : (!llvm.ptr) -> i32
      %2006 = "llvm.getelementptr"(%2004, %2005) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2007 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2008 = "llvm.getelementptr"(%2006, %2007) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2008) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb416(%2009 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2010 : !llvm.ptr):
      %2011 = "mid.invariant"(%2010) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2012 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb417] : () -> ()
    ^bb418:
      %2013 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%2013, %2012) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb419] : () -> ()
    ^bb417:
      %2014 = "llvm.getelementptr"(%2010) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2015 = "mid.checkflag"(%2014) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2016 = "llvm.load"(%2015) : (!hi.bool) -> i1
      "cf.cond_br"(%2016) [^bb418, ^bb418] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb419:
      %2017 = "llvm.extractvalue"(%2009) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2018 = "llvm.load"(%2012) : (!llvm.ptr) -> i32
      %2019 = "llvm.getelementptr"(%2017, %2018) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2020 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2021 = "llvm.getelementptr"(%2019, %2020) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2021) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb420(%2022 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2023 : !llvm.ptr):
      %2024 = "mid.invariant"(%2023) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2025 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb421] : () -> ()
    ^bb421:
      %2026 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%2026, %2025) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb422] : () -> ()
    ^bb422:
      %2027 = "llvm.extractvalue"(%2022) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2028 = "llvm.load"(%2025) : (!llvm.ptr) -> i32
      %2029 = "llvm.getelementptr"(%2027, %2028) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2030 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2031 = "llvm.getelementptr"(%2029, %2030) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2031) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb423(%2032 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2033 : !llvm.ptr):
      %2034 = "mid.invariant"(%2033) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2035 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb424] : () -> ()
    ^bb425:
      %2036 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%2036, %2035) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb426] : () -> ()
    ^bb424:
      %2037 = "llvm.getelementptr"(%2033) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2038 = "mid.checkflag"(%2037) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2039 = "llvm.load"(%2038) : (!hi.bool) -> i1
      "cf.cond_br"(%2039) [^bb425, ^bb425] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb426:
      %2040 = "llvm.extractvalue"(%2032) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2041 = "llvm.load"(%2035) : (!llvm.ptr) -> i32
      %2042 = "llvm.getelementptr"(%2040, %2041) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2043 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2044 = "llvm.getelementptr"(%2042, %2043) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2044) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb427(%2045 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2046 : !llvm.ptr):
      %2047 = "mid.invariant"(%2046) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2048 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb428] : () -> ()
    ^bb429:
      %2049 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%2049, %2048) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb430] : () -> ()
    ^bb428:
      %2050 = "llvm.getelementptr"(%2046) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2051 = "mid.checkflag"(%2050) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2052 = "llvm.load"(%2051) : (!hi.bool) -> i1
      "cf.cond_br"(%2052) [^bb429, ^bb429] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb430:
      %2053 = "llvm.extractvalue"(%2045) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2054 = "llvm.load"(%2048) : (!llvm.ptr) -> i32
      %2055 = "llvm.getelementptr"(%2053, %2054) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2056 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2057 = "llvm.getelementptr"(%2055, %2056) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2057) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb431(%2058 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2059 : !llvm.ptr):
      %2060 = "mid.invariant"(%2059) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2061 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb432] : () -> ()
    ^bb433:
      %2062 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%2062, %2061) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb434] : () -> ()
    ^bb432:
      %2063 = "llvm.getelementptr"(%2059) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2064 = "mid.checkflag"(%2063) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2065 = "llvm.load"(%2064) : (!hi.bool) -> i1
      "cf.cond_br"(%2065) [^bb433, ^bb433] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb434:
      %2066 = "llvm.extractvalue"(%2058) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2067 = "llvm.load"(%2061) : (!llvm.ptr) -> i32
      %2068 = "llvm.getelementptr"(%2066, %2067) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2069 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2070 = "llvm.getelementptr"(%2068, %2069) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2070) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb435(%2071 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2072 : !llvm.ptr):
      %2073 = "mid.invariant"(%2072) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2074 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb436] : () -> ()
    ^bb437:
      %2075 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%2075, %2074) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb438] : () -> ()
    ^bb436:
      %2076 = "llvm.getelementptr"(%2072) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2077 = "mid.checkflag"(%2076) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2078 = "llvm.load"(%2077) : (!hi.bool) -> i1
      "cf.cond_br"(%2078) [^bb437, ^bb437] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb438:
      %2079 = "llvm.extractvalue"(%2071) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2080 = "llvm.load"(%2074) : (!llvm.ptr) -> i32
      %2081 = "llvm.getelementptr"(%2079, %2080) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2082 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2083 = "llvm.getelementptr"(%2081, %2082) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2083) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb439(%2084 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2085 : !llvm.ptr):
      %2086 = "mid.invariant"(%2085) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2087 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb440] : () -> ()
    ^bb441:
      %2088 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%2088, %2087) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb442] : () -> ()
    ^bb440:
      %2089 = "llvm.getelementptr"(%2085) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2090 = "mid.checkflag"(%2089) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2091 = "llvm.load"(%2090) : (!hi.bool) -> i1
      "cf.cond_br"(%2091) [^bb441, ^bb441] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb442:
      %2092 = "llvm.extractvalue"(%2084) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2093 = "llvm.load"(%2087) : (!llvm.ptr) -> i32
      %2094 = "llvm.getelementptr"(%2092, %2093) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2095 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2096 = "llvm.getelementptr"(%2094, %2095) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2096) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb443(%2097 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2098 : !llvm.ptr):
      %2099 = "mid.invariant"(%2098) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2100 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb444] : () -> ()
    ^bb445:
      %2101 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%2101, %2100) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb446] : () -> ()
    ^bb444:
      %2102 = "llvm.getelementptr"(%2098) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2103 = "mid.checkflag"(%2102) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2104 = "llvm.load"(%2103) : (!hi.bool) -> i1
      "cf.cond_br"(%2104) [^bb445, ^bb445] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb446:
      %2105 = "llvm.extractvalue"(%2097) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2106 = "llvm.load"(%2100) : (!llvm.ptr) -> i32
      %2107 = "llvm.getelementptr"(%2105, %2106) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2108 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2109 = "llvm.getelementptr"(%2107, %2108) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2109) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ZipIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "ZipIterator_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipIterator.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ZipIterator_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipIterator.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ZipIterator_field_first", "getter_name" = "ZipIterator_getter_first", "setter_name" = "ZipIterator_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ZipIterator_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipIterator.U"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ZipIterator_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipIterator.U"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ZipIterator_field_second", "getter_name" = "ZipIterator_getter_second", "setter_name" = "ZipIterator_setter_second"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ZipIterator_field_ZipIterator_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ZipIterator.T"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "ZipIterator_field_ZipIterator_1", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ZipIterator.U"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 4 : i32, "meth_name" = "ZipIterator_field_ZipIterator_2", "id_hierarchy" = ["Pair", ["any_typ"], ["any_typ"]], "name_hierarchy" = ["PairZipIterator.T._ZipIterator.U", ["ZipIterator.T"], ["ZipIterator.U"]]} : () -> ()
    "mid.func"() ({
    ^bb447(%2110 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2111 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2112 : !llvm.ptr, %2113 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2114 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2115 = "mid.wrap"(%2110) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2116 = "hi.cast"(%2115) {"from_typ" = !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, "to_typ" = !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, "from_typ_name" = "ZipIterator", "to_typ_name" = "ZipIterator"} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2117 = "mid.wrap"(%2113) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>
      %2118 = "hi.cast"(%2117) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>
      %2119 = "hi.cast"(%2118) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>
      "mid.set_field"(%2116, %2119) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>) -> ()
      %2120 = "mid.wrap"(%2114) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2121 = "hi.cast"(%2120) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2122 = "hi.cast"(%2121) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>
      "mid.set_field"(%2116, %2122) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>) -> ()
    }) {"func_name" = "ZipIterator_init_firstIteratorT_secondIteratorU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb448(%2123 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2124 : !llvm.ptr):
      %2125 = "mid.invariant"(%2124) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2126 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb449] : () -> ()
    ^bb450:
      %2127 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%2127, %2126) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb451] : () -> ()
    ^bb452:
      %2128 = "llvm.getelementptr"(%2124) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2129 = "mid.checkflag"(%2128) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %2130 = "llvm.load"(%2129) : (!hi.bool) -> i1
      "cf.cond_br"(%2130) [^bb450, ^bb450] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb449:
      %2131 = "llvm.getelementptr"(%2124) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2132 = "mid.checkflag"(%2131) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %2133 = "llvm.load"(%2132) : (!hi.bool) -> i1
      "cf.cond_br"(%2133) [^bb452, ^bb452] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb451:
      %2134 = "llvm.extractvalue"(%2123) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2135 = "llvm.load"(%2126) : (!llvm.ptr) -> i32
      %2136 = "llvm.getelementptr"(%2134, %2135) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2137 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2138 = "llvm.getelementptr"(%2136, %2137) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2138) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterator_B_init_firstIteratorT_secondIteratorU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb453(%2139 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2140 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2141 : !llvm.ptr):
      %2142 = "mid.wrap"(%2139) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2143 = "hi.cast"(%2142) {"from_typ" = !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, "to_typ" = !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, "from_typ_name" = "ZipIterator", "to_typ_name" = "ZipIterator"} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2144 = "mid.get_field"(%2143) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>
      %2145 = "mid.unwrap"(%2144) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2146 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2147 = "mid.method_call"(%2146, %2145) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %2148 = "hi.cast"(%2147) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>
      %2149 = "mid.get_field"(%2143) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>
      %2150 = "mid.unwrap"(%2149) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2151 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2152 = "mid.method_call"(%2151, %2150) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %2153 = "hi.cast"(%2152) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>
      %2154 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ZipIterator.T"]} : () -> !llvm.ptr
      %2155 = "mid.checkflag"(%2148) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %2156 = "mid.unwrap"(%2155) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %2157 = "hi.cast"(%2148) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>
      "mid.if"(%2156) ({
        %2158 = "hi.cast"(%2157) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "ZipIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "ZipIterator">
        %2159 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ZipIterator.U"]} : () -> !llvm.ptr
        %2160 = "mid.checkflag"(%2153) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %2161 = "mid.unwrap"(%2160) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %2162 = "hi.cast"(%2153) {"from_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>
        "mid.if"(%2161) ({
          %2163 = "hi.cast"(%2162) {"from_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>, "to_typ" = !hi.type_param<"U", !hi.any, "ZipIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>) -> !hi.type_param<"U", !hi.any, "ZipIterator">
          %2164 = "mid.unwrap"(%2158) : (!hi.type_param<"T", !hi.any, "ZipIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2165 = "mid.unwrap"(%2163) : (!hi.type_param<"U", !hi.any, "ZipIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2166 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>
          %2167 = "hi.cast"(%2158) {"from_typ" = !hi.type_param<"T", !hi.any, "ZipIterator">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "ZipIterator">) -> !hi.type_param<"T", !hi.any, "Pair">
          %2168 = "mid.unwrap"(%2167) : (!hi.type_param<"T", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2169 = "hi.cast"(%2163) {"from_typ" = !hi.type_param<"U", !hi.any, "ZipIterator">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "ZipIterator">) -> !hi.type_param<"U", !hi.any, "Pair">
          %2170 = "mid.unwrap"(%2169) : (!hi.type_param<"U", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2171 = "mid.unwrap"(%2166) : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %2172 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ZipIterator.T"]} : () -> !llvm.ptr
          %2173 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ZipIterator.U"]} : () -> !llvm.ptr
          %2174 = "mid.parameterizations_array"(%2172, %2173) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%2174, %2171, %2168, %2170) {"offset" = 4 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %2175 = "hi.cast"(%2166) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, !hi.nil]>
          "mid.return"(%2175) : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, !hi.nil]>) -> ()
          %2176 = "hi.cast"(%2163) {"from_typ" = !hi.type_param<"U", !hi.any, "ZipIterator">, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"U", !hi.any, "ZipIterator">) -> !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>
          "mid.assign"(%2162, %2176) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>, !hi.union<[!hi.type_param<"U", !hi.any, "ZipIterator">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %2177 = "hi.cast"(%2158) {"from_typ" = !hi.type_param<"T", !hi.any, "ZipIterator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "ZipIterator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>
        "mid.assign"(%2157, %2177) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %2178 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %2179 = "hi.cast"(%2178) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, !hi.nil]>
      "mid.return"(%2179) : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZipIterator">, !hi.type_param<"U", !hi.any, "ZipIterator">]>, !hi.nil]>) -> ()
    }) {"func_name" = "ZipIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb454(%2180 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2181 : !llvm.ptr):
      %2182 = "mid.invariant"(%2181) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2183 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb455] : () -> ()
    ^bb455:
      %2184 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
      "llvm.store"(%2184, %2183) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb456] : () -> ()
    ^bb456:
      %2185 = "llvm.extractvalue"(%2180) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2186 = "llvm.load"(%2183) : (!llvm.ptr) -> i32
      %2187 = "llvm.getelementptr"(%2185, %2186) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2188 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2189 = "llvm.getelementptr"(%2187, %2188) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2189) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZipIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ProductIterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductIterable_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterable.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductIterable_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterable.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductIterable_field_first", "getter_name" = "ProductIterable_getter_first", "setter_name" = "ProductIterable_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductIterable_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterable.U"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductIterable_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterable.U"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductIterable_field_second", "getter_name" = "ProductIterable_getter_second", "setter_name" = "ProductIterable_setter_second"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ProductIterable_field_ProductIterable_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ProductIterable.T"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "ProductIterable_field_ProductIterable_1", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ProductIterable.U"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 4 : i32, "meth_name" = "ProductIterable_field_ProductIterable_2", "id_hierarchy" = ["Pair", ["any_typ"], ["any_typ"]], "name_hierarchy" = ["PairProductIterable.T._ProductIterable.U", ["ProductIterable.T"], ["ProductIterable.U"]]} : () -> ()
    "mid.func"() ({
    ^bb457(%2190 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2191 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2192 : !llvm.ptr, %2193 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2194 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2195 = "mid.wrap"(%2190) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2196 = "hi.cast"(%2195) {"from_typ" = !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable"} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2197 = "mid.wrap"(%2193) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      %2198 = "hi.cast"(%2197) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      %2199 = "hi.cast"(%2198) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      "mid.set_field"(%2196, %2199) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> ()
      %2200 = "mid.wrap"(%2194) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2201 = "hi.cast"(%2200) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2202 = "hi.cast"(%2201) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>
      "mid.set_field"(%2196, %2202) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>, !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>) -> ()
    }) {"func_name" = "ProductIterable_init_firstIterableT_secondIterableU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb458(%2203 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2204 : !llvm.ptr):
      %2205 = "mid.invariant"(%2204) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2206 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb459] : () -> ()
    ^bb460:
      %2207 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%2207, %2206) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb461] : () -> ()
    ^bb462:
      %2208 = "llvm.getelementptr"(%2204) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2209 = "mid.checkflag"(%2208) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2210 = "llvm.load"(%2209) : (!hi.bool) -> i1
      "cf.cond_br"(%2210) [^bb460, ^bb460] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb459:
      %2211 = "llvm.getelementptr"(%2204) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2212 = "mid.checkflag"(%2211) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2213 = "llvm.load"(%2212) : (!hi.bool) -> i1
      "cf.cond_br"(%2213) [^bb462, ^bb462] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb461:
      %2214 = "llvm.extractvalue"(%2203) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2215 = "llvm.load"(%2206) : (!llvm.ptr) -> i32
      %2216 = "llvm.getelementptr"(%2214, %2215) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2217 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2218 = "llvm.getelementptr"(%2216, %2217) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2218) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_init_firstIterableT_secondIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb463(%2219 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2220 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2221 : !llvm.ptr):
      %2222 = "mid.wrap"(%2219) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2223 = "hi.cast"(%2222) {"from_typ" = !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable"} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2224 = "mid.get_field"(%2223) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      %2225 = "mid.unwrap"(%2224) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2226 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2227 = "mid.method_call"(%2226, %2225) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2228 = "hi.cast"(%2227) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      %2229 = "mid.get_field"(%2223) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2230 = "mid.unwrap"(%2228) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2231 = "mid.unwrap"(%2229) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2232 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ProductIterator", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2233 = "mid.get_field"(%2223) {"offset" = 0 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      %2234 = "mid.unwrap"(%2233) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2235 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2236 = "mid.method_call"(%2235, %2234) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2237 = "hi.cast"(%2236) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterable">]>
      %2238 = "mid.get_field"(%2223) {"offset" = 1 : i64, "vtable_bytes" = 448 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ProductIterable", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>
      %2239 = "hi.cast"(%2237) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>
      %2240 = "mid.unwrap"(%2239) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2241 = "hi.cast"(%2238) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2242 = "mid.unwrap"(%2241) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2243 = "mid.unwrap"(%2232) : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2244 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorProductIterable.T", ["ProductIterable.T"]]} : () -> !llvm.ptr
      %2245 = "mid.parameterization"() {"id_hierarchy" = ["Iterable", ["any_typ"]], "name_hierarchy" = ["IterableProductIterable.U", ["ProductIterable.U"]]} : () -> !llvm.ptr
      %2246 = "mid.parameterizations_array"(%2244, %2245) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%2246, %2243, %2240, %2242) {"offset" = 7 : i32, "vptrs" = [#none, #none], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %2247 = "hi.cast"(%2232) {"from_typ" = !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>]>, "from_typ_name" = "ProductIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>]>
      "mid.return"(%2247) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterable">, !hi.type_param<"U", !hi.any, "ProductIterable">]>]>) -> ()
    }) {"func_name" = "ProductIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb464(%2248 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2249 : !llvm.ptr):
      %2250 = "mid.invariant"(%2249) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2251 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb465] : () -> ()
    ^bb465:
      %2252 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%2252, %2251) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb466] : () -> ()
    ^bb466:
      %2253 = "llvm.extractvalue"(%2248) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2254 = "llvm.load"(%2251) : (!llvm.ptr) -> i32
      %2255 = "llvm.getelementptr"(%2253, %2254) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2256 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2257 = "llvm.getelementptr"(%2255, %2256) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2257) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb467(%2258 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2259 : !llvm.ptr):
      %2260 = "mid.invariant"(%2259) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2261 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb468] : () -> ()
    ^bb469:
      %2262 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%2262, %2261) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb470] : () -> ()
    ^bb468:
      %2263 = "llvm.getelementptr"(%2259) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2264 = "mid.checkflag"(%2263) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2265 = "llvm.load"(%2264) : (!hi.bool) -> i1
      "cf.cond_br"(%2265) [^bb469, ^bb469] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb470:
      %2266 = "llvm.extractvalue"(%2258) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2267 = "llvm.load"(%2261) : (!llvm.ptr) -> i32
      %2268 = "llvm.getelementptr"(%2266, %2267) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2269 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2270 = "llvm.getelementptr"(%2268, %2269) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2270) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb471(%2271 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2272 : !llvm.ptr):
      %2273 = "mid.invariant"(%2272) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2274 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb472] : () -> ()
    ^bb473:
      %2275 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%2275, %2274) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb474] : () -> ()
    ^bb475:
      %2276 = "llvm.getelementptr"(%2272) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2277 = "mid.checkflag"(%2276) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2278 = "llvm.load"(%2277) : (!hi.bool) -> i1
      "cf.cond_br"(%2278) [^bb473, ^bb473] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb472:
      %2279 = "llvm.getelementptr"(%2272) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2280 = "mid.checkflag"(%2279) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %2281 = "llvm.load"(%2280) : (!hi.bool) -> i1
      "cf.cond_br"(%2281) [^bb475, ^bb475] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb474:
      %2282 = "llvm.extractvalue"(%2271) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2283 = "llvm.load"(%2274) : (!llvm.ptr) -> i32
      %2284 = "llvm.getelementptr"(%2282, %2283) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2285 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2286 = "llvm.getelementptr"(%2284, %2285) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2286) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb476(%2287 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2288 : !llvm.ptr):
      %2289 = "mid.invariant"(%2288) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2290 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb477] : () -> ()
    ^bb478:
      %2291 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%2291, %2290) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb479] : () -> ()
    ^bb477:
      %2292 = "llvm.getelementptr"(%2288) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2293 = "mid.checkflag"(%2292) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2294 = "llvm.load"(%2293) : (!hi.bool) -> i1
      "cf.cond_br"(%2294) [^bb478, ^bb478] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb479:
      %2295 = "llvm.extractvalue"(%2287) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2296 = "llvm.load"(%2290) : (!llvm.ptr) -> i32
      %2297 = "llvm.getelementptr"(%2295, %2296) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2298 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2299 = "llvm.getelementptr"(%2297, %2298) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2299) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb480(%2300 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2301 : !llvm.ptr):
      %2302 = "mid.invariant"(%2301) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2303 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb481] : () -> ()
    ^bb482:
      %2304 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%2304, %2303) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb483] : () -> ()
    ^bb481:
      %2305 = "llvm.getelementptr"(%2301) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2306 = "mid.checkflag"(%2305) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2307 = "llvm.load"(%2306) : (!hi.bool) -> i1
      "cf.cond_br"(%2307) [^bb482, ^bb482] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb483:
      %2308 = "llvm.extractvalue"(%2300) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2309 = "llvm.load"(%2303) : (!llvm.ptr) -> i32
      %2310 = "llvm.getelementptr"(%2308, %2309) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2311 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2312 = "llvm.getelementptr"(%2310, %2311) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2312) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb484(%2313 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2314 : !llvm.ptr):
      %2315 = "mid.invariant"(%2314) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2316 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb485] : () -> ()
    ^bb485:
      %2317 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%2317, %2316) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb486] : () -> ()
    ^bb486:
      %2318 = "llvm.extractvalue"(%2313) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2319 = "llvm.load"(%2316) : (!llvm.ptr) -> i32
      %2320 = "llvm.getelementptr"(%2318, %2319) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2321 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2322 = "llvm.getelementptr"(%2320, %2321) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2322) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb487(%2323 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2324 : !llvm.ptr):
      %2325 = "mid.invariant"(%2324) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2326 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb488] : () -> ()
    ^bb489:
      %2327 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%2327, %2326) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb490] : () -> ()
    ^bb488:
      %2328 = "llvm.getelementptr"(%2324) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2329 = "mid.checkflag"(%2328) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2330 = "llvm.load"(%2329) : (!hi.bool) -> i1
      "cf.cond_br"(%2330) [^bb489, ^bb489] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb490:
      %2331 = "llvm.extractvalue"(%2323) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2332 = "llvm.load"(%2326) : (!llvm.ptr) -> i32
      %2333 = "llvm.getelementptr"(%2331, %2332) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2334 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2335 = "llvm.getelementptr"(%2333, %2334) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2335) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb491(%2336 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2337 : !llvm.ptr):
      %2338 = "mid.invariant"(%2337) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2339 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb492] : () -> ()
    ^bb493:
      %2340 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%2340, %2339) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb494] : () -> ()
    ^bb492:
      %2341 = "llvm.getelementptr"(%2337) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2342 = "mid.checkflag"(%2341) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %2343 = "llvm.load"(%2342) : (!hi.bool) -> i1
      "cf.cond_br"(%2343) [^bb493, ^bb493] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb494:
      %2344 = "llvm.extractvalue"(%2336) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2345 = "llvm.load"(%2339) : (!llvm.ptr) -> i32
      %2346 = "llvm.getelementptr"(%2344, %2345) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2347 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2348 = "llvm.getelementptr"(%2346, %2347) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2348) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb495(%2349 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2350 : !llvm.ptr):
      %2351 = "mid.invariant"(%2350) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2352 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb496] : () -> ()
    ^bb497:
      %2353 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%2353, %2352) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb498] : () -> ()
    ^bb496:
      %2354 = "llvm.getelementptr"(%2350) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2355 = "mid.checkflag"(%2354) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2356 = "llvm.load"(%2355) : (!hi.bool) -> i1
      "cf.cond_br"(%2356) [^bb497, ^bb497] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb498:
      %2357 = "llvm.extractvalue"(%2349) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2358 = "llvm.load"(%2352) : (!llvm.ptr) -> i32
      %2359 = "llvm.getelementptr"(%2357, %2358) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2360 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2361 = "llvm.getelementptr"(%2359, %2360) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2361) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb499(%2362 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2363 : !llvm.ptr):
      %2364 = "mid.invariant"(%2363) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2365 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb500] : () -> ()
    ^bb501:
      %2366 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%2366, %2365) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb502] : () -> ()
    ^bb500:
      %2367 = "llvm.getelementptr"(%2363) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2368 = "mid.checkflag"(%2367) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2369 = "llvm.load"(%2368) : (!hi.bool) -> i1
      "cf.cond_br"(%2369) [^bb501, ^bb501] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb502:
      %2370 = "llvm.extractvalue"(%2362) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2371 = "llvm.load"(%2365) : (!llvm.ptr) -> i32
      %2372 = "llvm.getelementptr"(%2370, %2371) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2373 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2374 = "llvm.getelementptr"(%2372, %2373) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2374) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb503(%2375 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2376 : !llvm.ptr):
      %2377 = "mid.invariant"(%2376) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2378 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb504] : () -> ()
    ^bb505:
      %2379 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%2379, %2378) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb506] : () -> ()
    ^bb504:
      %2380 = "llvm.getelementptr"(%2376) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2381 = "mid.checkflag"(%2380) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2382 = "llvm.load"(%2381) : (!hi.bool) -> i1
      "cf.cond_br"(%2382) [^bb505, ^bb505] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb506:
      %2383 = "llvm.extractvalue"(%2375) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2384 = "llvm.load"(%2378) : (!llvm.ptr) -> i32
      %2385 = "llvm.getelementptr"(%2383, %2384) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2386 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2387 = "llvm.getelementptr"(%2385, %2386) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2387) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb507(%2388 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2389 : !llvm.ptr):
      %2390 = "mid.invariant"(%2389) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2391 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb508] : () -> ()
    ^bb509:
      %2392 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%2392, %2391) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb510] : () -> ()
    ^bb508:
      %2393 = "llvm.getelementptr"(%2389) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2394 = "mid.checkflag"(%2393) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2395 = "llvm.load"(%2394) : (!hi.bool) -> i1
      "cf.cond_br"(%2395) [^bb509, ^bb509] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb510:
      %2396 = "llvm.extractvalue"(%2388) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2397 = "llvm.load"(%2391) : (!llvm.ptr) -> i32
      %2398 = "llvm.getelementptr"(%2396, %2397) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<56 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2399 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2400 = "llvm.getelementptr"(%2398, %2399) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2400) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ProductIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductIterator_getter_first_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductIterator.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductIterator_setter_first_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductIterator.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductIterator_field_first_iterator", "getter_name" = "ProductIterator_getter_first_iterator", "setter_name" = "ProductIterator_setter_first_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductIterator_getter_second_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductIterator.U"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductIterator_setter_second_iterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductIterator.U"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductIterator_field_second_iterator", "getter_name" = "ProductIterator_getter_second_iterator", "setter_name" = "ProductIterator_setter_second_iterator"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductIterator_getter_second_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterator.U"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductIterator_setter_second_iterable", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterator.U"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductIterator_field_second_iterable", "getter_name" = "ProductIterator_getter_second_iterable", "setter_name" = "ProductIterator_setter_second_iterable"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductIterator_getter_current_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_ProductIterator.T_or_Nil"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductIterator_setter_current_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_ProductIterator.T_or_Nil"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductIterator_field_current_first", "getter_name" = "ProductIterator_getter_current_first", "setter_name" = "ProductIterator_setter_current_first"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 4 : i32, "meth_name" = "ProductIterator_field_ProductIterator_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ProductIterator.T"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 5 : i32, "meth_name" = "ProductIterator_field_ProductIterator_1", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ProductIterator.U"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 6 : i32, "meth_name" = "ProductIterator_field_ProductIterator_2", "id_hierarchy" = ["Pair", ["any_typ"], ["any_typ"]], "name_hierarchy" = ["PairProductIterator.T._ProductIterator.U", ["ProductIterator.T"], ["ProductIterator.U"]]} : () -> ()
    "mid.func"() ({
    ^bb511(%2401 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2402 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2403 : !llvm.ptr, %2404 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2405 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2406 = "mid.wrap"(%2401) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2407 = "hi.cast"(%2406) {"from_typ" = !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "ProductIterator", "to_typ_name" = "ProductIterator"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2408 = "mid.wrap"(%2404) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>
      %2409 = "hi.cast"(%2408) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>
      %2410 = "hi.cast"(%2409) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>
      "mid.set_field"(%2407, %2410) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>) -> ()
      %2411 = "mid.wrap"(%2405) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2412 = "hi.cast"(%2411) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2413 = "hi.cast"(%2412) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      "mid.set_field"(%2407, %2413) {"offset" = 2 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> ()
      %2414 = "mid.get_field"(%2407) {"offset" = 2 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2415 = "mid.unwrap"(%2414) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2416 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2417 = "mid.method_call"(%2416, %2415) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %2418 = "hi.cast"(%2417) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2419 = "hi.cast"(%2418) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      "mid.set_field"(%2407, %2419) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> ()
      %2420 = "mid.get_field"(%2407) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>
      %2421 = "mid.unwrap"(%2420) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2422 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %2423 = "mid.method_call"(%2422, %2421) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
      %2424 = "hi.cast"(%2423) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
      %2425 = "hi.cast"(%2424) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
      "mid.set_field"(%2407, %2425) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb512(%2426 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2427 : !llvm.ptr):
      %2428 = "mid.invariant"(%2427) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2429 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb513] : () -> ()
    ^bb514:
      %2430 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%2430, %2429) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb515] : () -> ()
    ^bb516:
      %2431 = "llvm.getelementptr"(%2427) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2432 = "mid.checkflag"(%2431) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %2433 = "llvm.load"(%2432) : (!hi.bool) -> i1
      "cf.cond_br"(%2433) [^bb514, ^bb514] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb513:
      %2434 = "llvm.getelementptr"(%2427) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %2435 = "mid.checkflag"(%2434) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !hi.bool
      %2436 = "llvm.load"(%2435) : (!hi.bool) -> i1
      "cf.cond_br"(%2436) [^bb516, ^bb516] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb515:
      %2437 = "llvm.extractvalue"(%2426) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2438 = "llvm.load"(%2429) : (!llvm.ptr) -> i32
      %2439 = "llvm.getelementptr"(%2437, %2438) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2440 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2441 = "llvm.getelementptr"(%2439, %2440) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2441) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb517(%2442 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2443 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2444 : !llvm.ptr):
      %2445 = "mid.wrap"(%2442) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2446 = "hi.cast"(%2445) {"from_typ" = !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "ProductIterator", "to_typ_name" = "ProductIterator"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>
      %2447 = "mid.get_field"(%2446) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
      %2448 = "mid.refer"(%2447) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
      %2449 = "hi.cast"(%2448) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
      "mid.while"() ({
        %2450 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ProductIterator.T"]} : () -> !llvm.ptr
        %2451 = "mid.checkflag"(%2449) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %2452 = "mid.unwrap"(%2451) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %2453 = "hi.cast"(%2449) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "ProductIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "ProductIterator">
        %2454 = "mid.get_field"(%2446) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
        %2455 = "mid.unwrap"(%2454) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2456 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %2457 = "mid.method_call"(%2456, %2455) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %2458 = "hi.cast"(%2457) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"U", !hi.any, "ProductIterator">, !hi.nil]>
        %2459 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ProductIterator.U"]} : () -> !llvm.ptr
        %2460 = "mid.checkflag"(%2458) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"U", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %2461 = "mid.unwrap"(%2460) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %2462 = "hi.cast"(%2458) {"from_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ProductIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"U", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"U", !hi.any, "ProductIterator">, !hi.nil]>
        "mid.if"(%2461) ({
          %2463 = "hi.cast"(%2462) {"from_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ProductIterator">, !hi.nil]>, "to_typ" = !hi.type_param<"U", !hi.any, "ProductIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"U", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.type_param<"U", !hi.any, "ProductIterator">
          %2464 = "mid.unwrap"(%2453) : (!hi.type_param<"T", !hi.any, "ProductIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2465 = "mid.unwrap"(%2463) : (!hi.type_param<"U", !hi.any, "ProductIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2466 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>
          %2467 = "hi.cast"(%2453) {"from_typ" = !hi.type_param<"T", !hi.any, "ProductIterator">, "to_typ" = !hi.type_param<"T", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "ProductIterator">) -> !hi.type_param<"T", !hi.any, "Pair">
          %2468 = "mid.unwrap"(%2467) : (!hi.type_param<"T", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2469 = "hi.cast"(%2463) {"from_typ" = !hi.type_param<"U", !hi.any, "ProductIterator">, "to_typ" = !hi.type_param<"U", !hi.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"U", !hi.any, "ProductIterator">) -> !hi.type_param<"U", !hi.any, "Pair">
          %2470 = "mid.unwrap"(%2469) : (!hi.type_param<"U", !hi.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
          %2471 = "mid.unwrap"(%2466) : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %2472 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ProductIterator.T"]} : () -> !llvm.ptr
          %2473 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ProductIterator.U"]} : () -> !llvm.ptr
          %2474 = "mid.parameterizations_array"(%2472, %2473) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%2474, %2471, %2468, %2470) {"offset" = 4 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
          %2475 = "hi.cast"(%2466) {"from_typ" = !hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.nil]>
          "mid.return"(%2475) : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.nil]>) -> ()
          %2476 = "hi.cast"(%2463) {"from_typ" = !hi.type_param<"U", !hi.any, "ProductIterator">, "to_typ" = !hi.union<[!hi.type_param<"U", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"U", !hi.any, "ProductIterator">) -> !hi.union<[!hi.type_param<"U", !hi.any, "ProductIterator">, !hi.nil]>
          "mid.assign"(%2462, %2476) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"U", !hi.any, "ProductIterator">, !hi.nil]>, !hi.union<[!hi.type_param<"U", !hi.any, "ProductIterator">, !hi.nil]>) -> ()
        }) : (i1) -> ()
        %2477 = "mid.get_field"(%2446) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>
        %2478 = "mid.unwrap"(%2477) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2479 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %2480 = "mid.method_call"(%2479, %2478) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %2481 = "hi.cast"(%2480) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
        %2482 = "hi.cast"(%2481) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
        "mid.set_field"(%2446, %2482) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> ()
        %2483 = "mid.get_field"(%2446) {"offset" = 2 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
        %2484 = "mid.unwrap"(%2483) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2485 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %2486 = "mid.method_call"(%2485, %2484) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
        %2487 = "hi.cast"(%2486) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
        %2488 = "hi.cast"(%2487) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
        "mid.set_field"(%2446, %2488) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> ()
        %2489 = "mid.get_field"(%2446) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
        %2490 = "mid.refer"(%2489) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
        %2491 = "hi.cast"(%2490) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>
        "mid.assign"(%2449, %2491) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.nil]>) -> ()
      }) : () -> ()
      %2492 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %2493 = "hi.cast"(%2492) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.nil]>
      "mid.return"(%2493) : (!hi.union<[!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductIterator">, !hi.type_param<"U", !hi.any, "ProductIterator">]>, !hi.nil]>) -> ()
    }) {"func_name" = "ProductIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb518(%2494 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2495 : !llvm.ptr):
      %2496 = "mid.invariant"(%2495) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %2497 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb519] : () -> ()
    ^bb519:
      %2498 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%2498, %2497) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb520] : () -> ()
    ^bb520:
      %2499 = "llvm.extractvalue"(%2494) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %2500 = "llvm.load"(%2497) : (!llvm.ptr) -> i32
      %2501 = "llvm.getelementptr"(%2499, %2500) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %2502 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %2503 = "llvm.getelementptr"(%2501, %2502) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%2503) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "collection"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Collection", "methods" = [], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Iterable, 18446744073709551615 : i64, @Collection], "offset_tbl" = [67 : i32, 10 : i32, 0 : i32, 67 : i32, 0 : i32, 42 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 1375598993350293883 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Collection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "EnumeratedCollection", "methods" = [@EnumeratedCollection_field_collection, @EnumeratedCollection_field_EnumeratedCollection_0, @EnumeratedCollection_field_EnumeratedCollection_1, @EnumeratedCollection_B_init_collectionCollectionT, @EnumeratedCollection_B_size_, @EnumeratedCollection_B_iterator_, @EnumeratedCollection_B_each_fFunctionT_to_Nothing, @EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @EnumeratedCollection_B_all_fFunctionT_to_Bool, @EnumeratedCollection_B_any_fFunctionT_to_Bool, @EnumeratedCollection_B_enumerate_, @EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @EnumeratedCollection_B_filter_fFunctionT_to_Bool, @EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT, @EnumeratedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU, @EnumeratedCollection_B_product_otherCollectionU_product_otherIterableU, @EnumeratedCollection_init_collectionCollectionT, @EnumeratedCollection_size_, @EnumeratedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @EnumeratedCollection_field_EnumeratedCollection_1, @EnumeratedCollection_B_size_, @EnumeratedCollection_B_iterator_, @EnumeratedCollection_B_each_fFunctionT_to_Nothing, @EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @EnumeratedCollection_B_all_fFunctionT_to_Bool, @EnumeratedCollection_B_any_fFunctionT_to_Bool, @EnumeratedCollection_B_enumerate_, @EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @EnumeratedCollection_B_filter_fFunctionT_to_Bool, @EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT, @EnumeratedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU, @EnumeratedCollection_B_product_otherCollectionU_product_otherIterableU, @EnumeratedCollection_size_, @EnumeratedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @EnumeratedCollection_field_EnumeratedCollection_1, @EnumeratedCollection_B_iterator_, @EnumeratedCollection_B_each_fFunctionT_to_Nothing, @EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @EnumeratedCollection_B_all_fFunctionT_to_Bool, @EnumeratedCollection_B_any_fFunctionT_to_Bool, @EnumeratedCollection_B_enumerate_, @EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @EnumeratedCollection_B_filter_fFunctionT_to_Bool, @EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT, @EnumeratedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU, @EnumeratedCollection_B_product_otherCollectionU_product_otherIterableU, @EnumeratedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @EnumeratedCollection_field_EnumeratedCollection_1, @EnumeratedCollection_B_iterator_, @EnumeratedCollection_B_each_fFunctionT_to_Nothing, @EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @EnumeratedCollection_B_all_fFunctionT_to_Bool, @EnumeratedCollection_B_any_fFunctionT_to_Bool, @EnumeratedCollection_B_enumerate_, @EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @EnumeratedCollection_B_filter_fFunctionT_to_Bool, @EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT, @EnumeratedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU, @EnumeratedCollection_B_product_otherCollectionU_product_otherIterableU, @EnumeratedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Iterable, @EnumeratedCollection, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Collection, @Object], "offset_tbl" = [10 : i32, 103 : i32, 10 : i32, 0 : i32, 128 : i32, 0 : i32, 46 : i32, 128 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 7081690788784801875 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_EnumeratedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "MappedCollection", "methods" = [@MappedCollection_field_collection, @MappedCollection_field_f, @MappedCollection_field_MappedCollection_0, @MappedCollection_field_MappedCollection_1, @MappedCollection_B_init_collectionCollectionT_fFunctionT_to_U, @MappedCollection_B_size_, @MappedCollection_B_iterator_, @MappedCollection_B_each_fFunctionT_to_Nothing, @MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @MappedCollection_B_all_fFunctionT_to_Bool, @MappedCollection_B_any_fFunctionT_to_Bool, @MappedCollection_B_enumerate_, @MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MappedCollection_B_filter_fFunctionT_to_Bool, @MappedCollection_B_chain_otherIterableT_chain_otherCollectionT, @MappedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @MappedCollection_B_zip_otherIterableU_zip_otherCollectionU, @MappedCollection_B_product_otherCollectionU_product_otherIterableU, @MappedCollection_init_collectionCollectionT_fFunctionT_to_U, @MappedCollection_size_, @MappedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @MappedCollection_field_MappedCollection_1, @MappedCollection_B_size_, @MappedCollection_B_iterator_, @MappedCollection_B_each_fFunctionT_to_Nothing, @MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @MappedCollection_B_all_fFunctionT_to_Bool, @MappedCollection_B_any_fFunctionT_to_Bool, @MappedCollection_B_enumerate_, @MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MappedCollection_B_filter_fFunctionT_to_Bool, @MappedCollection_B_chain_otherIterableT_chain_otherCollectionT, @MappedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @MappedCollection_B_zip_otherIterableU_zip_otherCollectionU, @MappedCollection_B_product_otherCollectionU_product_otherIterableU, @MappedCollection_size_, @MappedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @MappedCollection_field_MappedCollection_1, @MappedCollection_B_iterator_, @MappedCollection_B_each_fFunctionT_to_Nothing, @MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @MappedCollection_B_all_fFunctionT_to_Bool, @MappedCollection_B_any_fFunctionT_to_Bool, @MappedCollection_B_enumerate_, @MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MappedCollection_B_filter_fFunctionT_to_Bool, @MappedCollection_B_chain_otherIterableT_chain_otherCollectionT, @MappedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @MappedCollection_B_zip_otherIterableU_zip_otherCollectionU, @MappedCollection_B_product_otherCollectionU_product_otherIterableU, @MappedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @MappedCollection_field_MappedCollection_1, @MappedCollection_B_iterator_, @MappedCollection_B_each_fFunctionT_to_Nothing, @MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @MappedCollection_B_all_fFunctionT_to_Bool, @MappedCollection_B_any_fFunctionT_to_Bool, @MappedCollection_B_enumerate_, @MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @MappedCollection_B_filter_fFunctionT_to_Bool, @MappedCollection_B_chain_otherIterableT_chain_otherCollectionT, @MappedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @MappedCollection_B_zip_otherIterableU_zip_otherCollectionU, @MappedCollection_B_product_otherCollectionU_product_otherIterableU, @MappedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Iterable, @MappedCollection, @Collection], "offset_tbl" = [129 : i32, 10 : i32, 0 : i32, 129 : i32, 0 : i32, 104 : i32, 10 : i32, 47 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5460697656559120915 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_MappedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ChainedCollection", "methods" = [@ChainedCollection_field_first, @ChainedCollection_field_second, @ChainedCollection_field_ChainedCollection_0, @ChainedCollection_B_init_firstCollectionT_secondCollectionT, @ChainedCollection_B_size_, @ChainedCollection_B_iterator_, @ChainedCollection_B_each_fFunctionT_to_Nothing, @ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainedCollection_B_all_fFunctionT_to_Bool, @ChainedCollection_B_any_fFunctionT_to_Bool, @ChainedCollection_B_enumerate_, @ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ChainedCollection_B_filter_fFunctionT_to_Bool, @ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ChainedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ChainedCollection_B_product_otherCollectionU_product_otherIterableU, @ChainedCollection_init_firstCollectionT_secondCollectionT, @ChainedCollection_size_, @ChainedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @ChainedCollection_field_ChainedCollection_0, @ChainedCollection_B_size_, @ChainedCollection_B_iterator_, @ChainedCollection_B_each_fFunctionT_to_Nothing, @ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainedCollection_B_all_fFunctionT_to_Bool, @ChainedCollection_B_any_fFunctionT_to_Bool, @ChainedCollection_B_enumerate_, @ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ChainedCollection_B_filter_fFunctionT_to_Bool, @ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ChainedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ChainedCollection_B_product_otherCollectionU_product_otherIterableU, @ChainedCollection_size_, @ChainedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @ChainedCollection_field_ChainedCollection_0, @ChainedCollection_B_iterator_, @ChainedCollection_B_each_fFunctionT_to_Nothing, @ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainedCollection_B_all_fFunctionT_to_Bool, @ChainedCollection_B_any_fFunctionT_to_Bool, @ChainedCollection_B_enumerate_, @ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ChainedCollection_B_filter_fFunctionT_to_Bool, @ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ChainedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ChainedCollection_B_product_otherCollectionU_product_otherIterableU, @ChainedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ChainedCollection_field_ChainedCollection_0, @ChainedCollection_B_iterator_, @ChainedCollection_B_each_fFunctionT_to_Nothing, @ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainedCollection_B_all_fFunctionT_to_Bool, @ChainedCollection_B_any_fFunctionT_to_Bool, @ChainedCollection_B_enumerate_, @ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ChainedCollection_B_filter_fFunctionT_to_Bool, @ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ChainedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ChainedCollection_B_product_otherCollectionU_product_otherIterableU, @ChainedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @Collection, @ChainedCollection, @Container, @Iterable, 18446744073709551615 : i64], "offset_tbl" = [0 : i32, 128 : i32, 10 : i32, 46 : i32, 10 : i32, 128 : i32, 103 : i32, 0 : i32], "prime" = 4611686018427388319 : i64, "hash_id" = 14310207089174208817 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ChainedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "InterleavedCollection", "methods" = [@InterleavedCollection_field_first, @InterleavedCollection_field_second, @InterleavedCollection_field_InterleavedCollection_0, @InterleavedCollection_B_init_firstCollectionT_secondCollectionT, @InterleavedCollection_B_size_, @InterleavedCollection_B_iterator_, @InterleavedCollection_B_each_fFunctionT_to_Nothing, @InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleavedCollection_B_all_fFunctionT_to_Bool, @InterleavedCollection_B_any_fFunctionT_to_Bool, @InterleavedCollection_B_enumerate_, @InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @InterleavedCollection_B_filter_fFunctionT_to_Bool, @InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT, @InterleavedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU, @InterleavedCollection_B_product_otherCollectionU_product_otherIterableU, @InterleavedCollection_init_firstCollectionT_secondCollectionT, @InterleavedCollection_size_, @InterleavedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @InterleavedCollection_field_InterleavedCollection_0, @InterleavedCollection_B_size_, @InterleavedCollection_B_iterator_, @InterleavedCollection_B_each_fFunctionT_to_Nothing, @InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleavedCollection_B_all_fFunctionT_to_Bool, @InterleavedCollection_B_any_fFunctionT_to_Bool, @InterleavedCollection_B_enumerate_, @InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @InterleavedCollection_B_filter_fFunctionT_to_Bool, @InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT, @InterleavedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU, @InterleavedCollection_B_product_otherCollectionU_product_otherIterableU, @InterleavedCollection_size_, @InterleavedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @InterleavedCollection_field_InterleavedCollection_0, @InterleavedCollection_B_iterator_, @InterleavedCollection_B_each_fFunctionT_to_Nothing, @InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleavedCollection_B_all_fFunctionT_to_Bool, @InterleavedCollection_B_any_fFunctionT_to_Bool, @InterleavedCollection_B_enumerate_, @InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @InterleavedCollection_B_filter_fFunctionT_to_Bool, @InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT, @InterleavedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU, @InterleavedCollection_B_product_otherCollectionU_product_otherIterableU, @InterleavedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @InterleavedCollection_field_InterleavedCollection_0, @InterleavedCollection_B_iterator_, @InterleavedCollection_B_each_fFunctionT_to_Nothing, @InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleavedCollection_B_all_fFunctionT_to_Bool, @InterleavedCollection_B_any_fFunctionT_to_Bool, @InterleavedCollection_B_enumerate_, @InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @InterleavedCollection_B_filter_fFunctionT_to_Bool, @InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT, @InterleavedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU, @InterleavedCollection_B_product_otherCollectionU_product_otherIterableU, @InterleavedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, @InterleavedCollection, @Iterable, 18446744073709551615 : i64, @Collection], "offset_tbl" = [128 : i32, 10 : i32, 0 : i32, 128 : i32, 10 : i32, 103 : i32, 0 : i32, 46 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 8589355597059143861 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_InterleavedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ZippedCollection", "methods" = [@ZippedCollection_field_first, @ZippedCollection_field_second, @ZippedCollection_field_ZippedCollection_0, @ZippedCollection_field_ZippedCollection_1, @ZippedCollection_field_ZippedCollection_2, @ZippedCollection_B_init_firstCollectionT_secondCollectionU, @ZippedCollection_B_size_, @ZippedCollection_B_iterator_, @ZippedCollection_B_each_fFunctionT_to_Nothing, @ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZippedCollection_B_all_fFunctionT_to_Bool, @ZippedCollection_B_any_fFunctionT_to_Bool, @ZippedCollection_B_enumerate_, @ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ZippedCollection_B_filter_fFunctionT_to_Bool, @ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ZippedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ZippedCollection_B_product_otherCollectionU_product_otherIterableU, @ZippedCollection_init_firstCollectionT_secondCollectionU, @ZippedCollection_size_, @ZippedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @ZippedCollection_field_ZippedCollection_2, @ZippedCollection_B_size_, @ZippedCollection_B_iterator_, @ZippedCollection_B_each_fFunctionT_to_Nothing, @ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZippedCollection_B_all_fFunctionT_to_Bool, @ZippedCollection_B_any_fFunctionT_to_Bool, @ZippedCollection_B_enumerate_, @ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ZippedCollection_B_filter_fFunctionT_to_Bool, @ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ZippedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ZippedCollection_B_product_otherCollectionU_product_otherIterableU, @ZippedCollection_size_, @ZippedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @ZippedCollection_field_ZippedCollection_2, @ZippedCollection_B_iterator_, @ZippedCollection_B_each_fFunctionT_to_Nothing, @ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZippedCollection_B_all_fFunctionT_to_Bool, @ZippedCollection_B_any_fFunctionT_to_Bool, @ZippedCollection_B_enumerate_, @ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ZippedCollection_B_filter_fFunctionT_to_Bool, @ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ZippedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ZippedCollection_B_product_otherCollectionU_product_otherIterableU, @ZippedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ZippedCollection_field_ZippedCollection_2, @ZippedCollection_B_iterator_, @ZippedCollection_B_each_fFunctionT_to_Nothing, @ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZippedCollection_B_all_fFunctionT_to_Bool, @ZippedCollection_B_any_fFunctionT_to_Bool, @ZippedCollection_B_enumerate_, @ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ZippedCollection_B_filter_fFunctionT_to_Bool, @ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT, @ZippedCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU, @ZippedCollection_B_product_otherCollectionU_product_otherIterableU, @ZippedCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Collection, @Object, @Container, @ZippedCollection, @Iterable, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 48 : i32, 130 : i32, 130 : i32, 10 : i32, 105 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388513 : i64, "hash_id" = 880335312586431241 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ZippedCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ProductCollection", "methods" = [@ProductCollection_field_first, @ProductCollection_field_second, @ProductCollection_field_ProductCollection_0, @ProductCollection_field_ProductCollection_1, @ProductCollection_field_ProductCollection_2, @ProductCollection_B_init_firstCollectionT_secondCollectionU, @ProductCollection_B_size_, @ProductCollection_B_iterator_, @ProductCollection_B_each_fFunctionT_to_Nothing, @ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductCollection_B_all_fFunctionT_to_Bool, @ProductCollection_B_any_fFunctionT_to_Bool, @ProductCollection_B_enumerate_, @ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ProductCollection_B_filter_fFunctionT_to_Bool, @ProductCollection_B_chain_otherIterableT_chain_otherCollectionT, @ProductCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ProductCollection_B_zip_otherIterableU_zip_otherCollectionU, @ProductCollection_B_product_otherCollectionU_product_otherIterableU, @ProductCollection_init_firstCollectionT_secondCollectionU, @ProductCollection_size_, @ProductCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @ProductCollection_field_ProductCollection_2, @ProductCollection_B_size_, @ProductCollection_B_iterator_, @ProductCollection_B_each_fFunctionT_to_Nothing, @ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductCollection_B_all_fFunctionT_to_Bool, @ProductCollection_B_any_fFunctionT_to_Bool, @ProductCollection_B_enumerate_, @ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ProductCollection_B_filter_fFunctionT_to_Bool, @ProductCollection_B_chain_otherIterableT_chain_otherCollectionT, @ProductCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ProductCollection_B_zip_otherIterableU_zip_otherCollectionU, @ProductCollection_B_product_otherCollectionU_product_otherIterableU, @ProductCollection_size_, @ProductCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Collection_map_fFunctionT_to_U, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Collection_chain_otherCollectionT, @Collection_interleave_otherCollectionT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Collection_zip_otherCollectionU, @Collection_product_otherCollectionU, @Iterable_product_otherIterableU, @ProductCollection_field_ProductCollection_2, @ProductCollection_B_iterator_, @ProductCollection_B_each_fFunctionT_to_Nothing, @ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductCollection_B_all_fFunctionT_to_Bool, @ProductCollection_B_any_fFunctionT_to_Bool, @ProductCollection_B_enumerate_, @ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ProductCollection_B_filter_fFunctionT_to_Bool, @ProductCollection_B_chain_otherIterableT_chain_otherCollectionT, @ProductCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ProductCollection_B_zip_otherIterableU_zip_otherCollectionU, @ProductCollection_B_product_otherCollectionU_product_otherIterableU, @ProductCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ProductCollection_field_ProductCollection_2, @ProductCollection_B_iterator_, @ProductCollection_B_each_fFunctionT_to_Nothing, @ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductCollection_B_all_fFunctionT_to_Bool, @ProductCollection_B_any_fFunctionT_to_Bool, @ProductCollection_B_enumerate_, @ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U, @ProductCollection_B_filter_fFunctionT_to_Bool, @ProductCollection_B_chain_otherIterableT_chain_otherCollectionT, @ProductCollection_B_interleave_otherCollectionT_interleave_otherIterableT, @ProductCollection_B_zip_otherIterableU_zip_otherCollectionU, @ProductCollection_B_product_otherCollectionU_product_otherIterableU, @ProductCollection_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Collection_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Iterable, 18446744073709551615 : i64, @ProductCollection, @Container, 18446744073709551615 : i64, @Collection, @Object], "offset_tbl" = [10 : i32, 105 : i32, 0 : i32, 10 : i32, 130 : i32, 0 : i32, 48 : i32, 130 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 18135768441938478679 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ProductCollection", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Collection", "types" = []} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Collection_field_Collection_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Collection.T"]} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.ptr):
      %2 = "mid.invariant"(%1) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %3 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb1] : () -> ()
    ^bb1:
      %4 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%4, %3) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb2] : () -> ()
    ^bb2:
      %5 = "llvm.extractvalue"(%0) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %6 = "llvm.load"(%3) : (!llvm.ptr) -> i32
      %7 = "llvm.getelementptr"(%5, %6) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %8 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %9 = "llvm.getelementptr"(%7, %8) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%9) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_iterator_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb3(%10 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %11 : !llvm.ptr):
      %12 = "mid.invariant"(%11) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %13 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb4] : () -> ()
    ^bb4:
      %14 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%14, %13) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb5] : () -> ()
    ^bb5:
      %15 = "llvm.extractvalue"(%10) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %16 = "llvm.load"(%13) : (!llvm.ptr) -> i32
      %17 = "llvm.getelementptr"(%15, %16) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %18 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %19 = "llvm.getelementptr"(%17, %18) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%19) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb6(%20 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %21 : !llvm.ptr):
      %22 = "mid.invariant"(%21) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %23 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb7] : () -> ()
    ^bb8:
      %24 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%24, %23) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb9] : () -> ()
    ^bb7:
      %25 = "llvm.getelementptr"(%21) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %26 = "mid.checkflag"(%25) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %27 = "llvm.load"(%26) : (!hi.bool) -> i1
      "cf.cond_br"(%27) [^bb8, ^bb8] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb9:
      %28 = "llvm.extractvalue"(%20) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %29 = "llvm.load"(%23) : (!llvm.ptr) -> i32
      %30 = "llvm.getelementptr"(%28, %29) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %31 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %32 = "llvm.getelementptr"(%30, %31) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%32) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb10(%33 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %34 : !llvm.ptr):
      %35 = "mid.invariant"(%34) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %36 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb11] : () -> ()
    ^bb12:
      %37 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%37, %36) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb13] : () -> ()
    ^bb14:
      %38 = "llvm.getelementptr"(%34) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %39 = "mid.checkflag"(%38) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %40 = "llvm.load"(%39) : (!hi.bool) -> i1
      "cf.cond_br"(%40) [^bb12, ^bb12] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb11:
      %41 = "llvm.getelementptr"(%34) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %42 = "mid.checkflag"(%41) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %43 = "llvm.load"(%42) : (!hi.bool) -> i1
      "cf.cond_br"(%43) [^bb14, ^bb14] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb13:
      %44 = "llvm.extractvalue"(%33) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %45 = "llvm.load"(%36) : (!llvm.ptr) -> i32
      %46 = "llvm.getelementptr"(%44, %45) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %47 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %48 = "llvm.getelementptr"(%46, %47) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%48) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb15(%49 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %50 : !llvm.ptr):
      %51 = "mid.invariant"(%50) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %52 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb17:
      %53 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%53, %52) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb16:
      %54 = "llvm.getelementptr"(%50) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %55 = "mid.checkflag"(%54) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %56 = "llvm.load"(%55) : (!hi.bool) -> i1
      "cf.cond_br"(%56) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb18:
      %57 = "llvm.extractvalue"(%49) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %58 = "llvm.load"(%52) : (!llvm.ptr) -> i32
      %59 = "llvm.getelementptr"(%57, %58) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %60 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %61 = "llvm.getelementptr"(%59, %60) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%61) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb19(%62 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %63 : !llvm.ptr):
      %64 = "mid.invariant"(%63) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %65 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb20] : () -> ()
    ^bb21:
      %66 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%66, %65) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb22] : () -> ()
    ^bb20:
      %67 = "llvm.getelementptr"(%63) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %68 = "mid.checkflag"(%67) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %69 = "llvm.load"(%68) : (!hi.bool) -> i1
      "cf.cond_br"(%69) [^bb21, ^bb21] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %70 = "llvm.extractvalue"(%62) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %71 = "llvm.load"(%65) : (!llvm.ptr) -> i32
      %72 = "llvm.getelementptr"(%70, %71) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %73 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %74 = "llvm.getelementptr"(%72, %73) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%74) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb23(%75 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %76 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %77 : !llvm.ptr):
      %78 = "mid.wrap"(%75) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %79 = "hi.cast"(%78) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %80 = "mid.unwrap"(%79) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %81 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "EnumeratedCollection", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %82 = "hi.cast"(%79) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %83 = "mid.unwrap"(%82) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %84 = "mid.unwrap"(%81) : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %85 = "mid.parameterization"() {"id_hierarchy" = ["Collection", ["any_typ"]], "name_hierarchy" = ["CollectionCollection.T", ["Collection.T"]]} : () -> !llvm.ptr
      %86 = "mid.parameterizations_array"(%85) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%86, %84, %83) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 118 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %87 = "hi.cast"(%81) {"from_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Collection">]>]>, "from_typ_name" = "EnumeratedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Collection">]>]>
      "mid.return"(%87) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Collection">]>]>) -> ()
    }) {"func_name" = "Collection_enumerate_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb24(%88 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %89 : !llvm.ptr):
      %90 = "mid.invariant"(%89) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %91 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb25] : () -> ()
    ^bb25:
      %92 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%92, %91) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb26] : () -> ()
    ^bb26:
      %93 = "llvm.extractvalue"(%88) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %94 = "llvm.load"(%91) : (!llvm.ptr) -> i32
      %95 = "llvm.getelementptr"(%93, %94) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %96 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %97 = "llvm.getelementptr"(%95, %96) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%97) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb27(%98 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %99 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %100 : !llvm.ptr, %101 : !llvm.struct<(!llvm.ptr, i64)>):
      %102 = "mid.wrap"(%98) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %103 = "hi.cast"(%102) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %104 = "mid.wrap"(%101) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>, !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>]>
      %105 = "hi.cast"(%104) {"from_typ" = !hi.union<[!hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>, !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>]>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>, "from_typ_name" = "union_typ", "to_typ_name" = "function_typ"} : (!hi.union<[!hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>, !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>
      %106 = "mid.unwrap"(%103) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %107 = "mid.unwrap"(%105) : (!hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>) -> !llvm.struct<(!llvm.ptr)>
      %108 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MappedCollection", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>
      %109 = "hi.cast"(%103) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %110 = "mid.unwrap"(%109) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %111 = "hi.cast"(%105) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "Collection">], !hi.any, !hi.type_param<"U", !hi.any, "Collection">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %112 = "mid.unwrap"(%111) : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !llvm.struct<(!llvm.ptr)>
      %113 = "mid.unwrap"(%108) : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %114 = "mid.parameterization"() {"id_hierarchy" = ["Collection", ["any_typ"]], "name_hierarchy" = ["CollectionCollection.T", ["Collection.T"]]} : () -> !llvm.ptr
      %115 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["any_typ"], ["any_typ"]], "name_hierarchy" = ["FunctionCollection.T_to_Collection.U", ["Collection.U"], ["Collection.T"]]} : () -> !llvm.ptr
      %116 = "mid.parameterizations_array"(%114, %115) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%116, %113, %110, %112) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 119 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %117 = "hi.cast"(%108) {"from_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>, "from_typ_name" = "MappedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>
      "mid.return"(%117) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Collection">]>) -> ()
    }) {"func_name" = "Collection_map_fFunctionT_to_U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, i64)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb28(%118 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %119 : !llvm.ptr):
      %120 = "mid.invariant"(%119) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %121 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb29] : () -> ()
    ^bb30:
      %122 = "llvm.mlir.constant"() <{"value" = 60 : i32}> : () -> i32
      "llvm.store"(%122, %121) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb31] : () -> ()
    ^bb32:
      %123 = "llvm.mlir.constant"() <{"value" = 59 : i32}> : () -> i32
      "llvm.store"(%123, %121) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb31] : () -> ()
    ^bb29:
      %124 = "llvm.getelementptr"(%119) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %125 = "mid.checkflag"(%124) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %126 = "llvm.load"(%125) : (!hi.bool) -> i1
      "cf.cond_br"(%126) [^bb30, ^bb33] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb33:
      %127 = "llvm.getelementptr"(%119) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %128 = "mid.checkflag"(%127) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %129 = "llvm.load"(%128) : (!hi.bool) -> i1
      "cf.cond_br"(%129) [^bb32, ^bb32] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb31:
      %130 = "llvm.extractvalue"(%118) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %131 = "llvm.load"(%121) : (!llvm.ptr) -> i32
      %132 = "llvm.getelementptr"(%130, %131) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %133 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %134 = "llvm.getelementptr"(%132, %133) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%134) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb34(%135 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %136 : !llvm.ptr):
      %137 = "mid.invariant"(%136) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %138 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb35] : () -> ()
    ^bb36:
      %139 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%139, %138) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb37] : () -> ()
    ^bb35:
      %140 = "llvm.getelementptr"(%136) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %141 = "mid.checkflag"(%140) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %142 = "llvm.load"(%141) : (!hi.bool) -> i1
      "cf.cond_br"(%142) [^bb36, ^bb36] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb37:
      %143 = "llvm.extractvalue"(%135) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %144 = "llvm.load"(%138) : (!llvm.ptr) -> i32
      %145 = "llvm.getelementptr"(%143, %144) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %146 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %147 = "llvm.getelementptr"(%145, %146) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%147) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb38(%148 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %149 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %150 : !llvm.ptr, %151 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %152 = "mid.wrap"(%148) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %153 = "hi.cast"(%152) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %154 = "mid.wrap"(%151) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>
      %155 = "hi.cast"(%154) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %156 = "mid.unwrap"(%153) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %157 = "mid.unwrap"(%155) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %158 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ChainedCollection", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %159 = "hi.cast"(%153) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %160 = "mid.unwrap"(%159) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %161 = "hi.cast"(%155) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %162 = "mid.unwrap"(%161) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %163 = "mid.unwrap"(%158) : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %164 = "mid.parameterization"() {"id_hierarchy" = ["Collection", ["any_typ"]], "name_hierarchy" = ["CollectionCollection.T", ["Collection.T"]]} : () -> !llvm.ptr
      %165 = "mid.parameterization"() {"id_hierarchy" = ["Collection", ["any_typ"]], "name_hierarchy" = ["CollectionCollection.T", ["Collection.T"]]} : () -> !llvm.ptr
      %166 = "mid.parameterizations_array"(%164, %165) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%166, %163, %160, %162) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 118 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %167 = "hi.cast"(%158) {"from_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "ChainedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>
      "mid.return"(%167) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>) -> ()
    }) {"func_name" = "Collection_chain_otherCollectionT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb39(%168 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %169 : !llvm.ptr):
      %170 = "mid.invariant"(%169) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %171 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb40] : () -> ()
    ^bb41:
      %172 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%172, %171) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb42] : () -> ()
    ^bb43:
      %173 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%173, %171) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb42] : () -> ()
    ^bb40:
      %174 = "llvm.getelementptr"(%169) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %175 = "mid.checkflag"(%174) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %176 = "llvm.load"(%175) : (!hi.bool) -> i1
      "cf.cond_br"(%176) [^bb44, ^bb45] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb44:
      %177 = "llvm.getelementptr"(%169) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %178 = "mid.checkflag"(%177) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %179 = "llvm.load"(%178) : (!hi.bool) -> i1
      "cf.cond_br"(%179) [^bb45, ^bb41] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb45:
      %180 = "llvm.getelementptr"(%169) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %181 = "mid.checkflag"(%180) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %182 = "llvm.load"(%181) : (!hi.bool) -> i1
      "cf.cond_br"(%182) [^bb43, ^bb43] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb42:
      %183 = "llvm.extractvalue"(%168) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %184 = "llvm.load"(%171) : (!llvm.ptr) -> i32
      %185 = "llvm.getelementptr"(%183, %184) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %186 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %187 = "llvm.getelementptr"(%185, %186) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%187) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb46(%188 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %189 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %190 : !llvm.ptr, %191 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %192 = "mid.wrap"(%188) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %193 = "hi.cast"(%192) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %194 = "mid.wrap"(%191) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>
      %195 = "hi.cast"(%194) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %196 = "mid.unwrap"(%193) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %197 = "mid.unwrap"(%195) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %198 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "InterleavedCollection", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %199 = "hi.cast"(%193) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %200 = "mid.unwrap"(%199) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %201 = "hi.cast"(%195) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %202 = "mid.unwrap"(%201) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %203 = "mid.unwrap"(%198) : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %204 = "mid.parameterization"() {"id_hierarchy" = ["Collection", ["any_typ"]], "name_hierarchy" = ["CollectionCollection.T", ["Collection.T"]]} : () -> !llvm.ptr
      %205 = "mid.parameterization"() {"id_hierarchy" = ["Collection", ["any_typ"]], "name_hierarchy" = ["CollectionCollection.T", ["Collection.T"]]} : () -> !llvm.ptr
      %206 = "mid.parameterizations_array"(%204, %205) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%206, %203, %200, %202) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 118 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %207 = "hi.cast"(%198) {"from_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "InterleavedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>
      "mid.return"(%207) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Collection">]>) -> ()
    }) {"func_name" = "Collection_interleave_otherCollectionT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb47(%208 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %209 : !llvm.ptr):
      %210 = "mid.invariant"(%209) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %211 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb48] : () -> ()
    ^bb49:
      %212 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%212, %211) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb50] : () -> ()
    ^bb51:
      %213 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%213, %211) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb50] : () -> ()
    ^bb48:
      %214 = "llvm.getelementptr"(%209) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %215 = "mid.checkflag"(%214) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %216 = "llvm.load"(%215) : (!hi.bool) -> i1
      "cf.cond_br"(%216) [^bb52, ^bb53] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb52:
      %217 = "llvm.getelementptr"(%209) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %218 = "mid.checkflag"(%217) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %219 = "llvm.load"(%218) : (!hi.bool) -> i1
      "cf.cond_br"(%219) [^bb53, ^bb49] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb53:
      %220 = "llvm.getelementptr"(%209) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %221 = "mid.checkflag"(%220) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %222 = "llvm.load"(%221) : (!hi.bool) -> i1
      "cf.cond_br"(%222) [^bb51, ^bb51] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb50:
      %223 = "llvm.extractvalue"(%208) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %224 = "llvm.load"(%211) : (!llvm.ptr) -> i32
      %225 = "llvm.getelementptr"(%223, %224) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %226 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %227 = "llvm.getelementptr"(%225, %226) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%227) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb54(%228 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %229 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %230 : !llvm.ptr, %231 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %232 = "mid.wrap"(%228) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %233 = "hi.cast"(%232) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %234 = "mid.wrap"(%231) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %235 = "hi.cast"(%234) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>
      %236 = "mid.unwrap"(%233) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %237 = "mid.unwrap"(%235) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %238 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZippedCollection", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>
      %239 = "hi.cast"(%233) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %240 = "mid.unwrap"(%239) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %241 = "hi.cast"(%235) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %242 = "mid.unwrap"(%241) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %243 = "mid.unwrap"(%238) : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %244 = "mid.parameterization"() {"id_hierarchy" = ["Collection", ["any_typ"]], "name_hierarchy" = ["CollectionCollection.T", ["Collection.T"]]} : () -> !llvm.ptr
      %245 = "mid.parameterization"() {"id_hierarchy" = ["Collection", ["any_typ"]], "name_hierarchy" = ["CollectionCollection.U", ["Collection.U"]]} : () -> !llvm.ptr
      %246 = "mid.parameterizations_array"(%244, %245) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%246, %243, %240, %242) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 120 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %247 = "hi.cast"(%238) {"from_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>, "from_typ_name" = "ZippedCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>
      "mid.return"(%247) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>) -> ()
    }) {"func_name" = "Collection_zip_otherCollectionU", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb55(%248 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %249 : !llvm.ptr):
      %250 = "mid.invariant"(%249) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %251 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb56] : () -> ()
    ^bb57:
      %252 = "llvm.mlir.constant"() <{"value" = 64 : i32}> : () -> i32
      "llvm.store"(%252, %251) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb58] : () -> ()
    ^bb59:
      %253 = "llvm.mlir.constant"() <{"value" = 65 : i32}> : () -> i32
      "llvm.store"(%253, %251) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb58] : () -> ()
    ^bb56:
      %254 = "llvm.getelementptr"(%249) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %255 = "mid.checkflag"(%254) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %256 = "llvm.load"(%255) : (!hi.bool) -> i1
      "cf.cond_br"(%256) [^bb60, ^bb61] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb60:
      %257 = "llvm.getelementptr"(%249) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %258 = "mid.checkflag"(%257) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %259 = "llvm.load"(%258) : (!hi.bool) -> i1
      "cf.cond_br"(%259) [^bb61, ^bb57] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb61:
      %260 = "llvm.getelementptr"(%249) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %261 = "mid.checkflag"(%260) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %262 = "llvm.load"(%261) : (!hi.bool) -> i1
      "cf.cond_br"(%262) [^bb59, ^bb59] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb58:
      %263 = "llvm.extractvalue"(%248) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %264 = "llvm.load"(%251) : (!llvm.ptr) -> i32
      %265 = "llvm.getelementptr"(%263, %264) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %266 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %267 = "llvm.getelementptr"(%265, %266) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%267) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb62(%268 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %269 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %270 : !llvm.ptr, %271 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %272 = "mid.wrap"(%268) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %273 = "hi.cast"(%272) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>
      %274 = "mid.wrap"(%271) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %275 = "hi.cast"(%274) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Collection"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>
      %276 = "mid.unwrap"(%273) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %277 = "mid.unwrap"(%275) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %278 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ProductCollection", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>
      %279 = "hi.cast"(%273) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %280 = "mid.unwrap"(%279) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %281 = "hi.cast"(%275) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %282 = "mid.unwrap"(%281) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %283 = "mid.unwrap"(%278) : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %284 = "mid.parameterization"() {"id_hierarchy" = ["Collection", ["any_typ"]], "name_hierarchy" = ["CollectionCollection.T", ["Collection.T"]]} : () -> !llvm.ptr
      %285 = "mid.parameterization"() {"id_hierarchy" = ["Collection", ["any_typ"]], "name_hierarchy" = ["CollectionCollection.U", ["Collection.U"]]} : () -> !llvm.ptr
      %286 = "mid.parameterizations_array"(%284, %285) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%286, %283, %280, %282) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 120 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %287 = "hi.cast"(%278) {"from_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>, "from_typ_name" = "ProductCollection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>
      "mid.return"(%287) : (!hi.fatptr<"Iterable", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "Collection">, !hi.type_param<"U", !hi.any, "Collection">]>]>) -> ()
    }) {"func_name" = "Collection_product_otherCollectionU", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb63(%288 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %289 : !llvm.ptr):
      %290 = "mid.invariant"(%289) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %291 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb64] : () -> ()
    ^bb65:
      %292 = "llvm.mlir.constant"() <{"value" = 67 : i32}> : () -> i32
      "llvm.store"(%292, %291) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb66] : () -> ()
    ^bb67:
      %293 = "llvm.mlir.constant"() <{"value" = 66 : i32}> : () -> i32
      "llvm.store"(%293, %291) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb66] : () -> ()
    ^bb64:
      %294 = "llvm.getelementptr"(%289) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %295 = "mid.checkflag"(%294) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %296 = "llvm.load"(%295) : (!hi.bool) -> i1
      "cf.cond_br"(%296) [^bb68, ^bb69] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb68:
      %297 = "llvm.getelementptr"(%289) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %298 = "mid.checkflag"(%297) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %299 = "llvm.load"(%298) : (!hi.bool) -> i1
      "cf.cond_br"(%299) [^bb69, ^bb65] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb69:
      %300 = "llvm.getelementptr"(%289) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %301 = "mid.checkflag"(%300) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %302 = "llvm.load"(%301) : (!hi.bool) -> i1
      "cf.cond_br"(%302) [^bb67, ^bb67] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb66:
      %303 = "llvm.extractvalue"(%288) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %304 = "llvm.load"(%291) : (!llvm.ptr) -> i32
      %305 = "llvm.getelementptr"(%303, %304) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<57 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %306 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %307 = "llvm.getelementptr"(%305, %306) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%307) : (!llvm.ptr) -> ()
    }) {"func_name" = "Collection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_EnumeratedCollection", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "EnumeratedCollection_getter_collection", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionEnumeratedCollection.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "EnumeratedCollection_setter_collection", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionEnumeratedCollection.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "EnumeratedCollection_field_collection", "getter_name" = "EnumeratedCollection_getter_collection", "setter_name" = "EnumeratedCollection_setter_collection"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "EnumeratedCollection_field_EnumeratedCollection_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["EnumeratedCollection.T"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "EnumeratedCollection_field_EnumeratedCollection_1", "id_hierarchy" = ["Pair", ["i32_typ"], ["any_typ"]], "name_hierarchy" = ["Pairi32._EnumeratedCollection.T", ["i32"], ["EnumeratedCollection.T"]]} : () -> ()
    "mid.func"() ({
    ^bb70(%308 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %309 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %310 : !llvm.ptr, %311 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %312 = "mid.wrap"(%308) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %313 = "hi.cast"(%312) {"from_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "EnumeratedCollection", "to_typ_name" = "EnumeratedCollection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %314 = "mid.wrap"(%311) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %315 = "hi.cast"(%314) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %316 = "hi.cast"(%315) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      "mid.set_field"(%313, %316) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> ()
    }) {"func_name" = "EnumeratedCollection_init_collectionCollectionT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb71(%317 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %318 : !llvm.ptr):
      %319 = "mid.invariant"(%318) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %320 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb72] : () -> ()
    ^bb73:
      %321 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%321, %320) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb74] : () -> ()
    ^bb72:
      %322 = "llvm.getelementptr"(%318) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %323 = "mid.checkflag"(%322) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %324 = "llvm.load"(%323) : (!hi.bool) -> i1
      "cf.cond_br"(%324) [^bb73, ^bb73] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb74:
      %325 = "llvm.extractvalue"(%317) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %326 = "llvm.load"(%320) : (!llvm.ptr) -> i32
      %327 = "llvm.getelementptr"(%325, %326) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %328 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %329 = "llvm.getelementptr"(%327, %328) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%329) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_init_collectionCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb75(%330 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %331 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %332 : !llvm.ptr):
      %333 = "mid.wrap"(%330) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %334 = "hi.cast"(%333) {"from_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "EnumeratedCollection", "to_typ_name" = "EnumeratedCollection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %335 = "mid.get_field"(%334) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %336 = "mid.unwrap"(%335) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %337 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %338 = "mid.method_call"(%337, %336) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %339 = "hi.cast"(%338) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %340 = "hi.cast"(%339) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%340) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "EnumeratedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb76(%341 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %342 : !llvm.ptr):
      %343 = "mid.invariant"(%342) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %344 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb77] : () -> ()
    ^bb77:
      %345 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%345, %344) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb78] : () -> ()
    ^bb78:
      %346 = "llvm.extractvalue"(%341) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %347 = "llvm.load"(%344) : (!llvm.ptr) -> i32
      %348 = "llvm.getelementptr"(%346, %347) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %349 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %350 = "llvm.getelementptr"(%348, %349) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%350) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb79(%351 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %352 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %353 : !llvm.ptr):
      %354 = "mid.wrap"(%351) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %355 = "hi.cast"(%354) {"from_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "EnumeratedCollection", "to_typ_name" = "EnumeratedCollection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %356 = "mid.get_field"(%355) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %357 = "mid.unwrap"(%356) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %358 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %359 = "mid.method_call"(%358, %357) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %360 = "hi.cast"(%359) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %361 = "mid.unwrap"(%360) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %362 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "Enumerator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %363 = "mid.get_field"(%355) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"EnumeratedCollection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %364 = "mid.unwrap"(%363) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %365 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %366 = "mid.method_call"(%365, %364) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %367 = "hi.cast"(%366) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>
      %368 = "hi.cast"(%367) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>
      %369 = "mid.unwrap"(%368) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Enumerator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %370 = "mid.unwrap"(%362) : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %371 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorEnumeratedCollection.T", ["EnumeratedCollection.T"]]} : () -> !llvm.ptr
      %372 = "mid.parameterizations_array"(%371) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%372, %370, %369) {"offset" = 4 : i32, "vptrs" = [#none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %373 = "hi.cast"(%362) {"from_typ" = !hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "EnumeratedCollection">]>]>, "from_typ_name" = "Enumerator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Enumerator", [!hi.type_param<"T", !hi.any, "EnumeratedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "EnumeratedCollection">]>]>
      "mid.return"(%373) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "EnumeratedCollection">]>]>) -> ()
    }) {"func_name" = "EnumeratedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb80(%374 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %375 : !llvm.ptr):
      %376 = "mid.invariant"(%375) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %377 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb81] : () -> ()
    ^bb81:
      %378 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%378, %377) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb82] : () -> ()
    ^bb82:
      %379 = "llvm.extractvalue"(%374) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %380 = "llvm.load"(%377) : (!llvm.ptr) -> i32
      %381 = "llvm.getelementptr"(%379, %380) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %382 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %383 = "llvm.getelementptr"(%381, %382) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%383) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb83(%384 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %385 : !llvm.ptr):
      %386 = "mid.invariant"(%385) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %387 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb84] : () -> ()
    ^bb85:
      %388 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%388, %387) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb86] : () -> ()
    ^bb84:
      %389 = "llvm.getelementptr"(%385) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %390 = "mid.checkflag"(%389) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %391 = "llvm.load"(%390) : (!hi.bool) -> i1
      "cf.cond_br"(%391) [^bb85, ^bb85] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb86:
      %392 = "llvm.extractvalue"(%384) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %393 = "llvm.load"(%387) : (!llvm.ptr) -> i32
      %394 = "llvm.getelementptr"(%392, %393) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %395 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %396 = "llvm.getelementptr"(%394, %395) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%396) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb87(%397 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %398 : !llvm.ptr):
      %399 = "mid.invariant"(%398) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %400 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb88] : () -> ()
    ^bb89:
      %401 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%401, %400) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb90] : () -> ()
    ^bb91:
      %402 = "llvm.getelementptr"(%398) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %403 = "mid.checkflag"(%402) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %404 = "llvm.load"(%403) : (!hi.bool) -> i1
      "cf.cond_br"(%404) [^bb89, ^bb89] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb88:
      %405 = "llvm.getelementptr"(%398) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %406 = "mid.checkflag"(%405) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %407 = "llvm.load"(%406) : (!hi.bool) -> i1
      "cf.cond_br"(%407) [^bb91, ^bb91] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb90:
      %408 = "llvm.extractvalue"(%397) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %409 = "llvm.load"(%400) : (!llvm.ptr) -> i32
      %410 = "llvm.getelementptr"(%408, %409) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %411 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %412 = "llvm.getelementptr"(%410, %411) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%412) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb92(%413 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %414 : !llvm.ptr):
      %415 = "mid.invariant"(%414) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %416 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb93] : () -> ()
    ^bb94:
      %417 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%417, %416) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb95] : () -> ()
    ^bb93:
      %418 = "llvm.getelementptr"(%414) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %419 = "mid.checkflag"(%418) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %420 = "llvm.load"(%419) : (!hi.bool) -> i1
      "cf.cond_br"(%420) [^bb94, ^bb94] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb95:
      %421 = "llvm.extractvalue"(%413) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %422 = "llvm.load"(%416) : (!llvm.ptr) -> i32
      %423 = "llvm.getelementptr"(%421, %422) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %424 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %425 = "llvm.getelementptr"(%423, %424) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%425) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb96(%426 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %427 : !llvm.ptr):
      %428 = "mid.invariant"(%427) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %429 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb97] : () -> ()
    ^bb98:
      %430 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%430, %429) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb99] : () -> ()
    ^bb97:
      %431 = "llvm.getelementptr"(%427) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %432 = "mid.checkflag"(%431) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %433 = "llvm.load"(%432) : (!hi.bool) -> i1
      "cf.cond_br"(%433) [^bb98, ^bb98] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb99:
      %434 = "llvm.extractvalue"(%426) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %435 = "llvm.load"(%429) : (!llvm.ptr) -> i32
      %436 = "llvm.getelementptr"(%434, %435) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %437 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %438 = "llvm.getelementptr"(%436, %437) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%438) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb100(%439 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %440 : !llvm.ptr):
      %441 = "mid.invariant"(%440) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %442 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb101] : () -> ()
    ^bb101:
      %443 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%443, %442) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb102] : () -> ()
    ^bb102:
      %444 = "llvm.extractvalue"(%439) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %445 = "llvm.load"(%442) : (!llvm.ptr) -> i32
      %446 = "llvm.getelementptr"(%444, %445) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %447 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %448 = "llvm.getelementptr"(%446, %447) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%448) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb103(%449 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %450 : !llvm.ptr):
      %451 = "mid.invariant"(%450) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %452 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb104] : () -> ()
    ^bb105:
      %453 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%453, %452) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb106] : () -> ()
    ^bb107:
      %454 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%454, %452) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb106] : () -> ()
    ^bb104:
      %455 = "llvm.getelementptr"(%450) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %456 = "mid.checkflag"(%455) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %457 = "llvm.load"(%456) : (!hi.bool) -> i1
      "cf.cond_br"(%457) [^bb105, ^bb108] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb108:
      %458 = "llvm.getelementptr"(%450) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %459 = "mid.checkflag"(%458) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %460 = "llvm.load"(%459) : (!hi.bool) -> i1
      "cf.cond_br"(%460) [^bb107, ^bb107] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb106:
      %461 = "llvm.extractvalue"(%449) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %462 = "llvm.load"(%452) : (!llvm.ptr) -> i32
      %463 = "llvm.getelementptr"(%461, %462) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %464 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %465 = "llvm.getelementptr"(%463, %464) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%465) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb109(%466 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %467 : !llvm.ptr):
      %468 = "mid.invariant"(%467) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %469 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb110] : () -> ()
    ^bb111:
      %470 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%470, %469) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb112] : () -> ()
    ^bb110:
      %471 = "llvm.getelementptr"(%467) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %472 = "mid.checkflag"(%471) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %473 = "llvm.load"(%472) : (!hi.bool) -> i1
      "cf.cond_br"(%473) [^bb111, ^bb111] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb112:
      %474 = "llvm.extractvalue"(%466) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %475 = "llvm.load"(%469) : (!llvm.ptr) -> i32
      %476 = "llvm.getelementptr"(%474, %475) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %477 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %478 = "llvm.getelementptr"(%476, %477) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%478) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb113(%479 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %480 : !llvm.ptr):
      %481 = "mid.invariant"(%480) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %482 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb114] : () -> ()
    ^bb115:
      %483 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%483, %482) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb116] : () -> ()
    ^bb117:
      %484 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%484, %482) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb116] : () -> ()
    ^bb114:
      %485 = "llvm.getelementptr"(%480) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %486 = "mid.checkflag"(%485) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %487 = "llvm.load"(%486) : (!hi.bool) -> i1
      "cf.cond_br"(%487) [^bb118, ^bb119] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb118:
      %488 = "llvm.getelementptr"(%480) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %489 = "mid.checkflag"(%488) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %490 = "llvm.load"(%489) : (!hi.bool) -> i1
      "cf.cond_br"(%490) [^bb119, ^bb115] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb119:
      %491 = "llvm.getelementptr"(%480) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %492 = "mid.checkflag"(%491) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %493 = "llvm.load"(%492) : (!hi.bool) -> i1
      "cf.cond_br"(%493) [^bb117, ^bb117] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb116:
      %494 = "llvm.extractvalue"(%479) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %495 = "llvm.load"(%482) : (!llvm.ptr) -> i32
      %496 = "llvm.getelementptr"(%494, %495) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %497 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %498 = "llvm.getelementptr"(%496, %497) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%498) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb120(%499 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %500 : !llvm.ptr):
      %501 = "mid.invariant"(%500) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %502 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb121] : () -> ()
    ^bb122:
      %503 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%503, %502) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb123] : () -> ()
    ^bb124:
      %504 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%504, %502) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb123] : () -> ()
    ^bb121:
      %505 = "llvm.getelementptr"(%500) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %506 = "mid.checkflag"(%505) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %507 = "llvm.load"(%506) : (!hi.bool) -> i1
      "cf.cond_br"(%507) [^bb122, ^bb125] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb125:
      %508 = "llvm.getelementptr"(%500) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %509 = "mid.checkflag"(%508) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %510 = "llvm.load"(%509) : (!hi.bool) -> i1
      "cf.cond_br"(%510) [^bb126, ^bb124] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb126:
      %511 = "llvm.getelementptr"(%500) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %512 = "mid.checkflag"(%511) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %513 = "llvm.load"(%512) : (!hi.bool) -> i1
      "cf.cond_br"(%513) [^bb124, ^bb124] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb123:
      %514 = "llvm.extractvalue"(%499) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %515 = "llvm.load"(%502) : (!llvm.ptr) -> i32
      %516 = "llvm.getelementptr"(%514, %515) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %517 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %518 = "llvm.getelementptr"(%516, %517) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%518) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb127(%519 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %520 : !llvm.ptr):
      %521 = "mid.invariant"(%520) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %522 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb128] : () -> ()
    ^bb129:
      %523 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%523, %522) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb130] : () -> ()
    ^bb131:
      %524 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%524, %522) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb130] : () -> ()
    ^bb128:
      %525 = "llvm.getelementptr"(%520) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %526 = "mid.checkflag"(%525) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %527 = "llvm.load"(%526) : (!hi.bool) -> i1
      "cf.cond_br"(%527) [^bb129, ^bb132] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb132:
      %528 = "llvm.getelementptr"(%520) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %529 = "mid.checkflag"(%528) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %530 = "llvm.load"(%529) : (!hi.bool) -> i1
      "cf.cond_br"(%530) [^bb133, ^bb131] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb133:
      %531 = "llvm.getelementptr"(%520) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %532 = "mid.checkflag"(%531) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %533 = "llvm.load"(%532) : (!hi.bool) -> i1
      "cf.cond_br"(%533) [^bb131, ^bb131] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb130:
      %534 = "llvm.extractvalue"(%519) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %535 = "llvm.load"(%522) : (!llvm.ptr) -> i32
      %536 = "llvm.getelementptr"(%534, %535) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %537 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %538 = "llvm.getelementptr"(%536, %537) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%538) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb134(%539 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %540 : !llvm.ptr):
      %541 = "mid.invariant"(%540) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %542 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb135] : () -> ()
    ^bb136:
      %543 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%543, %542) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb137] : () -> ()
    ^bb138:
      %544 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%544, %542) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb137] : () -> ()
    ^bb135:
      %545 = "llvm.getelementptr"(%540) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %546 = "mid.checkflag"(%545) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %547 = "llvm.load"(%546) : (!hi.bool) -> i1
      "cf.cond_br"(%547) [^bb139, ^bb140] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb139:
      %548 = "llvm.getelementptr"(%540) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %549 = "mid.checkflag"(%548) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %550 = "llvm.load"(%549) : (!hi.bool) -> i1
      "cf.cond_br"(%550) [^bb140, ^bb136] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb140:
      %551 = "llvm.getelementptr"(%540) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %552 = "mid.checkflag"(%551) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %553 = "llvm.load"(%552) : (!hi.bool) -> i1
      "cf.cond_br"(%553) [^bb138, ^bb138] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb137:
      %554 = "llvm.extractvalue"(%539) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %555 = "llvm.load"(%542) : (!llvm.ptr) -> i32
      %556 = "llvm.getelementptr"(%554, %555) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %557 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %558 = "llvm.getelementptr"(%556, %557) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%558) : (!llvm.ptr) -> ()
    }) {"func_name" = "EnumeratedCollection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_MappedCollection", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "MappedCollection_getter_collection", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionMappedCollection.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MappedCollection_setter_collection", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionMappedCollection.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MappedCollection_field_collection", "getter_name" = "MappedCollection_getter_collection", "setter_name" = "MappedCollection_setter_collection"} : () -> ()
    "mid.getter_def"() {"meth_name" = "MappedCollection_getter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMappedCollection.T_to_MappedCollection.U"} : () -> ()
    "mid.setter_def"() {"meth_name" = "MappedCollection_setter_f", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMappedCollection.T_to_MappedCollection.U"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "MappedCollection_field_f", "getter_name" = "MappedCollection_getter_f", "setter_name" = "MappedCollection_setter_f"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "MappedCollection_field_MappedCollection_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["MappedCollection.T"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "MappedCollection_field_MappedCollection_1", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["MappedCollection.U"]} : () -> ()
    "mid.func"() ({
    ^bb141(%559 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %560 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %561 : !llvm.ptr, %562 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %563 : !llvm.struct<(!llvm.ptr)>):
      %564 = "mid.wrap"(%559) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %565 = "hi.cast"(%564) {"from_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "from_typ_name" = "MappedCollection", "to_typ_name" = "MappedCollection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %566 = "mid.wrap"(%562) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %567 = "hi.cast"(%566) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %568 = "hi.cast"(%567) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      "mid.set_field"(%565, %568) {"offset" = 0 : i64, "vtable_bytes" = 952 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> ()
      %569 = "mid.wrap"(%563) : (!llvm.struct<(!llvm.ptr)>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %570 = "hi.cast"(%569) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %571 = "hi.cast"(%570) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      "mid.set_field"(%565, %571) {"offset" = 1 : i64, "vtable_bytes" = 952 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> ()
    }) {"func_name" = "MappedCollection_init_collectionCollectionT_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb142(%572 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %573 : !llvm.ptr):
      %574 = "mid.invariant"(%573) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %575 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb143] : () -> ()
    ^bb144:
      %576 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%576, %575) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb145] : () -> ()
    ^bb146:
      %577 = "llvm.getelementptr"(%573) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %578 = "mid.checkflag"(%577) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %579 = "llvm.load"(%578) : (!hi.bool) -> i1
      "cf.cond_br"(%579) [^bb144, ^bb144] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb143:
      %580 = "llvm.getelementptr"(%573) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %581 = "mid.checkflag"(%580) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %582 = "llvm.load"(%581) : (!hi.bool) -> i1
      "cf.cond_br"(%582) [^bb146, ^bb146] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb145:
      %583 = "llvm.extractvalue"(%572) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %584 = "llvm.load"(%575) : (!llvm.ptr) -> i32
      %585 = "llvm.getelementptr"(%583, %584) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %586 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %587 = "llvm.getelementptr"(%585, %586) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%587) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_init_collectionCollectionT_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb147(%588 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %589 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %590 : !llvm.ptr):
      %591 = "mid.wrap"(%588) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %592 = "hi.cast"(%591) {"from_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "from_typ_name" = "MappedCollection", "to_typ_name" = "MappedCollection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %593 = "mid.get_field"(%592) {"offset" = 0 : i64, "vtable_bytes" = 952 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %594 = "mid.unwrap"(%593) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %595 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %596 = "mid.method_call"(%595, %594) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %597 = "hi.cast"(%596) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %598 = "hi.cast"(%597) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%598) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "MappedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb148(%599 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %600 : !llvm.ptr):
      %601 = "mid.invariant"(%600) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %602 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb149] : () -> ()
    ^bb149:
      %603 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%603, %602) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb150] : () -> ()
    ^bb150:
      %604 = "llvm.extractvalue"(%599) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %605 = "llvm.load"(%602) : (!llvm.ptr) -> i32
      %606 = "llvm.getelementptr"(%604, %605) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %607 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %608 = "llvm.getelementptr"(%606, %607) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%608) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb151(%609 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %610 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %611 : !llvm.ptr):
      %612 = "mid.wrap"(%609) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %613 = "hi.cast"(%612) {"from_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "from_typ_name" = "MappedCollection", "to_typ_name" = "MappedCollection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %614 = "mid.get_field"(%613) {"offset" = 0 : i64, "vtable_bytes" = 952 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %615 = "mid.unwrap"(%614) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %616 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %617 = "mid.method_call"(%616, %615) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %618 = "hi.cast"(%617) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %619 = "mid.get_field"(%613) {"offset" = 1 : i64, "vtable_bytes" = 952 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %620 = "mid.unwrap"(%618) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %621 = "mid.unwrap"(%619) : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !llvm.struct<(!llvm.ptr)>
      %622 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>
      %623 = "mid.get_field"(%613) {"offset" = 0 : i64, "vtable_bytes" = 952 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %624 = "mid.unwrap"(%623) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %625 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %626 = "mid.method_call"(%625, %624) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %627 = "hi.cast"(%626) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>
      %628 = "mid.get_field"(%613) {"offset" = 1 : i64, "vtable_bytes" = 952 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"MappedCollection", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>
      %629 = "hi.cast"(%627) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>
      %630 = "mid.unwrap"(%629) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "MapIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %631 = "hi.cast"(%628) {"from_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!hi.function<[!hi.type_param<"T", !hi.any, "MappedCollection">], !hi.any, !hi.type_param<"U", !hi.any, "MappedCollection">>) -> !hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>
      %632 = "mid.unwrap"(%631) : (!hi.function<[!hi.type_param<"T", !hi.any, "MapIterator">], !hi.any, !hi.type_param<"U", !hi.any, "MapIterator">>) -> !llvm.struct<(!llvm.ptr)>
      %633 = "mid.unwrap"(%622) : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %634 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorMappedCollection.T", ["MappedCollection.T"]]} : () -> !llvm.ptr
      %635 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["any_typ"], ["any_typ"]], "name_hierarchy" = ["FunctionMappedCollection.T_to_MappedCollection.U", ["MappedCollection.U"], ["MappedCollection.T"]]} : () -> !llvm.ptr
      %636 = "mid.parameterizations_array"(%634, %635) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%636, %633, %630, %632) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
      %637 = "hi.cast"(%622) {"from_typ" = !hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MappedCollection">]>, "from_typ_name" = "MapIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"MapIterator", [!hi.type_param<"T", !hi.any, "MappedCollection">, !hi.type_param<"U", !hi.any, "MappedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MappedCollection">]>
      "mid.return"(%637) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "MappedCollection">]>) -> ()
    }) {"func_name" = "MappedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb152(%638 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %639 : !llvm.ptr):
      %640 = "mid.invariant"(%639) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %641 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb153] : () -> ()
    ^bb153:
      %642 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%642, %641) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb154] : () -> ()
    ^bb154:
      %643 = "llvm.extractvalue"(%638) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %644 = "llvm.load"(%641) : (!llvm.ptr) -> i32
      %645 = "llvm.getelementptr"(%643, %644) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %646 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %647 = "llvm.getelementptr"(%645, %646) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%647) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb155(%648 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %649 : !llvm.ptr):
      %650 = "mid.invariant"(%649) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %651 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb156] : () -> ()
    ^bb157:
      %652 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%652, %651) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb158] : () -> ()
    ^bb156:
      %653 = "llvm.getelementptr"(%649) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %654 = "mid.checkflag"(%653) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %655 = "llvm.load"(%654) : (!hi.bool) -> i1
      "cf.cond_br"(%655) [^bb157, ^bb157] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb158:
      %656 = "llvm.extractvalue"(%648) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %657 = "llvm.load"(%651) : (!llvm.ptr) -> i32
      %658 = "llvm.getelementptr"(%656, %657) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %659 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %660 = "llvm.getelementptr"(%658, %659) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%660) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb159(%661 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %662 : !llvm.ptr):
      %663 = "mid.invariant"(%662) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %664 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb160] : () -> ()
    ^bb161:
      %665 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%665, %664) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb162] : () -> ()
    ^bb163:
      %666 = "llvm.getelementptr"(%662) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %667 = "mid.checkflag"(%666) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %668 = "llvm.load"(%667) : (!hi.bool) -> i1
      "cf.cond_br"(%668) [^bb161, ^bb161] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb160:
      %669 = "llvm.getelementptr"(%662) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %670 = "mid.checkflag"(%669) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %671 = "llvm.load"(%670) : (!hi.bool) -> i1
      "cf.cond_br"(%671) [^bb163, ^bb163] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb162:
      %672 = "llvm.extractvalue"(%661) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %673 = "llvm.load"(%664) : (!llvm.ptr) -> i32
      %674 = "llvm.getelementptr"(%672, %673) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %675 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %676 = "llvm.getelementptr"(%674, %675) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%676) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb164(%677 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %678 : !llvm.ptr):
      %679 = "mid.invariant"(%678) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %680 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb165] : () -> ()
    ^bb166:
      %681 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%681, %680) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb167] : () -> ()
    ^bb165:
      %682 = "llvm.getelementptr"(%678) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %683 = "mid.checkflag"(%682) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %684 = "llvm.load"(%683) : (!hi.bool) -> i1
      "cf.cond_br"(%684) [^bb166, ^bb166] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb167:
      %685 = "llvm.extractvalue"(%677) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %686 = "llvm.load"(%680) : (!llvm.ptr) -> i32
      %687 = "llvm.getelementptr"(%685, %686) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %688 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %689 = "llvm.getelementptr"(%687, %688) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%689) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb168(%690 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %691 : !llvm.ptr):
      %692 = "mid.invariant"(%691) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %693 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb169] : () -> ()
    ^bb170:
      %694 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%694, %693) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb171] : () -> ()
    ^bb169:
      %695 = "llvm.getelementptr"(%691) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %696 = "mid.checkflag"(%695) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %697 = "llvm.load"(%696) : (!hi.bool) -> i1
      "cf.cond_br"(%697) [^bb170, ^bb170] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb171:
      %698 = "llvm.extractvalue"(%690) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %699 = "llvm.load"(%693) : (!llvm.ptr) -> i32
      %700 = "llvm.getelementptr"(%698, %699) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %701 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %702 = "llvm.getelementptr"(%700, %701) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%702) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb172(%703 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %704 : !llvm.ptr):
      %705 = "mid.invariant"(%704) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %706 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb173] : () -> ()
    ^bb173:
      %707 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%707, %706) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb174] : () -> ()
    ^bb174:
      %708 = "llvm.extractvalue"(%703) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %709 = "llvm.load"(%706) : (!llvm.ptr) -> i32
      %710 = "llvm.getelementptr"(%708, %709) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %711 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %712 = "llvm.getelementptr"(%710, %711) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%712) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb175(%713 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %714 : !llvm.ptr):
      %715 = "mid.invariant"(%714) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %716 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb176] : () -> ()
    ^bb177:
      %717 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%717, %716) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb178] : () -> ()
    ^bb179:
      %718 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%718, %716) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb178] : () -> ()
    ^bb176:
      %719 = "llvm.getelementptr"(%714) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %720 = "mid.checkflag"(%719) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %721 = "llvm.load"(%720) : (!hi.bool) -> i1
      "cf.cond_br"(%721) [^bb177, ^bb180] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb180:
      %722 = "llvm.getelementptr"(%714) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %723 = "mid.checkflag"(%722) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %724 = "llvm.load"(%723) : (!hi.bool) -> i1
      "cf.cond_br"(%724) [^bb179, ^bb179] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb178:
      %725 = "llvm.extractvalue"(%713) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %726 = "llvm.load"(%716) : (!llvm.ptr) -> i32
      %727 = "llvm.getelementptr"(%725, %726) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %728 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %729 = "llvm.getelementptr"(%727, %728) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%729) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb181(%730 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %731 : !llvm.ptr):
      %732 = "mid.invariant"(%731) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %733 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb182] : () -> ()
    ^bb183:
      %734 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%734, %733) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb184] : () -> ()
    ^bb182:
      %735 = "llvm.getelementptr"(%731) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %736 = "mid.checkflag"(%735) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %737 = "llvm.load"(%736) : (!hi.bool) -> i1
      "cf.cond_br"(%737) [^bb183, ^bb183] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb184:
      %738 = "llvm.extractvalue"(%730) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %739 = "llvm.load"(%733) : (!llvm.ptr) -> i32
      %740 = "llvm.getelementptr"(%738, %739) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %741 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %742 = "llvm.getelementptr"(%740, %741) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%742) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb185(%743 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %744 : !llvm.ptr):
      %745 = "mid.invariant"(%744) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %746 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb186] : () -> ()
    ^bb187:
      %747 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%747, %746) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb188] : () -> ()
    ^bb189:
      %748 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%748, %746) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb188] : () -> ()
    ^bb186:
      %749 = "llvm.getelementptr"(%744) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %750 = "mid.checkflag"(%749) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %751 = "llvm.load"(%750) : (!hi.bool) -> i1
      "cf.cond_br"(%751) [^bb187, ^bb190] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb190:
      %752 = "llvm.getelementptr"(%744) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %753 = "mid.checkflag"(%752) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %754 = "llvm.load"(%753) : (!hi.bool) -> i1
      "cf.cond_br"(%754) [^bb191, ^bb189] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb191:
      %755 = "llvm.getelementptr"(%744) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %756 = "mid.checkflag"(%755) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %757 = "llvm.load"(%756) : (!hi.bool) -> i1
      "cf.cond_br"(%757) [^bb189, ^bb189] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb188:
      %758 = "llvm.extractvalue"(%743) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %759 = "llvm.load"(%746) : (!llvm.ptr) -> i32
      %760 = "llvm.getelementptr"(%758, %759) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %761 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %762 = "llvm.getelementptr"(%760, %761) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%762) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb192(%763 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %764 : !llvm.ptr):
      %765 = "mid.invariant"(%764) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %766 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb193] : () -> ()
    ^bb194:
      %767 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%767, %766) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb195] : () -> ()
    ^bb196:
      %768 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%768, %766) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb195] : () -> ()
    ^bb193:
      %769 = "llvm.getelementptr"(%764) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %770 = "mid.checkflag"(%769) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %771 = "llvm.load"(%770) : (!hi.bool) -> i1
      "cf.cond_br"(%771) [^bb194, ^bb197] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb197:
      %772 = "llvm.getelementptr"(%764) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %773 = "mid.checkflag"(%772) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %774 = "llvm.load"(%773) : (!hi.bool) -> i1
      "cf.cond_br"(%774) [^bb198, ^bb196] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb198:
      %775 = "llvm.getelementptr"(%764) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %776 = "mid.checkflag"(%775) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %777 = "llvm.load"(%776) : (!hi.bool) -> i1
      "cf.cond_br"(%777) [^bb196, ^bb196] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb195:
      %778 = "llvm.extractvalue"(%763) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %779 = "llvm.load"(%766) : (!llvm.ptr) -> i32
      %780 = "llvm.getelementptr"(%778, %779) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %781 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %782 = "llvm.getelementptr"(%780, %781) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%782) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb199(%783 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %784 : !llvm.ptr):
      %785 = "mid.invariant"(%784) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %786 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb200] : () -> ()
    ^bb201:
      %787 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%787, %786) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb202] : () -> ()
    ^bb203:
      %788 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%788, %786) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb202] : () -> ()
    ^bb200:
      %789 = "llvm.getelementptr"(%784) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %790 = "mid.checkflag"(%789) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %791 = "llvm.load"(%790) : (!hi.bool) -> i1
      "cf.cond_br"(%791) [^bb204, ^bb205] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb204:
      %792 = "llvm.getelementptr"(%784) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %793 = "mid.checkflag"(%792) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %794 = "llvm.load"(%793) : (!hi.bool) -> i1
      "cf.cond_br"(%794) [^bb205, ^bb201] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb205:
      %795 = "llvm.getelementptr"(%784) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %796 = "mid.checkflag"(%795) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %797 = "llvm.load"(%796) : (!hi.bool) -> i1
      "cf.cond_br"(%797) [^bb203, ^bb203] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb202:
      %798 = "llvm.extractvalue"(%783) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %799 = "llvm.load"(%786) : (!llvm.ptr) -> i32
      %800 = "llvm.getelementptr"(%798, %799) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %801 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %802 = "llvm.getelementptr"(%800, %801) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%802) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb206(%803 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %804 : !llvm.ptr):
      %805 = "mid.invariant"(%804) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %806 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb207] : () -> ()
    ^bb208:
      %807 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%807, %806) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb209] : () -> ()
    ^bb210:
      %808 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%808, %806) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb209] : () -> ()
    ^bb207:
      %809 = "llvm.getelementptr"(%804) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %810 = "mid.checkflag"(%809) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %811 = "llvm.load"(%810) : (!hi.bool) -> i1
      "cf.cond_br"(%811) [^bb211, ^bb212] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb211:
      %812 = "llvm.getelementptr"(%804) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %813 = "mid.checkflag"(%812) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %814 = "llvm.load"(%813) : (!hi.bool) -> i1
      "cf.cond_br"(%814) [^bb212, ^bb208] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb212:
      %815 = "llvm.getelementptr"(%804) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %816 = "mid.checkflag"(%815) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %817 = "llvm.load"(%816) : (!hi.bool) -> i1
      "cf.cond_br"(%817) [^bb210, ^bb210] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb209:
      %818 = "llvm.extractvalue"(%803) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %819 = "llvm.load"(%806) : (!llvm.ptr) -> i32
      %820 = "llvm.getelementptr"(%818, %819) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<119 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %821 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %822 = "llvm.getelementptr"(%820, %821) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%822) : (!llvm.ptr) -> ()
    }) {"func_name" = "MappedCollection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ChainedCollection", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainedCollection_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionChainedCollection.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainedCollection_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionChainedCollection.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainedCollection_field_first", "getter_name" = "ChainedCollection_getter_first", "setter_name" = "ChainedCollection_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ChainedCollection_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionChainedCollection.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ChainedCollection_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionChainedCollection.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ChainedCollection_field_second", "getter_name" = "ChainedCollection_getter_second", "setter_name" = "ChainedCollection_setter_second"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ChainedCollection_field_ChainedCollection_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ChainedCollection.T"]} : () -> ()
    "mid.func"() ({
    ^bb213(%823 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %824 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %825 : !llvm.ptr, %826 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %827 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %828 = "mid.wrap"(%823) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %829 = "hi.cast"(%828) {"from_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "ChainedCollection", "to_typ_name" = "ChainedCollection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %830 = "mid.wrap"(%826) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %831 = "hi.cast"(%830) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %832 = "hi.cast"(%831) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      "mid.set_field"(%829, %832) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> ()
      %833 = "mid.wrap"(%827) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %834 = "hi.cast"(%833) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %835 = "hi.cast"(%834) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      "mid.set_field"(%829, %835) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> ()
    }) {"func_name" = "ChainedCollection_init_firstCollectionT_secondCollectionT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb214(%836 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %837 : !llvm.ptr):
      %838 = "mid.invariant"(%837) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %839 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb215] : () -> ()
    ^bb216:
      %840 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%840, %839) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb217] : () -> ()
    ^bb218:
      %841 = "llvm.getelementptr"(%837) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %842 = "mid.checkflag"(%841) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %843 = "llvm.load"(%842) : (!hi.bool) -> i1
      "cf.cond_br"(%843) [^bb216, ^bb216] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb215:
      %844 = "llvm.getelementptr"(%837) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %845 = "mid.checkflag"(%844) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %846 = "llvm.load"(%845) : (!hi.bool) -> i1
      "cf.cond_br"(%846) [^bb218, ^bb218] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb217:
      %847 = "llvm.extractvalue"(%836) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %848 = "llvm.load"(%839) : (!llvm.ptr) -> i32
      %849 = "llvm.getelementptr"(%847, %848) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %850 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %851 = "llvm.getelementptr"(%849, %850) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%851) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_init_firstCollectionT_secondCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb219(%852 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %853 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %854 : !llvm.ptr):
      %855 = "mid.wrap"(%852) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %856 = "hi.cast"(%855) {"from_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "ChainedCollection", "to_typ_name" = "ChainedCollection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %857 = "mid.get_field"(%856) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %858 = "mid.unwrap"(%857) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %859 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %860 = "mid.method_call"(%859, %858) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %861 = "hi.cast"(%860) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %862 = "mid.get_field"(%856) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %863 = "mid.unwrap"(%862) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %864 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %865 = "mid.method_call"(%864, %863) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %866 = "hi.cast"(%865) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %867 = "mid.unwrap"(%861) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %868 = "mid.unwrap"(%866) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %869 = "mid.arithmetic"(%867, %868) {"op" = "ADD"} : (i32, i32) -> i32
      %870 = "mid.wrap"(%869) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %871 = "hi.cast"(%870) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%871) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "ChainedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb220(%872 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %873 : !llvm.ptr):
      %874 = "mid.invariant"(%873) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %875 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb221] : () -> ()
    ^bb221:
      %876 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%876, %875) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb222] : () -> ()
    ^bb222:
      %877 = "llvm.extractvalue"(%872) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %878 = "llvm.load"(%875) : (!llvm.ptr) -> i32
      %879 = "llvm.getelementptr"(%877, %878) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %880 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %881 = "llvm.getelementptr"(%879, %880) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%881) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb223(%882 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %883 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %884 : !llvm.ptr):
      %885 = "mid.wrap"(%882) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %886 = "hi.cast"(%885) {"from_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "ChainedCollection", "to_typ_name" = "ChainedCollection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %887 = "mid.get_field"(%886) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %888 = "mid.unwrap"(%887) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %889 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %890 = "mid.method_call"(%889, %888) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %891 = "hi.cast"(%890) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %892 = "mid.get_field"(%886) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %893 = "mid.unwrap"(%892) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %894 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %895 = "mid.method_call"(%894, %893) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %896 = "hi.cast"(%895) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %897 = "mid.unwrap"(%891) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %898 = "mid.unwrap"(%896) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %899 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "ChainIterator", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %900 = "mid.get_field"(%886) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %901 = "mid.unwrap"(%900) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %902 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %903 = "mid.method_call"(%902, %901) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %904 = "hi.cast"(%903) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %905 = "mid.get_field"(%886) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ChainedCollection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %906 = "mid.unwrap"(%905) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %907 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %908 = "mid.method_call"(%907, %906) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %909 = "hi.cast"(%908) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      %910 = "hi.cast"(%904) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %911 = "mid.unwrap"(%910) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %912 = "hi.cast"(%909) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>
      %913 = "mid.unwrap"(%912) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %914 = "mid.unwrap"(%899) : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %915 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorChainedCollection.T", ["ChainedCollection.T"]]} : () -> !llvm.ptr
      %916 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorChainedCollection.T", ["ChainedCollection.T"]]} : () -> !llvm.ptr
      %917 = "mid.parameterizations_array"(%915, %916) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%917, %914, %911, %913) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %918 = "hi.cast"(%899) {"from_typ" = !hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>, "from_typ_name" = "ChainIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ChainIterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>
      "mid.return"(%918) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ChainedCollection">]>) -> ()
    }) {"func_name" = "ChainedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb224(%919 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %920 : !llvm.ptr):
      %921 = "mid.invariant"(%920) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %922 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb225] : () -> ()
    ^bb225:
      %923 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%923, %922) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb226] : () -> ()
    ^bb226:
      %924 = "llvm.extractvalue"(%919) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %925 = "llvm.load"(%922) : (!llvm.ptr) -> i32
      %926 = "llvm.getelementptr"(%924, %925) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %927 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %928 = "llvm.getelementptr"(%926, %927) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%928) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb227(%929 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %930 : !llvm.ptr):
      %931 = "mid.invariant"(%930) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %932 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb228] : () -> ()
    ^bb229:
      %933 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%933, %932) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb230] : () -> ()
    ^bb228:
      %934 = "llvm.getelementptr"(%930) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %935 = "mid.checkflag"(%934) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %936 = "llvm.load"(%935) : (!hi.bool) -> i1
      "cf.cond_br"(%936) [^bb229, ^bb229] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb230:
      %937 = "llvm.extractvalue"(%929) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %938 = "llvm.load"(%932) : (!llvm.ptr) -> i32
      %939 = "llvm.getelementptr"(%937, %938) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %940 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %941 = "llvm.getelementptr"(%939, %940) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%941) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb231(%942 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %943 : !llvm.ptr):
      %944 = "mid.invariant"(%943) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %945 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb232] : () -> ()
    ^bb233:
      %946 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%946, %945) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb234] : () -> ()
    ^bb235:
      %947 = "llvm.getelementptr"(%943) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %948 = "mid.checkflag"(%947) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %949 = "llvm.load"(%948) : (!hi.bool) -> i1
      "cf.cond_br"(%949) [^bb233, ^bb233] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb232:
      %950 = "llvm.getelementptr"(%943) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %951 = "mid.checkflag"(%950) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %952 = "llvm.load"(%951) : (!hi.bool) -> i1
      "cf.cond_br"(%952) [^bb235, ^bb235] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb234:
      %953 = "llvm.extractvalue"(%942) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %954 = "llvm.load"(%945) : (!llvm.ptr) -> i32
      %955 = "llvm.getelementptr"(%953, %954) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %956 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %957 = "llvm.getelementptr"(%955, %956) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%957) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb236(%958 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %959 : !llvm.ptr):
      %960 = "mid.invariant"(%959) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %961 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb237] : () -> ()
    ^bb238:
      %962 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%962, %961) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb239] : () -> ()
    ^bb237:
      %963 = "llvm.getelementptr"(%959) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %964 = "mid.checkflag"(%963) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %965 = "llvm.load"(%964) : (!hi.bool) -> i1
      "cf.cond_br"(%965) [^bb238, ^bb238] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb239:
      %966 = "llvm.extractvalue"(%958) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %967 = "llvm.load"(%961) : (!llvm.ptr) -> i32
      %968 = "llvm.getelementptr"(%966, %967) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %969 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %970 = "llvm.getelementptr"(%968, %969) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%970) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb240(%971 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %972 : !llvm.ptr):
      %973 = "mid.invariant"(%972) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %974 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb241] : () -> ()
    ^bb242:
      %975 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%975, %974) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb243] : () -> ()
    ^bb241:
      %976 = "llvm.getelementptr"(%972) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %977 = "mid.checkflag"(%976) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %978 = "llvm.load"(%977) : (!hi.bool) -> i1
      "cf.cond_br"(%978) [^bb242, ^bb242] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb243:
      %979 = "llvm.extractvalue"(%971) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %980 = "llvm.load"(%974) : (!llvm.ptr) -> i32
      %981 = "llvm.getelementptr"(%979, %980) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %982 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %983 = "llvm.getelementptr"(%981, %982) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%983) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb244(%984 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %985 : !llvm.ptr):
      %986 = "mid.invariant"(%985) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %987 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb245] : () -> ()
    ^bb245:
      %988 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%988, %987) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb246] : () -> ()
    ^bb246:
      %989 = "llvm.extractvalue"(%984) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %990 = "llvm.load"(%987) : (!llvm.ptr) -> i32
      %991 = "llvm.getelementptr"(%989, %990) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %992 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %993 = "llvm.getelementptr"(%991, %992) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%993) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb247(%994 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %995 : !llvm.ptr):
      %996 = "mid.invariant"(%995) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %997 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb248] : () -> ()
    ^bb249:
      %998 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%998, %997) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb250] : () -> ()
    ^bb251:
      %999 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%999, %997) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb250] : () -> ()
    ^bb248:
      %1000 = "llvm.getelementptr"(%995) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1001 = "mid.checkflag"(%1000) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1002 = "llvm.load"(%1001) : (!hi.bool) -> i1
      "cf.cond_br"(%1002) [^bb249, ^bb252] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb252:
      %1003 = "llvm.getelementptr"(%995) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1004 = "mid.checkflag"(%1003) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1005 = "llvm.load"(%1004) : (!hi.bool) -> i1
      "cf.cond_br"(%1005) [^bb251, ^bb251] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb250:
      %1006 = "llvm.extractvalue"(%994) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1007 = "llvm.load"(%997) : (!llvm.ptr) -> i32
      %1008 = "llvm.getelementptr"(%1006, %1007) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1009 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1010 = "llvm.getelementptr"(%1008, %1009) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1010) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb253(%1011 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1012 : !llvm.ptr):
      %1013 = "mid.invariant"(%1012) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1014 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb254] : () -> ()
    ^bb255:
      %1015 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1015, %1014) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb256] : () -> ()
    ^bb254:
      %1016 = "llvm.getelementptr"(%1012) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1017 = "mid.checkflag"(%1016) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1018 = "llvm.load"(%1017) : (!hi.bool) -> i1
      "cf.cond_br"(%1018) [^bb255, ^bb255] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb256:
      %1019 = "llvm.extractvalue"(%1011) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1020 = "llvm.load"(%1014) : (!llvm.ptr) -> i32
      %1021 = "llvm.getelementptr"(%1019, %1020) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1022 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1023 = "llvm.getelementptr"(%1021, %1022) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1023) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb257(%1024 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1025 : !llvm.ptr):
      %1026 = "mid.invariant"(%1025) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1027 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb258] : () -> ()
    ^bb259:
      %1028 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1028, %1027) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb260] : () -> ()
    ^bb261:
      %1029 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1029, %1027) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb260] : () -> ()
    ^bb258:
      %1030 = "llvm.getelementptr"(%1025) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1031 = "mid.checkflag"(%1030) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1032 = "llvm.load"(%1031) : (!hi.bool) -> i1
      "cf.cond_br"(%1032) [^bb262, ^bb263] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb262:
      %1033 = "llvm.getelementptr"(%1025) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1034 = "mid.checkflag"(%1033) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1035 = "llvm.load"(%1034) : (!hi.bool) -> i1
      "cf.cond_br"(%1035) [^bb263, ^bb259] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb263:
      %1036 = "llvm.getelementptr"(%1025) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1037 = "mid.checkflag"(%1036) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1038 = "llvm.load"(%1037) : (!hi.bool) -> i1
      "cf.cond_br"(%1038) [^bb261, ^bb261] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb260:
      %1039 = "llvm.extractvalue"(%1024) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1040 = "llvm.load"(%1027) : (!llvm.ptr) -> i32
      %1041 = "llvm.getelementptr"(%1039, %1040) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1042 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1043 = "llvm.getelementptr"(%1041, %1042) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1043) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb264(%1044 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1045 : !llvm.ptr):
      %1046 = "mid.invariant"(%1045) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1047 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb265] : () -> ()
    ^bb266:
      %1048 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%1048, %1047) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb267] : () -> ()
    ^bb268:
      %1049 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%1049, %1047) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb267] : () -> ()
    ^bb265:
      %1050 = "llvm.getelementptr"(%1045) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1051 = "mid.checkflag"(%1050) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1052 = "llvm.load"(%1051) : (!hi.bool) -> i1
      "cf.cond_br"(%1052) [^bb266, ^bb269] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb269:
      %1053 = "llvm.getelementptr"(%1045) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1054 = "mid.checkflag"(%1053) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1055 = "llvm.load"(%1054) : (!hi.bool) -> i1
      "cf.cond_br"(%1055) [^bb270, ^bb268] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb270:
      %1056 = "llvm.getelementptr"(%1045) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1057 = "mid.checkflag"(%1056) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1058 = "llvm.load"(%1057) : (!hi.bool) -> i1
      "cf.cond_br"(%1058) [^bb268, ^bb268] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb267:
      %1059 = "llvm.extractvalue"(%1044) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1060 = "llvm.load"(%1047) : (!llvm.ptr) -> i32
      %1061 = "llvm.getelementptr"(%1059, %1060) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1062 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1063 = "llvm.getelementptr"(%1061, %1062) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1063) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb271(%1064 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1065 : !llvm.ptr):
      %1066 = "mid.invariant"(%1065) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1067 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb272] : () -> ()
    ^bb273:
      %1068 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%1068, %1067) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb274] : () -> ()
    ^bb275:
      %1069 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%1069, %1067) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb274] : () -> ()
    ^bb272:
      %1070 = "llvm.getelementptr"(%1065) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1071 = "mid.checkflag"(%1070) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1072 = "llvm.load"(%1071) : (!hi.bool) -> i1
      "cf.cond_br"(%1072) [^bb273, ^bb276] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb276:
      %1073 = "llvm.getelementptr"(%1065) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1074 = "mid.checkflag"(%1073) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1075 = "llvm.load"(%1074) : (!hi.bool) -> i1
      "cf.cond_br"(%1075) [^bb277, ^bb275] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb277:
      %1076 = "llvm.getelementptr"(%1065) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1077 = "mid.checkflag"(%1076) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1078 = "llvm.load"(%1077) : (!hi.bool) -> i1
      "cf.cond_br"(%1078) [^bb275, ^bb275] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb274:
      %1079 = "llvm.extractvalue"(%1064) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1080 = "llvm.load"(%1067) : (!llvm.ptr) -> i32
      %1081 = "llvm.getelementptr"(%1079, %1080) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1082 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1083 = "llvm.getelementptr"(%1081, %1082) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1083) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb278(%1084 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1085 : !llvm.ptr):
      %1086 = "mid.invariant"(%1085) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1087 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb279] : () -> ()
    ^bb280:
      %1088 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%1088, %1087) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb281] : () -> ()
    ^bb282:
      %1089 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%1089, %1087) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb281] : () -> ()
    ^bb279:
      %1090 = "llvm.getelementptr"(%1085) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1091 = "mid.checkflag"(%1090) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1092 = "llvm.load"(%1091) : (!hi.bool) -> i1
      "cf.cond_br"(%1092) [^bb283, ^bb284] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb283:
      %1093 = "llvm.getelementptr"(%1085) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1094 = "mid.checkflag"(%1093) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1095 = "llvm.load"(%1094) : (!hi.bool) -> i1
      "cf.cond_br"(%1095) [^bb284, ^bb280] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb284:
      %1096 = "llvm.getelementptr"(%1085) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1097 = "mid.checkflag"(%1096) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1098 = "llvm.load"(%1097) : (!hi.bool) -> i1
      "cf.cond_br"(%1098) [^bb282, ^bb282] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb281:
      %1099 = "llvm.extractvalue"(%1084) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1100 = "llvm.load"(%1087) : (!llvm.ptr) -> i32
      %1101 = "llvm.getelementptr"(%1099, %1100) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1102 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1103 = "llvm.getelementptr"(%1101, %1102) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1103) : (!llvm.ptr) -> ()
    }) {"func_name" = "ChainedCollection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_InterleavedCollection", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleavedCollection_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionInterleavedCollection.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleavedCollection_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionInterleavedCollection.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleavedCollection_field_first", "getter_name" = "InterleavedCollection_getter_first", "setter_name" = "InterleavedCollection_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "InterleavedCollection_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionInterleavedCollection.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "InterleavedCollection_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionInterleavedCollection.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "InterleavedCollection_field_second", "getter_name" = "InterleavedCollection_getter_second", "setter_name" = "InterleavedCollection_setter_second"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "InterleavedCollection_field_InterleavedCollection_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["InterleavedCollection.T"]} : () -> ()
    "mid.func"() ({
    ^bb285(%1104 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1105 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1106 : !llvm.ptr, %1107 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1108 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1109 = "mid.wrap"(%1104) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1110 = "hi.cast"(%1109) {"from_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "InterleavedCollection", "to_typ_name" = "InterleavedCollection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1111 = "mid.wrap"(%1107) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1112 = "hi.cast"(%1111) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1113 = "hi.cast"(%1112) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      "mid.set_field"(%1110, %1113) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> ()
      %1114 = "mid.wrap"(%1108) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1115 = "hi.cast"(%1114) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1116 = "hi.cast"(%1115) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      "mid.set_field"(%1110, %1116) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> ()
    }) {"func_name" = "InterleavedCollection_init_firstCollectionT_secondCollectionT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb286(%1117 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1118 : !llvm.ptr):
      %1119 = "mid.invariant"(%1118) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1120 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb287] : () -> ()
    ^bb288:
      %1121 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%1121, %1120) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb289] : () -> ()
    ^bb290:
      %1122 = "llvm.getelementptr"(%1118) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1123 = "mid.checkflag"(%1122) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1124 = "llvm.load"(%1123) : (!hi.bool) -> i1
      "cf.cond_br"(%1124) [^bb288, ^bb288] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb287:
      %1125 = "llvm.getelementptr"(%1118) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1126 = "mid.checkflag"(%1125) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1127 = "llvm.load"(%1126) : (!hi.bool) -> i1
      "cf.cond_br"(%1127) [^bb290, ^bb290] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb289:
      %1128 = "llvm.extractvalue"(%1117) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1129 = "llvm.load"(%1120) : (!llvm.ptr) -> i32
      %1130 = "llvm.getelementptr"(%1128, %1129) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1131 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1132 = "llvm.getelementptr"(%1130, %1131) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1132) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_init_firstCollectionT_secondCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb291(%1133 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1134 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1135 : !llvm.ptr):
      %1136 = "mid.wrap"(%1133) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1137 = "hi.cast"(%1136) {"from_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "InterleavedCollection", "to_typ_name" = "InterleavedCollection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1138 = "mid.get_field"(%1137) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1139 = "mid.unwrap"(%1138) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1140 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1141 = "mid.method_call"(%1140, %1139) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1142 = "hi.cast"(%1141) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1143 = "mid.get_field"(%1137) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1144 = "mid.unwrap"(%1143) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1145 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1146 = "mid.method_call"(%1145, %1144) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1147 = "hi.cast"(%1146) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1148 = "mid.unwrap"(%1142) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1149 = "mid.unwrap"(%1147) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1150 = "mid.arithmetic"(%1148, %1149) {"op" = "ADD"} : (i32, i32) -> i32
      %1151 = "mid.wrap"(%1150) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1152 = "hi.cast"(%1151) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%1152) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "InterleavedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb292(%1153 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1154 : !llvm.ptr):
      %1155 = "mid.invariant"(%1154) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1156 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb293] : () -> ()
    ^bb293:
      %1157 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1157, %1156) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb294] : () -> ()
    ^bb294:
      %1158 = "llvm.extractvalue"(%1153) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1159 = "llvm.load"(%1156) : (!llvm.ptr) -> i32
      %1160 = "llvm.getelementptr"(%1158, %1159) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1161 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1162 = "llvm.getelementptr"(%1160, %1161) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1162) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb295(%1163 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1164 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1165 : !llvm.ptr):
      %1166 = "mid.wrap"(%1163) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1167 = "hi.cast"(%1166) {"from_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "InterleavedCollection", "to_typ_name" = "InterleavedCollection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1168 = "mid.get_field"(%1167) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1169 = "mid.unwrap"(%1168) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1170 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1171 = "mid.method_call"(%1170, %1169) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1172 = "hi.cast"(%1171) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1173 = "mid.get_field"(%1167) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1174 = "mid.unwrap"(%1173) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1175 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1176 = "mid.method_call"(%1175, %1174) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1177 = "hi.cast"(%1176) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1178 = "mid.unwrap"(%1172) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1179 = "mid.unwrap"(%1177) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1180 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "InterleaveIterator", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1181 = "mid.get_field"(%1167) {"offset" = 0 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1182 = "mid.unwrap"(%1181) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1183 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1184 = "mid.method_call"(%1183, %1182) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1185 = "hi.cast"(%1184) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1186 = "mid.get_field"(%1167) {"offset" = 1 : i64, "vtable_bytes" = 944 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"InterleavedCollection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1187 = "mid.unwrap"(%1186) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1188 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1189 = "mid.method_call"(%1188, %1187) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1190 = "hi.cast"(%1189) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      %1191 = "hi.cast"(%1185) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1192 = "mid.unwrap"(%1191) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1193 = "hi.cast"(%1190) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>
      %1194 = "mid.unwrap"(%1193) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1195 = "mid.unwrap"(%1180) : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1196 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorInterleavedCollection.T", ["InterleavedCollection.T"]]} : () -> !llvm.ptr
      %1197 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorInterleavedCollection.T", ["InterleavedCollection.T"]]} : () -> !llvm.ptr
      %1198 = "mid.parameterizations_array"(%1196, %1197) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1198, %1195, %1192, %1194) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1199 = "hi.cast"(%1180) {"from_typ" = !hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"InterleaveIterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>
      "mid.return"(%1199) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "InterleavedCollection">]>) -> ()
    }) {"func_name" = "InterleavedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb296(%1200 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1201 : !llvm.ptr):
      %1202 = "mid.invariant"(%1201) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1203 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb297] : () -> ()
    ^bb297:
      %1204 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1204, %1203) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb298] : () -> ()
    ^bb298:
      %1205 = "llvm.extractvalue"(%1200) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1206 = "llvm.load"(%1203) : (!llvm.ptr) -> i32
      %1207 = "llvm.getelementptr"(%1205, %1206) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1208 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1209 = "llvm.getelementptr"(%1207, %1208) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1209) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb299(%1210 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1211 : !llvm.ptr):
      %1212 = "mid.invariant"(%1211) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1213 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb300] : () -> ()
    ^bb301:
      %1214 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1214, %1213) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb302] : () -> ()
    ^bb300:
      %1215 = "llvm.getelementptr"(%1211) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1216 = "mid.checkflag"(%1215) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1217 = "llvm.load"(%1216) : (!hi.bool) -> i1
      "cf.cond_br"(%1217) [^bb301, ^bb301] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb302:
      %1218 = "llvm.extractvalue"(%1210) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1219 = "llvm.load"(%1213) : (!llvm.ptr) -> i32
      %1220 = "llvm.getelementptr"(%1218, %1219) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1221 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1222 = "llvm.getelementptr"(%1220, %1221) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1222) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb303(%1223 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1224 : !llvm.ptr):
      %1225 = "mid.invariant"(%1224) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1226 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb304] : () -> ()
    ^bb305:
      %1227 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1227, %1226) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb306] : () -> ()
    ^bb307:
      %1228 = "llvm.getelementptr"(%1224) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1229 = "mid.checkflag"(%1228) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1230 = "llvm.load"(%1229) : (!hi.bool) -> i1
      "cf.cond_br"(%1230) [^bb305, ^bb305] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb304:
      %1231 = "llvm.getelementptr"(%1224) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1232 = "mid.checkflag"(%1231) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %1233 = "llvm.load"(%1232) : (!hi.bool) -> i1
      "cf.cond_br"(%1233) [^bb307, ^bb307] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb306:
      %1234 = "llvm.extractvalue"(%1223) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1235 = "llvm.load"(%1226) : (!llvm.ptr) -> i32
      %1236 = "llvm.getelementptr"(%1234, %1235) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1237 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1238 = "llvm.getelementptr"(%1236, %1237) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1238) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb308(%1239 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1240 : !llvm.ptr):
      %1241 = "mid.invariant"(%1240) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1242 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb309] : () -> ()
    ^bb310:
      %1243 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1243, %1242) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb311] : () -> ()
    ^bb309:
      %1244 = "llvm.getelementptr"(%1240) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1245 = "mid.checkflag"(%1244) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1246 = "llvm.load"(%1245) : (!hi.bool) -> i1
      "cf.cond_br"(%1246) [^bb310, ^bb310] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb311:
      %1247 = "llvm.extractvalue"(%1239) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1248 = "llvm.load"(%1242) : (!llvm.ptr) -> i32
      %1249 = "llvm.getelementptr"(%1247, %1248) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1250 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1251 = "llvm.getelementptr"(%1249, %1250) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1251) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb312(%1252 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1253 : !llvm.ptr):
      %1254 = "mid.invariant"(%1253) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1255 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb313] : () -> ()
    ^bb314:
      %1256 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1256, %1255) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb315] : () -> ()
    ^bb313:
      %1257 = "llvm.getelementptr"(%1253) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1258 = "mid.checkflag"(%1257) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1259 = "llvm.load"(%1258) : (!hi.bool) -> i1
      "cf.cond_br"(%1259) [^bb314, ^bb314] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb315:
      %1260 = "llvm.extractvalue"(%1252) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1261 = "llvm.load"(%1255) : (!llvm.ptr) -> i32
      %1262 = "llvm.getelementptr"(%1260, %1261) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1263 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1264 = "llvm.getelementptr"(%1262, %1263) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1264) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb316(%1265 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1266 : !llvm.ptr):
      %1267 = "mid.invariant"(%1266) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1268 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb317] : () -> ()
    ^bb317:
      %1269 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1269, %1268) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb318] : () -> ()
    ^bb318:
      %1270 = "llvm.extractvalue"(%1265) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1271 = "llvm.load"(%1268) : (!llvm.ptr) -> i32
      %1272 = "llvm.getelementptr"(%1270, %1271) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1273 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1274 = "llvm.getelementptr"(%1272, %1273) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1274) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb319(%1275 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1276 : !llvm.ptr):
      %1277 = "mid.invariant"(%1276) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1278 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb320] : () -> ()
    ^bb321:
      %1279 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1279, %1278) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb322] : () -> ()
    ^bb323:
      %1280 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1280, %1278) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb322] : () -> ()
    ^bb320:
      %1281 = "llvm.getelementptr"(%1276) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1282 = "mid.checkflag"(%1281) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1283 = "llvm.load"(%1282) : (!hi.bool) -> i1
      "cf.cond_br"(%1283) [^bb321, ^bb324] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb324:
      %1284 = "llvm.getelementptr"(%1276) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1285 = "mid.checkflag"(%1284) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1286 = "llvm.load"(%1285) : (!hi.bool) -> i1
      "cf.cond_br"(%1286) [^bb323, ^bb323] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb322:
      %1287 = "llvm.extractvalue"(%1275) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1288 = "llvm.load"(%1278) : (!llvm.ptr) -> i32
      %1289 = "llvm.getelementptr"(%1287, %1288) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1290 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1291 = "llvm.getelementptr"(%1289, %1290) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1291) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb325(%1292 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1293 : !llvm.ptr):
      %1294 = "mid.invariant"(%1293) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1295 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb326] : () -> ()
    ^bb327:
      %1296 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1296, %1295) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb328] : () -> ()
    ^bb326:
      %1297 = "llvm.getelementptr"(%1293) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1298 = "mid.checkflag"(%1297) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1299 = "llvm.load"(%1298) : (!hi.bool) -> i1
      "cf.cond_br"(%1299) [^bb327, ^bb327] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb328:
      %1300 = "llvm.extractvalue"(%1292) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1301 = "llvm.load"(%1295) : (!llvm.ptr) -> i32
      %1302 = "llvm.getelementptr"(%1300, %1301) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1303 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1304 = "llvm.getelementptr"(%1302, %1303) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1304) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb329(%1305 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1306 : !llvm.ptr):
      %1307 = "mid.invariant"(%1306) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1308 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb330] : () -> ()
    ^bb331:
      %1309 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1309, %1308) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb332] : () -> ()
    ^bb333:
      %1310 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1310, %1308) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb332] : () -> ()
    ^bb330:
      %1311 = "llvm.getelementptr"(%1306) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1312 = "mid.checkflag"(%1311) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1313 = "llvm.load"(%1312) : (!hi.bool) -> i1
      "cf.cond_br"(%1313) [^bb334, ^bb335] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb334:
      %1314 = "llvm.getelementptr"(%1306) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1315 = "mid.checkflag"(%1314) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1316 = "llvm.load"(%1315) : (!hi.bool) -> i1
      "cf.cond_br"(%1316) [^bb335, ^bb331] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb335:
      %1317 = "llvm.getelementptr"(%1306) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1318 = "mid.checkflag"(%1317) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1319 = "llvm.load"(%1318) : (!hi.bool) -> i1
      "cf.cond_br"(%1319) [^bb333, ^bb333] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb332:
      %1320 = "llvm.extractvalue"(%1305) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1321 = "llvm.load"(%1308) : (!llvm.ptr) -> i32
      %1322 = "llvm.getelementptr"(%1320, %1321) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1323 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1324 = "llvm.getelementptr"(%1322, %1323) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1324) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb336(%1325 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1326 : !llvm.ptr):
      %1327 = "mid.invariant"(%1326) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1328 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb337] : () -> ()
    ^bb338:
      %1329 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%1329, %1328) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb339] : () -> ()
    ^bb340:
      %1330 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%1330, %1328) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb339] : () -> ()
    ^bb337:
      %1331 = "llvm.getelementptr"(%1326) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1332 = "mid.checkflag"(%1331) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1333 = "llvm.load"(%1332) : (!hi.bool) -> i1
      "cf.cond_br"(%1333) [^bb338, ^bb341] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb341:
      %1334 = "llvm.getelementptr"(%1326) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1335 = "mid.checkflag"(%1334) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1336 = "llvm.load"(%1335) : (!hi.bool) -> i1
      "cf.cond_br"(%1336) [^bb342, ^bb340] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb342:
      %1337 = "llvm.getelementptr"(%1326) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1338 = "mid.checkflag"(%1337) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1339 = "llvm.load"(%1338) : (!hi.bool) -> i1
      "cf.cond_br"(%1339) [^bb340, ^bb340] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb339:
      %1340 = "llvm.extractvalue"(%1325) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1341 = "llvm.load"(%1328) : (!llvm.ptr) -> i32
      %1342 = "llvm.getelementptr"(%1340, %1341) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1343 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1344 = "llvm.getelementptr"(%1342, %1343) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1344) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb343(%1345 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1346 : !llvm.ptr):
      %1347 = "mid.invariant"(%1346) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1348 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb344] : () -> ()
    ^bb345:
      %1349 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%1349, %1348) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb346] : () -> ()
    ^bb347:
      %1350 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%1350, %1348) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb346] : () -> ()
    ^bb344:
      %1351 = "llvm.getelementptr"(%1346) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1352 = "mid.checkflag"(%1351) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1353 = "llvm.load"(%1352) : (!hi.bool) -> i1
      "cf.cond_br"(%1353) [^bb345, ^bb348] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb348:
      %1354 = "llvm.getelementptr"(%1346) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1355 = "mid.checkflag"(%1354) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1356 = "llvm.load"(%1355) : (!hi.bool) -> i1
      "cf.cond_br"(%1356) [^bb349, ^bb347] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb349:
      %1357 = "llvm.getelementptr"(%1346) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1358 = "mid.checkflag"(%1357) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1359 = "llvm.load"(%1358) : (!hi.bool) -> i1
      "cf.cond_br"(%1359) [^bb347, ^bb347] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb346:
      %1360 = "llvm.extractvalue"(%1345) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1361 = "llvm.load"(%1348) : (!llvm.ptr) -> i32
      %1362 = "llvm.getelementptr"(%1360, %1361) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1363 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1364 = "llvm.getelementptr"(%1362, %1363) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1364) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb350(%1365 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1366 : !llvm.ptr):
      %1367 = "mid.invariant"(%1366) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1368 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb351] : () -> ()
    ^bb352:
      %1369 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%1369, %1368) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb353] : () -> ()
    ^bb354:
      %1370 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%1370, %1368) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb353] : () -> ()
    ^bb351:
      %1371 = "llvm.getelementptr"(%1366) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1372 = "mid.checkflag"(%1371) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1373 = "llvm.load"(%1372) : (!hi.bool) -> i1
      "cf.cond_br"(%1373) [^bb355, ^bb356] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb355:
      %1374 = "llvm.getelementptr"(%1366) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1375 = "mid.checkflag"(%1374) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1376 = "llvm.load"(%1375) : (!hi.bool) -> i1
      "cf.cond_br"(%1376) [^bb356, ^bb352] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb356:
      %1377 = "llvm.getelementptr"(%1366) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1378 = "mid.checkflag"(%1377) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1379 = "llvm.load"(%1378) : (!hi.bool) -> i1
      "cf.cond_br"(%1379) [^bb354, ^bb354] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb353:
      %1380 = "llvm.extractvalue"(%1365) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1381 = "llvm.load"(%1368) : (!llvm.ptr) -> i32
      %1382 = "llvm.getelementptr"(%1380, %1381) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<118 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1383 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1384 = "llvm.getelementptr"(%1382, %1383) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1384) : (!llvm.ptr) -> ()
    }) {"func_name" = "InterleavedCollection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ZippedCollection", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "ZippedCollection_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionZippedCollection.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ZippedCollection_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionZippedCollection.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ZippedCollection_field_first", "getter_name" = "ZippedCollection_getter_first", "setter_name" = "ZippedCollection_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ZippedCollection_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionZippedCollection.U"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ZippedCollection_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionZippedCollection.U"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ZippedCollection_field_second", "getter_name" = "ZippedCollection_getter_second", "setter_name" = "ZippedCollection_setter_second"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ZippedCollection_field_ZippedCollection_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ZippedCollection.T"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "ZippedCollection_field_ZippedCollection_1", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ZippedCollection.U"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 4 : i32, "meth_name" = "ZippedCollection_field_ZippedCollection_2", "id_hierarchy" = ["Pair", ["any_typ"], ["any_typ"]], "name_hierarchy" = ["PairZippedCollection.T._ZippedCollection.U", ["ZippedCollection.T"], ["ZippedCollection.U"]]} : () -> ()
    "mid.func"() ({
    ^bb357(%1385 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1386 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1387 : !llvm.ptr, %1388 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1389 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1390 = "mid.wrap"(%1385) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1391 = "hi.cast"(%1390) {"from_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "ZippedCollection", "to_typ_name" = "ZippedCollection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1392 = "mid.wrap"(%1388) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1393 = "hi.cast"(%1392) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1394 = "hi.cast"(%1393) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      "mid.set_field"(%1391, %1394) {"offset" = 0 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> ()
      %1395 = "mid.wrap"(%1389) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1396 = "hi.cast"(%1395) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1397 = "hi.cast"(%1396) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      "mid.set_field"(%1391, %1397) {"offset" = 1 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> ()
    }) {"func_name" = "ZippedCollection_init_firstCollectionT_secondCollectionU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb358(%1398 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1399 : !llvm.ptr):
      %1400 = "mid.invariant"(%1399) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1401 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb359] : () -> ()
    ^bb360:
      %1402 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1402, %1401) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb361] : () -> ()
    ^bb362:
      %1403 = "llvm.getelementptr"(%1399) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1404 = "mid.checkflag"(%1403) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1405 = "llvm.load"(%1404) : (!hi.bool) -> i1
      "cf.cond_br"(%1405) [^bb360, ^bb360] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb359:
      %1406 = "llvm.getelementptr"(%1399) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1407 = "mid.checkflag"(%1406) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1408 = "llvm.load"(%1407) : (!hi.bool) -> i1
      "cf.cond_br"(%1408) [^bb362, ^bb362] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb361:
      %1409 = "llvm.extractvalue"(%1398) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1410 = "llvm.load"(%1401) : (!llvm.ptr) -> i32
      %1411 = "llvm.getelementptr"(%1409, %1410) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1412 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1413 = "llvm.getelementptr"(%1411, %1412) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1413) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_init_firstCollectionT_secondCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb363(%1414 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1415 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1416 : !llvm.ptr):
      %1417 = "mid.wrap"(%1414) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1418 = "hi.cast"(%1417) {"from_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "ZippedCollection", "to_typ_name" = "ZippedCollection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1419 = "mid.get_field"(%1418) {"offset" = 0 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1420 = "mid.unwrap"(%1419) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1421 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1422 = "mid.method_call"(%1421, %1420) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1423 = "hi.cast"(%1422) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1424 = "mid.get_field"(%1418) {"offset" = 1 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1425 = "mid.unwrap"(%1424) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1426 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1427 = "mid.method_call"(%1426, %1425) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1428 = "hi.cast"(%1427) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1429 = "mid.unwrap"(%1423) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1430 = "mid.unwrap"(%1428) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1431 = "mid.comparison"(%1429, %1430) {"op" = "LT"} : (i32, i32) -> i1
      %1432 = "mid.wrap"(%1431) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1433 = "mid.unwrap"(%1432) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%1433) ({
        %1434 = "hi.cast"(%1423) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.return"(%1434) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : (i1) -> ()
      %1435 = "hi.cast"(%1428) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%1435) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "ZippedCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb364(%1436 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1437 : !llvm.ptr):
      %1438 = "mid.invariant"(%1437) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1439 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb365] : () -> ()
    ^bb365:
      %1440 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1440, %1439) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb366] : () -> ()
    ^bb366:
      %1441 = "llvm.extractvalue"(%1436) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1442 = "llvm.load"(%1439) : (!llvm.ptr) -> i32
      %1443 = "llvm.getelementptr"(%1441, %1442) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1444 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1445 = "llvm.getelementptr"(%1443, %1444) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1445) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb367(%1446 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1447 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1448 : !llvm.ptr):
      %1449 = "mid.wrap"(%1446) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1450 = "hi.cast"(%1449) {"from_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "ZippedCollection", "to_typ_name" = "ZippedCollection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1451 = "mid.get_field"(%1450) {"offset" = 0 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1452 = "mid.unwrap"(%1451) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1453 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1454 = "mid.method_call"(%1453, %1452) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1455 = "hi.cast"(%1454) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1456 = "mid.get_field"(%1450) {"offset" = 1 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1457 = "mid.unwrap"(%1456) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1458 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1459 = "mid.method_call"(%1458, %1457) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1460 = "hi.cast"(%1459) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1461 = "mid.unwrap"(%1455) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1462 = "mid.unwrap"(%1460) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1463 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1464 = "mid.get_field"(%1450) {"offset" = 0 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1465 = "mid.unwrap"(%1464) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1466 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1467 = "mid.method_call"(%1466, %1465) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1468 = "hi.cast"(%1467) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>
      %1469 = "mid.get_field"(%1450) {"offset" = 1 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ZippedCollection", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1470 = "mid.unwrap"(%1469) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1471 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1472 = "mid.method_call"(%1471, %1470) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1473 = "hi.cast"(%1472) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>
      %1474 = "hi.cast"(%1468) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>
      %1475 = "mid.unwrap"(%1474) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1476 = "hi.cast"(%1473) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>
      %1477 = "mid.unwrap"(%1476) : (!hi.fatptr<"Iterator", [!hi.type_param<"U", !hi.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1478 = "mid.unwrap"(%1463) : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1479 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorZippedCollection.T", ["ZippedCollection.T"]]} : () -> !llvm.ptr
      %1480 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorZippedCollection.U", ["ZippedCollection.U"]]} : () -> !llvm.ptr
      %1481 = "mid.parameterizations_array"(%1479, %1480) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1481, %1478, %1475, %1477) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1482 = "hi.cast"(%1463) {"from_typ" = !hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>]>, "from_typ_name" = "ZipIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ZipIterator", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>]>
      "mid.return"(%1482) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ZippedCollection">, !hi.type_param<"U", !hi.any, "ZippedCollection">]>]>) -> ()
    }) {"func_name" = "ZippedCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb368(%1483 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1484 : !llvm.ptr):
      %1485 = "mid.invariant"(%1484) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1486 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb369] : () -> ()
    ^bb369:
      %1487 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1487, %1486) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb370] : () -> ()
    ^bb370:
      %1488 = "llvm.extractvalue"(%1483) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1489 = "llvm.load"(%1486) : (!llvm.ptr) -> i32
      %1490 = "llvm.getelementptr"(%1488, %1489) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1491 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1492 = "llvm.getelementptr"(%1490, %1491) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1492) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb371(%1493 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1494 : !llvm.ptr):
      %1495 = "mid.invariant"(%1494) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1496 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb372] : () -> ()
    ^bb373:
      %1497 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1497, %1496) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb374] : () -> ()
    ^bb372:
      %1498 = "llvm.getelementptr"(%1494) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1499 = "mid.checkflag"(%1498) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1500 = "llvm.load"(%1499) : (!hi.bool) -> i1
      "cf.cond_br"(%1500) [^bb373, ^bb373] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb374:
      %1501 = "llvm.extractvalue"(%1493) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1502 = "llvm.load"(%1496) : (!llvm.ptr) -> i32
      %1503 = "llvm.getelementptr"(%1501, %1502) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1504 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1505 = "llvm.getelementptr"(%1503, %1504) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1505) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb375(%1506 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1507 : !llvm.ptr):
      %1508 = "mid.invariant"(%1507) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1509 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb376] : () -> ()
    ^bb377:
      %1510 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1510, %1509) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb378] : () -> ()
    ^bb379:
      %1511 = "llvm.getelementptr"(%1507) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1512 = "mid.checkflag"(%1511) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1513 = "llvm.load"(%1512) : (!hi.bool) -> i1
      "cf.cond_br"(%1513) [^bb377, ^bb377] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb376:
      %1514 = "llvm.getelementptr"(%1507) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1515 = "mid.checkflag"(%1514) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %1516 = "llvm.load"(%1515) : (!hi.bool) -> i1
      "cf.cond_br"(%1516) [^bb379, ^bb379] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb378:
      %1517 = "llvm.extractvalue"(%1506) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1518 = "llvm.load"(%1509) : (!llvm.ptr) -> i32
      %1519 = "llvm.getelementptr"(%1517, %1518) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1520 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1521 = "llvm.getelementptr"(%1519, %1520) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1521) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb380(%1522 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1523 : !llvm.ptr):
      %1524 = "mid.invariant"(%1523) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1525 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb381] : () -> ()
    ^bb382:
      %1526 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1526, %1525) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb383] : () -> ()
    ^bb381:
      %1527 = "llvm.getelementptr"(%1523) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1528 = "mid.checkflag"(%1527) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1529 = "llvm.load"(%1528) : (!hi.bool) -> i1
      "cf.cond_br"(%1529) [^bb382, ^bb382] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb383:
      %1530 = "llvm.extractvalue"(%1522) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1531 = "llvm.load"(%1525) : (!llvm.ptr) -> i32
      %1532 = "llvm.getelementptr"(%1530, %1531) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1533 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1534 = "llvm.getelementptr"(%1532, %1533) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1534) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb384(%1535 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1536 : !llvm.ptr):
      %1537 = "mid.invariant"(%1536) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1538 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb385] : () -> ()
    ^bb386:
      %1539 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1539, %1538) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb387] : () -> ()
    ^bb385:
      %1540 = "llvm.getelementptr"(%1536) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1541 = "mid.checkflag"(%1540) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1542 = "llvm.load"(%1541) : (!hi.bool) -> i1
      "cf.cond_br"(%1542) [^bb386, ^bb386] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb387:
      %1543 = "llvm.extractvalue"(%1535) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1544 = "llvm.load"(%1538) : (!llvm.ptr) -> i32
      %1545 = "llvm.getelementptr"(%1543, %1544) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1546 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1547 = "llvm.getelementptr"(%1545, %1546) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1547) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb388(%1548 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1549 : !llvm.ptr):
      %1550 = "mid.invariant"(%1549) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1551 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb389] : () -> ()
    ^bb389:
      %1552 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1552, %1551) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb390] : () -> ()
    ^bb390:
      %1553 = "llvm.extractvalue"(%1548) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1554 = "llvm.load"(%1551) : (!llvm.ptr) -> i32
      %1555 = "llvm.getelementptr"(%1553, %1554) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1556 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1557 = "llvm.getelementptr"(%1555, %1556) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1557) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb391(%1558 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1559 : !llvm.ptr):
      %1560 = "mid.invariant"(%1559) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1561 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb392] : () -> ()
    ^bb393:
      %1562 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1562, %1561) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb394] : () -> ()
    ^bb395:
      %1563 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1563, %1561) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb394] : () -> ()
    ^bb392:
      %1564 = "llvm.getelementptr"(%1559) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1565 = "mid.checkflag"(%1564) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1566 = "llvm.load"(%1565) : (!hi.bool) -> i1
      "cf.cond_br"(%1566) [^bb393, ^bb396] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb396:
      %1567 = "llvm.getelementptr"(%1559) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1568 = "mid.checkflag"(%1567) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1569 = "llvm.load"(%1568) : (!hi.bool) -> i1
      "cf.cond_br"(%1569) [^bb395, ^bb395] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb394:
      %1570 = "llvm.extractvalue"(%1558) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1571 = "llvm.load"(%1561) : (!llvm.ptr) -> i32
      %1572 = "llvm.getelementptr"(%1570, %1571) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1573 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1574 = "llvm.getelementptr"(%1572, %1573) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1574) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb397(%1575 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1576 : !llvm.ptr):
      %1577 = "mid.invariant"(%1576) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1578 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb398] : () -> ()
    ^bb399:
      %1579 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1579, %1578) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb400] : () -> ()
    ^bb398:
      %1580 = "llvm.getelementptr"(%1576) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1581 = "mid.checkflag"(%1580) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1582 = "llvm.load"(%1581) : (!hi.bool) -> i1
      "cf.cond_br"(%1582) [^bb399, ^bb399] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb400:
      %1583 = "llvm.extractvalue"(%1575) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1584 = "llvm.load"(%1578) : (!llvm.ptr) -> i32
      %1585 = "llvm.getelementptr"(%1583, %1584) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1586 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1587 = "llvm.getelementptr"(%1585, %1586) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1587) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb401(%1588 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1589 : !llvm.ptr):
      %1590 = "mid.invariant"(%1589) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1591 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb402] : () -> ()
    ^bb403:
      %1592 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%1592, %1591) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb404] : () -> ()
    ^bb405:
      %1593 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%1593, %1591) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb404] : () -> ()
    ^bb402:
      %1594 = "llvm.getelementptr"(%1589) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1595 = "mid.checkflag"(%1594) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1596 = "llvm.load"(%1595) : (!hi.bool) -> i1
      "cf.cond_br"(%1596) [^bb403, ^bb406] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb406:
      %1597 = "llvm.getelementptr"(%1589) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1598 = "mid.checkflag"(%1597) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1599 = "llvm.load"(%1598) : (!hi.bool) -> i1
      "cf.cond_br"(%1599) [^bb407, ^bb405] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb407:
      %1600 = "llvm.getelementptr"(%1589) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1601 = "mid.checkflag"(%1600) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1602 = "llvm.load"(%1601) : (!hi.bool) -> i1
      "cf.cond_br"(%1602) [^bb405, ^bb405] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb404:
      %1603 = "llvm.extractvalue"(%1588) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1604 = "llvm.load"(%1591) : (!llvm.ptr) -> i32
      %1605 = "llvm.getelementptr"(%1603, %1604) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1606 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1607 = "llvm.getelementptr"(%1605, %1606) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1607) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb408(%1608 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1609 : !llvm.ptr):
      %1610 = "mid.invariant"(%1609) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1611 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb409] : () -> ()
    ^bb410:
      %1612 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%1612, %1611) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb411] : () -> ()
    ^bb412:
      %1613 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%1613, %1611) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb411] : () -> ()
    ^bb409:
      %1614 = "llvm.getelementptr"(%1609) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1615 = "mid.checkflag"(%1614) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1616 = "llvm.load"(%1615) : (!hi.bool) -> i1
      "cf.cond_br"(%1616) [^bb410, ^bb413] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb413:
      %1617 = "llvm.getelementptr"(%1609) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1618 = "mid.checkflag"(%1617) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1619 = "llvm.load"(%1618) : (!hi.bool) -> i1
      "cf.cond_br"(%1619) [^bb414, ^bb412] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb414:
      %1620 = "llvm.getelementptr"(%1609) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1621 = "mid.checkflag"(%1620) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1622 = "llvm.load"(%1621) : (!hi.bool) -> i1
      "cf.cond_br"(%1622) [^bb412, ^bb412] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb411:
      %1623 = "llvm.extractvalue"(%1608) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1624 = "llvm.load"(%1611) : (!llvm.ptr) -> i32
      %1625 = "llvm.getelementptr"(%1623, %1624) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1626 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1627 = "llvm.getelementptr"(%1625, %1626) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1627) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb415(%1628 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1629 : !llvm.ptr):
      %1630 = "mid.invariant"(%1629) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1631 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb416] : () -> ()
    ^bb417:
      %1632 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%1632, %1631) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb418] : () -> ()
    ^bb419:
      %1633 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%1633, %1631) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb418] : () -> ()
    ^bb416:
      %1634 = "llvm.getelementptr"(%1629) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1635 = "mid.checkflag"(%1634) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1636 = "llvm.load"(%1635) : (!hi.bool) -> i1
      "cf.cond_br"(%1636) [^bb420, ^bb421] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb420:
      %1637 = "llvm.getelementptr"(%1629) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1638 = "mid.checkflag"(%1637) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1639 = "llvm.load"(%1638) : (!hi.bool) -> i1
      "cf.cond_br"(%1639) [^bb421, ^bb417] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb421:
      %1640 = "llvm.getelementptr"(%1629) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1641 = "mid.checkflag"(%1640) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1642 = "llvm.load"(%1641) : (!hi.bool) -> i1
      "cf.cond_br"(%1642) [^bb419, ^bb419] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb418:
      %1643 = "llvm.extractvalue"(%1628) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1644 = "llvm.load"(%1631) : (!llvm.ptr) -> i32
      %1645 = "llvm.getelementptr"(%1643, %1644) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1646 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1647 = "llvm.getelementptr"(%1645, %1646) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1647) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb422(%1648 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1649 : !llvm.ptr):
      %1650 = "mid.invariant"(%1649) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1651 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb423] : () -> ()
    ^bb424:
      %1652 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%1652, %1651) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb425] : () -> ()
    ^bb426:
      %1653 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%1653, %1651) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb425] : () -> ()
    ^bb423:
      %1654 = "llvm.getelementptr"(%1649) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1655 = "mid.checkflag"(%1654) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1656 = "llvm.load"(%1655) : (!hi.bool) -> i1
      "cf.cond_br"(%1656) [^bb427, ^bb428] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb427:
      %1657 = "llvm.getelementptr"(%1649) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1658 = "mid.checkflag"(%1657) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1659 = "llvm.load"(%1658) : (!hi.bool) -> i1
      "cf.cond_br"(%1659) [^bb428, ^bb424] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb428:
      %1660 = "llvm.getelementptr"(%1649) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1661 = "mid.checkflag"(%1660) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1662 = "llvm.load"(%1661) : (!hi.bool) -> i1
      "cf.cond_br"(%1662) [^bb426, ^bb426] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb425:
      %1663 = "llvm.extractvalue"(%1648) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1664 = "llvm.load"(%1651) : (!llvm.ptr) -> i32
      %1665 = "llvm.getelementptr"(%1663, %1664) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1666 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1667 = "llvm.getelementptr"(%1665, %1666) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1667) : (!llvm.ptr) -> ()
    }) {"func_name" = "ZippedCollection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ProductCollection", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductCollection_getter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionProductCollection.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductCollection_setter_first", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionProductCollection.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductCollection_field_first", "getter_name" = "ProductCollection_getter_first", "setter_name" = "ProductCollection_setter_first"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ProductCollection_getter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionProductCollection.U"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ProductCollection_setter_second", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Collection", "parameterization" = "_parameterization_CollectionProductCollection.U"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ProductCollection_field_second", "getter_name" = "ProductCollection_getter_second", "setter_name" = "ProductCollection_setter_second"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ProductCollection_field_ProductCollection_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ProductCollection.T"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "ProductCollection_field_ProductCollection_1", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ProductCollection.U"]} : () -> ()
    "mid.type_accessor_def"() {"offset" = 4 : i32, "meth_name" = "ProductCollection_field_ProductCollection_2", "id_hierarchy" = ["Pair", ["any_typ"], ["any_typ"]], "name_hierarchy" = ["PairProductCollection.T._ProductCollection.U", ["ProductCollection.T"], ["ProductCollection.U"]]} : () -> ()
    "mid.func"() ({
    ^bb429(%1668 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1669 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1670 : !llvm.ptr, %1671 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1672 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1673 = "mid.wrap"(%1668) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1674 = "hi.cast"(%1673) {"from_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "ProductCollection", "to_typ_name" = "ProductCollection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1675 = "mid.wrap"(%1671) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1676 = "hi.cast"(%1675) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1677 = "hi.cast"(%1676) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      "mid.set_field"(%1674, %1677) {"offset" = 0 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> ()
      %1678 = "mid.wrap"(%1672) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1679 = "hi.cast"(%1678) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1680 = "hi.cast"(%1679) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "Collection", "to_typ_name" = "Collection"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      "mid.set_field"(%1674, %1680) {"offset" = 1 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> ()
    }) {"func_name" = "ProductCollection_init_firstCollectionT_secondCollectionU", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb430(%1681 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1682 : !llvm.ptr):
      %1683 = "mid.invariant"(%1682) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1684 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb431] : () -> ()
    ^bb432:
      %1685 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1685, %1684) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb433] : () -> ()
    ^bb434:
      %1686 = "llvm.getelementptr"(%1682) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1687 = "mid.checkflag"(%1686) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1688 = "llvm.load"(%1687) : (!hi.bool) -> i1
      "cf.cond_br"(%1688) [^bb432, ^bb432] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb431:
      %1689 = "llvm.getelementptr"(%1682) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1690 = "mid.checkflag"(%1689) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1691 = "llvm.load"(%1690) : (!hi.bool) -> i1
      "cf.cond_br"(%1691) [^bb434, ^bb434] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb433:
      %1692 = "llvm.extractvalue"(%1681) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1693 = "llvm.load"(%1684) : (!llvm.ptr) -> i32
      %1694 = "llvm.getelementptr"(%1692, %1693) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1695 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1696 = "llvm.getelementptr"(%1694, %1695) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1696) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_init_firstCollectionT_secondCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb435(%1697 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1698 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1699 : !llvm.ptr):
      %1700 = "mid.wrap"(%1697) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1701 = "hi.cast"(%1700) {"from_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "ProductCollection", "to_typ_name" = "ProductCollection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1702 = "mid.get_field"(%1701) {"offset" = 0 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1703 = "mid.unwrap"(%1702) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1704 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1705 = "mid.method_call"(%1704, %1703) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1706 = "hi.cast"(%1705) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1707 = "mid.get_field"(%1701) {"offset" = 1 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1708 = "mid.unwrap"(%1707) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1709 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1710 = "mid.method_call"(%1709, %1708) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1711 = "hi.cast"(%1710) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1712 = "mid.unwrap"(%1706) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1713 = "mid.unwrap"(%1711) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1714 = "mid.arithmetic"(%1712, %1713) {"op" = "MUL"} : (i32, i32) -> i32
      %1715 = "mid.wrap"(%1714) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1716 = "hi.cast"(%1715) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%1716) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "ProductCollection_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb436(%1717 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1718 : !llvm.ptr):
      %1719 = "mid.invariant"(%1718) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1720 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb437] : () -> ()
    ^bb437:
      %1721 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%1721, %1720) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb438] : () -> ()
    ^bb438:
      %1722 = "llvm.extractvalue"(%1717) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1723 = "llvm.load"(%1720) : (!llvm.ptr) -> i32
      %1724 = "llvm.getelementptr"(%1722, %1723) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1725 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1726 = "llvm.getelementptr"(%1724, %1725) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1726) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb439(%1727 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1728 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1729 : !llvm.ptr):
      %1730 = "mid.wrap"(%1727) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1731 = "hi.cast"(%1730) {"from_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "from_typ_name" = "ProductCollection", "to_typ_name" = "ProductCollection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1732 = "mid.get_field"(%1731) {"offset" = 0 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1733 = "mid.unwrap"(%1732) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1734 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1735 = "mid.method_call"(%1734, %1733) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1736 = "hi.cast"(%1735) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1737 = "mid.get_field"(%1731) {"offset" = 1 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1738 = "mid.unwrap"(%1736) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1739 = "mid.unwrap"(%1737) : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1740 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ProductIterator", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1741 = "mid.get_field"(%1731) {"offset" = 0 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1742 = "mid.unwrap"(%1741) : (!hi.fatptr<"Collection", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1743 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1744 = "mid.method_call"(%1743, %1742) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 57 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>
      %1745 = "hi.cast"(%1744) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Collection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>
      %1746 = "mid.get_field"(%1731) {"offset" = 1 : i64, "vtable_bytes" = 960 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Collection"} : (!hi.fatptr<"ProductCollection", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>
      %1747 = "hi.cast"(%1745) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>
      %1748 = "mid.unwrap"(%1747) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1749 = "hi.cast"(%1746) {"from_typ" = !hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>, "from_typ_name" = "Collection", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Collection", [!hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>
      %1750 = "mid.unwrap"(%1749) : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1751 = "mid.unwrap"(%1740) : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1752 = "mid.parameterization"() {"id_hierarchy" = ["Iterator", ["any_typ"]], "name_hierarchy" = ["IteratorProductCollection.T", ["ProductCollection.T"]]} : () -> !llvm.ptr
      %1753 = "mid.parameterization"() {"id_hierarchy" = ["Collection", ["any_typ"]], "name_hierarchy" = ["CollectionProductCollection.U", ["ProductCollection.U"]]} : () -> !llvm.ptr
      %1754 = "mid.parameterizations_array"(%1752, %1753) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1754, %1751, %1748, %1750) {"offset" = 7 : i32, "vptrs" = [#none, #none], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1755 = "hi.cast"(%1740) {"from_typ" = !hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>]>, "from_typ_name" = "ProductIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ProductIterator", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>]>
      "mid.return"(%1755) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Pair", [!hi.type_param<"T", !hi.any, "ProductCollection">, !hi.type_param<"U", !hi.any, "ProductCollection">]>]>) -> ()
    }) {"func_name" = "ProductCollection_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb440(%1756 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1757 : !llvm.ptr):
      %1758 = "mid.invariant"(%1757) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1759 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb441] : () -> ()
    ^bb441:
      %1760 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%1760, %1759) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb442] : () -> ()
    ^bb442:
      %1761 = "llvm.extractvalue"(%1756) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1762 = "llvm.load"(%1759) : (!llvm.ptr) -> i32
      %1763 = "llvm.getelementptr"(%1761, %1762) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1764 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1765 = "llvm.getelementptr"(%1763, %1764) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1765) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb443(%1766 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1767 : !llvm.ptr):
      %1768 = "mid.invariant"(%1767) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1769 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb444] : () -> ()
    ^bb445:
      %1770 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%1770, %1769) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb446] : () -> ()
    ^bb444:
      %1771 = "llvm.getelementptr"(%1767) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1772 = "mid.checkflag"(%1771) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1773 = "llvm.load"(%1772) : (!hi.bool) -> i1
      "cf.cond_br"(%1773) [^bb445, ^bb445] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb446:
      %1774 = "llvm.extractvalue"(%1766) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1775 = "llvm.load"(%1769) : (!llvm.ptr) -> i32
      %1776 = "llvm.getelementptr"(%1774, %1775) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1777 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1778 = "llvm.getelementptr"(%1776, %1777) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1778) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb447(%1779 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1780 : !llvm.ptr):
      %1781 = "mid.invariant"(%1780) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1782 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb448] : () -> ()
    ^bb449:
      %1783 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%1783, %1782) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb450] : () -> ()
    ^bb451:
      %1784 = "llvm.getelementptr"(%1780) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1785 = "mid.checkflag"(%1784) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1786 = "llvm.load"(%1785) : (!hi.bool) -> i1
      "cf.cond_br"(%1786) [^bb449, ^bb449] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb448:
      %1787 = "llvm.getelementptr"(%1780) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1788 = "mid.checkflag"(%1787) {"typ_name" = "Pair"} : (!llvm.ptr) -> !hi.bool
      %1789 = "llvm.load"(%1788) : (!hi.bool) -> i1
      "cf.cond_br"(%1789) [^bb451, ^bb451] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb450:
      %1790 = "llvm.extractvalue"(%1779) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1791 = "llvm.load"(%1782) : (!llvm.ptr) -> i32
      %1792 = "llvm.getelementptr"(%1790, %1791) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1793 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1794 = "llvm.getelementptr"(%1792, %1793) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1794) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb452(%1795 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1796 : !llvm.ptr):
      %1797 = "mid.invariant"(%1796) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1798 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb453] : () -> ()
    ^bb454:
      %1799 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%1799, %1798) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb455] : () -> ()
    ^bb453:
      %1800 = "llvm.getelementptr"(%1796) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1801 = "mid.checkflag"(%1800) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1802 = "llvm.load"(%1801) : (!hi.bool) -> i1
      "cf.cond_br"(%1802) [^bb454, ^bb454] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb455:
      %1803 = "llvm.extractvalue"(%1795) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1804 = "llvm.load"(%1798) : (!llvm.ptr) -> i32
      %1805 = "llvm.getelementptr"(%1803, %1804) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1806 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1807 = "llvm.getelementptr"(%1805, %1806) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1807) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb456(%1808 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1809 : !llvm.ptr):
      %1810 = "mid.invariant"(%1809) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1811 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb457] : () -> ()
    ^bb458:
      %1812 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%1812, %1811) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb459] : () -> ()
    ^bb457:
      %1813 = "llvm.getelementptr"(%1809) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1814 = "mid.checkflag"(%1813) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1815 = "llvm.load"(%1814) : (!hi.bool) -> i1
      "cf.cond_br"(%1815) [^bb458, ^bb458] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb459:
      %1816 = "llvm.extractvalue"(%1808) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1817 = "llvm.load"(%1811) : (!llvm.ptr) -> i32
      %1818 = "llvm.getelementptr"(%1816, %1817) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1819 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1820 = "llvm.getelementptr"(%1818, %1819) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1820) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb460(%1821 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1822 : !llvm.ptr):
      %1823 = "mid.invariant"(%1822) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1824 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb461] : () -> ()
    ^bb461:
      %1825 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%1825, %1824) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb462] : () -> ()
    ^bb462:
      %1826 = "llvm.extractvalue"(%1821) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1827 = "llvm.load"(%1824) : (!llvm.ptr) -> i32
      %1828 = "llvm.getelementptr"(%1826, %1827) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1829 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1830 = "llvm.getelementptr"(%1828, %1829) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1830) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb463(%1831 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1832 : !llvm.ptr):
      %1833 = "mid.invariant"(%1832) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1834 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb464] : () -> ()
    ^bb465:
      %1835 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%1835, %1834) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb466] : () -> ()
    ^bb467:
      %1836 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%1836, %1834) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb466] : () -> ()
    ^bb464:
      %1837 = "llvm.getelementptr"(%1832) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1838 = "mid.checkflag"(%1837) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1839 = "llvm.load"(%1838) : (!hi.bool) -> i1
      "cf.cond_br"(%1839) [^bb465, ^bb468] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb468:
      %1840 = "llvm.getelementptr"(%1832) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1841 = "mid.checkflag"(%1840) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1842 = "llvm.load"(%1841) : (!hi.bool) -> i1
      "cf.cond_br"(%1842) [^bb467, ^bb467] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb466:
      %1843 = "llvm.extractvalue"(%1831) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1844 = "llvm.load"(%1834) : (!llvm.ptr) -> i32
      %1845 = "llvm.getelementptr"(%1843, %1844) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1846 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1847 = "llvm.getelementptr"(%1845, %1846) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1847) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_map_fFunctionT_to_U_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb469(%1848 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1849 : !llvm.ptr):
      %1850 = "mid.invariant"(%1849) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1851 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb470] : () -> ()
    ^bb471:
      %1852 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%1852, %1851) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb472] : () -> ()
    ^bb470:
      %1853 = "llvm.getelementptr"(%1849) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1854 = "mid.checkflag"(%1853) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1855 = "llvm.load"(%1854) : (!hi.bool) -> i1
      "cf.cond_br"(%1855) [^bb471, ^bb471] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb472:
      %1856 = "llvm.extractvalue"(%1848) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1857 = "llvm.load"(%1851) : (!llvm.ptr) -> i32
      %1858 = "llvm.getelementptr"(%1856, %1857) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1859 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1860 = "llvm.getelementptr"(%1858, %1859) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1860) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb473(%1861 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1862 : !llvm.ptr):
      %1863 = "mid.invariant"(%1862) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1864 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb474] : () -> ()
    ^bb475:
      %1865 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%1865, %1864) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb476] : () -> ()
    ^bb477:
      %1866 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%1866, %1864) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb476] : () -> ()
    ^bb474:
      %1867 = "llvm.getelementptr"(%1862) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1868 = "mid.checkflag"(%1867) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1869 = "llvm.load"(%1868) : (!hi.bool) -> i1
      "cf.cond_br"(%1869) [^bb475, ^bb478] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb478:
      %1870 = "llvm.getelementptr"(%1862) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1871 = "mid.checkflag"(%1870) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1872 = "llvm.load"(%1871) : (!hi.bool) -> i1
      "cf.cond_br"(%1872) [^bb479, ^bb477] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb479:
      %1873 = "llvm.getelementptr"(%1862) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1874 = "mid.checkflag"(%1873) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1875 = "llvm.load"(%1874) : (!hi.bool) -> i1
      "cf.cond_br"(%1875) [^bb477, ^bb477] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb476:
      %1876 = "llvm.extractvalue"(%1861) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1877 = "llvm.load"(%1864) : (!llvm.ptr) -> i32
      %1878 = "llvm.getelementptr"(%1876, %1877) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1879 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1880 = "llvm.getelementptr"(%1878, %1879) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1880) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_chain_otherIterableT_chain_otherCollectionT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb480(%1881 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1882 : !llvm.ptr):
      %1883 = "mid.invariant"(%1882) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1884 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb481] : () -> ()
    ^bb482:
      %1885 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%1885, %1884) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb483] : () -> ()
    ^bb484:
      %1886 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%1886, %1884) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb483] : () -> ()
    ^bb481:
      %1887 = "llvm.getelementptr"(%1882) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1888 = "mid.checkflag"(%1887) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1889 = "llvm.load"(%1888) : (!hi.bool) -> i1
      "cf.cond_br"(%1889) [^bb482, ^bb485] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb485:
      %1890 = "llvm.getelementptr"(%1882) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1891 = "mid.checkflag"(%1890) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1892 = "llvm.load"(%1891) : (!hi.bool) -> i1
      "cf.cond_br"(%1892) [^bb486, ^bb484] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb486:
      %1893 = "llvm.getelementptr"(%1882) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1894 = "mid.checkflag"(%1893) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1895 = "llvm.load"(%1894) : (!hi.bool) -> i1
      "cf.cond_br"(%1895) [^bb484, ^bb484] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb483:
      %1896 = "llvm.extractvalue"(%1881) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1897 = "llvm.load"(%1884) : (!llvm.ptr) -> i32
      %1898 = "llvm.getelementptr"(%1896, %1897) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1899 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1900 = "llvm.getelementptr"(%1898, %1899) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1900) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_interleave_otherCollectionT_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb487(%1901 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1902 : !llvm.ptr):
      %1903 = "mid.invariant"(%1902) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1904 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb488] : () -> ()
    ^bb489:
      %1905 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%1905, %1904) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb490] : () -> ()
    ^bb491:
      %1906 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%1906, %1904) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb490] : () -> ()
    ^bb488:
      %1907 = "llvm.getelementptr"(%1902) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1908 = "mid.checkflag"(%1907) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1909 = "llvm.load"(%1908) : (!hi.bool) -> i1
      "cf.cond_br"(%1909) [^bb492, ^bb493] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb492:
      %1910 = "llvm.getelementptr"(%1902) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1911 = "mid.checkflag"(%1910) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1912 = "llvm.load"(%1911) : (!hi.bool) -> i1
      "cf.cond_br"(%1912) [^bb493, ^bb489] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb493:
      %1913 = "llvm.getelementptr"(%1902) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1914 = "mid.checkflag"(%1913) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1915 = "llvm.load"(%1914) : (!hi.bool) -> i1
      "cf.cond_br"(%1915) [^bb491, ^bb491] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb490:
      %1916 = "llvm.extractvalue"(%1901) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1917 = "llvm.load"(%1904) : (!llvm.ptr) -> i32
      %1918 = "llvm.getelementptr"(%1916, %1917) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1919 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1920 = "llvm.getelementptr"(%1918, %1919) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1920) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_zip_otherIterableU_zip_otherCollectionU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb494(%1921 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1922 : !llvm.ptr):
      %1923 = "mid.invariant"(%1922) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1924 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb495] : () -> ()
    ^bb496:
      %1925 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%1925, %1924) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb497] : () -> ()
    ^bb498:
      %1926 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%1926, %1924) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb497] : () -> ()
    ^bb495:
      %1927 = "llvm.getelementptr"(%1922) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1928 = "mid.checkflag"(%1927) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %1929 = "llvm.load"(%1928) : (!hi.bool) -> i1
      "cf.cond_br"(%1929) [^bb499, ^bb500] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb499:
      %1930 = "llvm.getelementptr"(%1922) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1931 = "mid.checkflag"(%1930) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1932 = "llvm.load"(%1931) : (!hi.bool) -> i1
      "cf.cond_br"(%1932) [^bb500, ^bb496] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb500:
      %1933 = "llvm.getelementptr"(%1922) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1934 = "mid.checkflag"(%1933) {"typ_name" = "Collection"} : (!llvm.ptr) -> !hi.bool
      %1935 = "llvm.load"(%1934) : (!hi.bool) -> i1
      "cf.cond_br"(%1935) [^bb498, ^bb498] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb497:
      %1936 = "llvm.extractvalue"(%1921) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1937 = "llvm.load"(%1924) : (!llvm.ptr) -> i32
      %1938 = "llvm.getelementptr"(%1936, %1937) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<120 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1939 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1940 = "llvm.getelementptr"(%1938, %1939) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1940) : (!llvm.ptr) -> ()
    }) {"func_name" = "ProductCollection_B_product_otherCollectionU_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "core"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Representable", "methods" = [@Representable_B_repr_, @Representable_repr_], "hash_tbl" = [@Representable, 18446744073709551615 : i64, @any_typ, @Object], "offset_tbl" = [10 : i32, 0 : i32, 10 : i32, 12 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 11185903432579561498 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Representable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "String", "methods" = [@String_field_bytes, @String_field_length, @String_field_capacity, @String_field_String_0, @String_B__Self_from_c_string_c_stringBufferi8, @String_B_init_, @String_B_init_lengthi32_capacityi32, @String_B_init_bytesBufferi8_lengthi32_capacityi32, @String_B_length_, @String_B_capacity_, @String_B_c_string_, @String_B_append_xi8, @String_B_extend_otherString, @String_B_reserve_new_capacityi32, @String_B__EQ_otherString, @String_B_unchecked_index_xi32, @String_B_unchecked_insert_xi32_valuei8, @String_B_copy_, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_Bool, @String_B_any_fFunctionT_to_Bool, @String_B_enumerate_, @String_B_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_Bool, @String_B_chain_otherIterableT, @String_B_interleave_otherIterableT, @String_B_zip_otherIterableU, @String_B_product_otherIterableU, @String_B_repr_, @String__Self_from_c_string_c_stringBufferi8, @String_init_, @String_init_lengthi32_capacityi32, @String_init_bytesBufferi8_lengthi32_capacityi32, @String_length_, @String_capacity_, @String_c_string_, @String_append_xi8, @String_extend_otherString, @String_reserve_new_capacityi32, @String__EQ_otherString, @String_unchecked_index_xi32, @String_unchecked_insert_xi32_valuei8, @String_copy_, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @String_repr_, @String_field_String_0, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_Bool, @String_B_any_fFunctionT_to_Bool, @String_B_enumerate_, @String_B_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_Bool, @String_B_chain_otherIterableT, @String_B_interleave_otherIterableT, @String_B_zip_otherIterableU, @String_B_product_otherIterableU, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @String_B_repr_, @String_repr_], "hash_tbl" = [@any_typ, @Iterable, @Representable, @Container, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, @String], "offset_tbl" = [10 : i32, 68 : i32, 93 : i32, 93 : i32, 93 : i32, 0 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388601 : i64, "hash_id" = 6499063144389013426 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "data_size_fn" = "_data_size_String", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Character", "methods" = [@Character_field_byte, @Character_B_init_bytei8, @Character_B_byte_, @Character_init_bytei8, @Character_byte_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Character], "offset_tbl" = [15 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 6681222582356018452 : i64, "base_typ" = !llvm.struct<(i8)>, "data_size_fn" = "_data_size_Character", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "StringIterator", "methods" = [@StringIterator_field_str, @StringIterator_field_index, @StringIterator_field_StringIterator_0, @StringIterator_B_init_strString, @StringIterator_B_next_, @StringIterator_init_strString, @StringIterator_next_, @StringIterator_field_StringIterator_0, @StringIterator_B_next_, @StringIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Iterator, @StringIterator, 18446744073709551615 : i64], "offset_tbl" = [20 : i32, 10 : i32, 0 : i32, 20 : i32, 0 : i32, 17 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 11186173084763598986 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "data_size_fn" = "_data_size_StringIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Exception", "methods" = [@Exception_field_line_number, @Exception_field_file_name, @Exception_field_message, @Exception_field_stacktrace, @Exception_field_n_frames, @Exception_B_init_messageString, @Exception_B_init_, @Exception_B_set_info_line_numberi32_file_nameString, @Exception_B_print_stacktrace_, @Exception_B_report_, @Exception_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_print_stacktrace_, @Exception_report_, @Exception_print_message_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Exception], "offset_tbl" = [27 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 9027164862567808692 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "data_size_fn" = "_data_size_Exception", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "OutOfBounds", "methods" = [@OutOfBounds_field_details, @OutOfBounds_field_line_number, @OutOfBounds_field_file_name, @OutOfBounds_field_message, @OutOfBounds_field_stacktrace, @OutOfBounds_field_n_frames, @OutOfBounds_B_init_boundsi32_indexi32, @OutOfBounds_B_init_messageString, @OutOfBounds_B_init_, @OutOfBounds_B_set_info_line_numberi32_file_nameString, @OutOfBounds_B_print_stacktrace_, @OutOfBounds_B_report_, @OutOfBounds_B_print_message_, @OutOfBounds_init_boundsi32_indexi32, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_print_stacktrace_, @Exception_report_, @OutOfBounds_print_message_, @OutOfBounds_field_line_number, @OutOfBounds_field_file_name, @OutOfBounds_field_message, @OutOfBounds_field_stacktrace, @OutOfBounds_field_n_frames, @OutOfBounds_B_init_messageString, @OutOfBounds_B_init_, @OutOfBounds_B_set_info_line_numberi32_file_nameString, @OutOfBounds_B_print_stacktrace_, @OutOfBounds_B_report_, @OutOfBounds_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_print_stacktrace_, @Exception_report_, @OutOfBounds_print_message_], "hash_tbl" = [@any_typ, @Exception, @OutOfBounds, @Object], "offset_tbl" = [10 : i32, 30 : i32, 10 : i32, 47 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 5348403617834207535 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "data_size_fn" = "_data_size_OutOfBounds", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "OutOfBoundsDetails", "methods" = [@OutOfBoundsDetails_field_bounds, @OutOfBoundsDetails_field_index, @OutOfBoundsDetails_B_init_boundsi32_indexi32, @OutOfBoundsDetails_B_report_, @OutOfBoundsDetails_init_boundsi32_indexi32, @OutOfBoundsDetails_report_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @OutOfBoundsDetails], "offset_tbl" = [16 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 4650630525701360429 : i64, "base_typ" = !llvm.struct<(i32, i32)>, "data_size_fn" = "_data_size_OutOfBoundsDetails", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Representable", "types" = []} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr):
      %3 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Representable">
      %4 = "hi.cast"(%3) {"from_typ" = !hi.fatptr<"Representable">, "to_typ" = !hi.fatptr<"Representable">, "from_typ_name" = "Representable", "to_typ_name" = "Representable"} : (!hi.fatptr<"Representable">) -> !hi.fatptr<"Representable">
      %5 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %6 = "hi.cast"(%5) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %7 = "mid.create_buffer"(%6) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %8 = "mid.refer"(%7) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %9 = "mid.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "Object"} : () -> !llvm.ptr
      %10 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%8, %10, %9) {"typ" = !llvm.array<6 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %11 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %12 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %13 = "mid.unwrap"(%8) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %14 = "mid.unwrap"(%11) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %15 = "mid.unwrap"(%12) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %16 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %17 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %18 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %19 = "hi.cast"(%8) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %20 = "mid.unwrap"(%19) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %21 = "hi.cast"(%17) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %22 = "mid.unwrap"(%21) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %23 = "hi.cast"(%18) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %24 = "mid.unwrap"(%23) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %25 = "mid.unwrap"(%16) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %26 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %27 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %28 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %29 = "mid.parameterizations_array"(%26, %27, %28) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%29, %25, %20, %22, %24) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %30 = "hi.cast"(%16) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%30) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "Representable_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%31 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %32 : !llvm.ptr):
      %33 = "mid.invariant"(%32) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %34 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb2:
      %35 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
      "llvm.store"(%35, %34) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb3:
      %36 = "llvm.extractvalue"(%31) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %37 = "llvm.load"(%34) : (!llvm.ptr) -> i32
      %38 = "llvm.getelementptr"(%36, %37) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %39 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %40 = "llvm.getelementptr"(%38, %39) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%40) : (!llvm.ptr) -> ()
    }) {"func_name" = "Representable_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_String", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "String_getter_bytes", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi8"} : () -> ()
    "mid.setter_def"() {"meth_name" = "String_setter_bytes", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi8"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "String_field_bytes", "getter_name" = "String_getter_bytes", "setter_name" = "String_setter_bytes"} : () -> ()
    "mid.getter_def"() {"meth_name" = "String_getter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "String_setter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "String_field_length", "getter_name" = "String_getter_length", "setter_name" = "String_setter_length"} : () -> ()
    "mid.getter_def"() {"meth_name" = "String_getter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "String_setter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "String_field_capacity", "getter_name" = "String_getter_capacity", "setter_name" = "String_setter_capacity"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "String_field_String_0", "id_hierarchy" = ["Character"], "name_hierarchy" = ["Character"]} : () -> ()
    "mid.func"() ({
    ^bb4(%41 : !llvm.ptr, %42 : !llvm.struct<(!llvm.ptr)>):
      %43 = "mid.wrap"(%42) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %44 = "hi.cast"(%43) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %45 = "mid.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %46 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %47 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
        %48 = "mid.unwrap"(%47) : (!hi.bool) -> i1
      }, {
        %49 = "hi.cast"(%46) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %50 = "mid.buffer_get"(%44, %49) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %51 = "mid.unwrap"(%50) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i8
        %52 = "mid.unwrap"(%45) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i8
        %53 = "mid.comparison"(%51, %52) {"op" = "EQ"} : (i8, i8) -> i1
        %54 = "mid.wrap"(%53) : (i1) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %55 = "mid.unwrap"(%54) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%55) ({
          "mid.break"() [^bb5] : () -> ()
        }) : (i1) -> ()
        %56 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %57 = "mid.unwrap"(%46) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %58 = "mid.unwrap"(%56) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %59 = "mid.arithmetic"(%57, %58) {"op" = "ADD"} : (i32, i32) -> i32
        %60 = "mid.wrap"(%59) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %61 = "hi.cast"(%60) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%46, %61) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %62 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %63 = "mid.unwrap"(%46) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %64 = "mid.unwrap"(%62) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %65 = "mid.arithmetic"(%63, %64) {"op" = "ADD"} : (i32, i32) -> i32
      %66 = "mid.wrap"(%65) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %67 = "mid.unwrap"(%44) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %68 = "mid.unwrap"(%46) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %69 = "mid.unwrap"(%66) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %70 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %71 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %72 = "mid.unwrap"(%46) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %73 = "mid.unwrap"(%71) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %74 = "mid.arithmetic"(%72, %73) {"op" = "ADD"} : (i32, i32) -> i32
      %75 = "mid.wrap"(%74) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %76 = "hi.cast"(%44) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %77 = "mid.unwrap"(%76) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %78 = "hi.cast"(%46) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %79 = "mid.unwrap"(%78) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %80 = "hi.cast"(%75) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %81 = "mid.unwrap"(%80) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %82 = "mid.unwrap"(%70) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %83 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %84 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %85 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %86 = "mid.parameterizations_array"(%83, %84, %85) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%86, %82, %77, %79, %81) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %87 = "hi.cast"(%70) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%87) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String__Self_from_c_string_c_stringBufferi8", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%88 : !llvm.ptr):
      %89 = "mid.invariant"(%88) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %90 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb7] : () -> ()
    ^bb8:
      %91 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%91, %90) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb9] : () -> ()
    ^bb7:
      %92 = "llvm.getelementptr"(%88) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %93 = "mid.checkflag"(%92) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %94 = "llvm.load"(%93) : (!hi.bool) -> i1
      "cf.cond_br"(%94) [^bb8, ^bb8] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb9:
      %95 = "mid.addr_of"() {"global_name" = @String} : () -> !llvm.ptr
      %96 = "llvm.load"(%90) : (!llvm.ptr) -> i32
      %97 = "llvm.getelementptr"(%95, %96) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %98 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %99 = "llvm.getelementptr"(%97, %98) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%99) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B__Self_from_c_string_c_stringBufferi8", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb10(%100 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %101 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %102 : !llvm.ptr):
      %103 = "mid.wrap"(%100) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %104 = "hi.cast"(%103) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %105 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %106 = "hi.cast"(%105) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %107 = "mid.create_buffer"(%106) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %108 = "hi.cast"(%107) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      "mid.set_field"(%104, %108) {"offset" = 0 : i64, "vtable_bytes" = 680 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">, !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> ()
      %109 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %110 = "hi.cast"(%109) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%104, %110) {"offset" = 2 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %111 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %112 = "hi.cast"(%111) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%104, %112) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "String_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb11(%113 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %114 : !llvm.ptr):
      %115 = "mid.invariant"(%114) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %116 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb12] : () -> ()
    ^bb12:
      %117 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%117, %116) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb13] : () -> ()
    ^bb13:
      %118 = "llvm.extractvalue"(%113) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %119 = "llvm.load"(%116) : (!llvm.ptr) -> i32
      %120 = "llvm.getelementptr"(%118, %119) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %121 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %122 = "llvm.getelementptr"(%120, %121) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%122) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb14(%123 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %124 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %125 : !llvm.ptr, %126 : i32, %127 : i32):
      %128 = "mid.wrap"(%123) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %129 = "hi.cast"(%128) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %130 = "mid.wrap"(%126) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %131 = "hi.cast"(%130) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %132 = "hi.cast"(%131) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%129, %132) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %133 = "mid.wrap"(%127) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %134 = "hi.cast"(%133) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %135 = "hi.cast"(%134) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%129, %135) {"offset" = 2 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %136 = "mid.get_field"(%129) {"offset" = 2 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %137 = "hi.cast"(%136) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %138 = "mid.create_buffer"(%137) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %139 = "hi.cast"(%138) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      "mid.set_field"(%129, %139) {"offset" = 0 : i64, "vtable_bytes" = 680 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">, !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> ()
    }) {"func_name" = "String_init_lengthi32_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb15(%140 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %141 : !llvm.ptr):
      %142 = "mid.invariant"(%141) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %143 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb17:
      %144 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%144, %143) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb19:
      %145 = "llvm.getelementptr"(%141) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %146 = "mid.checkflag"(%145) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %147 = "llvm.load"(%146) : (!hi.bool) -> i1
      "cf.cond_br"(%147) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb16:
      %148 = "llvm.getelementptr"(%141) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %149 = "mid.checkflag"(%148) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %150 = "llvm.load"(%149) : (!hi.bool) -> i1
      "cf.cond_br"(%150) [^bb19, ^bb19] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb18:
      %151 = "llvm.extractvalue"(%140) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %152 = "llvm.load"(%143) : (!llvm.ptr) -> i32
      %153 = "llvm.getelementptr"(%151, %152) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %154 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %155 = "llvm.getelementptr"(%153, %154) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%155) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_init_lengthi32_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb20(%156 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %157 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %158 : !llvm.ptr, %159 : !llvm.struct<(!llvm.ptr)>, %160 : i32, %161 : i32):
      %162 = "mid.wrap"(%156) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %163 = "hi.cast"(%162) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %164 = "mid.wrap"(%159) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %165 = "hi.cast"(%164) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %166 = "hi.cast"(%165) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      "mid.set_field"(%163, %166) {"offset" = 0 : i64, "vtable_bytes" = 680 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">, !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> ()
      %167 = "mid.wrap"(%160) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %168 = "hi.cast"(%167) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %169 = "hi.cast"(%168) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%163, %169) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %170 = "mid.wrap"(%161) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %171 = "hi.cast"(%170) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %172 = "hi.cast"(%171) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%163, %172) {"offset" = 2 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "String_init_bytesBufferi8_lengthi32_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb21(%173 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %174 : !llvm.ptr):
      %175 = "mid.invariant"(%174) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %176 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb22] : () -> ()
    ^bb23:
      %177 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%177, %176) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb24] : () -> ()
    ^bb25:
      %178 = "llvm.getelementptr"(%174) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %179 = "mid.checkflag"(%178) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %180 = "llvm.load"(%179) : (!hi.bool) -> i1
      "cf.cond_br"(%180) [^bb23, ^bb23] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb26:
      %181 = "llvm.getelementptr"(%174) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %182 = "mid.checkflag"(%181) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %183 = "llvm.load"(%182) : (!hi.bool) -> i1
      "cf.cond_br"(%183) [^bb25, ^bb25] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %184 = "llvm.getelementptr"(%174) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %185 = "mid.checkflag"(%184) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %186 = "llvm.load"(%185) : (!hi.bool) -> i1
      "cf.cond_br"(%186) [^bb26, ^bb26] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb24:
      %187 = "llvm.extractvalue"(%173) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %188 = "llvm.load"(%176) : (!llvm.ptr) -> i32
      %189 = "llvm.getelementptr"(%187, %188) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %190 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %191 = "llvm.getelementptr"(%189, %190) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%191) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_init_bytesBufferi8_lengthi32_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb27(%192 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %193 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %194 : !llvm.ptr):
      %195 = "mid.wrap"(%192) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %196 = "hi.cast"(%195) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %197 = "mid.get_field"(%196) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %198 = "hi.cast"(%197) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%198) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "String_length_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb28(%199 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %200 : !llvm.ptr):
      %201 = "mid.invariant"(%200) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %202 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb29] : () -> ()
    ^bb29:
      %203 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%203, %202) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb30] : () -> ()
    ^bb30:
      %204 = "llvm.extractvalue"(%199) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %205 = "llvm.load"(%202) : (!llvm.ptr) -> i32
      %206 = "llvm.getelementptr"(%204, %205) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %207 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %208 = "llvm.getelementptr"(%206, %207) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%208) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_length_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb31(%209 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %210 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %211 : !llvm.ptr):
      %212 = "mid.wrap"(%209) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %213 = "hi.cast"(%212) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %214 = "mid.get_field"(%213) {"offset" = 2 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %215 = "hi.cast"(%214) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%215) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "String_capacity_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb32(%216 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %217 : !llvm.ptr):
      %218 = "mid.invariant"(%217) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %219 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb33] : () -> ()
    ^bb33:
      %220 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%220, %219) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb34] : () -> ()
    ^bb34:
      %221 = "llvm.extractvalue"(%216) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %222 = "llvm.load"(%219) : (!llvm.ptr) -> i32
      %223 = "llvm.getelementptr"(%221, %222) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %224 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %225 = "llvm.getelementptr"(%223, %224) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%225) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb35(%226 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %227 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %228 : !llvm.ptr):
      %229 = "mid.wrap"(%226) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %230 = "hi.cast"(%229) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %231 = "mid.get_field"(%230) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %232 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %233 = "mid.unwrap"(%231) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %234 = "mid.unwrap"(%232) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %235 = "mid.arithmetic"(%233, %234) {"op" = "ADD"} : (i32, i32) -> i32
      %236 = "mid.wrap"(%235) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %237 = "hi.cast"(%236) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %238 = "mid.create_buffer"(%237) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %239 = "mid.refer"(%238) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %240 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %241 = "mid.get_field"(%230) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %242 = "mid.unwrap"(%240) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %243 = "mid.unwrap"(%241) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %244 = "mid.comparison"(%242, %243) {"op" = "LT"} : (i32, i32) -> i1
        %245 = "mid.wrap"(%244) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %246 = "mid.unwrap"(%245) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %247 = "mid.get_field"(%230) {"offset" = 0 : i64, "vtable_bytes" = 680 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %248 = "hi.cast"(%240) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %249 = "mid.buffer_get"(%247, %248) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %250 = "hi.cast"(%249) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %251 = "hi.cast"(%240) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        "mid.buffer_set"(%239, %251, %250) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
        %252 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %253 = "mid.unwrap"(%240) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %254 = "mid.unwrap"(%252) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %255 = "mid.arithmetic"(%253, %254) {"op" = "ADD"} : (i32, i32) -> i32
        %256 = "mid.wrap"(%255) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %257 = "hi.cast"(%256) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%240, %257) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %258 = "mid.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %259 = "mid.get_field"(%230) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %260 = "hi.cast"(%258) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %261 = "hi.cast"(%259) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.buffer_set"(%239, %261, %260) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
      %262 = "hi.cast"(%239) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      "mid.return"(%262) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> ()
    }) {"func_name" = "String_c_string_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb36(%263 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %264 : !llvm.ptr):
      %265 = "mid.invariant"(%264) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %266 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb37] : () -> ()
    ^bb37:
      %267 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%267, %266) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb38] : () -> ()
    ^bb38:
      %268 = "llvm.extractvalue"(%263) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %269 = "llvm.load"(%266) : (!llvm.ptr) -> i32
      %270 = "llvm.getelementptr"(%268, %269) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %271 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %272 = "llvm.getelementptr"(%270, %271) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%272) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_c_string_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb39(%273 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %274 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %275 : !llvm.ptr, %276 : i8):
      %277 = "mid.wrap"(%273) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %278 = "hi.cast"(%277) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %279 = "mid.wrap"(%276) : (i8) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %280 = "hi.cast"(%279) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %281 = "mid.get_field"(%278) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %282 = "mid.get_field"(%278) {"offset" = 2 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %283 = "mid.unwrap"(%281) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %284 = "mid.unwrap"(%282) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %285 = "mid.comparison"(%283, %284) {"op" = "GE"} : (i32, i32) -> i1
      %286 = "mid.wrap"(%285) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %287 = "mid.unwrap"(%286) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%287) ({
        %288 = "mid.get_field"(%278) {"offset" = 2 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %289 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %290 = "mid.unwrap"(%288) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %291 = "mid.unwrap"(%289) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %292 = "mid.arithmetic"(%290, %291) {"op" = "MUL"} : (i32, i32) -> i32
        %293 = "mid.wrap"(%292) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %294 = "hi.cast"(%293) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %295 = "mid.unwrap"(%294) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %296 = "mid.unwrap"(%278) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %297 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %298 = "mid.parameterizations_array"(%297) : (!llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%298, %296, %295) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      }) : (i1) -> ()
      %299 = "mid.get_field"(%278) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %300 = "mid.get_field"(%278) {"offset" = 0 : i64, "vtable_bytes" = 680 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %301 = "hi.cast"(%280) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %302 = "hi.cast"(%299) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.buffer_set"(%300, %302, %301) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
      %303 = "mid.get_field"(%278) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %304 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %305 = "mid.unwrap"(%303) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %306 = "mid.unwrap"(%304) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %307 = "mid.arithmetic"(%305, %306) {"op" = "ADD"} : (i32, i32) -> i32
      %308 = "mid.wrap"(%307) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %309 = "hi.cast"(%308) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%278, %309) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %310 = "hi.cast"(%278) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%310) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String_append_xi8", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb40(%311 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %312 : !llvm.ptr):
      %313 = "mid.invariant"(%312) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %314 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb41] : () -> ()
    ^bb42:
      %315 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
      "llvm.store"(%315, %314) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb43] : () -> ()
    ^bb41:
      %316 = "llvm.getelementptr"(%312) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %317 = "mid.checkflag"(%316) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !hi.bool
      %318 = "llvm.load"(%317) : (!hi.bool) -> i1
      "cf.cond_br"(%318) [^bb42, ^bb42] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb43:
      %319 = "llvm.extractvalue"(%311) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %320 = "llvm.load"(%314) : (!llvm.ptr) -> i32
      %321 = "llvm.getelementptr"(%319, %320) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %322 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %323 = "llvm.getelementptr"(%321, %322) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%323) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_append_xi8", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb44(%324 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %325 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %326 : !llvm.ptr, %327 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %328 = "mid.wrap"(%324) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %329 = "hi.cast"(%328) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %330 = "mid.wrap"(%327) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %331 = "hi.cast"(%330) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %332 = "mid.unwrap"(%331) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %333 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %334 = "mid.method_call"(%333, %332) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %335 = "hi.cast"(%334) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %336 = "mid.get_field"(%329) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %337 = "mid.refer"(%336) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %338 = "mid.unwrap"(%337) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %339 = "mid.unwrap"(%335) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %340 = "mid.arithmetic"(%338, %339) {"op" = "ADD"} : (i32, i32) -> i32
      %341 = "mid.wrap"(%340) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %342 = "hi.cast"(%341) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %343 = "mid.unwrap"(%342) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %344 = "mid.unwrap"(%329) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %345 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %346 = "mid.parameterizations_array"(%345) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%346, %344, %343) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %347 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %348 = "mid.unwrap"(%347) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %349 = "mid.unwrap"(%335) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %350 = "mid.comparison"(%348, %349) {"op" = "LT"} : (i32, i32) -> i1
        %351 = "mid.wrap"(%350) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %352 = "mid.unwrap"(%351) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %353 = "mid.unwrap"(%347) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %354 = "mid.unwrap"(%337) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %355 = "mid.arithmetic"(%353, %354) {"op" = "ADD"} : (i32, i32) -> i32
        %356 = "mid.wrap"(%355) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %357 = "hi.cast"(%347) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %358 = "mid.unwrap"(%357) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %359 = "mid.unwrap"(%331) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %360 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %361 = "mid.parameterizations_array"(%360) : (!llvm.ptr) -> !llvm.ptr
        %362 = "mid.method_call"(%361, %359, %358) {"offset" = 15 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 85 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %363 = "hi.cast"(%362) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %364 = "hi.cast"(%356) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %365 = "mid.unwrap"(%364) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %366 = "hi.cast"(%363) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %367 = "mid.unwrap"(%366) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i8
        %368 = "mid.unwrap"(%329) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %369 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %370 = "mid.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["i8"]} : () -> !llvm.ptr
        %371 = "mid.parameterizations_array"(%369, %370) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%371, %368, %365, %367) {"offset" = 16 : i32, "vptrs" = ["i32_typ", "i8_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i8) -> ()
        %372 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %373 = "mid.unwrap"(%347) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %374 = "mid.unwrap"(%372) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %375 = "mid.arithmetic"(%373, %374) {"op" = "ADD"} : (i32, i32) -> i32
        %376 = "mid.wrap"(%375) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %377 = "hi.cast"(%376) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%347, %377) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %378 = "hi.cast"(%341) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%329, %378) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %379 = "hi.cast"(%329) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%379) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String_extend_otherString", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb45(%380 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %381 : !llvm.ptr):
      %382 = "mid.invariant"(%381) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %383 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb46] : () -> ()
    ^bb47:
      %384 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
      "llvm.store"(%384, %383) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb48] : () -> ()
    ^bb46:
      %385 = "llvm.getelementptr"(%381) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %386 = "mid.checkflag"(%385) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %387 = "llvm.load"(%386) : (!hi.bool) -> i1
      "cf.cond_br"(%387) [^bb47, ^bb47] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb48:
      %388 = "llvm.extractvalue"(%380) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %389 = "llvm.load"(%383) : (!llvm.ptr) -> i32
      %390 = "llvm.getelementptr"(%388, %389) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %391 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %392 = "llvm.getelementptr"(%390, %391) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%392) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_extend_otherString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb49(%393 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %394 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %395 : !llvm.ptr, %396 : i32):
      %397 = "mid.wrap"(%393) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %398 = "hi.cast"(%397) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %399 = "mid.wrap"(%396) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %400 = "hi.cast"(%399) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %401 = "mid.get_field"(%398) {"offset" = 2 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %402 = "mid.unwrap"(%400) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %403 = "mid.unwrap"(%401) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %404 = "mid.comparison"(%402, %403) {"op" = "LE"} : (i32, i32) -> i1
      %405 = "mid.wrap"(%404) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %406 = "mid.unwrap"(%405) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%406) ({
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %407 = "hi.cast"(%400) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%398, %407) {"offset" = 2 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %408 = "mid.get_field"(%398) {"offset" = 0 : i64, "vtable_bytes" = 680 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %409 = "mid.refer"(%408) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %410 = "mid.get_field"(%398) {"offset" = 2 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %411 = "hi.cast"(%410) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %412 = "mid.create_buffer"(%411) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %413 = "hi.cast"(%412) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      "mid.set_field"(%398, %413) {"offset" = 0 : i64, "vtable_bytes" = 680 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">, !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> ()
      %414 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %415 = "mid.get_field"(%398) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %416 = "mid.unwrap"(%414) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %417 = "mid.unwrap"(%415) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %418 = "mid.comparison"(%416, %417) {"op" = "LT"} : (i32, i32) -> i1
        %419 = "mid.wrap"(%418) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %420 = "mid.unwrap"(%419) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %421 = "hi.cast"(%414) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %422 = "mid.buffer_get"(%409, %421) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %423 = "mid.get_field"(%398) {"offset" = 0 : i64, "vtable_bytes" = 680 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %424 = "hi.cast"(%422) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %425 = "hi.cast"(%414) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        "mid.buffer_set"(%423, %425, %424) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
        %426 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %427 = "mid.unwrap"(%414) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %428 = "mid.unwrap"(%426) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %429 = "mid.arithmetic"(%427, %428) {"op" = "ADD"} : (i32, i32) -> i32
        %430 = "mid.wrap"(%429) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %431 = "hi.cast"(%430) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%414, %431) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
    }) {"func_name" = "String_reserve_new_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb50(%432 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %433 : !llvm.ptr):
      %434 = "mid.invariant"(%433) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %435 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb51] : () -> ()
    ^bb52:
      %436 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
      "llvm.store"(%436, %435) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb53] : () -> ()
    ^bb51:
      %437 = "llvm.getelementptr"(%433) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %438 = "mid.checkflag"(%437) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %439 = "llvm.load"(%438) : (!hi.bool) -> i1
      "cf.cond_br"(%439) [^bb52, ^bb52] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb53:
      %440 = "llvm.extractvalue"(%432) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %441 = "llvm.load"(%435) : (!llvm.ptr) -> i32
      %442 = "llvm.getelementptr"(%440, %441) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %443 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %444 = "llvm.getelementptr"(%442, %443) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%444) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_reserve_new_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb54(%445 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %446 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %447 : !llvm.ptr, %448 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %449 = "mid.wrap"(%445) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %450 = "hi.cast"(%449) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %451 = "mid.wrap"(%448) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %452 = "hi.cast"(%451) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %453 = "mid.get_field"(%450) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %454 = "mid.unwrap"(%452) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %455 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %456 = "mid.method_call"(%455, %454) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %457 = "hi.cast"(%456) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %458 = "mid.unwrap"(%453) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %459 = "mid.unwrap"(%457) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %460 = "mid.comparison"(%458, %459) {"op" = "NEQ"} : (i32, i32) -> i1
      %461 = "mid.wrap"(%460) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %462 = "mid.unwrap"(%461) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%462) ({
        %463 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
        %464 = "hi.cast"(%463) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
        "mid.return"(%464) : (!hi.bool) -> ()
      }) : (i1) -> ()
      %465 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %466 = "mid.get_field"(%450) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %467 = "mid.unwrap"(%465) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %468 = "mid.unwrap"(%466) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %469 = "mid.comparison"(%467, %468) {"op" = "LT"} : (i32, i32) -> i1
        %470 = "mid.wrap"(%469) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %471 = "mid.unwrap"(%470) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %472 = "mid.get_field"(%450) {"offset" = 0 : i64, "vtable_bytes" = 680 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %473 = "hi.cast"(%465) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %474 = "mid.buffer_get"(%472, %473) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %475 = "hi.cast"(%465) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %476 = "mid.unwrap"(%475) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %477 = "mid.unwrap"(%452) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %478 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %479 = "mid.parameterizations_array"(%478) : (!llvm.ptr) -> !llvm.ptr
        %480 = "mid.method_call"(%479, %477, %476) {"offset" = 15 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 85 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %481 = "hi.cast"(%480) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %482 = "mid.unwrap"(%474) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i8
        %483 = "mid.unwrap"(%481) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i8
        %484 = "mid.comparison"(%482, %483) {"op" = "NEQ"} : (i8, i8) -> i1
        %485 = "mid.wrap"(%484) : (i1) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %486 = "mid.unwrap"(%485) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%486) ({
          %487 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
          %488 = "hi.cast"(%487) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
          "mid.return"(%488) : (!hi.bool) -> ()
        }) : (i1) -> ()
        %489 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %490 = "mid.unwrap"(%465) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %491 = "mid.unwrap"(%489) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %492 = "mid.arithmetic"(%490, %491) {"op" = "ADD"} : (i32, i32) -> i32
        %493 = "mid.wrap"(%492) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %494 = "hi.cast"(%493) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%465, %494) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %495 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %496 = "hi.cast"(%495) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.return"(%496) : (!hi.bool) -> ()
    }) {"func_name" = "String__EQ_otherString", "result_type" = i1, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb55(%497 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %498 : !llvm.ptr):
      %499 = "mid.invariant"(%498) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %500 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb56] : () -> ()
    ^bb57:
      %501 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
      "llvm.store"(%501, %500) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb58] : () -> ()
    ^bb56:
      %502 = "llvm.getelementptr"(%498) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %503 = "mid.checkflag"(%502) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %504 = "llvm.load"(%503) : (!hi.bool) -> i1
      "cf.cond_br"(%504) [^bb57, ^bb57] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb58:
      %505 = "llvm.extractvalue"(%497) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %506 = "llvm.load"(%500) : (!llvm.ptr) -> i32
      %507 = "llvm.getelementptr"(%505, %506) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %508 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %509 = "llvm.getelementptr"(%507, %508) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%509) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B__EQ_otherString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb59(%510 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %511 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %512 : !llvm.ptr, %513 : i32):
      %514 = "mid.wrap"(%510) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %515 = "hi.cast"(%514) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %516 = "mid.wrap"(%513) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %517 = "hi.cast"(%516) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %518 = "mid.get_field"(%515) {"offset" = 0 : i64, "vtable_bytes" = 680 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %519 = "hi.cast"(%517) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %520 = "mid.buffer_get"(%518, %519) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %521 = "hi.cast"(%520) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      "mid.return"(%521) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "String_unchecked_index_xi32", "result_type" = i8, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb60(%522 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %523 : !llvm.ptr):
      %524 = "mid.invariant"(%523) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %525 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb61] : () -> ()
    ^bb62:
      %526 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
      "llvm.store"(%526, %525) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb63] : () -> ()
    ^bb61:
      %527 = "llvm.getelementptr"(%523) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %528 = "mid.checkflag"(%527) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %529 = "llvm.load"(%528) : (!hi.bool) -> i1
      "cf.cond_br"(%529) [^bb62, ^bb62] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb63:
      %530 = "llvm.extractvalue"(%522) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %531 = "llvm.load"(%525) : (!llvm.ptr) -> i32
      %532 = "llvm.getelementptr"(%530, %531) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %533 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %534 = "llvm.getelementptr"(%532, %533) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%534) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_unchecked_index_xi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb64(%535 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %536 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %537 : !llvm.ptr, %538 : i32, %539 : i8):
      %540 = "mid.wrap"(%535) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %541 = "hi.cast"(%540) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %542 = "mid.wrap"(%538) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %543 = "hi.cast"(%542) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %544 = "mid.wrap"(%539) : (i8) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %545 = "hi.cast"(%544) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %546 = "mid.get_field"(%541) {"offset" = 0 : i64, "vtable_bytes" = 680 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %547 = "hi.cast"(%545) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %548 = "hi.cast"(%543) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.buffer_set"(%546, %548, %547) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "String_unchecked_insert_xi32_valuei8", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb65(%549 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %550 : !llvm.ptr):
      %551 = "mid.invariant"(%550) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %552 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb66] : () -> ()
    ^bb67:
      %553 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
      "llvm.store"(%553, %552) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb68] : () -> ()
    ^bb69:
      %554 = "llvm.getelementptr"(%550) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %555 = "mid.checkflag"(%554) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !hi.bool
      %556 = "llvm.load"(%555) : (!hi.bool) -> i1
      "cf.cond_br"(%556) [^bb67, ^bb67] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb66:
      %557 = "llvm.getelementptr"(%550) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %558 = "mid.checkflag"(%557) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %559 = "llvm.load"(%558) : (!hi.bool) -> i1
      "cf.cond_br"(%559) [^bb69, ^bb69] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb68:
      %560 = "llvm.extractvalue"(%549) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %561 = "llvm.load"(%552) : (!llvm.ptr) -> i32
      %562 = "llvm.getelementptr"(%560, %561) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %563 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %564 = "llvm.getelementptr"(%562, %563) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%564) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_unchecked_insert_xi32_valuei8", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb70(%565 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %566 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %567 : !llvm.ptr):
      %568 = "mid.wrap"(%565) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %569 = "hi.cast"(%568) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %570 = "mid.get_field"(%569) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %571 = "hi.cast"(%570) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %572 = "mid.create_buffer"(%571) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %573 = "mid.refer"(%572) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %574 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %575 = "mid.get_field"(%569) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %576 = "mid.unwrap"(%574) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %577 = "mid.unwrap"(%575) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %578 = "mid.comparison"(%576, %577) {"op" = "LT"} : (i32, i32) -> i1
        %579 = "mid.wrap"(%578) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %580 = "mid.unwrap"(%579) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %581 = "mid.get_field"(%569) {"offset" = 0 : i64, "vtable_bytes" = 680 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"String">) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %582 = "hi.cast"(%574) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %583 = "mid.buffer_get"(%581, %582) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %584 = "hi.cast"(%583) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
        %585 = "hi.cast"(%574) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        "mid.buffer_set"(%573, %585, %584) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
        %586 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %587 = "mid.unwrap"(%574) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %588 = "mid.unwrap"(%586) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %589 = "mid.arithmetic"(%587, %588) {"op" = "ADD"} : (i32, i32) -> i32
        %590 = "mid.wrap"(%589) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %591 = "hi.cast"(%590) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%574, %591) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %592 = "mid.get_field"(%569) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %593 = "mid.get_field"(%569) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %594 = "mid.unwrap"(%573) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %595 = "mid.unwrap"(%592) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %596 = "mid.unwrap"(%593) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %597 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %598 = "mid.get_field"(%569) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %599 = "mid.get_field"(%569) {"offset" = 1 : i64, "vtable_bytes" = 680 : i32, "original_type" = i32} : (!hi.fatptr<"String">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %600 = "hi.cast"(%573) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %601 = "mid.unwrap"(%600) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %602 = "hi.cast"(%598) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %603 = "mid.unwrap"(%602) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %604 = "hi.cast"(%599) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %605 = "mid.unwrap"(%604) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %606 = "mid.unwrap"(%597) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %607 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %608 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %609 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %610 = "mid.parameterizations_array"(%607, %608, %609) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%610, %606, %601, %603, %605) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %611 = "mid.refer"(%597) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %612 = "hi.cast"(%611) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%612) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String_copy_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb71(%613 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %614 : !llvm.ptr):
      %615 = "mid.invariant"(%614) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %616 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb72] : () -> ()
    ^bb72:
      %617 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
      "llvm.store"(%617, %616) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb73] : () -> ()
    ^bb73:
      %618 = "llvm.extractvalue"(%613) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %619 = "llvm.load"(%616) : (!llvm.ptr) -> i32
      %620 = "llvm.getelementptr"(%618, %619) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %621 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %622 = "llvm.getelementptr"(%620, %621) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%622) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_copy_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb74(%623 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %624 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %625 : !llvm.ptr):
      %626 = "mid.wrap"(%623) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %627 = "hi.cast"(%626) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %628 = "mid.unwrap"(%627) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %629 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "StringIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"StringIterator">
      %630 = "hi.cast"(%627) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %631 = "mid.unwrap"(%630) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %632 = "mid.unwrap"(%629) : (!hi.fatptr<"StringIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %633 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %634 = "mid.parameterizations_array"(%633) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%634, %632, %631) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %635 = "hi.cast"(%629) {"from_typ" = !hi.fatptr<"StringIterator">, "to_typ" = !hi.fatptr<"Iterator", [!hi.fatptr<"Character">]>, "from_typ_name" = "StringIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"Iterator", [!hi.fatptr<"Character">]>
      "mid.return"(%635) : (!hi.fatptr<"Iterator", [!hi.fatptr<"Character">]>) -> ()
    }) {"func_name" = "String_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb75(%636 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %637 : !llvm.ptr):
      %638 = "mid.invariant"(%637) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %639 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb76] : () -> ()
    ^bb76:
      %640 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
      "llvm.store"(%640, %639) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb77] : () -> ()
    ^bb77:
      %641 = "llvm.extractvalue"(%636) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %642 = "llvm.load"(%639) : (!llvm.ptr) -> i32
      %643 = "llvm.getelementptr"(%641, %642) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %644 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %645 = "llvm.getelementptr"(%643, %644) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%645) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb78(%646 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %647 : !llvm.ptr):
      %648 = "mid.invariant"(%647) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %649 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb79] : () -> ()
    ^bb80:
      %650 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
      "llvm.store"(%650, %649) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb81] : () -> ()
    ^bb79:
      %651 = "llvm.getelementptr"(%647) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %652 = "mid.checkflag"(%651) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %653 = "llvm.load"(%652) : (!hi.bool) -> i1
      "cf.cond_br"(%653) [^bb80, ^bb80] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb81:
      %654 = "llvm.extractvalue"(%646) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %655 = "llvm.load"(%649) : (!llvm.ptr) -> i32
      %656 = "llvm.getelementptr"(%654, %655) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %657 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %658 = "llvm.getelementptr"(%656, %657) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%658) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb82(%659 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %660 : !llvm.ptr):
      %661 = "mid.invariant"(%660) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %662 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb83] : () -> ()
    ^bb84:
      %663 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
      "llvm.store"(%663, %662) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb85] : () -> ()
    ^bb86:
      %664 = "llvm.getelementptr"(%660) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %665 = "mid.checkflag"(%664) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %666 = "llvm.load"(%665) : (!hi.bool) -> i1
      "cf.cond_br"(%666) [^bb84, ^bb84] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb83:
      %667 = "llvm.getelementptr"(%660) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %668 = "mid.checkflag"(%667) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %669 = "llvm.load"(%668) : (!hi.bool) -> i1
      "cf.cond_br"(%669) [^bb86, ^bb86] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb85:
      %670 = "llvm.extractvalue"(%659) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %671 = "llvm.load"(%662) : (!llvm.ptr) -> i32
      %672 = "llvm.getelementptr"(%670, %671) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %673 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %674 = "llvm.getelementptr"(%672, %673) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%674) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb87(%675 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %676 : !llvm.ptr):
      %677 = "mid.invariant"(%676) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %678 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb88] : () -> ()
    ^bb89:
      %679 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
      "llvm.store"(%679, %678) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb90] : () -> ()
    ^bb88:
      %680 = "llvm.getelementptr"(%676) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %681 = "mid.checkflag"(%680) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %682 = "llvm.load"(%681) : (!hi.bool) -> i1
      "cf.cond_br"(%682) [^bb89, ^bb89] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb90:
      %683 = "llvm.extractvalue"(%675) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %684 = "llvm.load"(%678) : (!llvm.ptr) -> i32
      %685 = "llvm.getelementptr"(%683, %684) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %686 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %687 = "llvm.getelementptr"(%685, %686) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%687) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb91(%688 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %689 : !llvm.ptr):
      %690 = "mid.invariant"(%689) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %691 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb92] : () -> ()
    ^bb93:
      %692 = "llvm.mlir.constant"() <{"value" = 49 : i32}> : () -> i32
      "llvm.store"(%692, %691) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb94] : () -> ()
    ^bb92:
      %693 = "llvm.getelementptr"(%689) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %694 = "mid.checkflag"(%693) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %695 = "llvm.load"(%694) : (!hi.bool) -> i1
      "cf.cond_br"(%695) [^bb93, ^bb93] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb94:
      %696 = "llvm.extractvalue"(%688) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %697 = "llvm.load"(%691) : (!llvm.ptr) -> i32
      %698 = "llvm.getelementptr"(%696, %697) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %699 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %700 = "llvm.getelementptr"(%698, %699) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%700) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb95(%701 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %702 : !llvm.ptr):
      %703 = "mid.invariant"(%702) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %704 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb96] : () -> ()
    ^bb96:
      %705 = "llvm.mlir.constant"() <{"value" = 50 : i32}> : () -> i32
      "llvm.store"(%705, %704) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb97] : () -> ()
    ^bb97:
      %706 = "llvm.extractvalue"(%701) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %707 = "llvm.load"(%704) : (!llvm.ptr) -> i32
      %708 = "llvm.getelementptr"(%706, %707) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %709 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %710 = "llvm.getelementptr"(%708, %709) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%710) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb98(%711 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %712 : !llvm.ptr):
      %713 = "mid.invariant"(%712) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %714 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb99] : () -> ()
    ^bb100:
      %715 = "llvm.mlir.constant"() <{"value" = 51 : i32}> : () -> i32
      "llvm.store"(%715, %714) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb101] : () -> ()
    ^bb99:
      %716 = "llvm.getelementptr"(%712) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %717 = "mid.checkflag"(%716) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %718 = "llvm.load"(%717) : (!hi.bool) -> i1
      "cf.cond_br"(%718) [^bb100, ^bb100] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb101:
      %719 = "llvm.extractvalue"(%711) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %720 = "llvm.load"(%714) : (!llvm.ptr) -> i32
      %721 = "llvm.getelementptr"(%719, %720) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %722 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %723 = "llvm.getelementptr"(%721, %722) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%723) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb102(%724 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %725 : !llvm.ptr):
      %726 = "mid.invariant"(%725) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %727 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb103] : () -> ()
    ^bb104:
      %728 = "llvm.mlir.constant"() <{"value" = 52 : i32}> : () -> i32
      "llvm.store"(%728, %727) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb105] : () -> ()
    ^bb103:
      %729 = "llvm.getelementptr"(%725) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %730 = "mid.checkflag"(%729) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %731 = "llvm.load"(%730) : (!hi.bool) -> i1
      "cf.cond_br"(%731) [^bb104, ^bb104] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb105:
      %732 = "llvm.extractvalue"(%724) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %733 = "llvm.load"(%727) : (!llvm.ptr) -> i32
      %734 = "llvm.getelementptr"(%732, %733) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %735 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %736 = "llvm.getelementptr"(%734, %735) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%736) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb106(%737 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %738 : !llvm.ptr):
      %739 = "mid.invariant"(%738) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %740 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb107] : () -> ()
    ^bb108:
      %741 = "llvm.mlir.constant"() <{"value" = 53 : i32}> : () -> i32
      "llvm.store"(%741, %740) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb109] : () -> ()
    ^bb107:
      %742 = "llvm.getelementptr"(%738) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %743 = "mid.checkflag"(%742) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %744 = "llvm.load"(%743) : (!hi.bool) -> i1
      "cf.cond_br"(%744) [^bb108, ^bb108] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb109:
      %745 = "llvm.extractvalue"(%737) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %746 = "llvm.load"(%740) : (!llvm.ptr) -> i32
      %747 = "llvm.getelementptr"(%745, %746) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %748 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %749 = "llvm.getelementptr"(%747, %748) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%749) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb110(%750 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %751 : !llvm.ptr):
      %752 = "mid.invariant"(%751) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %753 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb111] : () -> ()
    ^bb112:
      %754 = "llvm.mlir.constant"() <{"value" = 54 : i32}> : () -> i32
      "llvm.store"(%754, %753) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb113] : () -> ()
    ^bb111:
      %755 = "llvm.getelementptr"(%751) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %756 = "mid.checkflag"(%755) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %757 = "llvm.load"(%756) : (!hi.bool) -> i1
      "cf.cond_br"(%757) [^bb112, ^bb112] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb113:
      %758 = "llvm.extractvalue"(%750) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %759 = "llvm.load"(%753) : (!llvm.ptr) -> i32
      %760 = "llvm.getelementptr"(%758, %759) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %761 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %762 = "llvm.getelementptr"(%760, %761) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%762) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb114(%763 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %764 : !llvm.ptr):
      %765 = "mid.invariant"(%764) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %766 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb115] : () -> ()
    ^bb116:
      %767 = "llvm.mlir.constant"() <{"value" = 55 : i32}> : () -> i32
      "llvm.store"(%767, %766) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb117] : () -> ()
    ^bb115:
      %768 = "llvm.getelementptr"(%764) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %769 = "mid.checkflag"(%768) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %770 = "llvm.load"(%769) : (!hi.bool) -> i1
      "cf.cond_br"(%770) [^bb116, ^bb116] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb117:
      %771 = "llvm.extractvalue"(%763) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %772 = "llvm.load"(%766) : (!llvm.ptr) -> i32
      %773 = "llvm.getelementptr"(%771, %772) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %774 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %775 = "llvm.getelementptr"(%773, %774) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%775) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb118(%776 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %777 : !llvm.ptr):
      %778 = "mid.invariant"(%777) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %779 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb119] : () -> ()
    ^bb120:
      %780 = "llvm.mlir.constant"() <{"value" = 56 : i32}> : () -> i32
      "llvm.store"(%780, %779) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb121] : () -> ()
    ^bb119:
      %781 = "llvm.getelementptr"(%777) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %782 = "mid.checkflag"(%781) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %783 = "llvm.load"(%782) : (!hi.bool) -> i1
      "cf.cond_br"(%783) [^bb120, ^bb120] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb121:
      %784 = "llvm.extractvalue"(%776) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %785 = "llvm.load"(%779) : (!llvm.ptr) -> i32
      %786 = "llvm.getelementptr"(%784, %785) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %787 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %788 = "llvm.getelementptr"(%786, %787) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%788) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb122(%789 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %790 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %791 : !llvm.ptr):
      %792 = "mid.wrap"(%789) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %793 = "hi.cast"(%792) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %794 = "hi.cast"(%793) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%794) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "String_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb123(%795 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %796 : !llvm.ptr):
      %797 = "mid.invariant"(%796) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %798 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb124] : () -> ()
    ^bb124:
      %799 = "llvm.mlir.constant"() <{"value" = 57 : i32}> : () -> i32
      "llvm.store"(%799, %798) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb125] : () -> ()
    ^bb125:
      %800 = "llvm.extractvalue"(%795) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %801 = "llvm.load"(%798) : (!llvm.ptr) -> i32
      %802 = "llvm.getelementptr"(%800, %801) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<85 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %803 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %804 = "llvm.getelementptr"(%802, %803) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%804) : (!llvm.ptr) -> ()
    }) {"func_name" = "String_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Character", "types" = [i8]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Character_getter_byte", "types" = [i8], "offset" = 0 : i64, "original_type" = i8, "specialized_name" = "i8_typ", "parameterization" = "_parameterization_i8"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Character_setter_byte", "types" = [i8], "offset" = 0 : i64, "original_type" = i8, "specialized_name" = "i8_typ", "parameterization" = "_parameterization_i8"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Character_field_byte", "getter_name" = "Character_getter_byte", "setter_name" = "Character_setter_byte"} : () -> ()
    "mid.func"() ({
    ^bb126(%805 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %806 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %807 : !llvm.ptr, %808 : i8):
      %809 = "mid.wrap"(%805) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Character">
      %810 = "hi.cast"(%809) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!hi.fatptr<"Character">) -> !hi.fatptr<"Character">
      %811 = "mid.wrap"(%808) : (i8) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %812 = "hi.cast"(%811) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %813 = "hi.cast"(%812) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      "mid.set_field"(%810, %813) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i8} : (!hi.fatptr<"Character">, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Character_init_bytei8", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb127(%814 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %815 : !llvm.ptr):
      %816 = "mid.invariant"(%815) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %817 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb128] : () -> ()
    ^bb129:
      %818 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
      "llvm.store"(%818, %817) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb130] : () -> ()
    ^bb128:
      %819 = "llvm.getelementptr"(%815) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %820 = "mid.checkflag"(%819) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !hi.bool
      %821 = "llvm.load"(%820) : (!hi.bool) -> i1
      "cf.cond_br"(%821) [^bb129, ^bb129] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb130:
      %822 = "llvm.extractvalue"(%814) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %823 = "llvm.load"(%817) : (!llvm.ptr) -> i32
      %824 = "llvm.getelementptr"(%822, %823) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %825 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %826 = "llvm.getelementptr"(%824, %825) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%826) : (!llvm.ptr) -> ()
    }) {"func_name" = "Character_B_init_bytei8", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb131(%827 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %828 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %829 : !llvm.ptr):
      %830 = "mid.wrap"(%827) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Character">
      %831 = "hi.cast"(%830) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!hi.fatptr<"Character">) -> !hi.fatptr<"Character">
      %832 = "mid.get_field"(%831) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i8} : (!hi.fatptr<"Character">) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %833 = "hi.cast"(%832) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      "mid.return"(%833) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Character_byte_", "result_type" = i8, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb132(%834 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %835 : !llvm.ptr):
      %836 = "mid.invariant"(%835) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %837 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb133] : () -> ()
    ^bb133:
      %838 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%838, %837) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb134] : () -> ()
    ^bb134:
      %839 = "llvm.extractvalue"(%834) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %840 = "llvm.load"(%837) : (!llvm.ptr) -> i32
      %841 = "llvm.getelementptr"(%839, %840) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %842 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %843 = "llvm.getelementptr"(%841, %842) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%843) : (!llvm.ptr) -> ()
    }) {"func_name" = "Character_B_byte_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_StringIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "StringIterator_getter_str", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "StringIterator_setter_str", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "StringIterator_field_str", "getter_name" = "StringIterator_getter_str", "setter_name" = "StringIterator_setter_str"} : () -> ()
    "mid.getter_def"() {"meth_name" = "StringIterator_getter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "StringIterator_setter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "StringIterator_field_index", "getter_name" = "StringIterator_getter_index", "setter_name" = "StringIterator_setter_index"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "StringIterator_field_StringIterator_0", "id_hierarchy" = ["Character"], "name_hierarchy" = ["Character"]} : () -> ()
    "mid.func"() ({
    ^bb135(%844 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %845 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %846 : !llvm.ptr, %847 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %848 = "mid.wrap"(%844) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"StringIterator">
      %849 = "hi.cast"(%848) {"from_typ" = !hi.fatptr<"StringIterator">, "to_typ" = !hi.fatptr<"StringIterator">, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"StringIterator">
      %850 = "mid.wrap"(%847) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %851 = "hi.cast"(%850) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %852 = "hi.cast"(%851) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%849, %852) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"StringIterator">, !hi.fatptr<"String">) -> ()
      %853 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %854 = "hi.cast"(%853) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%849, %854) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "StringIterator_init_strString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb136(%855 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %856 : !llvm.ptr):
      %857 = "mid.invariant"(%856) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %858 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb137] : () -> ()
    ^bb138:
      %859 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%859, %858) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb139] : () -> ()
    ^bb137:
      %860 = "llvm.getelementptr"(%856) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %861 = "mid.checkflag"(%860) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %862 = "llvm.load"(%861) : (!hi.bool) -> i1
      "cf.cond_br"(%862) [^bb138, ^bb138] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb139:
      %863 = "llvm.extractvalue"(%855) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %864 = "llvm.load"(%858) : (!llvm.ptr) -> i32
      %865 = "llvm.getelementptr"(%863, %864) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %866 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %867 = "llvm.getelementptr"(%865, %866) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%867) : (!llvm.ptr) -> ()
    }) {"func_name" = "StringIterator_B_init_strString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb140(%868 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %869 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %870 : !llvm.ptr):
      %871 = "mid.wrap"(%868) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"StringIterator">
      %872 = "hi.cast"(%871) {"from_typ" = !hi.fatptr<"StringIterator">, "to_typ" = !hi.fatptr<"StringIterator">, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"StringIterator">
      %873 = "mid.get_field"(%872) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %874 = "mid.get_field"(%872) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"String">
      %875 = "mid.unwrap"(%874) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %876 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %877 = "mid.method_call"(%876, %875) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %878 = "hi.cast"(%877) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %879 = "mid.unwrap"(%873) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %880 = "mid.unwrap"(%878) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %881 = "mid.comparison"(%879, %880) {"op" = "GE"} : (i32, i32) -> i1
      %882 = "mid.wrap"(%881) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %883 = "mid.unwrap"(%882) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%883) ({
        %884 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %885 = "hi.cast"(%884) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.fatptr<"Character">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.fatptr<"Character">, !hi.nil]>
        "mid.return"(%885) : (!hi.union<[!hi.fatptr<"Character">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %886 = "mid.get_field"(%872) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %887 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %888 = "mid.unwrap"(%886) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %889 = "mid.unwrap"(%887) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %890 = "mid.arithmetic"(%888, %889) {"op" = "ADD"} : (i32, i32) -> i32
      %891 = "mid.wrap"(%890) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %892 = "hi.cast"(%891) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%872, %892) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %893 = "mid.get_field"(%872) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %894 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %895 = "mid.unwrap"(%893) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %896 = "mid.unwrap"(%894) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %897 = "mid.arithmetic"(%895, %896) {"op" = "SUB"} : (i32, i32) -> i32
      %898 = "mid.wrap"(%897) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %899 = "hi.cast"(%898) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %900 = "mid.unwrap"(%899) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %901 = "mid.get_field"(%872) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"String">
      %902 = "mid.unwrap"(%901) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %903 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %904 = "mid.parameterizations_array"(%903) : (!llvm.ptr) -> !llvm.ptr
      %905 = "mid.method_call"(%904, %902, %900) {"offset" = 15 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 85 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %906 = "hi.cast"(%905) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %907 = "mid.unwrap"(%906) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i8
      %908 = "mid.new"() {"typ" = !llvm.struct<(i8)>, "class_name" = "Character", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Character">
      %909 = "mid.get_field"(%872) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"StringIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %910 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %911 = "mid.unwrap"(%909) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %912 = "mid.unwrap"(%910) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %913 = "mid.arithmetic"(%911, %912) {"op" = "SUB"} : (i32, i32) -> i32
      %914 = "mid.wrap"(%913) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %915 = "hi.cast"(%914) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %916 = "mid.unwrap"(%915) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %917 = "mid.get_field"(%872) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"StringIterator">) -> !hi.fatptr<"String">
      %918 = "mid.unwrap"(%917) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %919 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %920 = "mid.parameterizations_array"(%919) : (!llvm.ptr) -> !llvm.ptr
      %921 = "mid.method_call"(%920, %918, %916) {"offset" = 15 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 85 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %922 = "hi.cast"(%921) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %923 = "hi.cast"(%922) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %924 = "mid.unwrap"(%923) : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i8
      %925 = "mid.unwrap"(%908) : (!hi.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %926 = "mid.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["i8"]} : () -> !llvm.ptr
      %927 = "mid.parameterizations_array"(%926) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%927, %925, %924) {"offset" = 1 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i8) -> ()
      %928 = "hi.cast"(%908) {"from_typ" = !hi.fatptr<"Character">, "to_typ" = !hi.union<[!hi.fatptr<"Character">, !hi.nil]>, "from_typ_name" = "Character", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Character">) -> !hi.union<[!hi.fatptr<"Character">, !hi.nil]>
      "mid.return"(%928) : (!hi.union<[!hi.fatptr<"Character">, !hi.nil]>) -> ()
    }) {"func_name" = "StringIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb141(%929 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %930 : !llvm.ptr):
      %931 = "mid.invariant"(%930) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %932 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb142] : () -> ()
    ^bb142:
      %933 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%933, %932) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb143] : () -> ()
    ^bb143:
      %934 = "llvm.extractvalue"(%929) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %935 = "llvm.load"(%932) : (!llvm.ptr) -> i32
      %936 = "llvm.getelementptr"(%934, %935) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %937 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %938 = "llvm.getelementptr"(%936, %937) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%938) : (!llvm.ptr) -> ()
    }) {"func_name" = "StringIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Exception", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Exception_getter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Exception_setter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Exception_field_line_number", "getter_name" = "Exception_getter_line_number", "setter_name" = "Exception_setter_line_number"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Exception_getter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Exception_setter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Exception_field_file_name", "getter_name" = "Exception_getter_file_name", "setter_name" = "Exception_setter_file_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Exception_getter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Exception_setter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Exception_field_message", "getter_name" = "Exception_getter_message", "setter_name" = "Exception_setter_message"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Exception_getter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Exception_setter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Exception_field_stacktrace", "getter_name" = "Exception_getter_stacktrace", "setter_name" = "Exception_setter_stacktrace"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Exception_getter_n_frames", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 4 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Exception_setter_n_frames", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 4 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Exception_field_n_frames", "getter_name" = "Exception_getter_n_frames", "setter_name" = "Exception_setter_n_frames"} : () -> ()
    "mid.func"() ({
    ^bb144(%939 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %940 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %941 : !llvm.ptr, %942 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %943 = "mid.wrap"(%939) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %944 = "hi.cast"(%943) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %945 = "mid.wrap"(%942) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %946 = "hi.cast"(%945) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %947 = "hi.cast"(%946) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%944, %947) {"offset" = 2 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
      %948 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %949 = "hi.cast"(%948) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%944, %949) {"offset" = 0 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"Exception">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %950 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %951 = "hi.cast"(%950) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %952 = "mid.create_buffer"(%951) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %953 = "mid.refer"(%952) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %954 = "mid.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
      %955 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%953, %955, %954) {"typ" = !llvm.array<0 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %956 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %957 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %958 = "mid.unwrap"(%953) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %959 = "mid.unwrap"(%956) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %960 = "mid.unwrap"(%957) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %961 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %962 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %963 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %964 = "hi.cast"(%953) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %965 = "mid.unwrap"(%964) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %966 = "hi.cast"(%962) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %967 = "mid.unwrap"(%966) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %968 = "hi.cast"(%963) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %969 = "mid.unwrap"(%968) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %970 = "mid.unwrap"(%961) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %971 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %972 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %973 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %974 = "mid.parameterizations_array"(%971, %972, %973) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%974, %970, %965, %967, %969) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %975 = "hi.cast"(%961) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%944, %975) {"offset" = 1 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
      %976 = "mid.literal"() {"value" = 100 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %977 = "hi.cast"(%976) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %978 = "mid.create_buffer"(%977) {"typ" = i64, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %979 = "hi.cast"(%978) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>
      "mid.set_field"(%944, %979) {"offset" = 3 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Exception">, !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>) -> ()
      %980 = "mid.literal"() {"value" = 100 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %981 = "mid.get_field"(%944) {"offset" = 3 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Exception">) -> !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>
      %982 = "mid.unwrap"(%980) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %983 = "mid.unwrap"(%981) : (!hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %984 = "mid.call"(%982, %983) {"func_name" = "capture_backtrace", "ret_type" = i64} : (i64, !llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %985 = "hi.cast"(%984) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.set_field"(%944, %985) {"offset" = 4 : i64, "vtable_bytes" = 136 : i32, "original_type" = i64} : (!hi.fatptr<"Exception">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Exception_init_messageString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb145(%986 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %987 : !llvm.ptr):
      %988 = "mid.invariant"(%987) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %989 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb146] : () -> ()
    ^bb147:
      %990 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%990, %989) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb148] : () -> ()
    ^bb146:
      %991 = "llvm.getelementptr"(%987) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %992 = "mid.checkflag"(%991) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %993 = "llvm.load"(%992) : (!hi.bool) -> i1
      "cf.cond_br"(%993) [^bb147, ^bb147] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb148:
      %994 = "llvm.extractvalue"(%986) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %995 = "llvm.load"(%989) : (!llvm.ptr) -> i32
      %996 = "llvm.getelementptr"(%994, %995) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %997 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %998 = "llvm.getelementptr"(%996, %997) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%998) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb149(%999 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1000 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1001 : !llvm.ptr):
      %1002 = "mid.wrap"(%999) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %1003 = "hi.cast"(%1002) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %1004 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1005 = "hi.cast"(%1004) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%1003, %1005) {"offset" = 0 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"Exception">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %1006 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1007 = "hi.cast"(%1006) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1008 = "mid.create_buffer"(%1007) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1009 = "mid.refer"(%1008) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1010 = "mid.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "<None>"} : () -> !llvm.ptr
      %1011 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1009, %1011, %1010) {"typ" = !llvm.array<6 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1012 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1013 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1014 = "mid.unwrap"(%1009) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1015 = "mid.unwrap"(%1012) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1016 = "mid.unwrap"(%1013) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1017 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1018 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1019 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1020 = "hi.cast"(%1009) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1021 = "mid.unwrap"(%1020) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1022 = "hi.cast"(%1018) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1023 = "mid.unwrap"(%1022) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1024 = "hi.cast"(%1019) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1025 = "mid.unwrap"(%1024) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1026 = "mid.unwrap"(%1017) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1027 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1028 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1029 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1030 = "mid.parameterizations_array"(%1027, %1028, %1029) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1030, %1026, %1021, %1023, %1025) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1031 = "hi.cast"(%1017) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%1003, %1031) {"offset" = 2 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
      %1032 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1033 = "hi.cast"(%1032) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1034 = "mid.create_buffer"(%1033) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1035 = "mid.refer"(%1034) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1036 = "mid.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
      %1037 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1035, %1037, %1036) {"typ" = !llvm.array<0 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1038 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1039 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1040 = "mid.unwrap"(%1035) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1041 = "mid.unwrap"(%1038) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1042 = "mid.unwrap"(%1039) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1043 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1044 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1045 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1046 = "hi.cast"(%1035) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1047 = "mid.unwrap"(%1046) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1048 = "hi.cast"(%1044) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1049 = "mid.unwrap"(%1048) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1050 = "hi.cast"(%1045) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1051 = "mid.unwrap"(%1050) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1052 = "mid.unwrap"(%1043) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1053 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1054 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1055 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1056 = "mid.parameterizations_array"(%1053, %1054, %1055) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1056, %1052, %1047, %1049, %1051) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1057 = "hi.cast"(%1043) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%1003, %1057) {"offset" = 1 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
      %1058 = "mid.literal"() {"value" = 100 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1059 = "hi.cast"(%1058) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1060 = "mid.create_buffer"(%1059) {"typ" = i64, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1061 = "hi.cast"(%1060) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>
      "mid.set_field"(%1003, %1061) {"offset" = 3 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Exception">, !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>) -> ()
      %1062 = "mid.literal"() {"value" = 100 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1063 = "mid.get_field"(%1003) {"offset" = 3 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Exception">) -> !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>
      %1064 = "mid.unwrap"(%1062) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1065 = "mid.unwrap"(%1063) : (!hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1066 = "mid.call"(%1064, %1065) {"func_name" = "capture_backtrace", "ret_type" = i64} : (i64, !llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1067 = "hi.cast"(%1066) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.set_field"(%1003, %1067) {"offset" = 4 : i64, "vtable_bytes" = 136 : i32, "original_type" = i64} : (!hi.fatptr<"Exception">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Exception_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb150(%1068 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1069 : !llvm.ptr):
      %1070 = "mid.invariant"(%1069) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1071 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb151] : () -> ()
    ^bb151:
      %1072 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%1072, %1071) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb152] : () -> ()
    ^bb152:
      %1073 = "llvm.extractvalue"(%1068) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1074 = "llvm.load"(%1071) : (!llvm.ptr) -> i32
      %1075 = "llvm.getelementptr"(%1073, %1074) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1076 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1077 = "llvm.getelementptr"(%1075, %1076) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1077) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb153(%1078 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1079 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1080 : !llvm.ptr, %1081 : i32, %1082 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1083 = "mid.wrap"(%1078) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %1084 = "hi.cast"(%1083) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %1085 = "mid.wrap"(%1081) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1086 = "hi.cast"(%1085) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1087 = "hi.cast"(%1086) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%1084, %1087) {"offset" = 0 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"Exception">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %1088 = "mid.wrap"(%1082) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1089 = "hi.cast"(%1088) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1090 = "hi.cast"(%1089) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%1084, %1090) {"offset" = 1 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Exception">, !hi.fatptr<"String">) -> ()
    }) {"func_name" = "Exception_set_info_line_numberi32_file_nameString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb154(%1091 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1092 : !llvm.ptr):
      %1093 = "mid.invariant"(%1092) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1094 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb155] : () -> ()
    ^bb156:
      %1095 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%1095, %1094) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb157] : () -> ()
    ^bb158:
      %1096 = "llvm.getelementptr"(%1092) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1097 = "mid.checkflag"(%1096) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1098 = "llvm.load"(%1097) : (!hi.bool) -> i1
      "cf.cond_br"(%1098) [^bb156, ^bb156] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb155:
      %1099 = "llvm.getelementptr"(%1092) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1100 = "mid.checkflag"(%1099) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1101 = "llvm.load"(%1100) : (!hi.bool) -> i1
      "cf.cond_br"(%1101) [^bb158, ^bb158] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb157:
      %1102 = "llvm.extractvalue"(%1091) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1103 = "llvm.load"(%1094) : (!llvm.ptr) -> i32
      %1104 = "llvm.getelementptr"(%1102, %1103) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1105 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1106 = "llvm.getelementptr"(%1104, %1105) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1106) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_set_info_line_numberi32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb159(%1107 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1108 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1109 : !llvm.ptr):
      %1110 = "mid.wrap"(%1107) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %1111 = "hi.cast"(%1110) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %1112 = "mid.get_field"(%1111) {"offset" = 3 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Exception">) -> !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>
      %1113 = "mid.get_field"(%1111) {"offset" = 4 : i64, "vtable_bytes" = 136 : i32, "original_type" = i64} : (!hi.fatptr<"Exception">) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1114 = "mid.unwrap"(%1112) : (!hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1115 = "mid.unwrap"(%1113) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      "mid.call"(%1114, %1115) {"func_name" = "print_backtrace", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr)>, i64) -> ()
    }) {"func_name" = "Exception_print_stacktrace_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb160(%1116 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1117 : !llvm.ptr):
      %1118 = "mid.invariant"(%1117) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1119 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb161] : () -> ()
    ^bb161:
      %1120 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%1120, %1119) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb162] : () -> ()
    ^bb162:
      %1121 = "llvm.extractvalue"(%1116) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1122 = "llvm.load"(%1119) : (!llvm.ptr) -> i32
      %1123 = "llvm.getelementptr"(%1121, %1122) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1124 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1125 = "llvm.getelementptr"(%1123, %1124) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1125) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_print_stacktrace_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb163(%1126 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1127 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1128 : !llvm.ptr):
      %1129 = "mid.wrap"(%1126) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %1130 = "hi.cast"(%1129) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %1131 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1132 = "hi.cast"(%1131) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1133 = "mid.create_buffer"(%1132) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1134 = "mid.refer"(%1133) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1135 = "mid.literal"() {"typ" = !llvm.array<9 x i8>, "value" = "---------"} : () -> !llvm.ptr
      %1136 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1134, %1136, %1135) {"typ" = !llvm.array<9 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1137 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1138 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1139 = "mid.unwrap"(%1134) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1140 = "mid.unwrap"(%1137) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1141 = "mid.unwrap"(%1138) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1142 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1143 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1144 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1145 = "hi.cast"(%1134) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1146 = "mid.unwrap"(%1145) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1147 = "hi.cast"(%1143) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1148 = "mid.unwrap"(%1147) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1149 = "hi.cast"(%1144) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1150 = "mid.unwrap"(%1149) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1151 = "mid.unwrap"(%1142) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1152 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1153 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1154 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1155 = "mid.parameterizations_array"(%1152, %1153, %1154) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1155, %1151, %1146, %1148, %1150) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1156 = "mid.unwrap"(%1142) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1157 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1158 = "mid.method_call"(%1157, %1156) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1159 = "hi.cast"(%1158) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1160 = "mid.print"(%1159) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1161 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1162 = "hi.cast"(%1161) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1163 = "mid.create_buffer"(%1162) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1164 = "mid.refer"(%1163) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1165 = "mid.literal"() {"typ" = !llvm.array<26 x i8>, "value" = "Exception thrown from file"} : () -> !llvm.ptr
      %1166 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1164, %1166, %1165) {"typ" = !llvm.array<26 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1167 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1168 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1169 = "mid.unwrap"(%1164) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1170 = "mid.unwrap"(%1167) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1171 = "mid.unwrap"(%1168) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1172 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1173 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1174 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1175 = "hi.cast"(%1164) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1176 = "mid.unwrap"(%1175) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1177 = "hi.cast"(%1173) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1178 = "mid.unwrap"(%1177) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1179 = "hi.cast"(%1174) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1180 = "mid.unwrap"(%1179) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1181 = "mid.unwrap"(%1172) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1182 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1183 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1184 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1185 = "mid.parameterizations_array"(%1182, %1183, %1184) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1185, %1181, %1176, %1178, %1180) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1186 = "mid.unwrap"(%1172) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1187 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1188 = "mid.method_call"(%1187, %1186) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1189 = "hi.cast"(%1188) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1190 = "mid.print"(%1189) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1191 = "mid.get_field"(%1130) {"offset" = 1 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"String">
      %1192 = "mid.unwrap"(%1191) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1193 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1194 = "mid.method_call"(%1193, %1192) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1195 = "hi.cast"(%1194) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1196 = "mid.print"(%1195) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1197 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1198 = "hi.cast"(%1197) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1199 = "mid.create_buffer"(%1198) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1200 = "mid.refer"(%1199) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1201 = "mid.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "At line"} : () -> !llvm.ptr
      %1202 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1200, %1202, %1201) {"typ" = !llvm.array<7 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1203 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1204 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1205 = "mid.unwrap"(%1200) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1206 = "mid.unwrap"(%1203) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1207 = "mid.unwrap"(%1204) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1208 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1209 = "mid.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1210 = "mid.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1211 = "hi.cast"(%1200) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1212 = "mid.unwrap"(%1211) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1213 = "hi.cast"(%1209) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1214 = "mid.unwrap"(%1213) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1215 = "hi.cast"(%1210) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1216 = "mid.unwrap"(%1215) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1217 = "mid.unwrap"(%1208) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1218 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1219 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1220 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1221 = "mid.parameterizations_array"(%1218, %1219, %1220) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1221, %1217, %1212, %1214, %1216) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1222 = "mid.unwrap"(%1208) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1223 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1224 = "mid.method_call"(%1223, %1222) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1225 = "hi.cast"(%1224) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1226 = "mid.print"(%1225) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1227 = "mid.get_field"(%1130) {"offset" = 0 : i64, "vtable_bytes" = 136 : i32, "original_type" = i32} : (!hi.fatptr<"Exception">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1228 = "mid.print"(%1227) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1229 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1230 = "hi.cast"(%1229) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1231 = "mid.create_buffer"(%1230) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1232 = "mid.refer"(%1231) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1233 = "mid.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "With message"} : () -> !llvm.ptr
      %1234 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1232, %1234, %1233) {"typ" = !llvm.array<12 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1235 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1236 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1237 = "mid.unwrap"(%1232) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1238 = "mid.unwrap"(%1235) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1239 = "mid.unwrap"(%1236) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1240 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1241 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1242 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1243 = "hi.cast"(%1232) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1244 = "mid.unwrap"(%1243) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1245 = "hi.cast"(%1241) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1246 = "mid.unwrap"(%1245) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1247 = "hi.cast"(%1242) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1248 = "mid.unwrap"(%1247) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1249 = "mid.unwrap"(%1240) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1250 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1251 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1252 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1253 = "mid.parameterizations_array"(%1250, %1251, %1252) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1253, %1249, %1244, %1246, %1248) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1254 = "mid.unwrap"(%1240) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1255 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1256 = "mid.method_call"(%1255, %1254) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1257 = "hi.cast"(%1256) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1258 = "mid.print"(%1257) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1259 = "mid.unwrap"(%1130) : (!hi.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1260 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%1260, %1259) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 17 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1261 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1262 = "hi.cast"(%1261) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1263 = "mid.create_buffer"(%1262) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1264 = "mid.refer"(%1263) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1265 = "mid.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "Stack trace:"} : () -> !llvm.ptr
      %1266 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1264, %1266, %1265) {"typ" = !llvm.array<12 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1267 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1268 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1269 = "mid.unwrap"(%1264) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1270 = "mid.unwrap"(%1267) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1271 = "mid.unwrap"(%1268) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1272 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1273 = "mid.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1274 = "mid.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1275 = "hi.cast"(%1264) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1276 = "mid.unwrap"(%1275) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1277 = "hi.cast"(%1273) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1278 = "mid.unwrap"(%1277) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1279 = "hi.cast"(%1274) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1280 = "mid.unwrap"(%1279) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1281 = "mid.unwrap"(%1272) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1282 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1283 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1284 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1285 = "mid.parameterizations_array"(%1282, %1283, %1284) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1285, %1281, %1276, %1278, %1280) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1286 = "mid.unwrap"(%1272) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1287 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1288 = "mid.method_call"(%1287, %1286) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1289 = "hi.cast"(%1288) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1290 = "mid.print"(%1289) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1291 = "mid.unwrap"(%1130) : (!hi.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1292 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%1292, %1291) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 17 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1293 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1294 = "hi.cast"(%1293) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1295 = "mid.create_buffer"(%1294) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1296 = "mid.refer"(%1295) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1297 = "mid.literal"() {"typ" = !llvm.array<9 x i8>, "value" = "---------"} : () -> !llvm.ptr
      %1298 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1296, %1298, %1297) {"typ" = !llvm.array<9 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1299 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1300 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1301 = "mid.unwrap"(%1296) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1302 = "mid.unwrap"(%1299) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1303 = "mid.unwrap"(%1300) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1304 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1305 = "mid.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1306 = "mid.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1307 = "hi.cast"(%1296) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1308 = "mid.unwrap"(%1307) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1309 = "hi.cast"(%1305) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1310 = "mid.unwrap"(%1309) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1311 = "hi.cast"(%1306) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1312 = "mid.unwrap"(%1311) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1313 = "mid.unwrap"(%1304) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1314 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1315 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1316 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1317 = "mid.parameterizations_array"(%1314, %1315, %1316) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1317, %1313, %1308, %1310, %1312) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1318 = "mid.unwrap"(%1304) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1319 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1320 = "mid.method_call"(%1319, %1318) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1321 = "hi.cast"(%1320) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1322 = "mid.print"(%1321) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
    }) {"func_name" = "Exception_report_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb164(%1323 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1324 : !llvm.ptr):
      %1325 = "mid.invariant"(%1324) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1326 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb165] : () -> ()
    ^bb165:
      %1327 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%1327, %1326) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb166] : () -> ()
    ^bb166:
      %1328 = "llvm.extractvalue"(%1323) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1329 = "llvm.load"(%1326) : (!llvm.ptr) -> i32
      %1330 = "llvm.getelementptr"(%1328, %1329) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1331 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1332 = "llvm.getelementptr"(%1330, %1331) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1332) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb167(%1333 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1334 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1335 : !llvm.ptr):
      %1336 = "mid.wrap"(%1333) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Exception">
      %1337 = "hi.cast"(%1336) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"Exception">
      %1338 = "mid.get_field"(%1337) {"offset" = 2 : i64, "vtable_bytes" = 136 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"Exception">) -> !hi.fatptr<"String">
      %1339 = "mid.unwrap"(%1338) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1340 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1341 = "mid.method_call"(%1340, %1339) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1342 = "hi.cast"(%1341) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1343 = "mid.print"(%1342) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
    }) {"func_name" = "Exception_print_message_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb168(%1344 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1345 : !llvm.ptr):
      %1346 = "mid.invariant"(%1345) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1347 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb169] : () -> ()
    ^bb169:
      %1348 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%1348, %1347) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb170] : () -> ()
    ^bb170:
      %1349 = "llvm.extractvalue"(%1344) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1350 = "llvm.load"(%1347) : (!llvm.ptr) -> i32
      %1351 = "llvm.getelementptr"(%1349, %1350) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1352 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1353 = "llvm.getelementptr"(%1351, %1352) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1353) : (!llvm.ptr) -> ()
    }) {"func_name" = "Exception_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_OutOfBounds", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64]} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_details", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Nil_or_OutOfBoundsDetails"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_details", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Nil_or_OutOfBoundsDetails"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_details", "getter_name" = "OutOfBounds_getter_details", "setter_name" = "OutOfBounds_setter_details"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_line_number", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_line_number", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_line_number", "getter_name" = "OutOfBounds_getter_line_number", "setter_name" = "OutOfBounds_setter_line_number"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_file_name", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_file_name", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_file_name", "getter_name" = "OutOfBounds_getter_file_name", "setter_name" = "OutOfBounds_setter_file_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_message", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_message", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_message", "getter_name" = "OutOfBounds_getter_message", "setter_name" = "OutOfBounds_setter_message"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_stacktrace", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_stacktrace", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_stacktrace", "getter_name" = "OutOfBounds_getter_stacktrace", "setter_name" = "OutOfBounds_setter_stacktrace"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBounds_getter_n_frames", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 5 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBounds_setter_n_frames", "types" = [!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 5 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBounds_field_n_frames", "getter_name" = "OutOfBounds_getter_n_frames", "setter_name" = "OutOfBounds_setter_n_frames"} : () -> ()
    "mid.func"() ({
    ^bb171(%1354 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1355 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1356 : !llvm.ptr, %1357 : i32, %1358 : i32):
      %1359 = "mid.wrap"(%1354) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"OutOfBounds">
      %1360 = "hi.cast"(%1359) {"from_typ" = !hi.fatptr<"OutOfBounds">, "to_typ" = !hi.fatptr<"OutOfBounds">, "from_typ_name" = "OutOfBounds", "to_typ_name" = "OutOfBounds"} : (!hi.fatptr<"OutOfBounds">) -> !hi.fatptr<"OutOfBounds">
      %1361 = "mid.wrap"(%1357) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1362 = "hi.cast"(%1361) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1363 = "mid.wrap"(%1358) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1364 = "hi.cast"(%1363) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1365 = "mid.unwrap"(%1362) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1366 = "mid.unwrap"(%1364) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1367 = "mid.new"() {"typ" = !llvm.struct<(i32, i32)>, "class_name" = "OutOfBoundsDetails", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"OutOfBoundsDetails">
      %1368 = "hi.cast"(%1362) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1369 = "mid.unwrap"(%1368) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1370 = "hi.cast"(%1364) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1371 = "mid.unwrap"(%1370) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1372 = "mid.unwrap"(%1367) : (!hi.fatptr<"OutOfBoundsDetails">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1373 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1374 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1375 = "mid.parameterizations_array"(%1373, %1374) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1375, %1372, %1369, %1371) {"offset" = 2 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
      %1376 = "hi.cast"(%1367) {"from_typ" = !hi.fatptr<"OutOfBoundsDetails">, "to_typ" = !hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "union_typ"} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>
      "mid.set_field"(%1360, %1376) {"offset" = 0 : i64, "vtable_bytes" = 296 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"OutOfBounds">, !hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>) -> ()
      %1377 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1378 = "hi.cast"(%1377) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%1360, %1378) {"offset" = 1 : i64, "vtable_bytes" = 296 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBounds">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %1379 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1380 = "hi.cast"(%1379) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1381 = "mid.create_buffer"(%1380) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1382 = "mid.refer"(%1381) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1383 = "mid.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
      %1384 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1382, %1384, %1383) {"typ" = !llvm.array<0 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1385 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1386 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1387 = "mid.unwrap"(%1382) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1388 = "mid.unwrap"(%1385) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1389 = "mid.unwrap"(%1386) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1390 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1391 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1392 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1393 = "hi.cast"(%1382) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1394 = "mid.unwrap"(%1393) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1395 = "hi.cast"(%1391) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1396 = "mid.unwrap"(%1395) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1397 = "hi.cast"(%1392) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1398 = "mid.unwrap"(%1397) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1399 = "mid.unwrap"(%1390) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1400 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1401 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1402 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1403 = "mid.parameterizations_array"(%1400, %1401, %1402) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1403, %1399, %1394, %1396, %1398) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1404 = "hi.cast"(%1390) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%1360, %1404) {"offset" = 2 : i64, "vtable_bytes" = 296 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"OutOfBounds">, !hi.fatptr<"String">) -> ()
      %1405 = "mid.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1406 = "hi.cast"(%1405) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1407 = "mid.create_buffer"(%1406) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1408 = "mid.refer"(%1407) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1409 = "mid.literal"() {"typ" = !llvm.array<65 x i8>, "value" = "An out-of-bounds error occurred while indexing into a collection."} : () -> !llvm.ptr
      %1410 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1408, %1410, %1409) {"typ" = !llvm.array<65 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1411 = "mid.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1412 = "mid.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1413 = "mid.unwrap"(%1408) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1414 = "mid.unwrap"(%1411) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1415 = "mid.unwrap"(%1412) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1416 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1417 = "mid.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1418 = "mid.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1419 = "hi.cast"(%1408) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1420 = "mid.unwrap"(%1419) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1421 = "hi.cast"(%1417) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1422 = "mid.unwrap"(%1421) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1423 = "hi.cast"(%1418) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1424 = "mid.unwrap"(%1423) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1425 = "mid.unwrap"(%1416) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1426 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1427 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1428 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1429 = "mid.parameterizations_array"(%1426, %1427, %1428) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1429, %1425, %1420, %1422, %1424) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1430 = "hi.cast"(%1416) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%1360, %1430) {"offset" = 3 : i64, "vtable_bytes" = 296 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"OutOfBounds">, !hi.fatptr<"String">) -> ()
      %1431 = "mid.literal"() {"value" = 100 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1432 = "hi.cast"(%1431) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1433 = "mid.create_buffer"(%1432) {"typ" = i64, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1434 = "hi.cast"(%1433) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>
      "mid.set_field"(%1360, %1434) {"offset" = 4 : i64, "vtable_bytes" = 296 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"OutOfBounds">, !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>) -> ()
      %1435 = "mid.literal"() {"value" = 100 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1436 = "mid.get_field"(%1360) {"offset" = 4 : i64, "vtable_bytes" = 296 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"OutOfBounds">) -> !hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>
      %1437 = "mid.unwrap"(%1435) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %1438 = "mid.unwrap"(%1436) : (!hi.buffer<!hi.int<#builtin.int<64>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1439 = "mid.call"(%1437, %1438) {"func_name" = "capture_backtrace", "ret_type" = i64} : (i64, !llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1440 = "hi.cast"(%1439) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.set_field"(%1360, %1440) {"offset" = 5 : i64, "vtable_bytes" = 296 : i32, "original_type" = i64} : (!hi.fatptr<"OutOfBounds">, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "OutOfBounds_init_boundsi32_indexi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb172(%1441 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1442 : !llvm.ptr):
      %1443 = "mid.invariant"(%1442) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1444 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb173] : () -> ()
    ^bb174:
      %1445 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%1445, %1444) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb175] : () -> ()
    ^bb176:
      %1446 = "llvm.getelementptr"(%1442) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1447 = "mid.checkflag"(%1446) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1448 = "llvm.load"(%1447) : (!hi.bool) -> i1
      "cf.cond_br"(%1448) [^bb174, ^bb174] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb173:
      %1449 = "llvm.getelementptr"(%1442) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1450 = "mid.checkflag"(%1449) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1451 = "llvm.load"(%1450) : (!hi.bool) -> i1
      "cf.cond_br"(%1451) [^bb176, ^bb176] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb175:
      %1452 = "llvm.extractvalue"(%1441) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1453 = "llvm.load"(%1444) : (!llvm.ptr) -> i32
      %1454 = "llvm.getelementptr"(%1452, %1453) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<37 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1455 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1456 = "llvm.getelementptr"(%1454, %1455) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1456) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_init_boundsi32_indexi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb177(%1457 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1458 : !llvm.ptr):
      %1459 = "mid.invariant"(%1458) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1460 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb178] : () -> ()
    ^bb179:
      %1461 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%1461, %1460) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb180] : () -> ()
    ^bb178:
      %1462 = "llvm.getelementptr"(%1458) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1463 = "mid.checkflag"(%1462) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1464 = "llvm.load"(%1463) : (!hi.bool) -> i1
      "cf.cond_br"(%1464) [^bb179, ^bb179] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb180:
      %1465 = "llvm.extractvalue"(%1457) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1466 = "llvm.load"(%1460) : (!llvm.ptr) -> i32
      %1467 = "llvm.getelementptr"(%1465, %1466) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<37 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1468 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1469 = "llvm.getelementptr"(%1467, %1468) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1469) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb181(%1470 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1471 : !llvm.ptr):
      %1472 = "mid.invariant"(%1471) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1473 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb182] : () -> ()
    ^bb182:
      %1474 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%1474, %1473) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb183] : () -> ()
    ^bb183:
      %1475 = "llvm.extractvalue"(%1470) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1476 = "llvm.load"(%1473) : (!llvm.ptr) -> i32
      %1477 = "llvm.getelementptr"(%1475, %1476) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<37 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1478 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1479 = "llvm.getelementptr"(%1477, %1478) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1479) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb184(%1480 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1481 : !llvm.ptr):
      %1482 = "mid.invariant"(%1481) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1483 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb185] : () -> ()
    ^bb186:
      %1484 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%1484, %1483) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb187] : () -> ()
    ^bb188:
      %1485 = "llvm.getelementptr"(%1481) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1486 = "mid.checkflag"(%1485) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1487 = "llvm.load"(%1486) : (!hi.bool) -> i1
      "cf.cond_br"(%1487) [^bb186, ^bb186] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb185:
      %1488 = "llvm.getelementptr"(%1481) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1489 = "mid.checkflag"(%1488) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1490 = "llvm.load"(%1489) : (!hi.bool) -> i1
      "cf.cond_br"(%1490) [^bb188, ^bb188] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb187:
      %1491 = "llvm.extractvalue"(%1480) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1492 = "llvm.load"(%1483) : (!llvm.ptr) -> i32
      %1493 = "llvm.getelementptr"(%1491, %1492) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<37 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1494 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1495 = "llvm.getelementptr"(%1493, %1494) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1495) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_set_info_line_numberi32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb189(%1496 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1497 : !llvm.ptr):
      %1498 = "mid.invariant"(%1497) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1499 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb190] : () -> ()
    ^bb190:
      %1500 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%1500, %1499) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb191] : () -> ()
    ^bb191:
      %1501 = "llvm.extractvalue"(%1496) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1502 = "llvm.load"(%1499) : (!llvm.ptr) -> i32
      %1503 = "llvm.getelementptr"(%1501, %1502) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<37 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1504 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1505 = "llvm.getelementptr"(%1503, %1504) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1505) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_print_stacktrace_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb192(%1506 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1507 : !llvm.ptr):
      %1508 = "mid.invariant"(%1507) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1509 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb193] : () -> ()
    ^bb193:
      %1510 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%1510, %1509) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb194] : () -> ()
    ^bb194:
      %1511 = "llvm.extractvalue"(%1506) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1512 = "llvm.load"(%1509) : (!llvm.ptr) -> i32
      %1513 = "llvm.getelementptr"(%1511, %1512) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<37 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1514 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1515 = "llvm.getelementptr"(%1513, %1514) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1515) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb195(%1516 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1517 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1518 : !llvm.ptr):
      %1519 = "mid.wrap"(%1516) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"OutOfBounds">
      %1520 = "hi.cast"(%1519) {"from_typ" = !hi.fatptr<"OutOfBounds">, "to_typ" = !hi.fatptr<"OutOfBounds">, "from_typ_name" = "OutOfBounds", "to_typ_name" = "OutOfBounds"} : (!hi.fatptr<"OutOfBounds">) -> !hi.fatptr<"OutOfBounds">
      %1521 = "mid.get_field"(%1520) {"offset" = 3 : i64, "vtable_bytes" = 296 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"OutOfBounds">) -> !hi.fatptr<"String">
      %1522 = "mid.unwrap"(%1521) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1523 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1524 = "mid.method_call"(%1523, %1522) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1525 = "hi.cast"(%1524) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1526 = "mid.print"(%1525) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1527 = "mid.get_field"(%1520) {"offset" = 0 : i64, "vtable_bytes" = 296 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"OutOfBounds">) -> !hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>
      %1528 = "mid.refer"(%1527) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>) -> !hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>
      %1529 = "mid.checkflag"(%1528) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %1530 = "mid.unwrap"(%1529) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %1531 = "hi.cast"(%1528) {"from_typ" = !hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>, "to_typ" = !hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>) -> !hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>
      "mid.if"(%1530) ({
        %1532 = "hi.cast"(%1531) {"from_typ" = !hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>, "to_typ" = !hi.fatptr<"OutOfBoundsDetails">, "from_typ_name" = "union_typ", "to_typ_name" = "OutOfBoundsDetails"} : (!hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>) -> !hi.fatptr<"OutOfBoundsDetails">
        %1533 = "mid.unwrap"(%1532) : (!hi.fatptr<"OutOfBoundsDetails">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1534 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%1534, %1533) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 6 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %1535 = "hi.cast"(%1532) {"from_typ" = !hi.fatptr<"OutOfBoundsDetails">, "to_typ" = !hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "union_typ"} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>
        "mid.assign"(%1531, %1535) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>, !hi.union<[!hi.nil, !hi.fatptr<"OutOfBoundsDetails">]>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "OutOfBounds_print_message_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb196(%1536 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1537 : !llvm.ptr):
      %1538 = "mid.invariant"(%1537) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1539 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb197] : () -> ()
    ^bb197:
      %1540 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%1540, %1539) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb198] : () -> ()
    ^bb198:
      %1541 = "llvm.extractvalue"(%1536) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1542 = "llvm.load"(%1539) : (!llvm.ptr) -> i32
      %1543 = "llvm.getelementptr"(%1541, %1542) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<37 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1544 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1545 = "llvm.getelementptr"(%1543, %1544) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1545) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBounds_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_OutOfBoundsDetails", "types" = [i32, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBoundsDetails_getter_bounds", "types" = [i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBoundsDetails_setter_bounds", "types" = [i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBoundsDetails_field_bounds", "getter_name" = "OutOfBoundsDetails_getter_bounds", "setter_name" = "OutOfBoundsDetails_setter_bounds"} : () -> ()
    "mid.getter_def"() {"meth_name" = "OutOfBoundsDetails_getter_index", "types" = [i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "OutOfBoundsDetails_setter_index", "types" = [i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "OutOfBoundsDetails_field_index", "getter_name" = "OutOfBoundsDetails_getter_index", "setter_name" = "OutOfBoundsDetails_setter_index"} : () -> ()
    "mid.func"() ({
    ^bb199(%1546 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1547 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1548 : !llvm.ptr, %1549 : i32, %1550 : i32):
      %1551 = "mid.wrap"(%1546) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"OutOfBoundsDetails">
      %1552 = "hi.cast"(%1551) {"from_typ" = !hi.fatptr<"OutOfBoundsDetails">, "to_typ" = !hi.fatptr<"OutOfBoundsDetails">, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "OutOfBoundsDetails"} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.fatptr<"OutOfBoundsDetails">
      %1553 = "mid.wrap"(%1549) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1554 = "hi.cast"(%1553) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1555 = "hi.cast"(%1554) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%1552, %1555) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBoundsDetails">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %1556 = "mid.wrap"(%1550) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1557 = "hi.cast"(%1556) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1558 = "hi.cast"(%1557) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%1552, %1558) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBoundsDetails">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "OutOfBoundsDetails_init_boundsi32_indexi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb200(%1559 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1560 : !llvm.ptr):
      %1561 = "mid.invariant"(%1560) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1562 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb201] : () -> ()
    ^bb202:
      %1563 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%1563, %1562) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb203] : () -> ()
    ^bb204:
      %1564 = "llvm.getelementptr"(%1560) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1565 = "mid.checkflag"(%1564) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1566 = "llvm.load"(%1565) : (!hi.bool) -> i1
      "cf.cond_br"(%1566) [^bb202, ^bb202] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb201:
      %1567 = "llvm.getelementptr"(%1560) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1568 = "mid.checkflag"(%1567) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %1569 = "llvm.load"(%1568) : (!hi.bool) -> i1
      "cf.cond_br"(%1569) [^bb204, ^bb204] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb203:
      %1570 = "llvm.extractvalue"(%1559) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1571 = "llvm.load"(%1562) : (!llvm.ptr) -> i32
      %1572 = "llvm.getelementptr"(%1570, %1571) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1573 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1574 = "llvm.getelementptr"(%1572, %1573) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1574) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBoundsDetails_B_init_boundsi32_indexi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb205(%1575 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1576 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1577 : !llvm.ptr):
      %1578 = "mid.wrap"(%1575) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"OutOfBoundsDetails">
      %1579 = "hi.cast"(%1578) {"from_typ" = !hi.fatptr<"OutOfBoundsDetails">, "to_typ" = !hi.fatptr<"OutOfBoundsDetails">, "from_typ_name" = "OutOfBoundsDetails", "to_typ_name" = "OutOfBoundsDetails"} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.fatptr<"OutOfBoundsDetails">
      %1580 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1581 = "hi.cast"(%1580) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1582 = "mid.create_buffer"(%1581) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1583 = "mid.refer"(%1582) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1584 = "mid.literal"() {"typ" = !llvm.array<44 x i8>, "value" = "The size of the collection being indexed was"} : () -> !llvm.ptr
      %1585 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1583, %1585, %1584) {"typ" = !llvm.array<44 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1586 = "mid.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1587 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1588 = "mid.unwrap"(%1583) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1589 = "mid.unwrap"(%1586) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1590 = "mid.unwrap"(%1587) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1591 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1592 = "mid.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1593 = "mid.literal"() {"value" = 45 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1594 = "hi.cast"(%1583) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1595 = "mid.unwrap"(%1594) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1596 = "hi.cast"(%1592) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1597 = "mid.unwrap"(%1596) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1598 = "hi.cast"(%1593) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1599 = "mid.unwrap"(%1598) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1600 = "mid.unwrap"(%1591) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1601 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1602 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1603 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1604 = "mid.parameterizations_array"(%1601, %1602, %1603) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1604, %1600, %1595, %1597, %1599) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1605 = "mid.unwrap"(%1591) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1606 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1607 = "mid.method_call"(%1606, %1605) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1608 = "hi.cast"(%1607) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1609 = "mid.print"(%1608) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1610 = "mid.get_field"(%1579) {"offset" = 0 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1611 = "mid.print"(%1610) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1612 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1613 = "hi.cast"(%1612) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1614 = "mid.create_buffer"(%1613) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1615 = "mid.refer"(%1614) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1616 = "mid.literal"() {"typ" = !llvm.array<25 x i8>, "value" = "The indexing argument was"} : () -> !llvm.ptr
      %1617 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1615, %1617, %1616) {"typ" = !llvm.array<25 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1618 = "mid.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1619 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1620 = "mid.unwrap"(%1615) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1621 = "mid.unwrap"(%1618) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1622 = "mid.unwrap"(%1619) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1623 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1624 = "mid.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1625 = "mid.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1626 = "hi.cast"(%1615) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1627 = "mid.unwrap"(%1626) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1628 = "hi.cast"(%1624) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1629 = "mid.unwrap"(%1628) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1630 = "hi.cast"(%1625) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1631 = "mid.unwrap"(%1630) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1632 = "mid.unwrap"(%1623) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1633 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1634 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1635 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1636 = "mid.parameterizations_array"(%1633, %1634, %1635) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1636, %1632, %1627, %1629, %1631) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1637 = "mid.unwrap"(%1623) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1638 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %1639 = "mid.method_call"(%1638, %1637) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1640 = "hi.cast"(%1639) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1641 = "mid.print"(%1640) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      %1642 = "mid.get_field"(%1579) {"offset" = 1 : i64, "vtable_bytes" = 48 : i32, "original_type" = i32} : (!hi.fatptr<"OutOfBoundsDetails">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1643 = "mid.print"(%1642) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
    }) {"func_name" = "OutOfBoundsDetails_report_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb206(%1644 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1645 : !llvm.ptr):
      %1646 = "mid.invariant"(%1645) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1647 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb207] : () -> ()
    ^bb207:
      %1648 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%1648, %1647) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb208] : () -> ()
    ^bb208:
      %1649 = "llvm.extractvalue"(%1644) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %1650 = "llvm.load"(%1647) : (!llvm.ptr) -> i32
      %1651 = "llvm.getelementptr"(%1649, %1650) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1652 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1653 = "llvm.getelementptr"(%1651, %1652) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1653) : (!llvm.ptr) -> ()
    }) {"func_name" = "OutOfBoundsDetails_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb209(%1654 : !llvm.struct<(!llvm.ptr)>):
      %1655 = "mid.wrap"(%1654) : (!llvm.struct<(!llvm.ptr)>) -> !hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>
      %1656 = "hi.cast"(%1655) {"from_typ" = !hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>, "to_typ" = !hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>, "from_typ_name" = "coroutine_typ", "to_typ_name" = "coroutine_typ"} : (!hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>) -> !hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>
      %1657 = "llvm.load"(%1656) : (!hi.coroutine<[], !hi.any, !hi.fatptr<"Exception">>) -> !llvm.ptr
      %1658 = "mid.coro_get_result"(%1657) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i160)>
      %1659 = "mid.wrap"(%1658) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
      %1660 = "mid.checkflag"(%1659) {"typ_name" = "Exception"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %1661 = "mid.unwrap"(%1660) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %1662 = "hi.cast"(%1659) {"from_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
      "mid.if"(%1661) ({
        %1663 = "hi.cast"(%1662) {"from_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "union_typ", "to_typ_name" = "Exception"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !hi.fatptr<"Exception">
        %1664 = "mid.unwrap"(%1663) : (!hi.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1665 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%1665, %1664) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 17 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %1666 = "hi.cast"(%1663) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Exception">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        "mid.assign"(%1662, %1666) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "report_exception", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "io"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 85 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "IO", "methods" = [@IO_B__Self_print_xi32__Self_print_xRepresentable__Self_print_xi64__Self_print_xCharacter__Self_print_xi8__Self_print_xString__Self_print_xf64__Self_print_xNil__Self_print_xBool, @IO__Self_print_xi32, @IO__Self_print_xRepresentable, @IO__Self_print_xi64, @IO__Self_print_xCharacter, @IO__Self_print_xi8, @IO__Self_print_xString, @IO__Self_print_xf64, @IO__Self_print_xNil, @IO__Self_print_xBool], "hash_tbl" = [@any_typ, @IO, 18446744073709551615 : i64, @Object], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 20 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 5359822646784595218 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_IO", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_IO", "types" = []} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.ptr, %1 : !llvm.struct<(!llvm.ptr, i160)>):
      %2 = "mid.wrap"(%1) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>
      %3 = "hi.cast"(%2) {"from_typ" = !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %4 = "mid.print"(%3) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
    }) {"func_name" = "IO__Self_print_xi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%5 : !llvm.ptr, %6 : !llvm.struct<(!llvm.ptr, i160)>):
      %7 = "mid.wrap"(%6) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>
      %8 = "hi.cast"(%7) {"from_typ" = !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>, "to_typ" = !hi.fatptr<"Representable">, "from_typ_name" = "union_typ", "to_typ_name" = "Representable"} : (!hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>) -> !hi.fatptr<"Representable">
      %9 = "mid.unwrap"(%8) : (!hi.fatptr<"Representable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %10 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %11 = "mid.method_call"(%10, %9) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %12 = "hi.cast"(%11) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %13 = "mid.unwrap"(%12) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %14 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %15 = "mid.method_call"(%14, %13) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %16 = "hi.cast"(%15) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %17 = "mid.print"(%16) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
    }) {"func_name" = "IO__Self_print_xRepresentable", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb2(%18 : !llvm.ptr, %19 : !llvm.struct<(!llvm.ptr, i160)>):
      %20 = "mid.wrap"(%19) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>
      %21 = "hi.cast"(%20) {"from_typ" = !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i64_typ"} : (!hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %22 = "mid.print"(%21) {"typ" = i64} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i32
    }) {"func_name" = "IO__Self_print_xi64", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb3(%23 : !llvm.ptr, %24 : !llvm.struct<(!llvm.ptr, i160)>):
      %25 = "mid.wrap"(%24) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>
      %26 = "hi.cast"(%25) {"from_typ" = !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>, "to_typ" = !hi.fatptr<"Character">, "from_typ_name" = "union_typ", "to_typ_name" = "Character"} : (!hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>) -> !hi.fatptr<"Character">
      %27 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %28 = "hi.cast"(%27) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %29 = "mid.create_buffer"(%28) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %30 = "mid.refer"(%29) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %31 = "mid.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %32 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %33 = "mid.unwrap"(%26) : (!hi.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %34 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %35 = "mid.method_call"(%34, %33) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %36 = "hi.cast"(%35) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %37 = "hi.cast"(%36) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %38 = "hi.cast"(%32) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.buffer_set"(%30, %38, %37) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
      %39 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %40 = "hi.cast"(%31) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %41 = "hi.cast"(%39) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.buffer_set"(%30, %41, %40) {"typ" = i8} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> ()
      %42 = "mid.print"(%30) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
    }) {"func_name" = "IO__Self_print_xCharacter", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb4(%43 : !llvm.ptr, %44 : !llvm.struct<(!llvm.ptr, i160)>):
      %45 = "mid.wrap"(%44) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>
      %46 = "hi.cast"(%45) {"from_typ" = !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i8_typ"} : (!hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %47 = "mid.print"(%46) {"typ" = i8} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> i32
    }) {"func_name" = "IO__Self_print_xi8", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb5(%48 : !llvm.ptr, %49 : !llvm.struct<(!llvm.ptr, i160)>):
      %50 = "mid.wrap"(%49) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>
      %51 = "hi.cast"(%50) {"from_typ" = !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "union_typ", "to_typ_name" = "String"} : (!hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>) -> !hi.fatptr<"String">
      %52 = "mid.unwrap"(%51) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %53 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %54 = "mid.method_call"(%53, %52) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %55 = "hi.cast"(%54) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %56 = "mid.print"(%55) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
    }) {"func_name" = "IO__Self_print_xString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%57 : !llvm.ptr, %58 : !llvm.struct<(!llvm.ptr, i160)>):
      %59 = "mid.wrap"(%58) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>
      %60 = "hi.cast"(%59) {"from_typ" = !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>) -> !hi.float
      %61 = "mid.print"(%60) {"typ" = f64} : (!hi.float) -> i32
    }) {"func_name" = "IO__Self_print_xf64", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb7(%62 : !llvm.ptr, %63 : !llvm.struct<(!llvm.ptr, i160)>):
      %64 = "mid.wrap"(%63) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>
      %65 = "hi.cast"(%64) {"from_typ" = !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>, "to_typ" = !hi.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>) -> !hi.nil
      %66 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %67 = "hi.cast"(%66) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %68 = "mid.create_buffer"(%67) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %69 = "mid.refer"(%68) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %70 = "mid.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "nil"} : () -> !llvm.ptr
      %71 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%69, %71, %70) {"typ" = !llvm.array<3 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %72 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %73 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %74 = "mid.unwrap"(%69) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %75 = "mid.unwrap"(%72) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %76 = "mid.unwrap"(%73) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %77 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %78 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %79 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %80 = "hi.cast"(%69) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %81 = "mid.unwrap"(%80) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %82 = "hi.cast"(%78) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %83 = "mid.unwrap"(%82) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %84 = "hi.cast"(%79) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %85 = "mid.unwrap"(%84) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %86 = "mid.unwrap"(%77) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %87 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %88 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %89 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %90 = "mid.parameterizations_array"(%87, %88, %89) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%90, %86, %81, %83, %85) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %91 = "mid.unwrap"(%77) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %92 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %93 = "mid.method_call"(%92, %91) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %94 = "hi.cast"(%93) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %95 = "mid.print"(%94) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
    }) {"func_name" = "IO__Self_print_xNil", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb8(%96 : !llvm.ptr, %97 : !llvm.struct<(!llvm.ptr, i160)>):
      %98 = "mid.wrap"(%97) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>
      %99 = "hi.cast"(%98) {"from_typ" = !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>, "to_typ" = !hi.bool, "from_typ_name" = "union_typ", "to_typ_name" = "bool_typ"} : (!hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>) -> !hi.bool
      %100 = "mid.unwrap"(%99) : (!hi.bool) -> i1
      "mid.if"(%100) ({
        %101 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %102 = "hi.cast"(%101) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %103 = "mid.create_buffer"(%102) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %104 = "mid.refer"(%103) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %105 = "mid.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "true"} : () -> !llvm.ptr
        %106 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%104, %106, %105) {"typ" = !llvm.array<4 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %107 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %108 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %109 = "mid.unwrap"(%104) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %110 = "mid.unwrap"(%107) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %111 = "mid.unwrap"(%108) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %112 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %113 = "mid.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %114 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %115 = "hi.cast"(%104) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %116 = "mid.unwrap"(%115) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %117 = "hi.cast"(%113) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %118 = "mid.unwrap"(%117) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %119 = "hi.cast"(%114) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %120 = "mid.unwrap"(%119) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %121 = "mid.unwrap"(%112) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %122 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %123 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %124 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %125 = "mid.parameterizations_array"(%122, %123, %124) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%125, %121, %116, %118, %120) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %126 = "mid.unwrap"(%112) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %127 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %128 = "mid.method_call"(%127, %126) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %129 = "hi.cast"(%128) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %130 = "mid.print"(%129) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      }, {
        %131 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %132 = "hi.cast"(%131) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %133 = "mid.create_buffer"(%132) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %134 = "mid.refer"(%133) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %135 = "mid.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "false"} : () -> !llvm.ptr
        %136 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%134, %136, %135) {"typ" = !llvm.array<5 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %137 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %138 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %139 = "mid.unwrap"(%134) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %140 = "mid.unwrap"(%137) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %141 = "mid.unwrap"(%138) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %142 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %143 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %144 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %145 = "hi.cast"(%134) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %146 = "mid.unwrap"(%145) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %147 = "hi.cast"(%143) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %148 = "mid.unwrap"(%147) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %149 = "hi.cast"(%144) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %150 = "mid.unwrap"(%149) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %151 = "mid.unwrap"(%142) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %152 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %153 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %154 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %155 = "mid.parameterizations_array"(%152, %153, %154) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%155, %151, %146, %148, %150) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %156 = "mid.unwrap"(%142) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %157 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %158 = "mid.method_call"(%157, %156) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %159 = "hi.cast"(%158) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %160 = "mid.print"(%159) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> i32
      }) : (i1) -> ()
    }) {"func_name" = "IO__Self_print_xBool", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb9(%161 : !llvm.ptr):
      %162 = "mid.invariant"(%161) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %163 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb10] : () -> ()
    ^bb11:
      %164 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
      "llvm.store"(%164, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb13:
      %165 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%165, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb14:
      %166 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%166, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb15:
      %167 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
      "llvm.store"(%167, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb16:
      %168 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%168, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb17:
      %169 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%169, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb18:
      %170 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%170, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb19:
      %171 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
      "llvm.store"(%171, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb20:
      %172 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
      "llvm.store"(%172, %163) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb12] : () -> ()
    ^bb10:
      %173 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %174 = "mid.checkflag"(%173) {"typ_name" = "nil_typ"} : (!llvm.ptr) -> !hi.bool
      %175 = "llvm.load"(%174) : (!hi.bool) -> i1
      "cf.cond_br"(%175) [^bb11, ^bb21] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb21:
      %176 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %177 = "mid.checkflag"(%176) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %178 = "llvm.load"(%177) : (!hi.bool) -> i1
      "cf.cond_br"(%178) [^bb13, ^bb22] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %179 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %180 = "mid.checkflag"(%179) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %181 = "llvm.load"(%180) : (!hi.bool) -> i1
      "cf.cond_br"(%181) [^bb23, ^bb24] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb23:
      %182 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %183 = "mid.checkflag"(%182) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %184 = "llvm.load"(%183) : (!hi.bool) -> i1
      "cf.cond_br"(%184) [^bb24, ^bb14] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb24:
      %185 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %186 = "mid.checkflag"(%185) {"typ_name" = "i64_typ"} : (!llvm.ptr) -> !hi.bool
      %187 = "llvm.load"(%186) : (!hi.bool) -> i1
      "cf.cond_br"(%187) [^bb15, ^bb25] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb25:
      %188 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %189 = "mid.checkflag"(%188) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %190 = "llvm.load"(%189) : (!hi.bool) -> i1
      "cf.cond_br"(%190) [^bb26, ^bb27] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb26:
      %191 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %192 = "mid.checkflag"(%191) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %193 = "llvm.load"(%192) : (!hi.bool) -> i1
      "cf.cond_br"(%193) [^bb27, ^bb16] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb27:
      %194 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %195 = "mid.checkflag"(%194) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !hi.bool
      %196 = "llvm.load"(%195) : (!hi.bool) -> i1
      "cf.cond_br"(%196) [^bb17, ^bb28] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb28:
      %197 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %198 = "mid.checkflag"(%197) {"typ_name" = "bool_typ"} : (!llvm.ptr) -> !hi.bool
      %199 = "llvm.load"(%198) : (!hi.bool) -> i1
      "cf.cond_br"(%199) [^bb18, ^bb29] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb29:
      %200 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %201 = "mid.checkflag"(%200) {"typ_name" = "Representable"} : (!llvm.ptr) -> !hi.bool
      %202 = "llvm.load"(%201) : (!hi.bool) -> i1
      "cf.cond_br"(%202) [^bb30, ^bb31] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb30:
      %203 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %204 = "mid.checkflag"(%203) {"typ_name" = "Character"} : (!llvm.ptr) -> !hi.bool
      %205 = "llvm.load"(%204) : (!hi.bool) -> i1
      "cf.cond_br"(%205) [^bb31, ^bb32] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb32:
      %206 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %207 = "mid.checkflag"(%206) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %208 = "llvm.load"(%207) : (!hi.bool) -> i1
      "cf.cond_br"(%208) [^bb31, ^bb19] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb31:
      %209 = "llvm.getelementptr"(%161) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %210 = "mid.checkflag"(%209) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %211 = "llvm.load"(%210) : (!hi.bool) -> i1
      "cf.cond_br"(%211) [^bb20, ^bb20] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb12:
      %212 = "mid.addr_of"() {"global_name" = @IO} : () -> !llvm.ptr
      %213 = "llvm.load"(%163) : (!llvm.ptr) -> i32
      %214 = "llvm.getelementptr"(%212, %213) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %215 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %216 = "llvm.getelementptr"(%214, %215) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%216) : (!llvm.ptr) -> ()
    }) {"func_name" = "IO_B__Self_print_xi32__Self_print_xRepresentable__Self_print_xi64__Self_print_xCharacter__Self_print_xi8__Self_print_xString__Self_print_xf64__Self_print_xNil__Self_print_xBool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "files"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 85 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "IO", "vtbl_size" = 10 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "FileSystemError", "methods" = [@FileSystemError_field_line_number, @FileSystemError_field_file_name, @FileSystemError_field_message, @FileSystemError_field_stacktrace, @FileSystemError_field_n_frames, @FileSystemError_B_init_messageString, @FileSystemError_B_init_, @FileSystemError_B_set_info_line_numberi32_file_nameString, @FileSystemError_B_print_stacktrace_, @FileSystemError_B_report_, @FileSystemError_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_print_stacktrace_, @Exception_report_, @Exception_print_message_, @FileSystemError_field_line_number, @FileSystemError_field_file_name, @FileSystemError_field_message, @FileSystemError_field_stacktrace, @FileSystemError_field_n_frames, @FileSystemError_B_init_messageString, @FileSystemError_B_init_, @FileSystemError_B_set_info_line_numberi32_file_nameString, @FileSystemError_B_print_stacktrace_, @FileSystemError_B_report_, @FileSystemError_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_print_stacktrace_, @Exception_report_, @Exception_print_message_], "hash_tbl" = [@any_typ, @FileSystemError, @Object, @Exception], "offset_tbl" = [10 : i32, 10 : i32, 44 : i32, 27 : i32], "prime" = 4611686018427388291 : i64, "hash_id" = 13942035194652003542 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "data_size_fn" = "_data_size_FileSystemError", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "File", "methods" = [@File_field_name, @File_field_mode, @File_field_handle, @File_field_open, @File_B_init_nameString_modeString, @File_B__set_mode_modeString, @File_B_reopen_, @File_B_close_, @File_B_size_, @File_B_read_, @File_B_read_byte_, @File_B_write_textString, @File_init_nameString_modeString, @File__set_mode_modeString, @File_reopen_, @File_close_, @File_size_, @File_read_, @File_read_byte_, @File_write_textString], "hash_tbl" = [@File, 18446744073709551615 : i64, @any_typ, @Object], "offset_tbl" = [10 : i32, 0 : i32, 10 : i32, 30 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 16218955235528015952 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1)>, "data_size_fn" = "_data_size_File", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FileProcessor", "methods" = [], "hash_tbl" = [@Object, @any_typ, @FileProcessor, 18446744073709551615 : i64], "offset_tbl" = [13 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 4146660827496349788 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_FileProcessor", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FileReader", "methods" = [@FileReader_field_FileReader_0, @FileReader_B_init_, @FileReader_B_process_fileFile, @FileReader_init_, @FileReader_process_fileFile, @FileReader_field_FileReader_0, @FileReader_B_process_fileFile, @FileReader_process_fileFile], "hash_tbl" = [@Object, @any_typ, @FileProcessor, @FileReader], "offset_tbl" = [18 : i32, 10 : i32, 15 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5641023583277533454 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_FileReader", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FileWriter", "methods" = [@FileWriter_field_text, @FileWriter_field_FileWriter_0, @FileWriter_B_init_textString, @FileWriter_B_process_fileFile, @FileWriter_init_textString, @FileWriter_process_fileFile, @FileWriter_field_FileWriter_0, @FileWriter_B_process_fileFile, @FileWriter_process_fileFile], "hash_tbl" = [@Object, @any_typ, @FileProcessor, @FileWriter], "offset_tbl" = [19 : i32, 10 : i32, 16 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 2522433070607690589 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_FileWriter", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "FileSystem", "methods" = [@FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT, @FileSystem_B__Self_read_file_file_nameString, @FileSystem_B__Self_write_file_file_nameString_textString, @FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T, @FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT, @FileSystem__Self_read_file_file_nameString, @FileSystem__Self_write_file_file_nameString_textString], "hash_tbl" = [@Object, @FileSystem, @any_typ, 18446744073709551615 : i64], "offset_tbl" = [17 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 5344209596779946859 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_FileSystem", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fopen", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr)> (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fprintf", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fclose", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgetc", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgets", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i32, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ferror", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fseek", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, i64, i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ftell", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fread", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fwrite", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "perror", "function_type" = !llvm.func<void (i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileSystemError", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64]} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileSystemError_getter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileSystemError_setter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileSystemError_field_line_number", "getter_name" = "FileSystemError_getter_line_number", "setter_name" = "FileSystemError_setter_line_number"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileSystemError_getter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileSystemError_setter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileSystemError_field_file_name", "getter_name" = "FileSystemError_getter_file_name", "setter_name" = "FileSystemError_setter_file_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileSystemError_getter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileSystemError_setter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileSystemError_field_message", "getter_name" = "FileSystemError_getter_message", "setter_name" = "FileSystemError_setter_message"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileSystemError_getter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileSystemError_setter_stacktrace", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileSystemError_field_stacktrace", "getter_name" = "FileSystemError_getter_stacktrace", "setter_name" = "FileSystemError_setter_stacktrace"} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileSystemError_getter_n_frames", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 4 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileSystemError_setter_n_frames", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64], "offset" = 4 : i64, "original_type" = i64, "specialized_name" = "i64_typ", "parameterization" = "_parameterization_i64"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileSystemError_field_n_frames", "getter_name" = "FileSystemError_getter_n_frames", "setter_name" = "FileSystemError_setter_n_frames"} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_init_messageString", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.ptr):
      %2 = "mid.invariant"(%1) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %3 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb1] : () -> ()
    ^bb2:
      %4 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%4, %3) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb1:
      %5 = "llvm.getelementptr"(%1) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %6 = "mid.checkflag"(%5) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %7 = "llvm.load"(%6) : (!hi.bool) -> i1
      "cf.cond_br"(%7) [^bb2, ^bb2] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb3:
      %8 = "llvm.extractvalue"(%0) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %9 = "llvm.load"(%3) : (!llvm.ptr) -> i32
      %10 = "llvm.getelementptr"(%8, %9) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %11 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %12 = "llvm.getelementptr"(%10, %11) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%12) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_init_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb4(%13 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %14 : !llvm.ptr):
      %15 = "mid.invariant"(%14) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %16 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb5] : () -> ()
    ^bb5:
      %17 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%17, %16) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb6] : () -> ()
    ^bb6:
      %18 = "llvm.extractvalue"(%13) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %19 = "llvm.load"(%16) : (!llvm.ptr) -> i32
      %20 = "llvm.getelementptr"(%18, %19) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %21 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %22 = "llvm.getelementptr"(%20, %21) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%22) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_set_info_line_numberi32_file_nameString", "function_type" = !llvm.func<void (i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb7(%23 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %24 : !llvm.ptr):
      %25 = "mid.invariant"(%24) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %26 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb8] : () -> ()
    ^bb9:
      %27 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%27, %26) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb10] : () -> ()
    ^bb11:
      %28 = "llvm.getelementptr"(%24) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %29 = "mid.checkflag"(%28) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %30 = "llvm.load"(%29) : (!hi.bool) -> i1
      "cf.cond_br"(%30) [^bb9, ^bb9] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb8:
      %31 = "llvm.getelementptr"(%24) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %32 = "mid.checkflag"(%31) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %33 = "llvm.load"(%32) : (!hi.bool) -> i1
      "cf.cond_br"(%33) [^bb11, ^bb11] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb10:
      %34 = "llvm.extractvalue"(%23) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %35 = "llvm.load"(%26) : (!llvm.ptr) -> i32
      %36 = "llvm.getelementptr"(%34, %35) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %37 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %38 = "llvm.getelementptr"(%36, %37) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%38) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_set_info_line_numberi32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_print_stacktrace_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb12(%39 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %40 : !llvm.ptr):
      %41 = "mid.invariant"(%40) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %42 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb13] : () -> ()
    ^bb13:
      %43 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%43, %42) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb14] : () -> ()
    ^bb14:
      %44 = "llvm.extractvalue"(%39) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %45 = "llvm.load"(%42) : (!llvm.ptr) -> i32
      %46 = "llvm.getelementptr"(%44, %45) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %47 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %48 = "llvm.getelementptr"(%46, %47) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%48) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_print_stacktrace_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_report_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb15(%49 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %50 : !llvm.ptr):
      %51 = "mid.invariant"(%50) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %52 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb16:
      %53 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%53, %52) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb17] : () -> ()
    ^bb17:
      %54 = "llvm.extractvalue"(%49) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %55 = "llvm.load"(%52) : (!llvm.ptr) -> i32
      %56 = "llvm.getelementptr"(%54, %55) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %57 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %58 = "llvm.getelementptr"(%56, %57) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%58) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_report_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Exception_print_message_", "function_type" = !llvm.func<void ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb18(%59 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %60 : !llvm.ptr):
      %61 = "mid.invariant"(%60) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %62 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb19] : () -> ()
    ^bb19:
      %63 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%63, %62) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb20] : () -> ()
    ^bb20:
      %64 = "llvm.extractvalue"(%59) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %65 = "llvm.load"(%62) : (!llvm.ptr) -> i32
      %66 = "llvm.getelementptr"(%64, %65) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<34 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %67 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %68 = "llvm.getelementptr"(%66, %67) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%68) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystemError_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_File", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1]} : () -> ()
    "mid.getter_def"() {"meth_name" = "File_getter_name", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "File_setter_name", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "File_field_name", "getter_name" = "File_getter_name", "setter_name" = "File_setter_name"} : () -> ()
    "mid.getter_def"() {"meth_name" = "File_getter_mode", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "File_setter_mode", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "File_field_mode", "getter_name" = "File_getter_mode", "setter_name" = "File_setter_mode"} : () -> ()
    "mid.getter_def"() {"meth_name" = "File_getter_handle", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "File_setter_handle", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "File_field_handle", "getter_name" = "File_getter_handle", "setter_name" = "File_setter_handle"} : () -> ()
    "mid.getter_def"() {"meth_name" = "File_getter_open", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.setter_def"() {"meth_name" = "File_setter_open", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_Bool"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "File_field_open", "getter_name" = "File_getter_open", "setter_name" = "File_setter_open"} : () -> ()
    "mid.func"() ({
    ^bb21(%69 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %70 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %71 : !llvm.ptr, %72 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %73 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %74 = "mid.wrap"(%69) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %75 = "hi.cast"(%74) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %76 = "mid.wrap"(%72) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %77 = "hi.cast"(%76) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %78 = "hi.cast"(%77) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%75, %78) {"offset" = 0 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">, !hi.fatptr<"String">) -> ()
      %79 = "mid.wrap"(%73) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %80 = "hi.cast"(%79) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %81 = "hi.cast"(%80) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%75, %81) {"offset" = 1 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">, !hi.fatptr<"String">) -> ()
      %82 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %83 = "hi.cast"(%82) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%75, %83) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">, !hi.bool) -> ()
      %84 = "mid.get_field"(%75) {"offset" = 0 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"File">) -> !hi.fatptr<"String">
      %85 = "mid.unwrap"(%84) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %86 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %87 = "mid.method_call"(%86, %85) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %88 = "hi.cast"(%87) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %89 = "mid.get_field"(%75) {"offset" = 1 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"File">) -> !hi.fatptr<"String">
      %90 = "mid.unwrap"(%89) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %91 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %92 = "mid.method_call"(%91, %90) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %93 = "hi.cast"(%92) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %94 = "mid.unwrap"(%88) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %95 = "mid.unwrap"(%93) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %96 = "mid.call"(%94, %95) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %97 = "hi.cast"(%96) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      "mid.set_field"(%75, %97) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">, !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> ()
      %98 = "mid.get_field"(%75) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %99 = "mid.checkflag"(%98) {"typ_name" = "nil_typ"} : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %100 = "mid.unwrap"(%99) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%100) ({
        %101 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %102 = "mid.unwrap"(%101) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %103 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%103, %102) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %104 = "mid.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %105 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %106 = "hi.cast"(%105) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %107 = "mid.create_buffer"(%106) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %108 = "mid.refer"(%107) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %109 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %110 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%108, %110, %109) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %111 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %112 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %113 = "mid.unwrap"(%108) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %114 = "mid.unwrap"(%111) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %115 = "mid.unwrap"(%112) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %116 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %117 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %118 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %119 = "hi.cast"(%108) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %120 = "mid.unwrap"(%119) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %121 = "hi.cast"(%117) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %122 = "mid.unwrap"(%121) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %123 = "hi.cast"(%118) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %124 = "mid.unwrap"(%123) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %125 = "mid.unwrap"(%116) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %126 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %127 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %128 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %129 = "mid.parameterizations_array"(%126, %127, %128) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%129, %125, %120, %122, %124) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %130 = "hi.cast"(%104) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %131 = "mid.unwrap"(%130) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %132 = "hi.cast"(%116) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %133 = "mid.unwrap"(%132) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %134 = "mid.unwrap"(%101) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %135 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %136 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %137 = "mid.parameterizations_array"(%135, %136) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%137, %134, %131, %133) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %138 = "hi.cast"(%101) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %139 = "mid.unwrap"(%138) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %140 = "mid.coro_yield"(%139) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %141 = "mid.wrap"(%140) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %142 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %143 = "hi.cast"(%142) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%75, %143) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">, !hi.bool) -> ()
    }) {"func_name" = "File_init_nameString_modeString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb22(%144 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %145 : !llvm.ptr):
      %146 = "mid.invariant"(%145) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %147 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb23] : () -> ()
    ^bb24:
      %148 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%148, %147) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb25] : () -> ()
    ^bb26:
      %149 = "llvm.getelementptr"(%145) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %150 = "mid.checkflag"(%149) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %151 = "llvm.load"(%150) : (!hi.bool) -> i1
      "cf.cond_br"(%151) [^bb24, ^bb24] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb23:
      %152 = "llvm.getelementptr"(%145) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %153 = "mid.checkflag"(%152) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %154 = "llvm.load"(%153) : (!hi.bool) -> i1
      "cf.cond_br"(%154) [^bb26, ^bb26] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb25:
      %155 = "llvm.extractvalue"(%144) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %156 = "llvm.load"(%147) : (!llvm.ptr) -> i32
      %157 = "llvm.getelementptr"(%155, %156) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %158 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %159 = "llvm.getelementptr"(%157, %158) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%159) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_init_nameString_modeString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb27(%160 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %161 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %162 : !llvm.ptr, %163 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %164 = "mid.wrap"(%160) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %165 = "hi.cast"(%164) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %166 = "mid.wrap"(%163) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %167 = "hi.cast"(%166) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %168 = "hi.cast"(%167) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%165, %168) {"offset" = 1 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">, !hi.fatptr<"String">) -> ()
      %169 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %170 = "mid.get_field"(%165) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %171 = "mid.unwrap"(%169) : (!hi.bool) -> i1
      %172 = "mid.unwrap"(%170) : (!hi.bool) -> i1
      %173 = "mid.comparison"(%171, %172) {"op" = "EQ"} : (i1, i1) -> i1
      %174 = "mid.wrap"(%173) : (i1) -> !hi.bool
      %175 = "mid.unwrap"(%174) : (!hi.bool) -> i1
      "mid.if"(%175) ({
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %176 = "mid.unwrap"(%165) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %177 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%177, %176) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    }) {"func_name" = "File__set_mode_modeString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb28(%178 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %179 : !llvm.ptr):
      %180 = "mid.invariant"(%179) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %181 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb29] : () -> ()
    ^bb30:
      %182 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%182, %181) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb31] : () -> ()
    ^bb29:
      %183 = "llvm.getelementptr"(%179) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %184 = "mid.checkflag"(%183) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %185 = "llvm.load"(%184) : (!hi.bool) -> i1
      "cf.cond_br"(%185) [^bb30, ^bb30] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb31:
      %186 = "llvm.extractvalue"(%178) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %187 = "llvm.load"(%181) : (!llvm.ptr) -> i32
      %188 = "llvm.getelementptr"(%186, %187) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %189 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %190 = "llvm.getelementptr"(%188, %189) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%190) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B__set_mode_modeString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb32(%191 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %192 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %193 : !llvm.ptr):
      %194 = "mid.wrap"(%191) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %195 = "hi.cast"(%194) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %196 = "mid.unwrap"(%195) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %197 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%197, %196) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %198 = "mid.get_field"(%195) {"offset" = 0 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"File">) -> !hi.fatptr<"String">
      %199 = "mid.unwrap"(%198) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %200 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %201 = "mid.method_call"(%200, %199) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %202 = "hi.cast"(%201) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %203 = "mid.get_field"(%195) {"offset" = 1 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"File">) -> !hi.fatptr<"String">
      %204 = "mid.unwrap"(%203) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %205 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %206 = "mid.method_call"(%205, %204) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %207 = "hi.cast"(%206) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %208 = "mid.unwrap"(%202) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %209 = "mid.unwrap"(%207) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %210 = "mid.call"(%208, %209) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %211 = "hi.cast"(%210) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      "mid.set_field"(%195, %211) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">, !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> ()
      %212 = "mid.get_field"(%195) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %213 = "mid.checkflag"(%212) {"typ_name" = "nil_typ"} : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %214 = "mid.unwrap"(%213) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%214) ({
        %215 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %216 = "mid.unwrap"(%215) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %217 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%217, %216) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %218 = "mid.literal"() {"value" = 37 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %219 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %220 = "hi.cast"(%219) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %221 = "mid.create_buffer"(%220) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %222 = "mid.refer"(%221) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %223 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %224 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%222, %224, %223) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %225 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %226 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %227 = "mid.unwrap"(%222) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %228 = "mid.unwrap"(%225) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %229 = "mid.unwrap"(%226) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %230 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %231 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %232 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %233 = "hi.cast"(%222) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %234 = "mid.unwrap"(%233) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %235 = "hi.cast"(%231) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %236 = "mid.unwrap"(%235) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %237 = "hi.cast"(%232) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %238 = "mid.unwrap"(%237) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %239 = "mid.unwrap"(%230) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %240 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %241 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %242 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %243 = "mid.parameterizations_array"(%240, %241, %242) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%243, %239, %234, %236, %238) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %244 = "hi.cast"(%218) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %245 = "mid.unwrap"(%244) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %246 = "hi.cast"(%230) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %247 = "mid.unwrap"(%246) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %248 = "mid.unwrap"(%215) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %249 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %250 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %251 = "mid.parameterizations_array"(%249, %250) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%251, %248, %245, %247) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %252 = "hi.cast"(%215) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %253 = "mid.unwrap"(%252) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %254 = "mid.coro_yield"(%253) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %255 = "mid.wrap"(%254) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %256 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
      %257 = "hi.cast"(%256) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%195, %257) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">, !hi.bool) -> ()
    }) {"func_name" = "File_reopen_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb33(%258 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %259 : !llvm.ptr):
      %260 = "mid.invariant"(%259) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %261 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb34] : () -> ()
    ^bb34:
      %262 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%262, %261) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb35] : () -> ()
    ^bb35:
      %263 = "llvm.extractvalue"(%258) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %264 = "llvm.load"(%261) : (!llvm.ptr) -> i32
      %265 = "llvm.getelementptr"(%263, %264) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %266 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %267 = "llvm.getelementptr"(%265, %266) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%267) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_reopen_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb36(%268 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %269 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %270 : !llvm.ptr):
      %271 = "mid.wrap"(%268) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %272 = "hi.cast"(%271) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %273 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %274 = "mid.get_field"(%272) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %275 = "mid.unwrap"(%273) : (!hi.bool) -> i1
      %276 = "mid.unwrap"(%274) : (!hi.bool) -> i1
      %277 = "mid.comparison"(%275, %276) {"op" = "EQ"} : (i1, i1) -> i1
      %278 = "mid.wrap"(%277) : (i1) -> !hi.bool
      %279 = "mid.unwrap"(%278) : (!hi.bool) -> i1
      "mid.if"(%279) ({
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %280 = "mid.get_field"(%272) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %281 = "mid.unwrap"(%280) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %282 = "mid.call"(%281) {"func_name" = "fclose", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %283 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %284 = "hi.cast"(%283) {"from_typ" = !hi.bool, "to_typ" = !hi.bool, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!hi.bool) -> !hi.bool
      "mid.set_field"(%272, %284) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">, !hi.bool) -> ()
      %285 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %286 = "mid.unwrap"(%282) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %287 = "mid.unwrap"(%285) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %288 = "mid.comparison"(%286, %287) {"op" = "EQ"} : (i32, i32) -> i1
      %289 = "mid.wrap"(%288) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %290 = "mid.unwrap"(%289) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%290) ({
        %291 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %292 = "mid.unwrap"(%291) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %293 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%293, %292) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %294 = "mid.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %295 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %296 = "hi.cast"(%295) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %297 = "mid.create_buffer"(%296) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %298 = "mid.refer"(%297) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %299 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %300 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%298, %300, %299) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %301 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %302 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %303 = "mid.unwrap"(%298) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %304 = "mid.unwrap"(%301) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %305 = "mid.unwrap"(%302) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %306 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %307 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %308 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %309 = "hi.cast"(%298) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %310 = "mid.unwrap"(%309) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %311 = "hi.cast"(%307) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %312 = "mid.unwrap"(%311) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %313 = "hi.cast"(%308) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %314 = "mid.unwrap"(%313) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %315 = "mid.unwrap"(%306) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %316 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %317 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %318 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %319 = "mid.parameterizations_array"(%316, %317, %318) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%319, %315, %310, %312, %314) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %320 = "hi.cast"(%294) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %321 = "mid.unwrap"(%320) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %322 = "hi.cast"(%306) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %323 = "mid.unwrap"(%322) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %324 = "mid.unwrap"(%291) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %325 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %326 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %327 = "mid.parameterizations_array"(%325, %326) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%327, %324, %321, %323) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %328 = "hi.cast"(%291) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %329 = "mid.unwrap"(%328) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %330 = "mid.coro_yield"(%329) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %331 = "mid.wrap"(%330) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
    }) {"func_name" = "File_close_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb37(%332 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %333 : !llvm.ptr):
      %334 = "mid.invariant"(%333) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %335 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb38] : () -> ()
    ^bb38:
      %336 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%336, %335) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb39] : () -> ()
    ^bb39:
      %337 = "llvm.extractvalue"(%332) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %338 = "llvm.load"(%335) : (!llvm.ptr) -> i32
      %339 = "llvm.getelementptr"(%337, %338) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %340 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %341 = "llvm.getelementptr"(%339, %340) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%341) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_close_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb40(%342 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %343 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %344 : !llvm.ptr):
      %345 = "mid.wrap"(%342) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %346 = "hi.cast"(%345) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %347 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %348 = "mid.get_field"(%346) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %349 = "mid.unwrap"(%347) : (!hi.bool) -> i1
      %350 = "mid.unwrap"(%348) : (!hi.bool) -> i1
      %351 = "mid.comparison"(%349, %350) {"op" = "EQ"} : (i1, i1) -> i1
      %352 = "mid.wrap"(%351) : (i1) -> !hi.bool
      %353 = "mid.unwrap"(%352) : (!hi.bool) -> i1
      "mid.if"(%353) ({
        %354 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %355 = "mid.unwrap"(%354) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %356 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%356, %355) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %357 = "mid.literal"() {"value" = 47 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %358 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %359 = "hi.cast"(%358) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %360 = "mid.create_buffer"(%359) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %361 = "mid.refer"(%360) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %362 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %363 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%361, %363, %362) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %364 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %365 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %366 = "mid.unwrap"(%361) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %367 = "mid.unwrap"(%364) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %368 = "mid.unwrap"(%365) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %369 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %370 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %371 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %372 = "hi.cast"(%361) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %373 = "mid.unwrap"(%372) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %374 = "hi.cast"(%370) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %375 = "mid.unwrap"(%374) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %376 = "hi.cast"(%371) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %377 = "mid.unwrap"(%376) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %378 = "mid.unwrap"(%369) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %379 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %380 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %381 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %382 = "mid.parameterizations_array"(%379, %380, %381) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%382, %378, %373, %375, %377) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %383 = "hi.cast"(%357) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %384 = "mid.unwrap"(%383) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %385 = "hi.cast"(%369) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %386 = "mid.unwrap"(%385) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %387 = "mid.unwrap"(%354) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %388 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %389 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %390 = "mid.parameterizations_array"(%388, %389) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%390, %387, %384, %386) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %391 = "hi.cast"(%354) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %392 = "mid.unwrap"(%391) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %393 = "mid.coro_yield"(%392) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %394 = "mid.wrap"(%393) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %395 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %396 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %397 = "mid.get_field"(%346) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %398 = "mid.unwrap"(%397) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %399 = "mid.call"(%398) {"func_name" = "ftell", "ret_type" = i64} : (!llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %400 = "mid.get_field"(%346) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %401 = "mid.literal"() {"value" = 0 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %402 = "mid.unwrap"(%400) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %403 = "mid.unwrap"(%401) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %404 = "mid.unwrap"(%395) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %405 = "mid.call"(%402, %403, %404) {"func_name" = "fseek", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>, i64, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %406 = "mid.get_field"(%346) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %407 = "mid.unwrap"(%406) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %408 = "mid.call"(%407) {"func_name" = "ftell", "ret_type" = i64} : (!llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %409 = "mid.get_field"(%346) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %410 = "mid.unwrap"(%409) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %411 = "mid.unwrap"(%399) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %412 = "mid.unwrap"(%396) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %413 = "mid.call"(%410, %411, %412) {"func_name" = "fseek", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>, i64, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %414 = "hi.cast"(%408) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.return"(%414) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "File_size_", "result_type" = i64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb41(%415 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %416 : !llvm.ptr):
      %417 = "mid.invariant"(%416) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %418 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb42] : () -> ()
    ^bb42:
      %419 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%419, %418) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb43] : () -> ()
    ^bb43:
      %420 = "llvm.extractvalue"(%415) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %421 = "llvm.load"(%418) : (!llvm.ptr) -> i32
      %422 = "llvm.getelementptr"(%420, %421) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %423 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %424 = "llvm.getelementptr"(%422, %423) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%424) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb44(%425 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %426 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %427 : !llvm.ptr):
      %428 = "mid.wrap"(%425) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %429 = "hi.cast"(%428) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %430 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %431 = "mid.get_field"(%429) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %432 = "mid.unwrap"(%430) : (!hi.bool) -> i1
      %433 = "mid.unwrap"(%431) : (!hi.bool) -> i1
      %434 = "mid.comparison"(%432, %433) {"op" = "EQ"} : (i1, i1) -> i1
      %435 = "mid.wrap"(%434) : (i1) -> !hi.bool
      %436 = "mid.unwrap"(%435) : (!hi.bool) -> i1
      "mid.if"(%436) ({
        %437 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %438 = "mid.unwrap"(%437) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %439 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%439, %438) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %440 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %441 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %442 = "hi.cast"(%441) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %443 = "mid.create_buffer"(%442) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %444 = "mid.refer"(%443) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %445 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %446 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%444, %446, %445) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %447 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %448 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %449 = "mid.unwrap"(%444) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %450 = "mid.unwrap"(%447) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %451 = "mid.unwrap"(%448) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %452 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %453 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %454 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %455 = "hi.cast"(%444) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %456 = "mid.unwrap"(%455) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %457 = "hi.cast"(%453) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %458 = "mid.unwrap"(%457) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %459 = "hi.cast"(%454) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %460 = "mid.unwrap"(%459) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %461 = "mid.unwrap"(%452) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %462 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %463 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %464 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %465 = "mid.parameterizations_array"(%462, %463, %464) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%465, %461, %456, %458, %460) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %466 = "hi.cast"(%440) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %467 = "mid.unwrap"(%466) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %468 = "hi.cast"(%452) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %469 = "mid.unwrap"(%468) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %470 = "mid.unwrap"(%437) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %471 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %472 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %473 = "mid.parameterizations_array"(%471, %472) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%473, %470, %467, %469) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %474 = "hi.cast"(%437) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %475 = "mid.unwrap"(%474) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %476 = "mid.coro_yield"(%475) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %477 = "mid.wrap"(%476) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %478 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %479 = "mid.get_field"(%429) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %480 = "mid.literal"() {"value" = 0 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %481 = "mid.unwrap"(%479) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %482 = "mid.unwrap"(%480) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %483 = "mid.unwrap"(%478) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %484 = "mid.call"(%481, %482, %483) {"func_name" = "fseek", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>, i64, i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %485 = "mid.unwrap"(%429) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %486 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %487 = "mid.method_call"(%486, %485) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = i64, "ret_type_unq" = i64} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %488 = "hi.cast"(%487) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %489 = "hi.cast"(%488) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %490 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %491 = "mid.unwrap"(%489) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %492 = "mid.unwrap"(%490) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %493 = "mid.arithmetic"(%491, %492) {"op" = "ADD"} : (i32, i32) -> i32
      %494 = "mid.wrap"(%493) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %495 = "hi.cast"(%494) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %496 = "mid.create_buffer"(%495) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %497 = "mid.refer"(%496) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %498 = "mid.literal"() {"value" = 1 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %499 = "mid.get_field"(%429) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %500 = "mid.unwrap"(%497) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %501 = "mid.unwrap"(%498) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %502 = "mid.unwrap"(%488) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %503 = "mid.unwrap"(%499) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %504 = "mid.call"(%500, %501, %502, %503) {"func_name" = "fread", "ret_type" = i64} : (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %505 = "mid.unwrap"(%504) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %506 = "mid.unwrap"(%488) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %507 = "mid.comparison"(%505, %506) {"op" = "LT"} : (i64, i64) -> i1
      %508 = "mid.wrap"(%507) : (i1) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %509 = "mid.unwrap"(%508) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%509) ({
        %510 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %511 = "mid.unwrap"(%510) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %512 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%512, %511) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %513 = "mid.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %514 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %515 = "hi.cast"(%514) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %516 = "mid.create_buffer"(%515) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %517 = "mid.refer"(%516) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %518 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %519 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%517, %519, %518) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %520 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %521 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %522 = "mid.unwrap"(%517) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %523 = "mid.unwrap"(%520) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %524 = "mid.unwrap"(%521) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %525 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %526 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %527 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %528 = "hi.cast"(%517) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %529 = "mid.unwrap"(%528) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %530 = "hi.cast"(%526) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %531 = "mid.unwrap"(%530) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %532 = "hi.cast"(%527) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %533 = "mid.unwrap"(%532) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %534 = "mid.unwrap"(%525) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %535 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %536 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %537 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %538 = "mid.parameterizations_array"(%535, %536, %537) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%538, %534, %529, %531, %533) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %539 = "hi.cast"(%513) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %540 = "mid.unwrap"(%539) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %541 = "hi.cast"(%525) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %542 = "mid.unwrap"(%541) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %543 = "mid.unwrap"(%510) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %544 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %545 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %546 = "mid.parameterizations_array"(%544, %545) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%546, %543, %540, %542) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %547 = "hi.cast"(%510) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %548 = "mid.unwrap"(%547) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %549 = "mid.coro_yield"(%548) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %550 = "mid.wrap"(%549) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %551 = "hi.cast"(%488) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %552 = "mid.unwrap"(%497) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %553 = "mid.unwrap"(%551) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %554 = "mid.unwrap"(%494) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %555 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %556 = "hi.cast"(%488) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %557 = "hi.cast"(%497) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %558 = "mid.unwrap"(%557) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %559 = "hi.cast"(%556) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %560 = "mid.unwrap"(%559) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %561 = "hi.cast"(%494) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %562 = "mid.unwrap"(%561) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %563 = "mid.unwrap"(%555) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %564 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %565 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %566 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %567 = "mid.parameterizations_array"(%564, %565, %566) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%567, %563, %558, %560, %562) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %568 = "hi.cast"(%555) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%568) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "File_read_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb45(%569 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %570 : !llvm.ptr):
      %571 = "mid.invariant"(%570) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %572 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb46] : () -> ()
    ^bb46:
      %573 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
      "llvm.store"(%573, %572) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb47] : () -> ()
    ^bb47:
      %574 = "llvm.extractvalue"(%569) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %575 = "llvm.load"(%572) : (!llvm.ptr) -> i32
      %576 = "llvm.getelementptr"(%574, %575) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %577 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %578 = "llvm.getelementptr"(%576, %577) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%578) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_read_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb48(%579 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %580 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %581 : !llvm.ptr):
      %582 = "mid.wrap"(%579) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %583 = "hi.cast"(%582) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %584 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %585 = "mid.get_field"(%583) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %586 = "mid.unwrap"(%584) : (!hi.bool) -> i1
      %587 = "mid.unwrap"(%585) : (!hi.bool) -> i1
      %588 = "mid.comparison"(%586, %587) {"op" = "EQ"} : (i1, i1) -> i1
      %589 = "mid.wrap"(%588) : (i1) -> !hi.bool
      %590 = "mid.unwrap"(%589) : (!hi.bool) -> i1
      "mid.if"(%590) ({
        %591 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %592 = "mid.unwrap"(%591) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %593 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%593, %592) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %594 = "mid.literal"() {"value" = 69 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %595 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %596 = "hi.cast"(%595) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %597 = "mid.create_buffer"(%596) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %598 = "mid.refer"(%597) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %599 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %600 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%598, %600, %599) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %601 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %602 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %603 = "mid.unwrap"(%598) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %604 = "mid.unwrap"(%601) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %605 = "mid.unwrap"(%602) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %606 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %607 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %608 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %609 = "hi.cast"(%598) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %610 = "mid.unwrap"(%609) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %611 = "hi.cast"(%607) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %612 = "mid.unwrap"(%611) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %613 = "hi.cast"(%608) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %614 = "mid.unwrap"(%613) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %615 = "mid.unwrap"(%606) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %616 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %617 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %618 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %619 = "mid.parameterizations_array"(%616, %617, %618) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%619, %615, %610, %612, %614) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %620 = "hi.cast"(%594) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %621 = "mid.unwrap"(%620) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %622 = "hi.cast"(%606) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %623 = "mid.unwrap"(%622) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %624 = "mid.unwrap"(%591) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %625 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %626 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %627 = "mid.parameterizations_array"(%625, %626) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%627, %624, %621, %623) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %628 = "hi.cast"(%591) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %629 = "mid.unwrap"(%628) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %630 = "mid.coro_yield"(%629) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %631 = "mid.wrap"(%630) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %632 = "mid.get_field"(%583) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %633 = "mid.unwrap"(%632) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %634 = "mid.call"(%633) {"func_name" = "fgetc", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %635 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %636 = "mid.unwrap"(%634) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %637 = "mid.unwrap"(%635) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %638 = "mid.comparison"(%636, %637) {"op" = "EQ"} : (i32, i32) -> i1
      %639 = "mid.wrap"(%638) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %640 = "mid.unwrap"(%639) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%640) ({
        %641 = "mid.get_field"(%583) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
        %642 = "mid.unwrap"(%641) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %643 = "mid.call"(%642) {"func_name" = "ferror", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %644 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %645 = "mid.unwrap"(%643) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %646 = "mid.unwrap"(%644) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %647 = "mid.comparison"(%645, %646) {"op" = "NEQ"} : (i32, i32) -> i1
        %648 = "mid.wrap"(%647) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %649 = "mid.unwrap"(%648) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
        "mid.if"(%649) ({
          %650 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
          %651 = "mid.unwrap"(%650) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %652 = "mid.parameterizations_array"() : () -> !llvm.ptr
          "mid.method_call"(%652, %651) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
          %653 = "mid.literal"() {"value" = 72 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %654 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %655 = "hi.cast"(%654) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
          %656 = "mid.create_buffer"(%655) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
          %657 = "mid.refer"(%656) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
          %658 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
          %659 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
          "mid.buffer_set"(%657, %659, %658) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
          %660 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %661 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %662 = "mid.unwrap"(%657) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
          %663 = "mid.unwrap"(%660) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %664 = "mid.unwrap"(%661) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %665 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
          %666 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %667 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %668 = "hi.cast"(%657) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
          %669 = "mid.unwrap"(%668) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
          %670 = "hi.cast"(%666) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %671 = "mid.unwrap"(%670) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %672 = "hi.cast"(%667) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %673 = "mid.unwrap"(%672) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %674 = "mid.unwrap"(%665) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %675 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
          %676 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %677 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %678 = "mid.parameterizations_array"(%675, %676, %677) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%678, %674, %669, %671, %673) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
          %679 = "hi.cast"(%653) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
          %680 = "mid.unwrap"(%679) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
          %681 = "hi.cast"(%665) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
          %682 = "mid.unwrap"(%681) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %683 = "mid.unwrap"(%650) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
          %684 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
          %685 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
          %686 = "mid.parameterizations_array"(%684, %685) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
          "mid.method_call"(%686, %683, %680, %682) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
          %687 = "hi.cast"(%650) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
          %688 = "mid.unwrap"(%687) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
          %689 = "mid.coro_yield"(%688) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
          %690 = "mid.wrap"(%689) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
        }) : (i1) -> ()
        %691 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %692 = "hi.cast"(%691) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.int<#builtin.int<8>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.int<#builtin.int<8>, #builtin.signedness<signed>>, !hi.nil]>
        "mid.return"(%692) : (!hi.union<[!hi.int<#builtin.int<8>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %693 = "hi.cast"(%634) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<8>, #builtin.signedness<signed>>
      %694 = "hi.cast"(%693) {"from_typ" = !hi.int<#builtin.int<8>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<8>, #builtin.signedness<signed>>, !hi.nil]>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<8>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<8>, #builtin.signedness<signed>>, !hi.nil]>
      "mid.return"(%694) : (!hi.union<[!hi.int<#builtin.int<8>, #builtin.signedness<signed>>, !hi.nil]>) -> ()
    }) {"func_name" = "File_read_byte_", "result_type" = !llvm.struct<(!llvm.ptr, i8)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb49(%695 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %696 : !llvm.ptr):
      %697 = "mid.invariant"(%696) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %698 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb50] : () -> ()
    ^bb50:
      %699 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
      "llvm.store"(%699, %698) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb51] : () -> ()
    ^bb51:
      %700 = "llvm.extractvalue"(%695) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %701 = "llvm.load"(%698) : (!llvm.ptr) -> i32
      %702 = "llvm.getelementptr"(%700, %701) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %703 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %704 = "llvm.getelementptr"(%702, %703) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%704) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_read_byte_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb52(%705 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %706 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %707 : !llvm.ptr, %708 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %709 = "mid.wrap"(%705) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %710 = "hi.cast"(%709) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %711 = "mid.wrap"(%708) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %712 = "hi.cast"(%711) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %713 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %714 = "mid.get_field"(%710) {"offset" = 3 : i64, "vtable_bytes" = 160 : i32, "original_type" = i1} : (!hi.fatptr<"File">) -> !hi.bool
      %715 = "mid.unwrap"(%713) : (!hi.bool) -> i1
      %716 = "mid.unwrap"(%714) : (!hi.bool) -> i1
      %717 = "mid.comparison"(%715, %716) {"op" = "EQ"} : (i1, i1) -> i1
      %718 = "mid.wrap"(%717) : (i1) -> !hi.bool
      %719 = "mid.unwrap"(%718) : (!hi.bool) -> i1
      "mid.if"(%719) ({
        %720 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %721 = "mid.unwrap"(%720) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %722 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%722, %721) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %723 = "mid.literal"() {"value" = 78 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %724 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %725 = "hi.cast"(%724) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %726 = "mid.create_buffer"(%725) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %727 = "mid.refer"(%726) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %728 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %729 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%727, %729, %728) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %730 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %731 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %732 = "mid.unwrap"(%727) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %733 = "mid.unwrap"(%730) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %734 = "mid.unwrap"(%731) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %735 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %736 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %737 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %738 = "hi.cast"(%727) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %739 = "mid.unwrap"(%738) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %740 = "hi.cast"(%736) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %741 = "mid.unwrap"(%740) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %742 = "hi.cast"(%737) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %743 = "mid.unwrap"(%742) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %744 = "mid.unwrap"(%735) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %745 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %746 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %747 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %748 = "mid.parameterizations_array"(%745, %746, %747) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%748, %744, %739, %741, %743) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %749 = "hi.cast"(%723) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %750 = "mid.unwrap"(%749) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %751 = "hi.cast"(%735) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %752 = "mid.unwrap"(%751) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %753 = "mid.unwrap"(%720) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %754 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %755 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %756 = "mid.parameterizations_array"(%754, %755) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%756, %753, %750, %752) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %757 = "hi.cast"(%720) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %758 = "mid.unwrap"(%757) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %759 = "mid.coro_yield"(%758) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %760 = "mid.wrap"(%759) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %761 = "mid.unwrap"(%712) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %762 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %763 = "mid.method_call"(%762, %761) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %764 = "hi.cast"(%763) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %765 = "hi.cast"(%764) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %766 = "mid.literal"() {"value" = 1 : i64, "typ" = i64} : () -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %767 = "mid.unwrap"(%712) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %768 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %769 = "mid.method_call"(%768, %767) {"offset" = 10 : i32, "vptrs" = [], "vtable_size" = 85 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %770 = "hi.cast"(%769) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %771 = "mid.get_field"(%710) {"offset" = 2 : i64, "vtable_bytes" = 160 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"File">) -> !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>
      %772 = "mid.unwrap"(%770) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %773 = "mid.unwrap"(%766) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %774 = "mid.unwrap"(%765) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %775 = "mid.unwrap"(%771) : (!hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %776 = "mid.call"(%772, %773, %774, %775) {"func_name" = "fwrite", "ret_type" = i64} : (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %777 = "mid.unwrap"(%776) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %778 = "mid.unwrap"(%765) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i64
      %779 = "mid.comparison"(%777, %778) {"op" = "LT"} : (i64, i64) -> i1
      %780 = "mid.wrap"(%779) : (i1) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %781 = "mid.unwrap"(%780) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%781) ({
        %782 = "mid.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "FileSystemError", "num_data_fields" = 5 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileSystemError">
        %783 = "mid.unwrap"(%782) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %784 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%784, %783) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %785 = "mid.literal"() {"value" = 82 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %786 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %787 = "hi.cast"(%786) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %788 = "mid.create_buffer"(%787) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %789 = "mid.refer"(%788) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %790 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\files.mini"} : () -> !llvm.ptr
        %791 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%789, %791, %790) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %792 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %793 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %794 = "mid.unwrap"(%789) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %795 = "mid.unwrap"(%792) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %796 = "mid.unwrap"(%793) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %797 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %798 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %799 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %800 = "hi.cast"(%789) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %801 = "mid.unwrap"(%800) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %802 = "hi.cast"(%798) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %803 = "mid.unwrap"(%802) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %804 = "hi.cast"(%799) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %805 = "mid.unwrap"(%804) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %806 = "mid.unwrap"(%797) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %807 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %808 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %809 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %810 = "mid.parameterizations_array"(%807, %808, %809) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%810, %806, %801, %803, %805) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %811 = "hi.cast"(%785) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %812 = "mid.unwrap"(%811) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %813 = "hi.cast"(%797) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %814 = "mid.unwrap"(%813) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %815 = "mid.unwrap"(%782) : (!hi.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %816 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %817 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %818 = "mid.parameterizations_array"(%816, %817) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%818, %815, %812, %814) {"offset" = 7 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 34 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %819 = "hi.cast"(%782) {"from_typ" = !hi.fatptr<"FileSystemError">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileSystemError">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %820 = "mid.unwrap"(%819) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %821 = "mid.coro_yield"(%820) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %822 = "mid.wrap"(%821) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileSystemError">, !hi.nil]>
      }) : (i1) -> ()
      %823 = "hi.cast"(%776) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.return"(%823) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "File_write_textString", "result_type" = i64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb53(%824 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %825 : !llvm.ptr):
      %826 = "mid.invariant"(%825) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %827 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb54] : () -> ()
    ^bb55:
      %828 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%828, %827) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb56] : () -> ()
    ^bb54:
      %829 = "llvm.getelementptr"(%825) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %830 = "mid.checkflag"(%829) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %831 = "llvm.load"(%830) : (!hi.bool) -> i1
      "cf.cond_br"(%831) [^bb55, ^bb55] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb56:
      %832 = "llvm.extractvalue"(%824) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %833 = "llvm.load"(%827) : (!llvm.ptr) -> i32
      %834 = "llvm.getelementptr"(%832, %833) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<20 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %835 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %836 = "llvm.getelementptr"(%834, %835) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%836) : (!llvm.ptr) -> ()
    }) {"func_name" = "File_B_write_textString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileProcessor", "types" = []} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FileProcessor_field_FileProcessor_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["FileProcessor.T"]} : () -> ()
    "mid.func"() ({
    ^bb57(%837 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %838 : !llvm.ptr):
      %839 = "mid.invariant"(%838) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %840 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb58] : () -> ()
    ^bb59:
      %841 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
      "llvm.store"(%841, %840) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb60] : () -> ()
    ^bb58:
      %842 = "llvm.getelementptr"(%838) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %843 = "mid.checkflag"(%842) {"typ_name" = "File"} : (!llvm.ptr) -> !hi.bool
      %844 = "llvm.load"(%843) : (!hi.bool) -> i1
      "cf.cond_br"(%844) [^bb59, ^bb59] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb60:
      %845 = "llvm.extractvalue"(%837) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %846 = "llvm.load"(%840) : (!llvm.ptr) -> i32
      %847 = "llvm.getelementptr"(%845, %846) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %848 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %849 = "llvm.getelementptr"(%847, %848) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%849) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileProcessor_B_process_fileFile", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileReader", "types" = []} : () -> ()
    "mid.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FileReader_field_FileReader_0", "id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> ()
    "mid.func"() ({
    ^bb61(%850 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %851 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %852 : !llvm.ptr):
      %853 = "mid.wrap"(%850) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileReader">
      %854 = "hi.cast"(%853) {"from_typ" = !hi.fatptr<"FileReader">, "to_typ" = !hi.fatptr<"FileReader">, "from_typ_name" = "FileReader", "to_typ_name" = "FileReader"} : (!hi.fatptr<"FileReader">) -> !hi.fatptr<"FileReader">
    }) {"func_name" = "FileReader_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb62(%855 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %856 : !llvm.ptr):
      %857 = "mid.invariant"(%856) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %858 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb63] : () -> ()
    ^bb63:
      %859 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
      "llvm.store"(%859, %858) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb64] : () -> ()
    ^bb64:
      %860 = "llvm.extractvalue"(%855) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %861 = "llvm.load"(%858) : (!llvm.ptr) -> i32
      %862 = "llvm.getelementptr"(%860, %861) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %863 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %864 = "llvm.getelementptr"(%862, %863) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%864) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileReader_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb65(%865 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %866 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %867 : !llvm.ptr, %868 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %869 = "mid.wrap"(%865) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileReader">
      %870 = "hi.cast"(%869) {"from_typ" = !hi.fatptr<"FileReader">, "to_typ" = !hi.fatptr<"FileReader">, "from_typ_name" = "FileReader", "to_typ_name" = "FileReader"} : (!hi.fatptr<"FileReader">) -> !hi.fatptr<"FileReader">
      %871 = "mid.wrap"(%868) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %872 = "hi.cast"(%871) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %873 = "mid.unwrap"(%872) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %874 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %875 = "mid.method_call"(%874, %873) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %876 = "hi.cast"(%875) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %877 = "hi.cast"(%876) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%877) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "FileReader_process_fileFile", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb66(%878 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %879 : !llvm.ptr):
      %880 = "mid.invariant"(%879) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %881 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb67] : () -> ()
    ^bb68:
      %882 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%882, %881) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb69] : () -> ()
    ^bb67:
      %883 = "llvm.getelementptr"(%879) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %884 = "mid.checkflag"(%883) {"typ_name" = "File"} : (!llvm.ptr) -> !hi.bool
      %885 = "llvm.load"(%884) : (!hi.bool) -> i1
      "cf.cond_br"(%885) [^bb68, ^bb68] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb69:
      %886 = "llvm.extractvalue"(%878) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %887 = "llvm.load"(%881) : (!llvm.ptr) -> i32
      %888 = "llvm.getelementptr"(%886, %887) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %889 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %890 = "llvm.getelementptr"(%888, %889) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%890) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileReader_B_process_fileFile", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileWriter", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "FileWriter_getter_text", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.setter_def"() {"meth_name" = "FileWriter_setter_text", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "FileWriter_field_text", "getter_name" = "FileWriter_getter_text", "setter_name" = "FileWriter_setter_text"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "FileWriter_field_FileWriter_0", "id_hierarchy" = ["i64_typ"], "name_hierarchy" = ["i64"]} : () -> ()
    "mid.func"() ({
    ^bb70(%891 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %892 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %893 : !llvm.ptr, %894 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %895 = "mid.wrap"(%891) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileWriter">
      %896 = "hi.cast"(%895) {"from_typ" = !hi.fatptr<"FileWriter">, "to_typ" = !hi.fatptr<"FileWriter">, "from_typ_name" = "FileWriter", "to_typ_name" = "FileWriter"} : (!hi.fatptr<"FileWriter">) -> !hi.fatptr<"FileWriter">
      %897 = "mid.wrap"(%894) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %898 = "hi.cast"(%897) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %899 = "hi.cast"(%898) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.set_field"(%896, %899) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"FileWriter">, !hi.fatptr<"String">) -> ()
    }) {"func_name" = "FileWriter_init_textString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb71(%900 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %901 : !llvm.ptr):
      %902 = "mid.invariant"(%901) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %903 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb72] : () -> ()
    ^bb73:
      %904 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%904, %903) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb74] : () -> ()
    ^bb72:
      %905 = "llvm.getelementptr"(%901) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %906 = "mid.checkflag"(%905) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %907 = "llvm.load"(%906) : (!hi.bool) -> i1
      "cf.cond_br"(%907) [^bb73, ^bb73] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb74:
      %908 = "llvm.extractvalue"(%900) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %909 = "llvm.load"(%903) : (!llvm.ptr) -> i32
      %910 = "llvm.getelementptr"(%908, %909) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %911 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %912 = "llvm.getelementptr"(%910, %911) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%912) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileWriter_B_init_textString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb75(%913 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %914 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %915 : !llvm.ptr, %916 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %917 = "mid.wrap"(%913) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileWriter">
      %918 = "hi.cast"(%917) {"from_typ" = !hi.fatptr<"FileWriter">, "to_typ" = !hi.fatptr<"FileWriter">, "from_typ_name" = "FileWriter", "to_typ_name" = "FileWriter"} : (!hi.fatptr<"FileWriter">) -> !hi.fatptr<"FileWriter">
      %919 = "mid.wrap"(%916) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %920 = "hi.cast"(%919) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %921 = "mid.get_field"(%918) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!hi.fatptr<"FileWriter">) -> !hi.fatptr<"String">
      %922 = "hi.cast"(%921) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %923 = "mid.unwrap"(%922) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %924 = "mid.unwrap"(%920) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %925 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %926 = "mid.parameterizations_array"(%925) : (!llvm.ptr) -> !llvm.ptr
      %927 = "mid.method_call"(%926, %924, %923) {"offset" = 11 : i32, "vptrs" = [#none], "vtable_size" = 20 : i64, "ret_type" = i64, "ret_type_unq" = i64} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %928 = "hi.cast"(%927) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %929 = "hi.cast"(%928) {"from_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.return"(%929) : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "FileWriter_process_fileFile", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb76(%930 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %931 : !llvm.ptr):
      %932 = "mid.invariant"(%931) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %933 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb77] : () -> ()
    ^bb78:
      %934 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%934, %933) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb79] : () -> ()
    ^bb77:
      %935 = "llvm.getelementptr"(%931) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %936 = "mid.checkflag"(%935) {"typ_name" = "File"} : (!llvm.ptr) -> !hi.bool
      %937 = "llvm.load"(%936) : (!hi.bool) -> i1
      "cf.cond_br"(%937) [^bb78, ^bb78] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb79:
      %938 = "llvm.extractvalue"(%930) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %939 = "llvm.load"(%933) : (!llvm.ptr) -> i32
      %940 = "llvm.getelementptr"(%938, %939) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %941 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %942 = "llvm.getelementptr"(%940, %941) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%942) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileWriter_B_process_fileFile", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_FileSystem", "types" = []} : () -> ()
    "mid.arg_passer"() {"func_name" = "coroutine_lhulewjdmk_passer", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : () -> ()
    "mid.buffer_filler"() {"func_name" = "coroutine_lhulewjdmk_buffer_filler", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "yield_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : () -> ()
    "mid.func"() ({
    ^bb80(%943 : !llvm.ptr, %944 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %945 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %946 : !llvm.struct<(!llvm.ptr, i160)>):
      %947 = "mid.wrap"(%944) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %948 = "hi.cast"(%947) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %949 = "mid.wrap"(%945) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %950 = "hi.cast"(%949) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %951 = "mid.wrap"(%946) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>
      %952 = "hi.cast"(%951) {"from_typ" = !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>, "to_typ" = !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, "from_typ_name" = "union_typ", "to_typ_name" = "function_typ"} : (!hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>) -> !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>
      %953 = "mid.unwrap"(%948) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %954 = "mid.unwrap"(%950) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %955 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1)>, "class_name" = "File", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"File">
      %956 = "hi.cast"(%948) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %957 = "mid.unwrap"(%956) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %958 = "hi.cast"(%950) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %959 = "mid.unwrap"(%958) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %960 = "mid.unwrap"(%955) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %961 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %962 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %963 = "mid.parameterizations_array"(%961, %962) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%963, %960, %957, %959) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %964 = "mid.refer"(%955) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %965 = "mid.unwrap"(%964) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %966 = "mid.coro_create"(%952, %965) {"arg_passer" = @coroutine_lhulewjdmk_passer, "buffer_filler" = @coroutine_lhulewjdmk_buffer_filler} : (!hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>
      %967 = "mid.refer"(%966) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>) -> !hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>
      %968 = "mid.coro_call"(%967) : (!hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %969 = "mid.wrap"(%968) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.any
      %970 = "mid.unwrap"(%964) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %971 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%971, %970) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %972 = "mid.literal"() {"value" = false, "typ" = i1} : () -> !hi.bool
      %973 = "mid.unwrap"(%972) : (!hi.bool) -> i1
      %974 = "hi.cast"(%969) {"from_typ" = !hi.any, "to_typ" = !hi.any, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.any) -> !hi.any
      "mid.if"(%973) ({
        %975 = "hi.cast"(%974) {"from_typ" = !hi.any, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "any_typ", "to_typ_name" = "Exception"} : (!hi.any) -> !hi.fatptr<"Exception">
        %976 = "hi.cast"(%975) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Exception">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %977 = "mid.unwrap"(%976) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %978 = "mid.coro_yield"(%977) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %979 = "mid.wrap"(%978) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %980 = "hi.cast"(%975) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.any, "from_typ_name" = "Exception", "to_typ_name" = "any_typ"} : (!hi.fatptr<"Exception">) -> !hi.any
        "mid.assign"(%974, %980) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.any, !hi.any) -> ()
      }) : (i1) -> ()
      %981 = "llvm.load"(%967) : (!hi.coroutine<[!hi.any], !hi.any, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>) -> !llvm.ptr
      %982 = "mid.coro_get_result"(%981) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i160)>
      %983 = "mid.wrap"(%982) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>
      %984 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["FileSystem.T"]} : () -> !llvm.ptr
      %985 = "mid.checkflag"(%983) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %986 = "mid.unwrap"(%985) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %987 = "hi.cast"(%983) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>
      "mid.if"(%986) ({
        %988 = "hi.cast"(%987) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "FileSystem">
        %989 = "hi.cast"(%988) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.type_param<"T", !hi.any, "FileSystem">
        "mid.return"(%989) : (!hi.type_param<"T", !hi.any, "FileSystem">) -> ()
        %990 = "hi.cast"(%988) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>
        "mid.assign"(%987, %990) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb81(%991 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %992 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %993 = "mid.wrap"(%991) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>
      %994 = "mid.wrap"(%992) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"File">
      %995 = "hi.cast"(%994) {"from_typ" = !hi.fatptr<"File">, "to_typ" = !hi.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %996 = "mid.unwrap"(%995) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %997 = "mid.unwrap"(%993) : (!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %998 = "mid.parameterization"() {"id_hierarchy" = ["File"], "name_hierarchy" = ["File"]} : () -> !llvm.ptr
      %999 = "mid.parameterizations_array"(%998) : (!llvm.ptr) -> !llvm.ptr
      %1000 = "mid.method_call"(%999, %997, %996) {"offset" = 1 : i32, "vptrs" = [#none], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.type_param<"T", !hi.any, "FileProcessor">
      %1001 = "hi.cast"(%1000) {"from_typ" = !hi.type_param<"T", !hi.any, "FileProcessor">, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "FileProcessor">) -> !hi.type_param<"T", !hi.any, "FileSystem">
      %1002 = "hi.cast"(%1001) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.type_param<"T", !hi.any, "FileSystem">
      "mid.return"(%1002) : (!hi.type_param<"T", !hi.any, "FileSystem">) -> ()
    }) {"func_name" = "_functionliteral_awfntfvyax", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.arg_passer"() {"func_name" = "coroutine_kvgskolkuy_passer", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
    "mid.buffer_filler"() {"func_name" = "coroutine_kvgskolkuy_buffer_filler", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
    "mid.func"() ({
    ^bb82(%1003 : !llvm.ptr, %1004 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1005 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1006 : !llvm.struct<(!llvm.ptr, i160)>):
      %1007 = "mid.wrap"(%1004) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1008 = "hi.cast"(%1007) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1009 = "mid.wrap"(%1005) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1010 = "hi.cast"(%1009) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1011 = "mid.wrap"(%1006) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>
      %1012 = "hi.cast"(%1011) {"from_typ" = !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>, "to_typ" = !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, "from_typ_name" = "union_typ", "to_typ_name" = "FileProcessor"} : (!hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>) -> !hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>
      %1013 = "mid.unwrap"(%1008) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1014 = "mid.unwrap"(%1010) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1015 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1)>, "class_name" = "File", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !hi.fatptr<"File">
      %1016 = "hi.cast"(%1008) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1017 = "mid.unwrap"(%1016) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1018 = "hi.cast"(%1010) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1019 = "mid.unwrap"(%1018) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1020 = "mid.unwrap"(%1015) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1021 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1022 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1023 = "mid.parameterizations_array"(%1021, %1022) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1023, %1020, %1017, %1019) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1024 = "mid.refer"(%1015) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"File">) -> !hi.fatptr<"File">
      %1025 = "mid.addr_of"() {"global_name" = @_functionliteral_awfntfvyax} : () -> !llvm.ptr
      %1026 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "llvm.store"(%1025, %1026) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
      %1027 = "mid.unwrap"(%1012) : (!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1028 = "mid.unwrap"(%1024) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1029 = "mid.coro_create"(%1026, %1027, %1028) {"arg_passer" = @coroutine_kvgskolkuy_passer, "buffer_filler" = @coroutine_kvgskolkuy_buffer_filler} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>
      %1030 = "mid.refer"(%1029) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>) -> !hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>
      %1031 = "mid.coro_call"(%1030) : (!hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1032 = "mid.wrap"(%1031) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
      %1033 = "mid.unwrap"(%1024) : (!hi.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1034 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%1034, %1033) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 20 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1035 = "mid.checkflag"(%1032) {"typ_name" = "Exception"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %1036 = "mid.unwrap"(%1035) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %1037 = "hi.cast"(%1032) {"from_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
      "mid.if"(%1036) ({
        %1038 = "hi.cast"(%1037) {"from_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "to_typ" = !hi.fatptr<"Exception">, "from_typ_name" = "union_typ", "to_typ_name" = "Exception"} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !hi.fatptr<"Exception">
        %1039 = "hi.cast"(%1038) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Exception">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %1040 = "mid.unwrap"(%1039) : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1041 = "mid.coro_yield"(%1040) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %1042 = "mid.wrap"(%1041) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        %1043 = "hi.cast"(%1038) {"from_typ" = !hi.fatptr<"Exception">, "to_typ" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Exception">) -> !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>
        "mid.assign"(%1037, %1043) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %1044 = "llvm.load"(%1030) : (!hi.coroutine<[!hi.union<[!hi.fatptr<"Exception">, !hi.nil]>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>>) -> !llvm.ptr
      %1045 = "mid.coro_get_result"(%1044) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i160)>
      %1046 = "mid.wrap"(%1045) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>
      %1047 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["FileSystem.T"]} : () -> !llvm.ptr
      %1048 = "mid.checkflag"(%1046) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
      %1049 = "mid.unwrap"(%1048) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      %1050 = "hi.cast"(%1046) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>
      "mid.if"(%1049) ({
        %1051 = "hi.cast"(%1050) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "FileSystem">
        %1052 = "hi.cast"(%1051) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.type_param<"T", !hi.any, "FileSystem">
        "mid.return"(%1052) : (!hi.type_param<"T", !hi.any, "FileSystem">) -> ()
        %1053 = "hi.cast"(%1051) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>
        "mid.assign"(%1050, %1053) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>, !hi.union<[!hi.type_param<"T", !hi.any, "FileSystem">, !hi.nil]>) -> ()
      }) : (i1) -> ()
    }) {"func_name" = "FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb83(%1054 : !llvm.ptr):
      %1055 = "mid.invariant"(%1054) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1056 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb84] : () -> ()
    ^bb85:
      %1057 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
      "llvm.store"(%1057, %1056) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb86] : () -> ()
    ^bb87:
      %1058 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
      "llvm.store"(%1058, %1056) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb86] : () -> ()
    ^bb88:
      %1059 = "llvm.getelementptr"(%1054) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1060 = "mid.checkflag"(%1059) {"typ_name" = "FileProcessor"} : (!llvm.ptr) -> !hi.bool
      %1061 = "llvm.load"(%1060) : (!hi.bool) -> i1
      "cf.cond_br"(%1061) [^bb85, ^bb89] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb89:
      %1062 = "llvm.getelementptr"(%1054) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1063 = "mid.checkflag"(%1062) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %1064 = "llvm.load"(%1063) : (!hi.bool) -> i1
      "cf.cond_br"(%1064) [^bb87, ^bb87] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb90:
      %1065 = "llvm.getelementptr"(%1054) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1066 = "mid.checkflag"(%1065) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1067 = "llvm.load"(%1066) : (!hi.bool) -> i1
      "cf.cond_br"(%1067) [^bb88, ^bb88] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb84:
      %1068 = "llvm.getelementptr"(%1054) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1069 = "mid.checkflag"(%1068) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1070 = "llvm.load"(%1069) : (!hi.bool) -> i1
      "cf.cond_br"(%1070) [^bb90, ^bb90] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb86:
      %1071 = "mid.addr_of"() {"global_name" = @FileSystem} : () -> !llvm.ptr
      %1072 = "llvm.load"(%1056) : (!llvm.ptr) -> i32
      %1073 = "llvm.getelementptr"(%1071, %1072) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1074 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1075 = "llvm.getelementptr"(%1073, %1074) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1075) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb91(%1076 : !llvm.ptr, %1077 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1078 = "mid.wrap"(%1077) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1079 = "hi.cast"(%1078) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1080 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1081 = "hi.cast"(%1080) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1082 = "mid.create_buffer"(%1081) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1083 = "mid.refer"(%1082) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1084 = "mid.literal"() {"typ" = !llvm.array<2 x i8>, "value" = "rb"} : () -> !llvm.ptr
      %1085 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1083, %1085, %1084) {"typ" = !llvm.array<2 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1086 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1087 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1088 = "mid.unwrap"(%1083) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1089 = "mid.unwrap"(%1086) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1090 = "mid.unwrap"(%1087) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1091 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1092 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1093 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1094 = "hi.cast"(%1083) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1095 = "mid.unwrap"(%1094) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1096 = "hi.cast"(%1092) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1097 = "mid.unwrap"(%1096) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1098 = "hi.cast"(%1093) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1099 = "mid.unwrap"(%1098) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1100 = "mid.unwrap"(%1091) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1101 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1102 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1103 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1104 = "mid.parameterizations_array"(%1101, %1102, %1103) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1104, %1100, %1095, %1097, %1099) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1105 = "mid.new"() {"typ" = !llvm.struct<()>, "class_name" = "FileReader", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileReader">
      %1106 = "mid.unwrap"(%1105) : (!hi.fatptr<"FileReader">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1107 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%1107, %1106) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1108 = "hi.cast"(%1079) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1109 = "mid.unwrap"(%1108) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1110 = "hi.cast"(%1091) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1111 = "mid.unwrap"(%1110) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1112 = "hi.cast"(%1105) {"from_typ" = !hi.fatptr<"FileReader">, "to_typ" = !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>, "from_typ_name" = "FileReader", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileReader">) -> !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>
      %1113 = "mid.unwrap"(%1112) : (!hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1114 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1115 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1116 = "mid.parameterization"() {"id_hierarchy" = ["FileReader"], "name_hierarchy" = ["FileReader"]} : () -> !llvm.ptr
      %1117 = "mid.parameterizations_array"(%1114, %1115, %1116) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %1118 = "mid.class_method_call"(%1117, %1109, %1111, %1113) {"offset" = 0 : i32, "vptrs" = [#none, #none, #none], "vtable_size" = 7 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>, "class_name" = "FileSystem"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "FileSystem">
      %1119 = "hi.cast"(%1118) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "any_typ", "to_typ_name" = "String"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.fatptr<"String">
      %1120 = "hi.cast"(%1119) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%1120) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "FileSystem__Self_read_file_file_nameString", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb92(%1121 : !llvm.ptr):
      %1122 = "mid.invariant"(%1121) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1123 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb93] : () -> ()
    ^bb94:
      %1124 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%1124, %1123) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb95] : () -> ()
    ^bb93:
      %1125 = "llvm.getelementptr"(%1121) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1126 = "mid.checkflag"(%1125) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1127 = "llvm.load"(%1126) : (!hi.bool) -> i1
      "cf.cond_br"(%1127) [^bb94, ^bb94] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb95:
      %1128 = "mid.addr_of"() {"global_name" = @FileSystem} : () -> !llvm.ptr
      %1129 = "llvm.load"(%1123) : (!llvm.ptr) -> i32
      %1130 = "llvm.getelementptr"(%1128, %1129) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1131 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1132 = "llvm.getelementptr"(%1130, %1131) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1132) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystem_B__Self_read_file_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb96(%1133 : !llvm.ptr, %1134 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1135 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %1136 = "mid.wrap"(%1134) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1137 = "hi.cast"(%1136) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1138 = "mid.wrap"(%1135) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"String">
      %1139 = "hi.cast"(%1138) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1140 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1141 = "hi.cast"(%1140) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %1142 = "mid.create_buffer"(%1141) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %1143 = "mid.refer"(%1142) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1144 = "mid.literal"() {"typ" = !llvm.array<2 x i8>, "value" = "wb"} : () -> !llvm.ptr
      %1145 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%1143, %1145, %1144) {"typ" = !llvm.array<2 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %1146 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1147 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1148 = "mid.unwrap"(%1143) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1149 = "mid.unwrap"(%1146) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1150 = "mid.unwrap"(%1147) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1151 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %1152 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1153 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1154 = "hi.cast"(%1143) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %1155 = "mid.unwrap"(%1154) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %1156 = "hi.cast"(%1152) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1157 = "mid.unwrap"(%1156) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1158 = "hi.cast"(%1153) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %1159 = "mid.unwrap"(%1158) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %1160 = "mid.unwrap"(%1151) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1161 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %1162 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1163 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %1164 = "mid.parameterizations_array"(%1161, %1162, %1163) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1164, %1160, %1155, %1157, %1159) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %1165 = "mid.unwrap"(%1139) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1166 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileWriter", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !hi.fatptr<"FileWriter">
      %1167 = "hi.cast"(%1139) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1168 = "mid.unwrap"(%1167) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1169 = "mid.unwrap"(%1166) : (!hi.fatptr<"FileWriter">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1170 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1171 = "mid.parameterizations_array"(%1170) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%1171, %1169, %1168) {"offset" = 2 : i32, "vptrs" = [#none], "vtable_size" = 9 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %1172 = "hi.cast"(%1137) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1173 = "mid.unwrap"(%1172) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1174 = "hi.cast"(%1151) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      %1175 = "mid.unwrap"(%1174) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1176 = "hi.cast"(%1166) {"from_typ" = !hi.fatptr<"FileWriter">, "to_typ" = !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>, "from_typ_name" = "FileWriter", "to_typ_name" = "union_typ"} : (!hi.fatptr<"FileWriter">) -> !hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>
      %1177 = "mid.unwrap"(%1176) : (!hi.union<[!hi.fatptr<"FileProcessor", [!hi.type_param<"T", !hi.any, "FileSystem">]>, !hi.function<[!hi.fatptr<"File">], !hi.any, !hi.type_param<"T", !hi.any, "FileSystem">>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %1178 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1179 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %1180 = "mid.parameterization"() {"id_hierarchy" = ["FileWriter"], "name_hierarchy" = ["FileWriter"]} : () -> !llvm.ptr
      %1181 = "mid.parameterizations_array"(%1178, %1179, %1180) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      %1182 = "mid.class_method_call"(%1181, %1173, %1175, %1177) {"offset" = 0 : i32, "vptrs" = [#none, #none, #none], "vtable_size" = 7 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>, "class_name" = "FileSystem"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "FileSystem">
      %1183 = "hi.cast"(%1182) {"from_typ" = !hi.type_param<"T", !hi.any, "FileSystem">, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "any_typ", "to_typ_name" = "i64_typ"} : (!hi.type_param<"T", !hi.any, "FileSystem">) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
    }) {"func_name" = "FileSystem__Self_write_file_file_nameString_textString", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb97(%1184 : !llvm.ptr):
      %1185 = "mid.invariant"(%1184) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %1186 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb98] : () -> ()
    ^bb99:
      %1187 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%1187, %1186) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb100] : () -> ()
    ^bb101:
      %1188 = "llvm.getelementptr"(%1184) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1189 = "mid.checkflag"(%1188) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1190 = "llvm.load"(%1189) : (!hi.bool) -> i1
      "cf.cond_br"(%1190) [^bb99, ^bb99] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb98:
      %1191 = "llvm.getelementptr"(%1184) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %1192 = "mid.checkflag"(%1191) {"typ_name" = "String"} : (!llvm.ptr) -> !hi.bool
      %1193 = "llvm.load"(%1192) : (!hi.bool) -> i1
      "cf.cond_br"(%1193) [^bb101, ^bb101] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb100:
      %1194 = "mid.addr_of"() {"global_name" = @FileSystem} : () -> !llvm.ptr
      %1195 = "llvm.load"(%1186) : (!llvm.ptr) -> i32
      %1196 = "llvm.getelementptr"(%1194, %1195) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %1197 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %1198 = "llvm.getelementptr"(%1196, %1197) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%1198) : (!llvm.ptr) -> ()
    }) {"func_name" = "FileSystem_B__Self_write_file_file_nameString_textString", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "array"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 85 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Array", "methods" = [@Array_field_buffer, @Array_field_length, @Array_field_capacity, @Array_field_Array_0, @Array_B__Self_from_iterable_iterableIterableT, @Array_B_init_, @Array_B_init_capacityi32, @Array_B_init_lengthi32_capacityi32, @Array_B_init_bufferBufferT_lengthi32_capacityi32, @Array_B_length_, @Array_B_size_, @Array_B_capacity_, @Array_B_append_xT, @Array_B_extend_otherArrayT, @Array_B_reserve_new_capacityi32, @Array_B__index_xi32, @Array_B__set_index_xi32_valueT, @Array_B_unchecked_index_xi32, @Array_B_unchecked_insert_xi32_valueT, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT, @Array_B_interleave_otherIterableT, @Array_B_zip_otherIterableU, @Array_B_product_otherIterableU, @Array_B_repr_, @Array__Self_from_iterable_iterableIterableT, @Array_init_, @Array_init_capacityi32, @Array_init_lengthi32_capacityi32, @Array_init_bufferBufferT_lengthi32_capacityi32, @Array_length_, @Array_size_, @Array_capacity_, @Array_append_xT, @Array_extend_otherArrayT, @Array_reserve_new_capacityi32, @Array__index_xi32, @Array__set_index_xi32_valueT, @Array_unchecked_index_xi32, @Array_unchecked_insert_xi32_valueT, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Array_repr_, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_Bool, @Array_B_any_fFunctionT_to_Bool, @Array_B_enumerate_, @Array_B_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_Bool, @Array_B_chain_otherIterableT, @Array_B_interleave_otherIterableT, @Array_B_zip_otherIterableU, @Array_B_product_otherIterableU, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Array_B_repr_, @Array_repr_], "hash_tbl" = [18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable, @any_typ, @Container, @Array, @Representable, @Object], "offset_tbl" = [0 : i32, 0 : i32, 70 : i32, 10 : i32, 95 : i32, 10 : i32, 95 : i32, 95 : i32], "prime" = 4611686018427388331 : i64, "hash_id" = 13185201323315417072 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "data_size_fn" = "_data_size_Array", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "ArrayIterator", "methods" = [@ArrayIterator_field_array, @ArrayIterator_field_index, @ArrayIterator_field_ArrayIterator_0, @ArrayIterator_B_init_arrayArrayT, @ArrayIterator_B_next_, @ArrayIterator_init_arrayArrayT, @ArrayIterator_next_, @ArrayIterator_field_ArrayIterator_0, @ArrayIterator_B_next_, @ArrayIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, @ArrayIterator, @Iterator, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [20 : i32, 10 : i32, 0 : i32, 20 : i32, 10 : i32, 17 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 3447345754186651411 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "data_size_fn" = "_data_size_ArrayIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Array", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Array_getter_buffer", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferArray.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Array_setter_buffer", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferArray.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Array_field_buffer", "getter_name" = "Array_getter_buffer", "setter_name" = "Array_setter_buffer"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Array_getter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Array_setter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Array_field_length", "getter_name" = "Array_getter_length", "setter_name" = "Array_setter_length"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Array_getter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Array_setter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Array_field_capacity", "getter_name" = "Array_getter_capacity", "setter_name" = "Array_setter_capacity"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "Array_field_Array_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T"]} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.ptr, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %2 = "mid.wrap"(%1) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>
      %3 = "hi.cast"(%2) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>
      %4 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %5 = "mid.unwrap"(%4) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %6 = "mid.parameterizations_array"() : () -> !llvm.ptr
      "mid.method_call"(%6, %5) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 87 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %7 = "mid.refer"(%4) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %8 = "mid.unwrap"(%3) : (!hi.fatptr<"Iterable", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %9 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %10 = "mid.method_call"(%9, %8) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %11 = "hi.cast"(%10) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>
      %12 = "mid.refer"(%11) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.while"() ({
        %13 = "mid.unwrap"(%12) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %14 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %15 = "mid.method_call"(%14, %13) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %16 = "hi.cast"(%15) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Array">, !hi.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Array">, !hi.nil]>
        %17 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T"]} : () -> !llvm.ptr
        %18 = "mid.checkflag"(%16) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Array">, !hi.nil]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %19 = "mid.unwrap"(%18) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %20 = "hi.cast"(%16) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Array">, !hi.nil]>, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Array">, !hi.nil]>) -> !hi.type_param<"T", !hi.any, "Array">
        %21 = "hi.cast"(%20) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
        %22 = "mid.unwrap"(%21) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
        %23 = "mid.unwrap"(%7) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %24 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T"]} : () -> !llvm.ptr
        %25 = "mid.parameterizations_array"(%24) : (!llvm.ptr) -> !llvm.ptr
        %26 = "mid.method_call"(%25, %23, %22) {"offset" = 12 : i32, "vptrs" = ["any_typ"], "vtable_size" = 87 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
        %27 = "hi.cast"(%26) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
        %28 = "hi.cast"(%20) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
        "mid.assign"(%16, %28) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.type_param<"T", !hi.any, "Array">, !hi.nil]>, !hi.type_param<"T", !hi.any, "Array">) -> ()
      }) : () -> ()
      %29 = "hi.cast"(%7) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.return"(%29) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> ()
    }) {"func_name" = "Array__Self_from_iterable_iterableIterableT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%30 : !llvm.ptr):
      %31 = "mid.invariant"(%30) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %32 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb3:
      %33 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%33, %32) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb4] : () -> ()
    ^bb2:
      %34 = "llvm.getelementptr"(%30) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %35 = "mid.checkflag"(%34) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %36 = "llvm.load"(%35) : (!hi.bool) -> i1
      "cf.cond_br"(%36) [^bb3, ^bb3] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb4:
      %37 = "mid.addr_of"() {"global_name" = @Array} : () -> !llvm.ptr
      %38 = "llvm.load"(%32) : (!llvm.ptr) -> i32
      %39 = "llvm.getelementptr"(%37, %38) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %40 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %41 = "llvm.getelementptr"(%39, %40) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%41) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B__Self_from_iterable_iterableIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb5(%42 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %43 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %44 : !llvm.ptr):
      %45 = "mid.wrap"(%42) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %46 = "hi.cast"(%45) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %47 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %48 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T"]} : () -> !llvm.ptr
      %49 = "hi.cast"(%47) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %50 = "mid.create_buffer"(%49, %48) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !llvm.ptr) -> !llvm.ptr
      %51 = "hi.cast"(%50) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      "mid.set_field"(%46, %51) {"offset" = 0 : i64, "vtable_bytes" = 696 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> ()
      %52 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %53 = "hi.cast"(%52) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%46, %53) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %54 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %55 = "hi.cast"(%54) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%46, %55) {"offset" = 2 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Array_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%56 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %57 : !llvm.ptr):
      %58 = "mid.invariant"(%57) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %59 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb7] : () -> ()
    ^bb7:
      %60 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%60, %59) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb8] : () -> ()
    ^bb8:
      %61 = "llvm.extractvalue"(%56) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %62 = "llvm.load"(%59) : (!llvm.ptr) -> i32
      %63 = "llvm.getelementptr"(%61, %62) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %64 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %65 = "llvm.getelementptr"(%63, %64) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%65) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb9(%66 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %67 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %68 : !llvm.ptr, %69 : i32):
      %70 = "mid.wrap"(%66) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %71 = "hi.cast"(%70) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %72 = "mid.wrap"(%69) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %73 = "hi.cast"(%72) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %74 = "hi.cast"(%73) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%71, %74) {"offset" = 2 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %75 = "mid.get_field"(%71) {"offset" = 2 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %76 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T"]} : () -> !llvm.ptr
      %77 = "hi.cast"(%75) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %78 = "mid.create_buffer"(%77, %76) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !llvm.ptr) -> !llvm.ptr
      %79 = "hi.cast"(%78) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      "mid.set_field"(%71, %79) {"offset" = 0 : i64, "vtable_bytes" = 696 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> ()
      %80 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %81 = "hi.cast"(%80) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%71, %81) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Array_init_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb10(%82 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %83 : !llvm.ptr):
      %84 = "mid.invariant"(%83) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %85 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb11] : () -> ()
    ^bb12:
      %86 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
      "llvm.store"(%86, %85) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb13] : () -> ()
    ^bb11:
      %87 = "llvm.getelementptr"(%83) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %88 = "mid.checkflag"(%87) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %89 = "llvm.load"(%88) : (!hi.bool) -> i1
      "cf.cond_br"(%89) [^bb12, ^bb12] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb13:
      %90 = "llvm.extractvalue"(%82) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %91 = "llvm.load"(%85) : (!llvm.ptr) -> i32
      %92 = "llvm.getelementptr"(%90, %91) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %93 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %94 = "llvm.getelementptr"(%92, %93) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%94) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_init_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb14(%95 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %96 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %97 : !llvm.ptr, %98 : i32, %99 : i32):
      %100 = "mid.wrap"(%95) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %101 = "hi.cast"(%100) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %102 = "mid.wrap"(%98) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %103 = "hi.cast"(%102) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %104 = "hi.cast"(%103) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%101, %104) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %105 = "mid.wrap"(%99) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %106 = "hi.cast"(%105) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %107 = "hi.cast"(%106) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%101, %107) {"offset" = 2 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %108 = "mid.get_field"(%101) {"offset" = 2 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %109 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T"]} : () -> !llvm.ptr
      %110 = "hi.cast"(%108) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %111 = "mid.create_buffer"(%110, %109) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !llvm.ptr) -> !llvm.ptr
      %112 = "hi.cast"(%111) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      "mid.set_field"(%101, %112) {"offset" = 0 : i64, "vtable_bytes" = 696 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> ()
    }) {"func_name" = "Array_init_lengthi32_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb15(%113 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %114 : !llvm.ptr):
      %115 = "mid.invariant"(%114) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %116 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb17:
      %117 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
      "llvm.store"(%117, %116) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb19:
      %118 = "llvm.getelementptr"(%114) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %119 = "mid.checkflag"(%118) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %120 = "llvm.load"(%119) : (!hi.bool) -> i1
      "cf.cond_br"(%120) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb16:
      %121 = "llvm.getelementptr"(%114) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %122 = "mid.checkflag"(%121) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %123 = "llvm.load"(%122) : (!hi.bool) -> i1
      "cf.cond_br"(%123) [^bb19, ^bb19] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb18:
      %124 = "llvm.extractvalue"(%113) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %125 = "llvm.load"(%116) : (!llvm.ptr) -> i32
      %126 = "llvm.getelementptr"(%124, %125) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %127 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %128 = "llvm.getelementptr"(%126, %127) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%128) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_init_lengthi32_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb20(%129 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %130 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %131 : !llvm.ptr, %132 : !llvm.struct<(!llvm.ptr)>, %133 : i32, %134 : i32):
      %135 = "mid.wrap"(%129) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %136 = "hi.cast"(%135) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %137 = "mid.wrap"(%132) : (!llvm.struct<(!llvm.ptr)>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %138 = "hi.cast"(%137) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %139 = "hi.cast"(%138) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      "mid.set_field"(%136, %139) {"offset" = 0 : i64, "vtable_bytes" = 696 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> ()
      %140 = "mid.wrap"(%133) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %141 = "hi.cast"(%140) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %142 = "hi.cast"(%141) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%136, %142) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %143 = "mid.wrap"(%134) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %144 = "hi.cast"(%143) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %145 = "hi.cast"(%144) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%136, %145) {"offset" = 2 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Array_init_bufferBufferT_lengthi32_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb21(%146 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %147 : !llvm.ptr):
      %148 = "mid.invariant"(%147) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %149 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb22] : () -> ()
    ^bb23:
      %150 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
      "llvm.store"(%150, %149) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb24] : () -> ()
    ^bb25:
      %151 = "llvm.getelementptr"(%147) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %152 = "mid.checkflag"(%151) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %153 = "llvm.load"(%152) : (!hi.bool) -> i1
      "cf.cond_br"(%153) [^bb23, ^bb23] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb26:
      %154 = "llvm.getelementptr"(%147) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %155 = "mid.checkflag"(%154) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %156 = "llvm.load"(%155) : (!hi.bool) -> i1
      "cf.cond_br"(%156) [^bb25, ^bb25] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %157 = "llvm.getelementptr"(%147) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %158 = "mid.checkflag"(%157) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.bool
      %159 = "llvm.load"(%158) : (!hi.bool) -> i1
      "cf.cond_br"(%159) [^bb26, ^bb26] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb24:
      %160 = "llvm.extractvalue"(%146) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %161 = "llvm.load"(%149) : (!llvm.ptr) -> i32
      %162 = "llvm.getelementptr"(%160, %161) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %163 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %164 = "llvm.getelementptr"(%162, %163) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%164) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_init_bufferBufferT_lengthi32_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb27(%165 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %166 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %167 : !llvm.ptr):
      %168 = "mid.wrap"(%165) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %169 = "hi.cast"(%168) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %170 = "mid.get_field"(%169) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %171 = "hi.cast"(%170) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%171) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Array_length_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb28(%172 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %173 : !llvm.ptr):
      %174 = "mid.invariant"(%173) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %175 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb29] : () -> ()
    ^bb29:
      %176 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
      "llvm.store"(%176, %175) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb30] : () -> ()
    ^bb30:
      %177 = "llvm.extractvalue"(%172) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %178 = "llvm.load"(%175) : (!llvm.ptr) -> i32
      %179 = "llvm.getelementptr"(%177, %178) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %180 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %181 = "llvm.getelementptr"(%179, %180) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%181) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_length_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb31(%182 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %183 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %184 : !llvm.ptr):
      %185 = "mid.wrap"(%182) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %186 = "hi.cast"(%185) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %187 = "mid.get_field"(%186) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %188 = "hi.cast"(%187) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%188) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Array_size_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb32(%189 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %190 : !llvm.ptr):
      %191 = "mid.invariant"(%190) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %192 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb33] : () -> ()
    ^bb33:
      %193 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
      "llvm.store"(%193, %192) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb34] : () -> ()
    ^bb34:
      %194 = "llvm.extractvalue"(%189) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %195 = "llvm.load"(%192) : (!llvm.ptr) -> i32
      %196 = "llvm.getelementptr"(%194, %195) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %197 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %198 = "llvm.getelementptr"(%196, %197) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%198) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_size_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb35(%199 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %200 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %201 : !llvm.ptr):
      %202 = "mid.wrap"(%199) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %203 = "hi.cast"(%202) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %204 = "mid.get_field"(%203) {"offset" = 2 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %205 = "hi.cast"(%204) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%205) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Array_capacity_", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb36(%206 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %207 : !llvm.ptr):
      %208 = "mid.invariant"(%207) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %209 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb37] : () -> ()
    ^bb37:
      %210 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
      "llvm.store"(%210, %209) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb38] : () -> ()
    ^bb38:
      %211 = "llvm.extractvalue"(%206) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %212 = "llvm.load"(%209) : (!llvm.ptr) -> i32
      %213 = "llvm.getelementptr"(%211, %212) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %214 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %215 = "llvm.getelementptr"(%213, %214) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%215) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb39(%216 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %217 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %218 : !llvm.ptr, %219 : !llvm.struct<(!llvm.ptr, i160)>):
      %220 = "mid.wrap"(%216) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %221 = "hi.cast"(%220) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %222 = "mid.wrap"(%219) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Array">
      %223 = "hi.cast"(%222) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %224 = "mid.get_field"(%221) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %225 = "mid.get_field"(%221) {"offset" = 2 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %226 = "mid.unwrap"(%224) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %227 = "mid.unwrap"(%225) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %228 = "mid.comparison"(%226, %227) {"op" = "GE"} : (i32, i32) -> i1
      %229 = "mid.wrap"(%228) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %230 = "mid.unwrap"(%229) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%230) ({
        %231 = "mid.get_field"(%221) {"offset" = 2 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %232 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %233 = "mid.unwrap"(%231) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %234 = "mid.unwrap"(%232) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %235 = "mid.arithmetic"(%233, %234) {"op" = "MUL"} : (i32, i32) -> i32
        %236 = "mid.wrap"(%235) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %237 = "hi.cast"(%236) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %238 = "mid.unwrap"(%237) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %239 = "mid.unwrap"(%221) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %240 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %241 = "mid.parameterizations_array"(%240) : (!llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%241, %239, %238) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 87 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      }) : (i1) -> ()
      %242 = "mid.get_field"(%221) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %243 = "mid.get_field"(%221) {"offset" = 0 : i64, "vtable_bytes" = 696 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %244 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T"]} : () -> !llvm.ptr
      %245 = "hi.cast"(%223) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %246 = "hi.cast"(%242) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.buffer_set"(%243, %246, %245, %244) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Array">, !llvm.ptr) -> ()
      %247 = "mid.get_field"(%221) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %248 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %249 = "mid.unwrap"(%247) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %250 = "mid.unwrap"(%248) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %251 = "mid.arithmetic"(%249, %250) {"op" = "ADD"} : (i32, i32) -> i32
      %252 = "mid.wrap"(%251) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %253 = "hi.cast"(%252) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%221, %253) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %254 = "hi.cast"(%221) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.return"(%254) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> ()
    }) {"func_name" = "Array_append_xT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb40(%255 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %256 : !llvm.ptr):
      %257 = "mid.invariant"(%256) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %258 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb41] : () -> ()
    ^bb42:
      %259 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
      "llvm.store"(%259, %258) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb43] : () -> ()
    ^bb41:
      %260 = "llvm.getelementptr"(%256) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %261 = "mid.checkflag"(%260) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %262 = "llvm.load"(%261) : (!hi.bool) -> i1
      "cf.cond_br"(%262) [^bb42, ^bb42] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb43:
      %263 = "llvm.extractvalue"(%255) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %264 = "llvm.load"(%258) : (!llvm.ptr) -> i32
      %265 = "llvm.getelementptr"(%263, %264) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %266 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %267 = "llvm.getelementptr"(%265, %266) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%267) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_append_xT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb44(%268 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %269 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %270 : !llvm.ptr, %271 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %272 = "mid.wrap"(%268) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %273 = "hi.cast"(%272) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %274 = "mid.wrap"(%271) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %275 = "hi.cast"(%274) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %276 = "mid.unwrap"(%275) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %277 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %278 = "mid.method_call"(%277, %276) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 87 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %279 = "hi.cast"(%278) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %280 = "mid.get_field"(%273) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %281 = "mid.refer"(%280) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %282 = "mid.unwrap"(%281) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %283 = "mid.unwrap"(%279) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %284 = "mid.arithmetic"(%282, %283) {"op" = "ADD"} : (i32, i32) -> i32
      %285 = "mid.wrap"(%284) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %286 = "hi.cast"(%285) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %287 = "mid.unwrap"(%286) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %288 = "mid.unwrap"(%273) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %289 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %290 = "mid.parameterizations_array"(%289) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%290, %288, %287) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 87 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %291 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %292 = "mid.unwrap"(%291) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %293 = "mid.unwrap"(%279) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %294 = "mid.comparison"(%292, %293) {"op" = "LT"} : (i32, i32) -> i1
        %295 = "mid.wrap"(%294) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %296 = "mid.unwrap"(%295) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %297 = "mid.unwrap"(%291) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %298 = "mid.unwrap"(%281) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %299 = "mid.arithmetic"(%297, %298) {"op" = "ADD"} : (i32, i32) -> i32
        %300 = "mid.wrap"(%299) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %301 = "hi.cast"(%291) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %302 = "mid.unwrap"(%301) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %303 = "mid.unwrap"(%275) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %304 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %305 = "mid.parameterizations_array"(%304) : (!llvm.ptr) -> !llvm.ptr
        %306 = "mid.method_call"(%305, %303, %302) {"offset" = 17 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 87 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
        %307 = "hi.cast"(%306) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
        %308 = "hi.cast"(%300) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %309 = "mid.unwrap"(%308) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %310 = "hi.cast"(%307) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
        %311 = "mid.unwrap"(%310) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
        %312 = "mid.unwrap"(%273) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %313 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %314 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T"]} : () -> !llvm.ptr
        %315 = "mid.parameterizations_array"(%313, %314) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%315, %312, %309, %311) {"offset" = 18 : i32, "vptrs" = ["i32_typ", "any_typ"], "vtable_size" = 87 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %316 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %317 = "mid.unwrap"(%291) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %318 = "mid.unwrap"(%316) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %319 = "mid.arithmetic"(%317, %318) {"op" = "ADD"} : (i32, i32) -> i32
        %320 = "mid.wrap"(%319) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %321 = "hi.cast"(%320) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%291, %321) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
      %322 = "hi.cast"(%285) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%273, %322) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %323 = "hi.cast"(%273) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.return"(%323) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> ()
    }) {"func_name" = "Array_extend_otherArrayT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb45(%324 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %325 : !llvm.ptr):
      %326 = "mid.invariant"(%325) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %327 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb46] : () -> ()
    ^bb47:
      %328 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
      "llvm.store"(%328, %327) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb48] : () -> ()
    ^bb46:
      %329 = "llvm.getelementptr"(%325) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %330 = "mid.checkflag"(%329) {"typ_name" = "Array"} : (!llvm.ptr) -> !hi.bool
      %331 = "llvm.load"(%330) : (!hi.bool) -> i1
      "cf.cond_br"(%331) [^bb47, ^bb47] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb48:
      %332 = "llvm.extractvalue"(%324) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %333 = "llvm.load"(%327) : (!llvm.ptr) -> i32
      %334 = "llvm.getelementptr"(%332, %333) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %335 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %336 = "llvm.getelementptr"(%334, %335) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%336) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_extend_otherArrayT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb49(%337 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %338 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %339 : !llvm.ptr, %340 : i32):
      %341 = "mid.wrap"(%337) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %342 = "hi.cast"(%341) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %343 = "mid.wrap"(%340) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %344 = "hi.cast"(%343) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %345 = "mid.get_field"(%342) {"offset" = 2 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %346 = "mid.unwrap"(%344) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %347 = "mid.unwrap"(%345) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %348 = "mid.comparison"(%346, %347) {"op" = "LE"} : (i32, i32) -> i1
      %349 = "mid.wrap"(%348) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %350 = "mid.unwrap"(%349) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%350) ({
        "mid.return"() : () -> ()
      }) : (i1) -> ()
      %351 = "hi.cast"(%344) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%342, %351) {"offset" = 2 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %352 = "mid.get_field"(%342) {"offset" = 0 : i64, "vtable_bytes" = 696 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %353 = "mid.refer"(%352) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %354 = "mid.get_field"(%342) {"offset" = 2 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %355 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T"]} : () -> !llvm.ptr
      %356 = "hi.cast"(%354) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %357 = "mid.create_buffer"(%356, %355) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !llvm.ptr) -> !llvm.ptr
      %358 = "hi.cast"(%357) {"from_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      "mid.set_field"(%342, %358) {"offset" = 0 : i64, "vtable_bytes" = 696 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> ()
      %359 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.while"() ({
        %360 = "mid.get_field"(%342) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %361 = "mid.unwrap"(%359) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %362 = "mid.unwrap"(%360) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %363 = "mid.comparison"(%361, %362) {"op" = "LT"} : (i32, i32) -> i1
        %364 = "mid.wrap"(%363) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %365 = "mid.unwrap"(%364) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      }, {
        %366 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T"]} : () -> !llvm.ptr
        %367 = "hi.cast"(%359) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %368 = "mid.buffer_get"(%353, %367, %366) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !llvm.ptr) -> !hi.type_param<"T", !hi.any, "Array">
        %369 = "mid.get_field"(%342) {"offset" = 0 : i64, "vtable_bytes" = 696 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
        %370 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T"]} : () -> !llvm.ptr
        %371 = "hi.cast"(%368) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
        %372 = "hi.cast"(%359) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        "mid.buffer_set"(%369, %372, %371, %370) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Array">, !llvm.ptr) -> ()
        %373 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %374 = "mid.unwrap"(%359) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %375 = "mid.unwrap"(%373) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %376 = "mid.arithmetic"(%374, %375) {"op" = "ADD"} : (i32, i32) -> i32
        %377 = "mid.wrap"(%376) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %378 = "hi.cast"(%377) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%359, %378) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
    }) {"func_name" = "Array_reserve_new_capacityi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb50(%379 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %380 : !llvm.ptr):
      %381 = "mid.invariant"(%380) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %382 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb51] : () -> ()
    ^bb52:
      %383 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
      "llvm.store"(%383, %382) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb53] : () -> ()
    ^bb51:
      %384 = "llvm.getelementptr"(%380) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %385 = "mid.checkflag"(%384) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %386 = "llvm.load"(%385) : (!hi.bool) -> i1
      "cf.cond_br"(%386) [^bb52, ^bb52] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb53:
      %387 = "llvm.extractvalue"(%379) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %388 = "llvm.load"(%382) : (!llvm.ptr) -> i32
      %389 = "llvm.getelementptr"(%387, %388) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %390 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %391 = "llvm.getelementptr"(%389, %390) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%391) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_reserve_new_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb54(%392 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %393 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %394 : !llvm.ptr, %395 : i32):
      %396 = "mid.wrap"(%392) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %397 = "hi.cast"(%396) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %398 = "mid.wrap"(%395) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %399 = "hi.cast"(%398) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %400 = "mid.get_field"(%397) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %401 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %402 = "mid.unwrap"(%400) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %403 = "mid.unwrap"(%401) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %404 = "mid.arithmetic"(%402, %403) {"op" = "SUB"} : (i32, i32) -> i32
      %405 = "mid.wrap"(%404) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %406 = "mid.unwrap"(%399) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %407 = "mid.unwrap"(%405) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %408 = "mid.comparison"(%406, %407) {"op" = "GT"} : (i32, i32) -> i1
      %409 = "mid.wrap"(%408) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %410 = "mid.get_field"(%397) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %411 = "mid.unwrap"(%410) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %412 = "mid.unwrap"(%399) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %413 = "mid.arithmetic"(%411, %412) {"op" = "ADD"} : (i32, i32) -> i32
      %414 = "mid.wrap"(%413) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %415 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %416 = "mid.unwrap"(%414) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %417 = "mid.unwrap"(%415) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %418 = "mid.comparison"(%416, %417) {"op" = "LT"} : (i32, i32) -> i1
      %419 = "mid.wrap"(%418) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %420 = "mid.unwrap"(%409) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      %421 = "mid.logical"(%420) ({
        func.return %419 : !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      }) {"op" = "or"} : (i1) -> i1
      %422 = "mid.wrap"(%421) : (i1) -> !hi.bool
      %423 = "mid.unwrap"(%422) : (!hi.bool) -> i1
      "mid.if"(%423) ({
        %424 = "mid.get_field"(%397) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %425 = "mid.unwrap"(%424) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %426 = "mid.unwrap"(%399) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %427 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "OutOfBounds", "num_data_fields" = 6 : i32, "region_id" = "none"} : () -> !hi.fatptr<"OutOfBounds">
        %428 = "mid.get_field"(%397) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %429 = "hi.cast"(%428) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %430 = "mid.unwrap"(%429) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %431 = "hi.cast"(%399) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %432 = "mid.unwrap"(%431) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %433 = "mid.unwrap"(%427) : (!hi.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %434 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %435 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %436 = "mid.parameterizations_array"(%434, %435) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%436, %433, %430, %432) {"offset" = 6 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 37 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
        %437 = "mid.literal"() {"value" = 85 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %438 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %439 = "hi.cast"(%438) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %440 = "mid.create_buffer"(%439) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %441 = "mid.refer"(%440) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %442 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\array.mini"} : () -> !llvm.ptr
        %443 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%441, %443, %442) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %444 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %445 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %446 = "mid.unwrap"(%441) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %447 = "mid.unwrap"(%444) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %448 = "mid.unwrap"(%445) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %449 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %450 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %451 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %452 = "hi.cast"(%441) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %453 = "mid.unwrap"(%452) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %454 = "hi.cast"(%450) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %455 = "mid.unwrap"(%454) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %456 = "hi.cast"(%451) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %457 = "mid.unwrap"(%456) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %458 = "mid.unwrap"(%449) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %459 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %460 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %461 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %462 = "mid.parameterizations_array"(%459, %460, %461) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%462, %458, %453, %455, %457) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %463 = "hi.cast"(%437) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %464 = "mid.unwrap"(%463) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %465 = "hi.cast"(%449) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %466 = "mid.unwrap"(%465) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %467 = "mid.unwrap"(%427) : (!hi.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %468 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %469 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %470 = "mid.parameterizations_array"(%468, %469) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%470, %467, %464, %466) {"offset" = 9 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 37 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %471 = "hi.cast"(%427) {"from_typ" = !hi.fatptr<"OutOfBounds">, "to_typ" = !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>, "from_typ_name" = "OutOfBounds", "to_typ_name" = "union_typ"} : (!hi.fatptr<"OutOfBounds">) -> !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>
        %472 = "mid.unwrap"(%471) : (!hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %473 = "mid.coro_yield"(%472) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %474 = "mid.wrap"(%473) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>
      }) : (i1) -> ()
      %475 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %476 = "mid.unwrap"(%399) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %477 = "mid.unwrap"(%475) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %478 = "mid.comparison"(%476, %477) {"op" = "LT"} : (i32, i32) -> i1
      %479 = "mid.wrap"(%478) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %480 = "mid.unwrap"(%479) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%480) ({
        %481 = "mid.get_field"(%397) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %482 = "mid.unwrap"(%481) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %483 = "mid.unwrap"(%399) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %484 = "mid.arithmetic"(%482, %483) {"op" = "ADD"} : (i32, i32) -> i32
        %485 = "mid.wrap"(%484) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %486 = "hi.cast"(%485) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%399, %486) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : (i1) -> ()
      %487 = "hi.cast"(%399) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %488 = "mid.unwrap"(%487) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %489 = "mid.unwrap"(%397) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %490 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %491 = "mid.parameterizations_array"(%490) : (!llvm.ptr) -> !llvm.ptr
      %492 = "mid.method_call"(%491, %489, %488) {"offset" = 17 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 87 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
      %493 = "hi.cast"(%492) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %494 = "hi.cast"(%493) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      "mid.return"(%494) : (!hi.type_param<"T", !hi.any, "Array">) -> ()
    }) {"func_name" = "Array__index_xi32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.fatptr<"OutOfBounds">} : () -> ()
    "mid.func"() ({
    ^bb55(%495 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %496 : !llvm.ptr):
      %497 = "mid.invariant"(%496) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %498 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb56] : () -> ()
    ^bb57:
      %499 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
      "llvm.store"(%499, %498) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb58] : () -> ()
    ^bb56:
      %500 = "llvm.getelementptr"(%496) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %501 = "mid.checkflag"(%500) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %502 = "llvm.load"(%501) : (!hi.bool) -> i1
      "cf.cond_br"(%502) [^bb57, ^bb57] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb58:
      %503 = "llvm.extractvalue"(%495) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %504 = "llvm.load"(%498) : (!llvm.ptr) -> i32
      %505 = "llvm.getelementptr"(%503, %504) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %506 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %507 = "llvm.getelementptr"(%505, %506) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%507) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B__index_xi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb59(%508 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %509 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %510 : !llvm.ptr, %511 : i32, %512 : !llvm.struct<(!llvm.ptr, i160)>):
      %513 = "mid.wrap"(%508) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %514 = "hi.cast"(%513) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %515 = "mid.wrap"(%511) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %516 = "hi.cast"(%515) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %517 = "mid.wrap"(%512) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Array">
      %518 = "hi.cast"(%517) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %519 = "mid.get_field"(%514) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %520 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %521 = "mid.unwrap"(%519) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %522 = "mid.unwrap"(%520) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %523 = "mid.arithmetic"(%521, %522) {"op" = "SUB"} : (i32, i32) -> i32
      %524 = "mid.wrap"(%523) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %525 = "mid.unwrap"(%516) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %526 = "mid.unwrap"(%524) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %527 = "mid.comparison"(%525, %526) {"op" = "GT"} : (i32, i32) -> i1
      %528 = "mid.wrap"(%527) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %529 = "mid.get_field"(%514) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %530 = "mid.unwrap"(%529) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %531 = "mid.unwrap"(%516) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %532 = "mid.arithmetic"(%530, %531) {"op" = "ADD"} : (i32, i32) -> i32
      %533 = "mid.wrap"(%532) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %534 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %535 = "mid.unwrap"(%533) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %536 = "mid.unwrap"(%534) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %537 = "mid.comparison"(%535, %536) {"op" = "LT"} : (i32, i32) -> i1
      %538 = "mid.wrap"(%537) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %539 = "mid.unwrap"(%528) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      %540 = "mid.logical"(%539) ({
        func.return %538 : !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      }) {"op" = "or"} : (i1) -> i1
      %541 = "mid.wrap"(%540) : (i1) -> !hi.bool
      %542 = "mid.unwrap"(%541) : (!hi.bool) -> i1
      "mid.if"(%542) ({
        %543 = "mid.get_field"(%514) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %544 = "mid.unwrap"(%543) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %545 = "mid.unwrap"(%516) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %546 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i64)>, "class_name" = "OutOfBounds", "num_data_fields" = 6 : i32, "region_id" = "none"} : () -> !hi.fatptr<"OutOfBounds">
        %547 = "mid.get_field"(%514) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %548 = "hi.cast"(%547) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %549 = "mid.unwrap"(%548) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %550 = "hi.cast"(%516) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %551 = "mid.unwrap"(%550) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %552 = "mid.unwrap"(%546) : (!hi.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %553 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %554 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %555 = "mid.parameterizations_array"(%553, %554) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%555, %552, %549, %551) {"offset" = 6 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 37 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
        %556 = "mid.literal"() {"value" = 93 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %557 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %558 = "hi.cast"(%557) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
        %559 = "mid.create_buffer"(%558) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
        %560 = "mid.refer"(%559) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %561 = "mid.literal"() {"typ" = !llvm.array<56 x i8>, "value" = "C:\\Users\\PaulK\\OneDrive\\Documents\\PL\\PyPL\\lib\\array.mini"} : () -> !llvm.ptr
        %562 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mid.buffer_set"(%560, %562, %561) {"typ" = !llvm.array<56 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
        %563 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %564 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %565 = "mid.unwrap"(%560) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %566 = "mid.unwrap"(%563) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %567 = "mid.unwrap"(%564) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %568 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
        %569 = "mid.literal"() {"value" = 56 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %570 = "mid.literal"() {"value" = 57 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %571 = "hi.cast"(%560) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
        %572 = "mid.unwrap"(%571) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
        %573 = "hi.cast"(%569) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %574 = "mid.unwrap"(%573) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %575 = "hi.cast"(%570) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %576 = "mid.unwrap"(%575) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %577 = "mid.unwrap"(%568) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %578 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %579 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %580 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %581 = "mid.parameterizations_array"(%578, %579, %580) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%581, %577, %572, %574, %576) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %582 = "hi.cast"(%556) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %583 = "mid.unwrap"(%582) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %584 = "hi.cast"(%568) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
        %585 = "mid.unwrap"(%584) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %586 = "mid.unwrap"(%546) : (!hi.fatptr<"OutOfBounds">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %587 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %588 = "mid.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %589 = "mid.parameterizations_array"(%587, %588) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mid.method_call"(%589, %586, %583, %585) {"offset" = 9 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 37 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %590 = "hi.cast"(%546) {"from_typ" = !hi.fatptr<"OutOfBounds">, "to_typ" = !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>, "from_typ_name" = "OutOfBounds", "to_typ_name" = "union_typ"} : (!hi.fatptr<"OutOfBounds">) -> !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>
        %591 = "mid.unwrap"(%590) : (!hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %592 = "mid.coro_yield"(%591) {"cold" = true} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %593 = "mid.wrap"(%592) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"OutOfBounds">, !hi.nil]>
      }) : (i1) -> ()
      %594 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %595 = "mid.unwrap"(%516) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %596 = "mid.unwrap"(%594) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %597 = "mid.comparison"(%595, %596) {"op" = "LT"} : (i32, i32) -> i1
      %598 = "mid.wrap"(%597) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %599 = "mid.unwrap"(%598) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%599) ({
        %600 = "mid.get_field"(%514) {"offset" = 1 : i64, "vtable_bytes" = 696 : i32, "original_type" = i32} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %601 = "mid.unwrap"(%600) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %602 = "mid.unwrap"(%516) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
        %603 = "mid.arithmetic"(%601, %602) {"op" = "ADD"} : (i32, i32) -> i32
        %604 = "mid.wrap"(%603) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %605 = "hi.cast"(%604) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%516, %605) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : (i1) -> ()
      %606 = "hi.cast"(%516) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %607 = "mid.unwrap"(%606) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %608 = "hi.cast"(%518) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %609 = "mid.unwrap"(%608) : (!hi.type_param<"T", !hi.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
      %610 = "mid.unwrap"(%514) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %611 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %612 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T"]} : () -> !llvm.ptr
      %613 = "mid.parameterizations_array"(%611, %612) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%613, %610, %607, %609) {"offset" = 18 : i32, "vptrs" = ["i32_typ", "any_typ"], "vtable_size" = 87 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) {"func_name" = "Array__set_index_xi32_valueT", "result_type" = !llvm.void, "yield_type" = !hi.fatptr<"OutOfBounds">} : () -> ()
    "mid.func"() ({
    ^bb60(%614 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %615 : !llvm.ptr):
      %616 = "mid.invariant"(%615) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %617 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb61] : () -> ()
    ^bb62:
      %618 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
      "llvm.store"(%618, %617) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb63] : () -> ()
    ^bb64:
      %619 = "llvm.getelementptr"(%615) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %620 = "mid.checkflag"(%619) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %621 = "llvm.load"(%620) : (!hi.bool) -> i1
      "cf.cond_br"(%621) [^bb62, ^bb62] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb61:
      %622 = "llvm.getelementptr"(%615) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %623 = "mid.checkflag"(%622) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %624 = "llvm.load"(%623) : (!hi.bool) -> i1
      "cf.cond_br"(%624) [^bb64, ^bb64] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb63:
      %625 = "llvm.extractvalue"(%614) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %626 = "llvm.load"(%617) : (!llvm.ptr) -> i32
      %627 = "llvm.getelementptr"(%625, %626) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %628 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %629 = "llvm.getelementptr"(%627, %628) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%629) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B__set_index_xi32_valueT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb65(%630 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %631 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %632 : !llvm.ptr, %633 : i32):
      %634 = "mid.wrap"(%630) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %635 = "hi.cast"(%634) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %636 = "mid.wrap"(%633) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %637 = "hi.cast"(%636) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %638 = "mid.get_field"(%635) {"offset" = 0 : i64, "vtable_bytes" = 696 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %639 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T"]} : () -> !llvm.ptr
      %640 = "hi.cast"(%637) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %641 = "mid.buffer_get"(%638, %640, %639) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !llvm.ptr) -> !hi.type_param<"T", !hi.any, "Array">
      %642 = "hi.cast"(%641) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      "mid.return"(%642) : (!hi.type_param<"T", !hi.any, "Array">) -> ()
    }) {"func_name" = "Array_unchecked_index_xi32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb66(%643 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %644 : !llvm.ptr):
      %645 = "mid.invariant"(%644) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %646 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb67] : () -> ()
    ^bb68:
      %647 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
      "llvm.store"(%647, %646) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb69] : () -> ()
    ^bb67:
      %648 = "llvm.getelementptr"(%644) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %649 = "mid.checkflag"(%648) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %650 = "llvm.load"(%649) : (!hi.bool) -> i1
      "cf.cond_br"(%650) [^bb68, ^bb68] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb69:
      %651 = "llvm.extractvalue"(%643) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %652 = "llvm.load"(%646) : (!llvm.ptr) -> i32
      %653 = "llvm.getelementptr"(%651, %652) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %654 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %655 = "llvm.getelementptr"(%653, %654) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%655) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_unchecked_index_xi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb70(%656 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %657 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %658 : !llvm.ptr, %659 : i32, %660 : !llvm.struct<(!llvm.ptr, i160)>):
      %661 = "mid.wrap"(%656) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %662 = "hi.cast"(%661) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %663 = "mid.wrap"(%659) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %664 = "hi.cast"(%663) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %665 = "mid.wrap"(%660) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Array">
      %666 = "hi.cast"(%665) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %667 = "mid.get_field"(%662) {"offset" = 0 : i64, "vtable_bytes" = 696 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %668 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Array.T"]} : () -> !llvm.ptr
      %669 = "hi.cast"(%666) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "Array">
      %670 = "hi.cast"(%664) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      "mid.buffer_set"(%667, %670, %669, %668) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.type_param<"T", !hi.any, "Array">, !llvm.ptr) -> ()
    }) {"func_name" = "Array_unchecked_insert_xi32_valueT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb71(%671 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %672 : !llvm.ptr):
      %673 = "mid.invariant"(%672) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %674 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb72] : () -> ()
    ^bb73:
      %675 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
      "llvm.store"(%675, %674) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb74] : () -> ()
    ^bb75:
      %676 = "llvm.getelementptr"(%672) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %677 = "mid.checkflag"(%676) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %678 = "llvm.load"(%677) : (!hi.bool) -> i1
      "cf.cond_br"(%678) [^bb73, ^bb73] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb72:
      %679 = "llvm.getelementptr"(%672) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %680 = "mid.checkflag"(%679) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %681 = "llvm.load"(%680) : (!hi.bool) -> i1
      "cf.cond_br"(%681) [^bb75, ^bb75] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb74:
      %682 = "llvm.extractvalue"(%671) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %683 = "llvm.load"(%674) : (!llvm.ptr) -> i32
      %684 = "llvm.getelementptr"(%682, %683) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %685 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %686 = "llvm.getelementptr"(%684, %685) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%686) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_unchecked_insert_xi32_valueT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb76(%687 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %688 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %689 : !llvm.ptr):
      %690 = "mid.wrap"(%687) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %691 = "hi.cast"(%690) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %692 = "mid.unwrap"(%691) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %693 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "ArrayIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "Array">]>
      %694 = "hi.cast"(%691) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %695 = "mid.unwrap"(%694) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %696 = "mid.unwrap"(%693) : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %697 = "mid.parameterization"() {"id_hierarchy" = ["Array", ["any_typ"]], "name_hierarchy" = ["ArrayArray.T", ["Array.T"]]} : () -> !llvm.ptr
      %698 = "mid.parameterizations_array"(%697) : (!llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%698, %696, %695) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %699 = "hi.cast"(%693) {"from_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>
      "mid.return"(%699) : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Array">]>) -> ()
    }) {"func_name" = "Array_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb77(%700 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %701 : !llvm.ptr):
      %702 = "mid.invariant"(%701) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %703 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb78] : () -> ()
    ^bb78:
      %704 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
      "llvm.store"(%704, %703) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb79] : () -> ()
    ^bb79:
      %705 = "llvm.extractvalue"(%700) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %706 = "llvm.load"(%703) : (!llvm.ptr) -> i32
      %707 = "llvm.getelementptr"(%705, %706) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %708 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %709 = "llvm.getelementptr"(%707, %708) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%709) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb80(%710 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %711 : !llvm.ptr):
      %712 = "mid.invariant"(%711) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %713 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb81] : () -> ()
    ^bb82:
      %714 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
      "llvm.store"(%714, %713) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb83] : () -> ()
    ^bb81:
      %715 = "llvm.getelementptr"(%711) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %716 = "mid.checkflag"(%715) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %717 = "llvm.load"(%716) : (!hi.bool) -> i1
      "cf.cond_br"(%717) [^bb82, ^bb82] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb83:
      %718 = "llvm.extractvalue"(%710) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %719 = "llvm.load"(%713) : (!llvm.ptr) -> i32
      %720 = "llvm.getelementptr"(%718, %719) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %721 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %722 = "llvm.getelementptr"(%720, %721) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%722) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb84(%723 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %724 : !llvm.ptr):
      %725 = "mid.invariant"(%724) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %726 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb85] : () -> ()
    ^bb86:
      %727 = "llvm.mlir.constant"() <{"value" = 49 : i32}> : () -> i32
      "llvm.store"(%727, %726) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb87] : () -> ()
    ^bb88:
      %728 = "llvm.getelementptr"(%724) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %729 = "mid.checkflag"(%728) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %730 = "llvm.load"(%729) : (!hi.bool) -> i1
      "cf.cond_br"(%730) [^bb86, ^bb86] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb85:
      %731 = "llvm.getelementptr"(%724) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %732 = "mid.checkflag"(%731) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %733 = "llvm.load"(%732) : (!hi.bool) -> i1
      "cf.cond_br"(%733) [^bb88, ^bb88] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb87:
      %734 = "llvm.extractvalue"(%723) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %735 = "llvm.load"(%726) : (!llvm.ptr) -> i32
      %736 = "llvm.getelementptr"(%734, %735) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %737 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %738 = "llvm.getelementptr"(%736, %737) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%738) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb89(%739 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %740 : !llvm.ptr):
      %741 = "mid.invariant"(%740) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %742 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb90] : () -> ()
    ^bb91:
      %743 = "llvm.mlir.constant"() <{"value" = 50 : i32}> : () -> i32
      "llvm.store"(%743, %742) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb92] : () -> ()
    ^bb90:
      %744 = "llvm.getelementptr"(%740) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %745 = "mid.checkflag"(%744) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %746 = "llvm.load"(%745) : (!hi.bool) -> i1
      "cf.cond_br"(%746) [^bb91, ^bb91] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb92:
      %747 = "llvm.extractvalue"(%739) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %748 = "llvm.load"(%742) : (!llvm.ptr) -> i32
      %749 = "llvm.getelementptr"(%747, %748) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %750 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %751 = "llvm.getelementptr"(%749, %750) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%751) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb93(%752 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %753 : !llvm.ptr):
      %754 = "mid.invariant"(%753) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %755 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb94] : () -> ()
    ^bb95:
      %756 = "llvm.mlir.constant"() <{"value" = 51 : i32}> : () -> i32
      "llvm.store"(%756, %755) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb96] : () -> ()
    ^bb94:
      %757 = "llvm.getelementptr"(%753) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %758 = "mid.checkflag"(%757) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %759 = "llvm.load"(%758) : (!hi.bool) -> i1
      "cf.cond_br"(%759) [^bb95, ^bb95] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb96:
      %760 = "llvm.extractvalue"(%752) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %761 = "llvm.load"(%755) : (!llvm.ptr) -> i32
      %762 = "llvm.getelementptr"(%760, %761) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %763 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %764 = "llvm.getelementptr"(%762, %763) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%764) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb97(%765 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %766 : !llvm.ptr):
      %767 = "mid.invariant"(%766) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %768 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb98] : () -> ()
    ^bb98:
      %769 = "llvm.mlir.constant"() <{"value" = 52 : i32}> : () -> i32
      "llvm.store"(%769, %768) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb99] : () -> ()
    ^bb99:
      %770 = "llvm.extractvalue"(%765) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %771 = "llvm.load"(%768) : (!llvm.ptr) -> i32
      %772 = "llvm.getelementptr"(%770, %771) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %773 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %774 = "llvm.getelementptr"(%772, %773) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%774) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb100(%775 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %776 : !llvm.ptr):
      %777 = "mid.invariant"(%776) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %778 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb101] : () -> ()
    ^bb102:
      %779 = "llvm.mlir.constant"() <{"value" = 53 : i32}> : () -> i32
      "llvm.store"(%779, %778) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb103] : () -> ()
    ^bb101:
      %780 = "llvm.getelementptr"(%776) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %781 = "mid.checkflag"(%780) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %782 = "llvm.load"(%781) : (!hi.bool) -> i1
      "cf.cond_br"(%782) [^bb102, ^bb102] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb103:
      %783 = "llvm.extractvalue"(%775) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %784 = "llvm.load"(%778) : (!llvm.ptr) -> i32
      %785 = "llvm.getelementptr"(%783, %784) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %786 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %787 = "llvm.getelementptr"(%785, %786) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%787) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb104(%788 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %789 : !llvm.ptr):
      %790 = "mid.invariant"(%789) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %791 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb105] : () -> ()
    ^bb106:
      %792 = "llvm.mlir.constant"() <{"value" = 54 : i32}> : () -> i32
      "llvm.store"(%792, %791) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb107] : () -> ()
    ^bb105:
      %793 = "llvm.getelementptr"(%789) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %794 = "mid.checkflag"(%793) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %795 = "llvm.load"(%794) : (!hi.bool) -> i1
      "cf.cond_br"(%795) [^bb106, ^bb106] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb107:
      %796 = "llvm.extractvalue"(%788) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %797 = "llvm.load"(%791) : (!llvm.ptr) -> i32
      %798 = "llvm.getelementptr"(%796, %797) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %799 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %800 = "llvm.getelementptr"(%798, %799) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%800) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb108(%801 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %802 : !llvm.ptr):
      %803 = "mid.invariant"(%802) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %804 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb109] : () -> ()
    ^bb110:
      %805 = "llvm.mlir.constant"() <{"value" = 55 : i32}> : () -> i32
      "llvm.store"(%805, %804) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb111] : () -> ()
    ^bb109:
      %806 = "llvm.getelementptr"(%802) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %807 = "mid.checkflag"(%806) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %808 = "llvm.load"(%807) : (!hi.bool) -> i1
      "cf.cond_br"(%808) [^bb110, ^bb110] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb111:
      %809 = "llvm.extractvalue"(%801) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %810 = "llvm.load"(%804) : (!llvm.ptr) -> i32
      %811 = "llvm.getelementptr"(%809, %810) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %812 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %813 = "llvm.getelementptr"(%811, %812) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%813) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb112(%814 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %815 : !llvm.ptr):
      %816 = "mid.invariant"(%815) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %817 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb113] : () -> ()
    ^bb114:
      %818 = "llvm.mlir.constant"() <{"value" = 56 : i32}> : () -> i32
      "llvm.store"(%818, %817) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb115] : () -> ()
    ^bb113:
      %819 = "llvm.getelementptr"(%815) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %820 = "mid.checkflag"(%819) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %821 = "llvm.load"(%820) : (!hi.bool) -> i1
      "cf.cond_br"(%821) [^bb114, ^bb114] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb115:
      %822 = "llvm.extractvalue"(%814) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %823 = "llvm.load"(%817) : (!llvm.ptr) -> i32
      %824 = "llvm.getelementptr"(%822, %823) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %825 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %826 = "llvm.getelementptr"(%824, %825) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%826) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb116(%827 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %828 : !llvm.ptr):
      %829 = "mid.invariant"(%828) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %830 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb117] : () -> ()
    ^bb118:
      %831 = "llvm.mlir.constant"() <{"value" = 57 : i32}> : () -> i32
      "llvm.store"(%831, %830) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb119] : () -> ()
    ^bb117:
      %832 = "llvm.getelementptr"(%828) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %833 = "mid.checkflag"(%832) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %834 = "llvm.load"(%833) : (!hi.bool) -> i1
      "cf.cond_br"(%834) [^bb118, ^bb118] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb119:
      %835 = "llvm.extractvalue"(%827) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %836 = "llvm.load"(%830) : (!llvm.ptr) -> i32
      %837 = "llvm.getelementptr"(%835, %836) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %838 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %839 = "llvm.getelementptr"(%837, %838) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%839) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb120(%840 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %841 : !llvm.ptr):
      %842 = "mid.invariant"(%841) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %843 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb121] : () -> ()
    ^bb122:
      %844 = "llvm.mlir.constant"() <{"value" = 58 : i32}> : () -> i32
      "llvm.store"(%844, %843) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb123] : () -> ()
    ^bb121:
      %845 = "llvm.getelementptr"(%841) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %846 = "mid.checkflag"(%845) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %847 = "llvm.load"(%846) : (!hi.bool) -> i1
      "cf.cond_br"(%847) [^bb122, ^bb122] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb123:
      %848 = "llvm.extractvalue"(%840) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %849 = "llvm.load"(%843) : (!llvm.ptr) -> i32
      %850 = "llvm.getelementptr"(%848, %849) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %851 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %852 = "llvm.getelementptr"(%850, %851) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%852) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb124(%853 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %854 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %855 : !llvm.ptr):
      %856 = "mid.wrap"(%853) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %857 = "hi.cast"(%856) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "Array">]>
      %858 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %859 = "hi.cast"(%858) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<64>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i64_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<64>, #builtin.signedness<signed>>
      %860 = "mid.create_buffer"(%859) {"typ" = i8, "region_id" = ""} : (!hi.int<#builtin.int<64>, #builtin.signedness<signed>>) -> !llvm.ptr
      %861 = "mid.refer"(%860) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %862 = "mid.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "Array"} : () -> !llvm.ptr
      %863 = "mid.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mid.buffer_set"(%861, %863, %862) {"typ" = !llvm.array<5 x i8>} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, !llvm.ptr, !llvm.ptr) -> ()
      %864 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %865 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %866 = "mid.unwrap"(%861) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %867 = "mid.unwrap"(%864) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %868 = "mid.unwrap"(%865) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %869 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"String">
      %870 = "mid.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %871 = "mid.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %872 = "hi.cast"(%861) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>
      %873 = "mid.unwrap"(%872) : (!hi.buffer<!hi.int<#builtin.int<8>, #builtin.signedness<signed>>>) -> !llvm.struct<(!llvm.ptr)>
      %874 = "hi.cast"(%870) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %875 = "mid.unwrap"(%874) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %876 = "hi.cast"(%871) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %877 = "mid.unwrap"(%876) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %878 = "mid.unwrap"(%869) : (!hi.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %879 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %880 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %881 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %882 = "mid.parameterizations_array"(%879, %880, %881) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%882, %878, %873, %875, %877) {"offset" = 7 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 85 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %883 = "hi.cast"(%869) {"from_typ" = !hi.fatptr<"String">, "to_typ" = !hi.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!hi.fatptr<"String">) -> !hi.fatptr<"String">
      "mid.return"(%883) : (!hi.fatptr<"String">) -> ()
    }) {"func_name" = "Array_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb125(%884 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %885 : !llvm.ptr):
      %886 = "mid.invariant"(%885) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %887 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb126] : () -> ()
    ^bb126:
      %888 = "llvm.mlir.constant"() <{"value" = 59 : i32}> : () -> i32
      "llvm.store"(%888, %887) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb127] : () -> ()
    ^bb127:
      %889 = "llvm.extractvalue"(%884) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %890 = "llvm.load"(%887) : (!llvm.ptr) -> i32
      %891 = "llvm.getelementptr"(%889, %890) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<87 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %892 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %893 = "llvm.getelementptr"(%891, %892) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%893) : (!llvm.ptr) -> ()
    }) {"func_name" = "Array_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_ArrayIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "ArrayIterator_getter_array", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Array", "parameterization" = "_parameterization_ArrayArrayIterator.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ArrayIterator_setter_array", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Array", "parameterization" = "_parameterization_ArrayArrayIterator.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ArrayIterator_field_array", "getter_name" = "ArrayIterator_getter_array", "setter_name" = "ArrayIterator_setter_array"} : () -> ()
    "mid.getter_def"() {"meth_name" = "ArrayIterator_getter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "ArrayIterator_setter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "ArrayIterator_field_index", "getter_name" = "ArrayIterator_getter_index", "setter_name" = "ArrayIterator_setter_index"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ArrayIterator_field_ArrayIterator_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["ArrayIterator.T"]} : () -> ()
    "mid.func"() ({
    ^bb128(%894 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %895 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %896 : !llvm.ptr, %897 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
      %898 = "mid.wrap"(%894) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %899 = "hi.cast"(%898) {"from_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "to_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %900 = "mid.wrap"(%897) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %901 = "hi.cast"(%900) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %902 = "hi.cast"(%901) {"from_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "to_typ" = !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      "mid.set_field"(%899, %902) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> ()
      %903 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %904 = "hi.cast"(%903) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%899, %904) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "ArrayIterator_init_arrayArrayT", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb129(%905 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %906 : !llvm.ptr):
      %907 = "mid.invariant"(%906) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %908 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb130] : () -> ()
    ^bb131:
      %909 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%909, %908) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb132] : () -> ()
    ^bb130:
      %910 = "llvm.getelementptr"(%906) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %911 = "mid.checkflag"(%910) {"typ_name" = "Array"} : (!llvm.ptr) -> !hi.bool
      %912 = "llvm.load"(%911) : (!hi.bool) -> i1
      "cf.cond_br"(%912) [^bb131, ^bb131] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb132:
      %913 = "llvm.extractvalue"(%905) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %914 = "llvm.load"(%908) : (!llvm.ptr) -> i32
      %915 = "llvm.getelementptr"(%913, %914) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %916 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %917 = "llvm.getelementptr"(%915, %916) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%917) : (!llvm.ptr) -> ()
    }) {"func_name" = "ArrayIterator_B_init_arrayArrayT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb133(%918 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %919 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %920 : !llvm.ptr):
      %921 = "mid.wrap"(%918) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %922 = "hi.cast"(%921) {"from_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "to_typ" = !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %923 = "mid.get_field"(%922) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %924 = "mid.get_field"(%922) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Array"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %925 = "mid.unwrap"(%924) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %926 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %927 = "mid.method_call"(%926, %925) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 87 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %928 = "hi.cast"(%927) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %929 = "mid.unwrap"(%923) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %930 = "mid.unwrap"(%928) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %931 = "mid.comparison"(%929, %930) {"op" = "GE"} : (i32, i32) -> i1
      %932 = "mid.wrap"(%931) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %933 = "mid.unwrap"(%932) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%933) ({
        %934 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %935 = "hi.cast"(%934) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>
        "mid.return"(%935) : (!hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>) -> ()
      }) : (i1) -> ()
      %936 = "mid.get_field"(%922) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %937 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %938 = "mid.unwrap"(%936) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %939 = "mid.unwrap"(%937) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %940 = "mid.arithmetic"(%938, %939) {"op" = "ADD"} : (i32, i32) -> i32
      %941 = "mid.wrap"(%940) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %942 = "hi.cast"(%941) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%922, %942) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %943 = "mid.get_field"(%922) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %944 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %945 = "mid.unwrap"(%943) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %946 = "mid.unwrap"(%944) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %947 = "mid.arithmetic"(%945, %946) {"op" = "SUB"} : (i32, i32) -> i32
      %948 = "mid.wrap"(%947) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %949 = "hi.cast"(%948) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %950 = "mid.unwrap"(%949) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %951 = "mid.get_field"(%922) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Array"} : (!hi.fatptr<"ArrayIterator", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>
      %952 = "mid.unwrap"(%951) : (!hi.fatptr<"Array", [!hi.type_param<"T", !hi.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %953 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %954 = "mid.parameterizations_array"(%953) : (!llvm.ptr) -> !llvm.ptr
      %955 = "mid.method_call"(%954, %952, %950) {"offset" = 17 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 87 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !hi.type_param<"T", !hi.any, "Array">
      %956 = "hi.cast"(%955) {"from_typ" = !hi.type_param<"T", !hi.any, "Array">, "to_typ" = !hi.type_param<"T", !hi.any, "ArrayIterator">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Array">) -> !hi.type_param<"T", !hi.any, "ArrayIterator">
      %957 = "hi.cast"(%956) {"from_typ" = !hi.type_param<"T", !hi.any, "ArrayIterator">, "to_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "ArrayIterator">) -> !hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>
      "mid.return"(%957) : (!hi.union<[!hi.type_param<"T", !hi.any, "ArrayIterator">, !hi.nil]>) -> ()
    }) {"func_name" = "ArrayIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb134(%958 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %959 : !llvm.ptr):
      %960 = "mid.invariant"(%959) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %961 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb135] : () -> ()
    ^bb135:
      %962 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%962, %961) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb136] : () -> ()
    ^bb136:
      %963 = "llvm.extractvalue"(%958) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %964 = "llvm.load"(%961) : (!llvm.ptr) -> i32
      %965 = "llvm.getelementptr"(%963, %964) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %966 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %967 = "llvm.getelementptr"(%965, %966) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%967) : (!llvm.ptr) -> ()
    }) {"func_name" = "ArrayIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "channel"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 85 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Blocking", "methods" = [@Blocking_B_init_, @Blocking_init_], "hash_tbl" = [@Object, @any_typ, @Blocking, 18446744073709551615 : i64], "offset_tbl" = [12 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 847773162914674935 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Blocking", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "Channel", "methods" = [@Channel_field_value, @Channel_field_Channel_0, @Channel_B_init_, @Channel_B_get_, @Channel_B_put_new_valueT, @Channel_init_, @Channel_get_, @Channel_put_new_valueT], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Channel], "offset_tbl" = [18 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 14778625957069801166 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_Channel", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Blocking", "types" = []} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr):
      %3 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Blocking">
      %4 = "hi.cast"(%3) {"from_typ" = !hi.fatptr<"Blocking">, "to_typ" = !hi.fatptr<"Blocking">, "from_typ_name" = "Blocking", "to_typ_name" = "Blocking"} : (!hi.fatptr<"Blocking">) -> !hi.fatptr<"Blocking">
    }) {"func_name" = "Blocking_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%5 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6 : !llvm.ptr):
      %7 = "mid.invariant"(%6) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %8 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb2:
      %9 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
      "llvm.store"(%9, %8) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb3] : () -> ()
    ^bb3:
      %10 = "llvm.extractvalue"(%5) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %11 = "llvm.load"(%8) : (!llvm.ptr) -> i32
      %12 = "llvm.getelementptr"(%10, %11) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %13 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %14 = "llvm.getelementptr"(%12, %13) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%14) : (!llvm.ptr) -> ()
    }) {"func_name" = "Blocking_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Channel", "types" = [!llvm.struct<(!llvm.ptr, i160)>]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Channel_getter_value", "types" = [!llvm.struct<(!llvm.ptr, i160)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Nil_or_Channel.T"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Channel_setter_value", "types" = [!llvm.struct<(!llvm.ptr, i160)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Nil_or_Channel.T"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Channel_field_value", "getter_name" = "Channel_getter_value", "setter_name" = "Channel_setter_value"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Channel_field_Channel_0", "id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Channel.T"]} : () -> ()
    "mid.func"() ({
    ^bb4(%15 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %16 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %17 : !llvm.ptr):
      %18 = "mid.wrap"(%15) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %19 = "hi.cast"(%18) {"from_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %20 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %21 = "hi.cast"(%20) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
      "mid.set_field"(%19, %21) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> ()
    }) {"func_name" = "Channel_init_", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb5(%22 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %23 : !llvm.ptr):
      %24 = "mid.invariant"(%23) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %25 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb6] : () -> ()
    ^bb6:
      %26 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
      "llvm.store"(%26, %25) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb7] : () -> ()
    ^bb7:
      %27 = "llvm.extractvalue"(%22) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %28 = "llvm.load"(%25) : (!llvm.ptr) -> i32
      %29 = "llvm.getelementptr"(%27, %28) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %30 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %31 = "llvm.getelementptr"(%29, %30) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%31) : (!llvm.ptr) -> ()
    }) {"func_name" = "Channel_B_init_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb8(%32 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %33 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %34 : !llvm.ptr):
      %35 = "mid.wrap"(%32) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %36 = "hi.cast"(%35) {"from_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      "mid.while"() ({
        %37 = "mid.literal"() {"value" = true, "typ" = i1} : () -> !hi.bool
        %38 = "mid.unwrap"(%37) : (!hi.bool) -> i1
      }, {
        %39 = "mid.get_field"(%36) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
        %40 = "mid.refer"(%39) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
        %41 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Channel.T"]} : () -> !llvm.ptr
        %42 = "mid.checkflag"(%40) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %43 = "mid.unwrap"(%42) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
        %44 = "hi.cast"(%40) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
        "mid.if"(%43) ({
          %45 = "hi.cast"(%44) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.type_param<"T", !hi.any, "Channel">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.type_param<"T", !hi.any, "Channel">
          %46 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
          %47 = "hi.cast"(%46) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
          "mid.set_field"(%36, %47) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> ()
          %48 = "hi.cast"(%45) {"from_typ" = !hi.type_param<"T", !hi.any, "Channel">, "to_typ" = !hi.type_param<"T", !hi.any, "Channel">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Channel">) -> !hi.type_param<"T", !hi.any, "Channel">
          "mid.return"(%48) : (!hi.type_param<"T", !hi.any, "Channel">) -> ()
          %49 = "hi.cast"(%45) {"from_typ" = !hi.type_param<"T", !hi.any, "Channel">, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Channel">) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
          "mid.assign"(%44, %49) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> ()
        }) : (i1) -> ()
        %50 = "mid.new"() {"typ" = !llvm.struct<()>, "class_name" = "Blocking", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Blocking">
        %51 = "mid.unwrap"(%50) : (!hi.fatptr<"Blocking">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %52 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%52, %51) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %53 = "hi.cast"(%50) {"from_typ" = !hi.fatptr<"Blocking">, "to_typ" = !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>, "from_typ_name" = "Blocking", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Blocking">) -> !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>
        %54 = "mid.unwrap"(%53) : (!hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %55 = "mid.coro_yield"(%54) {"cold" = false} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %56 = "mid.wrap"(%55) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>
      }) : () -> ()
    }) {"func_name" = "Channel_get_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.fatptr<"Blocking">} : () -> ()
    "mid.func"() ({
    ^bb9(%57 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %58 : !llvm.ptr):
      %59 = "mid.invariant"(%58) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %60 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb10] : () -> ()
    ^bb10:
      %61 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%61, %60) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb11] : () -> ()
    ^bb11:
      %62 = "llvm.extractvalue"(%57) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %63 = "llvm.load"(%60) : (!llvm.ptr) -> i32
      %64 = "llvm.getelementptr"(%62, %63) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %65 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %66 = "llvm.getelementptr"(%64, %65) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%66) : (!llvm.ptr) -> ()
    }) {"func_name" = "Channel_B_get_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb12(%67 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %68 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %69 : !llvm.ptr, %70 : !llvm.struct<(!llvm.ptr, i160)>):
      %71 = "mid.wrap"(%67) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %72 = "hi.cast"(%71) {"from_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>
      %73 = "mid.wrap"(%70) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.type_param<"T", !hi.any, "Channel">
      %74 = "hi.cast"(%73) {"from_typ" = !hi.type_param<"T", !hi.any, "Channel">, "to_typ" = !hi.type_param<"T", !hi.any, "Channel">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!hi.type_param<"T", !hi.any, "Channel">) -> !hi.type_param<"T", !hi.any, "Channel">
      %75 = "mid.get_field"(%72) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
      %76 = "mid.refer"(%75) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
      %77 = "hi.cast"(%76) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
      "mid.while"() ({
        %78 = "mid.parameterization"() {"id_hierarchy" = ["any_typ"], "name_hierarchy" = ["Channel.T"]} : () -> !llvm.ptr
        %79 = "mid.checkflag"(%77) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %80 = "mid.unwrap"(%79) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %81 = "hi.cast"(%77) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.type_param<"T", !hi.any, "Channel">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.type_param<"T", !hi.any, "Channel">
        %82 = "mid.new"() {"typ" = !llvm.struct<()>, "class_name" = "Blocking", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Blocking">
        %83 = "mid.unwrap"(%82) : (!hi.fatptr<"Blocking">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %84 = "mid.parameterizations_array"() : () -> !llvm.ptr
        "mid.method_call"(%84, %83) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %85 = "hi.cast"(%82) {"from_typ" = !hi.fatptr<"Blocking">, "to_typ" = !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>, "from_typ_name" = "Blocking", "to_typ_name" = "union_typ"} : (!hi.fatptr<"Blocking">) -> !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>
        %86 = "mid.unwrap"(%85) : (!hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %87 = "mid.coro_yield"(%86) {"cold" = false} : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %88 = "mid.wrap"(%87) : (!llvm.struct<(!llvm.ptr, i160)>) -> !hi.union<[!hi.fatptr<"Blocking">, !hi.nil]>
        %89 = "mid.get_field"(%72) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
        %90 = "mid.refer"(%89) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
        %91 = "hi.cast"(%90) {"from_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
        "mid.assign"(%77, %91) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> ()
      }) : () -> ()
      %92 = "hi.cast"(%74) {"from_typ" = !hi.type_param<"T", !hi.any, "Channel">, "to_typ" = !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!hi.type_param<"T", !hi.any, "Channel">) -> !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>
      "mid.set_field"(%72, %92) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!hi.fatptr<"Channel", [!hi.type_param<"T", !hi.any, "Channel">]>, !hi.union<[!hi.nil, !hi.type_param<"T", !hi.any, "Channel">]>) -> ()
    }) {"func_name" = "Channel_put_new_valueT", "result_type" = !llvm.void, "yield_type" = !hi.fatptr<"Blocking">} : () -> ()
    "mid.func"() ({
    ^bb13(%93 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %94 : !llvm.ptr):
      %95 = "mid.invariant"(%94) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %96 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb14] : () -> ()
    ^bb15:
      %97 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%97, %96) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb16] : () -> ()
    ^bb14:
      %98 = "llvm.getelementptr"(%94) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %99 = "mid.checkflag"(%98) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !hi.bool
      %100 = "llvm.load"(%99) : (!hi.bool) -> i1
      "cf.cond_br"(%100) [^bb15, ^bb15] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb16:
      %101 = "llvm.extractvalue"(%93) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %102 = "llvm.load"(%96) : (!llvm.ptr) -> i32
      %103 = "llvm.getelementptr"(%101, %102) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %104 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %105 = "llvm.getelementptr"(%103, %104) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%105) : (!llvm.ptr) -> ()
    }) {"func_name" = "Channel_B_put_new_valueT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "range"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 85 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Range", "methods" = [@Range_field_start, @Range_field_end, @Range_field_step, @Range_field_Range_0, @Range_B_init_endi32, @Range_B_init_starti32_endi32, @Range_B_step_stepi32, @Range_B_iterator_, @Range_B_each_fFunctionT_to_Nothing, @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, @Range_B_all_fFunctionT_to_Bool, @Range_B_any_fFunctionT_to_Bool, @Range_B_enumerate_, @Range_B_map_fFunctionT_to_U, @Range_B_filter_fFunctionT_to_Bool, @Range_B_chain_otherIterableT, @Range_B_interleave_otherIterableT, @Range_B_zip_otherIterableU, @Range_B_product_otherIterableU, @Range_init_endi32, @Range_init_starti32_endi32, @Range_step_stepi32, @Range_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Range_field_Range_0, @Range_B_iterator_, @Range_B_each_fFunctionT_to_Nothing, @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, @Range_B_all_fFunctionT_to_Bool, @Range_B_any_fFunctionT_to_Bool, @Range_B_enumerate_, @Range_B_map_fFunctionT_to_U, @Range_B_filter_fFunctionT_to_Bool, @Range_B_chain_otherIterableT, @Range_B_interleave_otherIterableT, @Range_B_zip_otherIterableU, @Range_B_product_otherIterableU, @Range_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_Bool, @Iterable_any_fFunctionT_to_Bool, @Iterable_enumerate_, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_Bool, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Iterable, 18446744073709551615 : i64, @Range], "offset_tbl" = [69 : i32, 10 : i32, 0 : i32, 69 : i32, 0 : i32, 44 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5490049236840671069 : i64, "base_typ" = !llvm.struct<(i32, i32, i32)>, "data_size_fn" = "_data_size_Range", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "mid.typedef"() {"class_name" = "RangeIterator", "methods" = [@RangeIterator_field_counter, @RangeIterator_field_end, @RangeIterator_field_step, @RangeIterator_field_RangeIterator_0, @RangeIterator_B_init_counteri32_endi32_stepi32, @RangeIterator_B_next_, @RangeIterator_init_counteri32_endi32_stepi32, @RangeIterator_next_, @RangeIterator_field_RangeIterator_0, @RangeIterator_B_next_, @RangeIterator_next_], "hash_tbl" = [@any_typ, 18446744073709551615 : i64, @Iterator, @RangeIterator, @Container, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 0 : i32, 18 : i32, 10 : i32, 21 : i32, 21 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 17533181587765144941 : i64, "base_typ" = !llvm.struct<(i32, i32, i32)>, "data_size_fn" = "_data_size_RangeIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Range", "types" = [i32, i32, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "Range_getter_start", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Range_setter_start", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Range_field_start", "getter_name" = "Range_getter_start", "setter_name" = "Range_setter_start"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Range_getter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Range_setter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Range_field_end", "getter_name" = "Range_getter_end", "setter_name" = "Range_setter_end"} : () -> ()
    "mid.getter_def"() {"meth_name" = "Range_getter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "Range_setter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "Range_field_step", "getter_name" = "Range_getter_step", "setter_name" = "Range_setter_step"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "Range_field_Range_0", "id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr, %3 : i32):
      %4 = "mid.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Range">
      %5 = "hi.cast"(%4) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      %6 = "mid.wrap"(%3) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %7 = "hi.cast"(%6) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %8 = "hi.cast"(%7) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%5, %8) {"offset" = 1 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %9 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %10 = "hi.cast"(%9) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%5, %10) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %11 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %12 = "hi.cast"(%11) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%5, %12) {"offset" = 2 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Range_init_endi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%13 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %14 : !llvm.ptr):
      %15 = "mid.invariant"(%14) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %16 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb3:
      %17 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
      "llvm.store"(%17, %16) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb4] : () -> ()
    ^bb2:
      %18 = "llvm.getelementptr"(%14) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %19 = "mid.checkflag"(%18) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %20 = "llvm.load"(%19) : (!hi.bool) -> i1
      "cf.cond_br"(%20) [^bb3, ^bb3] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb4:
      %21 = "llvm.extractvalue"(%13) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %22 = "llvm.load"(%16) : (!llvm.ptr) -> i32
      %23 = "llvm.getelementptr"(%21, %22) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %24 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %25 = "llvm.getelementptr"(%23, %24) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%25) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_init_endi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb5(%26 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %27 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %28 : !llvm.ptr, %29 : i32, %30 : i32):
      %31 = "mid.wrap"(%26) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Range">
      %32 = "hi.cast"(%31) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      %33 = "mid.wrap"(%29) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %34 = "hi.cast"(%33) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %35 = "hi.cast"(%34) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%32, %35) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %36 = "mid.wrap"(%30) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %37 = "hi.cast"(%36) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %38 = "hi.cast"(%37) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%32, %38) {"offset" = 1 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %39 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %40 = "hi.cast"(%39) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%32, %40) {"offset" = 2 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "Range_init_starti32_endi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%41 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %42 : !llvm.ptr):
      %43 = "mid.invariant"(%42) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %44 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb7] : () -> ()
    ^bb8:
      %45 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
      "llvm.store"(%45, %44) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb9] : () -> ()
    ^bb10:
      %46 = "llvm.getelementptr"(%42) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %47 = "mid.checkflag"(%46) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %48 = "llvm.load"(%47) : (!hi.bool) -> i1
      "cf.cond_br"(%48) [^bb8, ^bb8] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb7:
      %49 = "llvm.getelementptr"(%42) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %50 = "mid.checkflag"(%49) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %51 = "llvm.load"(%50) : (!hi.bool) -> i1
      "cf.cond_br"(%51) [^bb10, ^bb10] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb9:
      %52 = "llvm.extractvalue"(%41) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %53 = "llvm.load"(%44) : (!llvm.ptr) -> i32
      %54 = "llvm.getelementptr"(%52, %53) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %55 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %56 = "llvm.getelementptr"(%54, %55) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%56) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_init_starti32_endi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb11(%57 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %58 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %59 : !llvm.ptr, %60 : i32):
      %61 = "mid.wrap"(%57) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Range">
      %62 = "hi.cast"(%61) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      %63 = "mid.wrap"(%60) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %64 = "hi.cast"(%63) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %65 = "hi.cast"(%64) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%62, %65) {"offset" = 2 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %66 = "hi.cast"(%62) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      "mid.return"(%66) : (!hi.fatptr<"Range">) -> ()
    }) {"func_name" = "Range_step_stepi32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb12(%67 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %68 : !llvm.ptr):
      %69 = "mid.invariant"(%68) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %70 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb13] : () -> ()
    ^bb14:
      %71 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
      "llvm.store"(%71, %70) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb15] : () -> ()
    ^bb13:
      %72 = "llvm.getelementptr"(%68) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %73 = "mid.checkflag"(%72) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %74 = "llvm.load"(%73) : (!hi.bool) -> i1
      "cf.cond_br"(%74) [^bb14, ^bb14] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb15:
      %75 = "llvm.extractvalue"(%67) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %76 = "llvm.load"(%70) : (!llvm.ptr) -> i32
      %77 = "llvm.getelementptr"(%75, %76) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %78 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %79 = "llvm.getelementptr"(%77, %78) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%79) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_step_stepi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb16(%80 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %81 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %82 : !llvm.ptr):
      %83 = "mid.wrap"(%80) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Range">
      %84 = "hi.cast"(%83) {"from_typ" = !hi.fatptr<"Range">, "to_typ" = !hi.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!hi.fatptr<"Range">) -> !hi.fatptr<"Range">
      %85 = "mid.get_field"(%84) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %86 = "mid.get_field"(%84) {"offset" = 1 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %87 = "mid.get_field"(%84) {"offset" = 2 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %88 = "mid.unwrap"(%85) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %89 = "mid.unwrap"(%86) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %90 = "mid.unwrap"(%87) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %91 = "mid.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "RangeIterator", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"RangeIterator">
      %92 = "mid.get_field"(%84) {"offset" = 0 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %93 = "mid.get_field"(%84) {"offset" = 1 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %94 = "mid.get_field"(%84) {"offset" = 2 : i64, "vtable_bytes" = 472 : i32, "original_type" = i32} : (!hi.fatptr<"Range">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %95 = "hi.cast"(%92) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %96 = "mid.unwrap"(%95) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %97 = "hi.cast"(%93) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %98 = "mid.unwrap"(%97) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %99 = "hi.cast"(%94) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %100 = "mid.unwrap"(%99) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %101 = "mid.unwrap"(%91) : (!hi.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %102 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %103 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %104 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %105 = "mid.parameterizations_array"(%102, %103, %104) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%105, %101, %96, %98, %100) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32, i32) -> ()
      %106 = "hi.cast"(%91) {"from_typ" = !hi.fatptr<"RangeIterator">, "to_typ" = !hi.fatptr<"Iterator", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "RangeIterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"Iterator", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      "mid.return"(%106) : (!hi.fatptr<"Iterator", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
    }) {"func_name" = "Range_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb17(%107 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %108 : !llvm.ptr):
      %109 = "mid.invariant"(%108) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %110 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb18] : () -> ()
    ^bb18:
      %111 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
      "llvm.store"(%111, %110) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb19] : () -> ()
    ^bb19:
      %112 = "llvm.extractvalue"(%107) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %113 = "llvm.load"(%110) : (!llvm.ptr) -> i32
      %114 = "llvm.getelementptr"(%112, %113) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %115 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %116 = "llvm.getelementptr"(%114, %115) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%116) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_each_fFunctionT_to_Nothing", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb20(%117 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %118 : !llvm.ptr):
      %119 = "mid.invariant"(%118) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %120 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb21] : () -> ()
    ^bb22:
      %121 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
      "llvm.store"(%121, %120) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb23] : () -> ()
    ^bb21:
      %122 = "llvm.getelementptr"(%118) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %123 = "mid.checkflag"(%122) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %124 = "llvm.load"(%123) : (!hi.bool) -> i1
      "cf.cond_br"(%124) [^bb22, ^bb22] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb23:
      %125 = "llvm.extractvalue"(%117) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %126 = "llvm.load"(%120) : (!llvm.ptr) -> i32
      %127 = "llvm.getelementptr"(%125, %126) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %128 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %129 = "llvm.getelementptr"(%127, %128) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%129) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, i160)> (!llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb24(%130 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %131 : !llvm.ptr):
      %132 = "mid.invariant"(%131) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %133 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb25] : () -> ()
    ^bb26:
      %134 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
      "llvm.store"(%134, %133) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb27] : () -> ()
    ^bb28:
      %135 = "llvm.getelementptr"(%131) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %136 = "mid.checkflag"(%135) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %137 = "llvm.load"(%136) : (!hi.bool) -> i1
      "cf.cond_br"(%137) [^bb26, ^bb26] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb25:
      %138 = "llvm.getelementptr"(%131) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %139 = "mid.checkflag"(%138) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %140 = "llvm.load"(%139) : (!hi.bool) -> i1
      "cf.cond_br"(%140) [^bb28, ^bb28] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb27:
      %141 = "llvm.extractvalue"(%130) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %142 = "llvm.load"(%133) : (!llvm.ptr) -> i32
      %143 = "llvm.getelementptr"(%141, %142) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %144 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %145 = "llvm.getelementptr"(%143, %144) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%145) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_all_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb29(%146 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %147 : !llvm.ptr):
      %148 = "mid.invariant"(%147) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %149 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb30] : () -> ()
    ^bb31:
      %150 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
      "llvm.store"(%150, %149) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb32] : () -> ()
    ^bb30:
      %151 = "llvm.getelementptr"(%147) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %152 = "mid.checkflag"(%151) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %153 = "llvm.load"(%152) : (!hi.bool) -> i1
      "cf.cond_br"(%153) [^bb31, ^bb31] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb32:
      %154 = "llvm.extractvalue"(%146) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %155 = "llvm.load"(%149) : (!llvm.ptr) -> i32
      %156 = "llvm.getelementptr"(%154, %155) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %157 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %158 = "llvm.getelementptr"(%156, %157) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%158) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_all_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_any_fFunctionT_to_Bool", "function_type" = !llvm.func<i1 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb33(%159 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %160 : !llvm.ptr):
      %161 = "mid.invariant"(%160) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %162 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb34] : () -> ()
    ^bb35:
      %163 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
      "llvm.store"(%163, %162) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb36] : () -> ()
    ^bb34:
      %164 = "llvm.getelementptr"(%160) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %165 = "mid.checkflag"(%164) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %166 = "llvm.load"(%165) : (!hi.bool) -> i1
      "cf.cond_br"(%166) [^bb35, ^bb35] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb36:
      %167 = "llvm.extractvalue"(%159) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %168 = "llvm.load"(%162) : (!llvm.ptr) -> i32
      %169 = "llvm.getelementptr"(%167, %168) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %170 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %171 = "llvm.getelementptr"(%169, %170) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%171) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_any_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_enumerate_", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb37(%172 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %173 : !llvm.ptr):
      %174 = "mid.invariant"(%173) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %175 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb38] : () -> ()
    ^bb38:
      %176 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
      "llvm.store"(%176, %175) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb39] : () -> ()
    ^bb39:
      %177 = "llvm.extractvalue"(%172) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %178 = "llvm.load"(%175) : (!llvm.ptr) -> i32
      %179 = "llvm.getelementptr"(%177, %178) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %180 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %181 = "llvm.getelementptr"(%179, %180) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%181) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_enumerate_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_map_fFunctionT_to_U", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb40(%182 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %183 : !llvm.ptr):
      %184 = "mid.invariant"(%183) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %185 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb41] : () -> ()
    ^bb42:
      %186 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
      "llvm.store"(%186, %185) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb43] : () -> ()
    ^bb41:
      %187 = "llvm.getelementptr"(%183) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %188 = "mid.checkflag"(%187) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %189 = "llvm.load"(%188) : (!hi.bool) -> i1
      "cf.cond_br"(%189) [^bb42, ^bb42] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb43:
      %190 = "llvm.extractvalue"(%182) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %191 = "llvm.load"(%185) : (!llvm.ptr) -> i32
      %192 = "llvm.getelementptr"(%190, %191) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %193 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %194 = "llvm.getelementptr"(%192, %193) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%194) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_filter_fFunctionT_to_Bool", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb44(%195 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %196 : !llvm.ptr):
      %197 = "mid.invariant"(%196) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %198 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb45] : () -> ()
    ^bb46:
      %199 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
      "llvm.store"(%199, %198) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb47] : () -> ()
    ^bb45:
      %200 = "llvm.getelementptr"(%196) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %201 = "mid.checkflag"(%200) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.bool
      %202 = "llvm.load"(%201) : (!hi.bool) -> i1
      "cf.cond_br"(%202) [^bb46, ^bb46] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb47:
      %203 = "llvm.extractvalue"(%195) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %204 = "llvm.load"(%198) : (!llvm.ptr) -> i32
      %205 = "llvm.getelementptr"(%203, %204) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %206 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %207 = "llvm.getelementptr"(%205, %206) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%207) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_filter_fFunctionT_to_Bool", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_chain_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb48(%208 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %209 : !llvm.ptr):
      %210 = "mid.invariant"(%209) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %211 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb49] : () -> ()
    ^bb50:
      %212 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
      "llvm.store"(%212, %211) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb51] : () -> ()
    ^bb49:
      %213 = "llvm.getelementptr"(%209) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %214 = "mid.checkflag"(%213) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %215 = "llvm.load"(%214) : (!hi.bool) -> i1
      "cf.cond_br"(%215) [^bb50, ^bb50] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb51:
      %216 = "llvm.extractvalue"(%208) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %217 = "llvm.load"(%211) : (!llvm.ptr) -> i32
      %218 = "llvm.getelementptr"(%216, %217) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %219 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %220 = "llvm.getelementptr"(%218, %219) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%220) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_interleave_otherIterableT", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb52(%221 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %222 : !llvm.ptr):
      %223 = "mid.invariant"(%222) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %224 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb53] : () -> ()
    ^bb54:
      %225 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
      "llvm.store"(%225, %224) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb55] : () -> ()
    ^bb53:
      %226 = "llvm.getelementptr"(%222) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %227 = "mid.checkflag"(%226) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %228 = "llvm.load"(%227) : (!hi.bool) -> i1
      "cf.cond_br"(%228) [^bb54, ^bb54] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb55:
      %229 = "llvm.extractvalue"(%221) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %230 = "llvm.load"(%224) : (!llvm.ptr) -> i32
      %231 = "llvm.getelementptr"(%229, %230) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %232 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %233 = "llvm.getelementptr"(%231, %232) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%233) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_zip_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb56(%234 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %235 : !llvm.ptr):
      %236 = "mid.invariant"(%235) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %237 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb57] : () -> ()
    ^bb58:
      %238 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
      "llvm.store"(%238, %237) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb59] : () -> ()
    ^bb57:
      %239 = "llvm.getelementptr"(%235) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %240 = "mid.checkflag"(%239) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %241 = "llvm.load"(%240) : (!hi.bool) -> i1
      "cf.cond_br"(%241) [^bb58, ^bb58] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb59:
      %242 = "llvm.extractvalue"(%234) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %243 = "llvm.load"(%237) : (!llvm.ptr) -> i32
      %244 = "llvm.getelementptr"(%242, %243) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %245 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %246 = "llvm.getelementptr"(%244, %245) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%246) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "llvm.func"() <{"sym_name" = "Iterable_product_otherIterableU", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)> (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb60(%247 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %248 : !llvm.ptr):
      %249 = "mid.invariant"(%248) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %250 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb61] : () -> ()
    ^bb62:
      %251 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
      "llvm.store"(%251, %250) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb63] : () -> ()
    ^bb61:
      %252 = "llvm.getelementptr"(%248) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %253 = "mid.checkflag"(%252) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !hi.bool
      %254 = "llvm.load"(%253) : (!hi.bool) -> i1
      "cf.cond_br"(%254) [^bb62, ^bb62] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb63:
      %255 = "llvm.extractvalue"(%247) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %256 = "llvm.load"(%250) : (!llvm.ptr) -> i32
      %257 = "llvm.getelementptr"(%255, %256) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<59 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %258 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %259 = "llvm.getelementptr"(%257, %258) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%259) : (!llvm.ptr) -> ()
    }) {"func_name" = "Range_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_RangeIterator", "types" = [i32, i32, i32]} : () -> ()
    "mid.getter_def"() {"meth_name" = "RangeIterator_getter_counter", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "RangeIterator_setter_counter", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "RangeIterator_field_counter", "getter_name" = "RangeIterator_getter_counter", "setter_name" = "RangeIterator_setter_counter"} : () -> ()
    "mid.getter_def"() {"meth_name" = "RangeIterator_getter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "RangeIterator_setter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "RangeIterator_field_end", "getter_name" = "RangeIterator_getter_end", "setter_name" = "RangeIterator_setter_end"} : () -> ()
    "mid.getter_def"() {"meth_name" = "RangeIterator_getter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.setter_def"() {"meth_name" = "RangeIterator_setter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
    "mid.accessor_def"() {"meth_name" = "RangeIterator_field_step", "getter_name" = "RangeIterator_getter_step", "setter_name" = "RangeIterator_setter_step"} : () -> ()
    "mid.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "RangeIterator_field_RangeIterator_0", "id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> ()
    "mid.func"() ({
    ^bb64(%260 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %261 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %262 : !llvm.ptr, %263 : i32, %264 : i32, %265 : i32):
      %266 = "mid.wrap"(%260) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"RangeIterator">
      %267 = "hi.cast"(%266) {"from_typ" = !hi.fatptr<"RangeIterator">, "to_typ" = !hi.fatptr<"RangeIterator">, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"RangeIterator">
      %268 = "mid.wrap"(%263) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %269 = "hi.cast"(%268) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %270 = "hi.cast"(%269) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%267, %270) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %271 = "mid.wrap"(%264) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %272 = "hi.cast"(%271) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %273 = "hi.cast"(%272) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%267, %273) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %274 = "mid.wrap"(%265) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %275 = "hi.cast"(%274) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %276 = "hi.cast"(%275) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%267, %276) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "RangeIterator_init_counteri32_endi32_stepi32", "result_type" = !llvm.void, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb65(%277 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %278 : !llvm.ptr):
      %279 = "mid.invariant"(%278) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
      %280 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb66] : () -> ()
    ^bb67:
      %281 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
      "llvm.store"(%281, %280) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb68] : () -> ()
    ^bb69:
      %282 = "llvm.getelementptr"(%278) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %283 = "mid.checkflag"(%282) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %284 = "llvm.load"(%283) : (!hi.bool) -> i1
      "cf.cond_br"(%284) [^bb67, ^bb67] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb70:
      %285 = "llvm.getelementptr"(%278) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %286 = "mid.checkflag"(%285) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %287 = "llvm.load"(%286) : (!hi.bool) -> i1
      "cf.cond_br"(%287) [^bb69, ^bb69] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb66:
      %288 = "llvm.getelementptr"(%278) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %289 = "mid.checkflag"(%288) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %290 = "llvm.load"(%289) : (!hi.bool) -> i1
      "cf.cond_br"(%290) [^bb70, ^bb70] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb68:
      %291 = "llvm.extractvalue"(%277) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %292 = "llvm.load"(%280) : (!llvm.ptr) -> i32
      %293 = "llvm.getelementptr"(%291, %292) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %294 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %295 = "llvm.getelementptr"(%293, %294) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%295) : (!llvm.ptr) -> ()
    }) {"func_name" = "RangeIterator_B_init_counteri32_endi32_stepi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb71(%296 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %297 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %298 : !llvm.ptr):
      %299 = "mid.wrap"(%296) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"RangeIterator">
      %300 = "hi.cast"(%299) {"from_typ" = !hi.fatptr<"RangeIterator">, "to_typ" = !hi.fatptr<"RangeIterator">, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!hi.fatptr<"RangeIterator">) -> !hi.fatptr<"RangeIterator">
      %301 = "mid.get_field"(%300) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %302 = "mid.get_field"(%300) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %303 = "mid.unwrap"(%301) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %304 = "mid.unwrap"(%302) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %305 = "mid.comparison"(%303, %304) {"op" = "GT"} : (i32, i32) -> i1
      %306 = "mid.wrap"(%305) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %307 = "mid.unwrap"(%306) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%307) ({
        %308 = "mid.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %309 = "hi.cast"(%308) {"from_typ" = !hi.nil, "to_typ" = !hi.union<[!hi.nil, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !hi.union<[!hi.nil, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
        "mid.return"(%309) : (!hi.union<[!hi.nil, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
      }) : (i1) -> ()
      %310 = "mid.get_field"(%300) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %311 = "mid.refer"(%310) {"typ" = i32} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %312 = "mid.get_field"(%300) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %313 = "mid.get_field"(%300) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %314 = "mid.unwrap"(%312) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %315 = "mid.unwrap"(%313) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %316 = "mid.arithmetic"(%314, %315) {"op" = "ADD"} : (i32, i32) -> i32
      %317 = "mid.wrap"(%316) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %318 = "hi.cast"(%317) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.set_field"(%300, %318) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!hi.fatptr<"RangeIterator">, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      %319 = "hi.cast"(%311) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.nil, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.nil, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      "mid.return"(%319) : (!hi.union<[!hi.nil, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
    }) {"func_name" = "RangeIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb72(%320 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %321 : !llvm.ptr):
      %322 = "mid.invariant"(%321) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
      %323 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb73] : () -> ()
    ^bb73:
      %324 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%324, %323) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb74] : () -> ()
    ^bb74:
      %325 = "llvm.extractvalue"(%320) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %326 = "llvm.load"(%323) : (!llvm.ptr) -> i32
      %327 = "llvm.getelementptr"(%325, %326) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %328 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %329 = "llvm.getelementptr"(%327, %328) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%329) : (!llvm.ptr) -> ()
    }) {"func_name" = "RangeIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "math"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 85 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.typedef"() {"class_name" = "Math", "methods" = [@Math_B__Self_sqrt_xf64, @Math_B__Self_abs_xi32__Self_abs_xf64, @Math_B__Self_max_af64_bf64__Self_max_ai32_bi32, @Math_B__Self_min_af64_bf64__Self_min_ai32_bi32, @Math_B__Self_round_xf64, @Math_B__Self_floor_xf64, @Math_B__Self_ceiling_xf64, @Math__Self_sqrt_xf64, @Math__Self_abs_xi32, @Math__Self_abs_xf64, @Math__Self_max_af64_bf64, @Math__Self_max_ai32_bi32, @Math__Self_min_af64_bf64, @Math__Self_min_ai32_bi32, @Math__Self_round_xf64, @Math__Self_floor_xf64, @Math__Self_ceiling_xf64], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Math], "offset_tbl" = [27 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 8094150130346788308 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Math", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.data_size_def"() {"meth_name" = "_data_size_Math", "types" = []} : () -> ()
    "mid.func"() ({
    ^bb0(%0 : !llvm.ptr, %1 : f64):
      %2 = "mid.wrap"(%1) : (f64) -> !hi.float
      %3 = "hi.cast"(%2) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      %4 = "mid.unwrap"(%3) : (!hi.float) -> f64
      %5 = "mid.intrinsic"(%4) {"call_name" = "llvm.sqrt.f64", "num_args" = 1 : i32} : (f64) -> f64
      %6 = "mid.wrap"(%5) : (f64) -> !hi.float
      %7 = "hi.cast"(%6) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      "mid.return"(%7) : (!hi.float) -> ()
    }) {"func_name" = "Math__Self_sqrt_xf64", "result_type" = f64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb1(%8 : !llvm.ptr):
      %9 = "mid.invariant"(%8) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %10 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb2] : () -> ()
    ^bb3:
      %11 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
      "llvm.store"(%11, %10) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb4] : () -> ()
    ^bb2:
      %12 = "llvm.getelementptr"(%8) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %13 = "mid.checkflag"(%12) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %14 = "llvm.load"(%13) : (!hi.bool) -> i1
      "cf.cond_br"(%14) [^bb3, ^bb3] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb4:
      %15 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %16 = "llvm.load"(%10) : (!llvm.ptr) -> i32
      %17 = "llvm.getelementptr"(%15, %16) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %18 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %19 = "llvm.getelementptr"(%17, %18) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%19) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_sqrt_xf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb5(%20 : !llvm.ptr, %21 : !llvm.struct<(!llvm.ptr, i64)>):
      %22 = "mid.wrap"(%21) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %23 = "hi.cast"(%22) {"from_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %24 = "mid.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %25 = "mid.unwrap"(%23) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %26 = "mid.unwrap"(%24) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %27 = "mid.comparison"(%25, %26) {"op" = "GE"} : (i32, i32) -> i1
      %28 = "mid.wrap"(%27) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %29 = "mid.unwrap"(%28) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%29) ({
        %30 = "hi.cast"(%23) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
        "mid.return"(%30) : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
      }) : (i1) -> ()
      %31 = "mid.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %32 = "mid.unwrap"(%31) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %33 = "mid.unwrap"(%23) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %34 = "mid.arithmetic"(%32, %33) {"op" = "MUL"} : (i32, i32) -> i32
      %35 = "mid.wrap"(%34) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %36 = "hi.cast"(%35) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      "mid.return"(%36) : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
    }) {"func_name" = "Math__Self_abs_xi32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb6(%37 : !llvm.ptr, %38 : !llvm.struct<(!llvm.ptr, i64)>):
      %39 = "mid.wrap"(%38) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %40 = "hi.cast"(%39) {"from_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.float
      %41 = "mid.literal"() {"value" = 0.000000e+00 : f64, "typ" = f64} : () -> !hi.float
      %42 = "mid.unwrap"(%40) : (!hi.float) -> f64
      %43 = "mid.unwrap"(%41) : (!hi.float) -> f64
      %44 = "mid.comparison"(%42, %43) {"op" = "GE"} : (f64, f64) -> i1
      %45 = "mid.wrap"(%44) : (i1) -> !hi.float
      %46 = "mid.unwrap"(%45) : (!hi.float) -> i1
      "mid.if"(%46) ({
        %47 = "hi.cast"(%40) {"from_typ" = !hi.float, "to_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
        "mid.return"(%47) : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
      }) : (i1) -> ()
      %48 = "mid.literal"() {"value" = 0.000000e+00 : f64, "typ" = f64} : () -> !hi.float
      %49 = "mid.literal"() {"value" = 1.000000e+00 : f64, "typ" = f64} : () -> !hi.float
      %50 = "mid.unwrap"(%48) : (!hi.float) -> f64
      %51 = "mid.unwrap"(%49) : (!hi.float) -> f64
      %52 = "mid.arithmetic"(%50, %51) {"op" = "SUB"} : (f64, f64) -> f64
      %53 = "mid.wrap"(%52) : (f64) -> !hi.float
      %54 = "mid.unwrap"(%53) : (!hi.float) -> f64
      %55 = "mid.unwrap"(%40) : (!hi.float) -> f64
      %56 = "mid.arithmetic"(%54, %55) {"op" = "MUL"} : (f64, f64) -> f64
      %57 = "mid.wrap"(%56) : (f64) -> !hi.float
      %58 = "hi.cast"(%57) {"from_typ" = !hi.float, "to_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      "mid.return"(%58) : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
    }) {"func_name" = "Math__Self_abs_xf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb7(%59 : !llvm.ptr):
      %60 = "mid.invariant"(%59) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %61 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb8] : () -> ()
    ^bb9:
      %62 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
      "llvm.store"(%62, %61) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb10] : () -> ()
    ^bb11:
      %63 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
      "llvm.store"(%63, %61) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb10] : () -> ()
    ^bb8:
      %64 = "llvm.getelementptr"(%59) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %65 = "mid.checkflag"(%64) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %66 = "llvm.load"(%65) : (!hi.bool) -> i1
      "cf.cond_br"(%66) [^bb9, ^bb12] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb12:
      %67 = "llvm.getelementptr"(%59) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %68 = "mid.checkflag"(%67) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %69 = "llvm.load"(%68) : (!hi.bool) -> i1
      "cf.cond_br"(%69) [^bb11, ^bb11] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb10:
      %70 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %71 = "llvm.load"(%61) : (!llvm.ptr) -> i32
      %72 = "llvm.getelementptr"(%70, %71) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %73 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %74 = "llvm.getelementptr"(%72, %73) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%74) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_abs_xi32__Self_abs_xf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb13(%75 : !llvm.ptr, %76 : !llvm.struct<(!llvm.ptr, i64)>, %77 : !llvm.struct<(!llvm.ptr, i64)>):
      %78 = "mid.wrap"(%76) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %79 = "hi.cast"(%78) {"from_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.float
      %80 = "mid.wrap"(%77) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %81 = "hi.cast"(%80) {"from_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.float
      %82 = "mid.unwrap"(%79) : (!hi.float) -> f64
      %83 = "mid.unwrap"(%81) : (!hi.float) -> f64
      %84 = "mid.comparison"(%82, %83) {"op" = "GT"} : (f64, f64) -> i1
      %85 = "mid.wrap"(%84) : (i1) -> !hi.float
      %86 = "mid.unwrap"(%85) : (!hi.float) -> i1
      "mid.if"(%86) ({
        %87 = "hi.cast"(%79) {"from_typ" = !hi.float, "to_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
        "mid.return"(%87) : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
      }) : (i1) -> ()
      %88 = "hi.cast"(%81) {"from_typ" = !hi.float, "to_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      "mid.return"(%88) : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
    }) {"func_name" = "Math__Self_max_af64_bf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb14(%89 : !llvm.ptr, %90 : !llvm.struct<(!llvm.ptr, i64)>, %91 : !llvm.struct<(!llvm.ptr, i64)>):
      %92 = "mid.wrap"(%90) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %93 = "hi.cast"(%92) {"from_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %94 = "mid.wrap"(%91) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %95 = "hi.cast"(%94) {"from_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %96 = "mid.unwrap"(%93) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %97 = "mid.unwrap"(%95) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %98 = "mid.comparison"(%96, %97) {"op" = "GT"} : (i32, i32) -> i1
      %99 = "mid.wrap"(%98) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %100 = "mid.unwrap"(%99) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%100) ({
        %101 = "hi.cast"(%93) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
        "mid.return"(%101) : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
      }) : (i1) -> ()
      %102 = "hi.cast"(%95) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      "mid.return"(%102) : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
    }) {"func_name" = "Math__Self_max_ai32_bi32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb15(%103 : !llvm.ptr):
      %104 = "mid.invariant"(%103) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %105 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb16] : () -> ()
    ^bb17:
      %106 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      "llvm.store"(%106, %105) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb19:
      %107 = "llvm.getelementptr"(%103) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %108 = "mid.checkflag"(%107) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %109 = "llvm.load"(%108) : (!hi.bool) -> i1
      "cf.cond_br"(%109) [^bb17, ^bb17] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb20:
      %110 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
      "llvm.store"(%110, %105) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb18] : () -> ()
    ^bb21:
      %111 = "llvm.getelementptr"(%103) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %112 = "mid.checkflag"(%111) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %113 = "llvm.load"(%112) : (!hi.bool) -> i1
      "cf.cond_br"(%113) [^bb20, ^bb20] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb16:
      %114 = "llvm.getelementptr"(%103) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %115 = "mid.checkflag"(%114) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %116 = "llvm.load"(%115) : (!hi.bool) -> i1
      "cf.cond_br"(%116) [^bb19, ^bb22] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb22:
      %117 = "llvm.getelementptr"(%103) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %118 = "mid.checkflag"(%117) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %119 = "llvm.load"(%118) : (!hi.bool) -> i1
      "cf.cond_br"(%119) [^bb21, ^bb21] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb18:
      %120 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %121 = "llvm.load"(%105) : (!llvm.ptr) -> i32
      %122 = "llvm.getelementptr"(%120, %121) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %123 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %124 = "llvm.getelementptr"(%122, %123) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%124) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_max_af64_bf64__Self_max_ai32_bi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb23(%125 : !llvm.ptr, %126 : !llvm.struct<(!llvm.ptr, i64)>, %127 : !llvm.struct<(!llvm.ptr, i64)>):
      %128 = "mid.wrap"(%126) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %129 = "hi.cast"(%128) {"from_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.float
      %130 = "mid.wrap"(%127) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %131 = "hi.cast"(%130) {"from_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "to_typ" = !hi.float, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.float
      %132 = "mid.unwrap"(%129) : (!hi.float) -> f64
      %133 = "mid.unwrap"(%131) : (!hi.float) -> f64
      %134 = "mid.comparison"(%132, %133) {"op" = "LT"} : (f64, f64) -> i1
      %135 = "mid.wrap"(%134) : (i1) -> !hi.float
      %136 = "mid.unwrap"(%135) : (!hi.float) -> i1
      "mid.if"(%136) ({
        %137 = "hi.cast"(%129) {"from_typ" = !hi.float, "to_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
        "mid.return"(%137) : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
      }) : (i1) -> ()
      %138 = "hi.cast"(%131) {"from_typ" = !hi.float, "to_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!hi.float) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      "mid.return"(%138) : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
    }) {"func_name" = "Math__Self_min_af64_bf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb24(%139 : !llvm.ptr, %140 : !llvm.struct<(!llvm.ptr, i64)>, %141 : !llvm.struct<(!llvm.ptr, i64)>):
      %142 = "mid.wrap"(%140) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %143 = "hi.cast"(%142) {"from_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %144 = "mid.wrap"(%141) : (!llvm.struct<(!llvm.ptr, i64)>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %145 = "hi.cast"(%144) {"from_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %146 = "mid.unwrap"(%143) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %147 = "mid.unwrap"(%145) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %148 = "mid.comparison"(%146, %147) {"op" = "LT"} : (i32, i32) -> i1
      %149 = "mid.wrap"(%148) : (i1) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %150 = "mid.unwrap"(%149) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i1
      "mid.if"(%150) ({
        %151 = "hi.cast"(%143) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
        "mid.return"(%151) : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
      }) : (i1) -> ()
      %152 = "hi.cast"(%145) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      "mid.return"(%152) : (!hi.union<[!hi.float, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> ()
    }) {"func_name" = "Math__Self_min_ai32_bi32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb25(%153 : !llvm.ptr):
      %154 = "mid.invariant"(%153) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
      %155 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb26] : () -> ()
    ^bb27:
      %156 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
      "llvm.store"(%156, %155) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb28] : () -> ()
    ^bb29:
      %157 = "llvm.getelementptr"(%153) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %158 = "mid.checkflag"(%157) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %159 = "llvm.load"(%158) : (!hi.bool) -> i1
      "cf.cond_br"(%159) [^bb27, ^bb27] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb30:
      %160 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
      "llvm.store"(%160, %155) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb28] : () -> ()
    ^bb31:
      %161 = "llvm.getelementptr"(%153) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %162 = "mid.checkflag"(%161) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %163 = "llvm.load"(%162) : (!hi.bool) -> i1
      "cf.cond_br"(%163) [^bb30, ^bb30] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb26:
      %164 = "llvm.getelementptr"(%153) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %165 = "mid.checkflag"(%164) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !hi.bool
      %166 = "llvm.load"(%165) : (!hi.bool) -> i1
      "cf.cond_br"(%166) [^bb29, ^bb32] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb32:
      %167 = "llvm.getelementptr"(%153) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %168 = "mid.checkflag"(%167) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %169 = "llvm.load"(%168) : (!hi.bool) -> i1
      "cf.cond_br"(%169) [^bb31, ^bb31] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb28:
      %170 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %171 = "llvm.load"(%155) : (!llvm.ptr) -> i32
      %172 = "llvm.getelementptr"(%170, %171) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %173 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %174 = "llvm.getelementptr"(%172, %173) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%174) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_min_af64_bf64__Self_min_ai32_bi32", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb33(%175 : !llvm.ptr, %176 : f64):
      %177 = "mid.wrap"(%176) : (f64) -> !hi.float
      %178 = "hi.cast"(%177) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      %179 = "mid.unwrap"(%178) : (!hi.float) -> f64
      %180 = "mid.intrinsic"(%179) {"call_name" = "llvm.round.f64", "num_args" = 1 : i32} : (f64) -> f64
      %181 = "mid.wrap"(%180) : (f64) -> !hi.float
      %182 = "hi.cast"(%181) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      "mid.return"(%182) : (!hi.float) -> ()
    }) {"func_name" = "Math__Self_round_xf64", "result_type" = f64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb34(%183 : !llvm.ptr):
      %184 = "mid.invariant"(%183) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %185 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb35] : () -> ()
    ^bb36:
      %186 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
      "llvm.store"(%186, %185) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb37] : () -> ()
    ^bb35:
      %187 = "llvm.getelementptr"(%183) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %188 = "mid.checkflag"(%187) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %189 = "llvm.load"(%188) : (!hi.bool) -> i1
      "cf.cond_br"(%189) [^bb36, ^bb36] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb37:
      %190 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %191 = "llvm.load"(%185) : (!llvm.ptr) -> i32
      %192 = "llvm.getelementptr"(%190, %191) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %193 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %194 = "llvm.getelementptr"(%192, %193) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%194) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_round_xf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb38(%195 : !llvm.ptr, %196 : f64):
      %197 = "mid.wrap"(%196) : (f64) -> !hi.float
      %198 = "hi.cast"(%197) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      %199 = "mid.unwrap"(%198) : (!hi.float) -> f64
      %200 = "mid.intrinsic"(%199) {"call_name" = "llvm.floor.f64", "num_args" = 1 : i32} : (f64) -> f64
      %201 = "mid.wrap"(%200) : (f64) -> !hi.float
      %202 = "hi.cast"(%201) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      "mid.return"(%202) : (!hi.float) -> ()
    }) {"func_name" = "Math__Self_floor_xf64", "result_type" = f64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb39(%203 : !llvm.ptr):
      %204 = "mid.invariant"(%203) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %205 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb40] : () -> ()
    ^bb41:
      %206 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
      "llvm.store"(%206, %205) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb42] : () -> ()
    ^bb40:
      %207 = "llvm.getelementptr"(%203) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %208 = "mid.checkflag"(%207) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %209 = "llvm.load"(%208) : (!hi.bool) -> i1
      "cf.cond_br"(%209) [^bb41, ^bb41] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb42:
      %210 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %211 = "llvm.load"(%205) : (!llvm.ptr) -> i32
      %212 = "llvm.getelementptr"(%210, %211) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %213 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %214 = "llvm.getelementptr"(%212, %213) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%214) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_floor_xf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
    "mid.func"() ({
    ^bb43(%215 : !llvm.ptr, %216 : f64):
      %217 = "mid.wrap"(%216) : (f64) -> !hi.float
      %218 = "hi.cast"(%217) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      %219 = "mid.unwrap"(%218) : (!hi.float) -> f64
      %220 = "mid.intrinsic"(%219) {"call_name" = "llvm.ceil.f64", "num_args" = 1 : i32} : (f64) -> f64
      %221 = "mid.wrap"(%220) : (f64) -> !hi.float
      %222 = "hi.cast"(%221) {"from_typ" = !hi.float, "to_typ" = !hi.float, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!hi.float) -> !hi.float
      "mid.return"(%222) : (!hi.float) -> ()
    }) {"func_name" = "Math__Self_ceiling_xf64", "result_type" = f64, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.func"() ({
    ^bb44(%223 : !llvm.ptr):
      %224 = "mid.invariant"(%223) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
      %225 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "cf.br"() [^bb45] : () -> ()
    ^bb46:
      %226 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
      "llvm.store"(%226, %225) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
      "cf.br"() [^bb47] : () -> ()
    ^bb45:
      %227 = "llvm.getelementptr"(%223) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
      %228 = "mid.checkflag"(%227) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !hi.bool
      %229 = "llvm.load"(%228) : (!hi.bool) -> i1
      "cf.cond_br"(%229) [^bb46, ^bb46] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
    ^bb47:
      %230 = "mid.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
      %231 = "llvm.load"(%225) : (!llvm.ptr) -> i32
      %232 = "llvm.getelementptr"(%230, %231) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
      %233 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
      %234 = "llvm.getelementptr"(%232, %233) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
      "mid.return"(%234) : (!llvm.ptr) -> ()
    }) {"func_name" = "Math_B__Self_ceiling_xf64", "result_type" = !llvm.ptr, "yield_type" = !hi.nil} : () -> ()
  }
  builtin.module attributes  {"sym_name" = "std"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 85 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Math", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Range", "vtbl_size" = 59 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "RangeIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "IO", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Blocking", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Channel", "vtbl_size" = 8 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Array", "vtbl_size" = 87 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ArrayIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileSystemError", "vtbl_size" = 34 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "File", "vtbl_size" = 20 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileProcessor", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileReader", "vtbl_size" = 8 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileWriter", "vtbl_size" = 9 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileSystem", "vtbl_size" = 7 : i32} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fopen", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr)> (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fprintf", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fclose", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgetc", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgets", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i32, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ferror", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fseek", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, i64, i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ftell", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fread", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fwrite", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "perror", "function_type" = !llvm.func<void (i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
  }
  builtin.module attributes  {"sym_name" = "tuple_iteration"} {
    "mid.prelude"() : () -> ()
    "mid.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Pair", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Container", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterator", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Iterable", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumeration", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Enumerator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterable", "vtbl_size" = 55 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MapIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FilterIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterable", "vtbl_size" = 54 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleaveIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZipIterator", "vtbl_size" = 12 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterable", "vtbl_size" = 56 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductIterator", "vtbl_size" = 14 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Collection", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "EnumeratedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "MappedCollection", "vtbl_size" = 119 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ChainedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "InterleavedCollection", "vtbl_size" = 118 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ZippedCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ProductCollection", "vtbl_size" = 120 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Representable", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "String", "vtbl_size" = 85 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Character", "vtbl_size" = 5 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "StringIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Exception", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBounds", "vtbl_size" = 37 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "OutOfBoundsDetails", "vtbl_size" = 6 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Math", "vtbl_size" = 17 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Range", "vtbl_size" = 59 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "RangeIterator", "vtbl_size" = 11 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "IO", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Blocking", "vtbl_size" = 2 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Channel", "vtbl_size" = 8 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "Array", "vtbl_size" = 87 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "ArrayIterator", "vtbl_size" = 10 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileSystemError", "vtbl_size" = 34 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "File", "vtbl_size" = 20 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileProcessor", "vtbl_size" = 0 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileReader", "vtbl_size" = 8 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileWriter", "vtbl_size" = 9 : i32} : () -> ()
    "mid.external_typedef"() {"class_name" = "FileSystem", "vtbl_size" = 7 : i32} : () -> ()
    "llvm.func"() <{"sym_name" = "capture_backtrace", "function_type" = !llvm.func<i64 (i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "print_backtrace", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>, i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "report_exception", "function_type" = !llvm.func<void (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fopen", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr)> (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fprintf", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fclose", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgetc", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fgets", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i32, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ferror", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fseek", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, i64, i32)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "ftell", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fread", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "fwrite", "function_type" = !llvm.func<i64 (!llvm.struct<(!llvm.ptr)>, i64, i64, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "llvm.func"() <{"sym_name" = "perror", "function_type" = !llvm.func<void (i64)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
    }) : () -> ()
    "mid.func"() ({
    ^bb0(%0 : i32):
      %1 = "mid.wrap"(%0) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %2 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %3 = "mid.unwrap"(%1) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %4 = "mid.unwrap"(%2) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %5 = "mid.arithmetic"(%3, %4) {"op" = "MUL"} : (i32, i32) -> i32
      %6 = "mid.wrap"(%5) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %7 = "hi.cast"(%6) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      "mid.return"(%7) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
    }) {"func_name" = "_functionliteral_xmdietjlyx", "result_type" = i32, "yield_type" = !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>} : () -> ()
    "mid.main"() ({
      "cf.br"() [^bb1] : () -> ()
    ^bb1:
      "cf.br"() [^bb2] : () -> ()
    ^bb2:
      "cf.br"() [^bb3] : () -> ()
    ^bb3:
      "cf.br"() [^bb4] : () -> ()
    ^bb4:
      "cf.br"() [^bb5] : () -> ()
    ^bb5:
      "cf.br"() [^bb6] : () -> ()
    ^bb6:
      "cf.br"() [^bb7] : () -> ()
    ^bb7:
      "cf.br"() [^bb8] : () -> ()
    ^bb8:
      "cf.br"() [^bb9] : () -> ()
    ^bb9:
      "cf.br"() [^bb10] : () -> ()
    ^bb10:
      "cf.br"() [^bb11] : () -> ()
    ^bb11:
      "cf.br"() [^bb12] : () -> ()
    ^bb12:
      "cf.br"() [^bb13] : () -> ()
    ^bb13:
      "cf.br"() [^bb14] : () -> ()
    ^bb14:
      "cf.br"() [^bb15] : () -> ()
    ^bb15:
      "cf.br"() [^bb16] : () -> ()
    ^bb16:
      "cf.br"() [^bb17] : () -> ()
    ^bb17:
      "cf.br"() [^bb18] : () -> ()
    ^bb18:
      "cf.br"() [^bb19] : () -> ()
    ^bb19:
      "cf.br"() [^bb20] : () -> ()
    ^bb20:
      "cf.br"() [^bb21] : () -> ()
    ^bb21:
      "cf.br"() [^bb22] : () -> ()
    ^bb22:
      "cf.br"() [^bb23] : () -> ()
    ^bb23:
      "cf.br"() [^bb24] : () -> ()
    ^bb24:
      "cf.br"() [^bb25] : () -> ()
    ^bb25:
      "cf.br"() [^bb26] : () -> ()
    ^bb26:
      "cf.br"() [^bb27] : () -> ()
    ^bb27:
      "cf.br"() [^bb28] : () -> ()
    ^bb28:
      "cf.br"() [^bb29] : () -> ()
    ^bb29:
      "cf.br"() [^bb30] : () -> ()
    ^bb30:
      "cf.br"() [^bb31] : () -> ()
    ^bb31:
      "cf.br"() [^bb32] : () -> ()
    ^bb32:
      "cf.br"() [^bb33] : () -> ()
    ^bb33:
      "cf.br"() [^bb34] : () -> ()
    ^bb34:
      "cf.br"() [^bb35] : () -> ()
    ^bb35:
      "cf.br"() [^bb36] : () -> ()
    ^bb36:
      "cf.br"() [^bb37] : () -> ()
    ^bb37:
      "cf.br"() [^bb38] : () -> ()
    ^bb38:
      "cf.br"() [^bb39] : () -> ()
    ^bb39:
      "cf.br"() [^bb40] : () -> ()
    ^bb40:
      "cf.br"() [^bb41] : () -> ()
    ^bb41:
      "cf.br"() [^bb42] : () -> ()
    ^bb42:
      "cf.br"() [^bb43] : () -> ()
    ^bb43:
      "cf.br"() [^bb44] : () -> ()
    ^bb44:
      "cf.br"() [^bb45] : () -> ()
    ^bb45:
      "cf.br"() [^bb46] : () -> ()
    ^bb46:
      "cf.br"() [^bb47] : () -> ()
    ^bb47:
      "cf.br"() [^bb48] : () -> ()
    ^bb48:
      "cf.br"() [^bb49] : () -> ()
    ^bb49:
      "cf.br"() [^bb50] : () -> ()
    ^bb50:
      "cf.br"() [^bb51] : () -> ()
    ^bb51:
      "cf.br"() [^bb52] : () -> ()
    ^bb52:
      "cf.br"() [^bb53] : () -> ()
    ^bb53:
      "cf.br"() [^bb54] : () -> ()
    ^bb54:
      "cf.br"() [^bb55] : () -> ()
    ^bb55:
      "cf.br"() [^bb56] : () -> ()
    ^bb56:
      "cf.br"() [^bb57] : () -> ()
    ^bb57:
      "cf.br"() [^bb58] : () -> ()
    ^bb58:
      "cf.br"() [^bb59] : () -> ()
    ^bb59:
      "cf.br"() [^bb60] : () -> ()
    ^bb60:
      "cf.br"() [^bb61] : () -> ()
    ^bb61:
      "cf.br"() [^bb62] : () -> ()
    ^bb62:
      "cf.br"() [^bb63] : () -> ()
    ^bb63:
      "cf.br"() [^bb64] : () -> ()
    ^bb64:
      "cf.br"() [^bb65] : () -> ()
    ^bb65:
      "cf.br"() [^bb66] : () -> ()
    ^bb66:
      %8 = "mid.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %9 = "mid.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %10 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %11 = "mid.unwrap"(%8) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %12 = "mid.unwrap"(%9) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %13 = "mid.unwrap"(%10) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %14 = "mid.create_tuple"(%11, %12, %13) {"typ" = vector<3xi32>} : (i32, i32, i32) -> !hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %15 = "mid.addr_of"() {"global_name" = @_functionliteral_xmdietjlyx} : () -> !llvm.ptr
      %16 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "llvm.store"(%15, %16) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
      %17 = "hi.cast"(%16) {"from_typ" = !hi.function<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>], !hi.union<[!hi.fatptr<"Exception">, !hi.nil]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.function<[!hi.type_param<"T", !hi.any, "Array">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !hi.function<[!hi.type_param<"T", !hi.any, "Array">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>
      %18 = "mid.unwrap"(%17) : (!hi.function<[!hi.type_param<"T", !hi.any, "Array">], !hi.any, !hi.type_param<"U", !hi.any, "Iterable">>) -> !llvm.struct<(!llvm.ptr)>
      %19 = "mid.tuple_indexation"(%14) {"typ" = vector<3xi32>, "index" = 0 : i32} : (!hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %20 = "mid.tuple_indexation"(%14) {"typ" = vector<3xi32>, "index" = 0 : i32} : (!hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %21 = "mid.unwrap"(%19) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %22 = "mid.unwrap"(%20) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %23 = "mid.arithmetic"(%21, %22) {"op" = "MUL"} : (i32, i32) -> i32
      %24 = "mid.wrap"(%23) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %25 = "mid.tuple_indexation"(%14) {"typ" = vector<3xi32>, "index" = 1 : i32} : (!hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %26 = "mid.tuple_indexation"(%14) {"typ" = vector<3xi32>, "index" = 1 : i32} : (!hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %27 = "mid.unwrap"(%25) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %28 = "mid.unwrap"(%26) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %29 = "mid.arithmetic"(%27, %28) {"op" = "MUL"} : (i32, i32) -> i32
      %30 = "mid.wrap"(%29) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %31 = "mid.tuple_indexation"(%14) {"typ" = vector<3xi32>, "index" = 2 : i32} : (!hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %32 = "mid.tuple_indexation"(%14) {"typ" = vector<3xi32>, "index" = 2 : i32} : (!hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %33 = "mid.unwrap"(%31) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %34 = "mid.unwrap"(%32) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %35 = "mid.arithmetic"(%33, %34) {"op" = "MUL"} : (i32, i32) -> i32
      %36 = "mid.wrap"(%35) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %37 = "mid.unwrap"(%24) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %38 = "mid.unwrap"(%30) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %39 = "mid.unwrap"(%36) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %40 = "mid.create_tuple"(%37, %38, %39) {"typ" = vector<3xi32>} : (i32, i32, i32) -> !hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %41 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "llvm.store"(%40, %41) <{"ordering" = 0 : i64}> : (!hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, !llvm.ptr) -> ()
      %42 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %43 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %44 = "mid.unwrap"(%41) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr)>
      %45 = "mid.unwrap"(%42) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %46 = "mid.unwrap"(%43) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %47 = "mid.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %48 = "mid.tuple_indexation"(%14) {"typ" = vector<3xi32>, "index" = 0 : i32} : (!hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %49 = "mid.tuple_indexation"(%14) {"typ" = vector<3xi32>, "index" = 0 : i32} : (!hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %50 = "mid.unwrap"(%48) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %51 = "mid.unwrap"(%49) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %52 = "mid.arithmetic"(%50, %51) {"op" = "MUL"} : (i32, i32) -> i32
      %53 = "mid.wrap"(%52) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %54 = "mid.tuple_indexation"(%14) {"typ" = vector<3xi32>, "index" = 1 : i32} : (!hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %55 = "mid.tuple_indexation"(%14) {"typ" = vector<3xi32>, "index" = 1 : i32} : (!hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %56 = "mid.unwrap"(%54) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %57 = "mid.unwrap"(%55) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %58 = "mid.arithmetic"(%56, %57) {"op" = "MUL"} : (i32, i32) -> i32
      %59 = "mid.wrap"(%58) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %60 = "mid.tuple_indexation"(%14) {"typ" = vector<3xi32>, "index" = 2 : i32} : (!hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %61 = "mid.tuple_indexation"(%14) {"typ" = vector<3xi32>, "index" = 2 : i32} : (!hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %62 = "mid.unwrap"(%60) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %63 = "mid.unwrap"(%61) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %64 = "mid.arithmetic"(%62, %63) {"op" = "MUL"} : (i32, i32) -> i32
      %65 = "mid.wrap"(%64) : (i32) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %66 = "mid.unwrap"(%53) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %67 = "mid.unwrap"(%59) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %68 = "mid.unwrap"(%65) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %69 = "mid.create_tuple"(%66, %67, %68) {"typ" = vector<3xi32>} : (i32, i32, i32) -> !hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %70 = "mid.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
      "llvm.store"(%69, %70) <{"ordering" = 0 : i64}> : (!hi.tuple<[!hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, !llvm.ptr) -> ()
      %71 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %72 = "mid.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %73 = "hi.cast"(%70) {"from_typ" = !hi.buffer<!hi.int<#builtin.int<32>, #builtin.signedness<signed>>>, "to_typ" = !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !hi.buffer<!hi.type_param<"T", !hi.any, "Array">>
      %74 = "mid.unwrap"(%73) : (!hi.buffer<!hi.type_param<"T", !hi.any, "Array">>) -> !llvm.struct<(!llvm.ptr)>
      %75 = "hi.cast"(%71) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %76 = "mid.unwrap"(%75) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %77 = "hi.cast"(%72) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
      %78 = "mid.unwrap"(%77) : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> i32
      %79 = "mid.unwrap"(%47) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %80 = "mid.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi32"]} : () -> !llvm.ptr
      %81 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %82 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %83 = "mid.parameterizations_array"(%80, %81, %82) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mid.method_call"(%83, %79, %74, %76, %78) {"offset" = 8 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 87 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %84 = "mid.unwrap"(%47) : (!hi.fatptr<"Array", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %85 = "mid.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
      %86 = "mid.parameterizations_array"(%85) : (!llvm.ptr) -> !llvm.ptr
      %87 = "mid.method_call"(%86, %84, %18) {"offset" = 25 : i32, "vptrs" = ["function_typ"], "vtable_size" = 87 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>
      %88 = "hi.cast"(%87) {"from_typ" = !hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterable", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!hi.fatptr<"Iterable", [!hi.type_param<"U", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterable", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %89 = "mid.refer"(%88) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterable", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.fatptr<"Iterable", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %90 = "mid.unwrap"(%89) : (!hi.fatptr<"Iterable", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %91 = "mid.parameterizations_array"() : () -> !llvm.ptr
      %92 = "mid.method_call"(%91, %90) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 25 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>
      %93 = "hi.cast"(%92) {"from_typ" = !hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>, "to_typ" = !hi.fatptr<"Iterator", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!hi.fatptr<"Iterator", [!hi.type_param<"T", !hi.any, "Iterable">]>) -> !hi.fatptr<"Iterator", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      %94 = "mid.refer"(%93) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!hi.fatptr<"Iterator", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.fatptr<"Iterator", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
      "mid.while"() ({
        %95 = "mid.unwrap"(%94) : (!hi.fatptr<"Iterator", [!hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %96 = "mid.parameterizations_array"() : () -> !llvm.ptr
        %97 = "mid.method_call"(%96, %95) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>
        %98 = "hi.cast"(%97) {"from_typ" = !hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>, "to_typ" = !hi.union<[!hi.nil, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!hi.union<[!hi.type_param<"T", !hi.any, "Iterator">, !hi.nil]>) -> !hi.union<[!hi.nil, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>
        %99 = "mid.checkflag"(%98) {"typ_name" = "nil_typ", "neg"} : (!hi.union<[!hi.nil, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<1>, #builtin.signedness<signed>>
        %100 = "mid.unwrap"(%99) : (!hi.int<#builtin.int<1>, #builtin.signedness<signed>>) -> i1
      }, {
        %101 = "hi.cast"(%98) {"from_typ" = !hi.union<[!hi.nil, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!hi.union<[!hi.nil, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        %102 = "hi.cast"(%101) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>
        %103 = "mid.unwrap"(%102) : (!hi.union<[!hi.int<#builtin.int<64>, #builtin.signedness<signed>>, !hi.fatptr<"Character">, !hi.bool, !hi.float, !hi.nil, !hi.fatptr<"Representable">]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %104 = "mid.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %105 = "mid.parameterizations_array"(%104) : (!llvm.ptr) -> !llvm.ptr
        "mid.class_method_call"(%105, %103) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %106 = "hi.cast"(%101) {"from_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "to_typ" = !hi.int<#builtin.int<32>, #builtin.signedness<signed>>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> !hi.int<#builtin.int<32>, #builtin.signedness<signed>>
        "mid.assign"(%98, %106) {"typ" = i32} : (!hi.union<[!hi.nil, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>]>, !hi.int<#builtin.int<32>, #builtin.signedness<signed>>) -> ()
      }) : () -> ()
    }) {"main_name" = "_main_tuple_iteration"} : () -> ()
  }
}
