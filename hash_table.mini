import collections;

def i32_hasher(i : i32) -> i32 {
	i = (i + 0x7ed55d16) + (i << 12);
    i = (i bit_xor 0xc761c23c) bit_xor (i >> 19);
    i = (i + 0x165667b1) + (i << 5);
    i = (i + 0xd3a2646c) bit_xor (i << 9);
    i = (i + 0xfd7046c5) + (i << 3);
    i = (i bit_xor 0xb55a4f09) bit_xor (i >> 16);
    return i;
}

def i32_eq(a : i32, b : i32) -> Bool {
	return a == b;
}

class Tombstone {
	def init() {}
}

class Entry[K,V] {
    @key: K
    @value: V | Tombstone
    @hash: i32

    def init(@key: K, @value: V, @hash: i32) {}

    def init(@key: K, @value: Tombstone, @hash: i32) {}
    
    def key() -> K { return @key; }
    def value() -> V | Tombstone { return @value; }
    def hash() -> i32 { return @hash; }
}

class HashMap[K,V] extends Iterable2[Pair[K,V]] {
    @entries: Array[Entry[K,V] | Nil]
    @size: i32      // Number of actual entries
    @load: i32      // Number of entries including tombstones
    @hasher: (K) -> i32
    @eq: (K, K) -> Bool
    
    def init(@hasher: (K) -> i32, @eq : (K, K) -> Bool) {
        @entries = Array[Entry[K,V] | Nil].new(16);
        i = 0;
        while i < 16 {
            @entries.append(nil);
            i = i + 1;
        }
        @size = 0;
        @load = 0;
    }

    def find_slot(key: K, hash: i32) -> i32 {
        i = hash bit_and (@entries.length() - 1);  // Mask to table size
        while true {
            entry = @entries.[i];
            if entry is Entry[K, V] {
            	if entry.hash() == hash {
                	if @eq.call(entry.key(), key) {
                        return i;
                    }
            	}
            	i = (i + 1) bit_and (@entries.length() - 1);  // Linear probe
            }
            return i;
        }
    }

    def resize(new_size: i32) {
        old_entries = @entries;
        @entries = Array[Entry[K,V] | Nil].new(new_size);
        
        i = 0;
        while i < new_size {
            @entries.append(nil);
            i = i + 1;
        }
        
        @load = 0;
        @size = 0;
        
        i = 0;
        while i < old_entries.length() {
            entry = old_entries.[i];
            if entry is Entry[K,V] {
                val = entry.value();
                not_tomb = true;
                if val is Tombstone {
                    not_tomb = false;
                }
                if val is V {
                    if not_tomb {
                        self.insert(entry.key(), val);
                    }
                }
            }
            i = i + 1;
        }
    }

    def insert(key: K, value: V) {
        // Grow at 70% load factor
        if (@load * 10) / @entries.length() > 7 {
            self.resize(@entries.length() * 2);
        }

        hash = @hasher.call(key);
        i = self.find_slot(key, hash);
        entry = @entries.[i];

        if entry is Entry[K, V] {
        	val = entry.value();
            if val is Tombstone {
                // Was a tombstone
                @entries.[i] = Entry[K,V].new(key, value, hash);
                @size = @size + 1;
                return;
            }
	        if val is V {
	            @entries.[i] = Entry[K,V].new(key, value, hash);
                return;
	        }
        }

        @entries.[i] = Entry[K,V].new(key, value, hash);
        @size = @size + 1;
        @load = @load + 1;
    }

    def get(key: K) -> V | Nil {
        hash = @hasher.call(key);
        i = self.find_slot(key, hash);
        entry = @entries.[i];

        if entry is Entry[K, V] {
        	val = entry.value();
            if val is Tombstone { return nil; }
        	if val is V { return val; }
        }
        print(77);
        return nil;
    }

    def remove(key: K) -> V | Nil {
        hash = @hasher.call(key);
        i = self.find_slot(key, hash);
        entry = @entries.[i];

        if entry is Entry[K, V] {
        	val = entry.value();
            if val is Tombstone { return nil; }
        	if val is V {
        		@entries.[i] = Entry[K,V].new(key, Tombstone.new(), hash);
        		@size = @size - 1;
        		return val;
        	}
        }
        return nil;
    }

    def clear() {
        @entries = Array[Entry[K,V] | Nil].new(16);
        @size = 0;
        @load = 0;
    }

    def size() -> i32 { return @size; }

    def entries() -> Array[Entry[K,V] | Nil] { return @entries; }
    
    def iterator() -> Iterator2[Entry[K,V] | Nil] {
        return @entries.iterator();
    }
}

// Default string hasher
def string_hasher(s : String) -> i32 {
    hash : i32 = 0;
    seed : i32 = 31;
    
    for c in s {
    	cast : i32 = c.byte();
        hash = hash * seed + cast;
    }
    return hash;
}

def string_eq(a : String, b : String) -> Bool {
    return a == b;
}

map = HashMap[i32, i32].new(i32_hasher, i32_eq);
map.insert(5,77);
map.insert(8,34);
map.insert(15,99);
val = map.get(8);
if val is i32 {
    IO.print(val);
} else {
    IO.print("not an i32");
}
stringmap = HashMap[String, String].new(string_hasher, string_eq);
stringmap.insert("foo","bar");
stringmap.insert("baz","qux");
stringmap.insert("hello","world");
IO.print(stringmap.get("hello"));