import quadratic_probe;

// --- Additions for Benchmarking (Unchanged) ---
extern def clock() -> i64

// --- PRNG Class (Unchanged) ---
class PRNG {
    @seed: i32
    def init(initial_seed: i32) {
        if initial_seed <= 0 { @seed = 1; return; }
        @seed = initial_seed bit_and 0x7FFFFFFF;
    }
    def next() -> i32 {
        a : i32 = 1103515245;
        c : i32 = 12345;
        @seed = (@seed * a + c) bit_and 0x7FFFFFFF;
        return @seed;
    }
}

// --- Helper to print benchmark results (Unchanged) ---
def print_benchmark_result(test_name: String, n: i32, duration: i64) {
    IO.print(test_name);
    IO.print("  Operations: "); IO.print(n);
    IO.print("  Total Time: "); IO.print(duration); IO.print(" ms");
    if n > 0 {
        ns_per_op : i64 = 0;
        n_i64 : i64 = n;
        zero : i64 = 0;
        million : i64 = 1_000_000;
        if duration > zero and n_i64 > zero {
             ns_per_op = (duration * million) / n_i64;
        }
        IO.print("  Time/Op:    ~"); IO.print(ns_per_op); IO.print(" ns");
    }
}

// --- Benchmarking Functions (Mostly Unchanged, ensure verification logic is correct) ---

def benchmark_insert_sequential(n: i32) {
    map = HashMap[i32, i32].new(i32_hasher, i32_eq);
    start_time: i64 = clock();
    i = 0;
    while i < n {
        map.insert(i, i + 1);
        i = i + 1;
    }
    end_time: i64 = clock();

    verification_passed = true;
    if n > 0 {
        // Verify last element
        last_val = map.get(n - 1);
        if last_val is Nil { verification_passed = false; }
        if last_val is i32 { if last_val != n { verification_passed = false; } }
        else { if not (last_val is Nil) { verification_passed = false; } } // Must be Nil or i32

        // Verify size
        if map.size() != n { verification_passed = false; }
    } else {
         if map.size() != 0 { verification_passed = false; }
    }
    print_benchmark_result("Insert Sequential", n, end_time - start_time);
    IO.print("    Verification: ");
    if verification_passed { IO.print("PASS"); } else { IO.print("FAIL"); }
}

def benchmark_insert_random(n: i32) {
    map = HashMap[i32, i32].new(i32_hasher, i32_eq);
    rng = PRNG.new(123);
    keys_to_insert = Array[i32].new(n);
    expected_size = 0;
    // Use a separate map instance just for counting expected unique keys
    temp_map_for_size_check = HashMap[i32, Bool].new(i32_hasher, i32_eq);
    i = 0;
    last_key = -1;
    while i < n {
        key = rng.next();
        keys_to_insert.unchecked_insert(i, key);
        if i == n-1 { last_key = key; }
        temp_map_for_size_check.insert(key, true); // Value doesn't matter
        i = i + 1;
    }
    expected_size = temp_map_for_size_check.size();
    temp_map_for_size_check = nil; // Release memory

    start_time: i64 = clock();
    i = 0;
    while i < n {
        key = keys_to_insert.unchecked_index(i);
        map.insert(key, key + 1);
        i = i + 1;
    }
    end_time: i64 = clock();

    verification_passed = true;
    if n > 0 {
        // Verify one of the inserted elements (e.g., the last one)
         last_val = map.get(last_key);
         if last_val is Nil { verification_passed = false; }
         if last_val is i32 { if last_val != (last_key + 1) { verification_passed = false; } }
         else { if not (last_val is Nil) { verification_passed = false; } }

        // Verify size matches expected unique count
         actual_size = map.size();
         if actual_size != expected_size {
              verification_passed = false;
         }
    } else {
         if map.size() != 0 { verification_passed = false; }
    }
    print_benchmark_result("Insert Random", n, end_time - start_time);
    IO.print("    Verification: ");
    if verification_passed { IO.print("PASS"); } else { IO.print("FAIL"); }
    IO.print("    (Expected unique size: "); IO.print(expected_size); IO.print(")");
}


def benchmark_get_sequential_hit(n: i32) {
    map = HashMap[i32, i32].new(i32_hasher, i32_eq);
    expected_sum: i64 = 0;
    i = 0;
    while i < n {
        value_to_insert = i + 1;
        value_i64 : i64 = value_to_insert;
        map.insert(i, value_to_insert);
        expected_sum = expected_sum + value_i64;
        i = i + 1;
    }

    start_time: i64 = clock();
    actual_sum: i64 = 0;
    verification_passed = true; // Assume pass initially
    i = 0;
    while i < n {
        val = map.get(i);
        if val is i32 {
            val_i64 : i64 = val;
            actual_sum = actual_sum + val_i64;
        } else {
             // If Nil is returned, it's an error for a hit test
             verification_passed = false;
             // Optionally print error for debugging, but avoid flooding console
             IO.print("Error: Nil returned during sequential hit test for key "); IO.print(i);
        }
        i = i + 1;
    }
    end_time: i64 = clock();

    // Final check on the sum
    if actual_sum != expected_sum {
         verification_passed = false;
    }
    print_benchmark_result("Get Sequential Hit", n, end_time - start_time);
    IO.print("    Verification: "); if verification_passed { IO.print("PASS"); } else { IO.print("FAIL"); }
}

def benchmark_get_random_hit(n: i32) {
    map = HashMap[i32, i32].new(i32_hasher, i32_eq);
    rng = PRNG.new(456);
    keys_present = Array[i32].new(n);
    expected_sum: i64 = 0;
    // Use temp map to ensure N unique keys are inserted and tracked
    temp_map_for_setup = HashMap[i32, Bool].new(i32_hasher, i32_eq);
    keys_added_count = 0;
    attempts = 0;
    max_attempts = n * 10; // Safety break

    while keys_added_count < n and attempts < max_attempts {
        key = rng.next();
        val = temp_map_for_setup.get(key);
        if val is Nil { // Key not yet inserted
            value_to_insert = key + 1;
            map.insert(key, value_to_insert);
            keys_present.unchecked_insert(keys_added_count, key);
            temp_map_for_setup.insert(key, true); // Mark as added
            key_inc : i64 = value_to_insert;
            expected_sum = expected_sum + key_inc;
            keys_added_count = keys_added_count + 1;
        }
        attempts = attempts + 1;
    }
    temp_map_for_setup = nil; // Release memory

    // Adjust n if we couldn't generate enough unique keys
    if keys_added_count < n {
        IO.print("Warning: Could only generate "); IO.print(keys_added_count); IO.print(" unique keys for random hit test.");
        n = keys_added_count;
    }

    start_time: i64 = clock();
    actual_sum: i64 = 0;
    verification_passed = true; // Assume pass initially
    i = 0;
    while i < n { // Iterate up to actual number of unique keys added
        key = keys_present.unchecked_index(i);
        val = map.get(key);
        if val is i32 {
            val_i64 : i64 = val;
            actual_sum = actual_sum + val_i64;
        } else {
             // Nil returned is an error for hit test
             verification_passed = false;
             // Optionally print error
             IO.print("Error: Nil returned during random hit test for key "); IO.print(key);
        }
        i = i + 1;
    }
    end_time: i64 = clock();

    // Final sum check
    if actual_sum != expected_sum {
         verification_passed = false;
    }
    print_benchmark_result("Get Random Hit", n, end_time - start_time);
    IO.print("    Verification: "); if verification_passed { IO.print("PASS"); } else { IO.print("FAIL"); }
}

def benchmark_get_random_miss(n: i32) {
    map = HashMap[i32, i32].new(i32_hasher, i32_eq);
    rng_setup = PRNG.new(789);
    rng_miss = PRNG.new(987);
    // Insert N unique keys
    temp_map_for_setup = HashMap[i32, Bool].new(i32_hasher, i32_eq);
    keys_added_count = 0;
    attempts = 0;
    max_attempts_setup = n * 10;

    while keys_added_count < n and attempts < max_attempts_setup {
         key = rng_setup.next();
         val = temp_map_for_setup.get(key);
         if val is Nil {
             map.insert(key, key + 1);
             temp_map_for_setup.insert(key, true);
             keys_added_count = keys_added_count + 1;
         }
         attempts = attempts + 1;
    }

    // Generate N keys for miss test, ensuring they aren't in the setup map
    keys_to_miss = Array[i32].new(n);
    miss_keys_generated = 0;
    attempts = 0;
    max_attempts_miss = n * 20; // Need more attempts potentially

    while miss_keys_generated < n and attempts < max_attempts_miss {
        key = rng_miss.next();
        // Check if this key happens to be one we inserted during setup
        val = temp_map_for_setup.get(key);
        if val is Nil { // Good, this key is likely a miss
             keys_to_miss.unchecked_insert(miss_keys_generated, key);
             miss_keys_generated = miss_keys_generated + 1;
        }
        attempts = attempts + 1;
    }
    temp_map_for_setup = nil; // Release memory

    // Adjust n if we couldn't generate enough guaranteed miss keys
    if miss_keys_generated < n {
        IO.print("Warning: Could only generate "); IO.print(miss_keys_generated); IO.print(" guaranteed miss keys.");
        n = miss_keys_generated;
    }

    start_time: i64 = clock();
    miss_count = 0;
    hit_count = 0;
    i = 0;
    while i < n { // Test with generated miss keys
        key = keys_to_miss.unchecked_index(i);
        val = map.get(key);
        if val is Nil { miss_count = miss_count + 1; }
        else { hit_count = hit_count + 1; }
        i = i + 1;
    }
    end_time: i64 = clock();

    // Verification: Expect nearly all lookups to be misses. Allow < 5% accidental hits.
    verification_passed = true;
    if n > 0 {
         // Check if hit count exceeds threshold
         if (hit_count * 100 / n) >= 5 { verification_passed = false; }
    } else {
         if hit_count != 0 { verification_passed = false; } // No hits if n=0
    }

    print_benchmark_result("Get Random Miss", n, end_time - start_time);
    IO.print("    Verification: "); if verification_passed { IO.print("PASS"); } else { IO.print("FAIL"); }
    IO.print("    (Misses: "); IO.print(miss_count); IO.print(", Hits: "); IO.print(hit_count); IO.print(")");
}

def benchmark_remove_random(n: i32) {
    map = HashMap[i32, i32].new(i32_hasher, i32_eq);
    rng = PRNG.new(101112);
    keys_to_remove = Array[i32].new(n);
    // Use a temporary map to ensure we add N unique keys
    temp_map_keys = HashMap[i32, Bool].new(i32_hasher, i32_eq);
    keys_added_count = 0;
    attempts = 0;
    max_attempts = n * 10;

    while keys_added_count < n and attempts < max_attempts {
        key = rng.next();
        val = temp_map_keys.get(key);
        if val is Nil { // If key is not already added
            map.insert(key, key + 1);
            keys_to_remove.unchecked_insert(keys_added_count, key);
            temp_map_keys.insert(key, true); // Mark key as added
            keys_added_count = keys_added_count + 1;
        }
        attempts = attempts + 1;
    }
    temp_map_keys = nil; // Release memory

    // Adjust n if we couldn't add enough unique keys
    if keys_added_count < n {
        IO.print("Warning: Could only generate "); IO.print(keys_added_count); IO.print(" unique keys for remove test.");
        n = keys_added_count;
    }

    start_time: i64 = clock();
    remove_count = 0;
    verification_passed = true; // Assume pass
    i = 0;
    while i < n { // Remove the actual number of keys added
        key = keys_to_remove.unchecked_index(i);
        val = map.remove(key);
        if val is i32 { // Check if remove returned a value
             expected_val = key + 1;
             if val != expected_val {
                  // Value mismatch is a form of failure
                  verification_passed = false;
                  IO.print("Warning: Remove returned wrong value for key "); IO.print(key);
             }
             remove_count = remove_count + 1;
        } else {
             // Remove returning Nil for a key that should exist is an error
             verification_passed = false;
             IO.print("Warning: Remove returned Nil for key "); IO.print(key);
        }
        i = i + 1;
    }
    end_time: i64 = clock();

    // Final checks
    if remove_count != n { verification_passed = false; } // Should have removed exactly n items
    actual_size = map.size();
    if actual_size != 0 { verification_passed = false; } // Map should be empty

    // Double check: try getting one of the removed keys
    if n > 0 {
         key_to_check = keys_to_remove.unchecked_index(0);
         val_after_remove = map.get(key_to_check);
         if val_after_remove is i32 { // Should be Nil if removal worked
             verification_passed = false;
         }
    }
    print_benchmark_result("Remove Random", n, end_time - start_time);
    IO.print("    Verification: "); if verification_passed { IO.print("PASS"); } else { IO.print("FAIL"); }
    IO.print("    (Items removed: "); IO.print(remove_count); IO.print(")");
}

// --- Main Execution ---

IO.print("--- HashMap Benchmarks ---");
n = 1_000_000; // Benchmark size

benchmark_insert_sequential(n);
benchmark_insert_random(n);
benchmark_get_sequential_hit(n);
benchmark_get_random_hit(n);
benchmark_get_random_miss(n);
benchmark_remove_random(n);

IO.print("--- Benchmarks Complete ---");