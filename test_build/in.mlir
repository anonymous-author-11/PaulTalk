builtin.module attributes  {"sym_name" = "ir"} {
  "mini.prelude"() : () -> ()
  "mini.external_typedef"() {"class_name" = "bool_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "i8_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "i32_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "i64_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "i128_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "f64_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "nil_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "any_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "nothing_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "coroutine_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "function_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "buffer_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "tuple_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "union_typ", "vtbl_size" = 0 : i32} : () -> ()
  "mini.external_typedef"() {"class_name" = "Object", "vtbl_size" = 0 : i32} : () -> ()
  "mini.typedef"() {"class_name" = "Pair", "methods" = [@Pair_field_Pair_0, @Pair_field_Pair_1, @Pair_field_first, @Pair_field_second, @Pair_B_init_firstT_secondU, @Pair_B_first_, @Pair_B_second_, @Pair_init_firstT_secondU, @Pair_first_, @Pair_second_], "hash_tbl" = [@Object, @any_typ, @Pair, 18446744073709551615 : i64], "offset_tbl" = [20 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 9197944775169318296 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_Pair", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Container", "methods" = [], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 9056556090793359372 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Container", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Iterator", "methods" = [], "hash_tbl" = [@Iterator, @any_typ, @Container, @Object], "offset_tbl" = [10 : i32, 10 : i32, 13 : i32, 13 : i32], "prime" = 4611686018427388349 : i64, "hash_id" = 8673632051301757104 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_Iterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Iterable", "methods" = [], "hash_tbl" = [@Iterable, @any_typ, @Container, @Object], "offset_tbl" = [10 : i32, 10 : i32, 33 : i32, 33 : i32], "prime" = 4611686018427388477 : i64, "hash_id" = 3037712219555723519 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_Iterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "MapIterable", "methods" = [@MapIterable_field_MapIterable_0, @MapIterable_field_MapIterable_1, @MapIterable_field_iterable, @MapIterable_field_f, @MapIterable_B_init_iterableIterableT_fFunctionT_to_U, @MapIterable_B_iterator_, @MapIterable_B_each_fFunctionT_to_Nothing, @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapIterable_B_all_fFunctionT_to_i1, @MapIterable_B_any_fFunctionT_to_i1, @MapIterable_B_map_fFunctionT_to_U, @MapIterable_B_filter_fFunctionT_to_i1, @MapIterable_B_chain_otherIterableT, @MapIterable_B_interleave_otherIterableT, @MapIterable_B_zip_otherIterableU, @MapIterable_B_product_otherIterableU, @MapIterable_init_iterableIterableT_fFunctionT_to_U, @MapIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @MapIterable_field_MapIterable_1, @MapIterable_B_iterator_, @MapIterable_B_each_fFunctionT_to_Nothing, @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @MapIterable_B_all_fFunctionT_to_i1, @MapIterable_B_any_fFunctionT_to_i1, @MapIterable_B_map_fFunctionT_to_U, @MapIterable_B_filter_fFunctionT_to_i1, @MapIterable_B_chain_otherIterableT, @MapIterable_B_interleave_otherIterableT, @MapIterable_B_zip_otherIterableU, @MapIterable_B_product_otherIterableU, @MapIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [18446744073709551615 : i64, @Container, @MapIterable, @Iterable, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, @any_typ], "offset_tbl" = [0 : i32, 61 : i32, 10 : i32, 38 : i32, 61 : i32, 0 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388279 : i64, "hash_id" = 10957973502106259894 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_MapIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "MapIterator", "methods" = [@MapIterator_field_MapIterator_0, @MapIterator_field_MapIterator_1, @MapIterator_field_iterator, @MapIterator_field_f, @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U, @MapIterator_B_next_, @MapIterator_init_iteratorIteratorT_fFunctionT_to_U, @MapIterator_next_, @MapIterator_field_MapIterator_1, @MapIterator_B_next_, @MapIterator_next_], "hash_tbl" = [@Object, @any_typ, @MapIterator, @Container, 18446744073709551615 : i64, @Iterator, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [21 : i32, 10 : i32, 10 : i32, 21 : i32, 0 : i32, 18 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 18300190591082816834 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_MapIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FilterIterable", "methods" = [@FilterIterable_field_FilterIterable_0, @FilterIterable_field_iterable, @FilterIterable_field_f, @FilterIterable_B_init_iterableIterableT_fFunctionT_to_i1, @FilterIterable_B_iterator_, @FilterIterable_B_each_fFunctionT_to_Nothing, @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @FilterIterable_B_all_fFunctionT_to_i1, @FilterIterable_B_any_fFunctionT_to_i1, @FilterIterable_B_map_fFunctionT_to_U, @FilterIterable_B_filter_fFunctionT_to_i1, @FilterIterable_B_chain_otherIterableT, @FilterIterable_B_interleave_otherIterableT, @FilterIterable_B_zip_otherIterableU, @FilterIterable_B_product_otherIterableU, @FilterIterable_init_iterableIterableT_fFunctionT_to_i1, @FilterIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @FilterIterable_field_FilterIterable_0, @FilterIterable_B_iterator_, @FilterIterable_B_each_fFunctionT_to_Nothing, @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @FilterIterable_B_all_fFunctionT_to_i1, @FilterIterable_B_any_fFunctionT_to_i1, @FilterIterable_B_map_fFunctionT_to_U, @FilterIterable_B_filter_fFunctionT_to_i1, @FilterIterable_B_chain_otherIterableT, @FilterIterable_B_interleave_otherIterableT, @FilterIterable_B_zip_otherIterableU, @FilterIterable_B_product_otherIterableU, @FilterIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @FilterIterable, 18446744073709551615 : i64, @Container, @Iterable, 18446744073709551615 : i64], "offset_tbl" = [0 : i32, 60 : i32, 10 : i32, 10 : i32, 0 : i32, 60 : i32, 37 : i32, 0 : i32], "prime" = 4611686018427388319 : i64, "hash_id" = 8498466713076104350 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_FilterIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FilterIterator", "methods" = [@FilterIterator_field_FilterIterator_0, @FilterIterator_field_iterator, @FilterIterator_field_f, @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_i1, @FilterIterator_B_next_, @FilterIterator_init_iteratorIteratorT_fFunctionT_to_i1, @FilterIterator_next_, @FilterIterator_field_FilterIterator_0, @FilterIterator_B_next_, @FilterIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Iterator, @FilterIterator, 18446744073709551615 : i64], "offset_tbl" = [20 : i32, 10 : i32, 0 : i32, 20 : i32, 0 : i32, 17 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 17225378576809247733 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "data_size_fn" = "_data_size_FilterIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ChainIterable", "methods" = [@ChainIterable_field_ChainIterable_0, @ChainIterable_field_first, @ChainIterable_field_second, @ChainIterable_B_init_firstIterableT_secondIterableT, @ChainIterable_B_iterator_, @ChainIterable_B_each_fFunctionT_to_Nothing, @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainIterable_B_all_fFunctionT_to_i1, @ChainIterable_B_any_fFunctionT_to_i1, @ChainIterable_B_map_fFunctionT_to_U, @ChainIterable_B_filter_fFunctionT_to_i1, @ChainIterable_B_chain_otherIterableT, @ChainIterable_B_interleave_otherIterableT, @ChainIterable_B_zip_otherIterableU, @ChainIterable_B_product_otherIterableU, @ChainIterable_init_firstIterableT_secondIterableT, @ChainIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ChainIterable_field_ChainIterable_0, @ChainIterable_B_iterator_, @ChainIterable_B_each_fFunctionT_to_Nothing, @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ChainIterable_B_all_fFunctionT_to_i1, @ChainIterable_B_any_fFunctionT_to_i1, @ChainIterable_B_map_fFunctionT_to_U, @ChainIterable_B_filter_fFunctionT_to_i1, @ChainIterable_B_chain_otherIterableT, @ChainIterable_B_interleave_otherIterableT, @ChainIterable_B_zip_otherIterableU, @ChainIterable_B_product_otherIterableU, @ChainIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Iterable, 18446744073709551615 : i64, @ChainIterable, @Container, 18446744073709551615 : i64, 18446744073709551615 : i64, @Object], "offset_tbl" = [10 : i32, 37 : i32, 0 : i32, 10 : i32, 60 : i32, 0 : i32, 0 : i32, 60 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 16076497015278503801 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ChainIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ChainIterator", "methods" = [@ChainIterator_field_ChainIterator_0, @ChainIterator_field_first, @ChainIterator_field_second, @ChainIterator_field_on_first, @ChainIterator_B_init_firstIteratorT_secondIteratorT, @ChainIterator_B_next_, @ChainIterator_init_firstIteratorT_secondIteratorT, @ChainIterator_next_, @ChainIterator_field_ChainIterator_0, @ChainIterator_B_next_, @ChainIterator_next_], "hash_tbl" = [18446744073709551615 : i64, 18446744073709551615 : i64, @Container, @Iterator, @Object, 18446744073709551615 : i64, @any_typ, @ChainIterator], "offset_tbl" = [0 : i32, 0 : i32, 21 : i32, 18 : i32, 21 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 6043157723929225452 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "data_size_fn" = "_data_size_ChainIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "InterleaveIterable", "methods" = [@InterleaveIterable_field_InterleaveIterable_0, @InterleaveIterable_field_first, @InterleaveIterable_field_second, @InterleaveIterable_B_init_firstIterableT_secondIterableT, @InterleaveIterable_B_iterator_, @InterleaveIterable_B_each_fFunctionT_to_Nothing, @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleaveIterable_B_all_fFunctionT_to_i1, @InterleaveIterable_B_any_fFunctionT_to_i1, @InterleaveIterable_B_map_fFunctionT_to_U, @InterleaveIterable_B_filter_fFunctionT_to_i1, @InterleaveIterable_B_chain_otherIterableT, @InterleaveIterable_B_interleave_otherIterableT, @InterleaveIterable_B_zip_otherIterableU, @InterleaveIterable_B_product_otherIterableU, @InterleaveIterable_init_firstIterableT_secondIterableT, @InterleaveIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @InterleaveIterable_field_InterleaveIterable_0, @InterleaveIterable_B_iterator_, @InterleaveIterable_B_each_fFunctionT_to_Nothing, @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @InterleaveIterable_B_all_fFunctionT_to_i1, @InterleaveIterable_B_any_fFunctionT_to_i1, @InterleaveIterable_B_map_fFunctionT_to_U, @InterleaveIterable_B_filter_fFunctionT_to_i1, @InterleaveIterable_B_chain_otherIterableT, @InterleaveIterable_B_interleave_otherIterableT, @InterleaveIterable_B_zip_otherIterableU, @InterleaveIterable_B_product_otherIterableU, @InterleaveIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [18446744073709551615 : i64, @Container, @InterleaveIterable, @Iterable, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, @any_typ], "offset_tbl" = [0 : i32, 60 : i32, 10 : i32, 37 : i32, 60 : i32, 0 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388279 : i64, "hash_id" = 4936782714255954462 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_InterleaveIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "InterleaveIterator", "methods" = [@InterleaveIterator_field_InterleaveIterator_0, @InterleaveIterator_field_first, @InterleaveIterator_field_second, @InterleaveIterator_field_on_first, @InterleaveIterator_B_init_firstIteratorT_secondIteratorT, @InterleaveIterator_B_next_, @InterleaveIterator_init_firstIteratorT_secondIteratorT, @InterleaveIterator_next_, @InterleaveIterator_field_InterleaveIterator_0, @InterleaveIterator_B_next_, @InterleaveIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, @InterleaveIterator, @Iterator, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [21 : i32, 10 : i32, 0 : i32, 21 : i32, 10 : i32, 18 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 14522079715461027111 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "data_size_fn" = "_data_size_InterleaveIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ZipIterable", "methods" = [@ZipIterable_field_ZipIterable_0, @ZipIterable_field_ZipIterable_1, @ZipIterable_field_ZipIterable_2, @ZipIterable_field_first, @ZipIterable_field_second, @ZipIterable_B_init_firstIterableT_secondIterableU, @ZipIterable_B_iterator_, @ZipIterable_B_each_fFunctionT_to_Nothing, @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZipIterable_B_all_fFunctionT_to_i1, @ZipIterable_B_any_fFunctionT_to_i1, @ZipIterable_B_map_fFunctionT_to_U, @ZipIterable_B_filter_fFunctionT_to_i1, @ZipIterable_B_chain_otherIterableT, @ZipIterable_B_interleave_otherIterableT, @ZipIterable_B_zip_otherIterableU, @ZipIterable_B_product_otherIterableU, @ZipIterable_init_firstIterableT_secondIterableU, @ZipIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ZipIterable_field_ZipIterable_2, @ZipIterable_B_iterator_, @ZipIterable_B_each_fFunctionT_to_Nothing, @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ZipIterable_B_all_fFunctionT_to_i1, @ZipIterable_B_any_fFunctionT_to_i1, @ZipIterable_B_map_fFunctionT_to_U, @ZipIterable_B_filter_fFunctionT_to_i1, @ZipIterable_B_chain_otherIterableT, @ZipIterable_B_interleave_otherIterableT, @ZipIterable_B_zip_otherIterableU, @ZipIterable_B_product_otherIterableU, @ZipIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@any_typ, @Iterable, 18446744073709551615 : i64, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @ZipIterable, @Object], "offset_tbl" = [10 : i32, 39 : i32, 0 : i32, 0 : i32, 62 : i32, 0 : i32, 10 : i32, 62 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 35232740166152944 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ZipIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ZipIterator", "methods" = [@ZipIterator_field_ZipIterator_0, @ZipIterator_field_ZipIterator_1, @ZipIterator_field_ZipIterator_2, @ZipIterator_field_first, @ZipIterator_field_second, @ZipIterator_B_init_firstIteratorT_secondIteratorU, @ZipIterator_B_next_, @ZipIterator_init_firstIteratorT_secondIteratorU, @ZipIterator_next_, @ZipIterator_field_ZipIterator_2, @ZipIterator_B_next_, @ZipIterator_next_], "hash_tbl" = [18446744073709551615 : i64, 18446744073709551615 : i64, @Container, @Iterator, @Object, 18446744073709551615 : i64, @any_typ, @ZipIterator], "offset_tbl" = [0 : i32, 0 : i32, 22 : i32, 19 : i32, 22 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 16305629627969966298 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ZipIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ProductIterable", "methods" = [@ProductIterable_field_ProductIterable_0, @ProductIterable_field_ProductIterable_1, @ProductIterable_field_ProductIterable_2, @ProductIterable_field_first, @ProductIterable_field_second, @ProductIterable_B_init_firstIterableT_secondIterableU, @ProductIterable_B_iterator_, @ProductIterable_B_each_fFunctionT_to_Nothing, @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductIterable_B_all_fFunctionT_to_i1, @ProductIterable_B_any_fFunctionT_to_i1, @ProductIterable_B_map_fFunctionT_to_U, @ProductIterable_B_filter_fFunctionT_to_i1, @ProductIterable_B_chain_otherIterableT, @ProductIterable_B_interleave_otherIterableT, @ProductIterable_B_zip_otherIterableU, @ProductIterable_B_product_otherIterableU, @ProductIterable_init_firstIterableT_secondIterableU, @ProductIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @ProductIterable_field_ProductIterable_2, @ProductIterable_B_iterator_, @ProductIterable_B_each_fFunctionT_to_Nothing, @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, @ProductIterable_B_all_fFunctionT_to_i1, @ProductIterable_B_any_fFunctionT_to_i1, @ProductIterable_B_map_fFunctionT_to_U, @ProductIterable_B_filter_fFunctionT_to_i1, @ProductIterable_B_chain_otherIterableT, @ProductIterable_B_interleave_otherIterableT, @ProductIterable_B_zip_otherIterableU, @ProductIterable_B_product_otherIterableU, @ProductIterable_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Object, @any_typ, @ProductIterable, @Container, 18446744073709551615 : i64, @Iterable, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [62 : i32, 10 : i32, 10 : i32, 62 : i32, 0 : i32, 39 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 4128338911757318636 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ProductIterable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ProductIterator", "methods" = [@ProductIterator_field_ProductIterator_0, @ProductIterator_field_ProductIterator_1, @ProductIterator_field_ProductIterator_2, @ProductIterator_field_first_iterator, @ProductIterator_field_second_iterator, @ProductIterator_field_second_iterable, @ProductIterator_field_current_first, @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU, @ProductIterator_B_next_, @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU, @ProductIterator_next_, @ProductIterator_field_ProductIterator_2, @ProductIterator_B_next_, @ProductIterator_next_], "hash_tbl" = [@any_typ, 18446744073709551615 : i64, @Iterator, 18446744073709551615 : i64, @Container, @Object, 18446744073709551615 : i64, @ProductIterator], "offset_tbl" = [10 : i32, 0 : i32, 21 : i32, 0 : i32, 24 : i32, 24 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 1697250377212095568 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_ProductIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Representable", "methods" = [@Representable_B_repr_, @Representable_repr_], "hash_tbl" = [@Representable, 18446744073709551615 : i64, @any_typ, @Object], "offset_tbl" = [10 : i32, 0 : i32, 10 : i32, 12 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 11185903432579561498 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Representable", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "String", "methods" = [@String_field_bytes, @String_field_length, @String_field_capacity, @String_field_String_0, @String_B_init_, @String_B_init_bytesBufferi8_lengthi32_capacityi32, @String_B_length_, @String_B_capacity_, @String_B_bytes_, @String_B_append_xi8, @String_B_extend_strString, @String_B__index_xi32, @String_B__EQ_otherString, @String_B_pop_, @String_B_copy_, @String_B_c_string_, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_i1, @String_B_any_fFunctionT_to_i1, @String_B_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_i1, @String_B_chain_otherIterableT, @String_B_interleave_otherIterableT, @String_B_zip_otherIterableU, @String_B_product_otherIterableU, @String_B_repr_, @String_init_, @String_init_bytesBufferi8_lengthi32_capacityi32, @String_length_, @String_capacity_, @String_bytes_, @String_append_xi8, @String_extend_strString, @String__index_xi32, @String__EQ_otherString, @String_pop_, @String_copy_, @String_c_string_, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @String_repr_, @String_field_String_0, @String_B_iterator_, @String_B_each_fFunctionT_to_Nothing, @String_B_reduce_accumulatorT_fFunctionT._T_to_T, @String_B_all_fFunctionT_to_i1, @String_B_any_fFunctionT_to_i1, @String_B_map_fFunctionT_to_U, @String_B_filter_fFunctionT_to_i1, @String_B_chain_otherIterableT, @String_B_interleave_otherIterableT, @String_B_zip_otherIterableU, @String_B_product_otherIterableU, @String_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @String_B_repr_, @String_repr_], "hash_tbl" = [@any_typ, @Iterable, @Representable, @Container, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64, @String], "offset_tbl" = [10 : i32, 62 : i32, 85 : i32, 85 : i32, 85 : i32, 0 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388601 : i64, "hash_id" = 6499063144389013426 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "data_size_fn" = "_data_size_String", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Character", "methods" = [@Character_field_byte, @Character_B_byte_, @Character_B_init_bytei8, @Character_byte_, @Character_init_bytei8], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Character], "offset_tbl" = [15 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 6681222582356018452 : i64, "base_typ" = !llvm.struct<(i8)>, "data_size_fn" = "_data_size_Character", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "StringIterator", "methods" = [@StringIterator_field_str, @StringIterator_field_index, @StringIterator_field_StringIterator_0, @StringIterator_B_init_strString, @StringIterator_B_next_, @StringIterator_init_strString, @StringIterator_next_, @StringIterator_field_StringIterator_0, @StringIterator_B_next_, @StringIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Iterator, @StringIterator, 18446744073709551615 : i64], "offset_tbl" = [20 : i32, 10 : i32, 0 : i32, 20 : i32, 0 : i32, 17 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 11186173084763598986 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "data_size_fn" = "_data_size_StringIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Exception", "methods" = [@Exception_field_line_number, @Exception_field_file_name, @Exception_field_message, @Exception_B_init_messageString, @Exception_B_init_, @Exception_B_set_info_line_numberi32_file_nameString, @Exception_B_report_, @Exception_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_report_, @Exception_print_message_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Exception], "offset_tbl" = [23 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 9027164862567808692 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_Exception", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "IO", "methods" = [@IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, @IO__Self_print_xi32, @IO__Self_print_xi1, @IO__Self_print_xi8, @IO__Self_print_xCharacter, @IO__Self_print_xi64, @IO__Self_print_xNil, @IO__Self_print_xRepresentable, @IO__Self_print_xf64, @IO__Self_print_xString], "hash_tbl" = [@any_typ, @IO, 18446744073709551615 : i64, @Object], "offset_tbl" = [10 : i32, 10 : i32, 0 : i32, 20 : i32], "prime" = 4611686018427388247 : i64, "hash_id" = 5359822646784595218 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_IO", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Math", "methods" = [@Math_B__Self_sqrt_xf64, @Math_B__Self_abs_xi32__Self_abs_xf64, @Math_B__Self_max_ai32_bi32__Self_max_af64_bf64, @Math_B__Self_min_ai32_bi32__Self_min_af64_bf64, @Math_B__Self_round_xf64, @Math_B__Self_floor_xf64, @Math_B__Self_ceiling_xf64, @Math__Self_sqrt_xf64, @Math__Self_abs_xi32, @Math__Self_abs_xf64, @Math__Self_max_ai32_bi32, @Math__Self_max_af64_bf64, @Math__Self_min_ai32_bi32, @Math__Self_min_af64_bf64, @Math__Self_round_xf64, @Math__Self_floor_xf64, @Math__Self_ceiling_xf64], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Math], "offset_tbl" = [27 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 8094150130346788308 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Math", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Blocking", "methods" = [@Blocking_B_init_, @Blocking_init_], "hash_tbl" = [@Object, @any_typ, @Blocking, 18446744073709551615 : i64], "offset_tbl" = [12 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 847773162914674935 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Blocking", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Channel", "methods" = [@Channel_field_Channel_0, @Channel_field_value, @Channel_B_init_, @Channel_B_get_, @Channel_B_put_new_valueT, @Channel_init_, @Channel_get_, @Channel_put_new_valueT], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Channel], "offset_tbl" = [18 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 14778625957069801166 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_Channel", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Array", "methods" = [@Array_field_Array_0, @Array_field_buffer, @Array_field_length, @Array_field_capacity, @Array_B__Self_from_iterable_iterableIterableT, @Array_B_init_, @Array_B_init_capacityi32, @Array_B_init_lengthi32_capacityi32, @Array_B_init_bufferBufferT_lengthi32_capacityi32, @Array_B_length_, @Array_B_capacity_, @Array_B_append_xT, @Array_B_extend_otherArrayT, @Array_B_reserve_new_capacityi32, @Array_B__index_xi32, @Array_B__set_index_xi32_valueT, @Array_B_throw_oob_xi32, @Array_B_unchecked_index_xi32, @Array_B_unchecked_insert_xi32_valueT, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_i1, @Array_B_any_fFunctionT_to_i1, @Array_B_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_i1, @Array_B_chain_otherIterableT, @Array_B_interleave_otherIterableT, @Array_B_zip_otherIterableU, @Array_B_product_otherIterableU, @Array_B_repr_, @Array__Self_from_iterable_iterableIterableT, @Array_init_, @Array_init_capacityi32, @Array_init_lengthi32_capacityi32, @Array_init_bufferBufferT_lengthi32_capacityi32, @Array_length_, @Array_capacity_, @Array_append_xT, @Array_extend_otherArrayT, @Array_reserve_new_capacityi32, @Array__index_xi32, @Array__set_index_xi32_valueT, @Array_throw_oob_xi32, @Array_unchecked_index_xi32, @Array_unchecked_insert_xi32_valueT, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Array_repr_, @Array_field_Array_0, @Array_B_iterator_, @Array_B_each_fFunctionT_to_Nothing, @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, @Array_B_all_fFunctionT_to_i1, @Array_B_any_fFunctionT_to_i1, @Array_B_map_fFunctionT_to_U, @Array_B_filter_fFunctionT_to_i1, @Array_B_chain_otherIterableT, @Array_B_interleave_otherIterableT, @Array_B_zip_otherIterableU, @Array_B_product_otherIterableU, @Array_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Array_B_repr_, @Array_repr_], "hash_tbl" = [18446744073709551615 : i64, 18446744073709551615 : i64, @Iterable, @any_typ, @Container, @Array, @Representable, @Object], "offset_tbl" = [0 : i32, 0 : i32, 68 : i32, 10 : i32, 91 : i32, 10 : i32, 91 : i32, 91 : i32], "prime" = 4611686018427388331 : i64, "hash_id" = 13185201323315417072 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "data_size_fn" = "_data_size_Array", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ArrayIterator", "methods" = [@ArrayIterator_field_ArrayIterator_0, @ArrayIterator_field_array, @ArrayIterator_field_index, @ArrayIterator_B_init_arrayArrayT, @ArrayIterator_B_next_, @ArrayIterator_init_arrayArrayT, @ArrayIterator_next_, @ArrayIterator_field_ArrayIterator_0, @ArrayIterator_B_next_, @ArrayIterator_next_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, @ArrayIterator, @Iterator, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [20 : i32, 10 : i32, 0 : i32, 20 : i32, 10 : i32, 17 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 3447345754186651411 : i64, "base_typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "data_size_fn" = "_data_size_ArrayIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Range", "methods" = [@Range_field_start, @Range_field_end, @Range_field_step, @Range_field_Range_0, @Range_B_init_endi32, @Range_B_init_starti32_endi32, @Range_B_step_stepi32, @Range_B_iterator_, @Range_B_each_fFunctionT_to_Nothing, @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, @Range_B_all_fFunctionT_to_i1, @Range_B_any_fFunctionT_to_i1, @Range_B_map_fFunctionT_to_U, @Range_B_filter_fFunctionT_to_i1, @Range_B_chain_otherIterableT, @Range_B_interleave_otherIterableT, @Range_B_zip_otherIterableU, @Range_B_product_otherIterableU, @Range_init_endi32, @Range_init_starti32_endi32, @Range_step_stepi32, @Range_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU, @Range_field_Range_0, @Range_B_iterator_, @Range_B_each_fFunctionT_to_Nothing, @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, @Range_B_all_fFunctionT_to_i1, @Range_B_any_fFunctionT_to_i1, @Range_B_map_fFunctionT_to_U, @Range_B_filter_fFunctionT_to_i1, @Range_B_chain_otherIterableT, @Range_B_interleave_otherIterableT, @Range_B_zip_otherIterableU, @Range_B_product_otherIterableU, @Range_iterator_, @Iterable_each_fFunctionT_to_Nothing, @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, @Iterable_all_fFunctionT_to_i1, @Iterable_any_fFunctionT_to_i1, @Iterable_map_fFunctionT_to_U, @Iterable_filter_fFunctionT_to_i1, @Iterable_chain_otherIterableT, @Iterable_interleave_otherIterableT, @Iterable_zip_otherIterableU, @Iterable_product_otherIterableU], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Container, 18446744073709551615 : i64, @Iterable, 18446744073709551615 : i64, @Range], "offset_tbl" = [65 : i32, 10 : i32, 0 : i32, 65 : i32, 0 : i32, 42 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5490049236840671069 : i64, "base_typ" = !llvm.struct<(i32, i32, i32)>, "data_size_fn" = "_data_size_Range", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "RangeIterator", "methods" = [@RangeIterator_field_counter, @RangeIterator_field_end, @RangeIterator_field_step, @RangeIterator_field_RangeIterator_0, @RangeIterator_B_init_counteri32_endi32_stepi32, @RangeIterator_B_next_, @RangeIterator_init_counteri32_endi32_stepi32, @RangeIterator_next_, @RangeIterator_field_RangeIterator_0, @RangeIterator_B_next_, @RangeIterator_next_], "hash_tbl" = [@any_typ, 18446744073709551615 : i64, @Iterator, @RangeIterator, @Container, @Object, 18446744073709551615 : i64, 18446744073709551615 : i64], "offset_tbl" = [10 : i32, 0 : i32, 18 : i32, 10 : i32, 21 : i32, 21 : i32, 0 : i32, 0 : i32], "prime" = 4611686018427388157 : i64, "hash_id" = 17533181587765144941 : i64, "base_typ" = !llvm.struct<(i32, i32, i32)>, "data_size_fn" = "_data_size_RangeIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FileSystemError", "methods" = [@FileSystemError_field_line_number, @FileSystemError_field_file_name, @FileSystemError_field_message, @FileSystemError_B_init_messageString, @FileSystemError_B_init_, @FileSystemError_B_set_info_line_numberi32_file_nameString, @FileSystemError_B_report_, @FileSystemError_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_report_, @Exception_print_message_, @FileSystemError_field_line_number, @FileSystemError_field_file_name, @FileSystemError_field_message, @FileSystemError_B_init_messageString, @FileSystemError_B_init_, @FileSystemError_B_set_info_line_numberi32_file_nameString, @FileSystemError_B_report_, @FileSystemError_B_print_message_, @Exception_init_messageString, @Exception_init_, @Exception_set_info_line_numberi32_file_nameString, @Exception_report_, @Exception_print_message_], "hash_tbl" = [@any_typ, @FileSystemError, @Object, @Exception], "offset_tbl" = [10 : i32, 10 : i32, 36 : i32, 23 : i32], "prime" = 4611686018427388291 : i64, "hash_id" = 13942035194652003542 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_FileSystemError", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "File", "methods" = [@File_field_name, @File_field_mode, @File_field_handle, @File_field_open, @File_B_init_nameString_modeString, @File_B_close_, @File_B_reopen_, @File_B_get_byte_, @File_B_write_textString, @File_B__set_mode_modeString, @File_init_nameString_modeString, @File_close_, @File_reopen_, @File_get_byte_, @File_write_textString, @File__set_mode_modeString], "hash_tbl" = [@File, 18446744073709551615 : i64, @any_typ, @Object], "offset_tbl" = [10 : i32, 0 : i32, 10 : i32, 26 : i32], "prime" = 4611686018427388093 : i64, "hash_id" = 16218955235528015952 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1)>, "data_size_fn" = "_data_size_File", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FileProcessor", "methods" = [], "hash_tbl" = [@Object, @any_typ, @FileProcessor, 18446744073709551615 : i64], "offset_tbl" = [13 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 4146660827496349788 : i64, "base_typ" = !llvm.struct<(!llvm.ptr)>, "data_size_fn" = "_data_size_FileProcessor", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FileReader", "methods" = [@FileReader_field_FileReader_0, @FileReader_B_init_, @FileReader_B_process_fileFile, @FileReader_init_, @FileReader_process_fileFile, @FileReader_field_FileReader_0, @FileReader_B_process_fileFile, @FileReader_process_fileFile], "hash_tbl" = [@Object, @any_typ, @FileProcessor, @FileReader], "offset_tbl" = [18 : i32, 10 : i32, 15 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 5641023583277533454 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_FileReader", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FileWriter", "methods" = [@FileWriter_field_text, @FileWriter_field_FileWriter_0, @FileWriter_B_init_textString, @FileWriter_B_process_fileFile, @FileWriter_init_textString, @FileWriter_process_fileFile, @FileWriter_field_FileWriter_0, @FileWriter_B_process_fileFile, @FileWriter_process_fileFile], "hash_tbl" = [@Object, @any_typ, @FileProcessor, @FileWriter], "offset_tbl" = [19 : i32, 10 : i32, 16 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 2522433070607690589 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_FileWriter", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "FileSystem", "methods" = [@FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT, @FileSystem_B__Self_read_file_file_nameString, @FileSystem_B__Self_write_file_file_nameString_textString, @FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T, @FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT, @FileSystem__Self_read_file_file_nameString, @FileSystem__Self_write_file_file_nameString_textString], "hash_tbl" = [@Object, @FileSystem, @any_typ, 18446744073709551615 : i64], "offset_tbl" = [17 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 5344209596779946859 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_FileSystem", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Integer", "methods" = [@Integer_field_value, @Integer_B_init_valuei32, @Integer_B__ADD_otheri32, @Integer_B__SUB_otheri32, @Integer_B__MUL_otheri32, @Integer_B__DIV_otheri32, @Integer_B_print_, @Integer_init_valuei32, @Integer__ADD_otheri32, @Integer__SUB_otheri32, @Integer__MUL_otheri32, @Integer__DIV_otheri32, @Integer_print_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @Integer], "offset_tbl" = [23 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 17711596130900473384 : i64, "base_typ" = !llvm.struct<(i32)>, "data_size_fn" = "_data_size_Integer", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "BigBoy", "methods" = [@BigBoy_B_introduce_, @BigBoy_B_repr_, @BigBoy_introduce_, @Representable_repr_, @BigBoy_B_repr_, @Representable_repr_], "hash_tbl" = [@Representable, @Object, @any_typ, @BigBoy], "offset_tbl" = [14 : i32, 16 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388361 : i64, "hash_id" = 3069357308562348185 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_BigBoy", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Integer2", "methods" = [@Integer2_field_value, @Integer2_B_value_, @Integer2_B_init_valuei32, @Integer2_B__ADD_otheri32, @Integer2_B__SUB_otheri32, @Integer2_B__MUL_otheri32, @Integer2_B__DIV_otheri32, @Integer2_B_print_, @Integer2_B_introduce_, @Integer2_B_repr_, @Integer2_value_, @Integer_init_valuei32, @Integer__ADD_otheri32, @Integer__SUB_otheri32, @Integer__MUL_otheri32, @Integer__DIV_otheri32, @Integer_print_, @BigBoy_introduce_, @Integer2_repr_, @Integer2_field_value, @Integer2_B_init_valuei32, @Integer2_B__ADD_otheri32, @Integer2_B__SUB_otheri32, @Integer2_B__MUL_otheri32, @Integer2_B__DIV_otheri32, @Integer2_B_print_, @Integer_init_valuei32, @Integer__ADD_otheri32, @Integer__SUB_otheri32, @Integer__MUL_otheri32, @Integer__DIV_otheri32, @Integer_print_, @Integer2_B_introduce_, @Integer2_B_repr_, @BigBoy_introduce_, @Integer2_repr_, @Integer2_B_repr_, @Integer2_repr_, @Integer2_B_repr_, @Integer2_repr_], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @Integer2, @Integer, @Representable, 18446744073709551615 : i64, @BigBoy], "offset_tbl" = [0 : i32, 42 : i32, 10 : i32, 10 : i32, 29 : i32, 48 : i32, 0 : i32, 42 : i32], "prime" = 4611686018427388181 : i64, "hash_id" = 1844024195090879880 : i64, "base_typ" = !llvm.struct<(i32)>, "data_size_fn" = "_data_size_Integer2", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Animal", "methods" = [@Animal_field_age, @Animal_field_hp, @Animal_field_skill, @Animal_B_init_agei32_hpf64_skilli32, @Animal_B_say_age_, @Animal_B_say_skill_, @Animal_B_say_messagei32, @Animal_B_do_nothing_, @Animal_init_agei32_hpf64_skilli32, @Animal_say_age_, @Animal_say_skill_, @Animal_say_messagei32, @Animal_do_nothing_], "hash_tbl" = [@Object, 18446744073709551615 : i64, @any_typ, @Animal], "offset_tbl" = [23 : i32, 0 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388091 : i64, "hash_id" = 1075018126824711487 : i64, "base_typ" = !llvm.struct<(i32, f64, i32)>, "data_size_fn" = "_data_size_Animal", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Beaver", "methods" = [@Beaver_field_color, @Beaver_field_name, @Beaver_B_init_colori32_namef64, @Beaver_B__ADD_xi32, @Beaver_B_say_color_, @Beaver_init_colori32_namef64, @Beaver__ADD_xi32, @Beaver_say_color_], "hash_tbl" = [18446744073709551615 : i64, @Object, @any_typ, @Beaver], "offset_tbl" = [0 : i32, 18 : i32, 10 : i32, 10 : i32], "prime" = 4611686018427388097 : i64, "hash_id" = 12321971123808713154 : i64, "base_typ" = !llvm.struct<(i32, f64)>, "data_size_fn" = "_data_size_Beaver", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ListNode", "methods" = [@ListNode_field_data, @ListNode_field_next, @ListNode_B_init_datai32, @ListNode_B_push_nextListNode, @ListNode_B_next_, @ListNode_B_data_, @ListNode_B_iterator_, @ListNode_init_datai32, @ListNode_push_nextListNode, @ListNode_next_, @ListNode_data_, @ListNode_iterator_], "hash_tbl" = [@Object, @any_typ, 18446744073709551615 : i64, @ListNode], "offset_tbl" = [22 : i32, 10 : i32, 0 : i32, 10 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 16690719123176460140 : i64, "base_typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "data_size_fn" = "_data_size_ListNode", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "ListIterator", "methods" = [@ListIterator_field_node, @ListIterator_B_init_nodeListNode, @ListIterator_B_next_, @ListIterator_init_nodeListNode, @ListIterator_next_], "hash_tbl" = [@Object, @any_typ, @ListIterator, 18446744073709551615 : i64], "offset_tbl" = [15 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 12608044127096990237 : i64, "base_typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "data_size_fn" = "_data_size_ListIterator", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.typedef"() {"class_name" = "Bard", "methods" = [@Bard_B_init_, @Bard_B_take_af64_bf64_take_ai32_bi32_take_aAnimal_bBeaver_take_ai32_bf64, @Bard_init_, @Bard_take_af64_bf64, @Bard_take_ai32_bi32, @Bard_take_aAnimal_bBeaver, @Bard_take_ai32_bf64], "hash_tbl" = [@Object, @any_typ, @Bard, 18446744073709551615 : i64], "offset_tbl" = [17 : i32, 10 : i32, 10 : i32, 0 : i32], "prime" = 4611686018427388081 : i64, "hash_id" = 10466828736622358523 : i64, "base_typ" = !llvm.struct<()>, "data_size_fn" = "_data_size_Bard", "box_fn" = "_box_Default", "unbox_fn" = "_unbox_Default", "size_fn" = "_size_Default"} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Pair", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Pair_field_Pair_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "Pair_field_Pair_1"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Pair_getter_first", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Pair_setter_first", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Pair_field_first", "getter_name" = "Pair_getter_first", "setter_name" = "Pair_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Pair_getter_second", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "box"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Pair_setter_second", "types" = [!llvm.ptr, !llvm.ptr, 0 : i64, 1 : i64], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "any_typ", "unbox"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Pair_field_second", "getter_name" = "Pair_getter_second", "setter_name" = "Pair_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb0(%0 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2 : !llvm.ptr, %3 : !llvm.struct<(!llvm.ptr, i160)>, %4 : !llvm.struct<(!llvm.ptr, i160)>):
    %5 = "mini.wrap"(%0) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %6 = "hi.cast"(%5) {"from_typ" = !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>, "to_typ" = !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %7 = "mini.wrap"(%3) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Pair">
    %8 = "hi.cast"(%7) {"from_typ" = !mini.type_param<"T", !mini.any, "Pair">, "to_typ" = !mini.type_param<"T", !mini.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Pair">) -> !mini.type_param<"T", !mini.any, "Pair">
    %9 = "hi.cast"(%8) {"from_typ" = !mini.type_param<"T", !mini.any, "Pair">, "to_typ" = !mini.type_param<"T", !mini.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Pair">) -> !mini.type_param<"T", !mini.any, "Pair">
    "mini.set_field"(%6, %9) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>, !mini.type_param<"T", !mini.any, "Pair">) -> ()
    %10 = "mini.wrap"(%4) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"U", !mini.any, "Pair">
    %11 = "hi.cast"(%10) {"from_typ" = !mini.type_param<"U", !mini.any, "Pair">, "to_typ" = !mini.type_param<"U", !mini.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "Pair">) -> !mini.type_param<"U", !mini.any, "Pair">
    %12 = "hi.cast"(%11) {"from_typ" = !mini.type_param<"U", !mini.any, "Pair">, "to_typ" = !mini.type_param<"U", !mini.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "Pair">) -> !mini.type_param<"U", !mini.any, "Pair">
    "mini.set_field"(%6, %12) {"offset" = 3 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>, !mini.type_param<"U", !mini.any, "Pair">) -> ()
  }) {"func_name" = "Pair_init_firstT_secondU", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1(%13 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %14 : !llvm.ptr):
    %15 = "mini.invariant"(%14) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %16 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb2] : () -> ()
  ^bb3:
    %17 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%17, %16) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb4] : () -> ()
  ^bb5:
    %18 = "llvm.getelementptr"(%14) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %19 = "mini.checkflag"(%18) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %20 = "llvm.load"(%19) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%20) [^bb3, ^bb3] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb2:
    %21 = "llvm.getelementptr"(%14) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %22 = "mini.checkflag"(%21) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %23 = "llvm.load"(%22) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%23) [^bb5, ^bb5] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb4:
    %24 = "llvm.extractvalue"(%13) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %25 = "llvm.load"(%16) : (!llvm.ptr) -> i32
    %26 = "llvm.getelementptr"(%24, %25) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %27 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %28 = "llvm.getelementptr"(%26, %27) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%28) : (!llvm.ptr) -> ()
  }) {"func_name" = "Pair_B_init_firstT_secondU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb6(%29 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %30 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %31 : !llvm.ptr):
    %32 = "mini.wrap"(%29) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %33 = "hi.cast"(%32) {"from_typ" = !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>, "to_typ" = !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %34 = "mini.get_field"(%33) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.type_param<"T", !mini.any, "Pair">
    %35 = "hi.cast"(%34) {"from_typ" = !mini.type_param<"T", !mini.any, "Pair">, "to_typ" = !mini.type_param<"T", !mini.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Pair">) -> !mini.type_param<"T", !mini.any, "Pair">
    %36 = "hi.cast"(%35) {"from_typ" = !mini.type_param<"T", !mini.any, "Pair">, "to_typ" = !mini.type_param<"T", !mini.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Pair">) -> !mini.type_param<"T", !mini.any, "Pair">
    "mini.return"(%36) : (!mini.type_param<"T", !mini.any, "Pair">) -> ()
  }) {"func_name" = "Pair_first_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb7(%37 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %38 : !llvm.ptr):
    %39 = "mini.invariant"(%38) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %40 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb8] : () -> ()
  ^bb8:
    %41 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%41, %40) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb9] : () -> ()
  ^bb9:
    %42 = "llvm.extractvalue"(%37) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %43 = "llvm.load"(%40) : (!llvm.ptr) -> i32
    %44 = "llvm.getelementptr"(%42, %43) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %45 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %46 = "llvm.getelementptr"(%44, %45) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%46) : (!llvm.ptr) -> ()
  }) {"func_name" = "Pair_B_first_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb10(%47 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %48 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %49 : !llvm.ptr):
    %50 = "mini.wrap"(%47) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %51 = "hi.cast"(%50) {"from_typ" = !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>, "to_typ" = !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>, "from_typ_name" = "Pair", "to_typ_name" = "Pair"} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>
    %52 = "mini.get_field"(%51) {"offset" = 3 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "Pair">, !mini.type_param<"U", !mini.any, "Pair">]>) -> !mini.type_param<"U", !mini.any, "Pair">
    %53 = "hi.cast"(%52) {"from_typ" = !mini.type_param<"U", !mini.any, "Pair">, "to_typ" = !mini.type_param<"U", !mini.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "Pair">) -> !mini.type_param<"U", !mini.any, "Pair">
    %54 = "hi.cast"(%53) {"from_typ" = !mini.type_param<"U", !mini.any, "Pair">, "to_typ" = !mini.type_param<"U", !mini.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "Pair">) -> !mini.type_param<"U", !mini.any, "Pair">
    "mini.return"(%54) : (!mini.type_param<"U", !mini.any, "Pair">) -> ()
  }) {"func_name" = "Pair_second_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb11(%55 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %56 : !llvm.ptr):
    %57 = "mini.invariant"(%56) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %58 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb12] : () -> ()
  ^bb12:
    %59 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%59, %58) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb13] : () -> ()
  ^bb13:
    %60 = "llvm.extractvalue"(%55) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %61 = "llvm.load"(%58) : (!llvm.ptr) -> i32
    %62 = "llvm.getelementptr"(%60, %61) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %63 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %64 = "llvm.getelementptr"(%62, %63) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%64) : (!llvm.ptr) -> ()
  }) {"func_name" = "Pair_B_second_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Container", "types" = []} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Iterator", "types" = [!llvm.ptr]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Iterator_field_Iterator_0"} : () -> ()
  "mini.func"() ({
  ^bb14(%65 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %66 : !llvm.ptr):
    %67 = "mini.invariant"(%66) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %68 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb15] : () -> ()
  ^bb15:
    %69 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%69, %68) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb16] : () -> ()
  ^bb16:
    %70 = "llvm.extractvalue"(%65) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %71 = "llvm.load"(%68) : (!llvm.ptr) -> i32
    %72 = "llvm.getelementptr"(%70, %71) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %73 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %74 = "llvm.getelementptr"(%72, %73) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%74) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Iterable", "types" = [!llvm.ptr]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Iterable_field_Iterable_0"} : () -> ()
  "mini.func"() ({
  ^bb17(%75 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %76 : !llvm.ptr):
    %77 = "mini.invariant"(%76) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %78 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb18] : () -> ()
  ^bb18:
    %79 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%79, %78) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb19] : () -> ()
  ^bb19:
    %80 = "llvm.extractvalue"(%75) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %81 = "llvm.load"(%78) : (!llvm.ptr) -> i32
    %82 = "llvm.getelementptr"(%80, %81) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %83 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %84 = "llvm.getelementptr"(%82, %83) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%84) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb20(%85 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %86 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %87 : !llvm.ptr, %88 : !llvm.struct<(!llvm.ptr)>):
    %89 = "mini.wrap"(%85) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %90 = "hi.cast"(%89) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %91 = "mini.wrap"(%88) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.nothing>
    %92 = "hi.cast"(%91) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.nothing>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.nothing>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.nothing>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.nothing>
    %93 = "mini.unwrap"(%90) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %94 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %95 = "mini.method_call"(%94, %93) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %96 = "hi.cast"(%95) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %97 = "hi.cast"(%96) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %98 = "mini.refer"(%97) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.while"() ({
      %99 = "mini.unwrap"(%98) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %100 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %101 = "mini.method_call"(%100, %99) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %102 = "hi.cast"(%101) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>
      %103 = "mini.get_type_field"(%90) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
      %104 = "mini.checkflag"(%102) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>) -> !mini.ptr<i1>
      %105 = "mini.unwrap"(%104) : (!mini.ptr<i1>) -> i1
    }, {
      %106 = "hi.cast"(%102) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "Iterable">
      %107 = "hi.cast"(%106) {"from_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable">) -> !mini.type_param<"T", !mini.any, "Iterable">
      %108 = "mini.unwrap"(%107) : (!mini.type_param<"T", !mini.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
      %109 = "mini.unwrap"(%92) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.nothing>) -> !llvm.ptr
      "mini.fptr_call"(%109, %108) {"ret_type" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %110 = "hi.cast"(%106) {"from_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable">) -> !mini.type_param<"T", !mini.any, "Iterable">
      "mini.assign"(%102, %110) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>, !mini.type_param<"T", !mini.any, "Iterable">) -> ()
    }) : () -> ()
  }) {"func_name" = "Iterable_each_fFunctionT_to_Nothing", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb21(%111 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %112 : !llvm.ptr):
    %113 = "mini.invariant"(%112) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %114 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb22] : () -> ()
  ^bb23:
    %115 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%115, %114) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb24] : () -> ()
  ^bb22:
    %116 = "llvm.getelementptr"(%112) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %117 = "mini.checkflag"(%116) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %118 = "llvm.load"(%117) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%118) [^bb23, ^bb23] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb24:
    %119 = "llvm.extractvalue"(%111) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %120 = "llvm.load"(%114) : (!llvm.ptr) -> i32
    %121 = "llvm.getelementptr"(%119, %120) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %122 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %123 = "llvm.getelementptr"(%121, %122) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%123) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb25(%124 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %125 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %126 : !llvm.ptr, %127 : !llvm.struct<(!llvm.ptr, i160)>, %128 : !llvm.struct<(!llvm.ptr)>):
    %129 = "mini.wrap"(%124) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %130 = "hi.cast"(%129) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %131 = "mini.wrap"(%127) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Iterable">
    %132 = "hi.cast"(%131) {"from_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable">) -> !mini.type_param<"T", !mini.any, "Iterable">
    %133 = "mini.wrap"(%128) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable">>
    %134 = "hi.cast"(%133) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable">>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable">>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable">>
    %135 = "mini.unwrap"(%130) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %136 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %137 = "mini.method_call"(%136, %135) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %138 = "hi.cast"(%137) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %139 = "hi.cast"(%138) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %140 = "mini.refer"(%139) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.while"() ({
      %141 = "mini.unwrap"(%140) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %142 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %143 = "mini.method_call"(%142, %141) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %144 = "hi.cast"(%143) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>
      %145 = "mini.get_type_field"(%130) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
      %146 = "mini.checkflag"(%144) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>) -> !mini.ptr<i1>
      %147 = "mini.unwrap"(%146) : (!mini.ptr<i1>) -> i1
    }, {
      %148 = "hi.cast"(%144) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "Iterable">
      %149 = "hi.cast"(%132) {"from_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable">) -> !mini.type_param<"T", !mini.any, "Iterable">
      %150 = "mini.unwrap"(%149) : (!mini.type_param<"T", !mini.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
      %151 = "hi.cast"(%148) {"from_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable">) -> !mini.type_param<"T", !mini.any, "Iterable">
      %152 = "mini.unwrap"(%151) : (!mini.type_param<"T", !mini.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
      %153 = "mini.unwrap"(%134) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable">>) -> !llvm.ptr
      %154 = "mini.fptr_call"(%153, %150, %152) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Iterable">
      %155 = "hi.cast"(%154) {"from_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable">) -> !mini.type_param<"T", !mini.any, "Iterable">
      "mini.assign"(%132, %155) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"T", !mini.any, "Iterable">) -> ()
      %156 = "hi.cast"(%148) {"from_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable">) -> !mini.type_param<"T", !mini.any, "Iterable">
      "mini.assign"(%144, %156) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>, !mini.type_param<"T", !mini.any, "Iterable">) -> ()
    }) : () -> ()
    %157 = "hi.cast"(%132) {"from_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable">) -> !mini.type_param<"T", !mini.any, "Iterable">
    "mini.return"(%157) : (!mini.type_param<"T", !mini.any, "Iterable">) -> ()
  }) {"func_name" = "Iterable_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb26(%158 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %159 : !llvm.ptr):
    %160 = "mini.invariant"(%159) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %161 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb27] : () -> ()
  ^bb28:
    %162 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%162, %161) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb29] : () -> ()
  ^bb30:
    %163 = "llvm.getelementptr"(%159) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %164 = "mini.checkflag"(%163) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %165 = "llvm.load"(%164) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%165) [^bb28, ^bb28] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb27:
    %166 = "llvm.getelementptr"(%159) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %167 = "mini.checkflag"(%166) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %168 = "llvm.load"(%167) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%168) [^bb30, ^bb30] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb29:
    %169 = "llvm.extractvalue"(%158) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %170 = "llvm.load"(%161) : (!llvm.ptr) -> i32
    %171 = "llvm.getelementptr"(%169, %170) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %172 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %173 = "llvm.getelementptr"(%171, %172) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%173) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb31(%174 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %175 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %176 : !llvm.ptr, %177 : !llvm.struct<(!llvm.ptr)>):
    %178 = "mini.wrap"(%174) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %179 = "hi.cast"(%178) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %180 = "mini.wrap"(%177) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>
    %181 = "hi.cast"(%180) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>
    %182 = "mini.unwrap"(%179) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %183 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %184 = "mini.method_call"(%183, %182) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %185 = "hi.cast"(%184) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %186 = "hi.cast"(%185) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %187 = "mini.refer"(%186) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.while"() ({
      %188 = "mini.unwrap"(%187) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %189 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %190 = "mini.method_call"(%189, %188) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %191 = "hi.cast"(%190) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>
      %192 = "mini.get_type_field"(%179) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
      %193 = "mini.checkflag"(%191) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>) -> !mini.ptr<i1>
      %194 = "mini.unwrap"(%193) : (!mini.ptr<i1>) -> i1
    }, {
      %195 = "hi.cast"(%191) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "Iterable">
      %196 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %197 = "hi.cast"(%195) {"from_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable">) -> !mini.type_param<"T", !mini.any, "Iterable">
      %198 = "mini.unwrap"(%197) : (!mini.type_param<"T", !mini.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
      %199 = "mini.unwrap"(%181) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %200 = "mini.fptr_call"(%199, %198) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.ptr<i1>
      %201 = "mini.unwrap"(%196) : (!mini.ptr<i1>) -> i1
      %202 = "mini.unwrap"(%200) : (!mini.ptr<i1>) -> i1
      %203 = "mini.comparison"(%201, %202) {"op" = "EQ"} : (i1, i1) -> i1
      %204 = "mini.wrap"(%203) : (i1) -> !mini.ptr<i1>
      %205 = "mini.unwrap"(%204) : (!mini.ptr<i1>) -> i1
      "mini.if"(%205) ({
        %206 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
        %207 = "hi.cast"(%206) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
        "mini.return"(%207) : (!mini.ptr<i1>) -> ()
      }) : (i1) -> ()
      %208 = "hi.cast"(%195) {"from_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable">) -> !mini.type_param<"T", !mini.any, "Iterable">
      "mini.assign"(%191, %208) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>, !mini.type_param<"T", !mini.any, "Iterable">) -> ()
    }) : () -> ()
    %209 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %210 = "hi.cast"(%209) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
    "mini.return"(%210) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "Iterable_all_fFunctionT_to_i1", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb32(%211 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %212 : !llvm.ptr):
    %213 = "mini.invariant"(%212) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %214 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb33] : () -> ()
  ^bb34:
    %215 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%215, %214) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb35] : () -> ()
  ^bb33:
    %216 = "llvm.getelementptr"(%212) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %217 = "mini.checkflag"(%216) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %218 = "llvm.load"(%217) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%218) [^bb34, ^bb34] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb35:
    %219 = "llvm.extractvalue"(%211) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %220 = "llvm.load"(%214) : (!llvm.ptr) -> i32
    %221 = "llvm.getelementptr"(%219, %220) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %222 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %223 = "llvm.getelementptr"(%221, %222) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%223) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable_B_all_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb36(%224 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %225 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %226 : !llvm.ptr, %227 : !llvm.struct<(!llvm.ptr)>):
    %228 = "mini.wrap"(%224) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %229 = "hi.cast"(%228) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %230 = "mini.wrap"(%227) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>
    %231 = "hi.cast"(%230) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>
    %232 = "mini.unwrap"(%229) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %233 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %234 = "mini.method_call"(%233, %232) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %235 = "hi.cast"(%234) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %236 = "hi.cast"(%235) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %237 = "mini.refer"(%236) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.while"() ({
      %238 = "mini.unwrap"(%237) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %239 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %240 = "mini.method_call"(%239, %238) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %241 = "hi.cast"(%240) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>
      %242 = "mini.get_type_field"(%229) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
      %243 = "mini.checkflag"(%241) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>) -> !mini.ptr<i1>
      %244 = "mini.unwrap"(%243) : (!mini.ptr<i1>) -> i1
    }, {
      %245 = "hi.cast"(%241) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "Iterable">
      %246 = "hi.cast"(%245) {"from_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable">) -> !mini.type_param<"T", !mini.any, "Iterable">
      %247 = "mini.unwrap"(%246) : (!mini.type_param<"T", !mini.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
      %248 = "mini.unwrap"(%231) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %249 = "mini.fptr_call"(%248, %247) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.ptr<i1>
      %250 = "mini.unwrap"(%249) : (!mini.ptr<i1>) -> i1
      "mini.if"(%250) ({
        %251 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
        %252 = "hi.cast"(%251) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
        "mini.return"(%252) : (!mini.ptr<i1>) -> ()
      }) : (i1) -> ()
      %253 = "hi.cast"(%245) {"from_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Iterable">) -> !mini.type_param<"T", !mini.any, "Iterable">
      "mini.assign"(%241, %253) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.nil]>, !mini.type_param<"T", !mini.any, "Iterable">) -> ()
    }) : () -> ()
    %254 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %255 = "hi.cast"(%254) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
    "mini.return"(%255) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "Iterable_any_fFunctionT_to_i1", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb37(%256 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %257 : !llvm.ptr):
    %258 = "mini.invariant"(%257) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %259 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb38] : () -> ()
  ^bb39:
    %260 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%260, %259) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb40] : () -> ()
  ^bb38:
    %261 = "llvm.getelementptr"(%257) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %262 = "mini.checkflag"(%261) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %263 = "llvm.load"(%262) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%263) [^bb39, ^bb39] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb40:
    %264 = "llvm.extractvalue"(%256) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %265 = "llvm.load"(%259) : (!llvm.ptr) -> i32
    %266 = "llvm.getelementptr"(%264, %265) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %267 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %268 = "llvm.getelementptr"(%266, %267) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%268) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable_B_any_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb41(%269 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %270 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %271 : !llvm.ptr, %272 : !llvm.struct<(!llvm.ptr)>):
    %273 = "mini.wrap"(%269) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %274 = "hi.cast"(%273) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %275 = "mini.wrap"(%272) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable">>
    %276 = "hi.cast"(%275) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable">>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable">>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable">>
    %277 = "mini.unwrap"(%274) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %278 = "mini.unwrap"(%276) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable">>) -> !llvm.struct<(!llvm.ptr)>
    %279 = "mini.get_type_field"(%274) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %280 = "llvm.getelementptr"(%271) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %281 = "llvm.load"(%280) : (!llvm.ptr) -> !llvm.ptr
    %282 = "mini.parameterization_indexation"(%281) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
    %283 = "mini.new"(%279, %282) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterable", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !llvm.ptr) -> !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>
    %284 = "hi.cast"(%274) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>
    %285 = "mini.unwrap"(%284) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %286 = "hi.cast"(%276) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable">>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable">>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>
    %287 = "mini.unwrap"(%286) : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>) -> !llvm.struct<(!llvm.ptr)>
    %288 = "mini.unwrap"(%283) : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %289 = "mini.get_type_field"(%274) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %290 = "mini.parameterization"(%289) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %291 = "llvm.getelementptr"(%271) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %292 = "llvm.load"(%291) : (!llvm.ptr) -> !llvm.ptr
    %293 = "mini.parameterization_indexation"(%292) {"indices" = [0 : i32]} : (!llvm.ptr) -> !llvm.ptr
    %294 = "mini.get_type_field"(%274) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %295 = "mini.parameterization"(%293, %294) {"id_hierarchy" = ["function_typ", [0 : i32], [1 : i32]], "name_hierarchy" = ["FunctionIterable.T_subtype_Any_to_Iterable.U_subtype_Any", ["Iterable.U_subtype_Any"], ["Iterable.T_subtype_Any"]]} : (!llvm.ptr, !mini.reified_type) -> !llvm.ptr
    %296 = "mini.parameterizations_array"(%290, %295) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%296, %288, %285, %287) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 51 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %297 = "hi.cast"(%283) {"from_typ" = !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable"} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>) -> !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>
    "mini.return"(%297) : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "Iterable_map_fFunctionT_to_U", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb42(%298 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %299 : !llvm.ptr):
    %300 = "mini.invariant"(%299) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %301 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb43] : () -> ()
  ^bb44:
    %302 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%302, %301) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb45] : () -> ()
  ^bb43:
    %303 = "llvm.getelementptr"(%299) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %304 = "mini.checkflag"(%303) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %305 = "llvm.load"(%304) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%305) [^bb44, ^bb44] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb45:
    %306 = "llvm.extractvalue"(%298) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %307 = "llvm.load"(%301) : (!llvm.ptr) -> i32
    %308 = "llvm.getelementptr"(%306, %307) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %309 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %310 = "llvm.getelementptr"(%308, %309) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%310) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb46(%311 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %312 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %313 : !llvm.ptr, %314 : !llvm.struct<(!llvm.ptr)>):
    %315 = "mini.wrap"(%311) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %316 = "hi.cast"(%315) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %317 = "mini.wrap"(%314) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>
    %318 = "hi.cast"(%317) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>
    %319 = "mini.unwrap"(%316) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %320 = "mini.unwrap"(%318) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %321 = "mini.get_type_field"(%316) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %322 = "mini.new"(%321) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterable", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %323 = "hi.cast"(%316) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>
    %324 = "mini.unwrap"(%323) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %325 = "hi.cast"(%318) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>
    %326 = "mini.unwrap"(%325) : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %327 = "mini.unwrap"(%322) : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %328 = "mini.get_type_field"(%316) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %329 = "mini.parameterization"(%328) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %330 = "mini.get_type_field"(%316) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %331 = "mini.parameterization"(%330) {"id_hierarchy" = ["function_typ", ["bool_typ"], [0 : i32]], "name_hierarchy" = ["FunctionIterable.T_subtype_Any_to_i1", ["i1"], ["Iterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %332 = "mini.parameterizations_array"(%329, %331) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%332, %327, %324, %326) {"offset" = 3 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 50 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %333 = "hi.cast"(%322) {"from_typ" = !mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "FilterIterable", "to_typ_name" = "FilterIterable"} : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.return"(%333) : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "Iterable_filter_fFunctionT_to_i1", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb47(%334 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %335 : !llvm.ptr):
    %336 = "mini.invariant"(%335) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %337 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb48] : () -> ()
  ^bb49:
    %338 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%338, %337) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb50] : () -> ()
  ^bb48:
    %339 = "llvm.getelementptr"(%335) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %340 = "mini.checkflag"(%339) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %341 = "llvm.load"(%340) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%341) [^bb49, ^bb49] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb50:
    %342 = "llvm.extractvalue"(%334) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %343 = "llvm.load"(%337) : (!llvm.ptr) -> i32
    %344 = "llvm.getelementptr"(%342, %343) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %345 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %346 = "llvm.getelementptr"(%344, %345) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%346) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable_B_filter_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb51(%347 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %348 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %349 : !llvm.ptr, %350 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %351 = "mini.wrap"(%347) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %352 = "hi.cast"(%351) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %353 = "mini.wrap"(%350) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %354 = "hi.cast"(%353) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %355 = "mini.unwrap"(%352) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %356 = "mini.unwrap"(%354) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %357 = "mini.get_type_field"(%352) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %358 = "mini.new"(%357) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ChainIterable", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %359 = "hi.cast"(%352) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %360 = "mini.unwrap"(%359) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %361 = "hi.cast"(%354) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %362 = "mini.unwrap"(%361) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %363 = "mini.unwrap"(%358) : (!mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %364 = "mini.get_type_field"(%352) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %365 = "mini.parameterization"(%364) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %366 = "mini.get_type_field"(%352) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %367 = "mini.parameterization"(%366) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %368 = "mini.parameterizations_array"(%365, %367) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%368, %363, %360, %362) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 50 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %369 = "hi.cast"(%358) {"from_typ" = !mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "ChainIterable", "to_typ_name" = "ChainIterable"} : (!mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.return"(%369) : (!mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "Iterable_chain_otherIterableT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb52(%370 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %371 : !llvm.ptr):
    %372 = "mini.invariant"(%371) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %373 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb53] : () -> ()
  ^bb54:
    %374 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%374, %373) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb55] : () -> ()
  ^bb53:
    %375 = "llvm.getelementptr"(%371) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %376 = "mini.checkflag"(%375) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %377 = "llvm.load"(%376) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%377) [^bb54, ^bb54] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb55:
    %378 = "llvm.extractvalue"(%370) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %379 = "llvm.load"(%373) : (!llvm.ptr) -> i32
    %380 = "llvm.getelementptr"(%378, %379) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %381 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %382 = "llvm.getelementptr"(%380, %381) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%382) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb56(%383 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %384 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %385 : !llvm.ptr, %386 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %387 = "mini.wrap"(%383) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %388 = "hi.cast"(%387) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %389 = "mini.wrap"(%386) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %390 = "hi.cast"(%389) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %391 = "mini.unwrap"(%388) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %392 = "mini.unwrap"(%390) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %393 = "mini.get_type_field"(%388) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %394 = "mini.new"(%393) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "InterleaveIterable", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %395 = "hi.cast"(%388) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %396 = "mini.unwrap"(%395) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %397 = "hi.cast"(%390) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %398 = "mini.unwrap"(%397) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %399 = "mini.unwrap"(%394) : (!mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %400 = "mini.get_type_field"(%388) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %401 = "mini.parameterization"(%400) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %402 = "mini.get_type_field"(%388) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %403 = "mini.parameterization"(%402) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %404 = "mini.parameterizations_array"(%401, %403) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%404, %399, %396, %398) {"offset" = 3 : i32, "vptrs" = [#none, #none], "vtable_size" = 50 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %405 = "hi.cast"(%394) {"from_typ" = !mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "InterleaveIterable"} : (!mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.return"(%405) : (!mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "Iterable_interleave_otherIterableT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb57(%406 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %407 : !llvm.ptr):
    %408 = "mini.invariant"(%407) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %409 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb58] : () -> ()
  ^bb59:
    %410 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%410, %409) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb60] : () -> ()
  ^bb58:
    %411 = "llvm.getelementptr"(%407) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %412 = "mini.checkflag"(%411) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %413 = "llvm.load"(%412) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%413) [^bb59, ^bb59] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb60:
    %414 = "llvm.extractvalue"(%406) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %415 = "llvm.load"(%409) : (!llvm.ptr) -> i32
    %416 = "llvm.getelementptr"(%414, %415) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %417 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %418 = "llvm.getelementptr"(%416, %417) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%418) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb61(%419 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %420 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %421 : !llvm.ptr, %422 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %423 = "mini.wrap"(%419) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %424 = "hi.cast"(%423) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %425 = "mini.wrap"(%422) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>
    %426 = "hi.cast"(%425) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>
    %427 = "mini.unwrap"(%424) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %428 = "mini.unwrap"(%426) : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %429 = "mini.get_type_field"(%424) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %430 = "mini.wrap"(%422) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %431 = "mini.get_type_field"(%430) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %432 = "mini.get_type_field"(%424) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %433 = "mini.wrap"(%422) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %434 = "mini.get_type_field"(%433) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %435 = "mini.parameterization"(%432, %434) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairIterable.T_subtype_Any._Iterable.U_subtype_Any", ["Iterable.T_subtype_Any"], ["Iterable.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %436 = "mini.new"(%429, %431, %435) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterable", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !mini.reified_type, !llvm.ptr) -> !mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>
    %437 = "hi.cast"(%424) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>
    %438 = "mini.unwrap"(%437) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %439 = "hi.cast"(%426) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>
    %440 = "mini.unwrap"(%439) : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %441 = "mini.unwrap"(%436) : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %442 = "mini.get_type_field"(%424) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %443 = "mini.parameterization"(%442) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %444 = "mini.wrap"(%422) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %445 = "mini.get_type_field"(%444) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %446 = "mini.parameterization"(%445) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.U_subtype_Any", ["Iterable.U_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %447 = "mini.parameterizations_array"(%443, %446) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%447, %441, %438, %440) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %448 = "hi.cast"(%436) {"from_typ" = !mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable"} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>) -> !mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>
    "mini.return"(%448) : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "Iterable_zip_otherIterableU", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb62(%449 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %450 : !llvm.ptr):
    %451 = "mini.invariant"(%450) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %452 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb63] : () -> ()
  ^bb64:
    %453 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%453, %452) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb65] : () -> ()
  ^bb63:
    %454 = "llvm.getelementptr"(%450) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %455 = "mini.checkflag"(%454) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %456 = "llvm.load"(%455) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%456) [^bb64, ^bb64] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb65:
    %457 = "llvm.extractvalue"(%449) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %458 = "llvm.load"(%452) : (!llvm.ptr) -> i32
    %459 = "llvm.getelementptr"(%457, %458) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %460 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %461 = "llvm.getelementptr"(%459, %460) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%461) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb66(%462 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %463 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %464 : !llvm.ptr, %465 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %466 = "mini.wrap"(%462) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %467 = "hi.cast"(%466) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %468 = "mini.wrap"(%465) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>
    %469 = "hi.cast"(%468) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>
    %470 = "mini.unwrap"(%467) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %471 = "mini.unwrap"(%469) : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %472 = "mini.get_type_field"(%467) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %473 = "mini.wrap"(%465) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %474 = "mini.get_type_field"(%473) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %475 = "mini.get_type_field"(%467) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %476 = "mini.wrap"(%465) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %477 = "mini.get_type_field"(%476) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %478 = "mini.parameterization"(%475, %477) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairIterable.T_subtype_Any._Iterable.U_subtype_Any", ["Iterable.T_subtype_Any"], ["Iterable.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %479 = "mini.new"(%472, %474, %478) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ProductIterable", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !mini.reified_type, !llvm.ptr) -> !mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>
    %480 = "hi.cast"(%467) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>
    %481 = "mini.unwrap"(%480) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %482 = "hi.cast"(%469) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>
    %483 = "mini.unwrap"(%482) : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %484 = "mini.unwrap"(%479) : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %485 = "mini.get_type_field"(%467) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.reified_type
    %486 = "mini.parameterization"(%485) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.T_subtype_Any", ["Iterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %487 = "mini.wrap"(%465) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %488 = "mini.get_type_field"(%487) {"offset" = 0 : i64, "vtable_bytes" = 184 : i32} : (!llvm.ptr) -> !mini.reified_type
    %489 = "mini.parameterization"(%488) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableIterable.U_subtype_Any", ["Iterable.U_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %490 = "mini.parameterizations_array"(%486, %489) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%490, %484, %481, %483) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 52 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %491 = "hi.cast"(%479) {"from_typ" = !mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable"} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>) -> !mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>
    "mini.return"(%491) : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "Iterable_product_otherIterableU", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb67(%492 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %493 : !llvm.ptr):
    %494 = "mini.invariant"(%493) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %495 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb68] : () -> ()
  ^bb69:
    %496 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%496, %495) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb70] : () -> ()
  ^bb68:
    %497 = "llvm.getelementptr"(%493) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %498 = "mini.checkflag"(%497) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %499 = "llvm.load"(%498) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%499) [^bb69, ^bb69] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb70:
    %500 = "llvm.extractvalue"(%492) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %501 = "llvm.load"(%495) : (!llvm.ptr) -> i32
    %502 = "llvm.getelementptr"(%500, %501) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<23 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %503 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %504 = "llvm.getelementptr"(%502, %503) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%504) : (!llvm.ptr) -> ()
  }) {"func_name" = "Iterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_MapIterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "MapIterable_field_MapIterable_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "MapIterable_field_MapIterable_1"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterable_getter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableMapIterable.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterable_setter_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableMapIterable.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterable_field_iterable", "getter_name" = "MapIterable_getter_iterable", "setter_name" = "MapIterable_setter_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterable_getter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterable.T_subtype_Any_to_MapIterable.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterable_setter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterable.T_subtype_Any_to_MapIterable.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterable_field_f", "getter_name" = "MapIterable_getter_f", "setter_name" = "MapIterable_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb71(%505 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %506 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %507 : !llvm.ptr, %508 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %509 : !llvm.struct<(!llvm.ptr)>):
    %510 = "mini.wrap"(%505) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>
    %511 = "hi.cast"(%510) {"from_typ" = !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>, "to_typ" = !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable"} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>) -> !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>
    %512 = "mini.wrap"(%508) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>
    %513 = "hi.cast"(%512) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>
    %514 = "hi.cast"(%513) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>
    "mini.set_field"(%511, %514) {"offset" = 2 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>, !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>) -> ()
    %515 = "mini.wrap"(%509) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>
    %516 = "hi.cast"(%515) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>
    %517 = "hi.cast"(%516) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>
    "mini.set_field"(%511, %517) {"offset" = 3 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>, !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>) -> ()
  }) {"func_name" = "MapIterable_init_iterableIterableT_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb72(%518 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %519 : !llvm.ptr):
    %520 = "mini.invariant"(%519) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %521 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb73] : () -> ()
  ^bb74:
    %522 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%522, %521) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb75] : () -> ()
  ^bb76:
    %523 = "llvm.getelementptr"(%519) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %524 = "mini.checkflag"(%523) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %525 = "llvm.load"(%524) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%525) [^bb74, ^bb74] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb73:
    %526 = "llvm.getelementptr"(%519) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %527 = "mini.checkflag"(%526) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %528 = "llvm.load"(%527) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%528) [^bb76, ^bb76] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb75:
    %529 = "llvm.extractvalue"(%518) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %530 = "llvm.load"(%521) : (!llvm.ptr) -> i32
    %531 = "llvm.getelementptr"(%529, %530) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %532 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %533 = "llvm.getelementptr"(%531, %532) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%533) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_init_iterableIterableT_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb77(%534 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %535 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %536 : !llvm.ptr):
    %537 = "mini.wrap"(%534) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>
    %538 = "hi.cast"(%537) {"from_typ" = !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>, "to_typ" = !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable"} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>) -> !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>
    %539 = "mini.get_field"(%538) {"offset" = 2 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>
    %540 = "mini.unwrap"(%539) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %541 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %542 = "mini.method_call"(%541, %540) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %543 = "hi.cast"(%542) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterable">]>
    %544 = "mini.get_field"(%538) {"offset" = 3 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>
    %545 = "mini.unwrap"(%543) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %546 = "mini.unwrap"(%544) : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>) -> !llvm.struct<(!llvm.ptr)>
    %547 = "mini.get_type_field"(%538) {"offset" = 0 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>) -> !mini.reified_type
    %548 = "mini.get_type_field"(%538) {"offset" = 1 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>) -> !mini.reified_type
    %549 = "mini.new"(%547, %548) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "MapIterator", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !mini.reified_type) -> !mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>
    %550 = "mini.get_field"(%538) {"offset" = 2 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>
    %551 = "mini.unwrap"(%550) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %552 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %553 = "mini.method_call"(%552, %551) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %554 = "hi.cast"(%553) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterable">]>
    %555 = "mini.get_field"(%538) {"offset" = 3 : i64, "vtable_bytes" = 408 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>
    %556 = "hi.cast"(%554) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>
    %557 = "mini.unwrap"(%556) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %558 = "hi.cast"(%555) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterable">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterable">>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>
    %559 = "mini.unwrap"(%558) : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>) -> !llvm.struct<(!llvm.ptr)>
    %560 = "mini.unwrap"(%549) : (!mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %561 = "mini.get_type_field"(%538) {"offset" = 0 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>) -> !mini.reified_type
    %562 = "mini.parameterization"(%561) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorMapIterable.T_subtype_Any", ["MapIterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %563 = "mini.get_type_field"(%538) {"offset" = 1 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>) -> !mini.reified_type
    %564 = "mini.get_type_field"(%538) {"offset" = 0 : i64, "vtable_bytes" = 408 : i32} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>) -> !mini.reified_type
    %565 = "mini.parameterization"(%563, %564) {"id_hierarchy" = ["function_typ", [0 : i32], [1 : i32]], "name_hierarchy" = ["FunctionMapIterable.T_subtype_Any_to_MapIterable.U_subtype_Any", ["MapIterable.U_subtype_Any"], ["MapIterable.T_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %566 = "mini.parameterizations_array"(%562, %565) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%566, %560, %557, %559) {"offset" = 4 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %567 = "hi.cast"(%549) {"from_typ" = !mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "MapIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterable">, !mini.type_param<"U", !mini.any, "MapIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.return"(%567) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "MapIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb78(%568 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %569 : !llvm.ptr):
    %570 = "mini.invariant"(%569) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %571 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb79] : () -> ()
  ^bb79:
    %572 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%572, %571) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb80] : () -> ()
  ^bb80:
    %573 = "llvm.extractvalue"(%568) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %574 = "llvm.load"(%571) : (!llvm.ptr) -> i32
    %575 = "llvm.getelementptr"(%573, %574) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %576 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %577 = "llvm.getelementptr"(%575, %576) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%577) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb81(%578 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %579 : !llvm.ptr):
    %580 = "mini.invariant"(%579) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %581 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb82] : () -> ()
  ^bb83:
    %582 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%582, %581) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb84] : () -> ()
  ^bb82:
    %583 = "llvm.getelementptr"(%579) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %584 = "mini.checkflag"(%583) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %585 = "llvm.load"(%584) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%585) [^bb83, ^bb83] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb84:
    %586 = "llvm.extractvalue"(%578) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %587 = "llvm.load"(%581) : (!llvm.ptr) -> i32
    %588 = "llvm.getelementptr"(%586, %587) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %589 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %590 = "llvm.getelementptr"(%588, %589) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%590) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb85(%591 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %592 : !llvm.ptr):
    %593 = "mini.invariant"(%592) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %594 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb86] : () -> ()
  ^bb87:
    %595 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%595, %594) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb88] : () -> ()
  ^bb89:
    %596 = "llvm.getelementptr"(%592) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %597 = "mini.checkflag"(%596) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %598 = "llvm.load"(%597) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%598) [^bb87, ^bb87] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb86:
    %599 = "llvm.getelementptr"(%592) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %600 = "mini.checkflag"(%599) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %601 = "llvm.load"(%600) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%601) [^bb89, ^bb89] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb88:
    %602 = "llvm.extractvalue"(%591) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %603 = "llvm.load"(%594) : (!llvm.ptr) -> i32
    %604 = "llvm.getelementptr"(%602, %603) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %605 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %606 = "llvm.getelementptr"(%604, %605) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%606) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb90(%607 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %608 : !llvm.ptr):
    %609 = "mini.invariant"(%608) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %610 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb91] : () -> ()
  ^bb92:
    %611 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%611, %610) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb93] : () -> ()
  ^bb91:
    %612 = "llvm.getelementptr"(%608) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %613 = "mini.checkflag"(%612) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %614 = "llvm.load"(%613) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%614) [^bb92, ^bb92] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb93:
    %615 = "llvm.extractvalue"(%607) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %616 = "llvm.load"(%610) : (!llvm.ptr) -> i32
    %617 = "llvm.getelementptr"(%615, %616) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %618 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %619 = "llvm.getelementptr"(%617, %618) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%619) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_all_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb94(%620 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %621 : !llvm.ptr):
    %622 = "mini.invariant"(%621) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %623 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb95] : () -> ()
  ^bb96:
    %624 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%624, %623) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb97] : () -> ()
  ^bb95:
    %625 = "llvm.getelementptr"(%621) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %626 = "mini.checkflag"(%625) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %627 = "llvm.load"(%626) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%627) [^bb96, ^bb96] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb97:
    %628 = "llvm.extractvalue"(%620) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %629 = "llvm.load"(%623) : (!llvm.ptr) -> i32
    %630 = "llvm.getelementptr"(%628, %629) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %631 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %632 = "llvm.getelementptr"(%630, %631) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%632) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_any_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb98(%633 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %634 : !llvm.ptr):
    %635 = "mini.invariant"(%634) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %636 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb99] : () -> ()
  ^bb100:
    %637 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%637, %636) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb101] : () -> ()
  ^bb99:
    %638 = "llvm.getelementptr"(%634) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %639 = "mini.checkflag"(%638) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %640 = "llvm.load"(%639) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%640) [^bb100, ^bb100] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb101:
    %641 = "llvm.extractvalue"(%633) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %642 = "llvm.load"(%636) : (!llvm.ptr) -> i32
    %643 = "llvm.getelementptr"(%641, %642) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %644 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %645 = "llvm.getelementptr"(%643, %644) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%645) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb102(%646 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %647 : !llvm.ptr):
    %648 = "mini.invariant"(%647) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %649 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb103] : () -> ()
  ^bb104:
    %650 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%650, %649) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb105] : () -> ()
  ^bb103:
    %651 = "llvm.getelementptr"(%647) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %652 = "mini.checkflag"(%651) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %653 = "llvm.load"(%652) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%653) [^bb104, ^bb104] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb105:
    %654 = "llvm.extractvalue"(%646) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %655 = "llvm.load"(%649) : (!llvm.ptr) -> i32
    %656 = "llvm.getelementptr"(%654, %655) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %657 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %658 = "llvm.getelementptr"(%656, %657) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%658) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_filter_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb106(%659 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %660 : !llvm.ptr):
    %661 = "mini.invariant"(%660) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %662 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb107] : () -> ()
  ^bb108:
    %663 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%663, %662) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb109] : () -> ()
  ^bb107:
    %664 = "llvm.getelementptr"(%660) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %665 = "mini.checkflag"(%664) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %666 = "llvm.load"(%665) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%666) [^bb108, ^bb108] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb109:
    %667 = "llvm.extractvalue"(%659) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %668 = "llvm.load"(%662) : (!llvm.ptr) -> i32
    %669 = "llvm.getelementptr"(%667, %668) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %670 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %671 = "llvm.getelementptr"(%669, %670) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%671) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb110(%672 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %673 : !llvm.ptr):
    %674 = "mini.invariant"(%673) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %675 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb111] : () -> ()
  ^bb112:
    %676 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%676, %675) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb113] : () -> ()
  ^bb111:
    %677 = "llvm.getelementptr"(%673) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %678 = "mini.checkflag"(%677) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %679 = "llvm.load"(%678) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%679) [^bb112, ^bb112] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb113:
    %680 = "llvm.extractvalue"(%672) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %681 = "llvm.load"(%675) : (!llvm.ptr) -> i32
    %682 = "llvm.getelementptr"(%680, %681) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %683 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %684 = "llvm.getelementptr"(%682, %683) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%684) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb114(%685 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %686 : !llvm.ptr):
    %687 = "mini.invariant"(%686) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %688 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb115] : () -> ()
  ^bb116:
    %689 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%689, %688) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb117] : () -> ()
  ^bb115:
    %690 = "llvm.getelementptr"(%686) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %691 = "mini.checkflag"(%690) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %692 = "llvm.load"(%691) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%692) [^bb116, ^bb116] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb117:
    %693 = "llvm.extractvalue"(%685) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %694 = "llvm.load"(%688) : (!llvm.ptr) -> i32
    %695 = "llvm.getelementptr"(%693, %694) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %696 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %697 = "llvm.getelementptr"(%695, %696) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%697) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb118(%698 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %699 : !llvm.ptr):
    %700 = "mini.invariant"(%699) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %701 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb119] : () -> ()
  ^bb120:
    %702 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%702, %701) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb121] : () -> ()
  ^bb119:
    %703 = "llvm.getelementptr"(%699) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %704 = "mini.checkflag"(%703) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %705 = "llvm.load"(%704) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%705) [^bb120, ^bb120] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb121:
    %706 = "llvm.extractvalue"(%698) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %707 = "llvm.load"(%701) : (!llvm.ptr) -> i32
    %708 = "llvm.getelementptr"(%706, %707) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<51 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %709 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %710 = "llvm.getelementptr"(%708, %709) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%710) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_MapIterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "MapIterator_field_MapIterator_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "MapIterator_field_MapIterator_1"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterator_getter_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorMapIterator.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterator_setter_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorMapIterator.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterator_field_iterator", "getter_name" = "MapIterator_getter_iterator", "setter_name" = "MapIterator_setter_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "MapIterator_getter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterator.T_subtype_Any_to_MapIterator.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "MapIterator_setter_f", "types" = [!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionMapIterator.T_subtype_Any_to_MapIterator.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "MapIterator_field_f", "getter_name" = "MapIterator_getter_f", "setter_name" = "MapIterator_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb122(%711 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %712 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %713 : !llvm.ptr, %714 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %715 : !llvm.struct<(!llvm.ptr)>):
    %716 = "mini.wrap"(%711) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>
    %717 = "hi.cast"(%716) {"from_typ" = !mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>, "to_typ" = !mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>, "from_typ_name" = "MapIterator", "to_typ_name" = "MapIterator"} : (!mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>) -> !mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>
    %718 = "mini.wrap"(%714) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>
    %719 = "hi.cast"(%718) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>
    %720 = "hi.cast"(%719) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>
    "mini.set_field"(%717, %720) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>, !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>) -> ()
    %721 = "mini.wrap"(%715) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>
    %722 = "hi.cast"(%721) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>
    %723 = "hi.cast"(%722) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>
    "mini.set_field"(%717, %723) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>, !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>) -> ()
  }) {"func_name" = "MapIterator_init_iteratorIteratorT_fFunctionT_to_U", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb123(%724 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %725 : !llvm.ptr):
    %726 = "mini.invariant"(%725) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %727 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb124] : () -> ()
  ^bb125:
    %728 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%728, %727) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb126] : () -> ()
  ^bb127:
    %729 = "llvm.getelementptr"(%725) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %730 = "mini.checkflag"(%729) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %731 = "llvm.load"(%730) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%731) [^bb125, ^bb125] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb124:
    %732 = "llvm.getelementptr"(%725) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %733 = "mini.checkflag"(%732) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %734 = "llvm.load"(%733) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%734) [^bb127, ^bb127] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb126:
    %735 = "llvm.extractvalue"(%724) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %736 = "llvm.load"(%727) : (!llvm.ptr) -> i32
    %737 = "llvm.getelementptr"(%735, %736) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %738 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %739 = "llvm.getelementptr"(%737, %738) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%739) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb128(%740 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %741 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %742 : !llvm.ptr):
    %743 = "mini.wrap"(%740) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>
    %744 = "hi.cast"(%743) {"from_typ" = !mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>, "to_typ" = !mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>, "from_typ_name" = "MapIterator", "to_typ_name" = "MapIterator"} : (!mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>) -> !mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>
    %745 = "mini.get_field"(%744) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>
    %746 = "mini.unwrap"(%745) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "MapIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %747 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %748 = "mini.method_call"(%747, %746) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    %749 = "hi.cast"(%748) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator">, !mini.nil]>
    %750 = "mini.get_type_field"(%744) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>) -> !mini.reified_type
    %751 = "mini.checkflag"(%749) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "MapIterator">, !mini.nil]>) -> !mini.ptr<i1>
    %752 = "mini.unwrap"(%751) : (!mini.ptr<i1>) -> i1
    %753 = "hi.cast"(%749) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "MapIterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator">, !mini.nil]>
    "mini.if"(%752) ({
      %754 = "hi.cast"(%753) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator">, !mini.nil]>, "to_typ" = !mini.type_param<"T", !mini.any, "MapIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "MapIterator">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "MapIterator">
      %755 = "hi.cast"(%754) {"from_typ" = !mini.type_param<"T", !mini.any, "MapIterator">, "to_typ" = !mini.type_param<"T", !mini.any, "MapIterator">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "MapIterator">) -> !mini.type_param<"T", !mini.any, "MapIterator">
      %756 = "mini.unwrap"(%755) : (!mini.type_param<"T", !mini.any, "MapIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
      %757 = "mini.get_field"(%744) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"MapIterator", [!mini.type_param<"T", !mini.any, "MapIterator">, !mini.type_param<"U", !mini.any, "MapIterator">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>
      %758 = "mini.unwrap"(%757) : (!mini.function<[!mini.type_param<"T", !mini.any, "MapIterator">], !mini.any, !mini.type_param<"U", !mini.any, "MapIterator">>) -> !llvm.ptr
      %759 = "mini.fptr_call"(%758, %756) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"U", !mini.any, "MapIterator">
      %760 = "hi.cast"(%759) {"from_typ" = !mini.type_param<"U", !mini.any, "MapIterator">, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!mini.type_param<"U", !mini.any, "MapIterator">) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      "mini.return"(%760) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
      %761 = "hi.cast"(%754) {"from_typ" = !mini.type_param<"T", !mini.any, "MapIterator">, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator">, !mini.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!mini.type_param<"T", !mini.any, "MapIterator">) -> !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator">, !mini.nil]>
      "mini.assign"(%753, %761) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.type_param<"T", !mini.any, "MapIterator">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.any, "MapIterator">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %762 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %763 = "hi.cast"(%762) {"from_typ" = !mini.nil, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    "mini.return"(%763) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
  }) {"func_name" = "MapIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb129(%764 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %765 : !llvm.ptr):
    %766 = "mini.invariant"(%765) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %767 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb130] : () -> ()
  ^bb130:
    %768 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%768, %767) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb131] : () -> ()
  ^bb131:
    %769 = "llvm.extractvalue"(%764) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %770 = "llvm.load"(%767) : (!llvm.ptr) -> i32
    %771 = "llvm.getelementptr"(%769, %770) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %772 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %773 = "llvm.getelementptr"(%771, %772) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%773) : (!llvm.ptr) -> ()
  }) {"func_name" = "MapIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_FilterIterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FilterIterable_field_FilterIterable_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterable_getter_iterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableFilterIterable.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterable_setter_iterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableFilterIterable.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterable_field_iterable", "getter_name" = "FilterIterable_getter_iterable", "setter_name" = "FilterIterable_setter_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterable_getter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterable.T_subtype_Any_to_i1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterable_setter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterable.T_subtype_Any_to_i1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterable_field_f", "getter_name" = "FilterIterable_getter_f", "setter_name" = "FilterIterable_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb132(%774 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %775 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %776 : !llvm.ptr, %777 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %778 : !llvm.struct<(!llvm.ptr)>):
    %779 = "mini.wrap"(%774) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>
    %780 = "hi.cast"(%779) {"from_typ" = !mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, "to_typ" = !mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, "from_typ_name" = "FilterIterable", "to_typ_name" = "FilterIterable"} : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>
    %781 = "mini.wrap"(%777) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>
    %782 = "hi.cast"(%781) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>
    %783 = "hi.cast"(%782) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>
    "mini.set_field"(%780, %783) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> ()
    %784 = "mini.wrap"(%778) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>
    %785 = "hi.cast"(%784) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>
    %786 = "hi.cast"(%785) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>
    "mini.set_field"(%780, %786) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>) -> ()
  }) {"func_name" = "FilterIterable_init_iterableIterableT_fFunctionT_to_i1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb133(%787 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %788 : !llvm.ptr):
    %789 = "mini.invariant"(%788) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %790 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb134] : () -> ()
  ^bb135:
    %791 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%791, %790) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb136] : () -> ()
  ^bb137:
    %792 = "llvm.getelementptr"(%788) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %793 = "mini.checkflag"(%792) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %794 = "llvm.load"(%793) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%794) [^bb135, ^bb135] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb134:
    %795 = "llvm.getelementptr"(%788) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %796 = "mini.checkflag"(%795) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %797 = "llvm.load"(%796) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%797) [^bb137, ^bb137] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb136:
    %798 = "llvm.extractvalue"(%787) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %799 = "llvm.load"(%790) : (!llvm.ptr) -> i32
    %800 = "llvm.getelementptr"(%798, %799) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %801 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %802 = "llvm.getelementptr"(%800, %801) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%802) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_init_iterableIterableT_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb138(%803 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %804 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %805 : !llvm.ptr):
    %806 = "mini.wrap"(%803) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>
    %807 = "hi.cast"(%806) {"from_typ" = !mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, "to_typ" = !mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, "from_typ_name" = "FilterIterable", "to_typ_name" = "FilterIterable"} : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>
    %808 = "mini.get_field"(%807) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>
    %809 = "mini.unwrap"(%808) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %810 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %811 = "mini.method_call"(%810, %809) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %812 = "hi.cast"(%811) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterable">]>
    %813 = "mini.get_field"(%807) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>
    %814 = "mini.unwrap"(%812) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %815 = "mini.unwrap"(%813) : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %816 = "mini.get_type_field"(%807) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !mini.reified_type
    %817 = "mini.new"(%816) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>)>, "class_name" = "FilterIterator", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterable">]>
    %818 = "mini.get_field"(%807) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>
    %819 = "mini.unwrap"(%818) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %820 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %821 = "mini.method_call"(%820, %819) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %822 = "hi.cast"(%821) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterable">]>
    %823 = "mini.get_field"(%807) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>
    %824 = "hi.cast"(%822) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>
    %825 = "mini.unwrap"(%824) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %826 = "hi.cast"(%823) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterable">], !mini.any, !mini.ptr<i1>>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>
    %827 = "mini.unwrap"(%826) : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %828 = "mini.unwrap"(%817) : (!mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %829 = "mini.get_type_field"(%807) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !mini.reified_type
    %830 = "mini.parameterization"(%829) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorFilterIterable.T_subtype_Any", ["FilterIterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %831 = "mini.get_type_field"(%807) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !mini.reified_type
    %832 = "mini.parameterization"(%831) {"id_hierarchy" = ["function_typ", ["bool_typ"], [0 : i32]], "name_hierarchy" = ["FunctionFilterIterable.T_subtype_Any_to_i1", ["i1"], ["FilterIterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %833 = "mini.parameterizations_array"(%830, %832) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%833, %828, %825, %827) {"offset" = 3 : i32, "vptrs" = [#none, "function_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %834 = "hi.cast"(%817) {"from_typ" = !mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "FilterIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.return"(%834) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "FilterIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb139(%835 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %836 : !llvm.ptr):
    %837 = "mini.invariant"(%836) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %838 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb140] : () -> ()
  ^bb140:
    %839 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%839, %838) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb141] : () -> ()
  ^bb141:
    %840 = "llvm.extractvalue"(%835) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %841 = "llvm.load"(%838) : (!llvm.ptr) -> i32
    %842 = "llvm.getelementptr"(%840, %841) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %843 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %844 = "llvm.getelementptr"(%842, %843) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%844) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb142(%845 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %846 : !llvm.ptr):
    %847 = "mini.invariant"(%846) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %848 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb143] : () -> ()
  ^bb144:
    %849 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%849, %848) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb145] : () -> ()
  ^bb143:
    %850 = "llvm.getelementptr"(%846) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %851 = "mini.checkflag"(%850) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %852 = "llvm.load"(%851) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%852) [^bb144, ^bb144] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb145:
    %853 = "llvm.extractvalue"(%845) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %854 = "llvm.load"(%848) : (!llvm.ptr) -> i32
    %855 = "llvm.getelementptr"(%853, %854) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %856 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %857 = "llvm.getelementptr"(%855, %856) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%857) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb146(%858 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %859 : !llvm.ptr):
    %860 = "mini.invariant"(%859) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %861 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb147] : () -> ()
  ^bb148:
    %862 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%862, %861) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb149] : () -> ()
  ^bb150:
    %863 = "llvm.getelementptr"(%859) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %864 = "mini.checkflag"(%863) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %865 = "llvm.load"(%864) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%865) [^bb148, ^bb148] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb147:
    %866 = "llvm.getelementptr"(%859) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %867 = "mini.checkflag"(%866) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %868 = "llvm.load"(%867) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%868) [^bb150, ^bb150] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb149:
    %869 = "llvm.extractvalue"(%858) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %870 = "llvm.load"(%861) : (!llvm.ptr) -> i32
    %871 = "llvm.getelementptr"(%869, %870) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %872 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %873 = "llvm.getelementptr"(%871, %872) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%873) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb151(%874 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %875 : !llvm.ptr):
    %876 = "mini.invariant"(%875) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %877 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb152] : () -> ()
  ^bb153:
    %878 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%878, %877) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb154] : () -> ()
  ^bb152:
    %879 = "llvm.getelementptr"(%875) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %880 = "mini.checkflag"(%879) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %881 = "llvm.load"(%880) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%881) [^bb153, ^bb153] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb154:
    %882 = "llvm.extractvalue"(%874) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %883 = "llvm.load"(%877) : (!llvm.ptr) -> i32
    %884 = "llvm.getelementptr"(%882, %883) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %885 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %886 = "llvm.getelementptr"(%884, %885) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%886) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_all_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb155(%887 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %888 : !llvm.ptr):
    %889 = "mini.invariant"(%888) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %890 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb156] : () -> ()
  ^bb157:
    %891 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%891, %890) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb158] : () -> ()
  ^bb156:
    %892 = "llvm.getelementptr"(%888) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %893 = "mini.checkflag"(%892) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %894 = "llvm.load"(%893) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%894) [^bb157, ^bb157] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb158:
    %895 = "llvm.extractvalue"(%887) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %896 = "llvm.load"(%890) : (!llvm.ptr) -> i32
    %897 = "llvm.getelementptr"(%895, %896) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %898 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %899 = "llvm.getelementptr"(%897, %898) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%899) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_any_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb159(%900 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %901 : !llvm.ptr):
    %902 = "mini.invariant"(%901) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %903 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb160] : () -> ()
  ^bb161:
    %904 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%904, %903) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb162] : () -> ()
  ^bb160:
    %905 = "llvm.getelementptr"(%901) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %906 = "mini.checkflag"(%905) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %907 = "llvm.load"(%906) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%907) [^bb161, ^bb161] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb162:
    %908 = "llvm.extractvalue"(%900) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %909 = "llvm.load"(%903) : (!llvm.ptr) -> i32
    %910 = "llvm.getelementptr"(%908, %909) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %911 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %912 = "llvm.getelementptr"(%910, %911) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%912) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb163(%913 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %914 : !llvm.ptr):
    %915 = "mini.invariant"(%914) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %916 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb164] : () -> ()
  ^bb165:
    %917 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%917, %916) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb166] : () -> ()
  ^bb164:
    %918 = "llvm.getelementptr"(%914) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %919 = "mini.checkflag"(%918) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %920 = "llvm.load"(%919) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%920) [^bb165, ^bb165] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb166:
    %921 = "llvm.extractvalue"(%913) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %922 = "llvm.load"(%916) : (!llvm.ptr) -> i32
    %923 = "llvm.getelementptr"(%921, %922) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %924 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %925 = "llvm.getelementptr"(%923, %924) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%925) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_filter_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb167(%926 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %927 : !llvm.ptr):
    %928 = "mini.invariant"(%927) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %929 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb168] : () -> ()
  ^bb169:
    %930 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%930, %929) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb170] : () -> ()
  ^bb168:
    %931 = "llvm.getelementptr"(%927) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %932 = "mini.checkflag"(%931) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %933 = "llvm.load"(%932) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%933) [^bb169, ^bb169] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb170:
    %934 = "llvm.extractvalue"(%926) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %935 = "llvm.load"(%929) : (!llvm.ptr) -> i32
    %936 = "llvm.getelementptr"(%934, %935) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %937 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %938 = "llvm.getelementptr"(%936, %937) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%938) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb171(%939 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %940 : !llvm.ptr):
    %941 = "mini.invariant"(%940) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %942 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb172] : () -> ()
  ^bb173:
    %943 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%943, %942) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb174] : () -> ()
  ^bb172:
    %944 = "llvm.getelementptr"(%940) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %945 = "mini.checkflag"(%944) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %946 = "llvm.load"(%945) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%946) [^bb173, ^bb173] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb174:
    %947 = "llvm.extractvalue"(%939) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %948 = "llvm.load"(%942) : (!llvm.ptr) -> i32
    %949 = "llvm.getelementptr"(%947, %948) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %950 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %951 = "llvm.getelementptr"(%949, %950) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%951) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb175(%952 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %953 : !llvm.ptr):
    %954 = "mini.invariant"(%953) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %955 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb176] : () -> ()
  ^bb177:
    %956 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%956, %955) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb178] : () -> ()
  ^bb176:
    %957 = "llvm.getelementptr"(%953) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %958 = "mini.checkflag"(%957) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %959 = "llvm.load"(%958) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%959) [^bb177, ^bb177] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb178:
    %960 = "llvm.extractvalue"(%952) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %961 = "llvm.load"(%955) : (!llvm.ptr) -> i32
    %962 = "llvm.getelementptr"(%960, %961) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %963 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %964 = "llvm.getelementptr"(%962, %963) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%964) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb179(%965 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %966 : !llvm.ptr):
    %967 = "mini.invariant"(%966) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %968 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb180] : () -> ()
  ^bb181:
    %969 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%969, %968) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb182] : () -> ()
  ^bb180:
    %970 = "llvm.getelementptr"(%966) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %971 = "mini.checkflag"(%970) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %972 = "llvm.load"(%971) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%972) [^bb181, ^bb181] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb182:
    %973 = "llvm.extractvalue"(%965) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %974 = "llvm.load"(%968) : (!llvm.ptr) -> i32
    %975 = "llvm.getelementptr"(%973, %974) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %976 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %977 = "llvm.getelementptr"(%975, %976) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%977) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_FilterIterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FilterIterator_field_FilterIterator_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterator_getter_iterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorFilterIterator.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterator_setter_iterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorFilterIterator.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterator_field_iterator", "getter_name" = "FilterIterator_getter_iterator", "setter_name" = "FilterIterator_setter_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FilterIterator_getter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterator.T_subtype_Any_to_i1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FilterIterator_setter_f", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "function_typ", "parameterization" = "_parameterization_FunctionFilterIterator.T_subtype_Any_to_i1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FilterIterator_field_f", "getter_name" = "FilterIterator_getter_f", "setter_name" = "FilterIterator_setter_f"} : () -> ()
  "mini.func"() ({
  ^bb183(%978 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %979 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %980 : !llvm.ptr, %981 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %982 : !llvm.struct<(!llvm.ptr)>):
    %983 = "mini.wrap"(%978) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>
    %984 = "hi.cast"(%983) {"from_typ" = !mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>, "to_typ" = !mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>, "from_typ_name" = "FilterIterator", "to_typ_name" = "FilterIterator"} : (!mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>) -> !mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>
    %985 = "mini.wrap"(%981) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>
    %986 = "hi.cast"(%985) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>
    %987 = "hi.cast"(%986) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>
    "mini.set_field"(%984, %987) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>, !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>) -> ()
    %988 = "mini.wrap"(%982) : (!llvm.struct<(!llvm.ptr)>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>
    %989 = "hi.cast"(%988) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>
    %990 = "hi.cast"(%989) {"from_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>
    "mini.set_field"(%984, %990) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>, !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>) -> ()
  }) {"func_name" = "FilterIterator_init_iteratorIteratorT_fFunctionT_to_i1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb184(%991 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %992 : !llvm.ptr):
    %993 = "mini.invariant"(%992) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %994 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb185] : () -> ()
  ^bb186:
    %995 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%995, %994) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb187] : () -> ()
  ^bb188:
    %996 = "llvm.getelementptr"(%992) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %997 = "mini.checkflag"(%996) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %998 = "llvm.load"(%997) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%998) [^bb186, ^bb186] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb185:
    %999 = "llvm.getelementptr"(%992) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1000 = "mini.checkflag"(%999) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1001 = "llvm.load"(%1000) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1001) [^bb188, ^bb188] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb187:
    %1002 = "llvm.extractvalue"(%991) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1003 = "llvm.load"(%994) : (!llvm.ptr) -> i32
    %1004 = "llvm.getelementptr"(%1002, %1003) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1005 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1006 = "llvm.getelementptr"(%1004, %1005) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1006) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb189(%1007 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1008 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1009 : !llvm.ptr):
    %1010 = "mini.wrap"(%1007) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>
    %1011 = "hi.cast"(%1010) {"from_typ" = !mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>, "to_typ" = !mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>, "from_typ_name" = "FilterIterator", "to_typ_name" = "FilterIterator"} : (!mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>) -> !mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>
    %1012 = "mini.get_field"(%1011) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>
    %1013 = "mini.unwrap"(%1012) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1014 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1015 = "mini.method_call"(%1014, %1013) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    %1016 = "hi.cast"(%1015) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>
    %1017 = "hi.cast"(%1016) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>
    "mini.while"() ({
      %1018 = "mini.get_type_field"(%1011) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32} : (!mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>) -> !mini.reified_type
      %1019 = "mini.checkflag"(%1017) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>) -> !mini.ptr<i1>
      %1020 = "mini.unwrap"(%1019) : (!mini.ptr<i1>) -> i1
    }, {
      %1021 = "hi.cast"(%1017) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>, "to_typ" = !mini.type_param<"T", !mini.any, "FilterIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "FilterIterator">
      %1022 = "hi.cast"(%1021) {"from_typ" = !mini.type_param<"T", !mini.any, "FilterIterator">, "to_typ" = !mini.type_param<"T", !mini.any, "FilterIterator">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "FilterIterator">) -> !mini.type_param<"T", !mini.any, "FilterIterator">
      %1023 = "mini.unwrap"(%1022) : (!mini.type_param<"T", !mini.any, "FilterIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
      %1024 = "mini.get_field"(%1011) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>) -> !mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>
      %1025 = "mini.unwrap"(%1024) : (!mini.function<[!mini.type_param<"T", !mini.any, "FilterIterator">], !mini.any, !mini.ptr<i1>>) -> !llvm.ptr
      %1026 = "mini.fptr_call"(%1025, %1023) {"ret_type" = i1} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.ptr<i1>
      %1027 = "mini.unwrap"(%1026) : (!mini.ptr<i1>) -> i1
      "mini.if"(%1027) ({
        %1028 = "hi.cast"(%1021) {"from_typ" = !mini.type_param<"T", !mini.any, "FilterIterator">, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!mini.type_param<"T", !mini.any, "FilterIterator">) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
        "mini.return"(%1028) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
      }) : (i1) -> ()
      %1029 = "mini.get_field"(%1011) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!mini.fatptr<"FilterIterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>
      %1030 = "mini.unwrap"(%1029) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "FilterIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1031 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1032 = "mini.method_call"(%1031, %1030) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %1033 = "hi.cast"(%1032) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>
      %1034 = "hi.cast"(%1033) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>
      "mini.assign"(%1017, %1034) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.any, "FilterIterator">, !mini.nil]>) -> ()
    }) : () -> ()
    %1035 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %1036 = "hi.cast"(%1035) {"from_typ" = !mini.nil, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    "mini.return"(%1036) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
  }) {"func_name" = "FilterIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb190(%1037 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1038 : !llvm.ptr):
    %1039 = "mini.invariant"(%1038) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1040 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb191] : () -> ()
  ^bb191:
    %1041 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%1041, %1040) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb192] : () -> ()
  ^bb192:
    %1042 = "llvm.extractvalue"(%1037) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1043 = "llvm.load"(%1040) : (!llvm.ptr) -> i32
    %1044 = "llvm.getelementptr"(%1042, %1043) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1045 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1046 = "llvm.getelementptr"(%1044, %1045) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1046) : (!llvm.ptr) -> ()
  }) {"func_name" = "FilterIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ChainIterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ChainIterable_field_ChainIterable_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterable_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChainIterable.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterable_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChainIterable.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterable_field_first", "getter_name" = "ChainIterable_getter_first", "setter_name" = "ChainIterable_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterable_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChainIterable.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterable_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableChainIterable.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterable_field_second", "getter_name" = "ChainIterable_getter_second", "setter_name" = "ChainIterable_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb193(%1047 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1048 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1049 : !llvm.ptr, %1050 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1051 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %1052 = "mini.wrap"(%1047) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1053 = "hi.cast"(%1052) {"from_typ" = !mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "to_typ" = !mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "from_typ_name" = "ChainIterable", "to_typ_name" = "ChainIterable"} : (!mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1054 = "mini.wrap"(%1050) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1055 = "hi.cast"(%1054) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1056 = "hi.cast"(%1055) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    "mini.set_field"(%1053, %1056) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> ()
    %1057 = "mini.wrap"(%1051) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1058 = "hi.cast"(%1057) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1059 = "hi.cast"(%1058) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    "mini.set_field"(%1053, %1059) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> ()
  }) {"func_name" = "ChainIterable_init_firstIterableT_secondIterableT", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb194(%1060 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1061 : !llvm.ptr):
    %1062 = "mini.invariant"(%1061) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1063 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb195] : () -> ()
  ^bb196:
    %1064 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%1064, %1063) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb197] : () -> ()
  ^bb198:
    %1065 = "llvm.getelementptr"(%1061) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1066 = "mini.checkflag"(%1065) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1067 = "llvm.load"(%1066) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1067) [^bb196, ^bb196] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb195:
    %1068 = "llvm.getelementptr"(%1061) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1069 = "mini.checkflag"(%1068) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1070 = "llvm.load"(%1069) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1070) [^bb198, ^bb198] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb197:
    %1071 = "llvm.extractvalue"(%1060) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1072 = "llvm.load"(%1063) : (!llvm.ptr) -> i32
    %1073 = "llvm.getelementptr"(%1071, %1072) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1074 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1075 = "llvm.getelementptr"(%1073, %1074) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1075) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_init_firstIterableT_secondIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb199(%1076 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1077 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1078 : !llvm.ptr):
    %1079 = "mini.wrap"(%1076) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1080 = "hi.cast"(%1079) {"from_typ" = !mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "to_typ" = !mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "from_typ_name" = "ChainIterable", "to_typ_name" = "ChainIterable"} : (!mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1081 = "mini.get_field"(%1080) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1082 = "mini.unwrap"(%1081) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1083 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1084 = "mini.method_call"(%1083, %1082) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %1085 = "hi.cast"(%1084) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1086 = "mini.get_field"(%1080) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1087 = "mini.unwrap"(%1086) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1088 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1089 = "mini.method_call"(%1088, %1087) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %1090 = "hi.cast"(%1089) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1091 = "mini.unwrap"(%1085) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1092 = "mini.unwrap"(%1090) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1093 = "mini.get_type_field"(%1080) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.reified_type
    %1094 = "mini.new"(%1093) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "ChainIterator", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1095 = "mini.get_field"(%1080) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1096 = "mini.unwrap"(%1095) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1097 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1098 = "mini.method_call"(%1097, %1096) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %1099 = "hi.cast"(%1098) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1100 = "mini.get_field"(%1080) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1101 = "mini.unwrap"(%1100) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1102 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1103 = "mini.method_call"(%1102, %1101) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %1104 = "hi.cast"(%1103) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>
    %1105 = "hi.cast"(%1099) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>
    %1106 = "mini.unwrap"(%1105) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1107 = "hi.cast"(%1104) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>
    %1108 = "mini.unwrap"(%1107) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1109 = "mini.unwrap"(%1094) : (!mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1110 = "mini.get_type_field"(%1080) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.reified_type
    %1111 = "mini.parameterization"(%1110) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorChainIterable.T_subtype_Any", ["ChainIterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %1112 = "mini.get_type_field"(%1080) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"ChainIterable", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.reified_type
    %1113 = "mini.parameterization"(%1112) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorChainIterable.T_subtype_Any", ["ChainIterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %1114 = "mini.parameterizations_array"(%1111, %1113) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1114, %1109, %1106, %1108) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %1115 = "hi.cast"(%1094) {"from_typ" = !mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "ChainIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.return"(%1115) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "ChainIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb200(%1116 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1117 : !llvm.ptr):
    %1118 = "mini.invariant"(%1117) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1119 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb201] : () -> ()
  ^bb201:
    %1120 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%1120, %1119) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb202] : () -> ()
  ^bb202:
    %1121 = "llvm.extractvalue"(%1116) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1122 = "llvm.load"(%1119) : (!llvm.ptr) -> i32
    %1123 = "llvm.getelementptr"(%1121, %1122) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1124 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1125 = "llvm.getelementptr"(%1123, %1124) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1125) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb203(%1126 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1127 : !llvm.ptr):
    %1128 = "mini.invariant"(%1127) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1129 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb204] : () -> ()
  ^bb205:
    %1130 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%1130, %1129) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb206] : () -> ()
  ^bb204:
    %1131 = "llvm.getelementptr"(%1127) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1132 = "mini.checkflag"(%1131) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1133 = "llvm.load"(%1132) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1133) [^bb205, ^bb205] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb206:
    %1134 = "llvm.extractvalue"(%1126) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1135 = "llvm.load"(%1129) : (!llvm.ptr) -> i32
    %1136 = "llvm.getelementptr"(%1134, %1135) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1137 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1138 = "llvm.getelementptr"(%1136, %1137) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1138) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb207(%1139 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1140 : !llvm.ptr):
    %1141 = "mini.invariant"(%1140) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1142 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb208] : () -> ()
  ^bb209:
    %1143 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%1143, %1142) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb210] : () -> ()
  ^bb211:
    %1144 = "llvm.getelementptr"(%1140) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1145 = "mini.checkflag"(%1144) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1146 = "llvm.load"(%1145) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1146) [^bb209, ^bb209] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb208:
    %1147 = "llvm.getelementptr"(%1140) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1148 = "mini.checkflag"(%1147) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1149 = "llvm.load"(%1148) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1149) [^bb211, ^bb211] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb210:
    %1150 = "llvm.extractvalue"(%1139) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1151 = "llvm.load"(%1142) : (!llvm.ptr) -> i32
    %1152 = "llvm.getelementptr"(%1150, %1151) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1153 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1154 = "llvm.getelementptr"(%1152, %1153) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1154) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb212(%1155 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1156 : !llvm.ptr):
    %1157 = "mini.invariant"(%1156) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1158 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb213] : () -> ()
  ^bb214:
    %1159 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%1159, %1158) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb215] : () -> ()
  ^bb213:
    %1160 = "llvm.getelementptr"(%1156) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1161 = "mini.checkflag"(%1160) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1162 = "llvm.load"(%1161) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1162) [^bb214, ^bb214] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb215:
    %1163 = "llvm.extractvalue"(%1155) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1164 = "llvm.load"(%1158) : (!llvm.ptr) -> i32
    %1165 = "llvm.getelementptr"(%1163, %1164) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1166 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1167 = "llvm.getelementptr"(%1165, %1166) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1167) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_all_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb216(%1168 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1169 : !llvm.ptr):
    %1170 = "mini.invariant"(%1169) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1171 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb217] : () -> ()
  ^bb218:
    %1172 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%1172, %1171) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb219] : () -> ()
  ^bb217:
    %1173 = "llvm.getelementptr"(%1169) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1174 = "mini.checkflag"(%1173) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1175 = "llvm.load"(%1174) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1175) [^bb218, ^bb218] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb219:
    %1176 = "llvm.extractvalue"(%1168) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1177 = "llvm.load"(%1171) : (!llvm.ptr) -> i32
    %1178 = "llvm.getelementptr"(%1176, %1177) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1179 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1180 = "llvm.getelementptr"(%1178, %1179) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1180) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_any_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb220(%1181 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1182 : !llvm.ptr):
    %1183 = "mini.invariant"(%1182) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1184 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb221] : () -> ()
  ^bb222:
    %1185 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%1185, %1184) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb223] : () -> ()
  ^bb221:
    %1186 = "llvm.getelementptr"(%1182) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1187 = "mini.checkflag"(%1186) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1188 = "llvm.load"(%1187) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1188) [^bb222, ^bb222] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb223:
    %1189 = "llvm.extractvalue"(%1181) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1190 = "llvm.load"(%1184) : (!llvm.ptr) -> i32
    %1191 = "llvm.getelementptr"(%1189, %1190) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1192 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1193 = "llvm.getelementptr"(%1191, %1192) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1193) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb224(%1194 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1195 : !llvm.ptr):
    %1196 = "mini.invariant"(%1195) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1197 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb225] : () -> ()
  ^bb226:
    %1198 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%1198, %1197) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb227] : () -> ()
  ^bb225:
    %1199 = "llvm.getelementptr"(%1195) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1200 = "mini.checkflag"(%1199) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1201 = "llvm.load"(%1200) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1201) [^bb226, ^bb226] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb227:
    %1202 = "llvm.extractvalue"(%1194) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1203 = "llvm.load"(%1197) : (!llvm.ptr) -> i32
    %1204 = "llvm.getelementptr"(%1202, %1203) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1205 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1206 = "llvm.getelementptr"(%1204, %1205) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1206) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_filter_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb228(%1207 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1208 : !llvm.ptr):
    %1209 = "mini.invariant"(%1208) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1210 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb229] : () -> ()
  ^bb230:
    %1211 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%1211, %1210) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb231] : () -> ()
  ^bb229:
    %1212 = "llvm.getelementptr"(%1208) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1213 = "mini.checkflag"(%1212) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1214 = "llvm.load"(%1213) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1214) [^bb230, ^bb230] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb231:
    %1215 = "llvm.extractvalue"(%1207) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1216 = "llvm.load"(%1210) : (!llvm.ptr) -> i32
    %1217 = "llvm.getelementptr"(%1215, %1216) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1218 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1219 = "llvm.getelementptr"(%1217, %1218) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1219) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb232(%1220 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1221 : !llvm.ptr):
    %1222 = "mini.invariant"(%1221) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1223 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb233] : () -> ()
  ^bb234:
    %1224 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%1224, %1223) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb235] : () -> ()
  ^bb233:
    %1225 = "llvm.getelementptr"(%1221) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1226 = "mini.checkflag"(%1225) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1227 = "llvm.load"(%1226) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1227) [^bb234, ^bb234] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb235:
    %1228 = "llvm.extractvalue"(%1220) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1229 = "llvm.load"(%1223) : (!llvm.ptr) -> i32
    %1230 = "llvm.getelementptr"(%1228, %1229) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1231 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1232 = "llvm.getelementptr"(%1230, %1231) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1232) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb236(%1233 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1234 : !llvm.ptr):
    %1235 = "mini.invariant"(%1234) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1236 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb237] : () -> ()
  ^bb238:
    %1237 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%1237, %1236) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb239] : () -> ()
  ^bb237:
    %1238 = "llvm.getelementptr"(%1234) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1239 = "mini.checkflag"(%1238) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1240 = "llvm.load"(%1239) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1240) [^bb238, ^bb238] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb239:
    %1241 = "llvm.extractvalue"(%1233) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1242 = "llvm.load"(%1236) : (!llvm.ptr) -> i32
    %1243 = "llvm.getelementptr"(%1241, %1242) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1244 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1245 = "llvm.getelementptr"(%1243, %1244) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1245) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb240(%1246 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1247 : !llvm.ptr):
    %1248 = "mini.invariant"(%1247) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1249 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb241] : () -> ()
  ^bb242:
    %1250 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%1250, %1249) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb243] : () -> ()
  ^bb241:
    %1251 = "llvm.getelementptr"(%1247) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1252 = "mini.checkflag"(%1251) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1253 = "llvm.load"(%1252) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1253) [^bb242, ^bb242] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb243:
    %1254 = "llvm.extractvalue"(%1246) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1255 = "llvm.load"(%1249) : (!llvm.ptr) -> i32
    %1256 = "llvm.getelementptr"(%1254, %1255) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1257 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1258 = "llvm.getelementptr"(%1256, %1257) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1258) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ChainIterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ChainIterator_field_ChainIterator_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainIterator.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainIterator.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator_field_first", "getter_name" = "ChainIterator_getter_first", "setter_name" = "ChainIterator_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainIterator.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorChainIterator.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator_field_second", "getter_name" = "ChainIterator_getter_second", "setter_name" = "ChainIterator_setter_second"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ChainIterator_getter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_i1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ChainIterator_setter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_i1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ChainIterator_field_on_first", "getter_name" = "ChainIterator_getter_on_first", "setter_name" = "ChainIterator_setter_on_first"} : () -> ()
  "mini.func"() ({
  ^bb244(%1259 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1260 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1261 : !llvm.ptr, %1262 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1263 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %1264 = "mini.wrap"(%1259) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>
    %1265 = "hi.cast"(%1264) {"from_typ" = !mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, "to_typ" = !mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, "from_typ_name" = "ChainIterator", "to_typ_name" = "ChainIterator"} : (!mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> !mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>
    %1266 = "mini.wrap"(%1262) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>
    %1267 = "hi.cast"(%1266) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>
    %1268 = "hi.cast"(%1267) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>
    "mini.set_field"(%1265, %1268) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> ()
    %1269 = "mini.wrap"(%1263) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>
    %1270 = "hi.cast"(%1269) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>
    %1271 = "hi.cast"(%1270) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>
    "mini.set_field"(%1265, %1271) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> ()
    %1272 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %1273 = "hi.cast"(%1272) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
    "mini.set_field"(%1265, %1273) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, !mini.ptr<i1>) -> ()
  }) {"func_name" = "ChainIterator_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb245(%1274 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1275 : !llvm.ptr):
    %1276 = "mini.invariant"(%1275) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1277 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb246] : () -> ()
  ^bb247:
    %1278 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%1278, %1277) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb248] : () -> ()
  ^bb249:
    %1279 = "llvm.getelementptr"(%1275) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1280 = "mini.checkflag"(%1279) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1281 = "llvm.load"(%1280) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1281) [^bb247, ^bb247] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb246:
    %1282 = "llvm.getelementptr"(%1275) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1283 = "mini.checkflag"(%1282) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1284 = "llvm.load"(%1283) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1284) [^bb249, ^bb249] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb248:
    %1285 = "llvm.extractvalue"(%1274) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1286 = "llvm.load"(%1277) : (!llvm.ptr) -> i32
    %1287 = "llvm.getelementptr"(%1285, %1286) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1288 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1289 = "llvm.getelementptr"(%1287, %1288) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1289) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterator_B_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb250(%1290 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1291 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1292 : !llvm.ptr):
    %1293 = "mini.wrap"(%1290) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>
    %1294 = "hi.cast"(%1293) {"from_typ" = !mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, "to_typ" = !mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, "from_typ_name" = "ChainIterator", "to_typ_name" = "ChainIterator"} : (!mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> !mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>
    %1295 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %1296 = "mini.get_field"(%1294) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> !mini.ptr<i1>
    %1297 = "mini.unwrap"(%1295) : (!mini.ptr<i1>) -> i1
    %1298 = "mini.unwrap"(%1296) : (!mini.ptr<i1>) -> i1
    %1299 = "mini.comparison"(%1297, %1298) {"op" = "EQ"} : (i1, i1) -> i1
    %1300 = "mini.wrap"(%1299) : (i1) -> !mini.ptr<i1>
    %1301 = "mini.unwrap"(%1300) : (!mini.ptr<i1>) -> i1
    "mini.if"(%1301) ({
      %1302 = "mini.get_field"(%1294) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>
      %1303 = "mini.unwrap"(%1302) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1304 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1305 = "mini.method_call"(%1304, %1303) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %1306 = "hi.cast"(%1305) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>
      %1307 = "hi.cast"(%1306) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      "mini.return"(%1307) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %1308 = "mini.get_field"(%1294) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>
    %1309 = "mini.unwrap"(%1308) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1310 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1311 = "mini.method_call"(%1310, %1309) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    %1312 = "hi.cast"(%1311) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>
    %1313 = "mini.get_type_field"(%1294) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32} : (!mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>) -> !mini.reified_type
    %1314 = "mini.checkflag"(%1312) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>) -> !mini.ptr<i1>
    %1315 = "mini.unwrap"(%1314) : (!mini.ptr<i1>) -> i1
    %1316 = "hi.cast"(%1312) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>
    "mini.if"(%1315) ({
      %1317 = "hi.cast"(%1316) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>, "to_typ" = !mini.type_param<"T", !mini.any, "ChainIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "ChainIterator">
      %1318 = "hi.cast"(%1317) {"from_typ" = !mini.type_param<"T", !mini.any, "ChainIterator">, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!mini.type_param<"T", !mini.any, "ChainIterator">) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      "mini.return"(%1318) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
      %1319 = "hi.cast"(%1317) {"from_typ" = !mini.type_param<"T", !mini.any, "ChainIterator">, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!mini.type_param<"T", !mini.any, "ChainIterator">) -> !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>
      "mini.assign"(%1316, %1319) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.any, "ChainIterator">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %1320 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %1321 = "hi.cast"(%1320) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
    "mini.set_field"(%1294, %1321) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"ChainIterator", [!mini.type_param<"T", !mini.any, "ChainIterator">]>, !mini.ptr<i1>) -> ()
  }) {"func_name" = "ChainIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb251(%1322 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1323 : !llvm.ptr):
    %1324 = "mini.invariant"(%1323) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1325 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb252] : () -> ()
  ^bb252:
    %1326 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%1326, %1325) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb253] : () -> ()
  ^bb253:
    %1327 = "llvm.extractvalue"(%1322) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1328 = "llvm.load"(%1325) : (!llvm.ptr) -> i32
    %1329 = "llvm.getelementptr"(%1327, %1328) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1330 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1331 = "llvm.getelementptr"(%1329, %1330) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1331) : (!llvm.ptr) -> ()
  }) {"func_name" = "ChainIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_InterleaveIterable", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "InterleaveIterable_field_InterleaveIterable_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterable_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaveIterable.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterable_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaveIterable.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterable_field_first", "getter_name" = "InterleaveIterable_getter_first", "setter_name" = "InterleaveIterable_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterable_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaveIterable.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterable_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableInterleaveIterable.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterable_field_second", "getter_name" = "InterleaveIterable_getter_second", "setter_name" = "InterleaveIterable_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb254(%1332 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1333 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1334 : !llvm.ptr, %1335 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1336 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %1337 = "mini.wrap"(%1332) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1338 = "hi.cast"(%1337) {"from_typ" = !mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "to_typ" = !mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "InterleaveIterable"} : (!mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1339 = "mini.wrap"(%1335) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1340 = "hi.cast"(%1339) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1341 = "hi.cast"(%1340) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    "mini.set_field"(%1338, %1341) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> ()
    %1342 = "mini.wrap"(%1336) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1343 = "hi.cast"(%1342) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1344 = "hi.cast"(%1343) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    "mini.set_field"(%1338, %1344) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> ()
  }) {"func_name" = "InterleaveIterable_init_firstIterableT_secondIterableT", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb255(%1345 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1346 : !llvm.ptr):
    %1347 = "mini.invariant"(%1346) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1348 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb256] : () -> ()
  ^bb257:
    %1349 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%1349, %1348) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb258] : () -> ()
  ^bb259:
    %1350 = "llvm.getelementptr"(%1346) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1351 = "mini.checkflag"(%1350) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1352 = "llvm.load"(%1351) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1352) [^bb257, ^bb257] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb256:
    %1353 = "llvm.getelementptr"(%1346) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1354 = "mini.checkflag"(%1353) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1355 = "llvm.load"(%1354) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1355) [^bb259, ^bb259] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb258:
    %1356 = "llvm.extractvalue"(%1345) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1357 = "llvm.load"(%1348) : (!llvm.ptr) -> i32
    %1358 = "llvm.getelementptr"(%1356, %1357) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1359 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1360 = "llvm.getelementptr"(%1358, %1359) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1360) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_init_firstIterableT_secondIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb260(%1361 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1362 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1363 : !llvm.ptr):
    %1364 = "mini.wrap"(%1361) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1365 = "hi.cast"(%1364) {"from_typ" = !mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "to_typ" = !mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "from_typ_name" = "InterleaveIterable", "to_typ_name" = "InterleaveIterable"} : (!mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1366 = "mini.get_field"(%1365) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1367 = "mini.unwrap"(%1366) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1368 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1369 = "mini.method_call"(%1368, %1367) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %1370 = "hi.cast"(%1369) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1371 = "mini.get_field"(%1365) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1372 = "mini.unwrap"(%1371) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1373 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1374 = "mini.method_call"(%1373, %1372) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %1375 = "hi.cast"(%1374) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1376 = "mini.unwrap"(%1370) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1377 = "mini.unwrap"(%1375) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1378 = "mini.get_type_field"(%1365) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.reified_type
    %1379 = "mini.new"(%1378) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1)>, "class_name" = "InterleaveIterator", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1380 = "mini.get_field"(%1365) {"offset" = 1 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1381 = "mini.unwrap"(%1380) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1382 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1383 = "mini.method_call"(%1382, %1381) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %1384 = "hi.cast"(%1383) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1385 = "mini.get_field"(%1365) {"offset" = 2 : i64, "vtable_bytes" = 400 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1386 = "mini.unwrap"(%1385) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1387 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1388 = "mini.method_call"(%1387, %1386) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %1389 = "hi.cast"(%1388) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>
    %1390 = "hi.cast"(%1384) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>
    %1391 = "mini.unwrap"(%1390) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1392 = "hi.cast"(%1389) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>
    %1393 = "mini.unwrap"(%1392) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1394 = "mini.unwrap"(%1379) : (!mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1395 = "mini.get_type_field"(%1365) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.reified_type
    %1396 = "mini.parameterization"(%1395) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorInterleaveIterable.T_subtype_Any", ["InterleaveIterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %1397 = "mini.get_type_field"(%1365) {"offset" = 0 : i64, "vtable_bytes" = 400 : i32} : (!mini.fatptr<"InterleaveIterable", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.reified_type
    %1398 = "mini.parameterization"(%1397) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorInterleaveIterable.T_subtype_Any", ["InterleaveIterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %1399 = "mini.parameterizations_array"(%1396, %1398) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1399, %1394, %1391, %1393) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %1400 = "hi.cast"(%1379) {"from_typ" = !mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.return"(%1400) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "InterleaveIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb261(%1401 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1402 : !llvm.ptr):
    %1403 = "mini.invariant"(%1402) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1404 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb262] : () -> ()
  ^bb262:
    %1405 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%1405, %1404) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb263] : () -> ()
  ^bb263:
    %1406 = "llvm.extractvalue"(%1401) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1407 = "llvm.load"(%1404) : (!llvm.ptr) -> i32
    %1408 = "llvm.getelementptr"(%1406, %1407) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1409 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1410 = "llvm.getelementptr"(%1408, %1409) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1410) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb264(%1411 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1412 : !llvm.ptr):
    %1413 = "mini.invariant"(%1412) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1414 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb265] : () -> ()
  ^bb266:
    %1415 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%1415, %1414) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb267] : () -> ()
  ^bb265:
    %1416 = "llvm.getelementptr"(%1412) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1417 = "mini.checkflag"(%1416) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1418 = "llvm.load"(%1417) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1418) [^bb266, ^bb266] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb267:
    %1419 = "llvm.extractvalue"(%1411) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1420 = "llvm.load"(%1414) : (!llvm.ptr) -> i32
    %1421 = "llvm.getelementptr"(%1419, %1420) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1422 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1423 = "llvm.getelementptr"(%1421, %1422) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1423) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb268(%1424 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1425 : !llvm.ptr):
    %1426 = "mini.invariant"(%1425) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1427 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb269] : () -> ()
  ^bb270:
    %1428 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%1428, %1427) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb271] : () -> ()
  ^bb272:
    %1429 = "llvm.getelementptr"(%1425) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1430 = "mini.checkflag"(%1429) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1431 = "llvm.load"(%1430) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1431) [^bb270, ^bb270] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb269:
    %1432 = "llvm.getelementptr"(%1425) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1433 = "mini.checkflag"(%1432) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1434 = "llvm.load"(%1433) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1434) [^bb272, ^bb272] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb271:
    %1435 = "llvm.extractvalue"(%1424) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1436 = "llvm.load"(%1427) : (!llvm.ptr) -> i32
    %1437 = "llvm.getelementptr"(%1435, %1436) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1438 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1439 = "llvm.getelementptr"(%1437, %1438) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1439) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb273(%1440 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1441 : !llvm.ptr):
    %1442 = "mini.invariant"(%1441) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1443 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb274] : () -> ()
  ^bb275:
    %1444 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%1444, %1443) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb276] : () -> ()
  ^bb274:
    %1445 = "llvm.getelementptr"(%1441) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1446 = "mini.checkflag"(%1445) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1447 = "llvm.load"(%1446) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1447) [^bb275, ^bb275] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb276:
    %1448 = "llvm.extractvalue"(%1440) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1449 = "llvm.load"(%1443) : (!llvm.ptr) -> i32
    %1450 = "llvm.getelementptr"(%1448, %1449) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1451 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1452 = "llvm.getelementptr"(%1450, %1451) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1452) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_all_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb277(%1453 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1454 : !llvm.ptr):
    %1455 = "mini.invariant"(%1454) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1456 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb278] : () -> ()
  ^bb279:
    %1457 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%1457, %1456) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb280] : () -> ()
  ^bb278:
    %1458 = "llvm.getelementptr"(%1454) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1459 = "mini.checkflag"(%1458) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1460 = "llvm.load"(%1459) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1460) [^bb279, ^bb279] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb280:
    %1461 = "llvm.extractvalue"(%1453) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1462 = "llvm.load"(%1456) : (!llvm.ptr) -> i32
    %1463 = "llvm.getelementptr"(%1461, %1462) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1464 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1465 = "llvm.getelementptr"(%1463, %1464) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1465) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_any_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb281(%1466 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1467 : !llvm.ptr):
    %1468 = "mini.invariant"(%1467) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1469 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb282] : () -> ()
  ^bb283:
    %1470 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%1470, %1469) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb284] : () -> ()
  ^bb282:
    %1471 = "llvm.getelementptr"(%1467) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1472 = "mini.checkflag"(%1471) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1473 = "llvm.load"(%1472) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1473) [^bb283, ^bb283] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb284:
    %1474 = "llvm.extractvalue"(%1466) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1475 = "llvm.load"(%1469) : (!llvm.ptr) -> i32
    %1476 = "llvm.getelementptr"(%1474, %1475) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1477 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1478 = "llvm.getelementptr"(%1476, %1477) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1478) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb285(%1479 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1480 : !llvm.ptr):
    %1481 = "mini.invariant"(%1480) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1482 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb286] : () -> ()
  ^bb287:
    %1483 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%1483, %1482) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb288] : () -> ()
  ^bb286:
    %1484 = "llvm.getelementptr"(%1480) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1485 = "mini.checkflag"(%1484) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1486 = "llvm.load"(%1485) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1486) [^bb287, ^bb287] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb288:
    %1487 = "llvm.extractvalue"(%1479) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1488 = "llvm.load"(%1482) : (!llvm.ptr) -> i32
    %1489 = "llvm.getelementptr"(%1487, %1488) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1490 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1491 = "llvm.getelementptr"(%1489, %1490) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1491) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_filter_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb289(%1492 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1493 : !llvm.ptr):
    %1494 = "mini.invariant"(%1493) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1495 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb290] : () -> ()
  ^bb291:
    %1496 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%1496, %1495) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb292] : () -> ()
  ^bb290:
    %1497 = "llvm.getelementptr"(%1493) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1498 = "mini.checkflag"(%1497) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1499 = "llvm.load"(%1498) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1499) [^bb291, ^bb291] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb292:
    %1500 = "llvm.extractvalue"(%1492) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1501 = "llvm.load"(%1495) : (!llvm.ptr) -> i32
    %1502 = "llvm.getelementptr"(%1500, %1501) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1503 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1504 = "llvm.getelementptr"(%1502, %1503) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1504) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb293(%1505 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1506 : !llvm.ptr):
    %1507 = "mini.invariant"(%1506) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1508 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb294] : () -> ()
  ^bb295:
    %1509 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%1509, %1508) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb296] : () -> ()
  ^bb294:
    %1510 = "llvm.getelementptr"(%1506) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1511 = "mini.checkflag"(%1510) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1512 = "llvm.load"(%1511) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1512) [^bb295, ^bb295] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb296:
    %1513 = "llvm.extractvalue"(%1505) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1514 = "llvm.load"(%1508) : (!llvm.ptr) -> i32
    %1515 = "llvm.getelementptr"(%1513, %1514) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1516 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1517 = "llvm.getelementptr"(%1515, %1516) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1517) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb297(%1518 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1519 : !llvm.ptr):
    %1520 = "mini.invariant"(%1519) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1521 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb298] : () -> ()
  ^bb299:
    %1522 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%1522, %1521) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb300] : () -> ()
  ^bb298:
    %1523 = "llvm.getelementptr"(%1519) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1524 = "mini.checkflag"(%1523) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1525 = "llvm.load"(%1524) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1525) [^bb299, ^bb299] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb300:
    %1526 = "llvm.extractvalue"(%1518) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1527 = "llvm.load"(%1521) : (!llvm.ptr) -> i32
    %1528 = "llvm.getelementptr"(%1526, %1527) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1529 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1530 = "llvm.getelementptr"(%1528, %1529) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1530) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb301(%1531 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1532 : !llvm.ptr):
    %1533 = "mini.invariant"(%1532) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1534 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb302] : () -> ()
  ^bb303:
    %1535 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%1535, %1534) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb304] : () -> ()
  ^bb302:
    %1536 = "llvm.getelementptr"(%1532) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1537 = "mini.checkflag"(%1536) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1538 = "llvm.load"(%1537) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1538) [^bb303, ^bb303] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb304:
    %1539 = "llvm.extractvalue"(%1531) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1540 = "llvm.load"(%1534) : (!llvm.ptr) -> i32
    %1541 = "llvm.getelementptr"(%1539, %1540) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<50 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1542 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1543 = "llvm.getelementptr"(%1541, %1542) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1543) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_InterleaveIterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "InterleaveIterator_field_InterleaveIterator_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator_getter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaveIterator.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator_setter_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaveIterator.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator_field_first", "getter_name" = "InterleaveIterator_getter_first", "setter_name" = "InterleaveIterator_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator_getter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaveIterator.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator_setter_second", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorInterleaveIterator.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator_field_second", "getter_name" = "InterleaveIterator_getter_second", "setter_name" = "InterleaveIterator_setter_second"} : () -> ()
  "mini.getter_def"() {"meth_name" = "InterleaveIterator_getter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_i1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "InterleaveIterator_setter_on_first", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_i1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "InterleaveIterator_field_on_first", "getter_name" = "InterleaveIterator_getter_on_first", "setter_name" = "InterleaveIterator_setter_on_first"} : () -> ()
  "mini.func"() ({
  ^bb305(%1544 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1545 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1546 : !llvm.ptr, %1547 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1548 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %1549 = "mini.wrap"(%1544) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>
    %1550 = "hi.cast"(%1549) {"from_typ" = !mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, "to_typ" = !mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "InterleaveIterator"} : (!mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> !mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>
    %1551 = "mini.wrap"(%1547) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>
    %1552 = "hi.cast"(%1551) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>
    %1553 = "hi.cast"(%1552) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>
    "mini.set_field"(%1550, %1553) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> ()
    %1554 = "mini.wrap"(%1548) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>
    %1555 = "hi.cast"(%1554) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>
    %1556 = "hi.cast"(%1555) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>
    "mini.set_field"(%1550, %1556) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> ()
    %1557 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %1558 = "hi.cast"(%1557) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
    "mini.set_field"(%1550, %1558) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, !mini.ptr<i1>) -> ()
  }) {"func_name" = "InterleaveIterator_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb306(%1559 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1560 : !llvm.ptr):
    %1561 = "mini.invariant"(%1560) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1562 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb307] : () -> ()
  ^bb308:
    %1563 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%1563, %1562) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb309] : () -> ()
  ^bb310:
    %1564 = "llvm.getelementptr"(%1560) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1565 = "mini.checkflag"(%1564) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1566 = "llvm.load"(%1565) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1566) [^bb308, ^bb308] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb307:
    %1567 = "llvm.getelementptr"(%1560) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1568 = "mini.checkflag"(%1567) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1569 = "llvm.load"(%1568) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1569) [^bb310, ^bb310] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb309:
    %1570 = "llvm.extractvalue"(%1559) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1571 = "llvm.load"(%1562) : (!llvm.ptr) -> i32
    %1572 = "llvm.getelementptr"(%1570, %1571) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1573 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1574 = "llvm.getelementptr"(%1572, %1573) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1574) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterator_B_init_firstIteratorT_secondIteratorT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb311(%1575 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1576 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1577 : !llvm.ptr):
    %1578 = "mini.wrap"(%1575) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>
    %1579 = "hi.cast"(%1578) {"from_typ" = !mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, "to_typ" = !mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, "from_typ_name" = "InterleaveIterator", "to_typ_name" = "InterleaveIterator"} : (!mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> !mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>
    %1580 = "mini.get_field"(%1579) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> !mini.ptr<i1>
    %1581 = "mini.unwrap"(%1580) : (!mini.ptr<i1>) -> i1
    "mini.if"(%1581) ({
      %1582 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %1583 = "hi.cast"(%1582) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
      "mini.set_field"(%1579, %1583) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, !mini.ptr<i1>) -> ()
      %1584 = "mini.get_field"(%1579) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>
      %1585 = "mini.unwrap"(%1584) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %1586 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %1587 = "mini.method_call"(%1586, %1585) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %1588 = "hi.cast"(%1587) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator">, !mini.nil]>
      %1589 = "hi.cast"(%1588) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      "mini.return"(%1589) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %1590 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %1591 = "hi.cast"(%1590) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
    "mini.set_field"(%1579, %1591) {"offset" = 3 : i64, "vtable_bytes" = 88 : i32, "original_type" = i1} : (!mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>, !mini.ptr<i1>) -> ()
    %1592 = "mini.get_field"(%1579) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!mini.fatptr<"InterleaveIterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>
    %1593 = "mini.unwrap"(%1592) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "InterleaveIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1594 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1595 = "mini.method_call"(%1594, %1593) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    %1596 = "hi.cast"(%1595) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator">, !mini.nil]>
    %1597 = "hi.cast"(%1596) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "InterleaveIterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    "mini.return"(%1597) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
  }) {"func_name" = "InterleaveIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb312(%1598 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1599 : !llvm.ptr):
    %1600 = "mini.invariant"(%1599) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1601 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb313] : () -> ()
  ^bb313:
    %1602 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%1602, %1601) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb314] : () -> ()
  ^bb314:
    %1603 = "llvm.extractvalue"(%1598) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1604 = "llvm.load"(%1601) : (!llvm.ptr) -> i32
    %1605 = "llvm.getelementptr"(%1603, %1604) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1606 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1607 = "llvm.getelementptr"(%1605, %1606) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1607) : (!llvm.ptr) -> ()
  }) {"func_name" = "InterleaveIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ZipIterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ZipIterable_field_ZipIterable_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ZipIterable_field_ZipIterable_1"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ZipIterable_field_ZipIterable_2"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterable_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipIterable.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterable_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipIterable.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterable_field_first", "getter_name" = "ZipIterable_getter_first", "setter_name" = "ZipIterable_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterable_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipIterable.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterable_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableZipIterable.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterable_field_second", "getter_name" = "ZipIterable_getter_second", "setter_name" = "ZipIterable_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb315(%1608 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1609 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1610 : !llvm.ptr, %1611 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1612 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %1613 = "mini.wrap"(%1608) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>
    %1614 = "hi.cast"(%1613) {"from_typ" = !mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>, "to_typ" = !mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable"} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>
    %1615 = "mini.wrap"(%1611) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>
    %1616 = "hi.cast"(%1615) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>
    %1617 = "hi.cast"(%1616) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>
    "mini.set_field"(%1614, %1617) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>, !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>) -> ()
    %1618 = "mini.wrap"(%1612) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>
    %1619 = "hi.cast"(%1618) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>
    %1620 = "hi.cast"(%1619) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>
    "mini.set_field"(%1614, %1620) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>, !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>) -> ()
  }) {"func_name" = "ZipIterable_init_firstIterableT_secondIterableU", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb316(%1621 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1622 : !llvm.ptr):
    %1623 = "mini.invariant"(%1622) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1624 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb317] : () -> ()
  ^bb318:
    %1625 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%1625, %1624) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb319] : () -> ()
  ^bb320:
    %1626 = "llvm.getelementptr"(%1622) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1627 = "mini.checkflag"(%1626) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1628 = "llvm.load"(%1627) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1628) [^bb318, ^bb318] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb317:
    %1629 = "llvm.getelementptr"(%1622) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1630 = "mini.checkflag"(%1629) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1631 = "llvm.load"(%1630) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1631) [^bb320, ^bb320] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb319:
    %1632 = "llvm.extractvalue"(%1621) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1633 = "llvm.load"(%1624) : (!llvm.ptr) -> i32
    %1634 = "llvm.getelementptr"(%1632, %1633) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1635 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1636 = "llvm.getelementptr"(%1634, %1635) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1636) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_init_firstIterableT_secondIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb321(%1637 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1638 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1639 : !llvm.ptr):
    %1640 = "mini.wrap"(%1637) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>
    %1641 = "hi.cast"(%1640) {"from_typ" = !mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>, "to_typ" = !mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>, "from_typ_name" = "ZipIterable", "to_typ_name" = "ZipIterable"} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>
    %1642 = "mini.get_field"(%1641) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>
    %1643 = "mini.unwrap"(%1642) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1644 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1645 = "mini.method_call"(%1644, %1643) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %1646 = "hi.cast"(%1645) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterable">]>
    %1647 = "mini.get_field"(%1641) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>
    %1648 = "mini.unwrap"(%1647) : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1649 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1650 = "mini.method_call"(%1649, %1648) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %1651 = "hi.cast"(%1650) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterable">]>
    %1652 = "mini.unwrap"(%1646) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1653 = "mini.unwrap"(%1651) : (!mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1654 = "mini.get_type_field"(%1641) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.reified_type
    %1655 = "mini.get_type_field"(%1641) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.reified_type
    %1656 = "mini.get_type_field"(%1641) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.reified_type
    %1657 = "mini.get_type_field"(%1641) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.reified_type
    %1658 = "mini.parameterization"(%1656, %1657) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairZipIterable.T_subtype_Any._ZipIterable.U_subtype_Any", ["ZipIterable.T_subtype_Any"], ["ZipIterable.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %1659 = "mini.new"(%1654, %1655, %1658) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ZipIterator", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !mini.reified_type, !llvm.ptr) -> !mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>
    %1660 = "mini.get_field"(%1641) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>
    %1661 = "mini.unwrap"(%1660) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1662 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1663 = "mini.method_call"(%1662, %1661) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %1664 = "hi.cast"(%1663) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterable">]>
    %1665 = "mini.get_field"(%1641) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>
    %1666 = "mini.unwrap"(%1665) : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1667 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1668 = "mini.method_call"(%1667, %1666) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %1669 = "hi.cast"(%1668) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterable">]>
    %1670 = "hi.cast"(%1664) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>
    %1671 = "mini.unwrap"(%1670) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1672 = "hi.cast"(%1669) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>
    %1673 = "mini.unwrap"(%1672) : (!mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1674 = "mini.unwrap"(%1659) : (!mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1675 = "mini.get_type_field"(%1641) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.reified_type
    %1676 = "mini.parameterization"(%1675) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorZipIterable.T_subtype_Any", ["ZipIterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %1677 = "mini.get_type_field"(%1641) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ZipIterable", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.reified_type
    %1678 = "mini.parameterization"(%1677) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorZipIterable.U_subtype_Any", ["ZipIterable.U_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %1679 = "mini.parameterizations_array"(%1676, %1678) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1679, %1674, %1671, %1673) {"offset" = 5 : i32, "vptrs" = [#none, #none], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %1680 = "hi.cast"(%1659) {"from_typ" = !mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "ZipIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterable">, !mini.type_param<"U", !mini.any, "ZipIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.return"(%1680) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "ZipIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb322(%1681 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1682 : !llvm.ptr):
    %1683 = "mini.invariant"(%1682) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1684 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb323] : () -> ()
  ^bb323:
    %1685 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%1685, %1684) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb324] : () -> ()
  ^bb324:
    %1686 = "llvm.extractvalue"(%1681) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1687 = "llvm.load"(%1684) : (!llvm.ptr) -> i32
    %1688 = "llvm.getelementptr"(%1686, %1687) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1689 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1690 = "llvm.getelementptr"(%1688, %1689) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1690) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb325(%1691 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1692 : !llvm.ptr):
    %1693 = "mini.invariant"(%1692) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1694 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb326] : () -> ()
  ^bb327:
    %1695 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%1695, %1694) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb328] : () -> ()
  ^bb326:
    %1696 = "llvm.getelementptr"(%1692) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1697 = "mini.checkflag"(%1696) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1698 = "llvm.load"(%1697) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1698) [^bb327, ^bb327] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb328:
    %1699 = "llvm.extractvalue"(%1691) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1700 = "llvm.load"(%1694) : (!llvm.ptr) -> i32
    %1701 = "llvm.getelementptr"(%1699, %1700) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1702 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1703 = "llvm.getelementptr"(%1701, %1702) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1703) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb329(%1704 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1705 : !llvm.ptr):
    %1706 = "mini.invariant"(%1705) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1707 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb330] : () -> ()
  ^bb331:
    %1708 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%1708, %1707) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb332] : () -> ()
  ^bb333:
    %1709 = "llvm.getelementptr"(%1705) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1710 = "mini.checkflag"(%1709) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1711 = "llvm.load"(%1710) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1711) [^bb331, ^bb331] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb330:
    %1712 = "llvm.getelementptr"(%1705) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1713 = "mini.checkflag"(%1712) {"typ_name" = "Pair"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1714 = "llvm.load"(%1713) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1714) [^bb333, ^bb333] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb332:
    %1715 = "llvm.extractvalue"(%1704) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1716 = "llvm.load"(%1707) : (!llvm.ptr) -> i32
    %1717 = "llvm.getelementptr"(%1715, %1716) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1718 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1719 = "llvm.getelementptr"(%1717, %1718) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1719) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb334(%1720 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1721 : !llvm.ptr):
    %1722 = "mini.invariant"(%1721) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1723 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb335] : () -> ()
  ^bb336:
    %1724 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%1724, %1723) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb337] : () -> ()
  ^bb335:
    %1725 = "llvm.getelementptr"(%1721) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1726 = "mini.checkflag"(%1725) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1727 = "llvm.load"(%1726) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1727) [^bb336, ^bb336] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb337:
    %1728 = "llvm.extractvalue"(%1720) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1729 = "llvm.load"(%1723) : (!llvm.ptr) -> i32
    %1730 = "llvm.getelementptr"(%1728, %1729) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1731 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1732 = "llvm.getelementptr"(%1730, %1731) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1732) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_all_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb338(%1733 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1734 : !llvm.ptr):
    %1735 = "mini.invariant"(%1734) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1736 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb339] : () -> ()
  ^bb340:
    %1737 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%1737, %1736) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb341] : () -> ()
  ^bb339:
    %1738 = "llvm.getelementptr"(%1734) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1739 = "mini.checkflag"(%1738) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1740 = "llvm.load"(%1739) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1740) [^bb340, ^bb340] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb341:
    %1741 = "llvm.extractvalue"(%1733) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1742 = "llvm.load"(%1736) : (!llvm.ptr) -> i32
    %1743 = "llvm.getelementptr"(%1741, %1742) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1744 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1745 = "llvm.getelementptr"(%1743, %1744) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1745) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_any_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb342(%1746 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1747 : !llvm.ptr):
    %1748 = "mini.invariant"(%1747) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1749 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb343] : () -> ()
  ^bb344:
    %1750 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%1750, %1749) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb345] : () -> ()
  ^bb343:
    %1751 = "llvm.getelementptr"(%1747) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1752 = "mini.checkflag"(%1751) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1753 = "llvm.load"(%1752) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1753) [^bb344, ^bb344] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb345:
    %1754 = "llvm.extractvalue"(%1746) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1755 = "llvm.load"(%1749) : (!llvm.ptr) -> i32
    %1756 = "llvm.getelementptr"(%1754, %1755) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1757 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1758 = "llvm.getelementptr"(%1756, %1757) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1758) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb346(%1759 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1760 : !llvm.ptr):
    %1761 = "mini.invariant"(%1760) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1762 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb347] : () -> ()
  ^bb348:
    %1763 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%1763, %1762) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb349] : () -> ()
  ^bb347:
    %1764 = "llvm.getelementptr"(%1760) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1765 = "mini.checkflag"(%1764) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1766 = "llvm.load"(%1765) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1766) [^bb348, ^bb348] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb349:
    %1767 = "llvm.extractvalue"(%1759) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1768 = "llvm.load"(%1762) : (!llvm.ptr) -> i32
    %1769 = "llvm.getelementptr"(%1767, %1768) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1770 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1771 = "llvm.getelementptr"(%1769, %1770) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1771) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_filter_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb350(%1772 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1773 : !llvm.ptr):
    %1774 = "mini.invariant"(%1773) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1775 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb351] : () -> ()
  ^bb352:
    %1776 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%1776, %1775) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb353] : () -> ()
  ^bb351:
    %1777 = "llvm.getelementptr"(%1773) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1778 = "mini.checkflag"(%1777) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1779 = "llvm.load"(%1778) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1779) [^bb352, ^bb352] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb353:
    %1780 = "llvm.extractvalue"(%1772) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1781 = "llvm.load"(%1775) : (!llvm.ptr) -> i32
    %1782 = "llvm.getelementptr"(%1780, %1781) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1783 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1784 = "llvm.getelementptr"(%1782, %1783) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1784) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb354(%1785 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1786 : !llvm.ptr):
    %1787 = "mini.invariant"(%1786) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1788 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb355] : () -> ()
  ^bb356:
    %1789 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%1789, %1788) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb357] : () -> ()
  ^bb355:
    %1790 = "llvm.getelementptr"(%1786) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1791 = "mini.checkflag"(%1790) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1792 = "llvm.load"(%1791) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1792) [^bb356, ^bb356] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb357:
    %1793 = "llvm.extractvalue"(%1785) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1794 = "llvm.load"(%1788) : (!llvm.ptr) -> i32
    %1795 = "llvm.getelementptr"(%1793, %1794) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1796 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1797 = "llvm.getelementptr"(%1795, %1796) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1797) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb358(%1798 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1799 : !llvm.ptr):
    %1800 = "mini.invariant"(%1799) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1801 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb359] : () -> ()
  ^bb360:
    %1802 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%1802, %1801) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb361] : () -> ()
  ^bb359:
    %1803 = "llvm.getelementptr"(%1799) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1804 = "mini.checkflag"(%1803) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1805 = "llvm.load"(%1804) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1805) [^bb360, ^bb360] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb361:
    %1806 = "llvm.extractvalue"(%1798) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1807 = "llvm.load"(%1801) : (!llvm.ptr) -> i32
    %1808 = "llvm.getelementptr"(%1806, %1807) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1809 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1810 = "llvm.getelementptr"(%1808, %1809) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1810) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb362(%1811 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1812 : !llvm.ptr):
    %1813 = "mini.invariant"(%1812) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1814 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb363] : () -> ()
  ^bb364:
    %1815 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%1815, %1814) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb365] : () -> ()
  ^bb363:
    %1816 = "llvm.getelementptr"(%1812) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1817 = "mini.checkflag"(%1816) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1818 = "llvm.load"(%1817) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1818) [^bb364, ^bb364] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb365:
    %1819 = "llvm.extractvalue"(%1811) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1820 = "llvm.load"(%1814) : (!llvm.ptr) -> i32
    %1821 = "llvm.getelementptr"(%1819, %1820) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1822 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1823 = "llvm.getelementptr"(%1821, %1822) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1823) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ZipIterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ZipIterator_field_ZipIterator_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ZipIterator_field_ZipIterator_1"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ZipIterator_field_ZipIterator_2"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterator_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipIterator.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterator_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipIterator.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterator_field_first", "getter_name" = "ZipIterator_getter_first", "setter_name" = "ZipIterator_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ZipIterator_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipIterator.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ZipIterator_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorZipIterator.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ZipIterator_field_second", "getter_name" = "ZipIterator_getter_second", "setter_name" = "ZipIterator_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb366(%1824 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1825 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1826 : !llvm.ptr, %1827 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1828 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %1829 = "mini.wrap"(%1824) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>
    %1830 = "hi.cast"(%1829) {"from_typ" = !mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>, "to_typ" = !mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>, "from_typ_name" = "ZipIterator", "to_typ_name" = "ZipIterator"} : (!mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>
    %1831 = "mini.wrap"(%1827) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>
    %1832 = "hi.cast"(%1831) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>
    %1833 = "hi.cast"(%1832) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>
    "mini.set_field"(%1830, %1833) {"offset" = 3 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>, !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>) -> ()
    %1834 = "mini.wrap"(%1828) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>
    %1835 = "hi.cast"(%1834) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>
    %1836 = "hi.cast"(%1835) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>
    "mini.set_field"(%1830, %1836) {"offset" = 4 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>, !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>) -> ()
  }) {"func_name" = "ZipIterator_init_firstIteratorT_secondIteratorU", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb367(%1837 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1838 : !llvm.ptr):
    %1839 = "mini.invariant"(%1838) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1840 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb368] : () -> ()
  ^bb369:
    %1841 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%1841, %1840) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb370] : () -> ()
  ^bb371:
    %1842 = "llvm.getelementptr"(%1838) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1843 = "mini.checkflag"(%1842) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1844 = "llvm.load"(%1843) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1844) [^bb369, ^bb369] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb368:
    %1845 = "llvm.getelementptr"(%1838) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1846 = "mini.checkflag"(%1845) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1847 = "llvm.load"(%1846) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1847) [^bb371, ^bb371] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb370:
    %1848 = "llvm.extractvalue"(%1837) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1849 = "llvm.load"(%1840) : (!llvm.ptr) -> i32
    %1850 = "llvm.getelementptr"(%1848, %1849) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1851 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1852 = "llvm.getelementptr"(%1850, %1851) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1852) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterator_B_init_firstIteratorT_secondIteratorU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb372(%1853 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1854 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1855 : !llvm.ptr):
    %1856 = "mini.wrap"(%1853) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>
    %1857 = "hi.cast"(%1856) {"from_typ" = !mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>, "to_typ" = !mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>, "from_typ_name" = "ZipIterator", "to_typ_name" = "ZipIterator"} : (!mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>
    %1858 = "mini.get_field"(%1857) {"offset" = 3 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>
    %1859 = "mini.unwrap"(%1858) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1860 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1861 = "mini.method_call"(%1860, %1859) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    %1862 = "hi.cast"(%1861) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.nil]>
    %1863 = "mini.get_field"(%1857) {"offset" = 4 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>
    %1864 = "mini.unwrap"(%1863) : (!mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1865 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1866 = "mini.method_call"(%1865, %1864) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    %1867 = "hi.cast"(%1866) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator">, !mini.nil]>
    %1868 = "mini.get_type_field"(%1857) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !mini.reified_type
    %1869 = "mini.checkflag"(%1862) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.nil]>) -> !mini.ptr<i1>
    %1870 = "mini.unwrap"(%1869) : (!mini.ptr<i1>) -> i1
    %1871 = "hi.cast"(%1862) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.nil]>
    "mini.if"(%1870) ({
      %1872 = "hi.cast"(%1871) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.nil]>, "to_typ" = !mini.type_param<"T", !mini.any, "ZipIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "ZipIterator">
      %1873 = "mini.get_type_field"(%1857) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !mini.reified_type
      %1874 = "mini.checkflag"(%1867) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator">, !mini.nil]>) -> !mini.ptr<i1>
      %1875 = "mini.unwrap"(%1874) : (!mini.ptr<i1>) -> i1
      %1876 = "hi.cast"(%1867) {"from_typ" = !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator">, !mini.nil]>
      "mini.if"(%1875) ({
        %1877 = "hi.cast"(%1876) {"from_typ" = !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator">, !mini.nil]>, "to_typ" = !mini.type_param<"U", !mini.any, "ZipIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator">, !mini.nil]>) -> !mini.type_param<"U", !mini.any, "ZipIterator">
        %1878 = "mini.unwrap"(%1872) : (!mini.type_param<"T", !mini.any, "ZipIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1879 = "mini.unwrap"(%1877) : (!mini.type_param<"U", !mini.any, "ZipIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1880 = "mini.get_type_field"(%1857) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !mini.reified_type
        %1881 = "mini.get_type_field"(%1857) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !mini.reified_type
        %1882 = "mini.new"(%1880, %1881) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !mini.reified_type) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>
        %1883 = "hi.cast"(%1872) {"from_typ" = !mini.type_param<"T", !mini.any, "ZipIterator">, "to_typ" = !mini.type_param<"T", !mini.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "ZipIterator">) -> !mini.type_param<"T", !mini.any, "Pair">
        %1884 = "mini.unwrap"(%1883) : (!mini.type_param<"T", !mini.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1885 = "hi.cast"(%1877) {"from_typ" = !mini.type_param<"U", !mini.any, "ZipIterator">, "to_typ" = !mini.type_param<"U", !mini.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "ZipIterator">) -> !mini.type_param<"U", !mini.any, "Pair">
        %1886 = "mini.unwrap"(%1885) : (!mini.type_param<"U", !mini.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %1887 = "mini.unwrap"(%1882) : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %1888 = "mini.get_type_field"(%1857) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !mini.reified_type
        %1889 = "mini.get_type_field"(%1857) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32} : (!mini.fatptr<"ZipIterator", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !mini.reified_type
        %1890 = "mini.parameterizations_array"(%1888, %1889) : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
        "mini.method_call"(%1890, %1887, %1884, %1886) {"offset" = 4 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %1891 = "hi.cast"(%1882) {"from_typ" = !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.type_param<"U", !mini.any, "ZipIterator">]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
        "mini.return"(%1891) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
        %1892 = "hi.cast"(%1877) {"from_typ" = !mini.type_param<"U", !mini.any, "ZipIterator">, "to_typ" = !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator">, !mini.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!mini.type_param<"U", !mini.any, "ZipIterator">) -> !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator">, !mini.nil]>
        "mini.assign"(%1876, %1892) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator">, !mini.nil]>, !mini.union<[!mini.type_param<"U", !mini.any, "ZipIterator">, !mini.nil]>) -> ()
      }) : (i1) -> ()
      %1893 = "hi.cast"(%1872) {"from_typ" = !mini.type_param<"T", !mini.any, "ZipIterator">, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!mini.type_param<"T", !mini.any, "ZipIterator">) -> !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.nil]>
      "mini.assign"(%1871, %1893) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.any, "ZipIterator">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %1894 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %1895 = "hi.cast"(%1894) {"from_typ" = !mini.nil, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    "mini.return"(%1895) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
  }) {"func_name" = "ZipIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb373(%1896 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1897 : !llvm.ptr):
    %1898 = "mini.invariant"(%1897) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1899 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb374] : () -> ()
  ^bb374:
    %1900 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%1900, %1899) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb375] : () -> ()
  ^bb375:
    %1901 = "llvm.extractvalue"(%1896) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1902 = "llvm.load"(%1899) : (!llvm.ptr) -> i32
    %1903 = "llvm.getelementptr"(%1901, %1902) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1904 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1905 = "llvm.getelementptr"(%1903, %1904) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1905) : (!llvm.ptr) -> ()
  }) {"func_name" = "ZipIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ProductIterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ProductIterable_field_ProductIterable_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ProductIterable_field_ProductIterable_1"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ProductIterable_field_ProductIterable_2"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterable_getter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterable.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterable_setter_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterable.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterable_field_first", "getter_name" = "ProductIterable_getter_first", "setter_name" = "ProductIterable_setter_first"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterable_getter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterable.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterable_setter_second", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterable.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterable_field_second", "getter_name" = "ProductIterable_getter_second", "setter_name" = "ProductIterable_setter_second"} : () -> ()
  "mini.func"() ({
  ^bb376(%1906 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1907 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1908 : !llvm.ptr, %1909 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1910 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %1911 = "mini.wrap"(%1906) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>
    %1912 = "hi.cast"(%1911) {"from_typ" = !mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>, "to_typ" = !mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable"} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>
    %1913 = "mini.wrap"(%1909) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>
    %1914 = "hi.cast"(%1913) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>
    %1915 = "hi.cast"(%1914) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>
    "mini.set_field"(%1912, %1915) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>, !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>) -> ()
    %1916 = "mini.wrap"(%1910) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>
    %1917 = "hi.cast"(%1916) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>
    %1918 = "hi.cast"(%1917) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>
    "mini.set_field"(%1912, %1918) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>, !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>) -> ()
  }) {"func_name" = "ProductIterable_init_firstIterableT_secondIterableU", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb377(%1919 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1920 : !llvm.ptr):
    %1921 = "mini.invariant"(%1920) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1922 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb378] : () -> ()
  ^bb379:
    %1923 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%1923, %1922) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb380] : () -> ()
  ^bb381:
    %1924 = "llvm.getelementptr"(%1920) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1925 = "mini.checkflag"(%1924) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1926 = "llvm.load"(%1925) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1926) [^bb379, ^bb379] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb378:
    %1927 = "llvm.getelementptr"(%1920) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1928 = "mini.checkflag"(%1927) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1929 = "llvm.load"(%1928) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1929) [^bb381, ^bb381] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb380:
    %1930 = "llvm.extractvalue"(%1919) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1931 = "llvm.load"(%1922) : (!llvm.ptr) -> i32
    %1932 = "llvm.getelementptr"(%1930, %1931) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1933 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1934 = "llvm.getelementptr"(%1932, %1933) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1934) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_init_firstIterableT_secondIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb382(%1935 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1936 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1937 : !llvm.ptr):
    %1938 = "mini.wrap"(%1935) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>
    %1939 = "hi.cast"(%1938) {"from_typ" = !mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>, "to_typ" = !mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>, "from_typ_name" = "ProductIterable", "to_typ_name" = "ProductIterable"} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>
    %1940 = "mini.get_field"(%1939) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>
    %1941 = "mini.unwrap"(%1940) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1942 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1943 = "mini.method_call"(%1942, %1941) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %1944 = "hi.cast"(%1943) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterable">]>
    %1945 = "mini.get_field"(%1939) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>
    %1946 = "mini.unwrap"(%1944) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1947 = "mini.unwrap"(%1945) : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1948 = "mini.get_type_field"(%1939) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.reified_type
    %1949 = "mini.get_type_field"(%1939) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.reified_type
    %1950 = "mini.get_type_field"(%1939) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.reified_type
    %1951 = "mini.get_type_field"(%1939) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.reified_type
    %1952 = "mini.parameterization"(%1950, %1951) {"id_hierarchy" = ["Pair", [0 : i32], [1 : i32]], "name_hierarchy" = ["PairProductIterable.T_subtype_Any._ProductIterable.U_subtype_Any", ["ProductIterable.T_subtype_Any"], ["ProductIterable.U_subtype_Any"]]} : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
    %1953 = "mini.new"(%1948, %1949, %1952) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ProductIterator", "num_data_fields" = 4 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !mini.reified_type, !llvm.ptr) -> !mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>
    %1954 = "mini.get_field"(%1939) {"offset" = 3 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>
    %1955 = "mini.unwrap"(%1954) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1956 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %1957 = "mini.method_call"(%1956, %1955) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %1958 = "hi.cast"(%1957) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterable">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterable">]>
    %1959 = "mini.get_field"(%1939) {"offset" = 4 : i64, "vtable_bytes" = 416 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>
    %1960 = "hi.cast"(%1958) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>
    %1961 = "mini.unwrap"(%1960) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1962 = "hi.cast"(%1959) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>
    %1963 = "mini.unwrap"(%1962) : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1964 = "mini.unwrap"(%1953) : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %1965 = "mini.get_type_field"(%1939) {"offset" = 0 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.reified_type
    %1966 = "mini.parameterization"(%1965) {"id_hierarchy" = ["Iterator", [0 : i32]], "name_hierarchy" = ["IteratorProductIterable.T_subtype_Any", ["ProductIterable.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %1967 = "mini.get_type_field"(%1939) {"offset" = 1 : i64, "vtable_bytes" = 416 : i32} : (!mini.fatptr<"ProductIterable", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.reified_type
    %1968 = "mini.parameterization"(%1967) {"id_hierarchy" = ["Iterable", [0 : i32]], "name_hierarchy" = ["IterableProductIterable.U_subtype_Any", ["ProductIterable.U_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %1969 = "mini.parameterizations_array"(%1966, %1968) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%1969, %1964, %1961, %1963) {"offset" = 7 : i32, "vptrs" = [#none, #none], "vtable_size" = 14 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %1970 = "hi.cast"(%1953) {"from_typ" = !mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "ProductIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterable">, !mini.type_param<"U", !mini.any, "ProductIterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.return"(%1970) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "ProductIterable_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb383(%1971 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1972 : !llvm.ptr):
    %1973 = "mini.invariant"(%1972) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1974 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb384] : () -> ()
  ^bb384:
    %1975 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%1975, %1974) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb385] : () -> ()
  ^bb385:
    %1976 = "llvm.extractvalue"(%1971) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1977 = "llvm.load"(%1974) : (!llvm.ptr) -> i32
    %1978 = "llvm.getelementptr"(%1976, %1977) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1979 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1980 = "llvm.getelementptr"(%1978, %1979) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1980) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb386(%1981 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1982 : !llvm.ptr):
    %1983 = "mini.invariant"(%1982) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1984 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb387] : () -> ()
  ^bb388:
    %1985 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%1985, %1984) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb389] : () -> ()
  ^bb387:
    %1986 = "llvm.getelementptr"(%1982) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %1987 = "mini.checkflag"(%1986) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %1988 = "llvm.load"(%1987) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%1988) [^bb388, ^bb388] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb389:
    %1989 = "llvm.extractvalue"(%1981) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %1990 = "llvm.load"(%1984) : (!llvm.ptr) -> i32
    %1991 = "llvm.getelementptr"(%1989, %1990) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %1992 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %1993 = "llvm.getelementptr"(%1991, %1992) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%1993) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb390(%1994 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %1995 : !llvm.ptr):
    %1996 = "mini.invariant"(%1995) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %1997 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb391] : () -> ()
  ^bb392:
    %1998 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%1998, %1997) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb393] : () -> ()
  ^bb394:
    %1999 = "llvm.getelementptr"(%1995) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2000 = "mini.checkflag"(%1999) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2001 = "llvm.load"(%2000) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2001) [^bb392, ^bb392] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb391:
    %2002 = "llvm.getelementptr"(%1995) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2003 = "mini.checkflag"(%2002) {"typ_name" = "Pair"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2004 = "llvm.load"(%2003) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2004) [^bb394, ^bb394] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb393:
    %2005 = "llvm.extractvalue"(%1994) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2006 = "llvm.load"(%1997) : (!llvm.ptr) -> i32
    %2007 = "llvm.getelementptr"(%2005, %2006) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2008 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2009 = "llvm.getelementptr"(%2007, %2008) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2009) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb395(%2010 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2011 : !llvm.ptr):
    %2012 = "mini.invariant"(%2011) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2013 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb396] : () -> ()
  ^bb397:
    %2014 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%2014, %2013) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb398] : () -> ()
  ^bb396:
    %2015 = "llvm.getelementptr"(%2011) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2016 = "mini.checkflag"(%2015) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2017 = "llvm.load"(%2016) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2017) [^bb397, ^bb397] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb398:
    %2018 = "llvm.extractvalue"(%2010) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2019 = "llvm.load"(%2013) : (!llvm.ptr) -> i32
    %2020 = "llvm.getelementptr"(%2018, %2019) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2021 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2022 = "llvm.getelementptr"(%2020, %2021) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2022) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_all_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb399(%2023 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2024 : !llvm.ptr):
    %2025 = "mini.invariant"(%2024) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2026 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb400] : () -> ()
  ^bb401:
    %2027 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%2027, %2026) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb402] : () -> ()
  ^bb400:
    %2028 = "llvm.getelementptr"(%2024) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2029 = "mini.checkflag"(%2028) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2030 = "llvm.load"(%2029) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2030) [^bb401, ^bb401] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb402:
    %2031 = "llvm.extractvalue"(%2023) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2032 = "llvm.load"(%2026) : (!llvm.ptr) -> i32
    %2033 = "llvm.getelementptr"(%2031, %2032) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2034 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2035 = "llvm.getelementptr"(%2033, %2034) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2035) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_any_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb403(%2036 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2037 : !llvm.ptr):
    %2038 = "mini.invariant"(%2037) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2039 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb404] : () -> ()
  ^bb405:
    %2040 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%2040, %2039) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb406] : () -> ()
  ^bb404:
    %2041 = "llvm.getelementptr"(%2037) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2042 = "mini.checkflag"(%2041) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2043 = "llvm.load"(%2042) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2043) [^bb405, ^bb405] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb406:
    %2044 = "llvm.extractvalue"(%2036) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2045 = "llvm.load"(%2039) : (!llvm.ptr) -> i32
    %2046 = "llvm.getelementptr"(%2044, %2045) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2047 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2048 = "llvm.getelementptr"(%2046, %2047) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2048) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb407(%2049 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2050 : !llvm.ptr):
    %2051 = "mini.invariant"(%2050) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2052 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb408] : () -> ()
  ^bb409:
    %2053 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%2053, %2052) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb410] : () -> ()
  ^bb408:
    %2054 = "llvm.getelementptr"(%2050) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2055 = "mini.checkflag"(%2054) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2056 = "llvm.load"(%2055) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2056) [^bb409, ^bb409] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb410:
    %2057 = "llvm.extractvalue"(%2049) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2058 = "llvm.load"(%2052) : (!llvm.ptr) -> i32
    %2059 = "llvm.getelementptr"(%2057, %2058) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2060 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2061 = "llvm.getelementptr"(%2059, %2060) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2061) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_filter_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb411(%2062 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2063 : !llvm.ptr):
    %2064 = "mini.invariant"(%2063) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2065 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb412] : () -> ()
  ^bb413:
    %2066 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%2066, %2065) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb414] : () -> ()
  ^bb412:
    %2067 = "llvm.getelementptr"(%2063) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2068 = "mini.checkflag"(%2067) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2069 = "llvm.load"(%2068) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2069) [^bb413, ^bb413] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb414:
    %2070 = "llvm.extractvalue"(%2062) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2071 = "llvm.load"(%2065) : (!llvm.ptr) -> i32
    %2072 = "llvm.getelementptr"(%2070, %2071) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2073 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2074 = "llvm.getelementptr"(%2072, %2073) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2074) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb415(%2075 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2076 : !llvm.ptr):
    %2077 = "mini.invariant"(%2076) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2078 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb416] : () -> ()
  ^bb417:
    %2079 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%2079, %2078) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb418] : () -> ()
  ^bb416:
    %2080 = "llvm.getelementptr"(%2076) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2081 = "mini.checkflag"(%2080) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2082 = "llvm.load"(%2081) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2082) [^bb417, ^bb417] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb418:
    %2083 = "llvm.extractvalue"(%2075) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2084 = "llvm.load"(%2078) : (!llvm.ptr) -> i32
    %2085 = "llvm.getelementptr"(%2083, %2084) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2086 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2087 = "llvm.getelementptr"(%2085, %2086) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2087) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb419(%2088 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2089 : !llvm.ptr):
    %2090 = "mini.invariant"(%2089) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2091 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb420] : () -> ()
  ^bb421:
    %2092 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%2092, %2091) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb422] : () -> ()
  ^bb420:
    %2093 = "llvm.getelementptr"(%2089) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2094 = "mini.checkflag"(%2093) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2095 = "llvm.load"(%2094) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2095) [^bb421, ^bb421] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb422:
    %2096 = "llvm.extractvalue"(%2088) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2097 = "llvm.load"(%2091) : (!llvm.ptr) -> i32
    %2098 = "llvm.getelementptr"(%2096, %2097) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2099 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2100 = "llvm.getelementptr"(%2098, %2099) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2100) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb423(%2101 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2102 : !llvm.ptr):
    %2103 = "mini.invariant"(%2102) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2104 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb424] : () -> ()
  ^bb425:
    %2105 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%2105, %2104) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb426] : () -> ()
  ^bb424:
    %2106 = "llvm.getelementptr"(%2102) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2107 = "mini.checkflag"(%2106) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2108 = "llvm.load"(%2107) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2108) [^bb425, ^bb425] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb426:
    %2109 = "llvm.extractvalue"(%2101) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2110 = "llvm.load"(%2104) : (!llvm.ptr) -> i32
    %2111 = "llvm.getelementptr"(%2109, %2110) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<52 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2112 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2113 = "llvm.getelementptr"(%2111, %2112) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2113) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterable_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ProductIterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ProductIterator_field_ProductIterator_0"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "ProductIterator_field_ProductIterator_1"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "ProductIterator_field_ProductIterator_2"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator_getter_first_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductIterator.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator_setter_first_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 3 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductIterator.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator_field_first_iterator", "getter_name" = "ProductIterator_getter_first_iterator", "setter_name" = "ProductIterator_setter_first_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator_getter_second_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductIterator.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator_setter_second_iterator", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 4 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterator", "parameterization" = "_parameterization_IteratorProductIterator.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator_field_second_iterator", "getter_name" = "ProductIterator_getter_second_iterator", "setter_name" = "ProductIterator_setter_second_iterator"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator_getter_second_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 5 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterator.U_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator_setter_second_iterable", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 5 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Iterable", "parameterization" = "_parameterization_IterableProductIterator.U_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator_field_second_iterable", "getter_name" = "ProductIterator_getter_second_iterable", "setter_name" = "ProductIterator_setter_second_iterable"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ProductIterator_getter_current_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 6 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_ProductIterator.T_subtype_Any_or_Nil"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ProductIterator_setter_current_first", "types" = [!llvm.ptr, !llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 6 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_ProductIterator.T_subtype_Any_or_Nil"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ProductIterator_field_current_first", "getter_name" = "ProductIterator_getter_current_first", "setter_name" = "ProductIterator_setter_current_first"} : () -> ()
  "mini.func"() ({
  ^bb427(%2114 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2115 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2116 : !llvm.ptr, %2117 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2118 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2119 = "mini.wrap"(%2114) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>
    %2120 = "hi.cast"(%2119) {"from_typ" = !mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>, "to_typ" = !mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>, "from_typ_name" = "ProductIterator", "to_typ_name" = "ProductIterator"} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>
    %2121 = "mini.wrap"(%2117) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>
    %2122 = "hi.cast"(%2121) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>
    %2123 = "hi.cast"(%2122) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>
    "mini.set_field"(%2120, %2123) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>, !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>) -> ()
    %2124 = "mini.wrap"(%2118) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>
    %2125 = "hi.cast"(%2124) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>
    %2126 = "hi.cast"(%2125) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>
    "mini.set_field"(%2120, %2126) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>, !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>) -> ()
    %2127 = "mini.get_field"(%2120) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>
    %2128 = "mini.unwrap"(%2127) : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2129 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2130 = "mini.method_call"(%2129, %2128) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %2131 = "hi.cast"(%2130) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>
    %2132 = "hi.cast"(%2131) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>
    "mini.set_field"(%2120, %2132) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>, !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>) -> ()
    %2133 = "mini.get_field"(%2120) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>
    %2134 = "mini.unwrap"(%2133) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2135 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2136 = "mini.method_call"(%2135, %2134) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    %2137 = "hi.cast"(%2136) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>
    %2138 = "hi.cast"(%2137) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>
    "mini.set_field"(%2120, %2138) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>, !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>) -> ()
  }) {"func_name" = "ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb428(%2139 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2140 : !llvm.ptr):
    %2141 = "mini.invariant"(%2140) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2142 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb429] : () -> ()
  ^bb430:
    %2143 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%2143, %2142) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb431] : () -> ()
  ^bb432:
    %2144 = "llvm.getelementptr"(%2140) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2145 = "mini.checkflag"(%2144) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2146 = "llvm.load"(%2145) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2146) [^bb430, ^bb430] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb429:
    %2147 = "llvm.getelementptr"(%2140) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2148 = "mini.checkflag"(%2147) {"typ_name" = "Iterator"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2149 = "llvm.load"(%2148) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2149) [^bb432, ^bb432] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb431:
    %2150 = "llvm.extractvalue"(%2139) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2151 = "llvm.load"(%2142) : (!llvm.ptr) -> i32
    %2152 = "llvm.getelementptr"(%2150, %2151) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2153 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2154 = "llvm.getelementptr"(%2152, %2153) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2154) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb433(%2155 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2156 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2157 : !llvm.ptr):
    %2158 = "mini.wrap"(%2155) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>
    %2159 = "hi.cast"(%2158) {"from_typ" = !mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>, "to_typ" = !mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>, "from_typ_name" = "ProductIterator", "to_typ_name" = "ProductIterator"} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>
    %2160 = "mini.get_field"(%2159) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>
    %2161 = "hi.cast"(%2160) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>
    "mini.while"() ({
      %2162 = "mini.get_type_field"(%2159) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.reified_type
      %2163 = "mini.checkflag"(%2161) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>) -> !mini.ptr<i1>
      %2164 = "mini.unwrap"(%2163) : (!mini.ptr<i1>) -> i1
    }, {
      %2165 = "hi.cast"(%2161) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>, "to_typ" = !mini.type_param<"T", !mini.any, "ProductIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "ProductIterator">
      %2166 = "mini.get_field"(%2159) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>
      %2167 = "mini.unwrap"(%2166) : (!mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2168 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %2169 = "mini.method_call"(%2168, %2167) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %2170 = "hi.cast"(%2169) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator">, !mini.nil]>
      %2171 = "mini.get_type_field"(%2159) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.reified_type
      %2172 = "mini.checkflag"(%2170) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator">, !mini.nil]>) -> !mini.ptr<i1>
      %2173 = "mini.unwrap"(%2172) : (!mini.ptr<i1>) -> i1
      %2174 = "hi.cast"(%2170) {"from_typ" = !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator">, !mini.nil]>
      "mini.if"(%2173) ({
        %2175 = "hi.cast"(%2174) {"from_typ" = !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator">, !mini.nil]>, "to_typ" = !mini.type_param<"U", !mini.any, "ProductIterator">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator">, !mini.nil]>) -> !mini.type_param<"U", !mini.any, "ProductIterator">
        %2176 = "mini.unwrap"(%2165) : (!mini.type_param<"T", !mini.any, "ProductIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
        %2177 = "mini.unwrap"(%2175) : (!mini.type_param<"U", !mini.any, "ProductIterator">) -> !llvm.struct<(!llvm.ptr, i160)>
        %2178 = "mini.get_type_field"(%2159) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.reified_type
        %2179 = "mini.get_type_field"(%2159) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.reified_type
        %2180 = "mini.new"(%2178, %2179) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Pair", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type, !mini.reified_type) -> !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>
        %2181 = "hi.cast"(%2165) {"from_typ" = !mini.type_param<"T", !mini.any, "ProductIterator">, "to_typ" = !mini.type_param<"T", !mini.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "ProductIterator">) -> !mini.type_param<"T", !mini.any, "Pair">
        %2182 = "mini.unwrap"(%2181) : (!mini.type_param<"T", !mini.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %2183 = "hi.cast"(%2175) {"from_typ" = !mini.type_param<"U", !mini.any, "ProductIterator">, "to_typ" = !mini.type_param<"U", !mini.any, "Pair">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"U", !mini.any, "ProductIterator">) -> !mini.type_param<"U", !mini.any, "Pair">
        %2184 = "mini.unwrap"(%2183) : (!mini.type_param<"U", !mini.any, "Pair">) -> !llvm.struct<(!llvm.ptr, i160)>
        %2185 = "mini.unwrap"(%2180) : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %2186 = "mini.get_type_field"(%2159) {"offset" = 0 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.reified_type
        %2187 = "mini.get_type_field"(%2159) {"offset" = 1 : i64, "vtable_bytes" = 112 : i32} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.reified_type
        %2188 = "mini.parameterizations_array"(%2186, %2187) : (!mini.reified_type, !mini.reified_type) -> !llvm.ptr
        "mini.method_call"(%2188, %2185, %2182, %2184) {"offset" = 4 : i32, "vptrs" = ["any_typ", "any_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
        %2189 = "hi.cast"(%2180) {"from_typ" = !mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "Pair", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Pair", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
        "mini.return"(%2189) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
        %2190 = "hi.cast"(%2175) {"from_typ" = !mini.type_param<"U", !mini.any, "ProductIterator">, "to_typ" = !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator">, !mini.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!mini.type_param<"U", !mini.any, "ProductIterator">) -> !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator">, !mini.nil]>
        "mini.assign"(%2174, %2190) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator">, !mini.nil]>, !mini.union<[!mini.type_param<"U", !mini.any, "ProductIterator">, !mini.nil]>) -> ()
      }) : (i1) -> ()
      %2191 = "mini.get_field"(%2159) {"offset" = 3 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterator"} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>
      %2192 = "mini.unwrap"(%2191) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2193 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %2194 = "mini.method_call"(%2193, %2192) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %2195 = "hi.cast"(%2194) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>
      %2196 = "hi.cast"(%2195) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>
      "mini.set_field"(%2159, %2196) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>, !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>) -> ()
      %2197 = "mini.get_field"(%2159) {"offset" = 5 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Iterable"} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>
      %2198 = "mini.unwrap"(%2197) : (!mini.fatptr<"Iterable", [!mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2199 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %2200 = "mini.method_call"(%2199, %2198) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
      %2201 = "hi.cast"(%2200) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>
      %2202 = "hi.cast"(%2201) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>
      "mini.set_field"(%2159, %2202) {"offset" = 4 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>, !mini.fatptr<"Iterator", [!mini.type_param<"U", !mini.any, "ProductIterator">]>) -> ()
      %2203 = "mini.get_field"(%2159) {"offset" = 6 : i64, "vtable_bytes" = 112 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ProductIterator", [!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.type_param<"U", !mini.any, "ProductIterator">]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>
      %2204 = "hi.cast"(%2203) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>
      "mini.assign"(%2161, %2204) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.any, "ProductIterator">, !mini.nil]>) -> ()
    }) : () -> ()
    %2205 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %2206 = "hi.cast"(%2205) {"from_typ" = !mini.nil, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    "mini.return"(%2206) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
  }) {"func_name" = "ProductIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb434(%2207 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2208 : !llvm.ptr):
    %2209 = "mini.invariant"(%2208) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2210 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb435] : () -> ()
  ^bb435:
    %2211 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%2211, %2210) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb436] : () -> ()
  ^bb436:
    %2212 = "llvm.extractvalue"(%2207) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2213 = "llvm.load"(%2210) : (!llvm.ptr) -> i32
    %2214 = "llvm.getelementptr"(%2212, %2213) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<14 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2215 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2216 = "llvm.getelementptr"(%2214, %2215) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2216) : (!llvm.ptr) -> ()
  }) {"func_name" = "ProductIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Representable", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb437(%2217 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2218 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2219 : !llvm.ptr):
    %2220 = "mini.wrap"(%2217) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Representable">
    %2221 = "hi.cast"(%2220) {"from_typ" = !mini.fatptr<"Representable">, "to_typ" = !mini.fatptr<"Representable">, "from_typ_name" = "Representable", "to_typ_name" = "Representable"} : (!mini.fatptr<"Representable">) -> !mini.fatptr<"Representable">
    %2222 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2223 = "mini.create_buffer"(%2222) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %2224 = "hi.cast"(%2223) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %2225 = "mini.refer"(%2224) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %2226 = "mini.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "Object"} : () -> !llvm.ptr
    %2227 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%2225, %2227, %2226) {"typ" = !llvm.array<6 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %2228 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2229 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2230 = "mini.unwrap"(%2225) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %2231 = "mini.unwrap"(%2228) : (!mini.ptr<i32>) -> i32
    %2232 = "mini.unwrap"(%2229) : (!mini.ptr<i32>) -> i32
    %2233 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %2234 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2235 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2236 = "hi.cast"(%2225) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %2237 = "mini.unwrap"(%2236) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %2238 = "hi.cast"(%2234) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %2239 = "mini.unwrap"(%2238) : (!mini.ptr<i32>) -> i32
    %2240 = "hi.cast"(%2235) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %2241 = "mini.unwrap"(%2240) : (!mini.ptr<i32>) -> i32
    %2242 = "mini.unwrap"(%2233) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2243 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %2244 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %2245 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %2246 = "mini.parameterizations_array"(%2243, %2244, %2245) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2246, %2242, %2237, %2239, %2241) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %2247 = "hi.cast"(%2233) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%2247) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "Representable_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb438(%2248 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2249 : !llvm.ptr):
    %2250 = "mini.invariant"(%2249) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2251 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb439] : () -> ()
  ^bb439:
    %2252 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%2252, %2251) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb440] : () -> ()
  ^bb440:
    %2253 = "llvm.extractvalue"(%2248) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2254 = "llvm.load"(%2251) : (!llvm.ptr) -> i32
    %2255 = "llvm.getelementptr"(%2253, %2254) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2256 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2257 = "llvm.getelementptr"(%2255, %2256) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2257) : (!llvm.ptr) -> ()
  }) {"func_name" = "Representable_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_String", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "String_getter_bytes", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi8"} : () -> ()
  "mini.setter_def"() {"meth_name" = "String_setter_bytes", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi8"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "String_field_bytes", "getter_name" = "String_getter_bytes", "setter_name" = "String_setter_bytes"} : () -> ()
  "mini.getter_def"() {"meth_name" = "String_getter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "String_setter_length", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "String_field_length", "getter_name" = "String_getter_length", "setter_name" = "String_setter_length"} : () -> ()
  "mini.getter_def"() {"meth_name" = "String_getter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "String_setter_capacity", "types" = [!llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "String_field_capacity", "getter_name" = "String_getter_capacity", "setter_name" = "String_setter_capacity"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "String_field_String_0", "id_hierarchy" = ["Character"], "name_hierarchy" = ["Character"]} : () -> ()
  "mini.func"() ({
  ^bb441(%2258 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2259 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2260 : !llvm.ptr):
    %2261 = "mini.wrap"(%2258) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2262 = "hi.cast"(%2261) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2263 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2264 = "mini.create_buffer"(%2263) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %2265 = "hi.cast"(%2264) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    "mini.set_field"(%2262, %2265) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">, !mini.buffer<!mini.ptr<i8>>) -> ()
    %2266 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2267 = "hi.cast"(%2266) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%2262, %2267) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %2268 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2269 = "hi.cast"(%2268) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%2262, %2269) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "String_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb442(%2270 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2271 : !llvm.ptr):
    %2272 = "mini.invariant"(%2271) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2273 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb443] : () -> ()
  ^bb443:
    %2274 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%2274, %2273) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb444] : () -> ()
  ^bb444:
    %2275 = "llvm.extractvalue"(%2270) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2276 = "llvm.load"(%2273) : (!llvm.ptr) -> i32
    %2277 = "llvm.getelementptr"(%2275, %2276) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2278 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2279 = "llvm.getelementptr"(%2277, %2278) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2279) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb445(%2280 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2281 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2282 : !llvm.ptr, %2283 : !llvm.struct<(!llvm.ptr)>, %2284 : i32, %2285 : i32):
    %2286 = "mini.wrap"(%2280) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2287 = "hi.cast"(%2286) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2288 = "mini.wrap"(%2283) : (!llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i8>>
    %2289 = "hi.cast"(%2288) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %2290 = "hi.cast"(%2289) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    "mini.set_field"(%2287, %2290) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">, !mini.buffer<!mini.ptr<i8>>) -> ()
    %2291 = "mini.wrap"(%2284) : (i32) -> !mini.ptr<i32>
    %2292 = "hi.cast"(%2291) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %2293 = "hi.cast"(%2292) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%2287, %2293) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %2294 = "mini.wrap"(%2285) : (i32) -> !mini.ptr<i32>
    %2295 = "hi.cast"(%2294) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %2296 = "hi.cast"(%2295) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%2287, %2296) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "String_init_bytesBufferi8_lengthi32_capacityi32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb446(%2297 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2298 : !llvm.ptr):
    %2299 = "mini.invariant"(%2298) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2300 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb447] : () -> ()
  ^bb448:
    %2301 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
    "llvm.store"(%2301, %2300) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb449] : () -> ()
  ^bb450:
    %2302 = "llvm.getelementptr"(%2298) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2303 = "mini.checkflag"(%2302) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2304 = "llvm.load"(%2303) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2304) [^bb448, ^bb448] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb451:
    %2305 = "llvm.getelementptr"(%2298) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2306 = "mini.checkflag"(%2305) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2307 = "llvm.load"(%2306) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2307) [^bb450, ^bb450] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb447:
    %2308 = "llvm.getelementptr"(%2298) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2309 = "mini.checkflag"(%2308) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2310 = "llvm.load"(%2309) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2310) [^bb451, ^bb451] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb449:
    %2311 = "llvm.extractvalue"(%2297) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2312 = "llvm.load"(%2300) : (!llvm.ptr) -> i32
    %2313 = "llvm.getelementptr"(%2311, %2312) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2314 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2315 = "llvm.getelementptr"(%2313, %2314) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2315) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_init_bytesBufferi8_lengthi32_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb452(%2316 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2317 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2318 : !llvm.ptr):
    %2319 = "mini.wrap"(%2316) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2320 = "hi.cast"(%2319) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2321 = "mini.get_field"(%2320) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2322 = "hi.cast"(%2321) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.return"(%2322) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "String_length_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb453(%2323 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2324 : !llvm.ptr):
    %2325 = "mini.invariant"(%2324) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2326 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb454] : () -> ()
  ^bb454:
    %2327 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
    "llvm.store"(%2327, %2326) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb455] : () -> ()
  ^bb455:
    %2328 = "llvm.extractvalue"(%2323) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2329 = "llvm.load"(%2326) : (!llvm.ptr) -> i32
    %2330 = "llvm.getelementptr"(%2328, %2329) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2331 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2332 = "llvm.getelementptr"(%2330, %2331) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2332) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_length_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb456(%2333 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2334 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2335 : !llvm.ptr):
    %2336 = "mini.wrap"(%2333) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2337 = "hi.cast"(%2336) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2338 = "mini.get_field"(%2337) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2339 = "hi.cast"(%2338) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.return"(%2339) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "String_capacity_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb457(%2340 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2341 : !llvm.ptr):
    %2342 = "mini.invariant"(%2341) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2343 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb458] : () -> ()
  ^bb458:
    %2344 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
    "llvm.store"(%2344, %2343) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb459] : () -> ()
  ^bb459:
    %2345 = "llvm.extractvalue"(%2340) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2346 = "llvm.load"(%2343) : (!llvm.ptr) -> i32
    %2347 = "llvm.getelementptr"(%2345, %2346) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2348 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2349 = "llvm.getelementptr"(%2347, %2348) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2349) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb460(%2350 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2351 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2352 : !llvm.ptr):
    %2353 = "mini.wrap"(%2350) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2354 = "hi.cast"(%2353) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2355 = "mini.get_field"(%2354) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %2356 = "hi.cast"(%2355) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    "mini.return"(%2356) : (!mini.buffer<!mini.ptr<i8>>) -> ()
  }) {"func_name" = "String_bytes_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb461(%2357 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2358 : !llvm.ptr):
    %2359 = "mini.invariant"(%2358) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2360 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb462] : () -> ()
  ^bb462:
    %2361 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
    "llvm.store"(%2361, %2360) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb463] : () -> ()
  ^bb463:
    %2362 = "llvm.extractvalue"(%2357) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2363 = "llvm.load"(%2360) : (!llvm.ptr) -> i32
    %2364 = "llvm.getelementptr"(%2362, %2363) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2365 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2366 = "llvm.getelementptr"(%2364, %2365) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2366) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_bytes_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb464(%2367 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2368 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2369 : !llvm.ptr, %2370 : i8):
    %2371 = "mini.wrap"(%2367) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2372 = "hi.cast"(%2371) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2373 = "mini.wrap"(%2370) : (i8) -> !mini.ptr<i8>
    %2374 = "hi.cast"(%2373) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
    %2375 = "mini.get_field"(%2372) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2376 = "mini.get_field"(%2372) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2377 = "mini.unwrap"(%2375) : (!mini.ptr<i32>) -> i32
    %2378 = "mini.unwrap"(%2376) : (!mini.ptr<i32>) -> i32
    %2379 = "mini.comparison"(%2377, %2378) {"op" = "LT"} : (i32, i32) -> i1
    %2380 = "mini.wrap"(%2379) : (i1) -> !mini.ptr<i32>
    %2381 = "mini.unwrap"(%2380) : (!mini.ptr<i32>) -> i1
    "mini.if"(%2381) ({
      %2382 = "mini.get_field"(%2372) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %2383 = "mini.get_field"(%2372) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %2384 = "hi.cast"(%2374) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
      "mini.buffer_set"(%2382, %2383, %2384) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %2385 = "mini.get_field"(%2372) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %2386 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %2387 = "mini.unwrap"(%2385) : (!mini.ptr<i32>) -> i32
      %2388 = "mini.unwrap"(%2386) : (!mini.ptr<i32>) -> i32
      %2389 = "mini.arithmetic"(%2387, %2388) {"op" = "ADD"} : (i32, i32) -> i32
      %2390 = "mini.wrap"(%2389) : (i32) -> !mini.ptr<i32>
      %2391 = "hi.cast"(%2390) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.set_field"(%2372, %2391) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
      %2392 = "hi.cast"(%2372) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      "mini.return"(%2392) : (!mini.fatptr<"String">) -> ()
    }) : (i1) -> ()
    %2393 = "mini.get_field"(%2372) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2394 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2395 = "mini.unwrap"(%2393) : (!mini.ptr<i32>) -> i32
    %2396 = "mini.unwrap"(%2394) : (!mini.ptr<i32>) -> i32
    %2397 = "mini.arithmetic"(%2395, %2396) {"op" = "MUL"} : (i32, i32) -> i32
    %2398 = "mini.wrap"(%2397) : (i32) -> !mini.ptr<i32>
    %2399 = "hi.cast"(%2398) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%2372, %2399) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %2400 = "mini.get_field"(%2372) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %2401 = "hi.cast"(%2400) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %2402 = "mini.refer"(%2401) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %2403 = "mini.get_field"(%2372) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2404 = "mini.create_buffer"(%2403) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %2405 = "hi.cast"(%2404) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    "mini.set_field"(%2372, %2405) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">, !mini.buffer<!mini.ptr<i8>>) -> ()
    %2406 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %2407 = "mini.get_field"(%2372) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %2408 = "mini.unwrap"(%2406) : (!mini.ptr<i32>) -> i32
      %2409 = "mini.unwrap"(%2407) : (!mini.ptr<i32>) -> i32
      %2410 = "mini.comparison"(%2408, %2409) {"op" = "LT"} : (i32, i32) -> i1
      %2411 = "mini.wrap"(%2410) : (i1) -> !mini.ptr<i32>
      %2412 = "mini.unwrap"(%2411) : (!mini.ptr<i32>) -> i1
    }, {
      %2413 = "mini.buffer_get"(%2402, %2406) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %2414 = "mini.get_field"(%2372) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %2415 = "hi.cast"(%2413) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
      "mini.buffer_set"(%2414, %2406, %2415) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %2416 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %2417 = "mini.unwrap"(%2406) : (!mini.ptr<i32>) -> i32
      %2418 = "mini.unwrap"(%2416) : (!mini.ptr<i32>) -> i32
      %2419 = "mini.arithmetic"(%2417, %2418) {"op" = "ADD"} : (i32, i32) -> i32
      %2420 = "mini.wrap"(%2419) : (i32) -> !mini.ptr<i32>
      %2421 = "hi.cast"(%2420) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%2406, %2421) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %2422 = "mini.get_field"(%2372) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %2423 = "mini.get_field"(%2372) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2424 = "hi.cast"(%2374) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
    "mini.buffer_set"(%2422, %2423, %2424) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
    %2425 = "mini.get_field"(%2372) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2426 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2427 = "mini.unwrap"(%2425) : (!mini.ptr<i32>) -> i32
    %2428 = "mini.unwrap"(%2426) : (!mini.ptr<i32>) -> i32
    %2429 = "mini.arithmetic"(%2427, %2428) {"op" = "ADD"} : (i32, i32) -> i32
    %2430 = "mini.wrap"(%2429) : (i32) -> !mini.ptr<i32>
    %2431 = "hi.cast"(%2430) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%2372, %2431) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %2432 = "hi.cast"(%2372) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%2432) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_append_xi8", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb465(%2433 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2434 : !llvm.ptr):
    %2435 = "mini.invariant"(%2434) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2436 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb466] : () -> ()
  ^bb467:
    %2437 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
    "llvm.store"(%2437, %2436) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb468] : () -> ()
  ^bb466:
    %2438 = "llvm.getelementptr"(%2434) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2439 = "mini.checkflag"(%2438) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2440 = "llvm.load"(%2439) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2440) [^bb467, ^bb467] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb468:
    %2441 = "llvm.extractvalue"(%2433) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2442 = "llvm.load"(%2436) : (!llvm.ptr) -> i32
    %2443 = "llvm.getelementptr"(%2441, %2442) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2444 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2445 = "llvm.getelementptr"(%2443, %2444) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2445) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_append_xi8", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb469(%2446 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2447 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2448 : !llvm.ptr, %2449 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2450 = "mini.wrap"(%2446) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2451 = "hi.cast"(%2450) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2452 = "mini.wrap"(%2449) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2453 = "hi.cast"(%2452) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2454 = "mini.unwrap"(%2453) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2455 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2456 = "mini.method_call"(%2455, %2454) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %2457 = "hi.cast"(%2456) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %2458 = "hi.cast"(%2457) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %2459 = "mini.refer"(%2458) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %2460 = "mini.unwrap"(%2453) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2461 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2462 = "mini.method_call"(%2461, %2460) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %2463 = "hi.cast"(%2462) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %2464 = "mini.get_field"(%2451) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2465 = "mini.unwrap"(%2464) : (!mini.ptr<i32>) -> i32
    %2466 = "mini.unwrap"(%2463) : (!mini.ptr<i32>) -> i32
    %2467 = "mini.arithmetic"(%2465, %2466) {"op" = "ADD"} : (i32, i32) -> i32
    %2468 = "mini.wrap"(%2467) : (i32) -> !mini.ptr<i32>
    %2469 = "mini.get_field"(%2451) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2470 = "mini.unwrap"(%2468) : (!mini.ptr<i32>) -> i32
    %2471 = "mini.unwrap"(%2469) : (!mini.ptr<i32>) -> i32
    %2472 = "mini.comparison"(%2470, %2471) {"op" = "LT"} : (i32, i32) -> i1
    %2473 = "mini.wrap"(%2472) : (i1) -> !mini.ptr<i32>
    %2474 = "mini.unwrap"(%2473) : (!mini.ptr<i32>) -> i1
    "mini.if"(%2474) ({
      %2475 = "mini.get_field"(%2451) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %2476 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      "mini.while"() ({
        %2477 = "mini.get_field"(%2451) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
        %2478 = "mini.unwrap"(%2477) : (!mini.ptr<i32>) -> i32
        %2479 = "mini.unwrap"(%2463) : (!mini.ptr<i32>) -> i32
        %2480 = "mini.arithmetic"(%2478, %2479) {"op" = "ADD"} : (i32, i32) -> i32
        %2481 = "mini.wrap"(%2480) : (i32) -> !mini.ptr<i32>
        %2482 = "mini.unwrap"(%2475) : (!mini.ptr<i32>) -> i32
        %2483 = "mini.unwrap"(%2481) : (!mini.ptr<i32>) -> i32
        %2484 = "mini.comparison"(%2482, %2483) {"op" = "LT"} : (i32, i32) -> i1
        %2485 = "mini.wrap"(%2484) : (i1) -> !mini.ptr<i32>
        %2486 = "mini.unwrap"(%2485) : (!mini.ptr<i32>) -> i1
      }, {
        %2487 = "mini.buffer_get"(%2459, %2476) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
        %2488 = "mini.get_field"(%2451) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
        %2489 = "hi.cast"(%2487) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
        "mini.buffer_set"(%2488, %2475, %2489) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
        %2490 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %2491 = "mini.unwrap"(%2475) : (!mini.ptr<i32>) -> i32
        %2492 = "mini.unwrap"(%2490) : (!mini.ptr<i32>) -> i32
        %2493 = "mini.arithmetic"(%2491, %2492) {"op" = "ADD"} : (i32, i32) -> i32
        %2494 = "mini.wrap"(%2493) : (i32) -> !mini.ptr<i32>
        %2495 = "hi.cast"(%2494) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
        "mini.assign"(%2475, %2495) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        %2496 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %2497 = "mini.unwrap"(%2476) : (!mini.ptr<i32>) -> i32
        %2498 = "mini.unwrap"(%2496) : (!mini.ptr<i32>) -> i32
        %2499 = "mini.arithmetic"(%2497, %2498) {"op" = "ADD"} : (i32, i32) -> i32
        %2500 = "mini.wrap"(%2499) : (i32) -> !mini.ptr<i32>
        %2501 = "hi.cast"(%2500) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
        "mini.assign"(%2476, %2501) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      }) : () -> ()
      %2502 = "mini.get_field"(%2451) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %2503 = "mini.unwrap"(%2502) : (!mini.ptr<i32>) -> i32
      %2504 = "mini.unwrap"(%2463) : (!mini.ptr<i32>) -> i32
      %2505 = "mini.arithmetic"(%2503, %2504) {"op" = "ADD"} : (i32, i32) -> i32
      %2506 = "mini.wrap"(%2505) : (i32) -> !mini.ptr<i32>
      %2507 = "hi.cast"(%2506) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.set_field"(%2451, %2507) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
      %2508 = "hi.cast"(%2451) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      "mini.return"(%2508) : (!mini.fatptr<"String">) -> ()
    }) : (i1) -> ()
    %2509 = "mini.get_field"(%2451) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2510 = "mini.unwrap"(%2509) : (!mini.ptr<i32>) -> i32
    %2511 = "mini.unwrap"(%2463) : (!mini.ptr<i32>) -> i32
    %2512 = "mini.arithmetic"(%2510, %2511) {"op" = "ADD"} : (i32, i32) -> i32
    %2513 = "mini.wrap"(%2512) : (i32) -> !mini.ptr<i32>
    %2514 = "hi.cast"(%2513) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%2451, %2514) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %2515 = "mini.get_field"(%2451) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %2516 = "hi.cast"(%2515) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %2517 = "mini.refer"(%2516) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %2518 = "mini.get_field"(%2451) {"offset" = 2 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2519 = "mini.create_buffer"(%2518) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %2520 = "hi.cast"(%2519) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    "mini.set_field"(%2451, %2520) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">, !mini.buffer<!mini.ptr<i8>>) -> ()
    %2521 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2522 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %2523 = "mini.get_field"(%2451) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %2524 = "mini.unwrap"(%2523) : (!mini.ptr<i32>) -> i32
      %2525 = "mini.unwrap"(%2463) : (!mini.ptr<i32>) -> i32
      %2526 = "mini.arithmetic"(%2524, %2525) {"op" = "ADD"} : (i32, i32) -> i32
      %2527 = "mini.wrap"(%2526) : (i32) -> !mini.ptr<i32>
      %2528 = "mini.unwrap"(%2521) : (!mini.ptr<i32>) -> i32
      %2529 = "mini.unwrap"(%2527) : (!mini.ptr<i32>) -> i32
      %2530 = "mini.comparison"(%2528, %2529) {"op" = "LT"} : (i32, i32) -> i1
      %2531 = "mini.wrap"(%2530) : (i1) -> !mini.ptr<i32>
      %2532 = "mini.unwrap"(%2531) : (!mini.ptr<i32>) -> i1
    }, {
      %2533 = "mini.get_field"(%2451) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %2534 = "mini.unwrap"(%2521) : (!mini.ptr<i32>) -> i32
      %2535 = "mini.unwrap"(%2533) : (!mini.ptr<i32>) -> i32
      %2536 = "mini.comparison"(%2534, %2535) {"op" = "LT"} : (i32, i32) -> i1
      %2537 = "mini.wrap"(%2536) : (i1) -> !mini.ptr<i32>
      %2538 = "mini.unwrap"(%2537) : (!mini.ptr<i32>) -> i1
      "mini.if"(%2538) ({
        %2539 = "mini.buffer_get"(%2517, %2521) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
        %2540 = "mini.get_field"(%2451) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
        %2541 = "hi.cast"(%2539) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
        "mini.buffer_set"(%2540, %2521, %2541) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
        %2542 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %2543 = "mini.unwrap"(%2521) : (!mini.ptr<i32>) -> i32
        %2544 = "mini.unwrap"(%2542) : (!mini.ptr<i32>) -> i32
        %2545 = "mini.arithmetic"(%2543, %2544) {"op" = "ADD"} : (i32, i32) -> i32
        %2546 = "mini.wrap"(%2545) : (i32) -> !mini.ptr<i32>
        %2547 = "hi.cast"(%2546) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
        "mini.assign"(%2521, %2547) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        "mini.continue"() [^bb470] : () -> ()
      }) : (i1) -> ()
      %2548 = "mini.buffer_get"(%2459, %2522) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %2549 = "mini.get_field"(%2451) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %2550 = "hi.cast"(%2548) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
      "mini.buffer_set"(%2549, %2521, %2550) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %2551 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %2552 = "mini.unwrap"(%2521) : (!mini.ptr<i32>) -> i32
      %2553 = "mini.unwrap"(%2551) : (!mini.ptr<i32>) -> i32
      %2554 = "mini.arithmetic"(%2552, %2553) {"op" = "ADD"} : (i32, i32) -> i32
      %2555 = "mini.wrap"(%2554) : (i32) -> !mini.ptr<i32>
      %2556 = "hi.cast"(%2555) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%2521, %2556) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %2557 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %2558 = "mini.unwrap"(%2522) : (!mini.ptr<i32>) -> i32
      %2559 = "mini.unwrap"(%2557) : (!mini.ptr<i32>) -> i32
      %2560 = "mini.arithmetic"(%2558, %2559) {"op" = "ADD"} : (i32, i32) -> i32
      %2561 = "mini.wrap"(%2560) : (i32) -> !mini.ptr<i32>
      %2562 = "hi.cast"(%2561) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%2522, %2562) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %2563 = "mini.get_field"(%2451) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2564 = "mini.unwrap"(%2563) : (!mini.ptr<i32>) -> i32
    %2565 = "mini.unwrap"(%2463) : (!mini.ptr<i32>) -> i32
    %2566 = "mini.arithmetic"(%2564, %2565) {"op" = "ADD"} : (i32, i32) -> i32
    %2567 = "mini.wrap"(%2566) : (i32) -> !mini.ptr<i32>
    %2568 = "hi.cast"(%2567) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%2451, %2568) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %2569 = "hi.cast"(%2451) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%2569) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_extend_strString", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb471(%2570 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2571 : !llvm.ptr):
    %2572 = "mini.invariant"(%2571) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2573 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb472] : () -> ()
  ^bb473:
    %2574 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
    "llvm.store"(%2574, %2573) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb474] : () -> ()
  ^bb472:
    %2575 = "llvm.getelementptr"(%2571) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2576 = "mini.checkflag"(%2575) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2577 = "llvm.load"(%2576) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2577) [^bb473, ^bb473] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb474:
    %2578 = "llvm.extractvalue"(%2570) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2579 = "llvm.load"(%2573) : (!llvm.ptr) -> i32
    %2580 = "llvm.getelementptr"(%2578, %2579) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2581 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2582 = "llvm.getelementptr"(%2580, %2581) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2582) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_extend_strString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb475(%2583 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2584 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2585 : !llvm.ptr, %2586 : i32):
    %2587 = "mini.wrap"(%2583) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2588 = "hi.cast"(%2587) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2589 = "mini.wrap"(%2586) : (i32) -> !mini.ptr<i32>
    %2590 = "hi.cast"(%2589) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %2591 = "mini.get_field"(%2588) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2592 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2593 = "mini.unwrap"(%2591) : (!mini.ptr<i32>) -> i32
    %2594 = "mini.unwrap"(%2592) : (!mini.ptr<i32>) -> i32
    %2595 = "mini.arithmetic"(%2593, %2594) {"op" = "SUB"} : (i32, i32) -> i32
    %2596 = "mini.wrap"(%2595) : (i32) -> !mini.ptr<i32>
    %2597 = "mini.unwrap"(%2590) : (!mini.ptr<i32>) -> i32
    %2598 = "mini.unwrap"(%2596) : (!mini.ptr<i32>) -> i32
    %2599 = "mini.comparison"(%2597, %2598) {"op" = "GT"} : (i32, i32) -> i1
    %2600 = "mini.wrap"(%2599) : (i1) -> !mini.ptr<i32>
    %2601 = "mini.unwrap"(%2600) : (!mini.ptr<i32>) -> i1
    "mini.if"(%2601) ({
      "mini.coro_yield"() : () -> ()
    }) : (i1) -> ()
    %2602 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2603 = "mini.unwrap"(%2590) : (!mini.ptr<i32>) -> i32
    %2604 = "mini.unwrap"(%2602) : (!mini.ptr<i32>) -> i32
    %2605 = "mini.comparison"(%2603, %2604) {"op" = "GE"} : (i32, i32) -> i1
    %2606 = "mini.wrap"(%2605) : (i1) -> !mini.ptr<i32>
    %2607 = "mini.unwrap"(%2606) : (!mini.ptr<i32>) -> i1
    "mini.if"(%2607) ({
      %2608 = "mini.get_field"(%2588) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %2609 = "mini.buffer_get"(%2608, %2590) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %2610 = "hi.cast"(%2609) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
      "mini.return"(%2610) : (!mini.ptr<i8>) -> ()
    }) : (i1) -> ()
    %2611 = "mini.get_field"(%2588) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2612 = "mini.unwrap"(%2611) : (!mini.ptr<i32>) -> i32
    %2613 = "mini.unwrap"(%2590) : (!mini.ptr<i32>) -> i32
    %2614 = "mini.arithmetic"(%2612, %2613) {"op" = "ADD"} : (i32, i32) -> i32
    %2615 = "mini.wrap"(%2614) : (i32) -> !mini.ptr<i32>
    %2616 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2617 = "mini.unwrap"(%2615) : (!mini.ptr<i32>) -> i32
    %2618 = "mini.unwrap"(%2616) : (!mini.ptr<i32>) -> i32
    %2619 = "mini.comparison"(%2617, %2618) {"op" = "LT"} : (i32, i32) -> i1
    %2620 = "mini.wrap"(%2619) : (i1) -> !mini.ptr<i32>
    %2621 = "mini.unwrap"(%2620) : (!mini.ptr<i32>) -> i1
    "mini.if"(%2621) ({
      "mini.coro_yield"() : () -> ()
    }) : (i1) -> ()
    %2622 = "mini.get_field"(%2588) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %2623 = "mini.get_field"(%2588) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2624 = "mini.unwrap"(%2623) : (!mini.ptr<i32>) -> i32
    %2625 = "mini.unwrap"(%2590) : (!mini.ptr<i32>) -> i32
    %2626 = "mini.arithmetic"(%2624, %2625) {"op" = "ADD"} : (i32, i32) -> i32
    %2627 = "mini.wrap"(%2626) : (i32) -> !mini.ptr<i32>
    %2628 = "mini.buffer_get"(%2622, %2627) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
    %2629 = "hi.cast"(%2628) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
    "mini.return"(%2629) : (!mini.ptr<i8>) -> ()
  }) {"func_name" = "String__index_xi32", "result_type" = i8, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb476(%2630 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2631 : !llvm.ptr):
    %2632 = "mini.invariant"(%2631) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2633 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb477] : () -> ()
  ^bb478:
    %2634 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
    "llvm.store"(%2634, %2633) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb479] : () -> ()
  ^bb477:
    %2635 = "llvm.getelementptr"(%2631) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2636 = "mini.checkflag"(%2635) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2637 = "llvm.load"(%2636) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2637) [^bb478, ^bb478] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb479:
    %2638 = "llvm.extractvalue"(%2630) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2639 = "llvm.load"(%2633) : (!llvm.ptr) -> i32
    %2640 = "llvm.getelementptr"(%2638, %2639) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2641 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2642 = "llvm.getelementptr"(%2640, %2641) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2642) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B__index_xi32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb480(%2643 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2644 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2645 : !llvm.ptr, %2646 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %2647 = "mini.wrap"(%2643) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2648 = "hi.cast"(%2647) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2649 = "mini.wrap"(%2646) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2650 = "hi.cast"(%2649) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2651 = "mini.get_field"(%2648) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2652 = "mini.unwrap"(%2650) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2653 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %2654 = "mini.method_call"(%2653, %2652) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %2655 = "hi.cast"(%2654) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %2656 = "mini.unwrap"(%2651) : (!mini.ptr<i32>) -> i32
    %2657 = "mini.unwrap"(%2655) : (!mini.ptr<i32>) -> i32
    %2658 = "mini.comparison"(%2656, %2657) {"op" = "NEQ"} : (i32, i32) -> i1
    %2659 = "mini.wrap"(%2658) : (i1) -> !mini.ptr<i32>
    %2660 = "mini.unwrap"(%2659) : (!mini.ptr<i32>) -> i1
    "mini.if"(%2660) ({
      %2661 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      %2662 = "hi.cast"(%2661) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
      "mini.return"(%2662) : (!mini.ptr<i1>) -> ()
    }) : (i1) -> ()
    %2663 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %2664 = "mini.get_field"(%2648) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %2665 = "mini.unwrap"(%2663) : (!mini.ptr<i32>) -> i32
      %2666 = "mini.unwrap"(%2664) : (!mini.ptr<i32>) -> i32
      %2667 = "mini.comparison"(%2665, %2666) {"op" = "LT"} : (i32, i32) -> i1
      %2668 = "mini.wrap"(%2667) : (i1) -> !mini.ptr<i32>
      %2669 = "mini.unwrap"(%2668) : (!mini.ptr<i32>) -> i1
    }, {
      %2670 = "mini.get_field"(%2648) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %2671 = "mini.buffer_get"(%2670, %2663) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %2672 = "mini.unwrap"(%2650) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %2673 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %2674 = "mini.method_call"(%2673, %2672) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %2675 = "hi.cast"(%2674) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %2676 = "mini.buffer_get"(%2675, %2663) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %2677 = "mini.unwrap"(%2671) : (!mini.ptr<i8>) -> i8
      %2678 = "mini.unwrap"(%2676) : (!mini.ptr<i8>) -> i8
      %2679 = "mini.comparison"(%2677, %2678) {"op" = "NEQ"} : (i8, i8) -> i1
      %2680 = "mini.wrap"(%2679) : (i1) -> !mini.ptr<i8>
      %2681 = "mini.unwrap"(%2680) : (!mini.ptr<i8>) -> i1
      "mini.if"(%2681) ({
        %2682 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
        %2683 = "hi.cast"(%2682) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
        "mini.return"(%2683) : (!mini.ptr<i1>) -> ()
      }) : (i1) -> ()
      %2684 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %2685 = "mini.unwrap"(%2663) : (!mini.ptr<i32>) -> i32
      %2686 = "mini.unwrap"(%2684) : (!mini.ptr<i32>) -> i32
      %2687 = "mini.arithmetic"(%2685, %2686) {"op" = "ADD"} : (i32, i32) -> i32
      %2688 = "mini.wrap"(%2687) : (i32) -> !mini.ptr<i32>
      %2689 = "hi.cast"(%2688) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%2663, %2689) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %2690 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %2691 = "hi.cast"(%2690) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
    "mini.return"(%2691) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "String__EQ_otherString", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb481(%2692 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2693 : !llvm.ptr):
    %2694 = "mini.invariant"(%2693) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2695 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb482] : () -> ()
  ^bb483:
    %2696 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
    "llvm.store"(%2696, %2695) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb484] : () -> ()
  ^bb482:
    %2697 = "llvm.getelementptr"(%2693) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2698 = "mini.checkflag"(%2697) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2699 = "llvm.load"(%2698) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2699) [^bb483, ^bb483] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb484:
    %2700 = "llvm.extractvalue"(%2692) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2701 = "llvm.load"(%2695) : (!llvm.ptr) -> i32
    %2702 = "llvm.getelementptr"(%2700, %2701) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2703 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2704 = "llvm.getelementptr"(%2702, %2703) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2704) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B__EQ_otherString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb485(%2705 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2706 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2707 : !llvm.ptr):
    %2708 = "mini.wrap"(%2705) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2709 = "hi.cast"(%2708) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2710 = "mini.get_field"(%2709) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2711 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2712 = "mini.unwrap"(%2710) : (!mini.ptr<i32>) -> i32
    %2713 = "mini.unwrap"(%2711) : (!mini.ptr<i32>) -> i32
    %2714 = "mini.comparison"(%2712, %2713) {"op" = "EQ"} : (i32, i32) -> i1
    %2715 = "mini.wrap"(%2714) : (i1) -> !mini.ptr<i32>
    %2716 = "mini.unwrap"(%2715) : (!mini.ptr<i32>) -> i1
    "mini.if"(%2716) ({
      %2717 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %2718 = "hi.cast"(%2717) {"from_typ" = !mini.nil, "to_typ" = !mini.union<[!mini.ptr<i8>, !mini.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
      "mini.return"(%2718) : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %2719 = "mini.get_field"(%2709) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2720 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2721 = "mini.unwrap"(%2719) : (!mini.ptr<i32>) -> i32
    %2722 = "mini.unwrap"(%2720) : (!mini.ptr<i32>) -> i32
    %2723 = "mini.arithmetic"(%2721, %2722) {"op" = "SUB"} : (i32, i32) -> i32
    %2724 = "mini.wrap"(%2723) : (i32) -> !mini.ptr<i32>
    %2725 = "hi.cast"(%2724) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%2709, %2725) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">, !mini.ptr<i32>) -> ()
    %2726 = "mini.get_field"(%2709) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
    %2727 = "mini.get_field"(%2709) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2728 = "mini.buffer_get"(%2726, %2727) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
    %2729 = "hi.cast"(%2728) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.union<[!mini.ptr<i8>, !mini.nil]>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i8>) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
    "mini.return"(%2729) : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> ()
  }) {"func_name" = "String_pop_", "result_type" = !llvm.struct<(!llvm.ptr, i8)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb486(%2730 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2731 : !llvm.ptr):
    %2732 = "mini.invariant"(%2731) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2733 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb487] : () -> ()
  ^bb487:
    %2734 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
    "llvm.store"(%2734, %2733) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb488] : () -> ()
  ^bb488:
    %2735 = "llvm.extractvalue"(%2730) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2736 = "llvm.load"(%2733) : (!llvm.ptr) -> i32
    %2737 = "llvm.getelementptr"(%2735, %2736) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2738 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2739 = "llvm.getelementptr"(%2737, %2738) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2739) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_pop_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb489(%2740 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2741 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2742 : !llvm.ptr):
    %2743 = "mini.wrap"(%2740) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2744 = "hi.cast"(%2743) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2745 = "mini.get_field"(%2744) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2746 = "mini.create_buffer"(%2745) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %2747 = "hi.cast"(%2746) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %2748 = "mini.refer"(%2747) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %2749 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %2750 = "mini.get_field"(%2744) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %2751 = "mini.unwrap"(%2749) : (!mini.ptr<i32>) -> i32
      %2752 = "mini.unwrap"(%2750) : (!mini.ptr<i32>) -> i32
      %2753 = "mini.comparison"(%2751, %2752) {"op" = "LT"} : (i32, i32) -> i1
      %2754 = "mini.wrap"(%2753) : (i1) -> !mini.ptr<i32>
      %2755 = "mini.unwrap"(%2754) : (!mini.ptr<i32>) -> i1
    }, {
      %2756 = "mini.get_field"(%2744) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %2757 = "mini.buffer_get"(%2756, %2749) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %2758 = "hi.cast"(%2757) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
      "mini.buffer_set"(%2748, %2749, %2758) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %2759 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %2760 = "mini.unwrap"(%2749) : (!mini.ptr<i32>) -> i32
      %2761 = "mini.unwrap"(%2759) : (!mini.ptr<i32>) -> i32
      %2762 = "mini.arithmetic"(%2760, %2761) {"op" = "ADD"} : (i32, i32) -> i32
      %2763 = "mini.wrap"(%2762) : (i32) -> !mini.ptr<i32>
      %2764 = "hi.cast"(%2763) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%2749, %2764) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %2765 = "mini.get_field"(%2744) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2766 = "mini.get_field"(%2744) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2767 = "mini.unwrap"(%2748) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %2768 = "mini.unwrap"(%2765) : (!mini.ptr<i32>) -> i32
    %2769 = "mini.unwrap"(%2766) : (!mini.ptr<i32>) -> i32
    %2770 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %2771 = "mini.get_field"(%2744) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2772 = "mini.get_field"(%2744) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2773 = "hi.cast"(%2748) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %2774 = "mini.unwrap"(%2773) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %2775 = "hi.cast"(%2771) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %2776 = "mini.unwrap"(%2775) : (!mini.ptr<i32>) -> i32
    %2777 = "hi.cast"(%2772) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %2778 = "mini.unwrap"(%2777) : (!mini.ptr<i32>) -> i32
    %2779 = "mini.unwrap"(%2770) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2780 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %2781 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %2782 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %2783 = "mini.parameterizations_array"(%2780, %2781, %2782) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2783, %2779, %2774, %2776, %2778) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %2784 = "hi.cast"(%2770) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2785 = "mini.refer"(%2784) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2786 = "hi.cast"(%2785) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%2786) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_copy_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb490(%2787 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2788 : !llvm.ptr):
    %2789 = "mini.invariant"(%2788) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2790 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb491] : () -> ()
  ^bb491:
    %2791 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
    "llvm.store"(%2791, %2790) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb492] : () -> ()
  ^bb492:
    %2792 = "llvm.extractvalue"(%2787) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2793 = "llvm.load"(%2790) : (!llvm.ptr) -> i32
    %2794 = "llvm.getelementptr"(%2792, %2793) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2795 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2796 = "llvm.getelementptr"(%2794, %2795) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2796) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_copy_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb493(%2797 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2798 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2799 : !llvm.ptr):
    %2800 = "mini.wrap"(%2797) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2801 = "hi.cast"(%2800) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2802 = "mini.get_field"(%2801) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2803 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %2804 = "mini.unwrap"(%2802) : (!mini.ptr<i32>) -> i32
    %2805 = "mini.unwrap"(%2803) : (!mini.ptr<i32>) -> i32
    %2806 = "mini.arithmetic"(%2804, %2805) {"op" = "ADD"} : (i32, i32) -> i32
    %2807 = "mini.wrap"(%2806) : (i32) -> !mini.ptr<i32>
    %2808 = "mini.create_buffer"(%2807) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %2809 = "hi.cast"(%2808) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %2810 = "mini.refer"(%2809) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %2811 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %2812 = "mini.get_field"(%2801) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
      %2813 = "mini.unwrap"(%2811) : (!mini.ptr<i32>) -> i32
      %2814 = "mini.unwrap"(%2812) : (!mini.ptr<i32>) -> i32
      %2815 = "mini.comparison"(%2813, %2814) {"op" = "LT"} : (i32, i32) -> i1
      %2816 = "mini.wrap"(%2815) : (i1) -> !mini.ptr<i32>
      %2817 = "mini.unwrap"(%2816) : (!mini.ptr<i32>) -> i1
    }, {
      %2818 = "mini.get_field"(%2801) {"offset" = 0 : i64, "vtable_bytes" = 616 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"String">) -> !mini.buffer<!mini.ptr<i8>>
      %2819 = "mini.buffer_get"(%2818, %2811) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %2820 = "hi.cast"(%2819) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
      "mini.buffer_set"(%2810, %2811, %2820) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
      %2821 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %2822 = "mini.unwrap"(%2811) : (!mini.ptr<i32>) -> i32
      %2823 = "mini.unwrap"(%2821) : (!mini.ptr<i32>) -> i32
      %2824 = "mini.arithmetic"(%2822, %2823) {"op" = "ADD"} : (i32, i32) -> i32
      %2825 = "mini.wrap"(%2824) : (i32) -> !mini.ptr<i32>
      %2826 = "hi.cast"(%2825) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%2811, %2826) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %2827 = "mini.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %2828 = "hi.cast"(%2827) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
    %2829 = "mini.get_field"(%2801) {"offset" = 1 : i64, "vtable_bytes" = 616 : i32, "original_type" = i32} : (!mini.fatptr<"String">) -> !mini.ptr<i32>
    %2830 = "hi.cast"(%2828) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
    "mini.buffer_set"(%2810, %2829, %2830) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
    %2831 = "hi.cast"(%2810) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    "mini.return"(%2831) : (!mini.buffer<!mini.ptr<i8>>) -> ()
  }) {"func_name" = "String_c_string_", "result_type" = !llvm.struct<(!llvm.ptr)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb494(%2832 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2833 : !llvm.ptr):
    %2834 = "mini.invariant"(%2833) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2835 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb495] : () -> ()
  ^bb495:
    %2836 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
    "llvm.store"(%2836, %2835) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb496] : () -> ()
  ^bb496:
    %2837 = "llvm.extractvalue"(%2832) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2838 = "llvm.load"(%2835) : (!llvm.ptr) -> i32
    %2839 = "llvm.getelementptr"(%2837, %2838) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2840 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2841 = "llvm.getelementptr"(%2839, %2840) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2841) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_c_string_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb497(%2842 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2843 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2844 : !llvm.ptr):
    %2845 = "mini.wrap"(%2842) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %2846 = "hi.cast"(%2845) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2847 = "mini.unwrap"(%2846) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2848 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "StringIterator", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"StringIterator">
    %2849 = "hi.cast"(%2846) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %2850 = "mini.unwrap"(%2849) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2851 = "mini.unwrap"(%2848) : (!mini.fatptr<"StringIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %2852 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %2853 = "mini.parameterizations_array"(%2852) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%2853, %2851, %2850) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %2854 = "hi.cast"(%2848) {"from_typ" = !mini.fatptr<"StringIterator">, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "StringIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.return"(%2854) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "String_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb498(%2855 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2856 : !llvm.ptr):
    %2857 = "mini.invariant"(%2856) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2858 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb499] : () -> ()
  ^bb499:
    %2859 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
    "llvm.store"(%2859, %2858) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb500] : () -> ()
  ^bb500:
    %2860 = "llvm.extractvalue"(%2855) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2861 = "llvm.load"(%2858) : (!llvm.ptr) -> i32
    %2862 = "llvm.getelementptr"(%2860, %2861) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2863 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2864 = "llvm.getelementptr"(%2862, %2863) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2864) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb501(%2865 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2866 : !llvm.ptr):
    %2867 = "mini.invariant"(%2866) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2868 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb502] : () -> ()
  ^bb503:
    %2869 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
    "llvm.store"(%2869, %2868) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb504] : () -> ()
  ^bb502:
    %2870 = "llvm.getelementptr"(%2866) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2871 = "mini.checkflag"(%2870) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2872 = "llvm.load"(%2871) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2872) [^bb503, ^bb503] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb504:
    %2873 = "llvm.extractvalue"(%2865) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2874 = "llvm.load"(%2868) : (!llvm.ptr) -> i32
    %2875 = "llvm.getelementptr"(%2873, %2874) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2876 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2877 = "llvm.getelementptr"(%2875, %2876) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2877) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb505(%2878 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2879 : !llvm.ptr):
    %2880 = "mini.invariant"(%2879) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2881 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb506] : () -> ()
  ^bb507:
    %2882 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
    "llvm.store"(%2882, %2881) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb508] : () -> ()
  ^bb509:
    %2883 = "llvm.getelementptr"(%2879) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2884 = "mini.checkflag"(%2883) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2885 = "llvm.load"(%2884) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2885) [^bb507, ^bb507] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb506:
    %2886 = "llvm.getelementptr"(%2879) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2887 = "mini.checkflag"(%2886) {"typ_name" = "Character"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2888 = "llvm.load"(%2887) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2888) [^bb509, ^bb509] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb508:
    %2889 = "llvm.extractvalue"(%2878) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2890 = "llvm.load"(%2881) : (!llvm.ptr) -> i32
    %2891 = "llvm.getelementptr"(%2889, %2890) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2892 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2893 = "llvm.getelementptr"(%2891, %2892) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2893) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb510(%2894 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2895 : !llvm.ptr):
    %2896 = "mini.invariant"(%2895) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2897 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb511] : () -> ()
  ^bb512:
    %2898 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
    "llvm.store"(%2898, %2897) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb513] : () -> ()
  ^bb511:
    %2899 = "llvm.getelementptr"(%2895) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2900 = "mini.checkflag"(%2899) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2901 = "llvm.load"(%2900) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2901) [^bb512, ^bb512] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb513:
    %2902 = "llvm.extractvalue"(%2894) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2903 = "llvm.load"(%2897) : (!llvm.ptr) -> i32
    %2904 = "llvm.getelementptr"(%2902, %2903) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2905 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2906 = "llvm.getelementptr"(%2904, %2905) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2906) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_all_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb514(%2907 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2908 : !llvm.ptr):
    %2909 = "mini.invariant"(%2908) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2910 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb515] : () -> ()
  ^bb516:
    %2911 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
    "llvm.store"(%2911, %2910) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb517] : () -> ()
  ^bb515:
    %2912 = "llvm.getelementptr"(%2908) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2913 = "mini.checkflag"(%2912) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2914 = "llvm.load"(%2913) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2914) [^bb516, ^bb516] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb517:
    %2915 = "llvm.extractvalue"(%2907) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2916 = "llvm.load"(%2910) : (!llvm.ptr) -> i32
    %2917 = "llvm.getelementptr"(%2915, %2916) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2918 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2919 = "llvm.getelementptr"(%2917, %2918) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2919) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_any_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb518(%2920 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2921 : !llvm.ptr):
    %2922 = "mini.invariant"(%2921) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2923 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb519] : () -> ()
  ^bb520:
    %2924 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
    "llvm.store"(%2924, %2923) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb521] : () -> ()
  ^bb519:
    %2925 = "llvm.getelementptr"(%2921) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2926 = "mini.checkflag"(%2925) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2927 = "llvm.load"(%2926) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2927) [^bb520, ^bb520] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb521:
    %2928 = "llvm.extractvalue"(%2920) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2929 = "llvm.load"(%2923) : (!llvm.ptr) -> i32
    %2930 = "llvm.getelementptr"(%2928, %2929) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2931 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2932 = "llvm.getelementptr"(%2930, %2931) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2932) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb522(%2933 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2934 : !llvm.ptr):
    %2935 = "mini.invariant"(%2934) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2936 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb523] : () -> ()
  ^bb524:
    %2937 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
    "llvm.store"(%2937, %2936) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb525] : () -> ()
  ^bb523:
    %2938 = "llvm.getelementptr"(%2934) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2939 = "mini.checkflag"(%2938) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2940 = "llvm.load"(%2939) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2940) [^bb524, ^bb524] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb525:
    %2941 = "llvm.extractvalue"(%2933) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2942 = "llvm.load"(%2936) : (!llvm.ptr) -> i32
    %2943 = "llvm.getelementptr"(%2941, %2942) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2944 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2945 = "llvm.getelementptr"(%2943, %2944) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2945) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_filter_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb526(%2946 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2947 : !llvm.ptr):
    %2948 = "mini.invariant"(%2947) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2949 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb527] : () -> ()
  ^bb528:
    %2950 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
    "llvm.store"(%2950, %2949) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb529] : () -> ()
  ^bb527:
    %2951 = "llvm.getelementptr"(%2947) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2952 = "mini.checkflag"(%2951) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2953 = "llvm.load"(%2952) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2953) [^bb528, ^bb528] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb529:
    %2954 = "llvm.extractvalue"(%2946) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2955 = "llvm.load"(%2949) : (!llvm.ptr) -> i32
    %2956 = "llvm.getelementptr"(%2954, %2955) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2957 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2958 = "llvm.getelementptr"(%2956, %2957) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2958) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb530(%2959 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2960 : !llvm.ptr):
    %2961 = "mini.invariant"(%2960) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2962 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb531] : () -> ()
  ^bb532:
    %2963 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
    "llvm.store"(%2963, %2962) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb533] : () -> ()
  ^bb531:
    %2964 = "llvm.getelementptr"(%2960) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2965 = "mini.checkflag"(%2964) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2966 = "llvm.load"(%2965) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2966) [^bb532, ^bb532] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb533:
    %2967 = "llvm.extractvalue"(%2959) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2968 = "llvm.load"(%2962) : (!llvm.ptr) -> i32
    %2969 = "llvm.getelementptr"(%2967, %2968) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2970 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2971 = "llvm.getelementptr"(%2969, %2970) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2971) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb534(%2972 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2973 : !llvm.ptr):
    %2974 = "mini.invariant"(%2973) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2975 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb535] : () -> ()
  ^bb536:
    %2976 = "llvm.mlir.constant"() <{"value" = 49 : i32}> : () -> i32
    "llvm.store"(%2976, %2975) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb537] : () -> ()
  ^bb535:
    %2977 = "llvm.getelementptr"(%2973) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2978 = "mini.checkflag"(%2977) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2979 = "llvm.load"(%2978) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2979) [^bb536, ^bb536] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb537:
    %2980 = "llvm.extractvalue"(%2972) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2981 = "llvm.load"(%2975) : (!llvm.ptr) -> i32
    %2982 = "llvm.getelementptr"(%2980, %2981) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2983 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2984 = "llvm.getelementptr"(%2982, %2983) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2984) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb538(%2985 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2986 : !llvm.ptr):
    %2987 = "mini.invariant"(%2986) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %2988 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb539] : () -> ()
  ^bb540:
    %2989 = "llvm.mlir.constant"() <{"value" = 50 : i32}> : () -> i32
    "llvm.store"(%2989, %2988) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb541] : () -> ()
  ^bb539:
    %2990 = "llvm.getelementptr"(%2986) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %2991 = "mini.checkflag"(%2990) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %2992 = "llvm.load"(%2991) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%2992) [^bb540, ^bb540] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb541:
    %2993 = "llvm.extractvalue"(%2985) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %2994 = "llvm.load"(%2988) : (!llvm.ptr) -> i32
    %2995 = "llvm.getelementptr"(%2993, %2994) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %2996 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %2997 = "llvm.getelementptr"(%2995, %2996) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%2997) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb542(%2998 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %2999 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3000 : !llvm.ptr):
    %3001 = "mini.wrap"(%2998) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %3002 = "hi.cast"(%3001) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %3003 = "hi.cast"(%3002) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%3003) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "String_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb543(%3004 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3005 : !llvm.ptr):
    %3006 = "mini.invariant"(%3005) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3007 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb544] : () -> ()
  ^bb544:
    %3008 = "llvm.mlir.constant"() <{"value" = 51 : i32}> : () -> i32
    "llvm.store"(%3008, %3007) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb545] : () -> ()
  ^bb545:
    %3009 = "llvm.extractvalue"(%3004) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3010 = "llvm.load"(%3007) : (!llvm.ptr) -> i32
    %3011 = "llvm.getelementptr"(%3009, %3010) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<77 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3012 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3013 = "llvm.getelementptr"(%3011, %3012) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3013) : (!llvm.ptr) -> ()
  }) {"func_name" = "String_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Character", "types" = [i8]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Character_getter_byte", "types" = [i8], "offset" = 0 : i64, "original_type" = i8, "specialized_name" = "i8_typ", "parameterization" = "_parameterization_i8"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Character_setter_byte", "types" = [i8], "offset" = 0 : i64, "original_type" = i8, "specialized_name" = "i8_typ", "parameterization" = "_parameterization_i8"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Character_field_byte", "getter_name" = "Character_getter_byte", "setter_name" = "Character_setter_byte"} : () -> ()
  "mini.func"() ({
  ^bb546(%3014 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3015 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3016 : !llvm.ptr):
    %3017 = "mini.wrap"(%3014) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Character">
    %3018 = "hi.cast"(%3017) {"from_typ" = !mini.fatptr<"Character">, "to_typ" = !mini.fatptr<"Character">, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!mini.fatptr<"Character">) -> !mini.fatptr<"Character">
    %3019 = "mini.get_field"(%3018) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i8} : (!mini.fatptr<"Character">) -> !mini.ptr<i8>
    %3020 = "hi.cast"(%3019) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
    "mini.return"(%3020) : (!mini.ptr<i8>) -> ()
  }) {"func_name" = "Character_byte_", "result_type" = i8, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb547(%3021 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3022 : !llvm.ptr):
    %3023 = "mini.invariant"(%3022) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3024 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb548] : () -> ()
  ^bb548:
    %3025 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%3025, %3024) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb549] : () -> ()
  ^bb549:
    %3026 = "llvm.extractvalue"(%3021) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3027 = "llvm.load"(%3024) : (!llvm.ptr) -> i32
    %3028 = "llvm.getelementptr"(%3026, %3027) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3029 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3030 = "llvm.getelementptr"(%3028, %3029) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3030) : (!llvm.ptr) -> ()
  }) {"func_name" = "Character_B_byte_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb550(%3031 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3032 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3033 : !llvm.ptr, %3034 : i8):
    %3035 = "mini.wrap"(%3031) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Character">
    %3036 = "hi.cast"(%3035) {"from_typ" = !mini.fatptr<"Character">, "to_typ" = !mini.fatptr<"Character">, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!mini.fatptr<"Character">) -> !mini.fatptr<"Character">
    %3037 = "mini.wrap"(%3034) : (i8) -> !mini.ptr<i8>
    %3038 = "hi.cast"(%3037) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
    %3039 = "hi.cast"(%3038) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
    "mini.set_field"(%3036, %3039) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = i8} : (!mini.fatptr<"Character">, !mini.ptr<i8>) -> ()
  }) {"func_name" = "Character_init_bytei8", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb551(%3040 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3041 : !llvm.ptr):
    %3042 = "mini.invariant"(%3041) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3043 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb552] : () -> ()
  ^bb553:
    %3044 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%3044, %3043) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb554] : () -> ()
  ^bb552:
    %3045 = "llvm.getelementptr"(%3041) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3046 = "mini.checkflag"(%3045) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3047 = "llvm.load"(%3046) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3047) [^bb553, ^bb553] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb554:
    %3048 = "llvm.extractvalue"(%3040) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3049 = "llvm.load"(%3043) : (!llvm.ptr) -> i32
    %3050 = "llvm.getelementptr"(%3048, %3049) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3051 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3052 = "llvm.getelementptr"(%3050, %3051) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3052) : (!llvm.ptr) -> ()
  }) {"func_name" = "Character_B_init_bytei8", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_StringIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "StringIterator_getter_str", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "StringIterator_setter_str", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "StringIterator_field_str", "getter_name" = "StringIterator_getter_str", "setter_name" = "StringIterator_setter_str"} : () -> ()
  "mini.getter_def"() {"meth_name" = "StringIterator_getter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "StringIterator_setter_index", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "StringIterator_field_index", "getter_name" = "StringIterator_getter_index", "setter_name" = "StringIterator_setter_index"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 2 : i32, "meth_name" = "StringIterator_field_StringIterator_0", "id_hierarchy" = ["Character"], "name_hierarchy" = ["Character"]} : () -> ()
  "mini.func"() ({
  ^bb555(%3053 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3054 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3055 : !llvm.ptr, %3056 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3057 = "mini.wrap"(%3053) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"StringIterator">
    %3058 = "hi.cast"(%3057) {"from_typ" = !mini.fatptr<"StringIterator">, "to_typ" = !mini.fatptr<"StringIterator">, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    %3059 = "mini.wrap"(%3056) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %3060 = "hi.cast"(%3059) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %3061 = "hi.cast"(%3060) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%3058, %3061) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"StringIterator">, !mini.fatptr<"String">) -> ()
    %3062 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3063 = "hi.cast"(%3062) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%3058, %3063) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "StringIterator_init_strString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb556(%3064 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3065 : !llvm.ptr):
    %3066 = "mini.invariant"(%3065) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3067 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb557] : () -> ()
  ^bb558:
    %3068 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%3068, %3067) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb559] : () -> ()
  ^bb557:
    %3069 = "llvm.getelementptr"(%3065) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3070 = "mini.checkflag"(%3069) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3071 = "llvm.load"(%3070) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3071) [^bb558, ^bb558] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb559:
    %3072 = "llvm.extractvalue"(%3064) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3073 = "llvm.load"(%3067) : (!llvm.ptr) -> i32
    %3074 = "llvm.getelementptr"(%3072, %3073) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3075 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3076 = "llvm.getelementptr"(%3074, %3075) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3076) : (!llvm.ptr) -> ()
  }) {"func_name" = "StringIterator_B_init_strString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb560(%3077 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3078 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3079 : !llvm.ptr):
    %3080 = "mini.wrap"(%3077) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"StringIterator">
    %3081 = "hi.cast"(%3080) {"from_typ" = !mini.fatptr<"StringIterator">, "to_typ" = !mini.fatptr<"StringIterator">, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    %3082 = "mini.get_field"(%3081) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
    %3083 = "mini.get_field"(%3081) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"String">
    %3084 = "mini.unwrap"(%3083) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3085 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3086 = "mini.method_call"(%3085, %3084) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %3087 = "hi.cast"(%3086) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3088 = "mini.unwrap"(%3082) : (!mini.ptr<i32>) -> i32
    %3089 = "mini.unwrap"(%3087) : (!mini.ptr<i32>) -> i32
    %3090 = "mini.comparison"(%3088, %3089) {"op" = "LT"} : (i32, i32) -> i1
    %3091 = "mini.wrap"(%3090) : (i1) -> !mini.ptr<i32>
    %3092 = "mini.unwrap"(%3091) : (!mini.ptr<i32>) -> i1
    "mini.if"(%3092) ({
      %3093 = "mini.get_field"(%3081) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
      %3094 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %3095 = "mini.unwrap"(%3093) : (!mini.ptr<i32>) -> i32
      %3096 = "mini.unwrap"(%3094) : (!mini.ptr<i32>) -> i32
      %3097 = "mini.arithmetic"(%3095, %3096) {"op" = "ADD"} : (i32, i32) -> i32
      %3098 = "mini.wrap"(%3097) : (i32) -> !mini.ptr<i32>
      %3099 = "hi.cast"(%3098) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.set_field"(%3081, %3099) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">, !mini.ptr<i32>) -> ()
      %3100 = "mini.get_field"(%3081) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"String">
      %3101 = "mini.unwrap"(%3100) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3102 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %3103 = "mini.method_call"(%3102, %3101) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %3104 = "hi.cast"(%3103) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %3105 = "mini.get_field"(%3081) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
      %3106 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %3107 = "mini.unwrap"(%3105) : (!mini.ptr<i32>) -> i32
      %3108 = "mini.unwrap"(%3106) : (!mini.ptr<i32>) -> i32
      %3109 = "mini.arithmetic"(%3107, %3108) {"op" = "SUB"} : (i32, i32) -> i32
      %3110 = "mini.wrap"(%3109) : (i32) -> !mini.ptr<i32>
      %3111 = "mini.buffer_get"(%3104, %3110) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %3112 = "mini.unwrap"(%3111) : (!mini.ptr<i8>) -> i8
      %3113 = "mini.new"() {"typ" = !llvm.struct<(i8)>, "class_name" = "Character", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Character">
      %3114 = "mini.get_field"(%3081) {"offset" = 0 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"String">
      %3115 = "mini.unwrap"(%3114) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3116 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %3117 = "mini.method_call"(%3116, %3115) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %3118 = "hi.cast"(%3117) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %3119 = "mini.get_field"(%3081) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"StringIterator">) -> !mini.ptr<i32>
      %3120 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %3121 = "mini.unwrap"(%3119) : (!mini.ptr<i32>) -> i32
      %3122 = "mini.unwrap"(%3120) : (!mini.ptr<i32>) -> i32
      %3123 = "mini.arithmetic"(%3121, %3122) {"op" = "SUB"} : (i32, i32) -> i32
      %3124 = "mini.wrap"(%3123) : (i32) -> !mini.ptr<i32>
      %3125 = "mini.buffer_get"(%3118, %3124) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>) -> !mini.ptr<i8>
      %3126 = "hi.cast"(%3125) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
      %3127 = "mini.unwrap"(%3126) : (!mini.ptr<i8>) -> i8
      %3128 = "mini.unwrap"(%3113) : (!mini.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3129 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["i8"]} : () -> !llvm.ptr
      %3130 = "mini.parameterizations_array"(%3129) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%3130, %3128, %3127) {"offset" = 2 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i8) -> ()
      %3131 = "hi.cast"(%3113) {"from_typ" = !mini.fatptr<"Character">, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "Character", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Character">) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      "mini.return"(%3131) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %3132 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %3133 = "hi.cast"(%3132) {"from_typ" = !mini.nil, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    "mini.return"(%3133) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
  }) {"func_name" = "StringIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb561(%3134 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3135 : !llvm.ptr):
    %3136 = "mini.invariant"(%3135) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3137 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb562] : () -> ()
  ^bb562:
    %3138 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%3138, %3137) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb563] : () -> ()
  ^bb563:
    %3139 = "llvm.extractvalue"(%3134) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3140 = "llvm.load"(%3137) : (!llvm.ptr) -> i32
    %3141 = "llvm.getelementptr"(%3139, %3140) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3142 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3143 = "llvm.getelementptr"(%3141, %3142) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3143) : (!llvm.ptr) -> ()
  }) {"func_name" = "StringIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Exception", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Exception_getter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Exception_setter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Exception_field_line_number", "getter_name" = "Exception_getter_line_number", "setter_name" = "Exception_setter_line_number"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Exception_getter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Exception_setter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Exception_field_file_name", "getter_name" = "Exception_getter_file_name", "setter_name" = "Exception_setter_file_name"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Exception_getter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Exception_setter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Exception_field_message", "getter_name" = "Exception_getter_message", "setter_name" = "Exception_setter_message"} : () -> ()
  "mini.func"() ({
  ^bb564(%3144 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3145 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3146 : !llvm.ptr, %3147 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3148 = "mini.wrap"(%3144) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %3149 = "hi.cast"(%3148) {"from_typ" = !mini.fatptr<"Exception">, "to_typ" = !mini.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %3150 = "mini.wrap"(%3147) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %3151 = "hi.cast"(%3150) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %3152 = "hi.cast"(%3151) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%3149, %3152) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
    %3153 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3154 = "hi.cast"(%3153) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%3149, %3154) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Exception">, !mini.ptr<i32>) -> ()
    %3155 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3156 = "mini.create_buffer"(%3155) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3157 = "hi.cast"(%3156) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %3158 = "mini.refer"(%3157) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3159 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %3160 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%3158, %3160, %3159) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %3161 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3162 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3163 = "mini.unwrap"(%3158) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3164 = "mini.unwrap"(%3161) : (!mini.ptr<i32>) -> i32
    %3165 = "mini.unwrap"(%3162) : (!mini.ptr<i32>) -> i32
    %3166 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %3167 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3168 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3169 = "hi.cast"(%3158) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3170 = "mini.unwrap"(%3169) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3171 = "hi.cast"(%3167) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3172 = "mini.unwrap"(%3171) : (!mini.ptr<i32>) -> i32
    %3173 = "hi.cast"(%3168) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3174 = "mini.unwrap"(%3173) : (!mini.ptr<i32>) -> i32
    %3175 = "mini.unwrap"(%3166) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3176 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %3177 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3178 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3179 = "mini.parameterizations_array"(%3176, %3177, %3178) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3179, %3175, %3170, %3172, %3174) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %3180 = "hi.cast"(%3166) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%3149, %3180) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "Exception_init_messageString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb565(%3181 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3182 : !llvm.ptr):
    %3183 = "mini.invariant"(%3182) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3184 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb566] : () -> ()
  ^bb567:
    %3185 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%3185, %3184) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb568] : () -> ()
  ^bb566:
    %3186 = "llvm.getelementptr"(%3182) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3187 = "mini.checkflag"(%3186) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3188 = "llvm.load"(%3187) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3188) [^bb567, ^bb567] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb568:
    %3189 = "llvm.extractvalue"(%3181) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3190 = "llvm.load"(%3184) : (!llvm.ptr) -> i32
    %3191 = "llvm.getelementptr"(%3189, %3190) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3192 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3193 = "llvm.getelementptr"(%3191, %3192) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3193) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb569(%3194 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3195 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3196 : !llvm.ptr):
    %3197 = "mini.wrap"(%3194) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %3198 = "hi.cast"(%3197) {"from_typ" = !mini.fatptr<"Exception">, "to_typ" = !mini.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %3199 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3200 = "hi.cast"(%3199) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%3198, %3200) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Exception">, !mini.ptr<i32>) -> ()
    %3201 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3202 = "mini.create_buffer"(%3201) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3203 = "hi.cast"(%3202) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %3204 = "mini.refer"(%3203) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3205 = "mini.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "<None>"} : () -> !llvm.ptr
    %3206 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%3204, %3206, %3205) {"typ" = !llvm.array<6 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %3207 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3208 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3209 = "mini.unwrap"(%3204) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3210 = "mini.unwrap"(%3207) : (!mini.ptr<i32>) -> i32
    %3211 = "mini.unwrap"(%3208) : (!mini.ptr<i32>) -> i32
    %3212 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %3213 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3214 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3215 = "hi.cast"(%3204) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3216 = "mini.unwrap"(%3215) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3217 = "hi.cast"(%3213) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3218 = "mini.unwrap"(%3217) : (!mini.ptr<i32>) -> i32
    %3219 = "hi.cast"(%3214) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3220 = "mini.unwrap"(%3219) : (!mini.ptr<i32>) -> i32
    %3221 = "mini.unwrap"(%3212) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3222 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %3223 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3224 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3225 = "mini.parameterizations_array"(%3222, %3223, %3224) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3225, %3221, %3216, %3218, %3220) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %3226 = "hi.cast"(%3212) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%3198, %3226) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
    %3227 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3228 = "mini.create_buffer"(%3227) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3229 = "hi.cast"(%3228) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %3230 = "mini.refer"(%3229) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3231 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %3232 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%3230, %3232, %3231) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %3233 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3234 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3235 = "mini.unwrap"(%3230) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3236 = "mini.unwrap"(%3233) : (!mini.ptr<i32>) -> i32
    %3237 = "mini.unwrap"(%3234) : (!mini.ptr<i32>) -> i32
    %3238 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %3239 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3240 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3241 = "hi.cast"(%3230) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3242 = "mini.unwrap"(%3241) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3243 = "hi.cast"(%3239) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3244 = "mini.unwrap"(%3243) : (!mini.ptr<i32>) -> i32
    %3245 = "hi.cast"(%3240) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3246 = "mini.unwrap"(%3245) : (!mini.ptr<i32>) -> i32
    %3247 = "mini.unwrap"(%3238) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3248 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %3249 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3250 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3251 = "mini.parameterizations_array"(%3248, %3249, %3250) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3251, %3247, %3242, %3244, %3246) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %3252 = "hi.cast"(%3238) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%3198, %3252) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "Exception_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb570(%3253 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3254 : !llvm.ptr):
    %3255 = "mini.invariant"(%3254) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3256 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb571] : () -> ()
  ^bb571:
    %3257 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%3257, %3256) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb572] : () -> ()
  ^bb572:
    %3258 = "llvm.extractvalue"(%3253) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3259 = "llvm.load"(%3256) : (!llvm.ptr) -> i32
    %3260 = "llvm.getelementptr"(%3258, %3259) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3261 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3262 = "llvm.getelementptr"(%3260, %3261) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3262) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb573(%3263 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3264 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3265 : !llvm.ptr, %3266 : i32, %3267 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %3268 = "mini.wrap"(%3263) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %3269 = "hi.cast"(%3268) {"from_typ" = !mini.fatptr<"Exception">, "to_typ" = !mini.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %3270 = "mini.wrap"(%3266) : (i32) -> !mini.ptr<i32>
    %3271 = "hi.cast"(%3270) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3272 = "hi.cast"(%3271) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%3269, %3272) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Exception">, !mini.ptr<i32>) -> ()
    %3273 = "mini.wrap"(%3267) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %3274 = "hi.cast"(%3273) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %3275 = "hi.cast"(%3274) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%3269, %3275) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Exception">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "Exception_set_info_line_numberi32_file_nameString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb574(%3276 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3277 : !llvm.ptr):
    %3278 = "mini.invariant"(%3277) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3279 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb575] : () -> ()
  ^bb576:
    %3280 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%3280, %3279) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb577] : () -> ()
  ^bb578:
    %3281 = "llvm.getelementptr"(%3277) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3282 = "mini.checkflag"(%3281) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3283 = "llvm.load"(%3282) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3283) [^bb576, ^bb576] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb575:
    %3284 = "llvm.getelementptr"(%3277) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3285 = "mini.checkflag"(%3284) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3286 = "llvm.load"(%3285) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3286) [^bb578, ^bb578] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb577:
    %3287 = "llvm.extractvalue"(%3276) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3288 = "llvm.load"(%3279) : (!llvm.ptr) -> i32
    %3289 = "llvm.getelementptr"(%3287, %3288) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3290 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3291 = "llvm.getelementptr"(%3289, %3290) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3291) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_set_info_line_numberi32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb579(%3292 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3293 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3294 : !llvm.ptr):
    %3295 = "mini.wrap"(%3292) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %3296 = "hi.cast"(%3295) {"from_typ" = !mini.fatptr<"Exception">, "to_typ" = !mini.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %3297 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3298 = "mini.create_buffer"(%3297) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3299 = "hi.cast"(%3298) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %3300 = "mini.refer"(%3299) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3301 = "mini.literal"() {"typ" = !llvm.array<9 x i8>, "value" = "---------"} : () -> !llvm.ptr
    %3302 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%3300, %3302, %3301) {"typ" = !llvm.array<9 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %3303 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3304 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3305 = "mini.unwrap"(%3300) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3306 = "mini.unwrap"(%3303) : (!mini.ptr<i32>) -> i32
    %3307 = "mini.unwrap"(%3304) : (!mini.ptr<i32>) -> i32
    %3308 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %3309 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3310 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3311 = "hi.cast"(%3300) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3312 = "mini.unwrap"(%3311) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3313 = "hi.cast"(%3309) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3314 = "mini.unwrap"(%3313) : (!mini.ptr<i32>) -> i32
    %3315 = "hi.cast"(%3310) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3316 = "mini.unwrap"(%3315) : (!mini.ptr<i32>) -> i32
    %3317 = "mini.unwrap"(%3308) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3318 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %3319 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3320 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3321 = "mini.parameterizations_array"(%3318, %3319, %3320) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3321, %3317, %3312, %3314, %3316) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %3322 = "mini.unwrap"(%3308) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3323 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3324 = "mini.method_call"(%3323, %3322) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %3325 = "hi.cast"(%3324) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3326 = "mini.print"(%3325) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %3327 = "mini.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3328 = "mini.create_buffer"(%3327) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3329 = "hi.cast"(%3328) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %3330 = "mini.refer"(%3329) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3331 = "mini.literal"() {"typ" = !llvm.array<26 x i8>, "value" = "Exception thrown from file"} : () -> !llvm.ptr
    %3332 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%3330, %3332, %3331) {"typ" = !llvm.array<26 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %3333 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3334 = "mini.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3335 = "mini.unwrap"(%3330) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3336 = "mini.unwrap"(%3333) : (!mini.ptr<i32>) -> i32
    %3337 = "mini.unwrap"(%3334) : (!mini.ptr<i32>) -> i32
    %3338 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %3339 = "mini.literal"() {"value" = 26 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3340 = "mini.literal"() {"value" = 27 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3341 = "hi.cast"(%3330) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3342 = "mini.unwrap"(%3341) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3343 = "hi.cast"(%3339) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3344 = "mini.unwrap"(%3343) : (!mini.ptr<i32>) -> i32
    %3345 = "hi.cast"(%3340) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3346 = "mini.unwrap"(%3345) : (!mini.ptr<i32>) -> i32
    %3347 = "mini.unwrap"(%3338) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3348 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %3349 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3350 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3351 = "mini.parameterizations_array"(%3348, %3349, %3350) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3351, %3347, %3342, %3344, %3346) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %3352 = "mini.unwrap"(%3338) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3353 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3354 = "mini.method_call"(%3353, %3352) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %3355 = "hi.cast"(%3354) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3356 = "mini.print"(%3355) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %3357 = "mini.get_field"(%3296) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"String">
    %3358 = "mini.unwrap"(%3357) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3359 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3360 = "mini.method_call"(%3359, %3358) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %3361 = "hi.cast"(%3360) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3362 = "mini.print"(%3361) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %3363 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3364 = "mini.create_buffer"(%3363) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3365 = "hi.cast"(%3364) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %3366 = "mini.refer"(%3365) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3367 = "mini.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "At line"} : () -> !llvm.ptr
    %3368 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%3366, %3368, %3367) {"typ" = !llvm.array<7 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %3369 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3370 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3371 = "mini.unwrap"(%3366) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3372 = "mini.unwrap"(%3369) : (!mini.ptr<i32>) -> i32
    %3373 = "mini.unwrap"(%3370) : (!mini.ptr<i32>) -> i32
    %3374 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %3375 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3376 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3377 = "hi.cast"(%3366) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3378 = "mini.unwrap"(%3377) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3379 = "hi.cast"(%3375) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3380 = "mini.unwrap"(%3379) : (!mini.ptr<i32>) -> i32
    %3381 = "hi.cast"(%3376) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3382 = "mini.unwrap"(%3381) : (!mini.ptr<i32>) -> i32
    %3383 = "mini.unwrap"(%3374) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3384 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %3385 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3386 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3387 = "mini.parameterizations_array"(%3384, %3385, %3386) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3387, %3383, %3378, %3380, %3382) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %3388 = "mini.unwrap"(%3374) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3389 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3390 = "mini.method_call"(%3389, %3388) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %3391 = "hi.cast"(%3390) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3392 = "mini.print"(%3391) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %3393 = "mini.get_field"(%3296) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Exception">) -> !mini.ptr<i32>
    %3394 = "mini.print"(%3393) {"typ" = i32} : (!mini.ptr<i32>) -> i32
    %3395 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3396 = "mini.create_buffer"(%3395) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3397 = "hi.cast"(%3396) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %3398 = "mini.refer"(%3397) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3399 = "mini.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "With message"} : () -> !llvm.ptr
    %3400 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%3398, %3400, %3399) {"typ" = !llvm.array<12 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %3401 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3402 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3403 = "mini.unwrap"(%3398) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3404 = "mini.unwrap"(%3401) : (!mini.ptr<i32>) -> i32
    %3405 = "mini.unwrap"(%3402) : (!mini.ptr<i32>) -> i32
    %3406 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %3407 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3408 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3409 = "hi.cast"(%3398) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3410 = "mini.unwrap"(%3409) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3411 = "hi.cast"(%3407) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3412 = "mini.unwrap"(%3411) : (!mini.ptr<i32>) -> i32
    %3413 = "hi.cast"(%3408) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3414 = "mini.unwrap"(%3413) : (!mini.ptr<i32>) -> i32
    %3415 = "mini.unwrap"(%3406) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3416 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %3417 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3418 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3419 = "mini.parameterizations_array"(%3416, %3417, %3418) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3419, %3415, %3410, %3412, %3414) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %3420 = "mini.unwrap"(%3406) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3421 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3422 = "mini.method_call"(%3421, %3420) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %3423 = "hi.cast"(%3422) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3424 = "mini.print"(%3423) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    %3425 = "mini.unwrap"(%3296) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3426 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%3426, %3425) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %3427 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3428 = "mini.create_buffer"(%3427) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3429 = "hi.cast"(%3428) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %3430 = "mini.refer"(%3429) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3431 = "mini.literal"() {"typ" = !llvm.array<9 x i8>, "value" = "---------"} : () -> !llvm.ptr
    %3432 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%3430, %3432, %3431) {"typ" = !llvm.array<9 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %3433 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3434 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3435 = "mini.unwrap"(%3430) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3436 = "mini.unwrap"(%3433) : (!mini.ptr<i32>) -> i32
    %3437 = "mini.unwrap"(%3434) : (!mini.ptr<i32>) -> i32
    %3438 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %3439 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3440 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3441 = "hi.cast"(%3430) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3442 = "mini.unwrap"(%3441) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3443 = "hi.cast"(%3439) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3444 = "mini.unwrap"(%3443) : (!mini.ptr<i32>) -> i32
    %3445 = "hi.cast"(%3440) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3446 = "mini.unwrap"(%3445) : (!mini.ptr<i32>) -> i32
    %3447 = "mini.unwrap"(%3438) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3448 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %3449 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3450 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3451 = "mini.parameterizations_array"(%3448, %3449, %3450) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3451, %3447, %3442, %3444, %3446) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %3452 = "mini.unwrap"(%3438) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3453 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3454 = "mini.method_call"(%3453, %3452) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %3455 = "hi.cast"(%3454) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3456 = "mini.print"(%3455) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "Exception_report_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb580(%3457 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3458 : !llvm.ptr):
    %3459 = "mini.invariant"(%3458) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3460 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb581] : () -> ()
  ^bb581:
    %3461 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%3461, %3460) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb582] : () -> ()
  ^bb582:
    %3462 = "llvm.extractvalue"(%3457) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3463 = "llvm.load"(%3460) : (!llvm.ptr) -> i32
    %3464 = "llvm.getelementptr"(%3462, %3463) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3465 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3466 = "llvm.getelementptr"(%3464, %3465) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3466) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_report_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb583(%3467 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3468 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3469 : !llvm.ptr):
    %3470 = "mini.wrap"(%3467) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Exception">
    %3471 = "hi.cast"(%3470) {"from_typ" = !mini.fatptr<"Exception">, "to_typ" = !mini.fatptr<"Exception">, "from_typ_name" = "Exception", "to_typ_name" = "Exception"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"Exception">
    %3472 = "mini.get_field"(%3471) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"Exception">) -> !mini.fatptr<"String">
    %3473 = "mini.unwrap"(%3472) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3474 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3475 = "mini.method_call"(%3474, %3473) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %3476 = "hi.cast"(%3475) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3477 = "mini.print"(%3476) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "Exception_print_message_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb584(%3478 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3479 : !llvm.ptr):
    %3480 = "mini.invariant"(%3479) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3481 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb585] : () -> ()
  ^bb585:
    %3482 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%3482, %3481) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb586] : () -> ()
  ^bb586:
    %3483 = "llvm.extractvalue"(%3478) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3484 = "llvm.load"(%3481) : (!llvm.ptr) -> i32
    %3485 = "llvm.getelementptr"(%3483, %3484) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3486 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3487 = "llvm.getelementptr"(%3485, %3486) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3487) : (!llvm.ptr) -> ()
  }) {"func_name" = "Exception_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb587(%3488 : !llvm.struct<(!llvm.ptr)>):
    %3489 = "mini.wrap"(%3488) : (!llvm.struct<(!llvm.ptr)>) -> !mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>
    %3490 = "hi.cast"(%3489) {"from_typ" = !mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>, "to_typ" = !mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>, "from_typ_name" = "coroutine_typ", "to_typ_name" = "coroutine_typ"} : (!mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>) -> !mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>
    %3491 = "llvm.load"(%3490) : (!mini.coroutine<[], !mini.any, !mini.fatptr<"Exception">>) -> !llvm.ptr
    %3492 = "mini.coro_get_result"(%3491) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i160)>
    %3493 = "mini.wrap"(%3492) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %3494 = "mini.checkflag"(%3493) {"typ_name" = "Exception"} : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !mini.ptr<i1>
    %3495 = "mini.unwrap"(%3494) : (!mini.ptr<i1>) -> i1
    %3496 = "hi.cast"(%3493) {"from_typ" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, "to_typ" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    "mini.if"(%3495) ({
      %3497 = "hi.cast"(%3496) {"from_typ" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, "to_typ" = !mini.fatptr<"Exception">, "from_typ_name" = "union_typ", "to_typ_name" = "Exception"} : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !mini.fatptr<"Exception">
      %3498 = "mini.unwrap"(%3497) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3499 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%3499, %3498) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %3500 = "hi.cast"(%3497) {"from_typ" = !mini.fatptr<"Exception">, "to_typ" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Exception">) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
      "mini.assign"(%3496, %3500) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "report_exception", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_IO", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb588(%3501 : !llvm.ptr, %3502 : !llvm.struct<(!llvm.ptr, i160)>):
    %3503 = "mini.wrap"(%3502) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %3504 = "hi.cast"(%3503) {"from_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %3505 = "mini.print"(%3504) {"typ" = i32} : (!mini.ptr<i32>) -> i32
  }) {"func_name" = "IO__Self_print_xi32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb589(%3506 : !llvm.ptr, %3507 : !llvm.struct<(!llvm.ptr, i160)>):
    %3508 = "mini.wrap"(%3507) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %3509 = "hi.cast"(%3508) {"from_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "union_typ", "to_typ_name" = "bool_typ"} : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !mini.ptr<i1>
    %3510 = "mini.unwrap"(%3509) : (!mini.ptr<i1>) -> i1
    "mini.if"(%3510) ({
      %3511 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %3512 = "mini.create_buffer"(%3511) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %3513 = "hi.cast"(%3512) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
      %3514 = "mini.refer"(%3513) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %3515 = "mini.literal"() {"typ" = !llvm.array<4 x i8>, "value" = "true"} : () -> !llvm.ptr
      %3516 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%3514, %3516, %3515) {"typ" = !llvm.array<4 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %3517 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %3518 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %3519 = "mini.unwrap"(%3514) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %3520 = "mini.unwrap"(%3517) : (!mini.ptr<i32>) -> i32
      %3521 = "mini.unwrap"(%3518) : (!mini.ptr<i32>) -> i32
      %3522 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %3523 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %3524 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %3525 = "hi.cast"(%3514) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %3526 = "mini.unwrap"(%3525) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %3527 = "hi.cast"(%3523) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %3528 = "mini.unwrap"(%3527) : (!mini.ptr<i32>) -> i32
      %3529 = "hi.cast"(%3524) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %3530 = "mini.unwrap"(%3529) : (!mini.ptr<i32>) -> i32
      %3531 = "mini.unwrap"(%3522) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3532 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %3533 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %3534 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %3535 = "mini.parameterizations_array"(%3532, %3533, %3534) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%3535, %3531, %3526, %3528, %3530) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %3536 = "mini.unwrap"(%3522) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3537 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %3538 = "mini.method_call"(%3537, %3536) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %3539 = "hi.cast"(%3538) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %3540 = "mini.print"(%3539) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    }, {
      %3541 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %3542 = "mini.create_buffer"(%3541) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %3543 = "hi.cast"(%3542) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
      %3544 = "mini.refer"(%3543) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %3545 = "mini.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "false"} : () -> !llvm.ptr
      %3546 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%3544, %3546, %3545) {"typ" = !llvm.array<5 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %3547 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %3548 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %3549 = "mini.unwrap"(%3544) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %3550 = "mini.unwrap"(%3547) : (!mini.ptr<i32>) -> i32
      %3551 = "mini.unwrap"(%3548) : (!mini.ptr<i32>) -> i32
      %3552 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %3553 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %3554 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %3555 = "hi.cast"(%3544) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %3556 = "mini.unwrap"(%3555) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %3557 = "hi.cast"(%3553) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %3558 = "mini.unwrap"(%3557) : (!mini.ptr<i32>) -> i32
      %3559 = "hi.cast"(%3554) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %3560 = "mini.unwrap"(%3559) : (!mini.ptr<i32>) -> i32
      %3561 = "mini.unwrap"(%3552) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3562 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %3563 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %3564 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %3565 = "mini.parameterizations_array"(%3562, %3563, %3564) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%3565, %3561, %3556, %3558, %3560) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %3566 = "mini.unwrap"(%3552) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %3567 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %3568 = "mini.method_call"(%3567, %3566) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
      %3569 = "hi.cast"(%3568) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %3570 = "mini.print"(%3569) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
    }) : (i1) -> ()
  }) {"func_name" = "IO__Self_print_xi1", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb590(%3571 : !llvm.ptr, %3572 : !llvm.struct<(!llvm.ptr, i160)>):
    %3573 = "mini.wrap"(%3572) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %3574 = "hi.cast"(%3573) {"from_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "union_typ", "to_typ_name" = "i8_typ"} : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !mini.ptr<i8>
    %3575 = "mini.print"(%3574) {"typ" = i8} : (!mini.ptr<i8>) -> i32
  }) {"func_name" = "IO__Self_print_xi8", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb591(%3576 : !llvm.ptr, %3577 : !llvm.struct<(!llvm.ptr, i160)>):
    %3578 = "mini.wrap"(%3577) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %3579 = "hi.cast"(%3578) {"from_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "to_typ" = !mini.fatptr<"Character">, "from_typ_name" = "union_typ", "to_typ_name" = "Character"} : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !mini.fatptr<"Character">
    %3580 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3581 = "mini.create_buffer"(%3580) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3582 = "hi.cast"(%3581) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %3583 = "mini.refer"(%3582) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3584 = "mini.literal"() {"value" = 0 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %3585 = "hi.cast"(%3584) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
    %3586 = "mini.unwrap"(%3579) : (!mini.fatptr<"Character">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3587 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3588 = "mini.method_call"(%3587, %3586) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = i8, "ret_type_unq" = i8} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i8>
    %3589 = "hi.cast"(%3588) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
    %3590 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3591 = "hi.cast"(%3589) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
    "mini.buffer_set"(%3583, %3590, %3591) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
    %3592 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3593 = "hi.cast"(%3585) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
    "mini.buffer_set"(%3583, %3592, %3593) {"typ" = i8} : (!mini.buffer<!mini.ptr<i8>>, !mini.ptr<i32>, !mini.ptr<i8>) -> ()
    %3594 = "mini.print"(%3583) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xCharacter", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb592(%3595 : !llvm.ptr, %3596 : !llvm.struct<(!llvm.ptr, i160)>):
    %3597 = "mini.wrap"(%3596) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %3598 = "hi.cast"(%3597) {"from_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i64>, "from_typ_name" = "union_typ", "to_typ_name" = "i64_typ"} : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !mini.ptr<i64>
    %3599 = "mini.print"(%3598) {"typ" = i64} : (!mini.ptr<i64>) -> i32
  }) {"func_name" = "IO__Self_print_xi64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb593(%3600 : !llvm.ptr, %3601 : !llvm.struct<(!llvm.ptr, i160)>):
    %3602 = "mini.wrap"(%3601) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %3603 = "hi.cast"(%3602) {"from_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "to_typ" = !mini.nil, "from_typ_name" = "union_typ", "to_typ_name" = "nil_typ"} : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !mini.nil
    %3604 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3605 = "mini.create_buffer"(%3604) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %3606 = "hi.cast"(%3605) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %3607 = "mini.refer"(%3606) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3608 = "mini.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "nil"} : () -> !llvm.ptr
    %3609 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%3607, %3609, %3608) {"typ" = !llvm.array<3 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %3610 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3611 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3612 = "mini.unwrap"(%3607) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3613 = "mini.unwrap"(%3610) : (!mini.ptr<i32>) -> i32
    %3614 = "mini.unwrap"(%3611) : (!mini.ptr<i32>) -> i32
    %3615 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %3616 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3617 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3618 = "hi.cast"(%3607) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3619 = "mini.unwrap"(%3618) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %3620 = "hi.cast"(%3616) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3621 = "mini.unwrap"(%3620) : (!mini.ptr<i32>) -> i32
    %3622 = "hi.cast"(%3617) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %3623 = "mini.unwrap"(%3622) : (!mini.ptr<i32>) -> i32
    %3624 = "mini.unwrap"(%3615) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3625 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %3626 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3627 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %3628 = "mini.parameterizations_array"(%3625, %3626, %3627) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%3628, %3624, %3619, %3621, %3623) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %3629 = "mini.unwrap"(%3615) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3630 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3631 = "mini.method_call"(%3630, %3629) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %3632 = "hi.cast"(%3631) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3633 = "mini.print"(%3632) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xNil", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb594(%3634 : !llvm.ptr, %3635 : !llvm.struct<(!llvm.ptr, i160)>):
    %3636 = "mini.wrap"(%3635) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %3637 = "hi.cast"(%3636) {"from_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "to_typ" = !mini.fatptr<"Representable">, "from_typ_name" = "union_typ", "to_typ_name" = "Representable"} : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !mini.fatptr<"Representable">
    %3638 = "mini.unwrap"(%3637) : (!mini.fatptr<"Representable">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3639 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3640 = "mini.method_call"(%3639, %3638) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %3641 = "hi.cast"(%3640) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %3642 = "mini.unwrap"(%3641) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3643 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3644 = "mini.method_call"(%3643, %3642) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %3645 = "hi.cast"(%3644) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3646 = "mini.print"(%3645) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xRepresentable", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb595(%3647 : !llvm.ptr, %3648 : !llvm.struct<(!llvm.ptr, i160)>):
    %3649 = "mini.wrap"(%3648) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %3650 = "hi.cast"(%3649) {"from_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %3651 = "mini.print"(%3650) {"typ" = f64} : (!mini.ptr<f64>) -> i32
  }) {"func_name" = "IO__Self_print_xf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb596(%3652 : !llvm.ptr, %3653 : !llvm.struct<(!llvm.ptr, i160)>):
    %3654 = "mini.wrap"(%3653) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %3655 = "hi.cast"(%3654) {"from_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "union_typ", "to_typ_name" = "String"} : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !mini.fatptr<"String">
    %3656 = "mini.unwrap"(%3655) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %3657 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %3658 = "mini.method_call"(%3657, %3656) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %3659 = "hi.cast"(%3658) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %3660 = "mini.print"(%3659) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> i32
  }) {"func_name" = "IO__Self_print_xString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb597(%3661 : !llvm.ptr):
    %3662 = "mini.invariant"(%3661) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3663 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb598] : () -> ()
  ^bb599:
    %3664 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%3664, %3663) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb600] : () -> ()
  ^bb601:
    %3665 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%3665, %3663) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb600] : () -> ()
  ^bb602:
    %3666 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%3666, %3663) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb600] : () -> ()
  ^bb603:
    %3667 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%3667, %3663) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb600] : () -> ()
  ^bb604:
    %3668 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%3668, %3663) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb600] : () -> ()
  ^bb605:
    %3669 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%3669, %3663) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb600] : () -> ()
  ^bb606:
    %3670 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%3670, %3663) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb600] : () -> ()
  ^bb607:
    %3671 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%3671, %3663) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb600] : () -> ()
  ^bb608:
    %3672 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%3672, %3663) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb600] : () -> ()
  ^bb598:
    %3673 = "llvm.getelementptr"(%3661) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3674 = "mini.checkflag"(%3673) {"typ_name" = "Character"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3675 = "llvm.load"(%3674) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3675) [^bb609, ^bb610] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb609:
    %3676 = "llvm.getelementptr"(%3661) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3677 = "mini.checkflag"(%3676) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3678 = "llvm.load"(%3677) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3678) [^bb610, ^bb599] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb610:
    %3679 = "llvm.getelementptr"(%3661) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3680 = "mini.checkflag"(%3679) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3681 = "llvm.load"(%3680) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3681) [^bb611, ^bb612] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb611:
    %3682 = "llvm.getelementptr"(%3661) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3683 = "mini.checkflag"(%3682) {"typ_name" = "Character"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3684 = "llvm.load"(%3683) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3684) [^bb612, ^bb601] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb612:
    %3685 = "llvm.getelementptr"(%3661) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3686 = "mini.checkflag"(%3685) {"typ_name" = "nil_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3687 = "llvm.load"(%3686) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3687) [^bb602, ^bb613] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb613:
    %3688 = "llvm.getelementptr"(%3661) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3689 = "mini.checkflag"(%3688) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3690 = "llvm.load"(%3689) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3690) [^bb603, ^bb614] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb614:
    %3691 = "llvm.getelementptr"(%3661) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3692 = "mini.checkflag"(%3691) {"typ_name" = "bool_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3693 = "llvm.load"(%3692) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3693) [^bb604, ^bb615] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb615:
    %3694 = "llvm.getelementptr"(%3661) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3695 = "mini.checkflag"(%3694) {"typ_name" = "Representable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3696 = "llvm.load"(%3695) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3696) [^bb616, ^bb617] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb616:
    %3697 = "llvm.getelementptr"(%3661) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3698 = "mini.checkflag"(%3697) {"typ_name" = "Character"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3699 = "llvm.load"(%3698) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3699) [^bb617, ^bb618] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb618:
    %3700 = "llvm.getelementptr"(%3661) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3701 = "mini.checkflag"(%3700) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3702 = "llvm.load"(%3701) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3702) [^bb617, ^bb605] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb617:
    %3703 = "llvm.getelementptr"(%3661) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3704 = "mini.checkflag"(%3703) {"typ_name" = "i8_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3705 = "llvm.load"(%3704) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3705) [^bb606, ^bb619] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb619:
    %3706 = "llvm.getelementptr"(%3661) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3707 = "mini.checkflag"(%3706) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3708 = "llvm.load"(%3707) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3708) [^bb607, ^bb620] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb620:
    %3709 = "llvm.getelementptr"(%3661) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3710 = "mini.checkflag"(%3709) {"typ_name" = "i64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3711 = "llvm.load"(%3710) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3711) [^bb608, ^bb608] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb600:
    %3712 = "mini.addr_of"() {"global_name" = @IO} : () -> !llvm.ptr
    %3713 = "llvm.load"(%3663) : (!llvm.ptr) -> i32
    %3714 = "llvm.getelementptr"(%3712, %3713) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3715 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3716 = "llvm.getelementptr"(%3714, %3715) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3716) : (!llvm.ptr) -> ()
  }) {"func_name" = "IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Math", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb621(%3717 : !llvm.ptr, %3718 : f64):
    %3719 = "mini.wrap"(%3718) : (f64) -> !mini.ptr<f64>
    %3720 = "hi.cast"(%3719) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    %3721 = "mini.unwrap"(%3720) : (!mini.ptr<f64>) -> f64
    %3722 = "mini.intrinsic"(%3721) {"call_name" = "llvm.sqrt.f64", "num_args" = 1 : i32} : (f64) -> f64
    %3723 = "mini.wrap"(%3722) : (f64) -> !mini.ptr<f64>
    %3724 = "hi.cast"(%3723) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    "mini.return"(%3724) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_sqrt_xf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb622(%3725 : !llvm.ptr):
    %3726 = "mini.invariant"(%3725) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3727 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb623] : () -> ()
  ^bb624:
    %3728 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%3728, %3727) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb625] : () -> ()
  ^bb623:
    %3729 = "llvm.getelementptr"(%3725) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3730 = "mini.checkflag"(%3729) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3731 = "llvm.load"(%3730) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3731) [^bb624, ^bb624] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb625:
    %3732 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %3733 = "llvm.load"(%3727) : (!llvm.ptr) -> i32
    %3734 = "llvm.getelementptr"(%3732, %3733) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3735 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3736 = "llvm.getelementptr"(%3734, %3735) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3736) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_sqrt_xf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb626(%3737 : !llvm.ptr, %3738 : !llvm.struct<(!llvm.ptr, i64)>):
    %3739 = "mini.wrap"(%3738) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %3740 = "hi.cast"(%3739) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %3741 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3742 = "mini.unwrap"(%3740) : (!mini.ptr<i32>) -> i32
    %3743 = "mini.unwrap"(%3741) : (!mini.ptr<i32>) -> i32
    %3744 = "mini.comparison"(%3742, %3743) {"op" = "GE"} : (i32, i32) -> i1
    %3745 = "mini.wrap"(%3744) : (i1) -> !mini.ptr<i32>
    %3746 = "mini.unwrap"(%3745) : (!mini.ptr<i32>) -> i1
    "mini.if"(%3746) ({
      %3747 = "hi.cast"(%3740) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
      "mini.return"(%3747) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %3748 = "mini.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %3749 = "mini.unwrap"(%3748) : (!mini.ptr<i32>) -> i32
    %3750 = "mini.unwrap"(%3740) : (!mini.ptr<i32>) -> i32
    %3751 = "mini.arithmetic"(%3749, %3750) {"op" = "MUL"} : (i32, i32) -> i32
    %3752 = "mini.wrap"(%3751) : (i32) -> !mini.ptr<i32>
    %3753 = "hi.cast"(%3752) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    "mini.return"(%3753) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
  }) {"func_name" = "Math__Self_abs_xi32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb627(%3754 : !llvm.ptr, %3755 : !llvm.struct<(!llvm.ptr, i64)>):
    %3756 = "mini.wrap"(%3755) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %3757 = "hi.cast"(%3756) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %3758 = "mini.literal"() {"value" = 0.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %3759 = "mini.unwrap"(%3757) : (!mini.ptr<f64>) -> f64
    %3760 = "mini.unwrap"(%3758) : (!mini.ptr<f64>) -> f64
    %3761 = "mini.comparison"(%3759, %3760) {"op" = "GE"} : (f64, f64) -> i1
    %3762 = "mini.wrap"(%3761) : (i1) -> !mini.ptr<f64>
    %3763 = "mini.unwrap"(%3762) : (!mini.ptr<f64>) -> i1
    "mini.if"(%3763) ({
      %3764 = "hi.cast"(%3757) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
      "mini.return"(%3764) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %3765 = "mini.literal"() {"value" = 0.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %3766 = "mini.literal"() {"value" = 1.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %3767 = "mini.unwrap"(%3765) : (!mini.ptr<f64>) -> f64
    %3768 = "mini.unwrap"(%3766) : (!mini.ptr<f64>) -> f64
    %3769 = "mini.arithmetic"(%3767, %3768) {"op" = "SUB"} : (f64, f64) -> f64
    %3770 = "mini.wrap"(%3769) : (f64) -> !mini.ptr<f64>
    %3771 = "mini.unwrap"(%3770) : (!mini.ptr<f64>) -> f64
    %3772 = "mini.unwrap"(%3757) : (!mini.ptr<f64>) -> f64
    %3773 = "mini.arithmetic"(%3771, %3772) {"op" = "MUL"} : (f64, f64) -> f64
    %3774 = "mini.wrap"(%3773) : (f64) -> !mini.ptr<f64>
    %3775 = "hi.cast"(%3774) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    "mini.return"(%3775) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
  }) {"func_name" = "Math__Self_abs_xf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb628(%3776 : !llvm.ptr):
    %3777 = "mini.invariant"(%3776) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3778 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb629] : () -> ()
  ^bb630:
    %3779 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%3779, %3778) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb631] : () -> ()
  ^bb632:
    %3780 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%3780, %3778) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb631] : () -> ()
  ^bb629:
    %3781 = "llvm.getelementptr"(%3776) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3782 = "mini.checkflag"(%3781) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3783 = "llvm.load"(%3782) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3783) [^bb630, ^bb633] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb633:
    %3784 = "llvm.getelementptr"(%3776) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3785 = "mini.checkflag"(%3784) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3786 = "llvm.load"(%3785) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3786) [^bb632, ^bb632] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb631:
    %3787 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %3788 = "llvm.load"(%3778) : (!llvm.ptr) -> i32
    %3789 = "llvm.getelementptr"(%3787, %3788) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3790 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3791 = "llvm.getelementptr"(%3789, %3790) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3791) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_abs_xi32__Self_abs_xf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb634(%3792 : !llvm.ptr, %3793 : !llvm.struct<(!llvm.ptr, i64)>, %3794 : !llvm.struct<(!llvm.ptr, i64)>):
    %3795 = "mini.wrap"(%3793) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %3796 = "hi.cast"(%3795) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %3797 = "mini.wrap"(%3794) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %3798 = "hi.cast"(%3797) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %3799 = "mini.unwrap"(%3796) : (!mini.ptr<i32>) -> i32
    %3800 = "mini.unwrap"(%3798) : (!mini.ptr<i32>) -> i32
    %3801 = "mini.comparison"(%3799, %3800) {"op" = "GT"} : (i32, i32) -> i1
    %3802 = "mini.wrap"(%3801) : (i1) -> !mini.ptr<i32>
    %3803 = "mini.unwrap"(%3802) : (!mini.ptr<i32>) -> i1
    "mini.if"(%3803) ({
      %3804 = "hi.cast"(%3796) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
      "mini.return"(%3804) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %3805 = "hi.cast"(%3798) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    "mini.return"(%3805) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
  }) {"func_name" = "Math__Self_max_ai32_bi32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb635(%3806 : !llvm.ptr, %3807 : !llvm.struct<(!llvm.ptr, i64)>, %3808 : !llvm.struct<(!llvm.ptr, i64)>):
    %3809 = "mini.wrap"(%3807) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %3810 = "hi.cast"(%3809) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %3811 = "mini.wrap"(%3808) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %3812 = "hi.cast"(%3811) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %3813 = "mini.unwrap"(%3810) : (!mini.ptr<f64>) -> f64
    %3814 = "mini.unwrap"(%3812) : (!mini.ptr<f64>) -> f64
    %3815 = "mini.comparison"(%3813, %3814) {"op" = "GT"} : (f64, f64) -> i1
    %3816 = "mini.wrap"(%3815) : (i1) -> !mini.ptr<f64>
    %3817 = "mini.unwrap"(%3816) : (!mini.ptr<f64>) -> i1
    "mini.if"(%3817) ({
      %3818 = "hi.cast"(%3810) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
      "mini.return"(%3818) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %3819 = "hi.cast"(%3812) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    "mini.return"(%3819) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
  }) {"func_name" = "Math__Self_max_af64_bf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb636(%3820 : !llvm.ptr):
    %3821 = "mini.invariant"(%3820) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3822 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb637] : () -> ()
  ^bb638:
    %3823 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%3823, %3822) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb639] : () -> ()
  ^bb640:
    %3824 = "llvm.getelementptr"(%3820) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3825 = "mini.checkflag"(%3824) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3826 = "llvm.load"(%3825) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3826) [^bb638, ^bb638] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb641:
    %3827 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%3827, %3822) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb639] : () -> ()
  ^bb642:
    %3828 = "llvm.getelementptr"(%3820) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3829 = "mini.checkflag"(%3828) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3830 = "llvm.load"(%3829) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3830) [^bb641, ^bb641] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb637:
    %3831 = "llvm.getelementptr"(%3820) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3832 = "mini.checkflag"(%3831) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3833 = "llvm.load"(%3832) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3833) [^bb640, ^bb643] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb643:
    %3834 = "llvm.getelementptr"(%3820) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3835 = "mini.checkflag"(%3834) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3836 = "llvm.load"(%3835) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3836) [^bb642, ^bb642] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb639:
    %3837 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %3838 = "llvm.load"(%3822) : (!llvm.ptr) -> i32
    %3839 = "llvm.getelementptr"(%3837, %3838) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3840 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3841 = "llvm.getelementptr"(%3839, %3840) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3841) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_max_ai32_bi32__Self_max_af64_bf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb644(%3842 : !llvm.ptr, %3843 : !llvm.struct<(!llvm.ptr, i64)>, %3844 : !llvm.struct<(!llvm.ptr, i64)>):
    %3845 = "mini.wrap"(%3843) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %3846 = "hi.cast"(%3845) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %3847 = "mini.wrap"(%3844) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %3848 = "hi.cast"(%3847) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %3849 = "mini.unwrap"(%3846) : (!mini.ptr<i32>) -> i32
    %3850 = "mini.unwrap"(%3848) : (!mini.ptr<i32>) -> i32
    %3851 = "mini.comparison"(%3849, %3850) {"op" = "LT"} : (i32, i32) -> i1
    %3852 = "mini.wrap"(%3851) : (i1) -> !mini.ptr<i32>
    %3853 = "mini.unwrap"(%3852) : (!mini.ptr<i32>) -> i1
    "mini.if"(%3853) ({
      %3854 = "hi.cast"(%3846) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
      "mini.return"(%3854) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %3855 = "hi.cast"(%3848) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    "mini.return"(%3855) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
  }) {"func_name" = "Math__Self_min_ai32_bi32", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb645(%3856 : !llvm.ptr, %3857 : !llvm.struct<(!llvm.ptr, i64)>, %3858 : !llvm.struct<(!llvm.ptr, i64)>):
    %3859 = "mini.wrap"(%3857) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %3860 = "hi.cast"(%3859) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %3861 = "mini.wrap"(%3858) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %3862 = "hi.cast"(%3861) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %3863 = "mini.unwrap"(%3860) : (!mini.ptr<f64>) -> f64
    %3864 = "mini.unwrap"(%3862) : (!mini.ptr<f64>) -> f64
    %3865 = "mini.comparison"(%3863, %3864) {"op" = "LT"} : (f64, f64) -> i1
    %3866 = "mini.wrap"(%3865) : (i1) -> !mini.ptr<f64>
    %3867 = "mini.unwrap"(%3866) : (!mini.ptr<f64>) -> i1
    "mini.if"(%3867) ({
      %3868 = "hi.cast"(%3860) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
      "mini.return"(%3868) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %3869 = "hi.cast"(%3862) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    "mini.return"(%3869) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> ()
  }) {"func_name" = "Math__Self_min_af64_bf64", "result_type" = !llvm.struct<(!llvm.ptr, i64)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb646(%3870 : !llvm.ptr):
    %3871 = "mini.invariant"(%3870) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3872 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb647] : () -> ()
  ^bb648:
    %3873 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%3873, %3872) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb649] : () -> ()
  ^bb650:
    %3874 = "llvm.getelementptr"(%3870) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3875 = "mini.checkflag"(%3874) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3876 = "llvm.load"(%3875) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3876) [^bb648, ^bb648] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb651:
    %3877 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%3877, %3872) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb649] : () -> ()
  ^bb652:
    %3878 = "llvm.getelementptr"(%3870) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3879 = "mini.checkflag"(%3878) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3880 = "llvm.load"(%3879) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3880) [^bb651, ^bb651] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb647:
    %3881 = "llvm.getelementptr"(%3870) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3882 = "mini.checkflag"(%3881) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3883 = "llvm.load"(%3882) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3883) [^bb650, ^bb653] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb653:
    %3884 = "llvm.getelementptr"(%3870) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3885 = "mini.checkflag"(%3884) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3886 = "llvm.load"(%3885) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3886) [^bb652, ^bb652] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb649:
    %3887 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %3888 = "llvm.load"(%3872) : (!llvm.ptr) -> i32
    %3889 = "llvm.getelementptr"(%3887, %3888) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3890 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3891 = "llvm.getelementptr"(%3889, %3890) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3891) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_min_ai32_bi32__Self_min_af64_bf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb654(%3892 : !llvm.ptr, %3893 : f64):
    %3894 = "mini.wrap"(%3893) : (f64) -> !mini.ptr<f64>
    %3895 = "hi.cast"(%3894) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    %3896 = "mini.unwrap"(%3895) : (!mini.ptr<f64>) -> f64
    %3897 = "mini.intrinsic"(%3896) {"call_name" = "llvm.round.f64", "num_args" = 1 : i32} : (f64) -> f64
    %3898 = "mini.wrap"(%3897) : (f64) -> !mini.ptr<f64>
    %3899 = "hi.cast"(%3898) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    "mini.return"(%3899) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_round_xf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb655(%3900 : !llvm.ptr):
    %3901 = "mini.invariant"(%3900) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3902 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb656] : () -> ()
  ^bb657:
    %3903 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%3903, %3902) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb658] : () -> ()
  ^bb656:
    %3904 = "llvm.getelementptr"(%3900) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3905 = "mini.checkflag"(%3904) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3906 = "llvm.load"(%3905) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3906) [^bb657, ^bb657] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb658:
    %3907 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %3908 = "llvm.load"(%3902) : (!llvm.ptr) -> i32
    %3909 = "llvm.getelementptr"(%3907, %3908) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3910 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3911 = "llvm.getelementptr"(%3909, %3910) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3911) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_round_xf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb659(%3912 : !llvm.ptr, %3913 : f64):
    %3914 = "mini.wrap"(%3913) : (f64) -> !mini.ptr<f64>
    %3915 = "hi.cast"(%3914) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    %3916 = "mini.unwrap"(%3915) : (!mini.ptr<f64>) -> f64
    %3917 = "mini.intrinsic"(%3916) {"call_name" = "llvm.floor.f64", "num_args" = 1 : i32} : (f64) -> f64
    %3918 = "mini.wrap"(%3917) : (f64) -> !mini.ptr<f64>
    %3919 = "hi.cast"(%3918) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    "mini.return"(%3919) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_floor_xf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb660(%3920 : !llvm.ptr):
    %3921 = "mini.invariant"(%3920) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3922 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb661] : () -> ()
  ^bb662:
    %3923 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%3923, %3922) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb663] : () -> ()
  ^bb661:
    %3924 = "llvm.getelementptr"(%3920) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3925 = "mini.checkflag"(%3924) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3926 = "llvm.load"(%3925) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3926) [^bb662, ^bb662] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb663:
    %3927 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %3928 = "llvm.load"(%3922) : (!llvm.ptr) -> i32
    %3929 = "llvm.getelementptr"(%3927, %3928) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3930 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3931 = "llvm.getelementptr"(%3929, %3930) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3931) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_floor_xf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb664(%3932 : !llvm.ptr, %3933 : f64):
    %3934 = "mini.wrap"(%3933) : (f64) -> !mini.ptr<f64>
    %3935 = "hi.cast"(%3934) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    %3936 = "mini.unwrap"(%3935) : (!mini.ptr<f64>) -> f64
    %3937 = "mini.intrinsic"(%3936) {"call_name" = "llvm.ceil.f64", "num_args" = 1 : i32} : (f64) -> f64
    %3938 = "mini.wrap"(%3937) : (f64) -> !mini.ptr<f64>
    %3939 = "hi.cast"(%3938) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    "mini.return"(%3939) : (!mini.ptr<f64>) -> ()
  }) {"func_name" = "Math__Self_ceiling_xf64", "result_type" = f64, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb665(%3940 : !llvm.ptr):
    %3941 = "mini.invariant"(%3940) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3942 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb666] : () -> ()
  ^bb667:
    %3943 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%3943, %3942) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb668] : () -> ()
  ^bb666:
    %3944 = "llvm.getelementptr"(%3940) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %3945 = "mini.checkflag"(%3944) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %3946 = "llvm.load"(%3945) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%3946) [^bb667, ^bb667] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb668:
    %3947 = "mini.addr_of"() {"global_name" = @Math} : () -> !llvm.ptr
    %3948 = "llvm.load"(%3942) : (!llvm.ptr) -> i32
    %3949 = "llvm.getelementptr"(%3947, %3948) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<17 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3950 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3951 = "llvm.getelementptr"(%3949, %3950) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3951) : (!llvm.ptr) -> ()
  }) {"func_name" = "Math_B__Self_ceiling_xf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Blocking", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb669(%3952 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3953 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3954 : !llvm.ptr):
    %3955 = "mini.wrap"(%3952) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Blocking">
    %3956 = "hi.cast"(%3955) {"from_typ" = !mini.fatptr<"Blocking">, "to_typ" = !mini.fatptr<"Blocking">, "from_typ_name" = "Blocking", "to_typ_name" = "Blocking"} : (!mini.fatptr<"Blocking">) -> !mini.fatptr<"Blocking">
  }) {"func_name" = "Blocking_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb670(%3957 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3958 : !llvm.ptr):
    %3959 = "mini.invariant"(%3958) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3960 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb671] : () -> ()
  ^bb671:
    %3961 = "llvm.mlir.constant"() <{"value" = 1 : i32}> : () -> i32
    "llvm.store"(%3961, %3960) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb672] : () -> ()
  ^bb672:
    %3962 = "llvm.extractvalue"(%3957) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3963 = "llvm.load"(%3960) : (!llvm.ptr) -> i32
    %3964 = "llvm.getelementptr"(%3962, %3963) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<2 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3965 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3966 = "llvm.getelementptr"(%3964, %3965) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3966) : (!llvm.ptr) -> ()
  }) {"func_name" = "Blocking_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Channel", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Channel_field_Channel_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Channel_getter_value", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Channel.T_subtype_Any_or_Nil"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Channel_setter_value", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Channel.T_subtype_Any_or_Nil"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Channel_field_value", "getter_name" = "Channel_getter_value", "setter_name" = "Channel_setter_value"} : () -> ()
  "mini.func"() ({
  ^bb673(%3967 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3968 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3969 : !llvm.ptr):
    %3970 = "mini.wrap"(%3967) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>
    %3971 = "hi.cast"(%3970) {"from_typ" = !mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>, "to_typ" = !mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>) -> !mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>
    %3972 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %3973 = "hi.cast"(%3972) {"from_typ" = !mini.nil, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>
    "mini.set_field"(%3971, %3973) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>, !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>) -> ()
  }) {"func_name" = "Channel_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb674(%3974 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3975 : !llvm.ptr):
    %3976 = "mini.invariant"(%3975) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %3977 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb675] : () -> ()
  ^bb675:
    %3978 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%3978, %3977) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb676] : () -> ()
  ^bb676:
    %3979 = "llvm.extractvalue"(%3974) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %3980 = "llvm.load"(%3977) : (!llvm.ptr) -> i32
    %3981 = "llvm.getelementptr"(%3979, %3980) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %3982 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %3983 = "llvm.getelementptr"(%3981, %3982) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%3983) : (!llvm.ptr) -> ()
  }) {"func_name" = "Channel_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb677(%3984 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3985 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %3986 : !llvm.ptr):
    %3987 = "mini.wrap"(%3984) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>
    %3988 = "hi.cast"(%3987) {"from_typ" = !mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>, "to_typ" = !mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>) -> !mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>
    "mini.while"() ({
      %3989 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
      %3990 = "mini.unwrap"(%3989) : (!mini.ptr<i1>) -> i1
    }, {
      %3991 = "mini.get_field"(%3988) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>
      %3992 = "mini.get_type_field"(%3988) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>) -> !mini.reified_type
      %3993 = "mini.checkflag"(%3991) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>) -> !mini.ptr<i1>
      %3994 = "mini.unwrap"(%3993) : (!mini.ptr<i1>) -> i1
      %3995 = "hi.cast"(%3991) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>
      "mini.if"(%3994) ({
        %3996 = "hi.cast"(%3995) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>, "to_typ" = !mini.type_param<"T", !mini.any, "Channel">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "Channel">
        %3997 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
        %3998 = "hi.cast"(%3997) {"from_typ" = !mini.nil, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>
        "mini.set_field"(%3988, %3998) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>, !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>) -> ()
        %3999 = "hi.cast"(%3996) {"from_typ" = !mini.type_param<"T", !mini.any, "Channel">, "to_typ" = !mini.type_param<"T", !mini.any, "Channel">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Channel">) -> !mini.type_param<"T", !mini.any, "Channel">
        "mini.return"(%3999) : (!mini.type_param<"T", !mini.any, "Channel">) -> ()
        %4000 = "hi.cast"(%3996) {"from_typ" = !mini.type_param<"T", !mini.any, "Channel">, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!mini.type_param<"T", !mini.any, "Channel">) -> !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>
        "mini.assign"(%3995, %4000) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>) -> ()
      }) : (i1) -> ()
      %4001 = "mini.new"() {"typ" = !llvm.struct<()>, "class_name" = "Blocking", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Blocking">
      %4002 = "mini.unwrap"(%4001) : (!mini.fatptr<"Blocking">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4003 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%4003, %4002) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %4004 = "hi.cast"(%4001) {"from_typ" = !mini.fatptr<"Blocking">, "to_typ" = !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>, "from_typ_name" = "Blocking", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Blocking">) -> !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
      %4005 = "mini.unwrap"(%4004) : (!mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %4006 = "mini.coro_yield"(%4005) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %4007 = "mini.wrap"(%4006) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
    }) : () -> ()
  }) {"func_name" = "Channel_get_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.fatptr<"Blocking">} : () -> ()
  "mini.func"() ({
  ^bb678(%4008 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4009 : !llvm.ptr):
    %4010 = "mini.invariant"(%4009) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4011 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb679] : () -> ()
  ^bb679:
    %4012 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%4012, %4011) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb680] : () -> ()
  ^bb680:
    %4013 = "llvm.extractvalue"(%4008) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4014 = "llvm.load"(%4011) : (!llvm.ptr) -> i32
    %4015 = "llvm.getelementptr"(%4013, %4014) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4016 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4017 = "llvm.getelementptr"(%4015, %4016) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4017) : (!llvm.ptr) -> ()
  }) {"func_name" = "Channel_B_get_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb681(%4018 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4019 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4020 : !llvm.ptr, %4021 : !llvm.struct<(!llvm.ptr, i160)>):
    %4022 = "mini.wrap"(%4018) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>
    %4023 = "hi.cast"(%4022) {"from_typ" = !mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>, "to_typ" = !mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>) -> !mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>
    %4024 = "mini.wrap"(%4021) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Channel">
    %4025 = "hi.cast"(%4024) {"from_typ" = !mini.type_param<"T", !mini.any, "Channel">, "to_typ" = !mini.type_param<"T", !mini.any, "Channel">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Channel">) -> !mini.type_param<"T", !mini.any, "Channel">
    %4026 = "mini.get_field"(%4023) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>
    %4027 = "hi.cast"(%4026) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>
    "mini.while"() ({
      %4028 = "mini.get_type_field"(%4023) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32} : (!mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>) -> !mini.reified_type
      %4029 = "mini.checkflag"(%4027) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>) -> !mini.ptr<i1>
      %4030 = "mini.unwrap"(%4029) : (!mini.ptr<i1>) -> i1
    }, {
      %4031 = "hi.cast"(%4027) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>, "to_typ" = !mini.type_param<"T", !mini.any, "Channel">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>) -> !mini.type_param<"T", !mini.any, "Channel">
      %4032 = "mini.new"() {"typ" = !llvm.struct<()>, "class_name" = "Blocking", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Blocking">
      %4033 = "mini.unwrap"(%4032) : (!mini.fatptr<"Blocking">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4034 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%4034, %4033) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 2 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %4035 = "hi.cast"(%4032) {"from_typ" = !mini.fatptr<"Blocking">, "to_typ" = !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>, "from_typ_name" = "Blocking", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Blocking">) -> !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
      %4036 = "mini.unwrap"(%4035) : (!mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %4037 = "mini.coro_yield"(%4036) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %4038 = "mini.wrap"(%4037) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Blocking">, !mini.nil]>
      %4039 = "mini.get_field"(%4023) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>
      %4040 = "hi.cast"(%4039) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>
      "mini.assign"(%4027, %4040) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>, !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>) -> ()
    }) : () -> ()
    %4041 = "hi.cast"(%4025) {"from_typ" = !mini.type_param<"T", !mini.any, "Channel">, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!mini.type_param<"T", !mini.any, "Channel">) -> !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>
    "mini.set_field"(%4023, %4041) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"Channel", [!mini.type_param<"T", !mini.any, "Channel">]>, !mini.union<[!mini.type_param<"T", !mini.any, "Channel">, !mini.nil]>) -> ()
  }) {"func_name" = "Channel_put_new_valueT", "result_type" = !llvm.void, "yield_type" = !mini.fatptr<"Blocking">} : () -> ()
  "mini.func"() ({
  ^bb682(%4042 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4043 : !llvm.ptr):
    %4044 = "mini.invariant"(%4043) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4045 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb683] : () -> ()
  ^bb684:
    %4046 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%4046, %4045) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb685] : () -> ()
  ^bb683:
    %4047 = "llvm.getelementptr"(%4043) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4048 = "mini.checkflag"(%4047) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4049 = "llvm.load"(%4048) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4049) [^bb684, ^bb684] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb685:
    %4050 = "llvm.extractvalue"(%4042) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4051 = "llvm.load"(%4045) : (!llvm.ptr) -> i32
    %4052 = "llvm.getelementptr"(%4050, %4051) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4053 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4054 = "llvm.getelementptr"(%4052, %4053) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4054) : (!llvm.ptr) -> ()
  }) {"func_name" = "Channel_B_put_new_valueT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "Array_field_Array_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Array_getter_buffer", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferArray.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Array_setter_buffer", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_BufferArray.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Array_field_buffer", "getter_name" = "Array_getter_buffer", "setter_name" = "Array_setter_buffer"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Array_getter_length", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Array_setter_length", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Array_field_length", "getter_name" = "Array_getter_length", "setter_name" = "Array_setter_length"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Array_getter_capacity", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Array_setter_capacity", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32], "offset" = 3 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Array_field_capacity", "getter_name" = "Array_getter_capacity", "setter_name" = "Array_setter_capacity"} : () -> ()
  "mini.func"() ({
  ^bb686(%4055 : !llvm.ptr, %4056 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4057 = "mini.wrap"(%4056) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Array">]>
    %4058 = "hi.cast"(%4057) {"from_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Iterable", "to_typ_name" = "Iterable"} : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Array">]>
    %4059 = "mini.wrap"(%4056) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4060 = "mini.get_type_field"(%4059) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!llvm.ptr) -> !mini.reified_type
    %4061 = "mini.new"(%4060) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4062 = "mini.unwrap"(%4061) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4063 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%4063, %4062) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %4064 = "hi.cast"(%4061) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4065 = "mini.refer"(%4064) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4066 = "mini.unwrap"(%4058) : (!mini.fatptr<"Iterable", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4067 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4068 = "mini.method_call"(%4067, %4066) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 23 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %4069 = "hi.cast"(%4068) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Array">]>
    %4070 = "hi.cast"(%4069) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Iterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Array">]>
    %4071 = "mini.refer"(%4070) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Array">]>
    "mini.while"() ({
      %4072 = "mini.unwrap"(%4071) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4073 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %4074 = "mini.method_call"(%4073, %4072) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %4075 = "hi.cast"(%4074) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Array">]>
      %4076 = "mini.wrap"(%4056) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %4077 = "mini.get_type_field"(%4076) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!llvm.ptr) -> !mini.reified_type
      %4078 = "mini.checkflag"(%4075) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i1>
      %4079 = "mini.unwrap"(%4078) : (!mini.ptr<i1>) -> i1
    }, {
      %4080 = "hi.cast"(%4075) {"from_typ" = !mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "union_typ", "to_typ_name" = "any_typ"} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Array">]>) -> !mini.type_param<"T", !mini.any, "Array">
      %4081 = "hi.cast"(%4080) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
      %4082 = "mini.unwrap"(%4081) : (!mini.type_param<"T", !mini.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
      %4083 = "mini.unwrap"(%4065) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4084 = "mini.wrap"(%4056) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
      %4085 = "mini.get_type_field"(%4084) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!llvm.ptr) -> !mini.reified_type
      %4086 = "mini.parameterizations_array"(%4085) : (!mini.reified_type) -> !llvm.ptr
      %4087 = "mini.method_call"(%4086, %4083, %4082) {"offset" = 11 : i32, "vptrs" = ["any_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
      %4088 = "hi.cast"(%4087) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
      %4089 = "hi.cast"(%4080) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
      "mini.assign"(%4075, %4089) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.nil, !mini.type_param<"T", !mini.any, "Array">]>, !mini.type_param<"T", !mini.any, "Array">) -> ()
    }) : () -> ()
    %4090 = "hi.cast"(%4065) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    "mini.return"(%4090) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> ()
  }) {"func_name" = "Array__Self_from_iterable_iterableIterableT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb687(%4091 : !llvm.ptr):
    %4092 = "mini.invariant"(%4091) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4093 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb688] : () -> ()
  ^bb689:
    %4094 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
    "llvm.store"(%4094, %4093) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb690] : () -> ()
  ^bb688:
    %4095 = "llvm.getelementptr"(%4091) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4096 = "mini.checkflag"(%4095) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4097 = "llvm.load"(%4096) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4097) [^bb689, ^bb689] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb690:
    %4098 = "mini.addr_of"() {"global_name" = @Array} : () -> !llvm.ptr
    %4099 = "llvm.load"(%4093) : (!llvm.ptr) -> i32
    %4100 = "llvm.getelementptr"(%4098, %4099) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4101 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4102 = "llvm.getelementptr"(%4100, %4101) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4102) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B__Self_from_iterable_iterableIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb691(%4103 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4104 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4105 : !llvm.ptr):
    %4106 = "mini.wrap"(%4103) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4107 = "hi.cast"(%4106) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4108 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4109 = "mini.get_type_field"(%4107) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %4110 = "mini.create_buffer"(%4108, %4109) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!mini.ptr<i32>, !mini.reified_type) -> !llvm.ptr
    %4111 = "hi.cast"(%4110) {"from_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    "mini.set_field"(%4107, %4111) {"offset" = 1 : i64, "vtable_bytes" = 664 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> ()
    %4112 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4113 = "hi.cast"(%4112) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4107, %4113) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %4114 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4115 = "hi.cast"(%4114) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4107, %4115) {"offset" = 3 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb692(%4116 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4117 : !llvm.ptr):
    %4118 = "mini.invariant"(%4117) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4119 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb693] : () -> ()
  ^bb693:
    %4120 = "llvm.mlir.constant"() <{"value" = 32 : i32}> : () -> i32
    "llvm.store"(%4120, %4119) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb694] : () -> ()
  ^bb694:
    %4121 = "llvm.extractvalue"(%4116) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4122 = "llvm.load"(%4119) : (!llvm.ptr) -> i32
    %4123 = "llvm.getelementptr"(%4121, %4122) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4124 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4125 = "llvm.getelementptr"(%4123, %4124) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4125) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb695(%4126 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4127 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4128 : !llvm.ptr, %4129 : i32):
    %4130 = "mini.wrap"(%4126) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4131 = "hi.cast"(%4130) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4132 = "mini.wrap"(%4129) : (i32) -> !mini.ptr<i32>
    %4133 = "hi.cast"(%4132) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4134 = "hi.cast"(%4133) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4131, %4134) {"offset" = 3 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %4135 = "mini.get_field"(%4131) {"offset" = 3 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4136 = "mini.get_type_field"(%4131) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %4137 = "mini.create_buffer"(%4135, %4136) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!mini.ptr<i32>, !mini.reified_type) -> !llvm.ptr
    %4138 = "hi.cast"(%4137) {"from_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    "mini.set_field"(%4131, %4138) {"offset" = 1 : i64, "vtable_bytes" = 664 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> ()
    %4139 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4140 = "hi.cast"(%4139) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4131, %4140) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_init_capacityi32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb696(%4141 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4142 : !llvm.ptr):
    %4143 = "mini.invariant"(%4142) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4144 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb697] : () -> ()
  ^bb698:
    %4145 = "llvm.mlir.constant"() <{"value" = 33 : i32}> : () -> i32
    "llvm.store"(%4145, %4144) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb699] : () -> ()
  ^bb697:
    %4146 = "llvm.getelementptr"(%4142) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4147 = "mini.checkflag"(%4146) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4148 = "llvm.load"(%4147) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4148) [^bb698, ^bb698] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb699:
    %4149 = "llvm.extractvalue"(%4141) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4150 = "llvm.load"(%4144) : (!llvm.ptr) -> i32
    %4151 = "llvm.getelementptr"(%4149, %4150) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4152 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4153 = "llvm.getelementptr"(%4151, %4152) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4153) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_init_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb700(%4154 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4155 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4156 : !llvm.ptr, %4157 : i32, %4158 : i32):
    %4159 = "mini.wrap"(%4154) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4160 = "hi.cast"(%4159) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4161 = "mini.wrap"(%4157) : (i32) -> !mini.ptr<i32>
    %4162 = "hi.cast"(%4161) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4163 = "hi.cast"(%4162) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4160, %4163) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %4164 = "mini.wrap"(%4158) : (i32) -> !mini.ptr<i32>
    %4165 = "hi.cast"(%4164) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4166 = "hi.cast"(%4165) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4160, %4166) {"offset" = 3 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %4167 = "mini.get_field"(%4160) {"offset" = 3 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4168 = "mini.get_type_field"(%4160) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %4169 = "mini.create_buffer"(%4167, %4168) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!mini.ptr<i32>, !mini.reified_type) -> !llvm.ptr
    %4170 = "hi.cast"(%4169) {"from_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    "mini.set_field"(%4160, %4170) {"offset" = 1 : i64, "vtable_bytes" = 664 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> ()
  }) {"func_name" = "Array_init_lengthi32_capacityi32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb701(%4171 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4172 : !llvm.ptr):
    %4173 = "mini.invariant"(%4172) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4174 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb702] : () -> ()
  ^bb703:
    %4175 = "llvm.mlir.constant"() <{"value" = 34 : i32}> : () -> i32
    "llvm.store"(%4175, %4174) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb704] : () -> ()
  ^bb705:
    %4176 = "llvm.getelementptr"(%4172) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4177 = "mini.checkflag"(%4176) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4178 = "llvm.load"(%4177) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4178) [^bb703, ^bb703] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb702:
    %4179 = "llvm.getelementptr"(%4172) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4180 = "mini.checkflag"(%4179) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4181 = "llvm.load"(%4180) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4181) [^bb705, ^bb705] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb704:
    %4182 = "llvm.extractvalue"(%4171) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4183 = "llvm.load"(%4174) : (!llvm.ptr) -> i32
    %4184 = "llvm.getelementptr"(%4182, %4183) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4185 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4186 = "llvm.getelementptr"(%4184, %4185) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4186) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_init_lengthi32_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb706(%4187 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4188 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4189 : !llvm.ptr, %4190 : !llvm.struct<(!llvm.ptr)>, %4191 : i32, %4192 : i32):
    %4193 = "mini.wrap"(%4187) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4194 = "hi.cast"(%4193) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4195 = "mini.wrap"(%4190) : (!llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %4196 = "hi.cast"(%4195) {"from_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %4197 = "hi.cast"(%4196) {"from_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    "mini.set_field"(%4194, %4197) {"offset" = 1 : i64, "vtable_bytes" = 664 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> ()
    %4198 = "mini.wrap"(%4191) : (i32) -> !mini.ptr<i32>
    %4199 = "hi.cast"(%4198) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4200 = "hi.cast"(%4199) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4194, %4200) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %4201 = "mini.wrap"(%4192) : (i32) -> !mini.ptr<i32>
    %4202 = "hi.cast"(%4201) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4203 = "hi.cast"(%4202) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4194, %4203) {"offset" = 3 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_init_bufferBufferT_lengthi32_capacityi32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb707(%4204 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4205 : !llvm.ptr):
    %4206 = "mini.invariant"(%4205) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4207 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb708] : () -> ()
  ^bb709:
    %4208 = "llvm.mlir.constant"() <{"value" = 35 : i32}> : () -> i32
    "llvm.store"(%4208, %4207) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb710] : () -> ()
  ^bb711:
    %4209 = "llvm.getelementptr"(%4205) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4210 = "mini.checkflag"(%4209) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4211 = "llvm.load"(%4210) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4211) [^bb709, ^bb709] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb712:
    %4212 = "llvm.getelementptr"(%4205) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4213 = "mini.checkflag"(%4212) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4214 = "llvm.load"(%4213) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4214) [^bb711, ^bb711] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb708:
    %4215 = "llvm.getelementptr"(%4205) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4216 = "mini.checkflag"(%4215) {"typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4217 = "llvm.load"(%4216) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4217) [^bb712, ^bb712] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb710:
    %4218 = "llvm.extractvalue"(%4204) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4219 = "llvm.load"(%4207) : (!llvm.ptr) -> i32
    %4220 = "llvm.getelementptr"(%4218, %4219) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4221 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4222 = "llvm.getelementptr"(%4220, %4221) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4222) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_init_bufferBufferT_lengthi32_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb713(%4223 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4224 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4225 : !llvm.ptr):
    %4226 = "mini.wrap"(%4223) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4227 = "hi.cast"(%4226) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4228 = "mini.get_field"(%4227) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4229 = "hi.cast"(%4228) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.return"(%4229) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_length_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb714(%4230 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4231 : !llvm.ptr):
    %4232 = "mini.invariant"(%4231) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4233 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb715] : () -> ()
  ^bb715:
    %4234 = "llvm.mlir.constant"() <{"value" = 36 : i32}> : () -> i32
    "llvm.store"(%4234, %4233) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb716] : () -> ()
  ^bb716:
    %4235 = "llvm.extractvalue"(%4230) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4236 = "llvm.load"(%4233) : (!llvm.ptr) -> i32
    %4237 = "llvm.getelementptr"(%4235, %4236) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4238 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4239 = "llvm.getelementptr"(%4237, %4238) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4239) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_length_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb717(%4240 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4241 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4242 : !llvm.ptr):
    %4243 = "mini.wrap"(%4240) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4244 = "hi.cast"(%4243) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4245 = "mini.get_field"(%4244) {"offset" = 3 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4246 = "hi.cast"(%4245) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.return"(%4246) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "Array_capacity_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb718(%4247 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4248 : !llvm.ptr):
    %4249 = "mini.invariant"(%4248) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4250 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb719] : () -> ()
  ^bb719:
    %4251 = "llvm.mlir.constant"() <{"value" = 37 : i32}> : () -> i32
    "llvm.store"(%4251, %4250) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb720] : () -> ()
  ^bb720:
    %4252 = "llvm.extractvalue"(%4247) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4253 = "llvm.load"(%4250) : (!llvm.ptr) -> i32
    %4254 = "llvm.getelementptr"(%4252, %4253) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4255 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4256 = "llvm.getelementptr"(%4254, %4255) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4256) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_capacity_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb721(%4257 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4258 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4259 : !llvm.ptr, %4260 : !llvm.struct<(!llvm.ptr, i160)>):
    %4261 = "mini.wrap"(%4257) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4262 = "hi.cast"(%4261) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4263 = "mini.wrap"(%4260) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Array">
    %4264 = "hi.cast"(%4263) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    %4265 = "mini.get_field"(%4262) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4266 = "mini.get_field"(%4262) {"offset" = 3 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4267 = "mini.unwrap"(%4265) : (!mini.ptr<i32>) -> i32
    %4268 = "mini.unwrap"(%4266) : (!mini.ptr<i32>) -> i32
    %4269 = "mini.comparison"(%4267, %4268) {"op" = "GE"} : (i32, i32) -> i1
    %4270 = "mini.wrap"(%4269) : (i1) -> !mini.ptr<i32>
    %4271 = "mini.unwrap"(%4270) : (!mini.ptr<i32>) -> i1
    "mini.if"(%4271) ({
      %4272 = "mini.get_field"(%4262) {"offset" = 3 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
      %4273 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4274 = "mini.unwrap"(%4272) : (!mini.ptr<i32>) -> i32
      %4275 = "mini.unwrap"(%4273) : (!mini.ptr<i32>) -> i32
      %4276 = "mini.arithmetic"(%4274, %4275) {"op" = "MUL"} : (i32, i32) -> i32
      %4277 = "mini.wrap"(%4276) : (i32) -> !mini.ptr<i32>
      %4278 = "hi.cast"(%4277) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %4279 = "mini.unwrap"(%4278) : (!mini.ptr<i32>) -> i32
      %4280 = "mini.unwrap"(%4262) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4281 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %4282 = "mini.parameterizations_array"(%4281) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%4282, %4280, %4279) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    }) : (i1) -> ()
    %4283 = "mini.get_field"(%4262) {"offset" = 1 : i64, "vtable_bytes" = 664 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %4284 = "mini.get_field"(%4262) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4285 = "mini.get_type_field"(%4262) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %4286 = "hi.cast"(%4264) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    "mini.buffer_set"(%4283, %4284, %4286, %4285) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, !mini.ptr<i32>, !mini.type_param<"T", !mini.any, "Array">, !mini.reified_type) -> ()
    %4287 = "mini.get_field"(%4262) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4288 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4289 = "mini.unwrap"(%4287) : (!mini.ptr<i32>) -> i32
    %4290 = "mini.unwrap"(%4288) : (!mini.ptr<i32>) -> i32
    %4291 = "mini.arithmetic"(%4289, %4290) {"op" = "ADD"} : (i32, i32) -> i32
    %4292 = "mini.wrap"(%4291) : (i32) -> !mini.ptr<i32>
    %4293 = "hi.cast"(%4292) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4262, %4293) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %4294 = "hi.cast"(%4262) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    "mini.return"(%4294) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> ()
  }) {"func_name" = "Array_append_xT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb722(%4295 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4296 : !llvm.ptr):
    %4297 = "mini.invariant"(%4296) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4298 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb723] : () -> ()
  ^bb724:
    %4299 = "llvm.mlir.constant"() <{"value" = 38 : i32}> : () -> i32
    "llvm.store"(%4299, %4298) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb725] : () -> ()
  ^bb723:
    %4300 = "llvm.getelementptr"(%4296) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4301 = "mini.checkflag"(%4300) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4302 = "llvm.load"(%4301) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4302) [^bb724, ^bb724] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb725:
    %4303 = "llvm.extractvalue"(%4295) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4304 = "llvm.load"(%4298) : (!llvm.ptr) -> i32
    %4305 = "llvm.getelementptr"(%4303, %4304) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4306 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4307 = "llvm.getelementptr"(%4305, %4306) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4307) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_append_xT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb726(%4308 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4309 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4310 : !llvm.ptr, %4311 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4312 = "mini.wrap"(%4308) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4313 = "hi.cast"(%4312) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4314 = "mini.wrap"(%4311) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4315 = "hi.cast"(%4314) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4316 = "mini.unwrap"(%4315) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4317 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4318 = "mini.method_call"(%4317, %4316) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 83 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %4319 = "hi.cast"(%4318) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4320 = "mini.get_field"(%4313) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4321 = "mini.unwrap"(%4320) : (!mini.ptr<i32>) -> i32
    %4322 = "mini.unwrap"(%4319) : (!mini.ptr<i32>) -> i32
    %4323 = "mini.arithmetic"(%4321, %4322) {"op" = "ADD"} : (i32, i32) -> i32
    %4324 = "mini.wrap"(%4323) : (i32) -> !mini.ptr<i32>
    %4325 = "mini.get_field"(%4313) {"offset" = 3 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4326 = "mini.unwrap"(%4324) : (!mini.ptr<i32>) -> i32
    %4327 = "mini.unwrap"(%4325) : (!mini.ptr<i32>) -> i32
    %4328 = "mini.comparison"(%4326, %4327) {"op" = "GE"} : (i32, i32) -> i1
    %4329 = "mini.wrap"(%4328) : (i1) -> !mini.ptr<i32>
    %4330 = "mini.unwrap"(%4329) : (!mini.ptr<i32>) -> i1
    "mini.if"(%4330) ({
      %4331 = "hi.cast"(%4324) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %4332 = "mini.unwrap"(%4331) : (!mini.ptr<i32>) -> i32
      %4333 = "mini.unwrap"(%4313) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4334 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %4335 = "mini.parameterizations_array"(%4334) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%4335, %4333, %4332) {"offset" = 13 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    }) : (i1) -> ()
    %4336 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %4337 = "mini.unwrap"(%4336) : (!mini.ptr<i32>) -> i32
      %4338 = "mini.unwrap"(%4319) : (!mini.ptr<i32>) -> i32
      %4339 = "mini.comparison"(%4337, %4338) {"op" = "LT"} : (i32, i32) -> i1
      %4340 = "mini.wrap"(%4339) : (i1) -> !mini.ptr<i32>
      %4341 = "mini.unwrap"(%4340) : (!mini.ptr<i32>) -> i1
    }, {
      %4342 = "mini.unwrap"(%4336) : (!mini.ptr<i32>) -> i32
      %4343 = "mini.unwrap"(%4320) : (!mini.ptr<i32>) -> i32
      %4344 = "mini.arithmetic"(%4342, %4343) {"op" = "ADD"} : (i32, i32) -> i32
      %4345 = "mini.wrap"(%4344) : (i32) -> !mini.ptr<i32>
      %4346 = "hi.cast"(%4336) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %4347 = "mini.unwrap"(%4346) : (!mini.ptr<i32>) -> i32
      %4348 = "mini.unwrap"(%4315) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4349 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %4350 = "mini.parameterizations_array"(%4349) : (!llvm.ptr) -> !llvm.ptr
      %4351 = "mini.method_call"(%4350, %4348, %4347) {"offset" = 17 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.type_param<"T", !mini.any, "Array">
      %4352 = "hi.cast"(%4351) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
      %4353 = "hi.cast"(%4345) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %4354 = "mini.unwrap"(%4353) : (!mini.ptr<i32>) -> i32
      %4355 = "hi.cast"(%4352) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
      %4356 = "mini.unwrap"(%4355) : (!mini.type_param<"T", !mini.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
      %4357 = "mini.unwrap"(%4313) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4358 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %4359 = "mini.get_type_field"(%4313) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
      %4360 = "mini.parameterizations_array"(%4358, %4359) : (!llvm.ptr, !mini.reified_type) -> !llvm.ptr
      "mini.method_call"(%4360, %4357, %4354, %4356) {"offset" = 18 : i32, "vptrs" = ["i32_typ", "any_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %4361 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4362 = "mini.unwrap"(%4336) : (!mini.ptr<i32>) -> i32
      %4363 = "mini.unwrap"(%4361) : (!mini.ptr<i32>) -> i32
      %4364 = "mini.arithmetic"(%4362, %4363) {"op" = "ADD"} : (i32, i32) -> i32
      %4365 = "mini.wrap"(%4364) : (i32) -> !mini.ptr<i32>
      %4366 = "hi.cast"(%4365) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%4336, %4366) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %4367 = "hi.cast"(%4324) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4313, %4367) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %4368 = "hi.cast"(%4313) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    "mini.return"(%4368) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> ()
  }) {"func_name" = "Array_extend_otherArrayT", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb727(%4369 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4370 : !llvm.ptr):
    %4371 = "mini.invariant"(%4370) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4372 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb728] : () -> ()
  ^bb729:
    %4373 = "llvm.mlir.constant"() <{"value" = 39 : i32}> : () -> i32
    "llvm.store"(%4373, %4372) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb730] : () -> ()
  ^bb728:
    %4374 = "llvm.getelementptr"(%4370) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4375 = "mini.checkflag"(%4374) {"typ_name" = "Array"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4376 = "llvm.load"(%4375) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4376) [^bb729, ^bb729] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb730:
    %4377 = "llvm.extractvalue"(%4369) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4378 = "llvm.load"(%4372) : (!llvm.ptr) -> i32
    %4379 = "llvm.getelementptr"(%4377, %4378) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4380 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4381 = "llvm.getelementptr"(%4379, %4380) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4381) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_extend_otherArrayT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb731(%4382 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4383 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4384 : !llvm.ptr, %4385 : i32):
    %4386 = "mini.wrap"(%4382) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4387 = "hi.cast"(%4386) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4388 = "mini.wrap"(%4385) : (i32) -> !mini.ptr<i32>
    %4389 = "hi.cast"(%4388) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4390 = "mini.get_field"(%4387) {"offset" = 3 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4391 = "mini.unwrap"(%4389) : (!mini.ptr<i32>) -> i32
    %4392 = "mini.unwrap"(%4390) : (!mini.ptr<i32>) -> i32
    %4393 = "mini.comparison"(%4391, %4392) {"op" = "LE"} : (i32, i32) -> i1
    %4394 = "mini.wrap"(%4393) : (i1) -> !mini.ptr<i32>
    %4395 = "mini.unwrap"(%4394) : (!mini.ptr<i32>) -> i1
    "mini.if"(%4395) ({
      "mini.return"() : () -> ()
    }) : (i1) -> ()
    %4396 = "hi.cast"(%4389) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4387, %4396) {"offset" = 3 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.ptr<i32>) -> ()
    %4397 = "mini.get_field"(%4387) {"offset" = 1 : i64, "vtable_bytes" = 664 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %4398 = "hi.cast"(%4397) {"from_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %4399 = "mini.refer"(%4398) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %4400 = "mini.get_field"(%4387) {"offset" = 3 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4401 = "mini.get_type_field"(%4387) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %4402 = "mini.create_buffer"(%4400, %4401) {"typ" = !llvm.struct<(!llvm.ptr, i160)>, "region_id" = ""} : (!mini.ptr<i32>, !mini.reified_type) -> !llvm.ptr
    %4403 = "hi.cast"(%4402) {"from_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    "mini.set_field"(%4387, %4403) {"offset" = 1 : i64, "vtable_bytes" = 664 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> ()
    %4404 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    "mini.while"() ({
      %4405 = "mini.get_field"(%4387) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
      %4406 = "mini.unwrap"(%4404) : (!mini.ptr<i32>) -> i32
      %4407 = "mini.unwrap"(%4405) : (!mini.ptr<i32>) -> i32
      %4408 = "mini.comparison"(%4406, %4407) {"op" = "LT"} : (i32, i32) -> i1
      %4409 = "mini.wrap"(%4408) : (i1) -> !mini.ptr<i32>
      %4410 = "mini.unwrap"(%4409) : (!mini.ptr<i32>) -> i1
    }, {
      %4411 = "mini.get_type_field"(%4387) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
      %4412 = "mini.buffer_get"(%4399, %4404, %4411) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, !mini.ptr<i32>, !mini.reified_type) -> !mini.type_param<"T", !mini.any, "Array">
      %4413 = "mini.get_field"(%4387) {"offset" = 1 : i64, "vtable_bytes" = 664 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
      %4414 = "mini.get_type_field"(%4387) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
      %4415 = "hi.cast"(%4412) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
      "mini.buffer_set"(%4413, %4404, %4415, %4414) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, !mini.ptr<i32>, !mini.type_param<"T", !mini.any, "Array">, !mini.reified_type) -> ()
      %4416 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %4417 = "mini.unwrap"(%4404) : (!mini.ptr<i32>) -> i32
      %4418 = "mini.unwrap"(%4416) : (!mini.ptr<i32>) -> i32
      %4419 = "mini.arithmetic"(%4417, %4418) {"op" = "ADD"} : (i32, i32) -> i32
      %4420 = "mini.wrap"(%4419) : (i32) -> !mini.ptr<i32>
      %4421 = "hi.cast"(%4420) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%4404, %4421) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : () -> ()
  }) {"func_name" = "Array_reserve_new_capacityi32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb732(%4422 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4423 : !llvm.ptr):
    %4424 = "mini.invariant"(%4423) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4425 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb733] : () -> ()
  ^bb734:
    %4426 = "llvm.mlir.constant"() <{"value" = 40 : i32}> : () -> i32
    "llvm.store"(%4426, %4425) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb735] : () -> ()
  ^bb733:
    %4427 = "llvm.getelementptr"(%4423) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4428 = "mini.checkflag"(%4427) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4429 = "llvm.load"(%4428) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4429) [^bb734, ^bb734] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb735:
    %4430 = "llvm.extractvalue"(%4422) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4431 = "llvm.load"(%4425) : (!llvm.ptr) -> i32
    %4432 = "llvm.getelementptr"(%4430, %4431) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4433 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4434 = "llvm.getelementptr"(%4432, %4433) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4434) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_reserve_new_capacityi32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb736(%4435 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4436 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4437 : !llvm.ptr, %4438 : i32):
    %4439 = "mini.wrap"(%4435) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4440 = "hi.cast"(%4439) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4441 = "mini.wrap"(%4438) : (i32) -> !mini.ptr<i32>
    %4442 = "hi.cast"(%4441) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4443 = "mini.get_field"(%4440) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4444 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4445 = "mini.unwrap"(%4443) : (!mini.ptr<i32>) -> i32
    %4446 = "mini.unwrap"(%4444) : (!mini.ptr<i32>) -> i32
    %4447 = "mini.arithmetic"(%4445, %4446) {"op" = "SUB"} : (i32, i32) -> i32
    %4448 = "mini.wrap"(%4447) : (i32) -> !mini.ptr<i32>
    %4449 = "mini.unwrap"(%4442) : (!mini.ptr<i32>) -> i32
    %4450 = "mini.unwrap"(%4448) : (!mini.ptr<i32>) -> i32
    %4451 = "mini.comparison"(%4449, %4450) {"op" = "GT"} : (i32, i32) -> i1
    %4452 = "mini.wrap"(%4451) : (i1) -> !mini.ptr<i32>
    %4453 = "mini.get_field"(%4440) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4454 = "mini.unwrap"(%4453) : (!mini.ptr<i32>) -> i32
    %4455 = "mini.unwrap"(%4442) : (!mini.ptr<i32>) -> i32
    %4456 = "mini.arithmetic"(%4454, %4455) {"op" = "ADD"} : (i32, i32) -> i32
    %4457 = "mini.wrap"(%4456) : (i32) -> !mini.ptr<i32>
    %4458 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4459 = "mini.unwrap"(%4457) : (!mini.ptr<i32>) -> i32
    %4460 = "mini.unwrap"(%4458) : (!mini.ptr<i32>) -> i32
    %4461 = "mini.comparison"(%4459, %4460) {"op" = "LT"} : (i32, i32) -> i1
    %4462 = "mini.wrap"(%4461) : (i1) -> !mini.ptr<i32>
    %4463 = "mini.unwrap"(%4452) : (!mini.ptr<i32>) -> i1
    %4464 = "mini.logical"(%4463) ({
      func.return %4462 : !mini.ptr<i32>
    }) {"op" = "or"} : (i1) -> i1
    %4465 = "mini.wrap"(%4464) : (i1) -> !mini.ptr<i1>
    %4466 = "mini.unwrap"(%4465) : (!mini.ptr<i1>) -> i1
    "mini.if"(%4466) ({
      %4467 = "hi.cast"(%4442) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %4468 = "mini.unwrap"(%4467) : (!mini.ptr<i32>) -> i32
      %4469 = "mini.unwrap"(%4440) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4470 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %4471 = "mini.parameterizations_array"(%4470) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%4471, %4469, %4468) {"offset" = 16 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    }) : (i1) -> ()
    %4472 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4473 = "mini.unwrap"(%4442) : (!mini.ptr<i32>) -> i32
    %4474 = "mini.unwrap"(%4472) : (!mini.ptr<i32>) -> i32
    %4475 = "mini.comparison"(%4473, %4474) {"op" = "LT"} : (i32, i32) -> i1
    %4476 = "mini.wrap"(%4475) : (i1) -> !mini.ptr<i32>
    %4477 = "mini.unwrap"(%4476) : (!mini.ptr<i32>) -> i1
    "mini.if"(%4477) ({
      %4478 = "mini.get_field"(%4440) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
      %4479 = "mini.unwrap"(%4478) : (!mini.ptr<i32>) -> i32
      %4480 = "mini.unwrap"(%4442) : (!mini.ptr<i32>) -> i32
      %4481 = "mini.arithmetic"(%4479, %4480) {"op" = "ADD"} : (i32, i32) -> i32
      %4482 = "mini.wrap"(%4481) : (i32) -> !mini.ptr<i32>
      %4483 = "hi.cast"(%4482) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%4442, %4483) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %4484 = "hi.cast"(%4442) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4485 = "mini.unwrap"(%4484) : (!mini.ptr<i32>) -> i32
    %4486 = "mini.unwrap"(%4440) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4487 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %4488 = "mini.parameterizations_array"(%4487) : (!llvm.ptr) -> !llvm.ptr
    %4489 = "mini.method_call"(%4488, %4486, %4485) {"offset" = 17 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.type_param<"T", !mini.any, "Array">
    %4490 = "hi.cast"(%4489) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    %4491 = "hi.cast"(%4490) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    "mini.return"(%4491) : (!mini.type_param<"T", !mini.any, "Array">) -> ()
  }) {"func_name" = "Array__index_xi32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb737(%4492 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4493 : !llvm.ptr):
    %4494 = "mini.invariant"(%4493) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4495 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb738] : () -> ()
  ^bb739:
    %4496 = "llvm.mlir.constant"() <{"value" = 41 : i32}> : () -> i32
    "llvm.store"(%4496, %4495) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb740] : () -> ()
  ^bb738:
    %4497 = "llvm.getelementptr"(%4493) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4498 = "mini.checkflag"(%4497) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4499 = "llvm.load"(%4498) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4499) [^bb739, ^bb739] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb740:
    %4500 = "llvm.extractvalue"(%4492) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4501 = "llvm.load"(%4495) : (!llvm.ptr) -> i32
    %4502 = "llvm.getelementptr"(%4500, %4501) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4503 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4504 = "llvm.getelementptr"(%4502, %4503) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4504) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B__index_xi32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb741(%4505 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4506 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4507 : !llvm.ptr, %4508 : i32, %4509 : !llvm.struct<(!llvm.ptr, i160)>):
    %4510 = "mini.wrap"(%4505) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4511 = "hi.cast"(%4510) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4512 = "mini.wrap"(%4508) : (i32) -> !mini.ptr<i32>
    %4513 = "hi.cast"(%4512) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4514 = "mini.wrap"(%4509) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Array">
    %4515 = "hi.cast"(%4514) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    %4516 = "mini.get_field"(%4511) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4517 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4518 = "mini.unwrap"(%4516) : (!mini.ptr<i32>) -> i32
    %4519 = "mini.unwrap"(%4517) : (!mini.ptr<i32>) -> i32
    %4520 = "mini.arithmetic"(%4518, %4519) {"op" = "SUB"} : (i32, i32) -> i32
    %4521 = "mini.wrap"(%4520) : (i32) -> !mini.ptr<i32>
    %4522 = "mini.unwrap"(%4513) : (!mini.ptr<i32>) -> i32
    %4523 = "mini.unwrap"(%4521) : (!mini.ptr<i32>) -> i32
    %4524 = "mini.comparison"(%4522, %4523) {"op" = "GT"} : (i32, i32) -> i1
    %4525 = "mini.wrap"(%4524) : (i1) -> !mini.ptr<i32>
    %4526 = "mini.get_field"(%4511) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
    %4527 = "mini.unwrap"(%4526) : (!mini.ptr<i32>) -> i32
    %4528 = "mini.unwrap"(%4513) : (!mini.ptr<i32>) -> i32
    %4529 = "mini.arithmetic"(%4527, %4528) {"op" = "ADD"} : (i32, i32) -> i32
    %4530 = "mini.wrap"(%4529) : (i32) -> !mini.ptr<i32>
    %4531 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4532 = "mini.unwrap"(%4530) : (!mini.ptr<i32>) -> i32
    %4533 = "mini.unwrap"(%4531) : (!mini.ptr<i32>) -> i32
    %4534 = "mini.comparison"(%4532, %4533) {"op" = "LT"} : (i32, i32) -> i1
    %4535 = "mini.wrap"(%4534) : (i1) -> !mini.ptr<i32>
    %4536 = "mini.unwrap"(%4525) : (!mini.ptr<i32>) -> i1
    %4537 = "mini.logical"(%4536) ({
      func.return %4535 : !mini.ptr<i32>
    }) {"op" = "or"} : (i1) -> i1
    %4538 = "mini.wrap"(%4537) : (i1) -> !mini.ptr<i1>
    %4539 = "mini.unwrap"(%4538) : (!mini.ptr<i1>) -> i1
    "mini.if"(%4539) ({
      %4540 = "hi.cast"(%4513) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %4541 = "mini.unwrap"(%4540) : (!mini.ptr<i32>) -> i32
      %4542 = "mini.unwrap"(%4511) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %4543 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %4544 = "mini.parameterizations_array"(%4543) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%4544, %4542, %4541) {"offset" = 16 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    }) : (i1) -> ()
    %4545 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4546 = "mini.unwrap"(%4513) : (!mini.ptr<i32>) -> i32
    %4547 = "mini.unwrap"(%4545) : (!mini.ptr<i32>) -> i32
    %4548 = "mini.comparison"(%4546, %4547) {"op" = "LT"} : (i32, i32) -> i1
    %4549 = "mini.wrap"(%4548) : (i1) -> !mini.ptr<i32>
    %4550 = "mini.unwrap"(%4549) : (!mini.ptr<i32>) -> i1
    "mini.if"(%4550) ({
      %4551 = "mini.get_field"(%4511) {"offset" = 2 : i64, "vtable_bytes" = 664 : i32, "original_type" = i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.ptr<i32>
      %4552 = "mini.unwrap"(%4551) : (!mini.ptr<i32>) -> i32
      %4553 = "mini.unwrap"(%4513) : (!mini.ptr<i32>) -> i32
      %4554 = "mini.arithmetic"(%4552, %4553) {"op" = "ADD"} : (i32, i32) -> i32
      %4555 = "mini.wrap"(%4554) : (i32) -> !mini.ptr<i32>
      %4556 = "hi.cast"(%4555) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%4513, %4556) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %4557 = "hi.cast"(%4513) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4558 = "mini.unwrap"(%4557) : (!mini.ptr<i32>) -> i32
    %4559 = "hi.cast"(%4515) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    %4560 = "mini.unwrap"(%4559) : (!mini.type_param<"T", !mini.any, "Array">) -> !llvm.struct<(!llvm.ptr, i160)>
    %4561 = "mini.unwrap"(%4511) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4562 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %4563 = "mini.get_type_field"(%4511) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %4564 = "mini.parameterizations_array"(%4562, %4563) : (!llvm.ptr, !mini.reified_type) -> !llvm.ptr
    "mini.method_call"(%4564, %4561, %4558, %4560) {"offset" = 18 : i32, "vptrs" = ["i32_typ", "any_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Array__set_index_xi32_valueT", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb742(%4565 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4566 : !llvm.ptr):
    %4567 = "mini.invariant"(%4566) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4568 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb743] : () -> ()
  ^bb744:
    %4569 = "llvm.mlir.constant"() <{"value" = 42 : i32}> : () -> i32
    "llvm.store"(%4569, %4568) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb745] : () -> ()
  ^bb746:
    %4570 = "llvm.getelementptr"(%4566) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4571 = "mini.checkflag"(%4570) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4572 = "llvm.load"(%4571) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4572) [^bb744, ^bb744] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb743:
    %4573 = "llvm.getelementptr"(%4566) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4574 = "mini.checkflag"(%4573) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4575 = "llvm.load"(%4574) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4575) [^bb746, ^bb746] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb745:
    %4576 = "llvm.extractvalue"(%4565) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4577 = "llvm.load"(%4568) : (!llvm.ptr) -> i32
    %4578 = "llvm.getelementptr"(%4576, %4577) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4579 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4580 = "llvm.getelementptr"(%4578, %4579) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4580) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B__set_index_xi32_valueT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb747(%4581 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4582 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4583 : !llvm.ptr, %4584 : i32):
    %4585 = "mini.wrap"(%4581) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4586 = "hi.cast"(%4585) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4587 = "mini.wrap"(%4584) : (i32) -> !mini.ptr<i32>
    %4588 = "hi.cast"(%4587) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4589 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "Exception", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Exception">
    %4590 = "mini.unwrap"(%4589) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4591 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%4591, %4590) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %4592 = "mini.literal"() {"value" = 669 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4593 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4594 = "mini.create_buffer"(%4593) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %4595 = "hi.cast"(%4594) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %4596 = "mini.refer"(%4595) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %4597 = "mini.literal"() {"typ" = !llvm.array<15 x i8>, "value" = "zrwcinittk.mini"} : () -> !llvm.ptr
    %4598 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%4596, %4598, %4597) {"typ" = !llvm.array<15 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %4599 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4600 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4601 = "mini.unwrap"(%4596) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %4602 = "mini.unwrap"(%4599) : (!mini.ptr<i32>) -> i32
    %4603 = "mini.unwrap"(%4600) : (!mini.ptr<i32>) -> i32
    %4604 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %4605 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4606 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4607 = "hi.cast"(%4596) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %4608 = "mini.unwrap"(%4607) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %4609 = "hi.cast"(%4605) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4610 = "mini.unwrap"(%4609) : (!mini.ptr<i32>) -> i32
    %4611 = "hi.cast"(%4606) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4612 = "mini.unwrap"(%4611) : (!mini.ptr<i32>) -> i32
    %4613 = "mini.unwrap"(%4604) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4614 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %4615 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %4616 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %4617 = "mini.parameterizations_array"(%4614, %4615, %4616) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%4617, %4613, %4608, %4610, %4612) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %4618 = "hi.cast"(%4592) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4619 = "mini.unwrap"(%4618) : (!mini.ptr<i32>) -> i32
    %4620 = "hi.cast"(%4604) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %4621 = "mini.unwrap"(%4620) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4622 = "mini.unwrap"(%4589) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4623 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %4624 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %4625 = "mini.parameterizations_array"(%4623, %4624) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%4625, %4622, %4619, %4621) {"offset" = 5 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %4626 = "hi.cast"(%4589) {"from_typ" = !mini.fatptr<"Exception">, "to_typ" = !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Exception">) -> !mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>
    %4627 = "mini.unwrap"(%4626) : (!mini.union<[!mini.fatptr<"OutOfBounds">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %4628 = "mini.coro_yield"(%4627) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
    %4629 = "mini.wrap"(%4628) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
  }) {"func_name" = "Array_throw_oob_xi32", "result_type" = !llvm.void, "yield_type" = !mini.fatptr<"OutOfBounds">} : () -> ()
  "mini.func"() ({
  ^bb748(%4630 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4631 : !llvm.ptr):
    %4632 = "mini.invariant"(%4631) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4633 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb749] : () -> ()
  ^bb750:
    %4634 = "llvm.mlir.constant"() <{"value" = 43 : i32}> : () -> i32
    "llvm.store"(%4634, %4633) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb751] : () -> ()
  ^bb749:
    %4635 = "llvm.getelementptr"(%4631) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4636 = "mini.checkflag"(%4635) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4637 = "llvm.load"(%4636) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4637) [^bb750, ^bb750] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb751:
    %4638 = "llvm.extractvalue"(%4630) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4639 = "llvm.load"(%4633) : (!llvm.ptr) -> i32
    %4640 = "llvm.getelementptr"(%4638, %4639) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4641 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4642 = "llvm.getelementptr"(%4640, %4641) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4642) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_throw_oob_xi32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb752(%4643 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4644 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4645 : !llvm.ptr, %4646 : i32):
    %4647 = "mini.wrap"(%4643) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4648 = "hi.cast"(%4647) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4649 = "mini.wrap"(%4646) : (i32) -> !mini.ptr<i32>
    %4650 = "hi.cast"(%4649) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4651 = "mini.get_field"(%4648) {"offset" = 1 : i64, "vtable_bytes" = 664 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %4652 = "mini.get_type_field"(%4648) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %4653 = "mini.buffer_get"(%4651, %4650, %4652) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, !mini.ptr<i32>, !mini.reified_type) -> !mini.type_param<"T", !mini.any, "Array">
    %4654 = "hi.cast"(%4653) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    "mini.return"(%4654) : (!mini.type_param<"T", !mini.any, "Array">) -> ()
  }) {"func_name" = "Array_unchecked_index_xi32", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb753(%4655 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4656 : !llvm.ptr):
    %4657 = "mini.invariant"(%4656) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4658 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb754] : () -> ()
  ^bb755:
    %4659 = "llvm.mlir.constant"() <{"value" = 44 : i32}> : () -> i32
    "llvm.store"(%4659, %4658) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb756] : () -> ()
  ^bb754:
    %4660 = "llvm.getelementptr"(%4656) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4661 = "mini.checkflag"(%4660) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4662 = "llvm.load"(%4661) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4662) [^bb755, ^bb755] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb756:
    %4663 = "llvm.extractvalue"(%4655) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4664 = "llvm.load"(%4658) : (!llvm.ptr) -> i32
    %4665 = "llvm.getelementptr"(%4663, %4664) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4666 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4667 = "llvm.getelementptr"(%4665, %4666) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4667) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_unchecked_index_xi32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb757(%4668 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4669 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4670 : !llvm.ptr, %4671 : i32, %4672 : !llvm.struct<(!llvm.ptr, i160)>):
    %4673 = "mini.wrap"(%4668) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4674 = "hi.cast"(%4673) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4675 = "mini.wrap"(%4671) : (i32) -> !mini.ptr<i32>
    %4676 = "hi.cast"(%4675) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4677 = "mini.wrap"(%4672) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "Array">
    %4678 = "hi.cast"(%4677) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    %4679 = "mini.get_field"(%4674) {"offset" = 1 : i64, "vtable_bytes" = 664 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %4680 = "mini.get_type_field"(%4674) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %4681 = "hi.cast"(%4678) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "Array">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "Array">
    "mini.buffer_set"(%4679, %4676, %4681, %4680) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, !mini.ptr<i32>, !mini.type_param<"T", !mini.any, "Array">, !mini.reified_type) -> ()
  }) {"func_name" = "Array_unchecked_insert_xi32_valueT", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb758(%4682 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4683 : !llvm.ptr):
    %4684 = "mini.invariant"(%4683) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4685 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb759] : () -> ()
  ^bb760:
    %4686 = "llvm.mlir.constant"() <{"value" = 45 : i32}> : () -> i32
    "llvm.store"(%4686, %4685) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb761] : () -> ()
  ^bb762:
    %4687 = "llvm.getelementptr"(%4683) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4688 = "mini.checkflag"(%4687) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4689 = "llvm.load"(%4688) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4689) [^bb760, ^bb760] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb759:
    %4690 = "llvm.getelementptr"(%4683) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4691 = "mini.checkflag"(%4690) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4692 = "llvm.load"(%4691) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4692) [^bb762, ^bb762] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb761:
    %4693 = "llvm.extractvalue"(%4682) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4694 = "llvm.load"(%4685) : (!llvm.ptr) -> i32
    %4695 = "llvm.getelementptr"(%4693, %4694) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4696 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4697 = "llvm.getelementptr"(%4695, %4696) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4697) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_unchecked_insert_xi32_valueT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb763(%4698 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4699 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4700 : !llvm.ptr):
    %4701 = "mini.wrap"(%4698) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4702 = "hi.cast"(%4701) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4703 = "mini.unwrap"(%4702) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4704 = "mini.get_type_field"(%4702) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %4705 = "mini.new"(%4704) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32)>, "class_name" = "ArrayIterator", "num_data_fields" = 2 : i32, "region_id" = "none", "has_type_fields"} : (!mini.reified_type) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "Array">]>
    %4706 = "hi.cast"(%4702) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %4707 = "mini.unwrap"(%4706) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4708 = "mini.unwrap"(%4705) : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4709 = "mini.get_type_field"(%4702) {"offset" = 0 : i64, "vtable_bytes" = 664 : i32} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.reified_type
    %4710 = "mini.parameterization"(%4709) {"id_hierarchy" = ["Array", [0 : i32]], "name_hierarchy" = ["ArrayArray.T_subtype_Any", ["Array.T_subtype_Any"]]} : (!mini.reified_type) -> !llvm.ptr
    %4711 = "mini.parameterizations_array"(%4710) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%4711, %4708, %4707) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %4712 = "hi.cast"(%4705) {"from_typ" = !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.return"(%4712) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "Array_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb764(%4713 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4714 : !llvm.ptr):
    %4715 = "mini.invariant"(%4714) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4716 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb765] : () -> ()
  ^bb765:
    %4717 = "llvm.mlir.constant"() <{"value" = 46 : i32}> : () -> i32
    "llvm.store"(%4717, %4716) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb766] : () -> ()
  ^bb766:
    %4718 = "llvm.extractvalue"(%4713) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4719 = "llvm.load"(%4716) : (!llvm.ptr) -> i32
    %4720 = "llvm.getelementptr"(%4718, %4719) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4721 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4722 = "llvm.getelementptr"(%4720, %4721) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4722) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb767(%4723 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4724 : !llvm.ptr):
    %4725 = "mini.invariant"(%4724) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4726 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb768] : () -> ()
  ^bb769:
    %4727 = "llvm.mlir.constant"() <{"value" = 47 : i32}> : () -> i32
    "llvm.store"(%4727, %4726) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb770] : () -> ()
  ^bb768:
    %4728 = "llvm.getelementptr"(%4724) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4729 = "mini.checkflag"(%4728) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4730 = "llvm.load"(%4729) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4730) [^bb769, ^bb769] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb770:
    %4731 = "llvm.extractvalue"(%4723) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4732 = "llvm.load"(%4726) : (!llvm.ptr) -> i32
    %4733 = "llvm.getelementptr"(%4731, %4732) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4734 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4735 = "llvm.getelementptr"(%4733, %4734) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4735) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb771(%4736 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4737 : !llvm.ptr):
    %4738 = "mini.invariant"(%4737) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4739 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb772] : () -> ()
  ^bb773:
    %4740 = "llvm.mlir.constant"() <{"value" = 48 : i32}> : () -> i32
    "llvm.store"(%4740, %4739) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb774] : () -> ()
  ^bb775:
    %4741 = "llvm.getelementptr"(%4737) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4742 = "mini.checkflag"(%4741) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4743 = "llvm.load"(%4742) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4743) [^bb773, ^bb773] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb772:
    %4744 = "llvm.getelementptr"(%4737) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4745 = "mini.checkflag"(%4744) {"typ_name" = "any_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4746 = "llvm.load"(%4745) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4746) [^bb775, ^bb775] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb774:
    %4747 = "llvm.extractvalue"(%4736) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4748 = "llvm.load"(%4739) : (!llvm.ptr) -> i32
    %4749 = "llvm.getelementptr"(%4747, %4748) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4750 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4751 = "llvm.getelementptr"(%4749, %4750) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4751) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb776(%4752 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4753 : !llvm.ptr):
    %4754 = "mini.invariant"(%4753) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4755 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb777] : () -> ()
  ^bb778:
    %4756 = "llvm.mlir.constant"() <{"value" = 49 : i32}> : () -> i32
    "llvm.store"(%4756, %4755) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb779] : () -> ()
  ^bb777:
    %4757 = "llvm.getelementptr"(%4753) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4758 = "mini.checkflag"(%4757) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4759 = "llvm.load"(%4758) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4759) [^bb778, ^bb778] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb779:
    %4760 = "llvm.extractvalue"(%4752) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4761 = "llvm.load"(%4755) : (!llvm.ptr) -> i32
    %4762 = "llvm.getelementptr"(%4760, %4761) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4763 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4764 = "llvm.getelementptr"(%4762, %4763) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4764) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_all_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb780(%4765 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4766 : !llvm.ptr):
    %4767 = "mini.invariant"(%4766) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4768 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb781] : () -> ()
  ^bb782:
    %4769 = "llvm.mlir.constant"() <{"value" = 50 : i32}> : () -> i32
    "llvm.store"(%4769, %4768) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb783] : () -> ()
  ^bb781:
    %4770 = "llvm.getelementptr"(%4766) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4771 = "mini.checkflag"(%4770) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4772 = "llvm.load"(%4771) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4772) [^bb782, ^bb782] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb783:
    %4773 = "llvm.extractvalue"(%4765) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4774 = "llvm.load"(%4768) : (!llvm.ptr) -> i32
    %4775 = "llvm.getelementptr"(%4773, %4774) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4776 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4777 = "llvm.getelementptr"(%4775, %4776) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4777) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_any_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb784(%4778 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4779 : !llvm.ptr):
    %4780 = "mini.invariant"(%4779) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4781 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb785] : () -> ()
  ^bb786:
    %4782 = "llvm.mlir.constant"() <{"value" = 51 : i32}> : () -> i32
    "llvm.store"(%4782, %4781) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb787] : () -> ()
  ^bb785:
    %4783 = "llvm.getelementptr"(%4779) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4784 = "mini.checkflag"(%4783) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4785 = "llvm.load"(%4784) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4785) [^bb786, ^bb786] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb787:
    %4786 = "llvm.extractvalue"(%4778) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4787 = "llvm.load"(%4781) : (!llvm.ptr) -> i32
    %4788 = "llvm.getelementptr"(%4786, %4787) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4789 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4790 = "llvm.getelementptr"(%4788, %4789) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4790) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb788(%4791 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4792 : !llvm.ptr):
    %4793 = "mini.invariant"(%4792) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4794 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb789] : () -> ()
  ^bb790:
    %4795 = "llvm.mlir.constant"() <{"value" = 52 : i32}> : () -> i32
    "llvm.store"(%4795, %4794) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb791] : () -> ()
  ^bb789:
    %4796 = "llvm.getelementptr"(%4792) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4797 = "mini.checkflag"(%4796) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4798 = "llvm.load"(%4797) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4798) [^bb790, ^bb790] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb791:
    %4799 = "llvm.extractvalue"(%4791) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4800 = "llvm.load"(%4794) : (!llvm.ptr) -> i32
    %4801 = "llvm.getelementptr"(%4799, %4800) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4802 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4803 = "llvm.getelementptr"(%4801, %4802) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4803) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_filter_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb792(%4804 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4805 : !llvm.ptr):
    %4806 = "mini.invariant"(%4805) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4807 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb793] : () -> ()
  ^bb794:
    %4808 = "llvm.mlir.constant"() <{"value" = 53 : i32}> : () -> i32
    "llvm.store"(%4808, %4807) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb795] : () -> ()
  ^bb793:
    %4809 = "llvm.getelementptr"(%4805) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4810 = "mini.checkflag"(%4809) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4811 = "llvm.load"(%4810) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4811) [^bb794, ^bb794] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb795:
    %4812 = "llvm.extractvalue"(%4804) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4813 = "llvm.load"(%4807) : (!llvm.ptr) -> i32
    %4814 = "llvm.getelementptr"(%4812, %4813) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4815 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4816 = "llvm.getelementptr"(%4814, %4815) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4816) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb796(%4817 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4818 : !llvm.ptr):
    %4819 = "mini.invariant"(%4818) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4820 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb797] : () -> ()
  ^bb798:
    %4821 = "llvm.mlir.constant"() <{"value" = 54 : i32}> : () -> i32
    "llvm.store"(%4821, %4820) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb799] : () -> ()
  ^bb797:
    %4822 = "llvm.getelementptr"(%4818) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4823 = "mini.checkflag"(%4822) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4824 = "llvm.load"(%4823) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4824) [^bb798, ^bb798] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb799:
    %4825 = "llvm.extractvalue"(%4817) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4826 = "llvm.load"(%4820) : (!llvm.ptr) -> i32
    %4827 = "llvm.getelementptr"(%4825, %4826) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4828 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4829 = "llvm.getelementptr"(%4827, %4828) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4829) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb800(%4830 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4831 : !llvm.ptr):
    %4832 = "mini.invariant"(%4831) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4833 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb801] : () -> ()
  ^bb802:
    %4834 = "llvm.mlir.constant"() <{"value" = 55 : i32}> : () -> i32
    "llvm.store"(%4834, %4833) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb803] : () -> ()
  ^bb801:
    %4835 = "llvm.getelementptr"(%4831) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4836 = "mini.checkflag"(%4835) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4837 = "llvm.load"(%4836) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4837) [^bb802, ^bb802] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb803:
    %4838 = "llvm.extractvalue"(%4830) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4839 = "llvm.load"(%4833) : (!llvm.ptr) -> i32
    %4840 = "llvm.getelementptr"(%4838, %4839) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4841 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4842 = "llvm.getelementptr"(%4840, %4841) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4842) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb804(%4843 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4844 : !llvm.ptr):
    %4845 = "mini.invariant"(%4844) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4846 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb805] : () -> ()
  ^bb806:
    %4847 = "llvm.mlir.constant"() <{"value" = 56 : i32}> : () -> i32
    "llvm.store"(%4847, %4846) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb807] : () -> ()
  ^bb805:
    %4848 = "llvm.getelementptr"(%4844) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4849 = "mini.checkflag"(%4848) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4850 = "llvm.load"(%4849) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4850) [^bb806, ^bb806] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb807:
    %4851 = "llvm.extractvalue"(%4843) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4852 = "llvm.load"(%4846) : (!llvm.ptr) -> i32
    %4853 = "llvm.getelementptr"(%4851, %4852) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4854 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4855 = "llvm.getelementptr"(%4853, %4854) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4855) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb808(%4856 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4857 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4858 : !llvm.ptr):
    %4859 = "mini.wrap"(%4856) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4860 = "hi.cast"(%4859) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %4861 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4862 = "mini.create_buffer"(%4861) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %4863 = "hi.cast"(%4862) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %4864 = "mini.refer"(%4863) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %4865 = "mini.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "Array"} : () -> !llvm.ptr
    %4866 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%4864, %4866, %4865) {"typ" = !llvm.array<5 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %4867 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4868 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4869 = "mini.unwrap"(%4864) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %4870 = "mini.unwrap"(%4867) : (!mini.ptr<i32>) -> i32
    %4871 = "mini.unwrap"(%4868) : (!mini.ptr<i32>) -> i32
    %4872 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %4873 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4874 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4875 = "hi.cast"(%4864) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %4876 = "mini.unwrap"(%4875) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %4877 = "hi.cast"(%4873) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4878 = "mini.unwrap"(%4877) : (!mini.ptr<i32>) -> i32
    %4879 = "hi.cast"(%4874) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4880 = "mini.unwrap"(%4879) : (!mini.ptr<i32>) -> i32
    %4881 = "mini.unwrap"(%4872) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4882 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %4883 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %4884 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %4885 = "mini.parameterizations_array"(%4882, %4883, %4884) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%4885, %4881, %4876, %4878, %4880) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %4886 = "hi.cast"(%4872) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%4886) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "Array_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb809(%4887 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4888 : !llvm.ptr):
    %4889 = "mini.invariant"(%4888) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4890 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb810] : () -> ()
  ^bb810:
    %4891 = "llvm.mlir.constant"() <{"value" = 57 : i32}> : () -> i32
    "llvm.store"(%4891, %4890) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb811] : () -> ()
  ^bb811:
    %4892 = "llvm.extractvalue"(%4887) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4893 = "llvm.load"(%4890) : (!llvm.ptr) -> i32
    %4894 = "llvm.getelementptr"(%4892, %4893) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<83 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4895 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4896 = "llvm.getelementptr"(%4894, %4895) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4896) : (!llvm.ptr) -> ()
  }) {"func_name" = "Array_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ArrayIterator", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "ArrayIterator_field_ArrayIterator_0"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ArrayIterator_getter_array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Array", "parameterization" = "_parameterization_ArrayArrayIterator.T_subtype_Any"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ArrayIterator_setter_array", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "Array", "parameterization" = "_parameterization_ArrayArrayIterator.T_subtype_Any"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ArrayIterator_field_array", "getter_name" = "ArrayIterator_getter_array", "setter_name" = "ArrayIterator_setter_array"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ArrayIterator_getter_index", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ArrayIterator_setter_index", "types" = [!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ArrayIterator_field_index", "getter_name" = "ArrayIterator_getter_index", "setter_name" = "ArrayIterator_setter_index"} : () -> ()
  "mini.func"() ({
  ^bb812(%4897 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4898 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4899 : !llvm.ptr, %4900 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %4901 = "mini.wrap"(%4897) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %4902 = "hi.cast"(%4901) {"from_typ" = !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, "to_typ" = !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %4903 = "mini.wrap"(%4900) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %4904 = "hi.cast"(%4903) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %4905 = "hi.cast"(%4904) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    "mini.set_field"(%4902, %4905) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> ()
    %4906 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4907 = "hi.cast"(%4906) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4902, %4907) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, !mini.ptr<i32>) -> ()
  }) {"func_name" = "ArrayIterator_init_arrayArrayT", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb813(%4908 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4909 : !llvm.ptr):
    %4910 = "mini.invariant"(%4909) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4911 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb814] : () -> ()
  ^bb815:
    %4912 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%4912, %4911) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb816] : () -> ()
  ^bb814:
    %4913 = "llvm.getelementptr"(%4909) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4914 = "mini.checkflag"(%4913) {"typ_name" = "Array"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4915 = "llvm.load"(%4914) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4915) [^bb815, ^bb815] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb816:
    %4916 = "llvm.extractvalue"(%4908) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4917 = "llvm.load"(%4911) : (!llvm.ptr) -> i32
    %4918 = "llvm.getelementptr"(%4916, %4917) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4919 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4920 = "llvm.getelementptr"(%4918, %4919) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4920) : (!llvm.ptr) -> ()
  }) {"func_name" = "ArrayIterator_B_init_arrayArrayT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb817(%4921 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4922 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4923 : !llvm.ptr):
    %4924 = "mini.wrap"(%4921) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %4925 = "hi.cast"(%4924) {"from_typ" = !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, "to_typ" = !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %4926 = "mini.get_field"(%4925) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.ptr<i32>
    %4927 = "mini.get_field"(%4925) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Array"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %4928 = "mini.unwrap"(%4927) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4929 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %4930 = "mini.method_call"(%4929, %4928) {"offset" = 9 : i32, "vptrs" = [], "vtable_size" = 83 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %4931 = "hi.cast"(%4930) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4932 = "mini.unwrap"(%4926) : (!mini.ptr<i32>) -> i32
    %4933 = "mini.unwrap"(%4931) : (!mini.ptr<i32>) -> i32
    %4934 = "mini.comparison"(%4932, %4933) {"op" = "GE"} : (i32, i32) -> i1
    %4935 = "mini.wrap"(%4934) : (i1) -> !mini.ptr<i32>
    %4936 = "mini.unwrap"(%4935) : (!mini.ptr<i32>) -> i1
    "mini.if"(%4936) ({
      %4937 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %4938 = "hi.cast"(%4937) {"from_typ" = !mini.nil, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      "mini.return"(%4938) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %4939 = "mini.get_field"(%4925) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.ptr<i32>
    %4940 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4941 = "mini.unwrap"(%4939) : (!mini.ptr<i32>) -> i32
    %4942 = "mini.unwrap"(%4940) : (!mini.ptr<i32>) -> i32
    %4943 = "mini.arithmetic"(%4941, %4942) {"op" = "ADD"} : (i32, i32) -> i32
    %4944 = "mini.wrap"(%4943) : (i32) -> !mini.ptr<i32>
    %4945 = "hi.cast"(%4944) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4925, %4945) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>, !mini.ptr<i32>) -> ()
    %4946 = "mini.get_field"(%4925) {"offset" = 2 : i64, "vtable_bytes" = 80 : i32, "original_type" = i32} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.ptr<i32>
    %4947 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4948 = "mini.unwrap"(%4946) : (!mini.ptr<i32>) -> i32
    %4949 = "mini.unwrap"(%4947) : (!mini.ptr<i32>) -> i32
    %4950 = "mini.arithmetic"(%4948, %4949) {"op" = "SUB"} : (i32, i32) -> i32
    %4951 = "mini.wrap"(%4950) : (i32) -> !mini.ptr<i32>
    %4952 = "hi.cast"(%4951) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4953 = "mini.unwrap"(%4952) : (!mini.ptr<i32>) -> i32
    %4954 = "mini.get_field"(%4925) {"offset" = 1 : i64, "vtable_bytes" = 80 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "Array"} : (!mini.fatptr<"ArrayIterator", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>
    %4955 = "mini.unwrap"(%4954) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "ArrayIterator">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %4956 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %4957 = "mini.parameterizations_array"(%4956) : (!llvm.ptr) -> !llvm.ptr
    %4958 = "mini.method_call"(%4957, %4955, %4953) {"offset" = 17 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.type_param<"T", !mini.any, "Array">
    %4959 = "hi.cast"(%4958) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.type_param<"T", !mini.any, "ArrayIterator">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.type_param<"T", !mini.any, "ArrayIterator">
    %4960 = "hi.cast"(%4959) {"from_typ" = !mini.type_param<"T", !mini.any, "ArrayIterator">, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "any_typ", "to_typ_name" = "union_typ"} : (!mini.type_param<"T", !mini.any, "ArrayIterator">) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    "mini.return"(%4960) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
  }) {"func_name" = "ArrayIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb818(%4961 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4962 : !llvm.ptr):
    %4963 = "mini.invariant"(%4962) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4964 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb819] : () -> ()
  ^bb819:
    %4965 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%4965, %4964) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb820] : () -> ()
  ^bb820:
    %4966 = "llvm.extractvalue"(%4961) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4967 = "llvm.load"(%4964) : (!llvm.ptr) -> i32
    %4968 = "llvm.getelementptr"(%4966, %4967) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<10 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4969 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4970 = "llvm.getelementptr"(%4968, %4969) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4970) : (!llvm.ptr) -> ()
  }) {"func_name" = "ArrayIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Range", "types" = [i32, i32, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Range_getter_start", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Range_setter_start", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Range_field_start", "getter_name" = "Range_getter_start", "setter_name" = "Range_setter_start"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Range_getter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Range_setter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Range_field_end", "getter_name" = "Range_getter_end", "setter_name" = "Range_setter_end"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Range_getter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Range_setter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Range_field_step", "getter_name" = "Range_getter_step", "setter_name" = "Range_setter_step"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "Range_field_Range_0", "id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> ()
  "mini.func"() ({
  ^bb821(%4971 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4972 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4973 : !llvm.ptr, %4974 : i32):
    %4975 = "mini.wrap"(%4971) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %4976 = "hi.cast"(%4975) {"from_typ" = !mini.fatptr<"Range">, "to_typ" = !mini.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %4977 = "mini.wrap"(%4974) : (i32) -> !mini.ptr<i32>
    %4978 = "hi.cast"(%4977) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %4979 = "hi.cast"(%4978) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4976, %4979) {"offset" = 1 : i64, "vtable_bytes" = 440 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %4980 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4981 = "hi.cast"(%4980) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4976, %4981) {"offset" = 0 : i64, "vtable_bytes" = 440 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %4982 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %4983 = "hi.cast"(%4982) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%4976, %4983) {"offset" = 2 : i64, "vtable_bytes" = 440 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Range_init_endi32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb822(%4984 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4985 : !llvm.ptr):
    %4986 = "mini.invariant"(%4985) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %4987 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb823] : () -> ()
  ^bb824:
    %4988 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%4988, %4987) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb825] : () -> ()
  ^bb823:
    %4989 = "llvm.getelementptr"(%4985) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %4990 = "mini.checkflag"(%4989) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %4991 = "llvm.load"(%4990) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%4991) [^bb824, ^bb824] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb825:
    %4992 = "llvm.extractvalue"(%4984) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %4993 = "llvm.load"(%4987) : (!llvm.ptr) -> i32
    %4994 = "llvm.getelementptr"(%4992, %4993) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %4995 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %4996 = "llvm.getelementptr"(%4994, %4995) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%4996) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_init_endi32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb826(%4997 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4998 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %4999 : !llvm.ptr, %5000 : i32, %5001 : i32):
    %5002 = "mini.wrap"(%4997) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %5003 = "hi.cast"(%5002) {"from_typ" = !mini.fatptr<"Range">, "to_typ" = !mini.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %5004 = "mini.wrap"(%5000) : (i32) -> !mini.ptr<i32>
    %5005 = "hi.cast"(%5004) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %5006 = "hi.cast"(%5005) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%5003, %5006) {"offset" = 0 : i64, "vtable_bytes" = 440 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %5007 = "mini.wrap"(%5001) : (i32) -> !mini.ptr<i32>
    %5008 = "hi.cast"(%5007) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %5009 = "hi.cast"(%5008) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%5003, %5009) {"offset" = 1 : i64, "vtable_bytes" = 440 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %5010 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5011 = "hi.cast"(%5010) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%5003, %5011) {"offset" = 2 : i64, "vtable_bytes" = 440 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Range_init_starti32_endi32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb827(%5012 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5013 : !llvm.ptr):
    %5014 = "mini.invariant"(%5013) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5015 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb828] : () -> ()
  ^bb829:
    %5016 = "llvm.mlir.constant"() <{"value" = 19 : i32}> : () -> i32
    "llvm.store"(%5016, %5015) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb830] : () -> ()
  ^bb831:
    %5017 = "llvm.getelementptr"(%5013) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5018 = "mini.checkflag"(%5017) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5019 = "llvm.load"(%5018) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5019) [^bb829, ^bb829] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb828:
    %5020 = "llvm.getelementptr"(%5013) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5021 = "mini.checkflag"(%5020) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5022 = "llvm.load"(%5021) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5022) [^bb831, ^bb831] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb830:
    %5023 = "llvm.extractvalue"(%5012) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5024 = "llvm.load"(%5015) : (!llvm.ptr) -> i32
    %5025 = "llvm.getelementptr"(%5023, %5024) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5026 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5027 = "llvm.getelementptr"(%5025, %5026) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5027) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_init_starti32_endi32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb832(%5028 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5029 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5030 : !llvm.ptr, %5031 : i32):
    %5032 = "mini.wrap"(%5028) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %5033 = "hi.cast"(%5032) {"from_typ" = !mini.fatptr<"Range">, "to_typ" = !mini.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %5034 = "mini.wrap"(%5031) : (i32) -> !mini.ptr<i32>
    %5035 = "hi.cast"(%5034) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %5036 = "hi.cast"(%5035) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%5033, %5036) {"offset" = 2 : i64, "vtable_bytes" = 440 : i32, "original_type" = i32} : (!mini.fatptr<"Range">, !mini.ptr<i32>) -> ()
    %5037 = "hi.cast"(%5033) {"from_typ" = !mini.fatptr<"Range">, "to_typ" = !mini.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    "mini.return"(%5037) : (!mini.fatptr<"Range">) -> ()
  }) {"func_name" = "Range_step_stepi32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb833(%5038 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5039 : !llvm.ptr):
    %5040 = "mini.invariant"(%5039) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5041 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb834] : () -> ()
  ^bb835:
    %5042 = "llvm.mlir.constant"() <{"value" = 20 : i32}> : () -> i32
    "llvm.store"(%5042, %5041) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb836] : () -> ()
  ^bb834:
    %5043 = "llvm.getelementptr"(%5039) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5044 = "mini.checkflag"(%5043) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5045 = "llvm.load"(%5044) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5045) [^bb835, ^bb835] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb836:
    %5046 = "llvm.extractvalue"(%5038) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5047 = "llvm.load"(%5041) : (!llvm.ptr) -> i32
    %5048 = "llvm.getelementptr"(%5046, %5047) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5049 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5050 = "llvm.getelementptr"(%5048, %5049) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5050) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_step_stepi32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb837(%5051 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5052 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5053 : !llvm.ptr):
    %5054 = "mini.wrap"(%5051) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Range">
    %5055 = "hi.cast"(%5054) {"from_typ" = !mini.fatptr<"Range">, "to_typ" = !mini.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %5056 = "mini.get_field"(%5055) {"offset" = 0 : i64, "vtable_bytes" = 440 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %5057 = "mini.get_field"(%5055) {"offset" = 1 : i64, "vtable_bytes" = 440 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %5058 = "mini.get_field"(%5055) {"offset" = 2 : i64, "vtable_bytes" = 440 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %5059 = "mini.unwrap"(%5056) : (!mini.ptr<i32>) -> i32
    %5060 = "mini.unwrap"(%5057) : (!mini.ptr<i32>) -> i32
    %5061 = "mini.unwrap"(%5058) : (!mini.ptr<i32>) -> i32
    %5062 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "RangeIterator", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"RangeIterator">
    %5063 = "mini.get_field"(%5055) {"offset" = 0 : i64, "vtable_bytes" = 440 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %5064 = "mini.get_field"(%5055) {"offset" = 1 : i64, "vtable_bytes" = 440 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %5065 = "mini.get_field"(%5055) {"offset" = 2 : i64, "vtable_bytes" = 440 : i32, "original_type" = i32} : (!mini.fatptr<"Range">) -> !mini.ptr<i32>
    %5066 = "hi.cast"(%5063) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %5067 = "mini.unwrap"(%5066) : (!mini.ptr<i32>) -> i32
    %5068 = "hi.cast"(%5064) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %5069 = "mini.unwrap"(%5068) : (!mini.ptr<i32>) -> i32
    %5070 = "hi.cast"(%5065) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %5071 = "mini.unwrap"(%5070) : (!mini.ptr<i32>) -> i32
    %5072 = "mini.unwrap"(%5062) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5073 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %5074 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %5075 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %5076 = "mini.parameterizations_array"(%5073, %5074, %5075) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5076, %5072, %5067, %5069, %5071) {"offset" = 4 : i32, "vptrs" = ["i32_typ", "i32_typ", "i32_typ"], "vtable_size" = 11 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32, i32) -> ()
    %5077 = "hi.cast"(%5062) {"from_typ" = !mini.fatptr<"RangeIterator">, "to_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "from_typ_name" = "RangeIterator", "to_typ_name" = "Iterator"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    "mini.return"(%5077) : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> ()
  }) {"func_name" = "Range_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb838(%5078 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5079 : !llvm.ptr):
    %5080 = "mini.invariant"(%5079) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5081 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb839] : () -> ()
  ^bb839:
    %5082 = "llvm.mlir.constant"() <{"value" = 21 : i32}> : () -> i32
    "llvm.store"(%5082, %5081) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb840] : () -> ()
  ^bb840:
    %5083 = "llvm.extractvalue"(%5078) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5084 = "llvm.load"(%5081) : (!llvm.ptr) -> i32
    %5085 = "llvm.getelementptr"(%5083, %5084) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5086 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5087 = "llvm.getelementptr"(%5085, %5086) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5087) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb841(%5088 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5089 : !llvm.ptr):
    %5090 = "mini.invariant"(%5089) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5091 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb842] : () -> ()
  ^bb843:
    %5092 = "llvm.mlir.constant"() <{"value" = 22 : i32}> : () -> i32
    "llvm.store"(%5092, %5091) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb844] : () -> ()
  ^bb842:
    %5093 = "llvm.getelementptr"(%5089) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5094 = "mini.checkflag"(%5093) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5095 = "llvm.load"(%5094) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5095) [^bb843, ^bb843] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb844:
    %5096 = "llvm.extractvalue"(%5088) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5097 = "llvm.load"(%5091) : (!llvm.ptr) -> i32
    %5098 = "llvm.getelementptr"(%5096, %5097) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5099 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5100 = "llvm.getelementptr"(%5098, %5099) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5100) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_each_fFunctionT_to_Nothing", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb845(%5101 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5102 : !llvm.ptr):
    %5103 = "mini.invariant"(%5102) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5104 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb846] : () -> ()
  ^bb847:
    %5105 = "llvm.mlir.constant"() <{"value" = 23 : i32}> : () -> i32
    "llvm.store"(%5105, %5104) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb848] : () -> ()
  ^bb849:
    %5106 = "llvm.getelementptr"(%5102) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5107 = "mini.checkflag"(%5106) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5108 = "llvm.load"(%5107) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5108) [^bb847, ^bb847] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb846:
    %5109 = "llvm.getelementptr"(%5102) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5110 = "mini.checkflag"(%5109) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5111 = "llvm.load"(%5110) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5111) [^bb849, ^bb849] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb848:
    %5112 = "llvm.extractvalue"(%5101) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5113 = "llvm.load"(%5104) : (!llvm.ptr) -> i32
    %5114 = "llvm.getelementptr"(%5112, %5113) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5115 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5116 = "llvm.getelementptr"(%5114, %5115) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5116) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_reduce_accumulatorT_fFunctionT._T_to_T", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb850(%5117 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5118 : !llvm.ptr):
    %5119 = "mini.invariant"(%5118) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5120 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb851] : () -> ()
  ^bb852:
    %5121 = "llvm.mlir.constant"() <{"value" = 24 : i32}> : () -> i32
    "llvm.store"(%5121, %5120) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb853] : () -> ()
  ^bb851:
    %5122 = "llvm.getelementptr"(%5118) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5123 = "mini.checkflag"(%5122) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5124 = "llvm.load"(%5123) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5124) [^bb852, ^bb852] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb853:
    %5125 = "llvm.extractvalue"(%5117) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5126 = "llvm.load"(%5120) : (!llvm.ptr) -> i32
    %5127 = "llvm.getelementptr"(%5125, %5126) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5128 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5129 = "llvm.getelementptr"(%5127, %5128) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5129) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_all_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb854(%5130 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5131 : !llvm.ptr):
    %5132 = "mini.invariant"(%5131) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5133 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb855] : () -> ()
  ^bb856:
    %5134 = "llvm.mlir.constant"() <{"value" = 25 : i32}> : () -> i32
    "llvm.store"(%5134, %5133) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb857] : () -> ()
  ^bb855:
    %5135 = "llvm.getelementptr"(%5131) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5136 = "mini.checkflag"(%5135) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5137 = "llvm.load"(%5136) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5137) [^bb856, ^bb856] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb857:
    %5138 = "llvm.extractvalue"(%5130) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5139 = "llvm.load"(%5133) : (!llvm.ptr) -> i32
    %5140 = "llvm.getelementptr"(%5138, %5139) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5141 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5142 = "llvm.getelementptr"(%5140, %5141) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5142) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_any_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb858(%5143 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5144 : !llvm.ptr):
    %5145 = "mini.invariant"(%5144) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5146 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb859] : () -> ()
  ^bb860:
    %5147 = "llvm.mlir.constant"() <{"value" = 26 : i32}> : () -> i32
    "llvm.store"(%5147, %5146) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb861] : () -> ()
  ^bb859:
    %5148 = "llvm.getelementptr"(%5144) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5149 = "mini.checkflag"(%5148) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5150 = "llvm.load"(%5149) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5150) [^bb860, ^bb860] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb861:
    %5151 = "llvm.extractvalue"(%5143) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5152 = "llvm.load"(%5146) : (!llvm.ptr) -> i32
    %5153 = "llvm.getelementptr"(%5151, %5152) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5154 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5155 = "llvm.getelementptr"(%5153, %5154) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5155) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_map_fFunctionT_to_U", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb862(%5156 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5157 : !llvm.ptr):
    %5158 = "mini.invariant"(%5157) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5159 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb863] : () -> ()
  ^bb864:
    %5160 = "llvm.mlir.constant"() <{"value" = 27 : i32}> : () -> i32
    "llvm.store"(%5160, %5159) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb865] : () -> ()
  ^bb863:
    %5161 = "llvm.getelementptr"(%5157) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5162 = "mini.checkflag"(%5161) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5163 = "llvm.load"(%5162) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5163) [^bb864, ^bb864] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb865:
    %5164 = "llvm.extractvalue"(%5156) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5165 = "llvm.load"(%5159) : (!llvm.ptr) -> i32
    %5166 = "llvm.getelementptr"(%5164, %5165) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5167 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5168 = "llvm.getelementptr"(%5166, %5167) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5168) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_filter_fFunctionT_to_i1", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb866(%5169 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5170 : !llvm.ptr):
    %5171 = "mini.invariant"(%5170) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5172 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb867] : () -> ()
  ^bb868:
    %5173 = "llvm.mlir.constant"() <{"value" = 28 : i32}> : () -> i32
    "llvm.store"(%5173, %5172) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb869] : () -> ()
  ^bb867:
    %5174 = "llvm.getelementptr"(%5170) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5175 = "mini.checkflag"(%5174) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5176 = "llvm.load"(%5175) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5176) [^bb868, ^bb868] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb869:
    %5177 = "llvm.extractvalue"(%5169) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5178 = "llvm.load"(%5172) : (!llvm.ptr) -> i32
    %5179 = "llvm.getelementptr"(%5177, %5178) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5180 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5181 = "llvm.getelementptr"(%5179, %5180) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5181) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_chain_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb870(%5182 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5183 : !llvm.ptr):
    %5184 = "mini.invariant"(%5183) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5185 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb871] : () -> ()
  ^bb872:
    %5186 = "llvm.mlir.constant"() <{"value" = 29 : i32}> : () -> i32
    "llvm.store"(%5186, %5185) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb873] : () -> ()
  ^bb871:
    %5187 = "llvm.getelementptr"(%5183) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5188 = "mini.checkflag"(%5187) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5189 = "llvm.load"(%5188) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5189) [^bb872, ^bb872] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb873:
    %5190 = "llvm.extractvalue"(%5182) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5191 = "llvm.load"(%5185) : (!llvm.ptr) -> i32
    %5192 = "llvm.getelementptr"(%5190, %5191) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5193 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5194 = "llvm.getelementptr"(%5192, %5193) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5194) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_interleave_otherIterableT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb874(%5195 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5196 : !llvm.ptr):
    %5197 = "mini.invariant"(%5196) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5198 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb875] : () -> ()
  ^bb876:
    %5199 = "llvm.mlir.constant"() <{"value" = 30 : i32}> : () -> i32
    "llvm.store"(%5199, %5198) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb877] : () -> ()
  ^bb875:
    %5200 = "llvm.getelementptr"(%5196) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5201 = "mini.checkflag"(%5200) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5202 = "llvm.load"(%5201) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5202) [^bb876, ^bb876] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb877:
    %5203 = "llvm.extractvalue"(%5195) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5204 = "llvm.load"(%5198) : (!llvm.ptr) -> i32
    %5205 = "llvm.getelementptr"(%5203, %5204) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5206 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5207 = "llvm.getelementptr"(%5205, %5206) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5207) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_zip_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb878(%5208 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5209 : !llvm.ptr):
    %5210 = "mini.invariant"(%5209) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5211 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb879] : () -> ()
  ^bb880:
    %5212 = "llvm.mlir.constant"() <{"value" = 31 : i32}> : () -> i32
    "llvm.store"(%5212, %5211) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb881] : () -> ()
  ^bb879:
    %5213 = "llvm.getelementptr"(%5209) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5214 = "mini.checkflag"(%5213) {"typ_name" = "Iterable"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5215 = "llvm.load"(%5214) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5215) [^bb880, ^bb880] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb881:
    %5216 = "llvm.extractvalue"(%5208) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5217 = "llvm.load"(%5211) : (!llvm.ptr) -> i32
    %5218 = "llvm.getelementptr"(%5216, %5217) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<55 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5219 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5220 = "llvm.getelementptr"(%5218, %5219) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5220) : (!llvm.ptr) -> ()
  }) {"func_name" = "Range_B_product_otherIterableU", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_RangeIterator", "types" = [i32, i32, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "RangeIterator_getter_counter", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "RangeIterator_setter_counter", "types" = [i32, i32, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "RangeIterator_field_counter", "getter_name" = "RangeIterator_getter_counter", "setter_name" = "RangeIterator_setter_counter"} : () -> ()
  "mini.getter_def"() {"meth_name" = "RangeIterator_getter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "RangeIterator_setter_end", "types" = [i32, i32, i32], "offset" = 1 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "RangeIterator_field_end", "getter_name" = "RangeIterator_getter_end", "setter_name" = "RangeIterator_setter_end"} : () -> ()
  "mini.getter_def"() {"meth_name" = "RangeIterator_getter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "RangeIterator_setter_step", "types" = [i32, i32, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "RangeIterator_field_step", "getter_name" = "RangeIterator_getter_step", "setter_name" = "RangeIterator_setter_step"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 3 : i32, "meth_name" = "RangeIterator_field_RangeIterator_0", "id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> ()
  "mini.func"() ({
  ^bb882(%5221 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5222 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5223 : !llvm.ptr, %5224 : i32, %5225 : i32, %5226 : i32):
    %5227 = "mini.wrap"(%5221) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"RangeIterator">
    %5228 = "hi.cast"(%5227) {"from_typ" = !mini.fatptr<"RangeIterator">, "to_typ" = !mini.fatptr<"RangeIterator">, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %5229 = "mini.wrap"(%5224) : (i32) -> !mini.ptr<i32>
    %5230 = "hi.cast"(%5229) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %5231 = "hi.cast"(%5230) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%5228, %5231) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">, !mini.ptr<i32>) -> ()
    %5232 = "mini.wrap"(%5225) : (i32) -> !mini.ptr<i32>
    %5233 = "hi.cast"(%5232) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %5234 = "hi.cast"(%5233) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%5228, %5234) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">, !mini.ptr<i32>) -> ()
    %5235 = "mini.wrap"(%5226) : (i32) -> !mini.ptr<i32>
    %5236 = "hi.cast"(%5235) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %5237 = "hi.cast"(%5236) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%5228, %5237) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "RangeIterator_init_counteri32_endi32_stepi32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb883(%5238 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5239 : !llvm.ptr):
    %5240 = "mini.invariant"(%5239) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5241 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb884] : () -> ()
  ^bb885:
    %5242 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%5242, %5241) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb886] : () -> ()
  ^bb887:
    %5243 = "llvm.getelementptr"(%5239) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5244 = "mini.checkflag"(%5243) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5245 = "llvm.load"(%5244) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5245) [^bb885, ^bb885] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb888:
    %5246 = "llvm.getelementptr"(%5239) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5247 = "mini.checkflag"(%5246) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5248 = "llvm.load"(%5247) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5248) [^bb887, ^bb887] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb884:
    %5249 = "llvm.getelementptr"(%5239) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5250 = "mini.checkflag"(%5249) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5251 = "llvm.load"(%5250) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5251) [^bb888, ^bb888] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb886:
    %5252 = "llvm.extractvalue"(%5238) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5253 = "llvm.load"(%5241) : (!llvm.ptr) -> i32
    %5254 = "llvm.getelementptr"(%5252, %5253) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5255 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5256 = "llvm.getelementptr"(%5254, %5255) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5256) : (!llvm.ptr) -> ()
  }) {"func_name" = "RangeIterator_B_init_counteri32_endi32_stepi32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb889(%5257 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5258 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5259 : !llvm.ptr):
    %5260 = "mini.wrap"(%5257) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"RangeIterator">
    %5261 = "hi.cast"(%5260) {"from_typ" = !mini.fatptr<"RangeIterator">, "to_typ" = !mini.fatptr<"RangeIterator">, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %5262 = "mini.get_field"(%5261) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %5263 = "mini.get_field"(%5261) {"offset" = 1 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %5264 = "mini.unwrap"(%5262) : (!mini.ptr<i32>) -> i32
    %5265 = "mini.unwrap"(%5263) : (!mini.ptr<i32>) -> i32
    %5266 = "mini.comparison"(%5264, %5265) {"op" = "GT"} : (i32, i32) -> i1
    %5267 = "mini.wrap"(%5266) : (i1) -> !mini.ptr<i32>
    %5268 = "mini.unwrap"(%5267) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5268) ({
      %5269 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %5270 = "hi.cast"(%5269) {"from_typ" = !mini.nil, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      "mini.return"(%5270) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %5271 = "mini.get_field"(%5261) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %5272 = "mini.get_field"(%5261) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %5273 = "mini.unwrap"(%5271) : (!mini.ptr<i32>) -> i32
    %5274 = "mini.unwrap"(%5272) : (!mini.ptr<i32>) -> i32
    %5275 = "mini.arithmetic"(%5273, %5274) {"op" = "ADD"} : (i32, i32) -> i32
    %5276 = "mini.wrap"(%5275) : (i32) -> !mini.ptr<i32>
    %5277 = "hi.cast"(%5276) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%5261, %5277) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">, !mini.ptr<i32>) -> ()
    %5278 = "mini.get_field"(%5261) {"offset" = 0 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %5279 = "mini.get_field"(%5261) {"offset" = 2 : i64, "vtable_bytes" = 88 : i32, "original_type" = i32} : (!mini.fatptr<"RangeIterator">) -> !mini.ptr<i32>
    %5280 = "mini.unwrap"(%5278) : (!mini.ptr<i32>) -> i32
    %5281 = "mini.unwrap"(%5279) : (!mini.ptr<i32>) -> i32
    %5282 = "mini.arithmetic"(%5280, %5281) {"op" = "SUB"} : (i32, i32) -> i32
    %5283 = "mini.wrap"(%5282) : (i32) -> !mini.ptr<i32>
    %5284 = "hi.cast"(%5283) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
    "mini.return"(%5284) : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> ()
  }) {"func_name" = "RangeIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb890(%5285 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5286 : !llvm.ptr):
    %5287 = "mini.invariant"(%5286) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5288 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb891] : () -> ()
  ^bb891:
    %5289 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%5289, %5288) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb892] : () -> ()
  ^bb892:
    %5290 = "llvm.extractvalue"(%5285) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5291 = "llvm.load"(%5288) : (!llvm.ptr) -> i32
    %5292 = "llvm.getelementptr"(%5290, %5291) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<11 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5293 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5294 = "llvm.getelementptr"(%5292, %5293) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5294) : (!llvm.ptr) -> ()
  }) {"func_name" = "RangeIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "llvm.func"() <{"sym_name" = "fopen", "function_type" = !llvm.func<!llvm.struct<(!llvm.ptr)> (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fprintf", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fclose", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "fgetc", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "ferror", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_FileSystemError", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "FileSystemError_getter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FileSystemError_setter_line_number", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FileSystemError_field_line_number", "getter_name" = "FileSystemError_getter_line_number", "setter_name" = "FileSystemError_setter_line_number"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FileSystemError_getter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FileSystemError_setter_file_name", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FileSystemError_field_file_name", "getter_name" = "FileSystemError_getter_file_name", "setter_name" = "FileSystemError_setter_file_name"} : () -> ()
  "mini.getter_def"() {"meth_name" = "FileSystemError_getter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FileSystemError_setter_message", "types" = [i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FileSystemError_field_message", "getter_name" = "FileSystemError_getter_message", "setter_name" = "FileSystemError_setter_message"} : () -> ()
  "mini.func"() ({
  ^bb893(%5295 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5296 : !llvm.ptr):
    %5297 = "mini.invariant"(%5296) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5298 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb894] : () -> ()
  ^bb895:
    %5299 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%5299, %5298) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb896] : () -> ()
  ^bb894:
    %5300 = "llvm.getelementptr"(%5296) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5301 = "mini.checkflag"(%5300) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5302 = "llvm.load"(%5301) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5302) [^bb895, ^bb895] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb896:
    %5303 = "llvm.extractvalue"(%5295) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5304 = "llvm.load"(%5298) : (!llvm.ptr) -> i32
    %5305 = "llvm.getelementptr"(%5303, %5304) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<26 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5306 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5307 = "llvm.getelementptr"(%5305, %5306) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5307) : (!llvm.ptr) -> ()
  }) {"func_name" = "FileSystemError_B_init_messageString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb897(%5308 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5309 : !llvm.ptr):
    %5310 = "mini.invariant"(%5309) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5311 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb898] : () -> ()
  ^bb898:
    %5312 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%5312, %5311) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb899] : () -> ()
  ^bb899:
    %5313 = "llvm.extractvalue"(%5308) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5314 = "llvm.load"(%5311) : (!llvm.ptr) -> i32
    %5315 = "llvm.getelementptr"(%5313, %5314) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<26 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5316 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5317 = "llvm.getelementptr"(%5315, %5316) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5317) : (!llvm.ptr) -> ()
  }) {"func_name" = "FileSystemError_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb900(%5318 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5319 : !llvm.ptr):
    %5320 = "mini.invariant"(%5319) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5321 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb901] : () -> ()
  ^bb902:
    %5322 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%5322, %5321) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb903] : () -> ()
  ^bb904:
    %5323 = "llvm.getelementptr"(%5319) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5324 = "mini.checkflag"(%5323) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5325 = "llvm.load"(%5324) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5325) [^bb902, ^bb902] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb901:
    %5326 = "llvm.getelementptr"(%5319) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5327 = "mini.checkflag"(%5326) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5328 = "llvm.load"(%5327) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5328) [^bb904, ^bb904] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb903:
    %5329 = "llvm.extractvalue"(%5318) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5330 = "llvm.load"(%5321) : (!llvm.ptr) -> i32
    %5331 = "llvm.getelementptr"(%5329, %5330) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<26 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5332 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5333 = "llvm.getelementptr"(%5331, %5332) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5333) : (!llvm.ptr) -> ()
  }) {"func_name" = "FileSystemError_B_set_info_line_numberi32_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb905(%5334 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5335 : !llvm.ptr):
    %5336 = "mini.invariant"(%5335) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5337 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb906] : () -> ()
  ^bb906:
    %5338 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%5338, %5337) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb907] : () -> ()
  ^bb907:
    %5339 = "llvm.extractvalue"(%5334) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5340 = "llvm.load"(%5337) : (!llvm.ptr) -> i32
    %5341 = "llvm.getelementptr"(%5339, %5340) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<26 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5342 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5343 = "llvm.getelementptr"(%5341, %5342) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5343) : (!llvm.ptr) -> ()
  }) {"func_name" = "FileSystemError_B_report_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb908(%5344 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5345 : !llvm.ptr):
    %5346 = "mini.invariant"(%5345) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5347 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb909] : () -> ()
  ^bb909:
    %5348 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%5348, %5347) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb910] : () -> ()
  ^bb910:
    %5349 = "llvm.extractvalue"(%5344) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5350 = "llvm.load"(%5347) : (!llvm.ptr) -> i32
    %5351 = "llvm.getelementptr"(%5349, %5350) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<26 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5352 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5353 = "llvm.getelementptr"(%5351, %5352) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5353) : (!llvm.ptr) -> ()
  }) {"func_name" = "FileSystemError_B_print_message_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_File", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1]} : () -> ()
  "mini.getter_def"() {"meth_name" = "File_getter_name", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "File_setter_name", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "File_field_name", "getter_name" = "File_getter_name", "setter_name" = "File_setter_name"} : () -> ()
  "mini.getter_def"() {"meth_name" = "File_getter_mode", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "File_setter_mode", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "File_field_mode", "getter_name" = "File_getter_mode", "setter_name" = "File_setter_mode"} : () -> ()
  "mini.getter_def"() {"meth_name" = "File_getter_handle", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "File_setter_handle", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 2 : i64, "original_type" = !llvm.struct<(!llvm.ptr)>, "specialized_name" = "buffer_typ", "parameterization" = "_parameterization_Bufferi32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "File_field_handle", "getter_name" = "File_getter_handle", "setter_name" = "File_setter_handle"} : () -> ()
  "mini.getter_def"() {"meth_name" = "File_getter_open", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_i1"} : () -> ()
  "mini.setter_def"() {"meth_name" = "File_setter_open", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1], "offset" = 3 : i64, "original_type" = i1, "specialized_name" = "bool_typ", "parameterization" = "_parameterization_i1"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "File_field_open", "getter_name" = "File_getter_open", "setter_name" = "File_setter_open"} : () -> ()
  "mini.func"() ({
  ^bb911(%5354 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5355 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5356 : !llvm.ptr, %5357 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5358 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5359 = "mini.wrap"(%5354) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"File">
    %5360 = "hi.cast"(%5359) {"from_typ" = !mini.fatptr<"File">, "to_typ" = !mini.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!mini.fatptr<"File">) -> !mini.fatptr<"File">
    %5361 = "mini.wrap"(%5357) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %5362 = "hi.cast"(%5361) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5363 = "hi.cast"(%5362) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%5360, %5363) {"offset" = 0 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"File">, !mini.fatptr<"String">) -> ()
    %5364 = "mini.wrap"(%5358) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %5365 = "hi.cast"(%5364) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5366 = "hi.cast"(%5365) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%5360, %5366) {"offset" = 1 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"File">, !mini.fatptr<"String">) -> ()
    %5367 = "mini.get_field"(%5360) {"offset" = 0 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"File">) -> !mini.fatptr<"String">
    %5368 = "mini.unwrap"(%5367) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5369 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5370 = "mini.method_call"(%5369, %5368) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %5371 = "hi.cast"(%5370) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5372 = "mini.get_field"(%5360) {"offset" = 1 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"File">) -> !mini.fatptr<"String">
    %5373 = "mini.unwrap"(%5372) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5374 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5375 = "mini.method_call"(%5374, %5373) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %5376 = "hi.cast"(%5375) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5377 = "mini.unwrap"(%5371) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5378 = "mini.unwrap"(%5376) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5379 = "mini.call"(%5377, %5378) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i32>>
    %5380 = "hi.cast"(%5379) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.ptr<i32>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    "mini.set_field"(%5360, %5380) {"offset" = 2 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"File">, !mini.buffer<!mini.ptr<i32>>) -> ()
    %5381 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %5382 = "hi.cast"(%5381) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
    "mini.set_field"(%5360, %5382) {"offset" = 3 : i64, "vtable_bytes" = 128 : i32, "original_type" = i1} : (!mini.fatptr<"File">, !mini.ptr<i1>) -> ()
  }) {"func_name" = "File_init_nameString_modeString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb912(%5383 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5384 : !llvm.ptr):
    %5385 = "mini.invariant"(%5384) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5386 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb913] : () -> ()
  ^bb914:
    %5387 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%5387, %5386) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb915] : () -> ()
  ^bb916:
    %5388 = "llvm.getelementptr"(%5384) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5389 = "mini.checkflag"(%5388) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5390 = "llvm.load"(%5389) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5390) [^bb914, ^bb914] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb913:
    %5391 = "llvm.getelementptr"(%5384) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5392 = "mini.checkflag"(%5391) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5393 = "llvm.load"(%5392) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5393) [^bb916, ^bb916] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb915:
    %5394 = "llvm.extractvalue"(%5383) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5395 = "llvm.load"(%5386) : (!llvm.ptr) -> i32
    %5396 = "llvm.getelementptr"(%5394, %5395) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<16 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5397 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5398 = "llvm.getelementptr"(%5396, %5397) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5398) : (!llvm.ptr) -> ()
  }) {"func_name" = "File_B_init_nameString_modeString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb917(%5399 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5400 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5401 : !llvm.ptr):
    %5402 = "mini.wrap"(%5399) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"File">
    %5403 = "hi.cast"(%5402) {"from_typ" = !mini.fatptr<"File">, "to_typ" = !mini.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!mini.fatptr<"File">) -> !mini.fatptr<"File">
    %5404 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %5405 = "mini.get_field"(%5403) {"offset" = 3 : i64, "vtable_bytes" = 128 : i32, "original_type" = i1} : (!mini.fatptr<"File">) -> !mini.ptr<i1>
    %5406 = "mini.unwrap"(%5404) : (!mini.ptr<i1>) -> i1
    %5407 = "mini.unwrap"(%5405) : (!mini.ptr<i1>) -> i1
    %5408 = "mini.comparison"(%5406, %5407) {"op" = "EQ"} : (i1, i1) -> i1
    %5409 = "mini.wrap"(%5408) : (i1) -> !mini.ptr<i1>
    %5410 = "mini.unwrap"(%5409) : (!mini.ptr<i1>) -> i1
    "mini.if"(%5410) ({
      "mini.return"() : () -> ()
    }) : (i1) -> ()
    %5411 = "mini.get_field"(%5403) {"offset" = 2 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"File">) -> !mini.buffer<!mini.ptr<i32>>
    %5412 = "mini.unwrap"(%5411) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %5413 = "mini.call"(%5412) {"func_name" = "fclose", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %5414 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %5415 = "hi.cast"(%5414) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
    "mini.set_field"(%5403, %5415) {"offset" = 3 : i64, "vtable_bytes" = 128 : i32, "original_type" = i1} : (!mini.fatptr<"File">, !mini.ptr<i1>) -> ()
    %5416 = "mini.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5417 = "mini.unwrap"(%5413) : (!mini.ptr<i32>) -> i32
    %5418 = "mini.unwrap"(%5416) : (!mini.ptr<i32>) -> i32
    %5419 = "mini.comparison"(%5417, %5418) {"op" = "EQ"} : (i32, i32) -> i1
    %5420 = "mini.wrap"(%5419) : (i1) -> !mini.ptr<i32>
    %5421 = "mini.unwrap"(%5420) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5421) ({
      %5422 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileSystemError", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"FileSystemError">
      %5423 = "mini.unwrap"(%5422) : (!mini.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5424 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%5424, %5423) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 26 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %5425 = "mini.literal"() {"value" = 760 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5426 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5427 = "mini.create_buffer"(%5426) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %5428 = "hi.cast"(%5427) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
      %5429 = "mini.refer"(%5428) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %5430 = "mini.literal"() {"typ" = !llvm.array<15 x i8>, "value" = "zrwcinittk.mini"} : () -> !llvm.ptr
      %5431 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%5429, %5431, %5430) {"typ" = !llvm.array<15 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %5432 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5433 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5434 = "mini.unwrap"(%5429) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %5435 = "mini.unwrap"(%5432) : (!mini.ptr<i32>) -> i32
      %5436 = "mini.unwrap"(%5433) : (!mini.ptr<i32>) -> i32
      %5437 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %5438 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5439 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5440 = "hi.cast"(%5429) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %5441 = "mini.unwrap"(%5440) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %5442 = "hi.cast"(%5438) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %5443 = "mini.unwrap"(%5442) : (!mini.ptr<i32>) -> i32
      %5444 = "hi.cast"(%5439) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %5445 = "mini.unwrap"(%5444) : (!mini.ptr<i32>) -> i32
      %5446 = "mini.unwrap"(%5437) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5447 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %5448 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %5449 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %5450 = "mini.parameterizations_array"(%5447, %5448, %5449) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%5450, %5446, %5441, %5443, %5445) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %5451 = "hi.cast"(%5425) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %5452 = "mini.unwrap"(%5451) : (!mini.ptr<i32>) -> i32
      %5453 = "hi.cast"(%5437) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      %5454 = "mini.unwrap"(%5453) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5455 = "mini.unwrap"(%5422) : (!mini.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5456 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %5457 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %5458 = "mini.parameterizations_array"(%5456, %5457) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%5458, %5455, %5452, %5454) {"offset" = 5 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 26 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %5459 = "hi.cast"(%5422) {"from_typ" = !mini.fatptr<"FileSystemError">, "to_typ" = !mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!mini.fatptr<"FileSystemError">) -> !mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>
      %5460 = "mini.unwrap"(%5459) : (!mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %5461 = "mini.coro_yield"(%5460) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %5462 = "mini.wrap"(%5461) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>
    }) : (i1) -> ()
  }) {"func_name" = "File_close_", "result_type" = !llvm.void, "yield_type" = !mini.fatptr<"FileSystemError">} : () -> ()
  "mini.func"() ({
  ^bb918(%5463 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5464 : !llvm.ptr):
    %5465 = "mini.invariant"(%5464) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5466 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb919] : () -> ()
  ^bb919:
    %5467 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%5467, %5466) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb920] : () -> ()
  ^bb920:
    %5468 = "llvm.extractvalue"(%5463) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5469 = "llvm.load"(%5466) : (!llvm.ptr) -> i32
    %5470 = "llvm.getelementptr"(%5468, %5469) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<16 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5471 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5472 = "llvm.getelementptr"(%5470, %5471) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5472) : (!llvm.ptr) -> ()
  }) {"func_name" = "File_B_close_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb921(%5473 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5474 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5475 : !llvm.ptr):
    %5476 = "mini.wrap"(%5473) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"File">
    %5477 = "hi.cast"(%5476) {"from_typ" = !mini.fatptr<"File">, "to_typ" = !mini.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!mini.fatptr<"File">) -> !mini.fatptr<"File">
    %5478 = "mini.get_field"(%5477) {"offset" = 3 : i64, "vtable_bytes" = 128 : i32, "original_type" = i1} : (!mini.fatptr<"File">) -> !mini.ptr<i1>
    %5479 = "mini.unwrap"(%5478) : (!mini.ptr<i1>) -> i1
    "mini.if"(%5479) ({
      "mini.return"() : () -> ()
    }) : (i1) -> ()
    %5480 = "mini.get_field"(%5477) {"offset" = 0 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"File">) -> !mini.fatptr<"String">
    %5481 = "mini.unwrap"(%5480) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5482 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5483 = "mini.method_call"(%5482, %5481) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %5484 = "hi.cast"(%5483) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5485 = "mini.get_field"(%5477) {"offset" = 1 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"File">) -> !mini.fatptr<"String">
    %5486 = "mini.unwrap"(%5485) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5487 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5488 = "mini.method_call"(%5487, %5486) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %5489 = "hi.cast"(%5488) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5490 = "mini.unwrap"(%5484) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5491 = "mini.unwrap"(%5489) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5492 = "mini.call"(%5490, %5491) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i32>>
    %5493 = "hi.cast"(%5492) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.ptr<i32>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    "mini.set_field"(%5477, %5493) {"offset" = 2 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"File">, !mini.buffer<!mini.ptr<i32>>) -> ()
    %5494 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %5495 = "hi.cast"(%5494) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i1>) -> !mini.ptr<i1>
    "mini.set_field"(%5477, %5495) {"offset" = 3 : i64, "vtable_bytes" = 128 : i32, "original_type" = i1} : (!mini.fatptr<"File">, !mini.ptr<i1>) -> ()
  }) {"func_name" = "File_reopen_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb922(%5496 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5497 : !llvm.ptr):
    %5498 = "mini.invariant"(%5497) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5499 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb923] : () -> ()
  ^bb923:
    %5500 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%5500, %5499) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb924] : () -> ()
  ^bb924:
    %5501 = "llvm.extractvalue"(%5496) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5502 = "llvm.load"(%5499) : (!llvm.ptr) -> i32
    %5503 = "llvm.getelementptr"(%5501, %5502) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<16 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5504 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5505 = "llvm.getelementptr"(%5503, %5504) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5505) : (!llvm.ptr) -> ()
  }) {"func_name" = "File_B_reopen_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb925(%5506 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5507 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5508 : !llvm.ptr):
    %5509 = "mini.wrap"(%5506) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"File">
    %5510 = "hi.cast"(%5509) {"from_typ" = !mini.fatptr<"File">, "to_typ" = !mini.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!mini.fatptr<"File">) -> !mini.fatptr<"File">
    %5511 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %5512 = "mini.get_field"(%5510) {"offset" = 3 : i64, "vtable_bytes" = 128 : i32, "original_type" = i1} : (!mini.fatptr<"File">) -> !mini.ptr<i1>
    %5513 = "mini.unwrap"(%5511) : (!mini.ptr<i1>) -> i1
    %5514 = "mini.unwrap"(%5512) : (!mini.ptr<i1>) -> i1
    %5515 = "mini.comparison"(%5513, %5514) {"op" = "EQ"} : (i1, i1) -> i1
    %5516 = "mini.wrap"(%5515) : (i1) -> !mini.ptr<i1>
    %5517 = "mini.unwrap"(%5516) : (!mini.ptr<i1>) -> i1
    "mini.if"(%5517) ({
      %5518 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %5519 = "hi.cast"(%5518) {"from_typ" = !mini.nil, "to_typ" = !mini.union<[!mini.ptr<i8>, !mini.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
      "mini.return"(%5519) : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %5520 = "mini.get_field"(%5510) {"offset" = 2 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"File">) -> !mini.buffer<!mini.ptr<i32>>
    %5521 = "mini.unwrap"(%5520) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %5522 = "mini.call"(%5521) {"func_name" = "fgetc", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %5523 = "mini.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5524 = "mini.unwrap"(%5522) : (!mini.ptr<i32>) -> i32
    %5525 = "mini.unwrap"(%5523) : (!mini.ptr<i32>) -> i32
    %5526 = "mini.comparison"(%5524, %5525) {"op" = "EQ"} : (i32, i32) -> i1
    %5527 = "mini.wrap"(%5526) : (i1) -> !mini.ptr<i32>
    %5528 = "mini.unwrap"(%5527) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5528) ({
      %5529 = "mini.get_field"(%5510) {"offset" = 2 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"File">) -> !mini.buffer<!mini.ptr<i32>>
      %5530 = "mini.unwrap"(%5529) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
      %5531 = "mini.call"(%5530) {"func_name" = "ferror", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
      %5532 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5533 = "mini.unwrap"(%5531) : (!mini.ptr<i32>) -> i32
      %5534 = "mini.unwrap"(%5532) : (!mini.ptr<i32>) -> i32
      %5535 = "mini.comparison"(%5533, %5534) {"op" = "NEQ"} : (i32, i32) -> i1
      %5536 = "mini.wrap"(%5535) : (i1) -> !mini.ptr<i32>
      %5537 = "mini.unwrap"(%5536) : (!mini.ptr<i32>) -> i1
      "mini.if"(%5537) ({
        %5538 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileSystemError", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"FileSystemError">
        %5539 = "mini.unwrap"(%5538) : (!mini.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %5540 = "mini.parameterizations_array"() : () -> !llvm.ptr
        "mini.method_call"(%5540, %5539) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 26 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %5541 = "mini.literal"() {"value" = 771 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %5542 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %5543 = "mini.create_buffer"(%5542) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
        %5544 = "hi.cast"(%5543) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
        %5545 = "mini.refer"(%5544) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
        %5546 = "mini.literal"() {"typ" = !llvm.array<15 x i8>, "value" = "zrwcinittk.mini"} : () -> !llvm.ptr
        %5547 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
        "mini.buffer_set"(%5545, %5547, %5546) {"typ" = !llvm.array<15 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
        %5548 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %5549 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %5550 = "mini.unwrap"(%5545) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
        %5551 = "mini.unwrap"(%5548) : (!mini.ptr<i32>) -> i32
        %5552 = "mini.unwrap"(%5549) : (!mini.ptr<i32>) -> i32
        %5553 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
        %5554 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %5555 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %5556 = "hi.cast"(%5545) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
        %5557 = "mini.unwrap"(%5556) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
        %5558 = "hi.cast"(%5554) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
        %5559 = "mini.unwrap"(%5558) : (!mini.ptr<i32>) -> i32
        %5560 = "hi.cast"(%5555) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
        %5561 = "mini.unwrap"(%5560) : (!mini.ptr<i32>) -> i32
        %5562 = "mini.unwrap"(%5553) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %5563 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
        %5564 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %5565 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %5566 = "mini.parameterizations_array"(%5563, %5564, %5565) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mini.method_call"(%5566, %5562, %5557, %5559, %5561) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
        %5567 = "hi.cast"(%5541) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
        %5568 = "mini.unwrap"(%5567) : (!mini.ptr<i32>) -> i32
        %5569 = "hi.cast"(%5553) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
        %5570 = "mini.unwrap"(%5569) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %5571 = "mini.unwrap"(%5538) : (!mini.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %5572 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %5573 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
        %5574 = "mini.parameterizations_array"(%5572, %5573) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mini.method_call"(%5574, %5571, %5568, %5570) {"offset" = 5 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 26 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
        %5575 = "hi.cast"(%5538) {"from_typ" = !mini.fatptr<"FileSystemError">, "to_typ" = !mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!mini.fatptr<"FileSystemError">) -> !mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>
        %5576 = "mini.unwrap"(%5575) : (!mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
        %5577 = "mini.coro_yield"(%5576) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
        %5578 = "mini.wrap"(%5577) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>
      }) : (i1) -> ()
      %5579 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
      %5580 = "hi.cast"(%5579) {"from_typ" = !mini.nil, "to_typ" = !mini.union<[!mini.ptr<i8>, !mini.nil]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
      "mini.return"(%5580) : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> ()
    }) : (i1) -> ()
    %5581 = "mini.unwrap"(%5522) : (!mini.ptr<i32>) -> i32
    %5582 = "mini.call"(%5581) {"func_name" = "i32toi8", "ret_type" = i8} : (i32) -> !mini.ptr<i8>
    %5583 = "hi.cast"(%5582) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.union<[!mini.ptr<i8>, !mini.nil]>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i8>) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
    "mini.return"(%5583) : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> ()
  }) {"func_name" = "File_get_byte_", "result_type" = !llvm.struct<(!llvm.ptr, i8)>, "yield_type" = !mini.fatptr<"FileSystemError">} : () -> ()
  "mini.func"() ({
  ^bb926(%5584 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5585 : !llvm.ptr):
    %5586 = "mini.invariant"(%5585) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5587 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb927] : () -> ()
  ^bb927:
    %5588 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%5588, %5587) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb928] : () -> ()
  ^bb928:
    %5589 = "llvm.extractvalue"(%5584) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5590 = "llvm.load"(%5587) : (!llvm.ptr) -> i32
    %5591 = "llvm.getelementptr"(%5589, %5590) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<16 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5592 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5593 = "llvm.getelementptr"(%5591, %5592) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5593) : (!llvm.ptr) -> ()
  }) {"func_name" = "File_B_get_byte_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb929(%5594 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5595 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5596 : !llvm.ptr, %5597 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5598 = "mini.wrap"(%5594) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"File">
    %5599 = "hi.cast"(%5598) {"from_typ" = !mini.fatptr<"File">, "to_typ" = !mini.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!mini.fatptr<"File">) -> !mini.fatptr<"File">
    %5600 = "mini.wrap"(%5597) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %5601 = "hi.cast"(%5600) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5602 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %5603 = "mini.get_field"(%5599) {"offset" = 3 : i64, "vtable_bytes" = 128 : i32, "original_type" = i1} : (!mini.fatptr<"File">) -> !mini.ptr<i1>
    %5604 = "mini.unwrap"(%5602) : (!mini.ptr<i1>) -> i1
    %5605 = "mini.unwrap"(%5603) : (!mini.ptr<i1>) -> i1
    %5606 = "mini.comparison"(%5604, %5605) {"op" = "EQ"} : (i1, i1) -> i1
    %5607 = "mini.wrap"(%5606) : (i1) -> !mini.ptr<i1>
    %5608 = "mini.unwrap"(%5607) : (!mini.ptr<i1>) -> i1
    "mini.if"(%5608) ({
      %5609 = "mini.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5610 = "hi.cast"(%5609) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.return"(%5610) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %5611 = "mini.get_field"(%5599) {"offset" = 2 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"File">) -> !mini.buffer<!mini.ptr<i32>>
    %5612 = "mini.unwrap"(%5601) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5613 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5614 = "mini.method_call"(%5613, %5612) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %5615 = "hi.cast"(%5614) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5616 = "mini.unwrap"(%5611) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %5617 = "mini.unwrap"(%5615) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5618 = "mini.call"(%5616, %5617) {"func_name" = "fprintf", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %5619 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5620 = "mini.unwrap"(%5618) : (!mini.ptr<i32>) -> i32
    %5621 = "mini.unwrap"(%5619) : (!mini.ptr<i32>) -> i32
    %5622 = "mini.comparison"(%5620, %5621) {"op" = "LT"} : (i32, i32) -> i1
    %5623 = "mini.wrap"(%5622) : (i1) -> !mini.ptr<i32>
    %5624 = "mini.unwrap"(%5623) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5624) ({
      %5625 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileSystemError", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"FileSystemError">
      %5626 = "mini.unwrap"(%5625) : (!mini.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5627 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%5627, %5626) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 26 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %5628 = "mini.literal"() {"value" = 779 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5629 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5630 = "mini.create_buffer"(%5629) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %5631 = "hi.cast"(%5630) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
      %5632 = "mini.refer"(%5631) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %5633 = "mini.literal"() {"typ" = !llvm.array<15 x i8>, "value" = "zrwcinittk.mini"} : () -> !llvm.ptr
      %5634 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%5632, %5634, %5633) {"typ" = !llvm.array<15 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %5635 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5636 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5637 = "mini.unwrap"(%5632) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %5638 = "mini.unwrap"(%5635) : (!mini.ptr<i32>) -> i32
      %5639 = "mini.unwrap"(%5636) : (!mini.ptr<i32>) -> i32
      %5640 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %5641 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5642 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5643 = "hi.cast"(%5632) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %5644 = "mini.unwrap"(%5643) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %5645 = "hi.cast"(%5641) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %5646 = "mini.unwrap"(%5645) : (!mini.ptr<i32>) -> i32
      %5647 = "hi.cast"(%5642) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %5648 = "mini.unwrap"(%5647) : (!mini.ptr<i32>) -> i32
      %5649 = "mini.unwrap"(%5640) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5650 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %5651 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %5652 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %5653 = "mini.parameterizations_array"(%5650, %5651, %5652) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%5653, %5649, %5644, %5646, %5648) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %5654 = "hi.cast"(%5628) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %5655 = "mini.unwrap"(%5654) : (!mini.ptr<i32>) -> i32
      %5656 = "hi.cast"(%5640) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      %5657 = "mini.unwrap"(%5656) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5658 = "mini.unwrap"(%5625) : (!mini.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5659 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %5660 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %5661 = "mini.parameterizations_array"(%5659, %5660) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%5661, %5658, %5655, %5657) {"offset" = 5 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 26 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %5662 = "hi.cast"(%5625) {"from_typ" = !mini.fatptr<"FileSystemError">, "to_typ" = !mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!mini.fatptr<"FileSystemError">) -> !mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>
      %5663 = "mini.unwrap"(%5662) : (!mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %5664 = "mini.coro_yield"(%5663) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %5665 = "mini.wrap"(%5664) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>
    }) : (i1) -> ()
    %5666 = "hi.cast"(%5618) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.return"(%5666) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "File_write_textString", "result_type" = i32, "yield_type" = !mini.fatptr<"FileSystemError">} : () -> ()
  "mini.func"() ({
  ^bb930(%5667 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5668 : !llvm.ptr):
    %5669 = "mini.invariant"(%5668) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5670 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb931] : () -> ()
  ^bb932:
    %5671 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%5671, %5670) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb933] : () -> ()
  ^bb931:
    %5672 = "llvm.getelementptr"(%5668) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5673 = "mini.checkflag"(%5672) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5674 = "llvm.load"(%5673) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5674) [^bb932, ^bb932] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb933:
    %5675 = "llvm.extractvalue"(%5667) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5676 = "llvm.load"(%5670) : (!llvm.ptr) -> i32
    %5677 = "llvm.getelementptr"(%5675, %5676) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<16 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5678 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5679 = "llvm.getelementptr"(%5677, %5678) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5679) : (!llvm.ptr) -> ()
  }) {"func_name" = "File_B_write_textString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb934(%5680 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5681 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5682 : !llvm.ptr, %5683 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5684 = "mini.wrap"(%5680) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"File">
    %5685 = "hi.cast"(%5684) {"from_typ" = !mini.fatptr<"File">, "to_typ" = !mini.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!mini.fatptr<"File">) -> !mini.fatptr<"File">
    %5686 = "mini.wrap"(%5683) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %5687 = "hi.cast"(%5686) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5688 = "hi.cast"(%5687) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%5685, %5688) {"offset" = 1 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"File">, !mini.fatptr<"String">) -> ()
    %5689 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
    %5690 = "mini.get_field"(%5685) {"offset" = 3 : i64, "vtable_bytes" = 128 : i32, "original_type" = i1} : (!mini.fatptr<"File">) -> !mini.ptr<i1>
    %5691 = "mini.unwrap"(%5689) : (!mini.ptr<i1>) -> i1
    %5692 = "mini.unwrap"(%5690) : (!mini.ptr<i1>) -> i1
    %5693 = "mini.comparison"(%5691, %5692) {"op" = "EQ"} : (i1, i1) -> i1
    %5694 = "mini.wrap"(%5693) : (i1) -> !mini.ptr<i1>
    %5695 = "mini.unwrap"(%5694) : (!mini.ptr<i1>) -> i1
    "mini.if"(%5695) ({
      "mini.return"() : () -> ()
    }) : (i1) -> ()
    %5696 = "mini.get_field"(%5685) {"offset" = 2 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"File">) -> !mini.buffer<!mini.ptr<i32>>
    %5697 = "mini.unwrap"(%5696) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %5698 = "mini.call"(%5697) {"func_name" = "fclose", "ret_type" = i32} : (!llvm.struct<(!llvm.ptr)>) -> !mini.ptr<i32>
    %5699 = "mini.literal"() {"value" = -1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5700 = "mini.unwrap"(%5698) : (!mini.ptr<i32>) -> i32
    %5701 = "mini.unwrap"(%5699) : (!mini.ptr<i32>) -> i32
    %5702 = "mini.comparison"(%5700, %5701) {"op" = "EQ"} : (i32, i32) -> i1
    %5703 = "mini.wrap"(%5702) : (i1) -> !mini.ptr<i32>
    %5704 = "mini.unwrap"(%5703) : (!mini.ptr<i32>) -> i1
    "mini.if"(%5704) ({
      %5705 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileSystemError", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"FileSystemError">
      %5706 = "mini.unwrap"(%5705) : (!mini.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5707 = "mini.parameterizations_array"() : () -> !llvm.ptr
      "mini.method_call"(%5707, %5706) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 26 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %5708 = "mini.literal"() {"value" = 785 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5709 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5710 = "mini.create_buffer"(%5709) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %5711 = "hi.cast"(%5710) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
      %5712 = "mini.refer"(%5711) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %5713 = "mini.literal"() {"typ" = !llvm.array<15 x i8>, "value" = "zrwcinittk.mini"} : () -> !llvm.ptr
      %5714 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%5712, %5714, %5713) {"typ" = !llvm.array<15 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %5715 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5716 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5717 = "mini.unwrap"(%5712) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %5718 = "mini.unwrap"(%5715) : (!mini.ptr<i32>) -> i32
      %5719 = "mini.unwrap"(%5716) : (!mini.ptr<i32>) -> i32
      %5720 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %5721 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5722 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %5723 = "hi.cast"(%5712) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %5724 = "mini.unwrap"(%5723) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %5725 = "hi.cast"(%5721) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %5726 = "mini.unwrap"(%5725) : (!mini.ptr<i32>) -> i32
      %5727 = "hi.cast"(%5722) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %5728 = "mini.unwrap"(%5727) : (!mini.ptr<i32>) -> i32
      %5729 = "mini.unwrap"(%5720) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5730 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %5731 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %5732 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %5733 = "mini.parameterizations_array"(%5730, %5731, %5732) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%5733, %5729, %5724, %5726, %5728) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %5734 = "hi.cast"(%5708) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %5735 = "mini.unwrap"(%5734) : (!mini.ptr<i32>) -> i32
      %5736 = "hi.cast"(%5720) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      %5737 = "mini.unwrap"(%5736) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5738 = "mini.unwrap"(%5705) : (!mini.fatptr<"FileSystemError">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5739 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %5740 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %5741 = "mini.parameterizations_array"(%5739, %5740) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%5741, %5738, %5735, %5737) {"offset" = 5 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 26 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %5742 = "hi.cast"(%5705) {"from_typ" = !mini.fatptr<"FileSystemError">, "to_typ" = !mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>, "from_typ_name" = "FileSystemError", "to_typ_name" = "union_typ"} : (!mini.fatptr<"FileSystemError">) -> !mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>
      %5743 = "mini.unwrap"(%5742) : (!mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %5744 = "mini.coro_yield"(%5743) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
      %5745 = "mini.wrap"(%5744) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"FileSystemError">, !mini.nil]>
    }) : (i1) -> ()
    %5746 = "mini.get_field"(%5685) {"offset" = 0 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"File">) -> !mini.fatptr<"String">
    %5747 = "mini.unwrap"(%5746) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5748 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5749 = "mini.method_call"(%5748, %5747) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %5750 = "hi.cast"(%5749) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5751 = "mini.get_field"(%5685) {"offset" = 1 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"File">) -> !mini.fatptr<"String">
    %5752 = "mini.unwrap"(%5751) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5753 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5754 = "mini.method_call"(%5753, %5752) {"offset" = 15 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.buffer<!mini.ptr<i8>>
    %5755 = "hi.cast"(%5754) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5756 = "mini.unwrap"(%5750) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5757 = "mini.unwrap"(%5755) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5758 = "mini.call"(%5756, %5757) {"func_name" = "fopen", "ret_type" = !llvm.struct<(!llvm.ptr)>} : (!llvm.struct<(!llvm.ptr)>, !llvm.struct<(!llvm.ptr)>) -> !mini.buffer<!mini.ptr<i32>>
    %5759 = "hi.cast"(%5758) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.ptr<i32>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    "mini.set_field"(%5685, %5759) {"offset" = 2 : i64, "vtable_bytes" = 128 : i32, "original_type" = !llvm.struct<(!llvm.ptr)>} : (!mini.fatptr<"File">, !mini.buffer<!mini.ptr<i32>>) -> ()
  }) {"func_name" = "File__set_mode_modeString", "result_type" = !llvm.void, "yield_type" = !mini.fatptr<"FileSystemError">} : () -> ()
  "mini.func"() ({
  ^bb935(%5760 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5761 : !llvm.ptr):
    %5762 = "mini.invariant"(%5761) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5763 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb936] : () -> ()
  ^bb937:
    %5764 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%5764, %5763) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb938] : () -> ()
  ^bb936:
    %5765 = "llvm.getelementptr"(%5761) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5766 = "mini.checkflag"(%5765) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5767 = "llvm.load"(%5766) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5767) [^bb937, ^bb937] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb938:
    %5768 = "llvm.extractvalue"(%5760) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5769 = "llvm.load"(%5763) : (!llvm.ptr) -> i32
    %5770 = "llvm.getelementptr"(%5768, %5769) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<16 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5771 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5772 = "llvm.getelementptr"(%5770, %5771) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5772) : (!llvm.ptr) -> ()
  }) {"func_name" = "File_B__set_mode_modeString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_FileProcessor", "types" = [!llvm.ptr]} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FileProcessor_field_FileProcessor_0"} : () -> ()
  "mini.func"() ({
  ^bb939(%5773 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5774 : !llvm.ptr):
    %5775 = "mini.invariant"(%5774) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5776 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb940] : () -> ()
  ^bb941:
    %5777 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%5777, %5776) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb942] : () -> ()
  ^bb940:
    %5778 = "llvm.getelementptr"(%5774) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5779 = "mini.checkflag"(%5778) {"typ_name" = "File"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5780 = "llvm.load"(%5779) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5780) [^bb941, ^bb941] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb942:
    %5781 = "llvm.extractvalue"(%5773) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5782 = "llvm.load"(%5776) : (!llvm.ptr) -> i32
    %5783 = "llvm.getelementptr"(%5781, %5782) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<3 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5784 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5785 = "llvm.getelementptr"(%5783, %5784) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5785) : (!llvm.ptr) -> ()
  }) {"func_name" = "FileProcessor_B_process_fileFile", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_FileReader", "types" = []} : () -> ()
  "mini.type_accessor_def"() {"offset" = 0 : i32, "meth_name" = "FileReader_field_FileReader_0", "id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> ()
  "mini.func"() ({
  ^bb943(%5786 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5787 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5788 : !llvm.ptr):
    %5789 = "mini.wrap"(%5786) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FileReader">
    %5790 = "hi.cast"(%5789) {"from_typ" = !mini.fatptr<"FileReader">, "to_typ" = !mini.fatptr<"FileReader">, "from_typ_name" = "FileReader", "to_typ_name" = "FileReader"} : (!mini.fatptr<"FileReader">) -> !mini.fatptr<"FileReader">
  }) {"func_name" = "FileReader_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb944(%5791 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5792 : !llvm.ptr):
    %5793 = "mini.invariant"(%5792) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5794 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb945] : () -> ()
  ^bb945:
    %5795 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%5795, %5794) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb946] : () -> ()
  ^bb946:
    %5796 = "llvm.extractvalue"(%5791) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5797 = "llvm.load"(%5794) : (!llvm.ptr) -> i32
    %5798 = "llvm.getelementptr"(%5796, %5797) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5799 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5800 = "llvm.getelementptr"(%5798, %5799) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5800) : (!llvm.ptr) -> ()
  }) {"func_name" = "FileReader_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb947(%5801 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5802 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5803 : !llvm.ptr, %5804 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5805 = "mini.wrap"(%5801) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FileReader">
    %5806 = "hi.cast"(%5805) {"from_typ" = !mini.fatptr<"FileReader">, "to_typ" = !mini.fatptr<"FileReader">, "from_typ_name" = "FileReader", "to_typ_name" = "FileReader"} : (!mini.fatptr<"FileReader">) -> !mini.fatptr<"FileReader">
    %5807 = "mini.wrap"(%5804) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"File">
    %5808 = "hi.cast"(%5807) {"from_typ" = !mini.fatptr<"File">, "to_typ" = !mini.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!mini.fatptr<"File">) -> !mini.fatptr<"File">
    %5809 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5810 = "mini.create_buffer"(%5809) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %5811 = "hi.cast"(%5810) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %5812 = "mini.refer"(%5811) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5813 = "mini.literal"() {"typ" = !llvm.array<0 x i8>, "value" = ""} : () -> !llvm.ptr
    %5814 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%5812, %5814, %5813) {"typ" = !llvm.array<0 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %5815 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5816 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5817 = "mini.unwrap"(%5812) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5818 = "mini.unwrap"(%5815) : (!mini.ptr<i32>) -> i32
    %5819 = "mini.unwrap"(%5816) : (!mini.ptr<i32>) -> i32
    %5820 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %5821 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5822 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %5823 = "hi.cast"(%5812) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %5824 = "mini.unwrap"(%5823) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %5825 = "hi.cast"(%5821) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %5826 = "mini.unwrap"(%5825) : (!mini.ptr<i32>) -> i32
    %5827 = "hi.cast"(%5822) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %5828 = "mini.unwrap"(%5827) : (!mini.ptr<i32>) -> i32
    %5829 = "mini.unwrap"(%5820) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5830 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %5831 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %5832 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %5833 = "mini.parameterizations_array"(%5830, %5831, %5832) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5833, %5829, %5824, %5826, %5828) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %5834 = "hi.cast"(%5820) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5835 = "mini.refer"(%5834) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5836 = "mini.unwrap"(%5808) : (!mini.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5837 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %5838 = "mini.method_call"(%5837, %5836) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 16 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i8)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i8)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
    %5839 = "hi.cast"(%5838) {"from_typ" = !mini.union<[!mini.ptr<i8>, !mini.nil]>, "to_typ" = !mini.union<[!mini.ptr<i8>, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
    %5840 = "hi.cast"(%5839) {"from_typ" = !mini.union<[!mini.ptr<i8>, !mini.nil]>, "to_typ" = !mini.union<[!mini.ptr<i8>, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
    "mini.while"() ({
      %5841 = "mini.checkflag"(%5840) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> !mini.ptr<i1>
      %5842 = "mini.unwrap"(%5841) : (!mini.ptr<i1>) -> i1
    }, {
      %5843 = "hi.cast"(%5840) {"from_typ" = !mini.union<[!mini.ptr<i8>, !mini.nil]>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "union_typ", "to_typ_name" = "i8_typ"} : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> !mini.ptr<i8>
      %5844 = "hi.cast"(%5843) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
      %5845 = "mini.unwrap"(%5844) : (!mini.ptr<i8>) -> i8
      %5846 = "mini.unwrap"(%5835) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5847 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["i8"]} : () -> !llvm.ptr
      %5848 = "mini.parameterizations_array"(%5847) : (!llvm.ptr) -> !llvm.ptr
      %5849 = "mini.method_call"(%5848, %5846, %5845) {"offset" = 9 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i8) -> !mini.fatptr<"String">
      %5850 = "hi.cast"(%5849) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
      %5851 = "mini.unwrap"(%5808) : (!mini.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %5852 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %5853 = "mini.method_call"(%5852, %5851) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 16 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i8)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i8)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
      %5854 = "hi.cast"(%5853) {"from_typ" = !mini.union<[!mini.ptr<i8>, !mini.nil]>, "to_typ" = !mini.union<[!mini.ptr<i8>, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
      %5855 = "hi.cast"(%5854) {"from_typ" = !mini.union<[!mini.ptr<i8>, !mini.nil]>, "to_typ" = !mini.union<[!mini.ptr<i8>, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<i8>, !mini.nil]>) -> !mini.union<[!mini.ptr<i8>, !mini.nil]>
      "mini.assign"(%5840, %5855) {"typ" = !llvm.struct<(!llvm.ptr, i8)>} : (!mini.union<[!mini.ptr<i8>, !mini.nil]>, !mini.union<[!mini.ptr<i8>, !mini.nil]>) -> ()
    }) : () -> ()
    %5856 = "hi.cast"(%5835) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.type_param<"T", !mini.any, "FileProcessor">, "from_typ_name" = "String", "to_typ_name" = "any_typ"} : (!mini.fatptr<"String">) -> !mini.type_param<"T", !mini.any, "FileProcessor">
    "mini.return"(%5856) : (!mini.type_param<"T", !mini.any, "FileProcessor">) -> ()
  }) {"func_name" = "FileReader_process_fileFile", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb948(%5857 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5858 : !llvm.ptr):
    %5859 = "mini.invariant"(%5858) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5860 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb949] : () -> ()
  ^bb950:
    %5861 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%5861, %5860) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb951] : () -> ()
  ^bb949:
    %5862 = "llvm.getelementptr"(%5858) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5863 = "mini.checkflag"(%5862) {"typ_name" = "File"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5864 = "llvm.load"(%5863) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5864) [^bb950, ^bb950] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb951:
    %5865 = "llvm.extractvalue"(%5857) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5866 = "llvm.load"(%5860) : (!llvm.ptr) -> i32
    %5867 = "llvm.getelementptr"(%5865, %5866) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5868 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5869 = "llvm.getelementptr"(%5867, %5868) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5869) : (!llvm.ptr) -> ()
  }) {"func_name" = "FileReader_B_process_fileFile", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_FileWriter", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "FileWriter_getter_text", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.setter_def"() {"meth_name" = "FileWriter_setter_text", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "String", "parameterization" = "_parameterization_String"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "FileWriter_field_text", "getter_name" = "FileWriter_getter_text", "setter_name" = "FileWriter_setter_text"} : () -> ()
  "mini.type_accessor_def"() {"offset" = 1 : i32, "meth_name" = "FileWriter_field_FileWriter_0", "id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> ()
  "mini.func"() ({
  ^bb952(%5870 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5871 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5872 : !llvm.ptr, %5873 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5874 = "mini.wrap"(%5870) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FileWriter">
    %5875 = "hi.cast"(%5874) {"from_typ" = !mini.fatptr<"FileWriter">, "to_typ" = !mini.fatptr<"FileWriter">, "from_typ_name" = "FileWriter", "to_typ_name" = "FileWriter"} : (!mini.fatptr<"FileWriter">) -> !mini.fatptr<"FileWriter">
    %5876 = "mini.wrap"(%5873) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %5877 = "hi.cast"(%5876) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5878 = "hi.cast"(%5877) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.set_field"(%5875, %5878) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"FileWriter">, !mini.fatptr<"String">) -> ()
  }) {"func_name" = "FileWriter_init_textString", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb953(%5879 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5880 : !llvm.ptr):
    %5881 = "mini.invariant"(%5880) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5882 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb954] : () -> ()
  ^bb955:
    %5883 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%5883, %5882) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb956] : () -> ()
  ^bb954:
    %5884 = "llvm.getelementptr"(%5880) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5885 = "mini.checkflag"(%5884) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5886 = "llvm.load"(%5885) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5886) [^bb955, ^bb955] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb956:
    %5887 = "llvm.extractvalue"(%5879) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5888 = "llvm.load"(%5882) : (!llvm.ptr) -> i32
    %5889 = "llvm.getelementptr"(%5887, %5888) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5890 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5891 = "llvm.getelementptr"(%5889, %5890) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5891) : (!llvm.ptr) -> ()
  }) {"func_name" = "FileWriter_B_init_textString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb957(%5892 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5893 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5894 : !llvm.ptr, %5895 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %5896 = "mini.wrap"(%5892) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"FileWriter">
    %5897 = "hi.cast"(%5896) {"from_typ" = !mini.fatptr<"FileWriter">, "to_typ" = !mini.fatptr<"FileWriter">, "from_typ_name" = "FileWriter", "to_typ_name" = "FileWriter"} : (!mini.fatptr<"FileWriter">) -> !mini.fatptr<"FileWriter">
    %5898 = "mini.wrap"(%5895) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"File">
    %5899 = "hi.cast"(%5898) {"from_typ" = !mini.fatptr<"File">, "to_typ" = !mini.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!mini.fatptr<"File">) -> !mini.fatptr<"File">
    %5900 = "mini.get_field"(%5897) {"offset" = 0 : i64, "vtable_bytes" = 72 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "String"} : (!mini.fatptr<"FileWriter">) -> !mini.fatptr<"String">
    %5901 = "hi.cast"(%5900) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5902 = "mini.unwrap"(%5901) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5903 = "mini.unwrap"(%5899) : (!mini.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5904 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %5905 = "mini.parameterizations_array"(%5904) : (!llvm.ptr) -> !llvm.ptr
    %5906 = "mini.method_call"(%5905, %5903, %5902) {"offset" = 8 : i32, "vptrs" = [#none], "vtable_size" = 16 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %5907 = "hi.cast"(%5906) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %5908 = "hi.cast"(%5907) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.type_param<"T", !mini.any, "FileProcessor">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!mini.ptr<i32>) -> !mini.type_param<"T", !mini.any, "FileProcessor">
    "mini.return"(%5908) : (!mini.type_param<"T", !mini.any, "FileProcessor">) -> ()
  }) {"func_name" = "FileWriter_process_fileFile", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb958(%5909 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5910 : !llvm.ptr):
    %5911 = "mini.invariant"(%5910) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5912 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb959] : () -> ()
  ^bb960:
    %5913 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%5913, %5912) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb961] : () -> ()
  ^bb959:
    %5914 = "llvm.getelementptr"(%5910) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5915 = "mini.checkflag"(%5914) {"typ_name" = "File"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5916 = "llvm.load"(%5915) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5916) [^bb960, ^bb960] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb961:
    %5917 = "llvm.extractvalue"(%5909) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %5918 = "llvm.load"(%5912) : (!llvm.ptr) -> i32
    %5919 = "llvm.getelementptr"(%5917, %5918) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<9 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %5920 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %5921 = "llvm.getelementptr"(%5919, %5920) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%5921) : (!llvm.ptr) -> ()
  }) {"func_name" = "FileWriter_B_process_fileFile", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_FileSystem", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb962(%5922 : !llvm.ptr, %5923 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5924 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5925 : !llvm.struct<(!llvm.ptr, i160)>):
    %5926 = "mini.wrap"(%5923) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %5927 = "hi.cast"(%5926) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5928 = "mini.wrap"(%5924) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %5929 = "hi.cast"(%5928) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5930 = "mini.wrap"(%5925) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>, !mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>]>
    %5931 = "hi.cast"(%5930) {"from_typ" = !mini.union<[!mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>, !mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>]>, "to_typ" = !mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>, "from_typ_name" = "union_typ", "to_typ_name" = "function_typ"} : (!mini.union<[!mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>, !mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>]>) -> !mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>
    %5932 = "mini.unwrap"(%5927) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5933 = "mini.unwrap"(%5929) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5934 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1)>, "class_name" = "File", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !mini.fatptr<"File">
    %5935 = "hi.cast"(%5927) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5936 = "mini.unwrap"(%5935) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5937 = "hi.cast"(%5929) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5938 = "mini.unwrap"(%5937) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5939 = "mini.unwrap"(%5934) : (!mini.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5940 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %5941 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %5942 = "mini.parameterizations_array"(%5940, %5941) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5942, %5939, %5936, %5938) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 16 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %5943 = "hi.cast"(%5934) {"from_typ" = !mini.fatptr<"File">, "to_typ" = !mini.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!mini.fatptr<"File">) -> !mini.fatptr<"File">
    %5944 = "mini.refer"(%5943) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"File">) -> !mini.fatptr<"File">
    %5945 = "hi.cast"(%5944) {"from_typ" = !mini.fatptr<"File">, "to_typ" = !mini.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!mini.fatptr<"File">) -> !mini.fatptr<"File">
    %5946 = "mini.unwrap"(%5945) : (!mini.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5947 = "mini.unwrap"(%5931) : (!mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>) -> !llvm.ptr
    %5948 = "mini.fptr_call"(%5947, %5946) {"ret_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.type_param<"T", !mini.any, "FileSystem">
    %5949 = "mini.unwrap"(%5944) : (!mini.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5950 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%5950, %5949) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 16 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %5951 = "hi.cast"(%5948) {"from_typ" = !mini.type_param<"T", !mini.any, "FileSystem">, "to_typ" = !mini.type_param<"T", !mini.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "FileSystem">) -> !mini.type_param<"T", !mini.any, "FileSystem">
    "mini.return"(%5951) : (!mini.type_param<"T", !mini.any, "FileSystem">) -> ()
  }) {"func_name" = "FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.fatptr<"FileSystemError">} : () -> ()
  "mini.func"() ({
  ^bb963(%5952 : !llvm.ptr, %5953 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5954 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %5955 : !llvm.struct<(!llvm.ptr, i160)>):
    %5956 = "mini.wrap"(%5953) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %5957 = "hi.cast"(%5956) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5958 = "mini.wrap"(%5954) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %5959 = "hi.cast"(%5958) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5960 = "mini.wrap"(%5955) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>, !mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>]>
    %5961 = "hi.cast"(%5960) {"from_typ" = !mini.union<[!mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>, !mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>]>, "to_typ" = !mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>, "from_typ_name" = "union_typ", "to_typ_name" = "FileProcessor"} : (!mini.union<[!mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>, !mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>]>) -> !mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>
    %5962 = "mini.unwrap"(%5957) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5963 = "mini.unwrap"(%5959) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5964 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i1)>, "class_name" = "File", "num_data_fields" = 4 : i32, "region_id" = "none"} : () -> !mini.fatptr<"File">
    %5965 = "hi.cast"(%5957) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5966 = "mini.unwrap"(%5965) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5967 = "hi.cast"(%5959) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %5968 = "mini.unwrap"(%5967) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5969 = "mini.unwrap"(%5964) : (!mini.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5970 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %5971 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %5972 = "mini.parameterizations_array"(%5970, %5971) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%5972, %5969, %5966, %5968) {"offset" = 4 : i32, "vptrs" = [#none, #none], "vtable_size" = 16 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %5973 = "hi.cast"(%5964) {"from_typ" = !mini.fatptr<"File">, "to_typ" = !mini.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!mini.fatptr<"File">) -> !mini.fatptr<"File">
    %5974 = "mini.refer"(%5973) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"File">) -> !mini.fatptr<"File">
    %5975 = "hi.cast"(%5974) {"from_typ" = !mini.fatptr<"File">, "to_typ" = !mini.fatptr<"File">, "from_typ_name" = "File", "to_typ_name" = "File"} : (!mini.fatptr<"File">) -> !mini.fatptr<"File">
    %5976 = "mini.unwrap"(%5975) : (!mini.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5977 = "mini.unwrap"(%5961) : (!mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5978 = "mini.parameterization"() {"id_hierarchy" = ["File"], "name_hierarchy" = ["File"]} : () -> !llvm.ptr
    %5979 = "mini.parameterizations_array"(%5978) : (!llvm.ptr) -> !llvm.ptr
    %5980 = "mini.method_call"(%5979, %5977, %5976) {"offset" = 1 : i32, "vptrs" = [#none], "vtable_size" = 3 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.type_param<"T", !mini.any, "FileProcessor">
    %5981 = "hi.cast"(%5980) {"from_typ" = !mini.type_param<"T", !mini.any, "FileProcessor">, "to_typ" = !mini.type_param<"T", !mini.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "FileProcessor">) -> !mini.type_param<"T", !mini.any, "FileSystem">
    %5982 = "mini.unwrap"(%5974) : (!mini.fatptr<"File">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %5983 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%5983, %5982) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 16 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %5984 = "hi.cast"(%5981) {"from_typ" = !mini.type_param<"T", !mini.any, "FileSystem">, "to_typ" = !mini.type_param<"T", !mini.any, "FileSystem">, "from_typ_name" = "any_typ", "to_typ_name" = "any_typ"} : (!mini.type_param<"T", !mini.any, "FileSystem">) -> !mini.type_param<"T", !mini.any, "FileSystem">
    "mini.return"(%5984) : (!mini.type_param<"T", !mini.any, "FileSystem">) -> ()
  }) {"func_name" = "FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.fatptr<"FileSystemError">} : () -> ()
  "mini.func"() ({
  ^bb964(%5985 : !llvm.ptr):
    %5986 = "mini.invariant"(%5985) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %5987 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb965] : () -> ()
  ^bb966:
    %5988 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%5988, %5987) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb967] : () -> ()
  ^bb968:
    %5989 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%5989, %5987) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb967] : () -> ()
  ^bb969:
    %5990 = "llvm.getelementptr"(%5985) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5991 = "mini.checkflag"(%5990) {"typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5992 = "llvm.load"(%5991) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5992) [^bb966, ^bb970] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb970:
    %5993 = "llvm.getelementptr"(%5985) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5994 = "mini.checkflag"(%5993) {"typ_name" = "FileProcessor"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5995 = "llvm.load"(%5994) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5995) [^bb968, ^bb968] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb971:
    %5996 = "llvm.getelementptr"(%5985) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %5997 = "mini.checkflag"(%5996) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %5998 = "llvm.load"(%5997) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%5998) [^bb969, ^bb969] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb965:
    %5999 = "llvm.getelementptr"(%5985) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6000 = "mini.checkflag"(%5999) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6001 = "llvm.load"(%6000) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6001) [^bb971, ^bb971] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb967:
    %6002 = "mini.addr_of"() {"global_name" = @FileSystem} : () -> !llvm.ptr
    %6003 = "llvm.load"(%5987) : (!llvm.ptr) -> i32
    %6004 = "llvm.getelementptr"(%6002, %6003) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6005 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6006 = "llvm.getelementptr"(%6004, %6005) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6006) : (!llvm.ptr) -> ()
  }) {"func_name" = "FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb972(%6007 : !llvm.ptr, %6008 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6009 = "mini.wrap"(%6008) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %6010 = "hi.cast"(%6009) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %6011 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6012 = "mini.create_buffer"(%6011) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %6013 = "hi.cast"(%6012) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %6014 = "mini.refer"(%6013) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %6015 = "mini.literal"() {"typ" = !llvm.array<1 x i8>, "value" = "r"} : () -> !llvm.ptr
    %6016 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%6014, %6016, %6015) {"typ" = !llvm.array<1 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %6017 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6018 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6019 = "mini.unwrap"(%6014) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %6020 = "mini.unwrap"(%6017) : (!mini.ptr<i32>) -> i32
    %6021 = "mini.unwrap"(%6018) : (!mini.ptr<i32>) -> i32
    %6022 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %6023 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6024 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6025 = "hi.cast"(%6014) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %6026 = "mini.unwrap"(%6025) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %6027 = "hi.cast"(%6023) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6028 = "mini.unwrap"(%6027) : (!mini.ptr<i32>) -> i32
    %6029 = "hi.cast"(%6024) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6030 = "mini.unwrap"(%6029) : (!mini.ptr<i32>) -> i32
    %6031 = "mini.unwrap"(%6022) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6032 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %6033 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6034 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6035 = "mini.parameterizations_array"(%6032, %6033, %6034) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6035, %6031, %6026, %6028, %6030) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %6036 = "mini.new"() {"typ" = !llvm.struct<()>, "class_name" = "FileReader", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !mini.fatptr<"FileReader">
    %6037 = "mini.unwrap"(%6036) : (!mini.fatptr<"FileReader">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6038 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%6038, %6037) {"offset" = 1 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %6039 = "hi.cast"(%6010) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %6040 = "mini.unwrap"(%6039) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6041 = "hi.cast"(%6022) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %6042 = "mini.unwrap"(%6041) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6043 = "hi.cast"(%6036) {"from_typ" = !mini.fatptr<"FileReader">, "to_typ" = !mini.union<[!mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>, !mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>]>, "from_typ_name" = "FileReader", "to_typ_name" = "union_typ"} : (!mini.fatptr<"FileReader">) -> !mini.union<[!mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>, !mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>]>
    %6044 = "mini.unwrap"(%6043) : (!mini.union<[!mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>, !mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %6045 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %6046 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %6047 = "mini.parameterization"() {"id_hierarchy" = ["FileReader"], "name_hierarchy" = ["FileReader"]} : () -> !llvm.ptr
    %6048 = "mini.parameterizations_array"(%6045, %6046, %6047) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %6049 = "mini.class_method_call"(%6048, %6040, %6042, %6044) {"offset" = 0 : i32, "vptrs" = [#none, #none, #none], "vtable_size" = 7 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>, "class_name" = "FileSystem"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "FileSystem">
    %6050 = "hi.cast"(%6049) {"from_typ" = !mini.type_param<"T", !mini.any, "FileSystem">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "any_typ", "to_typ_name" = "String"} : (!mini.type_param<"T", !mini.any, "FileSystem">) -> !mini.fatptr<"String">
    %6051 = "hi.cast"(%6050) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%6051) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "FileSystem__Self_read_file_file_nameString", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.fatptr<"FileSystemError">} : () -> ()
  "mini.func"() ({
  ^bb973(%6052 : !llvm.ptr):
    %6053 = "mini.invariant"(%6052) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6054 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb974] : () -> ()
  ^bb975:
    %6055 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%6055, %6054) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb976] : () -> ()
  ^bb974:
    %6056 = "llvm.getelementptr"(%6052) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6057 = "mini.checkflag"(%6056) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6058 = "llvm.load"(%6057) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6058) [^bb975, ^bb975] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb976:
    %6059 = "mini.addr_of"() {"global_name" = @FileSystem} : () -> !llvm.ptr
    %6060 = "llvm.load"(%6054) : (!llvm.ptr) -> i32
    %6061 = "llvm.getelementptr"(%6059, %6060) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6062 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6063 = "llvm.getelementptr"(%6061, %6062) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6063) : (!llvm.ptr) -> ()
  }) {"func_name" = "FileSystem_B__Self_read_file_file_nameString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb977(%6064 : !llvm.ptr, %6065 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6066 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6067 = "mini.wrap"(%6065) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %6068 = "hi.cast"(%6067) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %6069 = "mini.wrap"(%6066) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %6070 = "hi.cast"(%6069) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %6071 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6072 = "mini.create_buffer"(%6071) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %6073 = "hi.cast"(%6072) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %6074 = "mini.refer"(%6073) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %6075 = "mini.literal"() {"typ" = !llvm.array<1 x i8>, "value" = "w"} : () -> !llvm.ptr
    %6076 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%6074, %6076, %6075) {"typ" = !llvm.array<1 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %6077 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6078 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6079 = "mini.unwrap"(%6074) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %6080 = "mini.unwrap"(%6077) : (!mini.ptr<i32>) -> i32
    %6081 = "mini.unwrap"(%6078) : (!mini.ptr<i32>) -> i32
    %6082 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %6083 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6084 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6085 = "hi.cast"(%6074) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %6086 = "mini.unwrap"(%6085) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %6087 = "hi.cast"(%6083) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6088 = "mini.unwrap"(%6087) : (!mini.ptr<i32>) -> i32
    %6089 = "hi.cast"(%6084) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6090 = "mini.unwrap"(%6089) : (!mini.ptr<i32>) -> i32
    %6091 = "mini.unwrap"(%6082) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6092 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %6093 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6094 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6095 = "mini.parameterizations_array"(%6092, %6093, %6094) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6095, %6091, %6086, %6088, %6090) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %6096 = "mini.unwrap"(%6070) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6097 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "FileWriter", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"FileWriter">
    %6098 = "hi.cast"(%6070) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %6099 = "mini.unwrap"(%6098) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6100 = "mini.unwrap"(%6097) : (!mini.fatptr<"FileWriter">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6101 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %6102 = "mini.parameterizations_array"(%6101) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6102, %6100, %6099) {"offset" = 2 : i32, "vptrs" = [#none], "vtable_size" = 9 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %6103 = "hi.cast"(%6068) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %6104 = "mini.unwrap"(%6103) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6105 = "hi.cast"(%6082) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %6106 = "mini.unwrap"(%6105) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6107 = "hi.cast"(%6097) {"from_typ" = !mini.fatptr<"FileWriter">, "to_typ" = !mini.union<[!mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>, !mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>]>, "from_typ_name" = "FileWriter", "to_typ_name" = "union_typ"} : (!mini.fatptr<"FileWriter">) -> !mini.union<[!mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>, !mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>]>
    %6108 = "mini.unwrap"(%6107) : (!mini.union<[!mini.function<[!mini.fatptr<"File">], !mini.any, !mini.type_param<"T", !mini.any, "FileSystem">>, !mini.fatptr<"FileProcessor", [!mini.type_param<"T", !mini.any, "FileSystem">]>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %6109 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %6110 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %6111 = "mini.parameterization"() {"id_hierarchy" = ["FileWriter"], "name_hierarchy" = ["FileWriter"]} : () -> !llvm.ptr
    %6112 = "mini.parameterizations_array"(%6109, %6110, %6111) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %6113 = "mini.class_method_call"(%6112, %6104, %6106, %6108) {"offset" = 0 : i32, "vptrs" = [#none, #none, #none], "vtable_size" = 7 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>, "class_name" = "FileSystem"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> !mini.type_param<"T", !mini.any, "FileSystem">
    %6114 = "hi.cast"(%6113) {"from_typ" = !mini.type_param<"T", !mini.any, "FileSystem">, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!mini.type_param<"T", !mini.any, "FileSystem">) -> !mini.ptr<i32>
  }) {"func_name" = "FileSystem__Self_write_file_file_nameString_textString", "result_type" = !llvm.void, "yield_type" = !mini.fatptr<"FileSystemError">} : () -> ()
  "mini.func"() ({
  ^bb978(%6115 : !llvm.ptr):
    %6116 = "mini.invariant"(%6115) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6117 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb979] : () -> ()
  ^bb980:
    %6118 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%6118, %6117) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb981] : () -> ()
  ^bb982:
    %6119 = "llvm.getelementptr"(%6115) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6120 = "mini.checkflag"(%6119) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6121 = "llvm.load"(%6120) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6121) [^bb980, ^bb980] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb979:
    %6122 = "llvm.getelementptr"(%6115) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6123 = "mini.checkflag"(%6122) {"typ_name" = "String"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6124 = "llvm.load"(%6123) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6124) [^bb982, ^bb982] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb981:
    %6125 = "mini.addr_of"() {"global_name" = @FileSystem} : () -> !llvm.ptr
    %6126 = "llvm.load"(%6117) : (!llvm.ptr) -> i32
    %6127 = "llvm.getelementptr"(%6125, %6126) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6128 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6129 = "llvm.getelementptr"(%6127, %6128) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6129) : (!llvm.ptr) -> ()
  }) {"func_name" = "FileSystem_B__Self_write_file_file_nameString_textString", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "llvm.func"() <{"sym_name" = "clock", "function_type" = !llvm.func<i64 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "getchar", "function_type" = !llvm.func<i32 ()>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "llvm.func"() <{"sym_name" = "system", "function_type" = !llvm.func<i32 (!llvm.struct<(!llvm.ptr)>)>, "CConv" = #llvm.cconv<ccc>, "linkage" = #llvm.linkage<"external">, "visibility_" = 0 : i64}> ({
  }) : () -> ()
  "mini.func"() ({
  ^bb983(%6130 : !llvm.struct<(!llvm.ptr, i64)>):
    %6131 = "mini.wrap"(%6130) : (!llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %6132 = "hi.cast"(%6131) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %6133 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6134 = "mini.create_buffer"(%6133) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %6135 = "hi.cast"(%6134) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %6136 = "mini.refer"(%6135) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %6137 = "mini.literal"() {"typ" = !llvm.array<6 x i8>, "value" = "number"} : () -> !llvm.ptr
    %6138 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%6136, %6138, %6137) {"typ" = !llvm.array<6 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %6139 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6140 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6141 = "mini.unwrap"(%6136) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %6142 = "mini.unwrap"(%6139) : (!mini.ptr<i32>) -> i32
    %6143 = "mini.unwrap"(%6140) : (!mini.ptr<i32>) -> i32
    %6144 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %6145 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6146 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6147 = "hi.cast"(%6136) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %6148 = "mini.unwrap"(%6147) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %6149 = "hi.cast"(%6145) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6150 = "mini.unwrap"(%6149) : (!mini.ptr<i32>) -> i32
    %6151 = "hi.cast"(%6146) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6152 = "mini.unwrap"(%6151) : (!mini.ptr<i32>) -> i32
    %6153 = "mini.unwrap"(%6144) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6154 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %6155 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6156 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6157 = "mini.parameterizations_array"(%6154, %6155, %6156) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6157, %6153, %6148, %6150, %6152) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %6158 = "mini.print"(%6144) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"String">) -> i32
  }) {"func_name" = "number_taker", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
    %6159 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6160 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6161 = "mini.unwrap"(%6159) : (!mini.ptr<i32>) -> i32
    %6162 = "mini.unwrap"(%6160) : (!mini.ptr<i32>) -> i32
    %6163 = "mini.comparison"(%6161, %6162) {"op" = "GT"} : (i32, i32) -> i1
    %6164 = "mini.wrap"(%6163) : (i1) -> !mini.ptr<i32>
    %6165 = "mini.unwrap"(%6164) : (!mini.ptr<i32>) -> i1
    "mini.if"(%6165) ({
      %6166 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6167 = "hi.cast"(%6166) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.return"(%6167) : (!mini.ptr<i32>) -> ()
    }, {
      %6168 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %6169 = "hi.cast"(%6168) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.return"(%6169) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "early_return_in_else", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Integer", "types" = [i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Integer_getter_value", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Integer_setter_value", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Integer_field_value", "getter_name" = "Integer_getter_value", "setter_name" = "Integer_setter_value"} : () -> ()
  "mini.func"() ({
  ^bb984(%6170 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6171 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6172 : !llvm.ptr, %6173 : i32):
    %6174 = "mini.wrap"(%6170) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %6175 = "hi.cast"(%6174) {"from_typ" = !mini.fatptr<"Integer">, "to_typ" = !mini.fatptr<"Integer">, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %6176 = "mini.wrap"(%6173) : (i32) -> !mini.ptr<i32>
    %6177 = "hi.cast"(%6176) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6178 = "hi.cast"(%6177) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%6175, %6178) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Integer_init_valuei32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb985(%6179 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6180 : !llvm.ptr):
    %6181 = "mini.invariant"(%6180) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6182 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb986] : () -> ()
  ^bb987:
    %6183 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%6183, %6182) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb988] : () -> ()
  ^bb986:
    %6184 = "llvm.getelementptr"(%6180) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6185 = "mini.checkflag"(%6184) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6186 = "llvm.load"(%6185) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6186) [^bb987, ^bb987] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb988:
    %6187 = "llvm.extractvalue"(%6179) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6188 = "llvm.load"(%6182) : (!llvm.ptr) -> i32
    %6189 = "llvm.getelementptr"(%6187, %6188) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6190 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6191 = "llvm.getelementptr"(%6189, %6190) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6191) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B_init_valuei32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb989(%6192 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6193 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6194 : !llvm.ptr, %6195 : i32):
    %6196 = "mini.wrap"(%6192) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %6197 = "hi.cast"(%6196) {"from_typ" = !mini.fatptr<"Integer">, "to_typ" = !mini.fatptr<"Integer">, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %6198 = "mini.wrap"(%6195) : (i32) -> !mini.ptr<i32>
    %6199 = "hi.cast"(%6198) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6200 = "mini.get_field"(%6197) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %6201 = "mini.unwrap"(%6200) : (!mini.ptr<i32>) -> i32
    %6202 = "mini.unwrap"(%6199) : (!mini.ptr<i32>) -> i32
    %6203 = "mini.arithmetic"(%6201, %6202) {"op" = "ADD"} : (i32, i32) -> i32
    %6204 = "mini.wrap"(%6203) : (i32) -> !mini.ptr<i32>
    %6205 = "mini.unwrap"(%6204) : (!mini.ptr<i32>) -> i32
    %6206 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %6207 = "mini.get_field"(%6197) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %6208 = "mini.unwrap"(%6207) : (!mini.ptr<i32>) -> i32
    %6209 = "mini.unwrap"(%6199) : (!mini.ptr<i32>) -> i32
    %6210 = "mini.arithmetic"(%6208, %6209) {"op" = "ADD"} : (i32, i32) -> i32
    %6211 = "mini.wrap"(%6210) : (i32) -> !mini.ptr<i32>
    %6212 = "hi.cast"(%6211) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6213 = "mini.unwrap"(%6212) : (!mini.ptr<i32>) -> i32
    %6214 = "mini.unwrap"(%6206) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6215 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6216 = "mini.parameterizations_array"(%6215) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6216, %6214, %6213) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %6217 = "hi.cast"(%6206) {"from_typ" = !mini.fatptr<"Integer">, "to_typ" = !mini.fatptr<"Integer">, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%6217) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__ADD_otheri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb990(%6218 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6219 : !llvm.ptr):
    %6220 = "mini.invariant"(%6219) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6221 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb991] : () -> ()
  ^bb992:
    %6222 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%6222, %6221) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb993] : () -> ()
  ^bb991:
    %6223 = "llvm.getelementptr"(%6219) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6224 = "mini.checkflag"(%6223) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6225 = "llvm.load"(%6224) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6225) [^bb992, ^bb992] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb993:
    %6226 = "llvm.extractvalue"(%6218) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6227 = "llvm.load"(%6221) : (!llvm.ptr) -> i32
    %6228 = "llvm.getelementptr"(%6226, %6227) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6229 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6230 = "llvm.getelementptr"(%6228, %6229) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6230) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__ADD_otheri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb994(%6231 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6232 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6233 : !llvm.ptr, %6234 : i32):
    %6235 = "mini.wrap"(%6231) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %6236 = "hi.cast"(%6235) {"from_typ" = !mini.fatptr<"Integer">, "to_typ" = !mini.fatptr<"Integer">, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %6237 = "mini.wrap"(%6234) : (i32) -> !mini.ptr<i32>
    %6238 = "hi.cast"(%6237) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6239 = "mini.get_field"(%6236) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %6240 = "mini.unwrap"(%6239) : (!mini.ptr<i32>) -> i32
    %6241 = "mini.unwrap"(%6238) : (!mini.ptr<i32>) -> i32
    %6242 = "mini.arithmetic"(%6240, %6241) {"op" = "SUB"} : (i32, i32) -> i32
    %6243 = "mini.wrap"(%6242) : (i32) -> !mini.ptr<i32>
    %6244 = "mini.unwrap"(%6243) : (!mini.ptr<i32>) -> i32
    %6245 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %6246 = "mini.get_field"(%6236) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %6247 = "mini.unwrap"(%6246) : (!mini.ptr<i32>) -> i32
    %6248 = "mini.unwrap"(%6238) : (!mini.ptr<i32>) -> i32
    %6249 = "mini.arithmetic"(%6247, %6248) {"op" = "SUB"} : (i32, i32) -> i32
    %6250 = "mini.wrap"(%6249) : (i32) -> !mini.ptr<i32>
    %6251 = "hi.cast"(%6250) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6252 = "mini.unwrap"(%6251) : (!mini.ptr<i32>) -> i32
    %6253 = "mini.unwrap"(%6245) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6254 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6255 = "mini.parameterizations_array"(%6254) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6255, %6253, %6252) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %6256 = "hi.cast"(%6245) {"from_typ" = !mini.fatptr<"Integer">, "to_typ" = !mini.fatptr<"Integer">, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%6256) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__SUB_otheri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb995(%6257 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6258 : !llvm.ptr):
    %6259 = "mini.invariant"(%6258) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6260 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb996] : () -> ()
  ^bb997:
    %6261 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%6261, %6260) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb998] : () -> ()
  ^bb996:
    %6262 = "llvm.getelementptr"(%6258) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6263 = "mini.checkflag"(%6262) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6264 = "llvm.load"(%6263) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6264) [^bb997, ^bb997] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb998:
    %6265 = "llvm.extractvalue"(%6257) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6266 = "llvm.load"(%6260) : (!llvm.ptr) -> i32
    %6267 = "llvm.getelementptr"(%6265, %6266) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6268 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6269 = "llvm.getelementptr"(%6267, %6268) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6269) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__SUB_otheri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb999(%6270 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6271 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6272 : !llvm.ptr, %6273 : i32):
    %6274 = "mini.wrap"(%6270) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %6275 = "hi.cast"(%6274) {"from_typ" = !mini.fatptr<"Integer">, "to_typ" = !mini.fatptr<"Integer">, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %6276 = "mini.wrap"(%6273) : (i32) -> !mini.ptr<i32>
    %6277 = "hi.cast"(%6276) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6278 = "mini.get_field"(%6275) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %6279 = "mini.unwrap"(%6278) : (!mini.ptr<i32>) -> i32
    %6280 = "mini.unwrap"(%6277) : (!mini.ptr<i32>) -> i32
    %6281 = "mini.arithmetic"(%6279, %6280) {"op" = "MUL"} : (i32, i32) -> i32
    %6282 = "mini.wrap"(%6281) : (i32) -> !mini.ptr<i32>
    %6283 = "mini.unwrap"(%6282) : (!mini.ptr<i32>) -> i32
    %6284 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %6285 = "mini.get_field"(%6275) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %6286 = "mini.unwrap"(%6285) : (!mini.ptr<i32>) -> i32
    %6287 = "mini.unwrap"(%6277) : (!mini.ptr<i32>) -> i32
    %6288 = "mini.arithmetic"(%6286, %6287) {"op" = "MUL"} : (i32, i32) -> i32
    %6289 = "mini.wrap"(%6288) : (i32) -> !mini.ptr<i32>
    %6290 = "hi.cast"(%6289) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6291 = "mini.unwrap"(%6290) : (!mini.ptr<i32>) -> i32
    %6292 = "mini.unwrap"(%6284) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6293 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6294 = "mini.parameterizations_array"(%6293) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6294, %6292, %6291) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %6295 = "hi.cast"(%6284) {"from_typ" = !mini.fatptr<"Integer">, "to_typ" = !mini.fatptr<"Integer">, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%6295) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__MUL_otheri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1000(%6296 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6297 : !llvm.ptr):
    %6298 = "mini.invariant"(%6297) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6299 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1001] : () -> ()
  ^bb1002:
    %6300 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%6300, %6299) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1003] : () -> ()
  ^bb1001:
    %6301 = "llvm.getelementptr"(%6297) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6302 = "mini.checkflag"(%6301) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6303 = "llvm.load"(%6302) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6303) [^bb1002, ^bb1002] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1003:
    %6304 = "llvm.extractvalue"(%6296) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6305 = "llvm.load"(%6299) : (!llvm.ptr) -> i32
    %6306 = "llvm.getelementptr"(%6304, %6305) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6307 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6308 = "llvm.getelementptr"(%6306, %6307) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6308) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__MUL_otheri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1004(%6309 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6310 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6311 : !llvm.ptr, %6312 : i32):
    %6313 = "mini.wrap"(%6309) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %6314 = "hi.cast"(%6313) {"from_typ" = !mini.fatptr<"Integer">, "to_typ" = !mini.fatptr<"Integer">, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %6315 = "mini.wrap"(%6312) : (i32) -> !mini.ptr<i32>
    %6316 = "hi.cast"(%6315) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6317 = "mini.get_field"(%6314) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %6318 = "mini.unwrap"(%6317) : (!mini.ptr<i32>) -> i32
    %6319 = "mini.unwrap"(%6316) : (!mini.ptr<i32>) -> i32
    %6320 = "mini.arithmetic"(%6318, %6319) {"op" = "DIV"} : (i32, i32) -> i32
    %6321 = "mini.wrap"(%6320) : (i32) -> !mini.ptr<i32>
    %6322 = "mini.unwrap"(%6321) : (!mini.ptr<i32>) -> i32
    %6323 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %6324 = "mini.get_field"(%6314) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %6325 = "mini.unwrap"(%6324) : (!mini.ptr<i32>) -> i32
    %6326 = "mini.unwrap"(%6316) : (!mini.ptr<i32>) -> i32
    %6327 = "mini.arithmetic"(%6325, %6326) {"op" = "DIV"} : (i32, i32) -> i32
    %6328 = "mini.wrap"(%6327) : (i32) -> !mini.ptr<i32>
    %6329 = "hi.cast"(%6328) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6330 = "mini.unwrap"(%6329) : (!mini.ptr<i32>) -> i32
    %6331 = "mini.unwrap"(%6323) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6332 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6333 = "mini.parameterizations_array"(%6332) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6333, %6331, %6330) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %6334 = "hi.cast"(%6323) {"from_typ" = !mini.fatptr<"Integer">, "to_typ" = !mini.fatptr<"Integer">, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    "mini.return"(%6334) : (!mini.fatptr<"Integer">) -> ()
  }) {"func_name" = "Integer__DIV_otheri32", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1005(%6335 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6336 : !llvm.ptr):
    %6337 = "mini.invariant"(%6336) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6338 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1006] : () -> ()
  ^bb1007:
    %6339 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%6339, %6338) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1008] : () -> ()
  ^bb1006:
    %6340 = "llvm.getelementptr"(%6336) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6341 = "mini.checkflag"(%6340) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6342 = "llvm.load"(%6341) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6342) [^bb1007, ^bb1007] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1008:
    %6343 = "llvm.extractvalue"(%6335) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6344 = "llvm.load"(%6338) : (!llvm.ptr) -> i32
    %6345 = "llvm.getelementptr"(%6343, %6344) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6346 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6347 = "llvm.getelementptr"(%6345, %6346) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6347) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B__DIV_otheri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1009(%6348 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6349 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6350 : !llvm.ptr):
    %6351 = "mini.wrap"(%6348) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer">
    %6352 = "hi.cast"(%6351) {"from_typ" = !mini.fatptr<"Integer">, "to_typ" = !mini.fatptr<"Integer">, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %6353 = "mini.get_field"(%6352) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Integer">) -> !mini.ptr<i32>
    %6354 = "hi.cast"(%6353) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %6355 = "mini.unwrap"(%6354) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %6356 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6357 = "mini.parameterizations_array"(%6356) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%6357, %6355) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Integer_print_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1010(%6358 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6359 : !llvm.ptr):
    %6360 = "mini.invariant"(%6359) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6361 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1011] : () -> ()
  ^bb1011:
    %6362 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%6362, %6361) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1012] : () -> ()
  ^bb1012:
    %6363 = "llvm.extractvalue"(%6358) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6364 = "llvm.load"(%6361) : (!llvm.ptr) -> i32
    %6365 = "llvm.getelementptr"(%6363, %6364) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6366 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6367 = "llvm.getelementptr"(%6365, %6366) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6367) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer_B_print_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_BigBoy", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb1013(%6368 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6369 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6370 : !llvm.ptr):
    %6371 = "mini.wrap"(%6368) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"BigBoy">
    %6372 = "hi.cast"(%6371) {"from_typ" = !mini.fatptr<"BigBoy">, "to_typ" = !mini.fatptr<"BigBoy">, "from_typ_name" = "BigBoy", "to_typ_name" = "BigBoy"} : (!mini.fatptr<"BigBoy">) -> !mini.fatptr<"BigBoy">
    %6373 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6374 = "mini.create_buffer"(%6373) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %6375 = "hi.cast"(%6374) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %6376 = "mini.refer"(%6375) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %6377 = "mini.literal"() {"typ" = !llvm.array<10 x i8>, "value" = "Here I am!"} : () -> !llvm.ptr
    %6378 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%6376, %6378, %6377) {"typ" = !llvm.array<10 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %6379 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6380 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6381 = "mini.unwrap"(%6376) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %6382 = "mini.unwrap"(%6379) : (!mini.ptr<i32>) -> i32
    %6383 = "mini.unwrap"(%6380) : (!mini.ptr<i32>) -> i32
    %6384 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %6385 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6386 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6387 = "hi.cast"(%6376) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %6388 = "mini.unwrap"(%6387) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %6389 = "hi.cast"(%6385) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6390 = "mini.unwrap"(%6389) : (!mini.ptr<i32>) -> i32
    %6391 = "hi.cast"(%6386) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6392 = "mini.unwrap"(%6391) : (!mini.ptr<i32>) -> i32
    %6393 = "mini.unwrap"(%6384) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6394 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %6395 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6396 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6397 = "mini.parameterizations_array"(%6394, %6395, %6396) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6397, %6393, %6388, %6390, %6392) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %6398 = "hi.cast"(%6384) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!mini.fatptr<"String">) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %6399 = "mini.unwrap"(%6398) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %6400 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %6401 = "mini.parameterizations_array"(%6400) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%6401, %6399) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "BigBoy_introduce_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1014(%6402 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6403 : !llvm.ptr):
    %6404 = "mini.invariant"(%6403) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6405 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1015] : () -> ()
  ^bb1015:
    %6406 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%6406, %6405) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1016] : () -> ()
  ^bb1016:
    %6407 = "llvm.extractvalue"(%6402) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6408 = "llvm.load"(%6405) : (!llvm.ptr) -> i32
    %6409 = "llvm.getelementptr"(%6407, %6408) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6410 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6411 = "llvm.getelementptr"(%6409, %6410) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6411) : (!llvm.ptr) -> ()
  }) {"func_name" = "BigBoy_B_introduce_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1017(%6412 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6413 : !llvm.ptr):
    %6414 = "mini.invariant"(%6413) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6415 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1018] : () -> ()
  ^bb1018:
    %6416 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%6416, %6415) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1019] : () -> ()
  ^bb1019:
    %6417 = "llvm.extractvalue"(%6412) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6418 = "llvm.load"(%6415) : (!llvm.ptr) -> i32
    %6419 = "llvm.getelementptr"(%6417, %6418) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<6 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6420 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6421 = "llvm.getelementptr"(%6419, %6420) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6421) : (!llvm.ptr) -> ()
  }) {"func_name" = "BigBoy_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Integer2", "types" = [i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Integer2_getter_value", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Integer2_setter_value", "types" = [i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Integer2_field_value", "getter_name" = "Integer2_getter_value", "setter_name" = "Integer2_setter_value"} : () -> ()
  "mini.func"() ({
  ^bb1020(%6422 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6423 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6424 : !llvm.ptr):
    %6425 = "mini.wrap"(%6422) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer2">
    %6426 = "hi.cast"(%6425) {"from_typ" = !mini.fatptr<"Integer2">, "to_typ" = !mini.fatptr<"Integer2">, "from_typ_name" = "Integer2", "to_typ_name" = "Integer2"} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %6427 = "mini.get_field"(%6426) {"offset" = 0 : i64, "vtable_bytes" = 320 : i32, "original_type" = i32} : (!mini.fatptr<"Integer2">) -> !mini.ptr<i32>
    %6428 = "hi.cast"(%6427) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.return"(%6428) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "Integer2_value_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1021(%6429 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6430 : !llvm.ptr):
    %6431 = "mini.invariant"(%6430) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6432 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1022] : () -> ()
  ^bb1022:
    %6433 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%6433, %6432) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1023] : () -> ()
  ^bb1023:
    %6434 = "llvm.extractvalue"(%6429) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6435 = "llvm.load"(%6432) : (!llvm.ptr) -> i32
    %6436 = "llvm.getelementptr"(%6434, %6435) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6437 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6438 = "llvm.getelementptr"(%6436, %6437) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6438) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_value_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1024(%6439 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6440 : !llvm.ptr):
    %6441 = "mini.invariant"(%6440) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6442 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1025] : () -> ()
  ^bb1026:
    %6443 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%6443, %6442) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1027] : () -> ()
  ^bb1025:
    %6444 = "llvm.getelementptr"(%6440) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6445 = "mini.checkflag"(%6444) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6446 = "llvm.load"(%6445) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6446) [^bb1026, ^bb1026] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1027:
    %6447 = "llvm.extractvalue"(%6439) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6448 = "llvm.load"(%6442) : (!llvm.ptr) -> i32
    %6449 = "llvm.getelementptr"(%6447, %6448) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6450 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6451 = "llvm.getelementptr"(%6449, %6450) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6451) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_init_valuei32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1028(%6452 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6453 : !llvm.ptr):
    %6454 = "mini.invariant"(%6453) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6455 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1029] : () -> ()
  ^bb1030:
    %6456 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%6456, %6455) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1031] : () -> ()
  ^bb1029:
    %6457 = "llvm.getelementptr"(%6453) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6458 = "mini.checkflag"(%6457) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6459 = "llvm.load"(%6458) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6459) [^bb1030, ^bb1030] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1031:
    %6460 = "llvm.extractvalue"(%6452) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6461 = "llvm.load"(%6455) : (!llvm.ptr) -> i32
    %6462 = "llvm.getelementptr"(%6460, %6461) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6463 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6464 = "llvm.getelementptr"(%6462, %6463) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6464) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__ADD_otheri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1032(%6465 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6466 : !llvm.ptr):
    %6467 = "mini.invariant"(%6466) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6468 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1033] : () -> ()
  ^bb1034:
    %6469 = "llvm.mlir.constant"() <{"value" = 13 : i32}> : () -> i32
    "llvm.store"(%6469, %6468) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1035] : () -> ()
  ^bb1033:
    %6470 = "llvm.getelementptr"(%6466) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6471 = "mini.checkflag"(%6470) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6472 = "llvm.load"(%6471) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6472) [^bb1034, ^bb1034] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1035:
    %6473 = "llvm.extractvalue"(%6465) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6474 = "llvm.load"(%6468) : (!llvm.ptr) -> i32
    %6475 = "llvm.getelementptr"(%6473, %6474) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6476 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6477 = "llvm.getelementptr"(%6475, %6476) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6477) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__SUB_otheri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1036(%6478 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6479 : !llvm.ptr):
    %6480 = "mini.invariant"(%6479) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6481 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1037] : () -> ()
  ^bb1038:
    %6482 = "llvm.mlir.constant"() <{"value" = 14 : i32}> : () -> i32
    "llvm.store"(%6482, %6481) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1039] : () -> ()
  ^bb1037:
    %6483 = "llvm.getelementptr"(%6479) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6484 = "mini.checkflag"(%6483) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6485 = "llvm.load"(%6484) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6485) [^bb1038, ^bb1038] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1039:
    %6486 = "llvm.extractvalue"(%6478) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6487 = "llvm.load"(%6481) : (!llvm.ptr) -> i32
    %6488 = "llvm.getelementptr"(%6486, %6487) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6489 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6490 = "llvm.getelementptr"(%6488, %6489) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6490) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__MUL_otheri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1040(%6491 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6492 : !llvm.ptr):
    %6493 = "mini.invariant"(%6492) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6494 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1041] : () -> ()
  ^bb1042:
    %6495 = "llvm.mlir.constant"() <{"value" = 15 : i32}> : () -> i32
    "llvm.store"(%6495, %6494) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1043] : () -> ()
  ^bb1041:
    %6496 = "llvm.getelementptr"(%6492) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6497 = "mini.checkflag"(%6496) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6498 = "llvm.load"(%6497) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6498) [^bb1042, ^bb1042] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1043:
    %6499 = "llvm.extractvalue"(%6491) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6500 = "llvm.load"(%6494) : (!llvm.ptr) -> i32
    %6501 = "llvm.getelementptr"(%6499, %6500) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6502 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6503 = "llvm.getelementptr"(%6501, %6502) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6503) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B__DIV_otheri32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1044(%6504 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6505 : !llvm.ptr):
    %6506 = "mini.invariant"(%6505) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6507 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1045] : () -> ()
  ^bb1045:
    %6508 = "llvm.mlir.constant"() <{"value" = 16 : i32}> : () -> i32
    "llvm.store"(%6508, %6507) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1046] : () -> ()
  ^bb1046:
    %6509 = "llvm.extractvalue"(%6504) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6510 = "llvm.load"(%6507) : (!llvm.ptr) -> i32
    %6511 = "llvm.getelementptr"(%6509, %6510) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6512 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6513 = "llvm.getelementptr"(%6511, %6512) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6513) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_print_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1047(%6514 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6515 : !llvm.ptr):
    %6516 = "mini.invariant"(%6515) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6517 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1048] : () -> ()
  ^bb1048:
    %6518 = "llvm.mlir.constant"() <{"value" = 17 : i32}> : () -> i32
    "llvm.store"(%6518, %6517) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1049] : () -> ()
  ^bb1049:
    %6519 = "llvm.extractvalue"(%6514) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6520 = "llvm.load"(%6517) : (!llvm.ptr) -> i32
    %6521 = "llvm.getelementptr"(%6519, %6520) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6522 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6523 = "llvm.getelementptr"(%6521, %6522) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6523) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_introduce_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1050(%6524 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6525 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6526 : !llvm.ptr):
    %6527 = "mini.wrap"(%6524) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Integer2">
    %6528 = "hi.cast"(%6527) {"from_typ" = !mini.fatptr<"Integer2">, "to_typ" = !mini.fatptr<"Integer2">, "from_typ_name" = "Integer2", "to_typ_name" = "Integer2"} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %6529 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6530 = "mini.create_buffer"(%6529) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %6531 = "hi.cast"(%6530) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %6532 = "mini.refer"(%6531) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %6533 = "mini.literal"() {"typ" = !llvm.array<8 x i8>, "value" = "Integer2"} : () -> !llvm.ptr
    %6534 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%6532, %6534, %6533) {"typ" = !llvm.array<8 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %6535 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6536 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6537 = "mini.unwrap"(%6532) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %6538 = "mini.unwrap"(%6535) : (!mini.ptr<i32>) -> i32
    %6539 = "mini.unwrap"(%6536) : (!mini.ptr<i32>) -> i32
    %6540 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %6541 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6542 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6543 = "hi.cast"(%6532) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %6544 = "mini.unwrap"(%6543) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %6545 = "hi.cast"(%6541) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6546 = "mini.unwrap"(%6545) : (!mini.ptr<i32>) -> i32
    %6547 = "hi.cast"(%6542) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6548 = "mini.unwrap"(%6547) : (!mini.ptr<i32>) -> i32
    %6549 = "mini.unwrap"(%6540) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6550 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %6551 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6552 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6553 = "mini.parameterizations_array"(%6550, %6551, %6552) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6553, %6549, %6544, %6546, %6548) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %6554 = "hi.cast"(%6540) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    "mini.return"(%6554) : (!mini.fatptr<"String">) -> ()
  }) {"func_name" = "Integer2_repr_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1051(%6555 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6556 : !llvm.ptr):
    %6557 = "mini.invariant"(%6556) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6558 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1052] : () -> ()
  ^bb1052:
    %6559 = "llvm.mlir.constant"() <{"value" = 18 : i32}> : () -> i32
    "llvm.store"(%6559, %6558) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1053] : () -> ()
  ^bb1053:
    %6560 = "llvm.extractvalue"(%6555) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6561 = "llvm.load"(%6558) : (!llvm.ptr) -> i32
    %6562 = "llvm.getelementptr"(%6560, %6561) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<40 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6563 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6564 = "llvm.getelementptr"(%6562, %6563) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6564) : (!llvm.ptr) -> ()
  }) {"func_name" = "Integer2_B_repr_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Animal", "types" = [i32, f64, i32]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Animal_getter_age", "types" = [i32, f64, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Animal_setter_age", "types" = [i32, f64, i32], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Animal_field_age", "getter_name" = "Animal_getter_age", "setter_name" = "Animal_setter_age"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Animal_getter_hp", "types" = [i32, f64, i32], "offset" = 1 : i64, "original_type" = f64, "specialized_name" = "f64_typ", "parameterization" = "_parameterization_f64"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Animal_setter_hp", "types" = [i32, f64, i32], "offset" = 1 : i64, "original_type" = f64, "specialized_name" = "f64_typ", "parameterization" = "_parameterization_f64"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Animal_field_hp", "getter_name" = "Animal_getter_hp", "setter_name" = "Animal_setter_hp"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Animal_getter_skill", "types" = [i32, f64, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Animal_setter_skill", "types" = [i32, f64, i32], "offset" = 2 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Animal_field_skill", "getter_name" = "Animal_getter_skill", "setter_name" = "Animal_setter_skill"} : () -> ()
  "mini.func"() ({
  ^bb1054(%6565 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6566 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6567 : !llvm.ptr, %6568 : i32, %6569 : f64, %6570 : i32):
    %6571 = "mini.wrap"(%6565) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %6572 = "hi.cast"(%6571) {"from_typ" = !mini.fatptr<"Animal">, "to_typ" = !mini.fatptr<"Animal">, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %6573 = "mini.wrap"(%6568) : (i32) -> !mini.ptr<i32>
    %6574 = "hi.cast"(%6573) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6575 = "hi.cast"(%6574) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%6572, %6575) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">, !mini.ptr<i32>) -> ()
    %6576 = "mini.wrap"(%6569) : (f64) -> !mini.ptr<f64>
    %6577 = "hi.cast"(%6576) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    %6578 = "hi.cast"(%6577) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    "mini.set_field"(%6572, %6578) {"offset" = 1 : i64, "vtable_bytes" = 104 : i32, "original_type" = f64} : (!mini.fatptr<"Animal">, !mini.ptr<f64>) -> ()
    %6579 = "mini.wrap"(%6570) : (i32) -> !mini.ptr<i32>
    %6580 = "hi.cast"(%6579) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6581 = "hi.cast"(%6580) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%6572, %6581) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Animal_init_agei32_hpf64_skilli32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1055(%6582 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6583 : !llvm.ptr):
    %6584 = "mini.invariant"(%6583) {"num_bytes" = 24 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6585 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1056] : () -> ()
  ^bb1057:
    %6586 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%6586, %6585) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1058] : () -> ()
  ^bb1059:
    %6587 = "llvm.getelementptr"(%6583) <{"rawConstantIndices" = array<i32: 2>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6588 = "mini.checkflag"(%6587) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6589 = "llvm.load"(%6588) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6589) [^bb1057, ^bb1057] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1060:
    %6590 = "llvm.getelementptr"(%6583) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6591 = "mini.checkflag"(%6590) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6592 = "llvm.load"(%6591) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6592) [^bb1059, ^bb1059] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1056:
    %6593 = "llvm.getelementptr"(%6583) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6594 = "mini.checkflag"(%6593) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6595 = "llvm.load"(%6594) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6595) [^bb1060, ^bb1060] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1058:
    %6596 = "llvm.extractvalue"(%6582) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6597 = "llvm.load"(%6585) : (!llvm.ptr) -> i32
    %6598 = "llvm.getelementptr"(%6596, %6597) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6599 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6600 = "llvm.getelementptr"(%6598, %6599) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6600) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_init_agei32_hpf64_skilli32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1061(%6601 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6602 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6603 : !llvm.ptr):
    %6604 = "mini.wrap"(%6601) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %6605 = "hi.cast"(%6604) {"from_typ" = !mini.fatptr<"Animal">, "to_typ" = !mini.fatptr<"Animal">, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %6606 = "mini.get_field"(%6605) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<i32>
    %6607 = "hi.cast"(%6606) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6608 = "mini.unwrap"(%6607) : (!mini.ptr<i32>) -> i32
    %6609 = "mini.unwrap"(%6605) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6610 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6611 = "mini.parameterizations_array"(%6610) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6611, %6609, %6608) {"offset" = 6 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %6612 = "mini.get_field"(%6605) {"offset" = 0 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<i32>
    %6613 = "hi.cast"(%6612) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6614 = "mini.unwrap"(%6613) : (!mini.ptr<i32>) -> i32
    %6615 = "mini.unwrap"(%6605) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6616 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6617 = "mini.parameterizations_array"(%6616) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6617, %6615, %6614) {"offset" = 6 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
  }) {"func_name" = "Animal_say_age_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1062(%6618 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6619 : !llvm.ptr):
    %6620 = "mini.invariant"(%6619) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6621 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1063] : () -> ()
  ^bb1063:
    %6622 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%6622, %6621) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1064] : () -> ()
  ^bb1064:
    %6623 = "llvm.extractvalue"(%6618) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6624 = "llvm.load"(%6621) : (!llvm.ptr) -> i32
    %6625 = "llvm.getelementptr"(%6623, %6624) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6626 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6627 = "llvm.getelementptr"(%6625, %6626) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6627) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_say_age_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1065(%6628 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6629 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6630 : !llvm.ptr):
    %6631 = "mini.wrap"(%6628) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %6632 = "hi.cast"(%6631) {"from_typ" = !mini.fatptr<"Animal">, "to_typ" = !mini.fatptr<"Animal">, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %6633 = "mini.get_field"(%6632) {"offset" = 2 : i64, "vtable_bytes" = 104 : i32, "original_type" = i32} : (!mini.fatptr<"Animal">) -> !mini.ptr<i32>
    %6634 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %6635 = "mini.unwrap"(%6634) : (!mini.ptr<i1>) -> i1
    %6636 = "hi.cast"(%6633) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.if"(%6635) ({
      %6637 = "hi.cast"(%6636) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %6638 = "hi.cast"(%6637) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
      %6639 = "mini.unwrap"(%6638) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %6640 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %6641 = "mini.parameterizations_array"(%6640) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%6641, %6639) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %6642 = "hi.cast"(%6637) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%6636, %6642) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
    }) : (i1) -> ()
  }) {"func_name" = "Animal_say_skill_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1066(%6643 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6644 : !llvm.ptr):
    %6645 = "mini.invariant"(%6644) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6646 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1067] : () -> ()
  ^bb1067:
    %6647 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%6647, %6646) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1068] : () -> ()
  ^bb1068:
    %6648 = "llvm.extractvalue"(%6643) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6649 = "llvm.load"(%6646) : (!llvm.ptr) -> i32
    %6650 = "llvm.getelementptr"(%6648, %6649) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6651 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6652 = "llvm.getelementptr"(%6650, %6651) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6652) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_say_skill_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1069(%6653 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6654 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6655 : !llvm.ptr, %6656 : i32):
    %6657 = "mini.wrap"(%6653) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %6658 = "hi.cast"(%6657) {"from_typ" = !mini.fatptr<"Animal">, "to_typ" = !mini.fatptr<"Animal">, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %6659 = "mini.wrap"(%6656) : (i32) -> !mini.ptr<i32>
    %6660 = "hi.cast"(%6659) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6661 = "hi.cast"(%6660) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %6662 = "mini.unwrap"(%6661) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %6663 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6664 = "mini.parameterizations_array"(%6663) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%6664, %6662) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Animal_say_messagei32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1070(%6665 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6666 : !llvm.ptr):
    %6667 = "mini.invariant"(%6666) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6668 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1071] : () -> ()
  ^bb1072:
    %6669 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%6669, %6668) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1073] : () -> ()
  ^bb1071:
    %6670 = "llvm.getelementptr"(%6666) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6671 = "mini.checkflag"(%6670) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6672 = "llvm.load"(%6671) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6672) [^bb1072, ^bb1072] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1073:
    %6673 = "llvm.extractvalue"(%6665) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6674 = "llvm.load"(%6668) : (!llvm.ptr) -> i32
    %6675 = "llvm.getelementptr"(%6673, %6674) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6676 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6677 = "llvm.getelementptr"(%6675, %6676) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6677) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_say_messagei32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1074(%6678 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6679 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6680 : !llvm.ptr):
    %6681 = "mini.wrap"(%6678) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %6682 = "hi.cast"(%6681) {"from_typ" = !mini.fatptr<"Animal">, "to_typ" = !mini.fatptr<"Animal">, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %6683 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6684 = "mini.literal"() {"value" = 5.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %6685 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6686 = "mini.unwrap"(%6683) : (!mini.ptr<i32>) -> i32
    %6687 = "mini.unwrap"(%6684) : (!mini.ptr<f64>) -> f64
    %6688 = "mini.unwrap"(%6685) : (!mini.ptr<i32>) -> i32
    %6689 = "mini.new"() {"typ" = !llvm.struct<(i32, f64, i32)>, "class_name" = "Animal", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Animal">
    %6690 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6691 = "mini.literal"() {"value" = 5.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %6692 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6693 = "hi.cast"(%6690) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6694 = "mini.unwrap"(%6693) : (!mini.ptr<i32>) -> i32
    %6695 = "hi.cast"(%6691) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    %6696 = "mini.unwrap"(%6695) : (!mini.ptr<f64>) -> f64
    %6697 = "hi.cast"(%6692) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6698 = "mini.unwrap"(%6697) : (!mini.ptr<i32>) -> i32
    %6699 = "mini.unwrap"(%6689) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6700 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6701 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["f64"]} : () -> !llvm.ptr
    %6702 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6703 = "mini.parameterizations_array"(%6700, %6701, %6702) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6703, %6699, %6694, %6696, %6698) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "f64_typ", "i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64, i32) -> ()
    %6704 = "hi.cast"(%6689) {"from_typ" = !mini.fatptr<"Animal">, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">]>, "from_typ_name" = "Animal", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Animal">) -> !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">]>
    "mini.return"(%6704) : (!mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">]>) -> ()
  }) {"func_name" = "Animal_do_nothing_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1075(%6705 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6706 : !llvm.ptr):
    %6707 = "mini.invariant"(%6706) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6708 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1076] : () -> ()
  ^bb1076:
    %6709 = "llvm.mlir.constant"() <{"value" = 12 : i32}> : () -> i32
    "llvm.store"(%6709, %6708) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1077] : () -> ()
  ^bb1077:
    %6710 = "llvm.extractvalue"(%6705) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6711 = "llvm.load"(%6708) : (!llvm.ptr) -> i32
    %6712 = "llvm.getelementptr"(%6710, %6711) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<13 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6713 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6714 = "llvm.getelementptr"(%6712, %6713) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6714) : (!llvm.ptr) -> ()
  }) {"func_name" = "Animal_B_do_nothing_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Beaver", "types" = [i32, f64]} : () -> ()
  "mini.getter_def"() {"meth_name" = "Beaver_getter_color", "types" = [i32, f64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Beaver_setter_color", "types" = [i32, f64], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Beaver_field_color", "getter_name" = "Beaver_getter_color", "setter_name" = "Beaver_setter_color"} : () -> ()
  "mini.getter_def"() {"meth_name" = "Beaver_getter_name", "types" = [i32, f64], "offset" = 1 : i64, "original_type" = f64, "specialized_name" = "f64_typ", "parameterization" = "_parameterization_f64"} : () -> ()
  "mini.setter_def"() {"meth_name" = "Beaver_setter_name", "types" = [i32, f64], "offset" = 1 : i64, "original_type" = f64, "specialized_name" = "f64_typ", "parameterization" = "_parameterization_f64"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "Beaver_field_name", "getter_name" = "Beaver_getter_name", "setter_name" = "Beaver_setter_name"} : () -> ()
  "mini.func"() ({
  ^bb1078(%6715 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6716 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6717 : !llvm.ptr, %6718 : i32, %6719 : f64):
    %6720 = "mini.wrap"(%6715) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Beaver">
    %6721 = "hi.cast"(%6720) {"from_typ" = !mini.fatptr<"Beaver">, "to_typ" = !mini.fatptr<"Beaver">, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %6722 = "mini.wrap"(%6718) : (i32) -> !mini.ptr<i32>
    %6723 = "hi.cast"(%6722) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6724 = "hi.cast"(%6723) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%6721, %6724) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"Beaver">, !mini.ptr<i32>) -> ()
    %6725 = "mini.wrap"(%6719) : (f64) -> !mini.ptr<f64>
    %6726 = "hi.cast"(%6725) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    %6727 = "hi.cast"(%6726) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    "mini.set_field"(%6721, %6727) {"offset" = 1 : i64, "vtable_bytes" = 64 : i32, "original_type" = f64} : (!mini.fatptr<"Beaver">, !mini.ptr<f64>) -> ()
  }) {"func_name" = "Beaver_init_colori32_namef64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1079(%6728 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6729 : !llvm.ptr):
    %6730 = "mini.invariant"(%6729) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6731 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1080] : () -> ()
  ^bb1081:
    %6732 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%6732, %6731) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1082] : () -> ()
  ^bb1083:
    %6733 = "llvm.getelementptr"(%6729) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6734 = "mini.checkflag"(%6733) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6735 = "llvm.load"(%6734) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6735) [^bb1081, ^bb1081] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1080:
    %6736 = "llvm.getelementptr"(%6729) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6737 = "mini.checkflag"(%6736) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6738 = "llvm.load"(%6737) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6738) [^bb1083, ^bb1083] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1082:
    %6739 = "llvm.extractvalue"(%6728) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6740 = "llvm.load"(%6731) : (!llvm.ptr) -> i32
    %6741 = "llvm.getelementptr"(%6739, %6740) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6742 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6743 = "llvm.getelementptr"(%6741, %6742) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6743) : (!llvm.ptr) -> ()
  }) {"func_name" = "Beaver_B_init_colori32_namef64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1084(%6744 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6745 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6746 : !llvm.ptr, %6747 : i32):
    %6748 = "mini.wrap"(%6744) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Beaver">
    %6749 = "hi.cast"(%6748) {"from_typ" = !mini.fatptr<"Beaver">, "to_typ" = !mini.fatptr<"Beaver">, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %6750 = "mini.wrap"(%6747) : (i32) -> !mini.ptr<i32>
    %6751 = "hi.cast"(%6750) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6752 = "mini.get_field"(%6749) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"Beaver">) -> !mini.ptr<i32>
    %6753 = "mini.unwrap"(%6752) : (!mini.ptr<i32>) -> i32
    %6754 = "mini.unwrap"(%6751) : (!mini.ptr<i32>) -> i32
    %6755 = "mini.arithmetic"(%6753, %6754) {"op" = "ADD"} : (i32, i32) -> i32
    %6756 = "mini.wrap"(%6755) : (i32) -> !mini.ptr<i32>
    %6757 = "hi.cast"(%6756) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%6749, %6757) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"Beaver">, !mini.ptr<i32>) -> ()
  }) {"func_name" = "Beaver__ADD_xi32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1085(%6758 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6759 : !llvm.ptr):
    %6760 = "mini.invariant"(%6759) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6761 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1086] : () -> ()
  ^bb1087:
    %6762 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%6762, %6761) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1088] : () -> ()
  ^bb1086:
    %6763 = "llvm.getelementptr"(%6759) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6764 = "mini.checkflag"(%6763) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6765 = "llvm.load"(%6764) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6765) [^bb1087, ^bb1087] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1088:
    %6766 = "llvm.extractvalue"(%6758) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6767 = "llvm.load"(%6761) : (!llvm.ptr) -> i32
    %6768 = "llvm.getelementptr"(%6766, %6767) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6769 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6770 = "llvm.getelementptr"(%6768, %6769) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6770) : (!llvm.ptr) -> ()
  }) {"func_name" = "Beaver_B__ADD_xi32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1089(%6771 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6772 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6773 : !llvm.ptr):
    %6774 = "mini.wrap"(%6771) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Beaver">
    %6775 = "hi.cast"(%6774) {"from_typ" = !mini.fatptr<"Beaver">, "to_typ" = !mini.fatptr<"Beaver">, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %6776 = "mini.get_field"(%6775) {"offset" = 0 : i64, "vtable_bytes" = 64 : i32, "original_type" = i32} : (!mini.fatptr<"Beaver">) -> !mini.ptr<i32>
    %6777 = "hi.cast"(%6776) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %6778 = "mini.unwrap"(%6777) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %6779 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6780 = "mini.parameterizations_array"(%6779) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%6780, %6778) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Beaver_say_color_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1090(%6781 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6782 : !llvm.ptr):
    %6783 = "mini.invariant"(%6782) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6784 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1091] : () -> ()
  ^bb1091:
    %6785 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%6785, %6784) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1092] : () -> ()
  ^bb1092:
    %6786 = "llvm.extractvalue"(%6781) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6787 = "llvm.load"(%6784) : (!llvm.ptr) -> i32
    %6788 = "llvm.getelementptr"(%6786, %6787) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<8 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6789 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6790 = "llvm.getelementptr"(%6788, %6789) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6790) : (!llvm.ptr) -> ()
  }) {"func_name" = "Beaver_B_say_color_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ListNode", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ListNode_getter_data", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ListNode_setter_data", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 0 : i64, "original_type" = i32, "specialized_name" = "i32_typ", "parameterization" = "_parameterization_i32"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ListNode_field_data", "getter_name" = "ListNode_getter_data", "setter_name" = "ListNode_setter_data"} : () -> ()
  "mini.getter_def"() {"meth_name" = "ListNode_getter_next", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Nil_or_ListNode"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ListNode_setter_next", "types" = [i32, !llvm.struct<(!llvm.ptr, i160)>], "offset" = 1 : i64, "original_type" = !llvm.struct<(!llvm.ptr, i160)>, "specialized_name" = "union_typ", "parameterization" = "_parameterization_Nil_or_ListNode"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ListNode_field_next", "getter_name" = "ListNode_getter_next", "setter_name" = "ListNode_setter_next"} : () -> ()
  "mini.func"() ({
  ^bb1093(%6791 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6792 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6793 : !llvm.ptr, %6794 : i32):
    %6795 = "mini.wrap"(%6791) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %6796 = "hi.cast"(%6795) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %6797 = "mini.wrap"(%6794) : (i32) -> !mini.ptr<i32>
    %6798 = "hi.cast"(%6797) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6799 = "hi.cast"(%6798) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.set_field"(%6796, %6799) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = i32} : (!mini.fatptr<"ListNode">, !mini.ptr<i32>) -> ()
    %6800 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %6801 = "hi.cast"(%6800) {"from_typ" = !mini.nil, "to_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    "mini.set_field"(%6796, %6801) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ListNode">, !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> ()
  }) {"func_name" = "ListNode_init_datai32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1094(%6802 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6803 : !llvm.ptr):
    %6804 = "mini.invariant"(%6803) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6805 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1095] : () -> ()
  ^bb1096:
    %6806 = "llvm.mlir.constant"() <{"value" = 7 : i32}> : () -> i32
    "llvm.store"(%6806, %6805) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1097] : () -> ()
  ^bb1095:
    %6807 = "llvm.getelementptr"(%6803) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6808 = "mini.checkflag"(%6807) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6809 = "llvm.load"(%6808) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6809) [^bb1096, ^bb1096] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1097:
    %6810 = "llvm.extractvalue"(%6802) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6811 = "llvm.load"(%6805) : (!llvm.ptr) -> i32
    %6812 = "llvm.getelementptr"(%6810, %6811) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6813 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6814 = "llvm.getelementptr"(%6812, %6813) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6814) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_init_datai32", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1098(%6815 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6816 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6817 : !llvm.ptr, %6818 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6819 = "mini.wrap"(%6815) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %6820 = "hi.cast"(%6819) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %6821 = "mini.wrap"(%6818) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %6822 = "hi.cast"(%6821) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %6823 = "hi.cast"(%6822) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "from_typ_name" = "ListNode", "to_typ_name" = "union_typ"} : (!mini.fatptr<"ListNode">) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    "mini.set_field"(%6820, %6823) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ListNode">, !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> ()
    %6824 = "hi.cast"(%6822) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    "mini.return"(%6824) : (!mini.fatptr<"ListNode">) -> ()
  }) {"func_name" = "ListNode_push_nextListNode", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1099(%6825 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6826 : !llvm.ptr):
    %6827 = "mini.invariant"(%6826) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6828 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1100] : () -> ()
  ^bb1101:
    %6829 = "llvm.mlir.constant"() <{"value" = 8 : i32}> : () -> i32
    "llvm.store"(%6829, %6828) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1102] : () -> ()
  ^bb1100:
    %6830 = "llvm.getelementptr"(%6826) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6831 = "mini.checkflag"(%6830) {"typ_name" = "ListNode"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6832 = "llvm.load"(%6831) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6832) [^bb1101, ^bb1101] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1102:
    %6833 = "llvm.extractvalue"(%6825) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6834 = "llvm.load"(%6828) : (!llvm.ptr) -> i32
    %6835 = "llvm.getelementptr"(%6833, %6834) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6836 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6837 = "llvm.getelementptr"(%6835, %6836) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6837) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_push_nextListNode", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1103(%6838 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6839 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6840 : !llvm.ptr):
    %6841 = "mini.wrap"(%6838) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %6842 = "hi.cast"(%6841) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %6843 = "mini.get_field"(%6842) {"offset" = 1 : i64, "vtable_bytes" = 96 : i32, "original_type" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.fatptr<"ListNode">) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    %6844 = "hi.cast"(%6843) {"from_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "to_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    "mini.return"(%6844) : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> ()
  }) {"func_name" = "ListNode_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1104(%6845 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6846 : !llvm.ptr):
    %6847 = "mini.invariant"(%6846) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6848 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1105] : () -> ()
  ^bb1105:
    %6849 = "llvm.mlir.constant"() <{"value" = 9 : i32}> : () -> i32
    "llvm.store"(%6849, %6848) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1106] : () -> ()
  ^bb1106:
    %6850 = "llvm.extractvalue"(%6845) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6851 = "llvm.load"(%6848) : (!llvm.ptr) -> i32
    %6852 = "llvm.getelementptr"(%6850, %6851) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6853 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6854 = "llvm.getelementptr"(%6852, %6853) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6854) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1107(%6855 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6856 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6857 : !llvm.ptr):
    %6858 = "mini.wrap"(%6855) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %6859 = "hi.cast"(%6858) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %6860 = "mini.get_field"(%6859) {"offset" = 0 : i64, "vtable_bytes" = 96 : i32, "original_type" = i32} : (!mini.fatptr<"ListNode">) -> !mini.ptr<i32>
    %6861 = "hi.cast"(%6860) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.return"(%6861) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "ListNode_data_", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1108(%6862 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6863 : !llvm.ptr):
    %6864 = "mini.invariant"(%6863) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6865 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1109] : () -> ()
  ^bb1109:
    %6866 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    "llvm.store"(%6866, %6865) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1110] : () -> ()
  ^bb1110:
    %6867 = "llvm.extractvalue"(%6862) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6868 = "llvm.load"(%6865) : (!llvm.ptr) -> i32
    %6869 = "llvm.getelementptr"(%6867, %6868) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6870 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6871 = "llvm.getelementptr"(%6869, %6870) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6871) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_data_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1111(%6872 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6873 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6874 : !llvm.ptr):
    %6875 = "mini.wrap"(%6872) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %6876 = "hi.cast"(%6875) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %6877 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6878 = "mini.unwrap"(%6877) : (!mini.ptr<i32>) -> i32
    %6879 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ListNode", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ListNode">
    %6880 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6881 = "hi.cast"(%6880) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6882 = "mini.unwrap"(%6881) : (!mini.ptr<i32>) -> i32
    %6883 = "mini.unwrap"(%6879) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6884 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %6885 = "mini.parameterizations_array"(%6884) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6885, %6883, %6882) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %6886 = "hi.cast"(%6879) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %6887 = "mini.refer"(%6886) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %6888 = "hi.cast"(%6876) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %6889 = "mini.unwrap"(%6888) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6890 = "mini.unwrap"(%6887) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6891 = "mini.parameterization"() {"id_hierarchy" = ["ListNode"], "name_hierarchy" = ["ListNode"]} : () -> !llvm.ptr
    %6892 = "mini.parameterizations_array"(%6891) : (!llvm.ptr) -> !llvm.ptr
    %6893 = "mini.method_call"(%6892, %6890, %6889) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %6894 = "hi.cast"(%6893) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %6895 = "mini.unwrap"(%6887) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6896 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "ListIterator", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ListIterator">
    %6897 = "hi.cast"(%6887) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %6898 = "mini.unwrap"(%6897) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6899 = "mini.unwrap"(%6896) : (!mini.fatptr<"ListIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6900 = "mini.parameterization"() {"id_hierarchy" = ["ListNode"], "name_hierarchy" = ["ListNode"]} : () -> !llvm.ptr
    %6901 = "mini.parameterizations_array"(%6900) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%6901, %6899, %6898) {"offset" = 1 : i32, "vptrs" = [#none], "vtable_size" = 5 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %6902 = "hi.cast"(%6896) {"from_typ" = !mini.fatptr<"ListIterator">, "to_typ" = !mini.fatptr<"ListIterator">, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    "mini.return"(%6902) : (!mini.fatptr<"ListIterator">) -> ()
  }) {"func_name" = "ListNode_iterator_", "result_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1112(%6903 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6904 : !llvm.ptr):
    %6905 = "mini.invariant"(%6904) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6906 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1113] : () -> ()
  ^bb1113:
    %6907 = "llvm.mlir.constant"() <{"value" = 11 : i32}> : () -> i32
    "llvm.store"(%6907, %6906) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1114] : () -> ()
  ^bb1114:
    %6908 = "llvm.extractvalue"(%6903) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6909 = "llvm.load"(%6906) : (!llvm.ptr) -> i32
    %6910 = "llvm.getelementptr"(%6908, %6909) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<12 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6911 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6912 = "llvm.getelementptr"(%6910, %6911) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6912) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListNode_B_iterator_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_ListIterator", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>]} : () -> ()
  "mini.getter_def"() {"meth_name" = "ListIterator_getter_node", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "ListNode", "parameterization" = "_parameterization_ListNode"} : () -> ()
  "mini.setter_def"() {"meth_name" = "ListIterator_setter_node", "types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "offset" = 0 : i64, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "specialized_name" = "ListNode", "parameterization" = "_parameterization_ListNode"} : () -> ()
  "mini.accessor_def"() {"meth_name" = "ListIterator_field_node", "getter_name" = "ListIterator_getter_node", "setter_name" = "ListIterator_setter_node"} : () -> ()
  "mini.func"() ({
  ^bb1115(%6913 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6914 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6915 : !llvm.ptr, %6916 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6917 = "mini.wrap"(%6913) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListIterator">
    %6918 = "hi.cast"(%6917) {"from_typ" = !mini.fatptr<"ListIterator">, "to_typ" = !mini.fatptr<"ListIterator">, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %6919 = "mini.wrap"(%6916) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
    %6920 = "hi.cast"(%6919) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %6921 = "hi.cast"(%6920) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    "mini.set_field"(%6918, %6921) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListIterator">, !mini.fatptr<"ListNode">) -> ()
  }) {"func_name" = "ListIterator_init_nodeListNode", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1116(%6922 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6923 : !llvm.ptr):
    %6924 = "mini.invariant"(%6923) {"num_bytes" = 8 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6925 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1117] : () -> ()
  ^bb1118:
    %6926 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%6926, %6925) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1119] : () -> ()
  ^bb1117:
    %6927 = "llvm.getelementptr"(%6923) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %6928 = "mini.checkflag"(%6927) {"typ_name" = "ListNode"} : (!llvm.ptr) -> !mini.ptr<i1>
    %6929 = "llvm.load"(%6928) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%6929) [^bb1118, ^bb1118] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1119:
    %6930 = "llvm.extractvalue"(%6922) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6931 = "llvm.load"(%6925) : (!llvm.ptr) -> i32
    %6932 = "llvm.getelementptr"(%6930, %6931) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6933 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6934 = "llvm.getelementptr"(%6932, %6933) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6934) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListIterator_B_init_nodeListNode", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1120(%6935 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6936 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6937 : !llvm.ptr):
    %6938 = "mini.wrap"(%6935) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListIterator">
    %6939 = "hi.cast"(%6938) {"from_typ" = !mini.fatptr<"ListIterator">, "to_typ" = !mini.fatptr<"ListIterator">, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %6940 = "mini.get_field"(%6939) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "ListNode"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListNode">
    %6941 = "mini.unwrap"(%6940) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6942 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %6943 = "mini.method_call"(%6942, %6941) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    %6944 = "hi.cast"(%6943) {"from_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "to_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    %6945 = "mini.checkflag"(%6944) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> !mini.ptr<i1>
    %6946 = "mini.unwrap"(%6945) : (!mini.ptr<i1>) -> i1
    %6947 = "hi.cast"(%6944) {"from_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "to_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    "mini.if"(%6946) ({
      %6948 = "hi.cast"(%6947) {"from_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "union_typ", "to_typ_name" = "ListNode"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> !mini.fatptr<"ListNode">
      %6949 = "hi.cast"(%6948) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      "mini.set_field"(%6939, %6949) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListIterator">, !mini.fatptr<"ListNode">) -> ()
      %6950 = "mini.get_field"(%6939) {"offset" = 0 : i64, "vtable_bytes" = 40 : i32, "original_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "assumed_type" = "ListNode"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListNode">
      %6951 = "hi.cast"(%6950) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "from_typ_name" = "ListNode", "to_typ_name" = "union_typ"} : (!mini.fatptr<"ListNode">) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
      "mini.return"(%6951) : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> ()
      %6952 = "hi.cast"(%6948) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "from_typ_name" = "ListNode", "to_typ_name" = "union_typ"} : (!mini.fatptr<"ListNode">) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
      "mini.assign"(%6947, %6952) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> ()
    }) : (i1) -> ()
    %6953 = "mini.alloc"() {"typ" = !llvm.array<0 x i8>} : () -> !llvm.ptr
    %6954 = "hi.cast"(%6953) {"from_typ" = !mini.nil, "to_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "from_typ_name" = "nil_typ", "to_typ_name" = "union_typ"} : (!llvm.ptr) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
    "mini.return"(%6954) : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> ()
  }) {"func_name" = "ListIterator_next_", "result_type" = !llvm.struct<(!llvm.ptr, i160)>, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1121(%6955 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %6956 : !llvm.ptr):
    %6957 = "mini.invariant"(%6956) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %6958 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1122] : () -> ()
  ^bb1122:
    %6959 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%6959, %6958) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1123] : () -> ()
  ^bb1123:
    %6960 = "llvm.extractvalue"(%6955) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %6961 = "llvm.load"(%6958) : (!llvm.ptr) -> i32
    %6962 = "llvm.getelementptr"(%6960, %6961) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<5 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %6963 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %6964 = "llvm.getelementptr"(%6962, %6963) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%6964) : (!llvm.ptr) -> ()
  }) {"func_name" = "ListIterator_B_next_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1124(%6965 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %6966 = "mini.wrap"(%6965) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Animal">
    %6967 = "hi.cast"(%6966) {"from_typ" = !mini.fatptr<"Animal">, "to_typ" = !mini.fatptr<"Animal">, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %6968 = "mini.unwrap"(%6967) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %6969 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%6969, %6968) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
  }) {"func_name" = "make_em_speak", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1125(%6970 : i32):
    %6971 = "mini.wrap"(%6970) : (i32) -> !mini.ptr<i32>
    %6972 = "hi.cast"(%6971) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %6973 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6974 = "mini.unwrap"(%6972) : (!mini.ptr<i32>) -> i32
    %6975 = "mini.unwrap"(%6973) : (!mini.ptr<i32>) -> i32
    %6976 = "mini.comparison"(%6974, %6975) {"op" = "LT"} : (i32, i32) -> i1
    %6977 = "mini.wrap"(%6976) : (i1) -> !mini.ptr<i32>
    %6978 = "mini.unwrap"(%6977) : (!mini.ptr<i32>) -> i1
    "mini.if"(%6978) ({
      %6979 = "hi.cast"(%6972) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.return"(%6979) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %6980 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6981 = "mini.unwrap"(%6972) : (!mini.ptr<i32>) -> i32
    %6982 = "mini.unwrap"(%6980) : (!mini.ptr<i32>) -> i32
    %6983 = "mini.arithmetic"(%6981, %6982) {"op" = "SUB"} : (i32, i32) -> i32
    %6984 = "mini.wrap"(%6983) : (i32) -> !mini.ptr<i32>
    %6985 = "mini.unwrap"(%6984) : (!mini.ptr<i32>) -> i32
    %6986 = "mini.call"(%6985) {"func_name" = "fibonacci", "ret_type" = i32} : (i32) -> !mini.ptr<i32>
    %6987 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %6988 = "mini.unwrap"(%6972) : (!mini.ptr<i32>) -> i32
    %6989 = "mini.unwrap"(%6987) : (!mini.ptr<i32>) -> i32
    %6990 = "mini.arithmetic"(%6988, %6989) {"op" = "SUB"} : (i32, i32) -> i32
    %6991 = "mini.wrap"(%6990) : (i32) -> !mini.ptr<i32>
    %6992 = "mini.unwrap"(%6991) : (!mini.ptr<i32>) -> i32
    %6993 = "mini.call"(%6992) {"func_name" = "fibonacci", "ret_type" = i32} : (i32) -> !mini.ptr<i32>
    %6994 = "mini.unwrap"(%6986) : (!mini.ptr<i32>) -> i32
    %6995 = "mini.unwrap"(%6993) : (!mini.ptr<i32>) -> i32
    %6996 = "mini.arithmetic"(%6994, %6995) {"op" = "ADD"} : (i32, i32) -> i32
    %6997 = "mini.wrap"(%6996) : (i32) -> !mini.ptr<i32>
    %6998 = "hi.cast"(%6997) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.return"(%6998) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "fibonacci", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1126(%6999 : i32):
    %7000 = "mini.wrap"(%6999) : (i32) -> !mini.ptr<i32>
    %7001 = "hi.cast"(%7000) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7002 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7003 = "mini.unwrap"(%7001) : (!mini.ptr<i32>) -> i32
    %7004 = "mini.unwrap"(%7002) : (!mini.ptr<i32>) -> i32
    %7005 = "mini.comparison"(%7003, %7004) {"op" = "LT"} : (i32, i32) -> i1
    %7006 = "mini.wrap"(%7005) : (i1) -> !mini.ptr<i32>
    %7007 = "mini.unwrap"(%7006) : (!mini.ptr<i32>) -> i1
    "mini.if"(%7007) ({
      %7008 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %7009 = "hi.cast"(%7008) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.return"(%7009) : (!mini.ptr<i32>) -> ()
    }) : (i1) -> ()
    %7010 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7011 = "mini.unwrap"(%7001) : (!mini.ptr<i32>) -> i32
    %7012 = "mini.unwrap"(%7010) : (!mini.ptr<i32>) -> i32
    %7013 = "mini.arithmetic"(%7011, %7012) {"op" = "SUB"} : (i32, i32) -> i32
    %7014 = "mini.wrap"(%7013) : (i32) -> !mini.ptr<i32>
    %7015 = "mini.unwrap"(%7014) : (!mini.ptr<i32>) -> i32
    %7016 = "mini.call"(%7015) {"func_name" = "factorial", "ret_type" = i32} : (i32) -> !mini.ptr<i32>
    %7017 = "mini.unwrap"(%7001) : (!mini.ptr<i32>) -> i32
    %7018 = "mini.unwrap"(%7016) : (!mini.ptr<i32>) -> i32
    %7019 = "mini.arithmetic"(%7017, %7018) {"op" = "MUL"} : (i32, i32) -> i32
    %7020 = "mini.wrap"(%7019) : (i32) -> !mini.ptr<i32>
    %7021 = "hi.cast"(%7020) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.return"(%7021) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "factorial", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.data_size_def"() {"meth_name" = "_data_size_Bard", "types" = []} : () -> ()
  "mini.func"() ({
  ^bb1127(%7022 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7023 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7024 : !llvm.ptr):
    %7025 = "mini.wrap"(%7022) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %7026 = "hi.cast"(%7025) {"from_typ" = !mini.fatptr<"Bard">, "to_typ" = !mini.fatptr<"Bard">, "from_typ_name" = "Bard", "to_typ_name" = "Bard"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
  }) {"func_name" = "Bard_init_", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1128(%7027 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7028 : !llvm.ptr):
    %7029 = "mini.invariant"(%7028) {"num_bytes" = 0 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7030 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1129] : () -> ()
  ^bb1129:
    %7031 = "llvm.mlir.constant"() <{"value" = 2 : i32}> : () -> i32
    "llvm.store"(%7031, %7030) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1130] : () -> ()
  ^bb1130:
    %7032 = "llvm.extractvalue"(%7027) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7033 = "llvm.load"(%7030) : (!llvm.ptr) -> i32
    %7034 = "llvm.getelementptr"(%7032, %7033) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7035 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7036 = "llvm.getelementptr"(%7034, %7035) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7036) : (!llvm.ptr) -> ()
  }) {"func_name" = "Bard_B_init_", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
  ^bb1131(%7037 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7038 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7039 : !llvm.ptr, %7040 : !llvm.struct<(!llvm.ptr, i160)>, %7041 : !llvm.struct<(!llvm.ptr, i160)>):
    %7042 = "mini.wrap"(%7037) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %7043 = "hi.cast"(%7042) {"from_typ" = !mini.fatptr<"Bard">, "to_typ" = !mini.fatptr<"Bard">, "from_typ_name" = "Bard", "to_typ_name" = "Bard"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %7044 = "mini.wrap"(%7040) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>
    %7045 = "hi.cast"(%7044) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %7046 = "mini.wrap"(%7041) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %7047 = "hi.cast"(%7046) {"from_typ" = !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %7048 = "hi.cast"(%7045) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7049 = "mini.unwrap"(%7048) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7050 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["f64"]} : () -> !llvm.ptr
    %7051 = "mini.parameterizations_array"(%7050) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7051, %7049) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7052 = "hi.cast"(%7047) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7053 = "mini.unwrap"(%7052) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7054 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["f64"]} : () -> !llvm.ptr
    %7055 = "mini.parameterizations_array"(%7054) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7055, %7053) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_af64_bf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1132(%7056 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7057 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7058 : !llvm.ptr, %7059 : !llvm.struct<(!llvm.ptr, i160)>, %7060 : !llvm.struct<(!llvm.ptr, i160)>):
    %7061 = "mini.wrap"(%7056) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %7062 = "hi.cast"(%7061) {"from_typ" = !mini.fatptr<"Bard">, "to_typ" = !mini.fatptr<"Bard">, "from_typ_name" = "Bard", "to_typ_name" = "Bard"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %7063 = "mini.wrap"(%7059) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>
    %7064 = "hi.cast"(%7063) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %7065 = "mini.wrap"(%7060) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %7066 = "hi.cast"(%7065) {"from_typ" = !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %7067 = "hi.cast"(%7064) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7068 = "mini.unwrap"(%7067) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7069 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7070 = "mini.parameterizations_array"(%7069) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7070, %7068) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7071 = "hi.cast"(%7066) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7072 = "mini.unwrap"(%7071) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7073 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7074 = "mini.parameterizations_array"(%7073) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7074, %7072) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_ai32_bi32", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1133(%7075 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7076 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7077 : !llvm.ptr, %7078 : !llvm.struct<(!llvm.ptr, i160)>, %7079 : !llvm.struct<(!llvm.ptr, i160)>):
    %7080 = "mini.wrap"(%7075) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %7081 = "hi.cast"(%7080) {"from_typ" = !mini.fatptr<"Bard">, "to_typ" = !mini.fatptr<"Bard">, "from_typ_name" = "Bard", "to_typ_name" = "Bard"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %7082 = "mini.wrap"(%7078) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>
    %7083 = "hi.cast"(%7082) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>, "to_typ" = !mini.fatptr<"Animal">, "from_typ_name" = "union_typ", "to_typ_name" = "Animal"} : (!mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.fatptr<"Animal">
    %7084 = "mini.wrap"(%7079) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %7085 = "hi.cast"(%7084) {"from_typ" = !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.fatptr<"Beaver">, "from_typ_name" = "union_typ", "to_typ_name" = "Beaver"} : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.fatptr<"Beaver">
    %7086 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7087 = "mini.create_buffer"(%7086) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7088 = "hi.cast"(%7087) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %7089 = "mini.refer"(%7088) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7090 = "mini.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "animal!"} : () -> !llvm.ptr
    %7091 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%7089, %7091, %7090) {"typ" = !llvm.array<7 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %7092 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7093 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7094 = "mini.unwrap"(%7089) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7095 = "mini.unwrap"(%7092) : (!mini.ptr<i32>) -> i32
    %7096 = "mini.unwrap"(%7093) : (!mini.ptr<i32>) -> i32
    %7097 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %7098 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7099 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7100 = "hi.cast"(%7089) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7101 = "mini.unwrap"(%7100) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7102 = "hi.cast"(%7098) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7103 = "mini.unwrap"(%7102) : (!mini.ptr<i32>) -> i32
    %7104 = "hi.cast"(%7099) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7105 = "mini.unwrap"(%7104) : (!mini.ptr<i32>) -> i32
    %7106 = "mini.unwrap"(%7097) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7107 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %7108 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7109 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7110 = "mini.parameterizations_array"(%7107, %7108, %7109) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7110, %7106, %7101, %7103, %7105) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %7111 = "hi.cast"(%7097) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!mini.fatptr<"String">) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7112 = "mini.unwrap"(%7111) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7113 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %7114 = "mini.parameterizations_array"(%7113) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7114, %7112) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7115 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7116 = "mini.create_buffer"(%7115) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7117 = "hi.cast"(%7116) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %7118 = "mini.refer"(%7117) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7119 = "mini.literal"() {"typ" = !llvm.array<7 x i8>, "value" = "beaver!"} : () -> !llvm.ptr
    %7120 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%7118, %7120, %7119) {"typ" = !llvm.array<7 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %7121 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7122 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7123 = "mini.unwrap"(%7118) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7124 = "mini.unwrap"(%7121) : (!mini.ptr<i32>) -> i32
    %7125 = "mini.unwrap"(%7122) : (!mini.ptr<i32>) -> i32
    %7126 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %7127 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7128 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7129 = "hi.cast"(%7118) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7130 = "mini.unwrap"(%7129) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7131 = "hi.cast"(%7127) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7132 = "mini.unwrap"(%7131) : (!mini.ptr<i32>) -> i32
    %7133 = "hi.cast"(%7128) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7134 = "mini.unwrap"(%7133) : (!mini.ptr<i32>) -> i32
    %7135 = "mini.unwrap"(%7126) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7136 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %7137 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7138 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7139 = "mini.parameterizations_array"(%7136, %7137, %7138) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7139, %7135, %7130, %7132, %7134) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %7140 = "hi.cast"(%7126) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!mini.fatptr<"String">) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7141 = "mini.unwrap"(%7140) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7142 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %7143 = "mini.parameterizations_array"(%7142) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7143, %7141) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_aAnimal_bBeaver", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1134(%7144 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7145 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7146 : !llvm.ptr, %7147 : !llvm.struct<(!llvm.ptr, i160)>, %7148 : !llvm.struct<(!llvm.ptr, i160)>):
    %7149 = "mini.wrap"(%7144) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Bard">
    %7150 = "hi.cast"(%7149) {"from_typ" = !mini.fatptr<"Bard">, "to_typ" = !mini.fatptr<"Bard">, "from_typ_name" = "Bard", "to_typ_name" = "Bard"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %7151 = "mini.wrap"(%7147) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>
    %7152 = "hi.cast"(%7151) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %7153 = "mini.wrap"(%7148) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %7154 = "hi.cast"(%7153) {"from_typ" = !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "union_typ", "to_typ_name" = "f64_typ"} : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<f64>
    %7155 = "hi.cast"(%7152) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7156 = "mini.unwrap"(%7155) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7157 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7158 = "mini.parameterizations_array"(%7157) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7158, %7156) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7159 = "hi.cast"(%7154) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7160 = "mini.unwrap"(%7159) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7161 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["f64"]} : () -> !llvm.ptr
    %7162 = "mini.parameterizations_array"(%7161) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7162, %7160) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "Bard_take_ai32_bf64", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1135(%7163 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, %7164 : !llvm.ptr):
    %7165 = "mini.invariant"(%7164) {"num_bytes" = 16 : i64} : (!llvm.ptr) -> !llvm.ptr
    %7166 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "cf.br"() [^bb1136] : () -> ()
  ^bb1137:
    %7167 = "llvm.mlir.constant"() <{"value" = 3 : i32}> : () -> i32
    "llvm.store"(%7167, %7166) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1138] : () -> ()
  ^bb1139:
    %7168 = "llvm.getelementptr"(%7164) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7169 = "mini.checkflag"(%7168) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7170 = "llvm.load"(%7169) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7170) [^bb1137, ^bb1137] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1140:
    %7171 = "llvm.mlir.constant"() <{"value" = 4 : i32}> : () -> i32
    "llvm.store"(%7171, %7166) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1138] : () -> ()
  ^bb1141:
    %7172 = "llvm.mlir.constant"() <{"value" = 6 : i32}> : () -> i32
    "llvm.store"(%7172, %7166) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1138] : () -> ()
  ^bb1142:
    %7173 = "llvm.getelementptr"(%7164) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7174 = "mini.checkflag"(%7173) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7175 = "llvm.load"(%7174) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7175) [^bb1140, ^bb1143] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1143:
    %7176 = "llvm.getelementptr"(%7164) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7177 = "mini.checkflag"(%7176) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7178 = "llvm.load"(%7177) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7178) [^bb1141, ^bb1141] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1144:
    %7179 = "llvm.mlir.constant"() <{"value" = 5 : i32}> : () -> i32
    "llvm.store"(%7179, %7166) <{"ordering" = 0 : i64}> : (i32, !llvm.ptr) -> ()
    "cf.br"() [^bb1138] : () -> ()
  ^bb1145:
    %7180 = "llvm.getelementptr"(%7164) <{"rawConstantIndices" = array<i32: 1>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7181 = "mini.checkflag"(%7180) {"typ_name" = "Beaver"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7182 = "llvm.load"(%7181) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7182) [^bb1144, ^bb1144] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1136:
    %7183 = "llvm.getelementptr"(%7164) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7184 = "mini.checkflag"(%7183) {"typ_name" = "f64_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7185 = "llvm.load"(%7184) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7185) [^bb1139, ^bb1146] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1146:
    %7186 = "llvm.getelementptr"(%7164) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7187 = "mini.checkflag"(%7186) {"typ_name" = "i32_typ"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7188 = "llvm.load"(%7187) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7188) [^bb1142, ^bb1147] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1147:
    %7189 = "llvm.getelementptr"(%7164) <{"rawConstantIndices" = array<i32: 0>, "elem_type" = !llvm.ptr}> : (!llvm.ptr) -> !llvm.ptr
    %7190 = "mini.checkflag"(%7189) {"typ_name" = "Animal"} : (!llvm.ptr) -> !mini.ptr<i1>
    %7191 = "llvm.load"(%7190) : (!mini.ptr<i1>) -> i1
    "cf.cond_br"(%7191) [^bb1145, ^bb1145] <{"operandSegmentSizes" = array<i32: 1, 0, 0>}> : (i1) -> ()
  ^bb1138:
    %7192 = "llvm.extractvalue"(%7163) <{"position" = array<i64: 0>}> : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !llvm.ptr
    %7193 = "llvm.load"(%7166) : (!llvm.ptr) -> i32
    %7194 = "llvm.getelementptr"(%7192, %7193) <{"rawConstantIndices" = array<i32: 0, -2147483648>, "elem_type" = !llvm.array<7 x !llvm.ptr>}> : (!llvm.ptr, i32) -> !llvm.ptr
    %7195 = "llvm.mlir.constant"() <{"value" = 10 : i32}> : () -> i32
    %7196 = "llvm.getelementptr"(%7194, %7195) <{"rawConstantIndices" = array<i32: -2147483648>, "elem_type" = !llvm.ptr}> : (!llvm.ptr, i32) -> !llvm.ptr
    "mini.return"(%7196) : (!llvm.ptr) -> ()
  }) {"func_name" = "Bard_B_take_af64_bf64_take_ai32_bi32_take_aAnimal_bBeaver_take_ai32_bf64", "result_type" = !llvm.ptr, "yield_type" = !mini.nil} : () -> ()
  "mini.func"() ({
    %7197 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>)>, "class_name" = "Exception", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Exception">
    %7198 = "mini.unwrap"(%7197) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7199 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%7199, %7198) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7200 = "mini.literal"() {"value" = 1031 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7201 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7202 = "mini.create_buffer"(%7201) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7203 = "hi.cast"(%7202) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %7204 = "mini.refer"(%7203) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7205 = "mini.literal"() {"typ" = !llvm.array<15 x i8>, "value" = "zrwcinittk.mini"} : () -> !llvm.ptr
    %7206 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%7204, %7206, %7205) {"typ" = !llvm.array<15 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %7207 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7208 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7209 = "mini.unwrap"(%7204) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7210 = "mini.unwrap"(%7207) : (!mini.ptr<i32>) -> i32
    %7211 = "mini.unwrap"(%7208) : (!mini.ptr<i32>) -> i32
    %7212 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %7213 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7214 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7215 = "hi.cast"(%7204) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7216 = "mini.unwrap"(%7215) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7217 = "hi.cast"(%7213) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7218 = "mini.unwrap"(%7217) : (!mini.ptr<i32>) -> i32
    %7219 = "hi.cast"(%7214) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7220 = "mini.unwrap"(%7219) : (!mini.ptr<i32>) -> i32
    %7221 = "mini.unwrap"(%7212) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7222 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %7223 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7224 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7225 = "mini.parameterizations_array"(%7222, %7223, %7224) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7225, %7221, %7216, %7218, %7220) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %7226 = "hi.cast"(%7200) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7227 = "mini.unwrap"(%7226) : (!mini.ptr<i32>) -> i32
    %7228 = "hi.cast"(%7212) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %7229 = "mini.unwrap"(%7228) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7230 = "mini.unwrap"(%7197) : (!mini.fatptr<"Exception">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7231 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7232 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %7233 = "mini.parameterizations_array"(%7231, %7232) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7233, %7230, %7227, %7229) {"offset" = 5 : i32, "vptrs" = ["i32_typ", #none], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7234 = "hi.cast"(%7197) {"from_typ" = !mini.fatptr<"Exception">, "to_typ" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, "from_typ_name" = "Exception", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Exception">) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %7235 = "mini.unwrap"(%7234) : (!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7236 = "mini.coro_yield"(%7235) : (!llvm.struct<(!llvm.ptr, i160)>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7237 = "mini.wrap"(%7236) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
  }) {"func_name" = "throw", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
    %7238 = "mini.literal"() {"value" = 88 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7239 = "hi.cast"(%7238) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7240 = "mini.unwrap"(%7239) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7241 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7242 = "mini.parameterizations_array"(%7241) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7242, %7240) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.coro_yield"() : () -> ()
    %7243 = "mini.literal"() {"value" = 90 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7244 = "hi.cast"(%7243) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7245 = "mini.unwrap"(%7244) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7246 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7247 = "mini.parameterizations_array"(%7246) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7247, %7245) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"func_name" = "print88", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_uypqufbuwa_passer", "arg_types" = [], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_uypqufbuwa_buffer_filler", "arg_types" = [], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.func"() ({
    %7248 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7249 = "mini.create_buffer"(%7248) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7250 = "hi.cast"(%7249) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %7251 = "mini.refer"(%7250) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7252 = "mini.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "one"} : () -> !llvm.ptr
    %7253 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%7251, %7253, %7252) {"typ" = !llvm.array<3 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %7254 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7255 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7256 = "mini.unwrap"(%7251) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7257 = "mini.unwrap"(%7254) : (!mini.ptr<i32>) -> i32
    %7258 = "mini.unwrap"(%7255) : (!mini.ptr<i32>) -> i32
    %7259 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %7260 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7261 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7262 = "hi.cast"(%7251) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7263 = "mini.unwrap"(%7262) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7264 = "hi.cast"(%7260) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7265 = "mini.unwrap"(%7264) : (!mini.ptr<i32>) -> i32
    %7266 = "hi.cast"(%7261) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7267 = "mini.unwrap"(%7266) : (!mini.ptr<i32>) -> i32
    %7268 = "mini.unwrap"(%7259) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7269 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %7270 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7271 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7272 = "mini.parameterizations_array"(%7269, %7270, %7271) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7272, %7268, %7263, %7265, %7267) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %7273 = "hi.cast"(%7259) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!mini.fatptr<"String">) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7274 = "mini.unwrap"(%7273) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7275 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %7276 = "mini.parameterizations_array"(%7275) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7276, %7274) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
    %7277 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7278 = "mini.create_buffer"(%7277) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7279 = "hi.cast"(%7278) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %7280 = "mini.refer"(%7279) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7281 = "mini.literal"() {"typ" = !llvm.array<3 x i8>, "value" = "two"} : () -> !llvm.ptr
    %7282 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%7280, %7282, %7281) {"typ" = !llvm.array<3 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %7283 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7284 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7285 = "mini.unwrap"(%7280) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7286 = "mini.unwrap"(%7283) : (!mini.ptr<i32>) -> i32
    %7287 = "mini.unwrap"(%7284) : (!mini.ptr<i32>) -> i32
    %7288 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %7289 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7290 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7291 = "hi.cast"(%7280) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7292 = "mini.unwrap"(%7291) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7293 = "hi.cast"(%7289) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7294 = "mini.unwrap"(%7293) : (!mini.ptr<i32>) -> i32
    %7295 = "hi.cast"(%7290) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7296 = "mini.unwrap"(%7295) : (!mini.ptr<i32>) -> i32
    %7297 = "mini.unwrap"(%7288) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7298 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %7299 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7300 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7301 = "mini.parameterizations_array"(%7298, %7299, %7300) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7301, %7297, %7292, %7294, %7296) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %7302 = "hi.cast"(%7288) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!mini.fatptr<"String">) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7303 = "mini.unwrap"(%7302) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7304 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %7305 = "mini.parameterizations_array"(%7304) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7305, %7303) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "grabo", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1148(%7306 : i32, %7307 : i32):
    %7308 = "mini.wrap"(%7306) : (i32) -> !mini.ptr<i32>
    %7309 = "mini.wrap"(%7307) : (i32) -> !mini.ptr<i32>
    %7310 = "mini.unwrap"(%7308) : (!mini.ptr<i32>) -> i32
    %7311 = "mini.unwrap"(%7309) : (!mini.ptr<i32>) -> i32
    %7312 = "mini.arithmetic"(%7310, %7311) {"op" = "ADD"} : (i32, i32) -> i32
    %7313 = "mini.wrap"(%7312) : (i32) -> !mini.ptr<i32>
    %7314 = "hi.cast"(%7313) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.return"(%7314) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_aawmpodyms", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1149(%7315 : i32):
    %7316 = "mini.wrap"(%7315) : (i32) -> !mini.ptr<i32>
    %7317 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7318 = "mini.unwrap"(%7316) : (!mini.ptr<i32>) -> i32
    %7319 = "mini.unwrap"(%7317) : (!mini.ptr<i32>) -> i32
    %7320 = "mini.arithmetic"(%7318, %7319) {"op" = "MUL"} : (i32, i32) -> i32
    %7321 = "mini.wrap"(%7320) : (i32) -> !mini.ptr<i32>
    %7322 = "hi.cast"(%7321) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.return"(%7322) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_kgivmcmbfd", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
    %7323 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7324 = "hi.cast"(%7323) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.return"(%7324) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_fqsttylcbv", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1150(%7325 : i32):
    %7326 = "mini.wrap"(%7325) : (i32) -> !mini.ptr<i32>
    %7327 = "hi.cast"(%7326) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7328 = "mini.unwrap"(%7327) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7329 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7330 = "mini.parameterizations_array"(%7329) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7330, %7328) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_huabycyhfr", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1151(%7331 : i32):
    %7332 = "mini.wrap"(%7331) : (i32) -> !mini.ptr<i32>
    %7333 = "mini.unwrap"(%7332) : (!mini.ptr<i32>) -> i32
    %7334 = "mini.unwrap"(%7332) : (!mini.ptr<i32>) -> i32
    %7335 = "mini.arithmetic"(%7333, %7334) {"op" = "MUL"} : (i32, i32) -> i32
    %7336 = "mini.wrap"(%7335) : (i32) -> !mini.ptr<i32>
    %7337 = "hi.cast"(%7336) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7338 = "mini.unwrap"(%7337) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7339 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7340 = "mini.parameterizations_array"(%7339) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7340, %7338) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_celgcexpvq", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1152(%7341 : i32):
    %7342 = "mini.wrap"(%7341) : (i32) -> !mini.ptr<i32>
    %7343 = "hi.cast"(%7342) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7344 = "hi.cast"(%7343) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i32_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i8>
    %7345 = "hi.cast"(%7344) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
    "mini.return"(%7345) : (!mini.ptr<i8>) -> ()
  }) {"func_name" = "i32toi8", "result_type" = i8, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1153(%7346 : i32, %7347 : i32):
    %7348 = "mini.wrap"(%7346) : (i32) -> !mini.ptr<i32>
    %7349 = "mini.wrap"(%7347) : (i32) -> !mini.ptr<i32>
    %7350 = "mini.unwrap"(%7348) : (!mini.ptr<i32>) -> i32
    %7351 = "mini.unwrap"(%7349) : (!mini.ptr<i32>) -> i32
    %7352 = "mini.arithmetic"(%7350, %7351) {"op" = "ADD"} : (i32, i32) -> i32
    %7353 = "mini.wrap"(%7352) : (i32) -> !mini.ptr<i32>
    %7354 = "hi.cast"(%7353) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.return"(%7354) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_enkjdvjeij", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1154(%7355 : i32, %7356 : i32):
    %7357 = "mini.wrap"(%7355) : (i32) -> !mini.ptr<i32>
    %7358 = "mini.wrap"(%7356) : (i32) -> !mini.ptr<i32>
    %7359 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7360 = "mini.addr_of"() {"global_name" = @_functionliteral_enkjdvjeij} : () -> !llvm.ptr
    %7361 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%7360, %7361) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    "mini.while"() ({
      %7362 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
      %7363 = "mini.unwrap"(%7362) : (!mini.ptr<i1>) -> i1
    }, {
      %7364 = "hi.cast"(%7357) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %7365 = "mini.unwrap"(%7364) : (!mini.ptr<i32>) -> i32
      %7366 = "hi.cast"(%7358) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %7367 = "mini.unwrap"(%7366) : (!mini.ptr<i32>) -> i32
      %7368 = "mini.unwrap"(%7361) : (!llvm.ptr) -> !llvm.ptr
      %7369 = "mini.fptr_call"(%7368, %7365, %7367) {"ret_type" = i32} : (!llvm.ptr, i32, i32) -> !mini.ptr<i32>
      %7370 = "mini.unwrap"(%7369) : (!mini.ptr<i32>) -> i32
      %7371 = "mini.unwrap"(%7359) : (!mini.ptr<i32>) -> i32
      %7372 = "mini.arithmetic"(%7370, %7371) {"op" = "ADD"} : (i32, i32) -> i32
      %7373 = "mini.wrap"(%7372) : (i32) -> !mini.ptr<i32>
      %7374 = "hi.cast"(%7373) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.nil, !mini.ptr<i32>]>
      %7375 = "mini.unwrap"(%7374) : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i32)>
      %7376 = "mini.coro_yield"(%7375) : (!llvm.struct<(!llvm.ptr, i32)>) -> !llvm.struct<(!llvm.ptr, i32)>
      %7377 = "mini.wrap"(%7376) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.ptr<i32>]>
      %7378 = "mini.checkflag"(%7377) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.ptr<i1>
      %7379 = "mini.unwrap"(%7378) : (!mini.ptr<i1>) -> i1
      %7380 = "hi.cast"(%7377) {"from_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "to_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.union<[!mini.nil, !mini.ptr<i32>]>
      "mini.if"(%7379) ({
        %7381 = "hi.cast"(%7380) {"from_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.ptr<i32>
        %7382 = "mini.unwrap"(%7359) : (!mini.ptr<i32>) -> i32
        %7383 = "mini.unwrap"(%7381) : (!mini.ptr<i32>) -> i32
        %7384 = "mini.arithmetic"(%7382, %7383) {"op" = "ADD"} : (i32, i32) -> i32
        %7385 = "mini.wrap"(%7384) : (i32) -> !mini.ptr<i32>
        %7386 = "hi.cast"(%7385) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
        "mini.assign"(%7359, %7386) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
        %7387 = "hi.cast"(%7381) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.nil, !mini.ptr<i32>]>
        "mini.assign"(%7380, %7387) {"typ" = !llvm.struct<(!llvm.ptr, i32)>} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>, !mini.union<[!mini.nil, !mini.ptr<i32>]>) -> ()
      }) : (i1) -> ()
    }) : () -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_zckdguiuxy", "result_type" = !llvm.void, "yield_type" = !mini.ptr<i32>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_fvfimafigw_passer", "arg_types" = [i32, i32], "yield_type" = !llvm.struct<(!llvm.ptr, i32)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_fvfimafigw_buffer_filler", "arg_types" = [i32, i32], "yield_type" = !llvm.struct<(!llvm.ptr, i32)>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_luopxlwzzk_passer", "arg_types" = [], "ret_type" = i32, "ret_flag" = "i32_typ", "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_luopxlwzzk_buffer_filler", "arg_types" = [], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.arg_passer"() {"func_name" = "coroutine_rvyftlgybn_passer", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.buffer_filler"() {"func_name" = "coroutine_rvyftlgybn_buffer_filler", "arg_types" = [!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>], "yield_type" = !llvm.struct<(!llvm.ptr, i160)>} : () -> ()
  "mini.func"() ({
  ^bb1155(%7388 : !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>):
    %7389 = "mini.wrap"(%7388) : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Channel", [!mini.ptr<i32>]>
    %7390 = "mini.literal"() {"value" = 88 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7391 = "hi.cast"(%7390) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.type_param<"T", !mini.any, "Channel">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!mini.ptr<i32>) -> !mini.type_param<"T", !mini.any, "Channel">
    %7392 = "mini.unwrap"(%7391) : (!mini.type_param<"T", !mini.any, "Channel">) -> !llvm.struct<(!llvm.ptr, i160)>
    %7393 = "mini.unwrap"(%7389) : (!mini.fatptr<"Channel", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7394 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7395 = "mini.parameterizations_array"(%7394) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7395, %7393, %7392) {"offset" = 4 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.return"() : () -> ()
  }) {"func_name" = "_functionliteral_jfuijcegou", "result_type" = !llvm.void, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1156(%7396 : i32):
    %7397 = "mini.wrap"(%7396) : (i32) -> !mini.ptr<i32>
    %7398 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7399 = "mini.unwrap"(%7397) : (!mini.ptr<i32>) -> i32
    %7400 = "mini.unwrap"(%7398) : (!mini.ptr<i32>) -> i32
    %7401 = "mini.arithmetic"(%7399, %7400) {"op" = "MOD"} : (i32, i32) -> i32
    %7402 = "mini.wrap"(%7401) : (i32) -> !mini.ptr<i32>
    %7403 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7404 = "mini.unwrap"(%7402) : (!mini.ptr<i32>) -> i32
    %7405 = "mini.unwrap"(%7403) : (!mini.ptr<i32>) -> i32
    %7406 = "mini.comparison"(%7404, %7405) {"op" = "EQ"} : (i32, i32) -> i1
    %7407 = "mini.wrap"(%7406) : (i1) -> !mini.ptr<i32>
    %7408 = "hi.cast"(%7407) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.ptr<i1>, "from_typ_name" = "bool_typ", "to_typ_name" = "bool_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i1>
    "mini.return"(%7408) : (!mini.ptr<i1>) -> ()
  }) {"func_name" = "_functionliteral_iravxoewyu", "result_type" = i1, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.func"() ({
  ^bb1157(%7409 : i32):
    %7410 = "mini.wrap"(%7409) : (i32) -> !mini.ptr<i32>
    %7411 = "mini.unwrap"(%7410) : (!mini.ptr<i32>) -> i32
    %7412 = "mini.unwrap"(%7410) : (!mini.ptr<i32>) -> i32
    %7413 = "mini.arithmetic"(%7411, %7412) {"op" = "MUL"} : (i32, i32) -> i32
    %7414 = "mini.wrap"(%7413) : (i32) -> !mini.ptr<i32>
    %7415 = "hi.cast"(%7414) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.return"(%7415) : (!mini.ptr<i32>) -> ()
  }) {"func_name" = "_functionliteral_mutpkxirlo", "result_type" = i32, "yield_type" = !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>} : () -> ()
  "mini.main"() ({
    "cf.br"() [^bb1158] : () -> ()
  ^bb1158:
    "cf.br"() [^bb1159] : () -> ()
  ^bb1159:
    "cf.br"() [^bb1160] : () -> ()
  ^bb1160:
    "cf.br"() [^bb1161] : () -> ()
  ^bb1161:
    "cf.br"() [^bb1162] : () -> ()
  ^bb1162:
    "cf.br"() [^bb1163] : () -> ()
  ^bb1163:
    "cf.br"() [^bb1164] : () -> ()
  ^bb1164:
    "cf.br"() [^bb1165] : () -> ()
  ^bb1165:
    "cf.br"() [^bb1166] : () -> ()
  ^bb1166:
    "cf.br"() [^bb1167] : () -> ()
  ^bb1167:
    "cf.br"() [^bb1168] : () -> ()
  ^bb1168:
    "cf.br"() [^bb1169] : () -> ()
  ^bb1169:
    "cf.br"() [^bb1170] : () -> ()
  ^bb1170:
    "cf.br"() [^bb1171] : () -> ()
  ^bb1171:
    "cf.br"() [^bb1172] : () -> ()
  ^bb1172:
    "cf.br"() [^bb1173] : () -> ()
  ^bb1173:
    "cf.br"() [^bb1174] : () -> ()
  ^bb1174:
    "cf.br"() [^bb1175] : () -> ()
  ^bb1175:
    "cf.br"() [^bb1176] : () -> ()
  ^bb1176:
    "cf.br"() [^bb1177] : () -> ()
  ^bb1177:
    "cf.br"() [^bb1178] : () -> ()
  ^bb1178:
    "cf.br"() [^bb1179] : () -> ()
  ^bb1179:
    "cf.br"() [^bb1180] : () -> ()
  ^bb1180:
    "cf.br"() [^bb1181] : () -> ()
  ^bb1181:
    "cf.br"() [^bb1182] : () -> ()
  ^bb1182:
    "cf.br"() [^bb1183] : () -> ()
  ^bb1183:
    "cf.br"() [^bb1184] : () -> ()
  ^bb1184:
    "cf.br"() [^bb1185] : () -> ()
  ^bb1185:
    "cf.br"() [^bb1186] : () -> ()
  ^bb1186:
    "cf.br"() [^bb1187] : () -> ()
  ^bb1187:
    "cf.br"() [^bb1188] : () -> ()
  ^bb1188:
    "cf.br"() [^bb1189] : () -> ()
  ^bb1189:
    "cf.br"() [^bb1190] : () -> ()
  ^bb1190:
    "cf.br"() [^bb1191] : () -> ()
  ^bb1191:
    "cf.br"() [^bb1192] : () -> ()
  ^bb1192:
    "cf.br"() [^bb1193] : () -> ()
  ^bb1193:
    "cf.br"() [^bb1194] : () -> ()
  ^bb1194:
    "cf.br"() [^bb1195] : () -> ()
  ^bb1195:
    "cf.br"() [^bb1196] : () -> ()
  ^bb1196:
    "cf.br"() [^bb1197] : () -> ()
  ^bb1197:
    "cf.br"() [^bb1198] : () -> ()
  ^bb1198:
    "cf.br"() [^bb1199] : () -> ()
  ^bb1199:
    "cf.br"() [^bb1200] : () -> ()
  ^bb1200:
    "cf.br"() [^bb1201] : () -> ()
  ^bb1201:
    "cf.br"() [^bb1202] : () -> ()
  ^bb1202:
    "cf.br"() [^bb1203] : () -> ()
  ^bb1203:
    "cf.br"() [^bb1204] : () -> ()
  ^bb1204:
    "cf.br"() [^bb1205] : () -> ()
  ^bb1205:
    "cf.br"() [^bb1206] : () -> ()
  ^bb1206:
    "cf.br"() [^bb1207] : () -> ()
  ^bb1207:
    "cf.br"() [^bb1208] : () -> ()
  ^bb1208:
    "cf.br"() [^bb1209] : () -> ()
  ^bb1209:
    "cf.br"() [^bb1210] : () -> ()
  ^bb1210:
    "cf.br"() [^bb1211] : () -> ()
  ^bb1211:
    "cf.br"() [^bb1212] : () -> ()
  ^bb1212:
    "cf.br"() [^bb1213] : () -> ()
  ^bb1213:
    "cf.br"() [^bb1214] : () -> ()
  ^bb1214:
    "cf.br"() [^bb1215] : () -> ()
  ^bb1215:
    "cf.br"() [^bb1216] : () -> ()
  ^bb1216:
    "cf.br"() [^bb1217] : () -> ()
  ^bb1217:
    "cf.br"() [^bb1218] : () -> ()
  ^bb1218:
    "cf.br"() [^bb1219] : () -> ()
  ^bb1219:
    "cf.br"() [^bb1220] : () -> ()
  ^bb1220:
    "cf.br"() [^bb1221] : () -> ()
  ^bb1221:
    "cf.br"() [^bb1222] : () -> ()
  ^bb1222:
    "cf.br"() [^bb1223] : () -> ()
  ^bb1223:
    "cf.br"() [^bb1224] : () -> ()
  ^bb1224:
    "cf.br"() [^bb1225] : () -> ()
  ^bb1225:
    "cf.br"() [^bb1226] : () -> ()
  ^bb1226:
    "cf.br"() [^bb1227] : () -> ()
  ^bb1227:
    "cf.br"() [^bb1228] : () -> ()
  ^bb1228:
    "cf.br"() [^bb1229] : () -> ()
  ^bb1229:
    "cf.br"() [^bb1230] : () -> ()
  ^bb1230:
    "cf.br"() [^bb1231] : () -> ()
  ^bb1231:
    "cf.br"() [^bb1232] : () -> ()
  ^bb1232:
    "cf.br"() [^bb1233] : () -> ()
  ^bb1233:
    "cf.br"() [^bb1234] : () -> ()
  ^bb1234:
    "cf.br"() [^bb1235] : () -> ()
  ^bb1235:
    "cf.br"() [^bb1236] : () -> ()
  ^bb1236:
    "cf.br"() [^bb1237] : () -> ()
  ^bb1237:
    "cf.br"() [^bb1238] : () -> ()
  ^bb1238:
    "cf.br"() [^bb1239] : () -> ()
  ^bb1239:
    "cf.br"() [^bb1240] : () -> ()
  ^bb1240:
    "cf.br"() [^bb1241] : () -> ()
  ^bb1241:
    "cf.br"() [^bb1242] : () -> ()
  ^bb1242:
    "cf.br"() [^bb1243] : () -> ()
  ^bb1243:
    "cf.br"() [^bb1244] : () -> ()
  ^bb1244:
    "cf.br"() [^bb1245] : () -> ()
  ^bb1245:
    "cf.br"() [^bb1246] : () -> ()
  ^bb1246:
    "cf.br"() [^bb1247] : () -> ()
  ^bb1247:
    "cf.br"() [^bb1248] : () -> ()
  ^bb1248:
    "cf.br"() [^bb1249] : () -> ()
  ^bb1249:
    "cf.br"() [^bb1250] : () -> ()
  ^bb1250:
    "cf.br"() [^bb1251] : () -> ()
  ^bb1251:
    "cf.br"() [^bb1252] : () -> ()
  ^bb1252:
    "cf.br"() [^bb1253] : () -> ()
  ^bb1253:
    "cf.br"() [^bb1254] : () -> ()
  ^bb1254:
    "cf.br"() [^bb1255] : () -> ()
  ^bb1255:
    "cf.br"() [^bb1256] : () -> ()
  ^bb1256:
    "cf.br"() [^bb1257] : () -> ()
  ^bb1257:
    "cf.br"() [^bb1258] : () -> ()
  ^bb1258:
    "cf.br"() [^bb1259] : () -> ()
  ^bb1259:
    "cf.br"() [^bb1260] : () -> ()
  ^bb1260:
    "cf.br"() [^bb1261] : () -> ()
  ^bb1261:
    "cf.br"() [^bb1262] : () -> ()
  ^bb1262:
    "cf.br"() [^bb1263] : () -> ()
  ^bb1263:
    "cf.br"() [^bb1264] : () -> ()
  ^bb1264:
    "cf.br"() [^bb1265] : () -> ()
  ^bb1265:
    "cf.br"() [^bb1266] : () -> ()
  ^bb1266:
    "cf.br"() [^bb1267] : () -> ()
  ^bb1267:
    "cf.br"() [^bb1268] : () -> ()
  ^bb1268:
    "cf.br"() [^bb1269] : () -> ()
  ^bb1269:
    "cf.br"() [^bb1270] : () -> ()
  ^bb1270:
    "cf.br"() [^bb1271] : () -> ()
  ^bb1271:
    "cf.br"() [^bb1272] : () -> ()
  ^bb1272:
    "cf.br"() [^bb1273] : () -> ()
  ^bb1273:
    "cf.br"() [^bb1274] : () -> ()
  ^bb1274:
    "cf.br"() [^bb1275] : () -> ()
  ^bb1275:
    "cf.br"() [^bb1276] : () -> ()
  ^bb1276:
    "cf.br"() [^bb1277] : () -> ()
  ^bb1277:
    "cf.br"() [^bb1278] : () -> ()
  ^bb1278:
    "cf.br"() [^bb1279] : () -> ()
  ^bb1279:
    "cf.br"() [^bb1280] : () -> ()
  ^bb1280:
    "cf.br"() [^bb1281] : () -> ()
  ^bb1281:
    "cf.br"() [^bb1282] : () -> ()
  ^bb1282:
    "cf.br"() [^bb1283] : () -> ()
  ^bb1283:
    "cf.br"() [^bb1284] : () -> ()
  ^bb1284:
    "cf.br"() [^bb1285] : () -> ()
  ^bb1285:
    "cf.br"() [^bb1286] : () -> ()
  ^bb1286:
    "cf.br"() [^bb1287] : () -> ()
  ^bb1287:
    "cf.br"() [^bb1288] : () -> ()
  ^bb1288:
    "cf.br"() [^bb1289] : () -> ()
  ^bb1289:
    "cf.br"() [^bb1290] : () -> ()
  ^bb1290:
    "cf.br"() [^bb1291] : () -> ()
  ^bb1291:
    "cf.br"() [^bb1292] : () -> ()
  ^bb1292:
    "cf.br"() [^bb1293] : () -> ()
  ^bb1293:
    "cf.br"() [^bb1294] : () -> ()
  ^bb1294:
    "cf.br"() [^bb1295] : () -> ()
  ^bb1295:
    "cf.br"() [^bb1296] : () -> ()
  ^bb1296:
    "cf.br"() [^bb1297] : () -> ()
  ^bb1297:
    "cf.br"() [^bb1298] : () -> ()
  ^bb1298:
    "cf.br"() [^bb1299] : () -> ()
  ^bb1299:
    "cf.br"() [^bb1300] : () -> ()
  ^bb1300:
    "cf.br"() [^bb1301] : () -> ()
  ^bb1301:
    "cf.br"() [^bb1302] : () -> ()
  ^bb1302:
    "cf.br"() [^bb1303] : () -> ()
  ^bb1303:
    "cf.br"() [^bb1304] : () -> ()
  ^bb1304:
    "cf.br"() [^bb1305] : () -> ()
  ^bb1305:
    "cf.br"() [^bb1306] : () -> ()
  ^bb1306:
    "cf.br"() [^bb1307] : () -> ()
  ^bb1307:
    "cf.br"() [^bb1308] : () -> ()
  ^bb1308:
    "cf.br"() [^bb1309] : () -> ()
  ^bb1309:
    "cf.br"() [^bb1310] : () -> ()
  ^bb1310:
    "cf.br"() [^bb1311] : () -> ()
  ^bb1311:
    "cf.br"() [^bb1312] : () -> ()
  ^bb1312:
    "cf.br"() [^bb1313] : () -> ()
  ^bb1313:
    "cf.br"() [^bb1314] : () -> ()
  ^bb1314:
    "cf.br"() [^bb1315] : () -> ()
  ^bb1315:
    "cf.br"() [^bb1316] : () -> ()
  ^bb1316:
    "cf.br"() [^bb1317] : () -> ()
  ^bb1317:
    "cf.br"() [^bb1318] : () -> ()
  ^bb1318:
    "cf.br"() [^bb1319] : () -> ()
  ^bb1319:
    "cf.br"() [^bb1320] : () -> ()
  ^bb1320:
    "cf.br"() [^bb1321] : () -> ()
  ^bb1321:
    "cf.br"() [^bb1322] : () -> ()
  ^bb1322:
    "cf.br"() [^bb1323] : () -> ()
  ^bb1323:
    "cf.br"() [^bb1324] : () -> ()
  ^bb1324:
    "cf.br"() [^bb1325] : () -> ()
  ^bb1325:
    "cf.br"() [^bb1326] : () -> ()
  ^bb1326:
    "cf.br"() [^bb1327] : () -> ()
  ^bb1327:
    "cf.br"() [^bb1328] : () -> ()
  ^bb1328:
    "cf.br"() [^bb1329] : () -> ()
  ^bb1329:
    "cf.br"() [^bb1330] : () -> ()
  ^bb1330:
    "cf.br"() [^bb1331] : () -> ()
  ^bb1331:
    "cf.br"() [^bb1332] : () -> ()
  ^bb1332:
    "cf.br"() [^bb1333] : () -> ()
  ^bb1333:
    "cf.br"() [^bb1334] : () -> ()
  ^bb1334:
    "cf.br"() [^bb1335] : () -> ()
  ^bb1335:
    "cf.br"() [^bb1336] : () -> ()
  ^bb1336:
    "cf.br"() [^bb1337] : () -> ()
  ^bb1337:
    "cf.br"() [^bb1338] : () -> ()
  ^bb1338:
    "cf.br"() [^bb1339] : () -> ()
  ^bb1339:
    "cf.br"() [^bb1340] : () -> ()
  ^bb1340:
    "cf.br"() [^bb1341] : () -> ()
  ^bb1341:
    "cf.br"() [^bb1342] : () -> ()
  ^bb1342:
    "cf.br"() [^bb1343] : () -> ()
  ^bb1343:
    "cf.br"() [^bb1344] : () -> ()
  ^bb1344:
    "cf.br"() [^bb1345] : () -> ()
  ^bb1345:
    "cf.br"() [^bb1346] : () -> ()
  ^bb1346:
    "cf.br"() [^bb1347] : () -> ()
  ^bb1347:
    "cf.br"() [^bb1348] : () -> ()
  ^bb1348:
    "cf.br"() [^bb1349] : () -> ()
  ^bb1349:
    "cf.br"() [^bb1350] : () -> ()
  ^bb1350:
    "cf.br"() [^bb1351] : () -> ()
  ^bb1351:
    "cf.br"() [^bb1352] : () -> ()
  ^bb1352:
    "cf.br"() [^bb1353] : () -> ()
  ^bb1353:
    "cf.br"() [^bb1354] : () -> ()
  ^bb1354:
    "cf.br"() [^bb1355] : () -> ()
  ^bb1355:
    "cf.br"() [^bb1356] : () -> ()
  ^bb1356:
    "cf.br"() [^bb1357] : () -> ()
  ^bb1357:
    "cf.br"() [^bb1358] : () -> ()
  ^bb1358:
    "cf.br"() [^bb1359] : () -> ()
  ^bb1359:
    "cf.br"() [^bb1360] : () -> ()
  ^bb1360:
    "cf.br"() [^bb1361] : () -> ()
  ^bb1361:
    "cf.br"() [^bb1362] : () -> ()
  ^bb1362:
    "cf.br"() [^bb1363] : () -> ()
  ^bb1363:
    "cf.br"() [^bb1364] : () -> ()
  ^bb1364:
    "cf.br"() [^bb1365] : () -> ()
  ^bb1365:
    "cf.br"() [^bb1366] : () -> ()
  ^bb1366:
    "cf.br"() [^bb1367] : () -> ()
  ^bb1367:
    "cf.br"() [^bb1368] : () -> ()
  ^bb1368:
    "cf.br"() [^bb1369] : () -> ()
  ^bb1369:
    "cf.br"() [^bb1370] : () -> ()
  ^bb1370:
    "cf.br"() [^bb1371] : () -> ()
  ^bb1371:
    "cf.br"() [^bb1372] : () -> ()
  ^bb1372:
    "cf.br"() [^bb1373] : () -> ()
  ^bb1373:
    "cf.br"() [^bb1374] : () -> ()
  ^bb1374:
    "cf.br"() [^bb1375] : () -> ()
  ^bb1375:
    "cf.br"() [^bb1376] : () -> ()
  ^bb1376:
    "cf.br"() [^bb1377] : () -> ()
  ^bb1377:
    "cf.br"() [^bb1378] : () -> ()
  ^bb1378:
    "cf.br"() [^bb1379] : () -> ()
  ^bb1379:
    "cf.br"() [^bb1380] : () -> ()
  ^bb1380:
    "cf.br"() [^bb1381] : () -> ()
  ^bb1381:
    "cf.br"() [^bb1382] : () -> ()
  ^bb1382:
    "cf.br"() [^bb1383] : () -> ()
  ^bb1383:
    "cf.br"() [^bb1384] : () -> ()
  ^bb1384:
    "cf.br"() [^bb1385] : () -> ()
  ^bb1385:
    "cf.br"() [^bb1386] : () -> ()
  ^bb1386:
    "cf.br"() [^bb1387] : () -> ()
  ^bb1387:
    "cf.br"() [^bb1388] : () -> ()
  ^bb1388:
    "cf.br"() [^bb1389] : () -> ()
  ^bb1389:
    "cf.br"() [^bb1390] : () -> ()
  ^bb1390:
    "cf.br"() [^bb1391] : () -> ()
  ^bb1391:
    "cf.br"() [^bb1392] : () -> ()
  ^bb1392:
    "cf.br"() [^bb1393] : () -> ()
  ^bb1393:
    "cf.br"() [^bb1394] : () -> ()
  ^bb1394:
    "cf.br"() [^bb1395] : () -> ()
  ^bb1395:
    "cf.br"() [^bb1396] : () -> ()
  ^bb1396:
    "cf.br"() [^bb1397] : () -> ()
  ^bb1397:
    "cf.br"() [^bb1398] : () -> ()
  ^bb1398:
    "cf.br"() [^bb1399] : () -> ()
  ^bb1399:
    "cf.br"() [^bb1400] : () -> ()
  ^bb1400:
    "cf.br"() [^bb1401] : () -> ()
  ^bb1401:
    "cf.br"() [^bb1402] : () -> ()
  ^bb1402:
    %7416 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7417 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7418 = "mini.unwrap"(%7416) : (!mini.ptr<i32>) -> i32
    %7419 = "mini.unwrap"(%7417) : (!mini.ptr<i32>) -> i32
    %7420 = "mini.arithmetic"(%7418, %7419) {"op" = "ADD"} : (i32, i32) -> i32
    %7421 = "mini.wrap"(%7420) : (i32) -> !mini.ptr<i32>
    %7422 = "hi.cast"(%7421) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7423 = "mini.unwrap"(%7422) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7424 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7425 = "mini.parameterizations_array"(%7424) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7425, %7423) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7426 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7427 = "mini.create_buffer"(%7426) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7428 = "hi.cast"(%7427) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %7429 = "mini.refer"(%7428) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7430 = "mini.literal"() {"typ" = !llvm.array<13 x i8>, "value" = "Hello, World!"} : () -> !llvm.ptr
    %7431 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%7429, %7431, %7430) {"typ" = !llvm.array<13 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %7432 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7433 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7434 = "mini.unwrap"(%7429) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7435 = "mini.unwrap"(%7432) : (!mini.ptr<i32>) -> i32
    %7436 = "mini.unwrap"(%7433) : (!mini.ptr<i32>) -> i32
    %7437 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %7438 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7439 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7440 = "hi.cast"(%7429) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7441 = "mini.unwrap"(%7440) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7442 = "hi.cast"(%7438) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7443 = "mini.unwrap"(%7442) : (!mini.ptr<i32>) -> i32
    %7444 = "hi.cast"(%7439) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7445 = "mini.unwrap"(%7444) : (!mini.ptr<i32>) -> i32
    %7446 = "mini.unwrap"(%7437) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7447 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %7448 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7449 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7450 = "mini.parameterizations_array"(%7447, %7448, %7449) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7450, %7446, %7441, %7443, %7445) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %7451 = "hi.cast"(%7437) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!mini.fatptr<"String">) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7452 = "mini.unwrap"(%7451) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7453 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %7454 = "mini.parameterizations_array"(%7453) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7454, %7452) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7455 = "mini.literal"() {"value" = true, "typ" = i1} : () -> !mini.ptr<i1>
    %7456 = "mini.unwrap"(%7455) : (!mini.ptr<i1>) -> i1
    %7457 = "mini.logical"(%7456) ({
      %7458 = "mini.literal"() {"value" = false, "typ" = i1} : () -> !mini.ptr<i1>
      func.return %7458 : !mini.ptr<i1>
    }) {"op" = "and"} : (i1) -> i1
    %7459 = "mini.wrap"(%7457) : (i1) -> !mini.ptr<i1>
    %7460 = "hi.cast"(%7459) {"from_typ" = !mini.ptr<i1>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "bool_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i1>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7461 = "mini.unwrap"(%7460) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7462 = "mini.parameterization"() {"id_hierarchy" = ["bool_typ"], "name_hierarchy" = ["i1"]} : () -> !llvm.ptr
    %7463 = "mini.parameterizations_array"(%7462) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7463, %7461) {"offset" = 0 : i32, "vptrs" = ["bool_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "cf.br"() [^bb1403] : () -> ()
  ^bb1403:
    "cf.br"() [^bb1404] : () -> ()
  ^bb1404:
    "cf.br"() [^bb1405] : () -> ()
  ^bb1405:
    "cf.br"() [^bb1406] : () -> ()
  ^bb1406:
    "cf.br"() [^bb1407] : () -> ()
  ^bb1407:
    "cf.br"() [^bb1408] : () -> ()
  ^bb1408:
    "cf.br"() [^bb1409] : () -> ()
  ^bb1409:
    "cf.br"() [^bb1410] : () -> ()
  ^bb1410:
    "cf.br"() [^bb1411] : () -> ()
  ^bb1411:
    "cf.br"() [^bb1412] : () -> ()
  ^bb1412:
    "cf.br"() [^bb1413] : () -> ()
  ^bb1413:
    "cf.br"() [^bb1414] : () -> ()
  ^bb1414:
    "cf.br"() [^bb1415] : () -> ()
  ^bb1415:
    "cf.br"() [^bb1416] : () -> ()
  ^bb1416:
    "cf.br"() [^bb1417] : () -> ()
  ^bb1417:
    "cf.br"() [^bb1418] : () -> ()
  ^bb1418:
    "cf.br"() [^bb1419] : () -> ()
  ^bb1419:
    "cf.br"() [^bb1420] : () -> ()
  ^bb1420:
    "cf.br"() [^bb1421] : () -> ()
  ^bb1421:
    "cf.br"() [^bb1422] : () -> ()
  ^bb1422:
    "cf.br"() [^bb1423] : () -> ()
  ^bb1423:
    "cf.br"() [^bb1424] : () -> ()
  ^bb1424:
    "cf.br"() [^bb1425] : () -> ()
  ^bb1425:
    "cf.br"() [^bb1426] : () -> ()
  ^bb1426:
    "cf.br"() [^bb1427] : () -> ()
  ^bb1427:
    "cf.br"() [^bb1428] : () -> ()
  ^bb1428:
    "cf.br"() [^bb1429] : () -> ()
  ^bb1429:
    "cf.br"() [^bb1430] : () -> ()
  ^bb1430:
    "cf.br"() [^bb1431] : () -> ()
  ^bb1431:
    "cf.br"() [^bb1432] : () -> ()
  ^bb1432:
    "cf.br"() [^bb1433] : () -> ()
  ^bb1433:
    "cf.br"() [^bb1434] : () -> ()
  ^bb1434:
    "cf.br"() [^bb1435] : () -> ()
  ^bb1435:
    "cf.br"() [^bb1436] : () -> ()
  ^bb1436:
    "cf.br"() [^bb1437] : () -> ()
  ^bb1437:
    "cf.br"() [^bb1438] : () -> ()
  ^bb1438:
    "cf.br"() [^bb1439] : () -> ()
  ^bb1439:
    "cf.br"() [^bb1440] : () -> ()
  ^bb1440:
    "cf.br"() [^bb1441] : () -> ()
  ^bb1441:
    "cf.br"() [^bb1442] : () -> ()
  ^bb1442:
    "cf.br"() [^bb1443] : () -> ()
  ^bb1443:
    "cf.br"() [^bb1444] : () -> ()
  ^bb1444:
    %7464 = "mini.new"() {"typ" = !llvm.struct<()>, "class_name" = "Bard", "num_data_fields" = 0 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Bard">
    %7465 = "mini.unwrap"(%7464) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7466 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%7466, %7465) {"offset" = 0 : i32, "vptrs" = [], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7467 = "hi.cast"(%7464) {"from_typ" = !mini.fatptr<"Bard">, "to_typ" = !mini.fatptr<"Bard">, "from_typ_name" = "Bard", "to_typ_name" = "Bard"} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %7468 = "mini.refer"(%7467) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Bard">) -> !mini.fatptr<"Bard">
    %7469 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7470 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7471 = "hi.cast"(%7469) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>
    %7472 = "mini.unwrap"(%7471) : (!mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7473 = "hi.cast"(%7470) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %7474 = "mini.unwrap"(%7473) : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7475 = "mini.unwrap"(%7468) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7476 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7477 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7478 = "mini.parameterizations_array"(%7476, %7477) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7478, %7475, %7472, %7474) {"offset" = 1 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7479 = "mini.literal"() {"value" = 7.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %7480 = "hi.cast"(%7479) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7481 = "mini.literal"() {"value" = 1.400000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %7482 = "hi.cast"(%7480) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>
    %7483 = "mini.unwrap"(%7482) : (!mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7484 = "hi.cast"(%7481) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %7485 = "mini.unwrap"(%7484) : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7486 = "mini.unwrap"(%7468) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7487 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["f64_typ"], ["i32_typ"]], "name_hierarchy" = ["f64_or_i32", ["f64"], ["i32"]]} : () -> !llvm.ptr
    %7488 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["f64"]} : () -> !llvm.ptr
    %7489 = "mini.parameterizations_array"(%7487, %7488) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7489, %7486, %7483, %7485) {"offset" = 1 : i32, "vptrs" = ["union_typ", "f64_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7490 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7491 = "mini.create_buffer"(%7490) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7492 = "hi.cast"(%7491) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %7493 = "mini.refer"(%7492) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7494 = "mini.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "start"} : () -> !llvm.ptr
    %7495 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%7493, %7495, %7494) {"typ" = !llvm.array<5 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %7496 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7497 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7498 = "mini.unwrap"(%7493) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7499 = "mini.unwrap"(%7496) : (!mini.ptr<i32>) -> i32
    %7500 = "mini.unwrap"(%7497) : (!mini.ptr<i32>) -> i32
    %7501 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %7502 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7503 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7504 = "hi.cast"(%7493) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7505 = "mini.unwrap"(%7504) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7506 = "hi.cast"(%7502) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7507 = "mini.unwrap"(%7506) : (!mini.ptr<i32>) -> i32
    %7508 = "hi.cast"(%7503) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7509 = "mini.unwrap"(%7508) : (!mini.ptr<i32>) -> i32
    %7510 = "mini.unwrap"(%7501) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7511 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %7512 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7513 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7514 = "mini.parameterizations_array"(%7511, %7512, %7513) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7514, %7510, %7505, %7507, %7509) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %7515 = "hi.cast"(%7501) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!mini.fatptr<"String">) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7516 = "mini.unwrap"(%7515) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7517 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %7518 = "mini.parameterizations_array"(%7517) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7518, %7516) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7519 = "mini.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7520 = "mini.literal"() {"value" = 8.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %7521 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7522 = "mini.unwrap"(%7519) : (!mini.ptr<i32>) -> i32
    %7523 = "mini.unwrap"(%7520) : (!mini.ptr<f64>) -> f64
    %7524 = "mini.unwrap"(%7521) : (!mini.ptr<i32>) -> i32
    %7525 = "mini.new"() {"typ" = !llvm.struct<(i32, f64, i32)>, "class_name" = "Animal", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Animal">
    %7526 = "mini.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7527 = "mini.literal"() {"value" = 8.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %7528 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7529 = "hi.cast"(%7526) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7530 = "mini.unwrap"(%7529) : (!mini.ptr<i32>) -> i32
    %7531 = "hi.cast"(%7527) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    %7532 = "mini.unwrap"(%7531) : (!mini.ptr<f64>) -> f64
    %7533 = "hi.cast"(%7528) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7534 = "mini.unwrap"(%7533) : (!mini.ptr<i32>) -> i32
    %7535 = "mini.unwrap"(%7525) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7536 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7537 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["f64"]} : () -> !llvm.ptr
    %7538 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7539 = "mini.parameterizations_array"(%7536, %7537, %7538) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7539, %7535, %7530, %7532, %7534) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "f64_typ", "i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64, i32) -> ()
    %7540 = "hi.cast"(%7525) {"from_typ" = !mini.fatptr<"Animal">, "to_typ" = !mini.fatptr<"Animal">, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %7541 = "mini.refer"(%7540) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
    %7542 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7543 = "mini.create_buffer"(%7542) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7544 = "hi.cast"(%7543) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %7545 = "mini.refer"(%7544) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7546 = "mini.literal"() {"typ" = !llvm.array<13 x i8>, "value" = "did get here!"} : () -> !llvm.ptr
    %7547 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%7545, %7547, %7546) {"typ" = !llvm.array<13 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %7548 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7549 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7550 = "mini.unwrap"(%7545) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7551 = "mini.unwrap"(%7548) : (!mini.ptr<i32>) -> i32
    %7552 = "mini.unwrap"(%7549) : (!mini.ptr<i32>) -> i32
    %7553 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %7554 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7555 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7556 = "hi.cast"(%7545) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7557 = "mini.unwrap"(%7556) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7558 = "hi.cast"(%7554) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7559 = "mini.unwrap"(%7558) : (!mini.ptr<i32>) -> i32
    %7560 = "hi.cast"(%7555) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7561 = "mini.unwrap"(%7560) : (!mini.ptr<i32>) -> i32
    %7562 = "mini.unwrap"(%7553) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7563 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %7564 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7565 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7566 = "mini.parameterizations_array"(%7563, %7564, %7565) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7566, %7562, %7557, %7559, %7561) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %7567 = "hi.cast"(%7553) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!mini.fatptr<"String">) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7568 = "mini.unwrap"(%7567) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7569 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %7570 = "mini.parameterizations_array"(%7569) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7570, %7568) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7571 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7572 = "mini.literal"() {"value" = 1.000000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %7573 = "mini.unwrap"(%7571) : (!mini.ptr<i32>) -> i32
    %7574 = "mini.unwrap"(%7572) : (!mini.ptr<f64>) -> f64
    %7575 = "mini.new"() {"typ" = !llvm.struct<(i32, f64)>, "class_name" = "Beaver", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Beaver">
    %7576 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7577 = "mini.literal"() {"value" = 1.000000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %7578 = "hi.cast"(%7576) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7579 = "mini.unwrap"(%7578) : (!mini.ptr<i32>) -> i32
    %7580 = "hi.cast"(%7577) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    %7581 = "mini.unwrap"(%7580) : (!mini.ptr<f64>) -> f64
    %7582 = "mini.unwrap"(%7575) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7583 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7584 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["f64"]} : () -> !llvm.ptr
    %7585 = "mini.parameterizations_array"(%7583, %7584) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7585, %7582, %7579, %7581) {"offset" = 2 : i32, "vptrs" = ["i32_typ", "f64_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64) -> ()
    %7586 = "hi.cast"(%7575) {"from_typ" = !mini.fatptr<"Beaver">, "to_typ" = !mini.fatptr<"Beaver">, "from_typ_name" = "Beaver", "to_typ_name" = "Beaver"} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %7587 = "mini.refer"(%7586) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Beaver">) -> !mini.fatptr<"Beaver">
    %7588 = "hi.cast"(%7541) {"from_typ" = !mini.fatptr<"Animal">, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>, "from_typ_name" = "Animal", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Animal">) -> !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>
    %7589 = "mini.unwrap"(%7588) : (!mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7590 = "hi.cast"(%7587) {"from_typ" = !mini.fatptr<"Beaver">, "to_typ" = !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "Beaver", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Beaver">) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %7591 = "mini.unwrap"(%7590) : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7592 = "mini.unwrap"(%7468) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7593 = "mini.parameterization"() {"id_hierarchy" = ["Animal"], "name_hierarchy" = ["Animal"]} : () -> !llvm.ptr
    %7594 = "mini.parameterization"() {"id_hierarchy" = ["Beaver"], "name_hierarchy" = ["Beaver"]} : () -> !llvm.ptr
    %7595 = "mini.parameterizations_array"(%7593, %7594) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7595, %7592, %7589, %7591) {"offset" = 1 : i32, "vptrs" = [#none, #none], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7596 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7597 = "hi.cast"(%7596) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>
    %7598 = "mini.unwrap"(%7597) : (!mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7599 = "hi.cast"(%7480) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>
    %7600 = "mini.unwrap"(%7599) : (!mini.union<[!mini.fatptr<"Beaver">, !mini.ptr<f64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7601 = "mini.unwrap"(%7468) : (!mini.fatptr<"Bard">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7602 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7603 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["f64_typ"], ["i32_typ"]], "name_hierarchy" = ["f64_or_i32", ["f64"], ["i32"]]} : () -> !llvm.ptr
    %7604 = "mini.parameterizations_array"(%7602, %7603) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7604, %7601, %7598, %7600) {"offset" = 1 : i32, "vptrs" = ["i32_typ", "union_typ"], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7605 = "mini.literal"() {"value" = 17 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7606 = "mini.create_buffer"(%7605) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7607 = "hi.cast"(%7606) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %7608 = "mini.refer"(%7607) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7609 = "mini.literal"() {"typ" = !llvm.array<16 x i8>, "value" = "barry's color is"} : () -> !llvm.ptr
    %7610 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%7608, %7610, %7609) {"typ" = !llvm.array<16 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %7611 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7612 = "mini.literal"() {"value" = 17 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7613 = "mini.unwrap"(%7608) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7614 = "mini.unwrap"(%7611) : (!mini.ptr<i32>) -> i32
    %7615 = "mini.unwrap"(%7612) : (!mini.ptr<i32>) -> i32
    %7616 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %7617 = "mini.literal"() {"value" = 16 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7618 = "mini.literal"() {"value" = 17 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7619 = "hi.cast"(%7608) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %7620 = "mini.unwrap"(%7619) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %7621 = "hi.cast"(%7617) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7622 = "mini.unwrap"(%7621) : (!mini.ptr<i32>) -> i32
    %7623 = "hi.cast"(%7618) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7624 = "mini.unwrap"(%7623) : (!mini.ptr<i32>) -> i32
    %7625 = "mini.unwrap"(%7616) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7626 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %7627 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7628 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7629 = "mini.parameterizations_array"(%7626, %7627, %7628) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7629, %7625, %7620, %7622, %7624) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %7630 = "hi.cast"(%7616) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!mini.fatptr<"String">) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7631 = "mini.unwrap"(%7630) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7632 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %7633 = "mini.parameterizations_array"(%7632) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7633, %7631) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7634 = "mini.unwrap"(%7587) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7635 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%7635, %7634) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7636 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7637 = "hi.cast"(%7636) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7638 = "mini.unwrap"(%7637) : (!mini.ptr<i32>) -> i32
    %7639 = "mini.unwrap"(%7587) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7640 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7641 = "mini.parameterizations_array"(%7640) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7641, %7639, %7638) {"offset" = 3 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %7642 = "mini.unwrap"(%7587) : (!mini.fatptr<"Beaver">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7643 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%7643, %7642) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7644 = "mini.literal"() {"value" = 89 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7645 = "mini.unwrap"(%7644) : (!mini.ptr<i32>) -> i32
    %7646 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer">
    %7647 = "mini.literal"() {"value" = 89 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7648 = "hi.cast"(%7647) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7649 = "mini.unwrap"(%7648) : (!mini.ptr<i32>) -> i32
    %7650 = "mini.unwrap"(%7646) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7651 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7652 = "mini.parameterizations_array"(%7651) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7652, %7650, %7649) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %7653 = "hi.cast"(%7646) {"from_typ" = !mini.fatptr<"Integer">, "to_typ" = !mini.fatptr<"Integer">, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %7654 = "mini.refer"(%7653) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %7655 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7656 = "hi.cast"(%7655) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7657 = "mini.unwrap"(%7656) : (!mini.ptr<i32>) -> i32
    %7658 = "mini.unwrap"(%7654) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7659 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7660 = "mini.parameterizations_array"(%7659) : (!llvm.ptr) -> !llvm.ptr
    %7661 = "mini.method_call"(%7660, %7658, %7657) {"offset" = 3 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.fatptr<"Integer">
    %7662 = "hi.cast"(%7661) {"from_typ" = !mini.fatptr<"Integer">, "to_typ" = !mini.fatptr<"Integer">, "from_typ_name" = "Integer", "to_typ_name" = "Integer"} : (!mini.fatptr<"Integer">) -> !mini.fatptr<"Integer">
    %7663 = "mini.unwrap"(%7662) : (!mini.fatptr<"Integer">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7664 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%7664, %7663) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7665 = "mini.literal"() {"value" = 9.000000e+00 : f64, "typ" = f64} : () -> !mini.ptr<f64>
    %7666 = "hi.cast"(%7665) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    %7667 = "mini.unwrap"(%7666) : (!mini.ptr<f64>) -> f64
    %7668 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["f64"]} : () -> !llvm.ptr
    %7669 = "mini.parameterizations_array"(%7668) : (!llvm.ptr) -> !llvm.ptr
    %7670 = "mini.class_method_call"(%7669, %7667) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 17 : i64, "ret_type" = f64, "ret_type_unq" = f64, "class_name" = "Math"} : (!llvm.ptr, f64) -> !mini.ptr<f64>
    %7671 = "hi.cast"(%7670) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
    %7672 = "mini.literal"() {"value" = -9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7673 = "hi.cast"(%7672) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7674 = "mini.unwrap"(%7673) : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i64)>
    %7675 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7676 = "mini.parameterizations_array"(%7675) : (!llvm.ptr) -> !llvm.ptr
    %7677 = "mini.class_method_call"(%7676, %7674) {"offset" = 1 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 17 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i64)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i64)>, "class_name" = "Math"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i64)>) -> !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>
    %7678 = "hi.cast"(%7677) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %7679 = "hi.cast"(%7678) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7680 = "mini.unwrap"(%7679) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7681 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7682 = "mini.parameterizations_array"(%7681) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7682, %7680) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7683 = "hi.cast"(%7671) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7684 = "mini.unwrap"(%7683) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7685 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["f64"]} : () -> !llvm.ptr
    %7686 = "mini.parameterizations_array"(%7685) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7686, %7684) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7687 = "mini.unwrap"(%7541) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    "mini.call"(%7687) {"func_name" = "make_em_speak", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7688 = "mini.unwrap"(%7541) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7689 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7690 = "mini.method_call"(%7689, %7688) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">]>
    %7691 = "hi.cast"(%7690) {"from_typ" = !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">]>, "to_typ" = !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">]>) -> !mini.union<[!mini.ptr<f64>, !mini.fatptr<"Animal">]>
    %7692 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7693 = "hi.cast"(%7692) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
    "mini.while"() ({
      %7694 = "mini.checkflag"(%7693) {"typ_name" = "i32_typ"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.ptr<i1>
      %7695 = "mini.unwrap"(%7694) : (!mini.ptr<i1>) -> i1
    }, {
      %7696 = "hi.cast"(%7693) {"from_typ" = !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.ptr<i32>
      %7697 = "hi.cast"(%7696) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
      %7698 = "mini.unwrap"(%7697) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %7699 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %7700 = "mini.parameterizations_array"(%7699) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%7700, %7698) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %7701 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %7702 = "mini.unwrap"(%7696) : (!mini.ptr<i32>) -> i32
      %7703 = "mini.unwrap"(%7701) : (!mini.ptr<i32>) -> i32
      %7704 = "mini.arithmetic"(%7702, %7703) {"op" = "ADD"} : (i32, i32) -> i32
      %7705 = "mini.wrap"(%7704) : (i32) -> !mini.ptr<i32>
      %7706 = "hi.cast"(%7705) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%7696, %7706) {"typ" = i32} : (!mini.ptr<i32>, !mini.ptr<i32>) -> ()
      %7707 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %7708 = "mini.unwrap"(%7696) : (!mini.ptr<i32>) -> i32
      %7709 = "mini.unwrap"(%7707) : (!mini.ptr<i32>) -> i32
      %7710 = "mini.comparison"(%7708, %7709) {"op" = "EQ"} : (i32, i32) -> i1
      %7711 = "mini.wrap"(%7710) : (i1) -> !mini.ptr<i32>
      %7712 = "mini.unwrap"(%7711) : (!mini.ptr<i32>) -> i1
      %7713 = "hi.cast"(%7696) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
      "mini.if"(%7712) ({
        %7714 = "mini.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %7715 = "mini.literal"() {"value" = 1.800000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
        %7716 = "mini.literal"() {"value" = 23 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %7717 = "mini.unwrap"(%7714) : (!mini.ptr<i32>) -> i32
        %7718 = "mini.unwrap"(%7715) : (!mini.ptr<f64>) -> f64
        %7719 = "mini.unwrap"(%7716) : (!mini.ptr<i32>) -> i32
        %7720 = "mini.new"() {"typ" = !llvm.struct<(i32, f64, i32)>, "class_name" = "Animal", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Animal">
        %7721 = "mini.literal"() {"value" = 65 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %7722 = "mini.literal"() {"value" = 1.800000e+01 : f64, "typ" = f64} : () -> !mini.ptr<f64>
        %7723 = "mini.literal"() {"value" = 23 : i32, "typ" = i32} : () -> !mini.ptr<i32>
        %7724 = "hi.cast"(%7721) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
        %7725 = "mini.unwrap"(%7724) : (!mini.ptr<i32>) -> i32
        %7726 = "hi.cast"(%7722) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "f64_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<f64>) -> !mini.ptr<f64>
        %7727 = "mini.unwrap"(%7726) : (!mini.ptr<f64>) -> f64
        %7728 = "hi.cast"(%7723) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
        %7729 = "mini.unwrap"(%7728) : (!mini.ptr<i32>) -> i32
        %7730 = "mini.unwrap"(%7720) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
        %7731 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %7732 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["f64"]} : () -> !llvm.ptr
        %7733 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
        %7734 = "mini.parameterizations_array"(%7731, %7732, %7733) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
        "mini.method_call"(%7734, %7730, %7725, %7727, %7729) {"offset" = 3 : i32, "vptrs" = ["i32_typ", "f64_typ", "i32_typ"], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, f64, i32) -> ()
        %7735 = "hi.cast"(%7720) {"from_typ" = !mini.fatptr<"Animal">, "to_typ" = !mini.fatptr<"Animal">, "from_typ_name" = "Animal", "to_typ_name" = "Animal"} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
        %7736 = "mini.refer"(%7735) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Animal">) -> !mini.fatptr<"Animal">
        %7737 = "hi.cast"(%7736) {"from_typ" = !mini.fatptr<"Animal">, "to_typ" = !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, "from_typ_name" = "Animal", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Animal">) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
        "mini.assign"(%7713, %7737) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> ()
      }) : (i1) -> ()
      %7738 = "hi.cast"(%7713) {"from_typ" = !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, "to_typ" = !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
      "mini.assign"(%7693, %7738) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> ()
    }) : () -> ()
    %7739 = "mini.checkflag"(%7693) {"typ_name" = "i32_typ"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.ptr<i1>
    %7740 = "mini.unwrap"(%7739) : (!mini.ptr<i1>) -> i1
    %7741 = "hi.cast"(%7693) {"from_typ" = !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, "to_typ" = !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
    "mini.if"(%7740) ({
      %7742 = "hi.cast"(%7741) {"from_typ" = !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.ptr<i32>
      %7743 = "hi.cast"(%7742) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
      %7744 = "mini.unwrap"(%7743) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %7745 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %7746 = "mini.parameterizations_array"(%7745) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%7746, %7744) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %7747 = "hi.cast"(%7742) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
      "mini.assign"(%7741, %7747) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %7748 = "mini.checkflag"(%7741) {"typ_name" = "Animal"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.ptr<i1>
    %7749 = "mini.unwrap"(%7748) : (!mini.ptr<i1>) -> i1
    %7750 = "hi.cast"(%7741) {"from_typ" = !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, "to_typ" = !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
    "mini.if"(%7749) ({
      %7751 = "hi.cast"(%7750) {"from_typ" = !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, "to_typ" = !mini.fatptr<"Animal">, "from_typ_name" = "union_typ", "to_typ_name" = "Animal"} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> !mini.fatptr<"Animal">
      %7752 = "mini.unwrap"(%7751) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      "mini.call"(%7752) {"func_name" = "make_em_speak", "ret_type" = !llvm.void} : (!llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
      %7753 = "hi.cast"(%7751) {"from_typ" = !mini.fatptr<"Animal">, "to_typ" = !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, "from_typ_name" = "Animal", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Animal">) -> !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>
      "mini.assign"(%7750, %7753) {"typ" = !llvm.struct<(!llvm.ptr, i160)>} : (!mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>, !mini.union<[!mini.fatptr<"Animal">, !mini.ptr<i32>]>) -> ()
    }) : (i1) -> ()
    %7754 = "mini.unwrap"(%7541) : (!mini.fatptr<"Animal">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7755 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%7755, %7754) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 13 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %7756 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7757 = "mini.unwrap"(%7756) : (!mini.ptr<i32>) -> i32
    %7758 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ListNode", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ListNode">
    %7759 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7760 = "hi.cast"(%7759) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7761 = "mini.unwrap"(%7760) : (!mini.ptr<i32>) -> i32
    %7762 = "mini.unwrap"(%7758) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7763 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7764 = "mini.parameterizations_array"(%7763) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7764, %7762, %7761) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %7765 = "hi.cast"(%7758) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %7766 = "mini.refer"(%7765) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %7767 = "hi.cast"(%7766) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %7768 = "mini.refer"(%7767) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
    %7769 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7770 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7771 = "mini.unwrap"(%7769) : (!mini.ptr<i32>) -> i32
    %7772 = "mini.unwrap"(%7770) : (!mini.ptr<i32>) -> i32
    %7773 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %7774 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7775 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7776 = "hi.cast"(%7774) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7777 = "mini.unwrap"(%7776) : (!mini.ptr<i32>) -> i32
    %7778 = "hi.cast"(%7775) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7779 = "mini.unwrap"(%7778) : (!mini.ptr<i32>) -> i32
    %7780 = "mini.unwrap"(%7773) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7781 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7782 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7783 = "mini.parameterizations_array"(%7781, %7782) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7783, %7780, %7777, %7779) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 55 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %7784 = "mini.unwrap"(%7773) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7785 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7786 = "mini.method_call"(%7785, %7784) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 55 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %7787 = "hi.cast"(%7786) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"RangeIterator">, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"RangeIterator">
    %7788 = "hi.cast"(%7787) {"from_typ" = !mini.fatptr<"RangeIterator">, "to_typ" = !mini.fatptr<"RangeIterator">, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %7789 = "mini.refer"(%7788) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %7790 = "mini.unwrap"(%7789) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7791 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %7792 = "mini.method_call"(%7791, %7790) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %7793 = "hi.cast"(%7792) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.nil, !mini.ptr<i32>]>
      %7794 = "mini.checkflag"(%7793) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.ptr<i1>
      %7795 = "mini.unwrap"(%7794) : (!mini.ptr<i1>) -> i1
    }, {
      %7796 = "hi.cast"(%7793) {"from_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.ptr<i32>
      %7797 = "mini.unwrap"(%7796) : (!mini.ptr<i32>) -> i32
      %7798 = "mini.new"() {"typ" = !llvm.struct<(i32, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "ListNode", "num_data_fields" = 2 : i32, "region_id" = "none"} : () -> !mini.fatptr<"ListNode">
      %7799 = "hi.cast"(%7796) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %7800 = "mini.unwrap"(%7799) : (!mini.ptr<i32>) -> i32
      %7801 = "mini.unwrap"(%7798) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7802 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %7803 = "mini.parameterizations_array"(%7802) : (!llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%7803, %7801, %7800) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 12 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
      %7804 = "hi.cast"(%7798) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      %7805 = "mini.unwrap"(%7804) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7806 = "mini.unwrap"(%7768) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7807 = "mini.parameterization"() {"id_hierarchy" = ["ListNode"], "name_hierarchy" = ["ListNode"]} : () -> !llvm.ptr
      %7808 = "mini.parameterizations_array"(%7807) : (!llvm.ptr) -> !llvm.ptr
      %7809 = "mini.method_call"(%7808, %7806, %7805) {"offset" = 3 : i32, "vptrs" = [#none], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListNode">
      %7810 = "hi.cast"(%7809) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      %7811 = "hi.cast"(%7810) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      "mini.assign"(%7768, %7811) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListNode">, !mini.fatptr<"ListNode">) -> ()
      %7812 = "hi.cast"(%7796) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%7793, %7812) {"typ" = i32} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %7813 = "mini.unwrap"(%7766) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7814 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7815 = "mini.method_call"(%7814, %7813) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
    %7816 = "hi.cast"(%7815) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7817 = "hi.cast"(%7816) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7818 = "mini.unwrap"(%7817) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7819 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7820 = "mini.parameterizations_array"(%7819) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7820, %7818) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7821 = "mini.unwrap"(%7766) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7822 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7823 = "mini.method_call"(%7822, %7821) {"offset" = 6 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"ListIterator">
    %7824 = "hi.cast"(%7823) {"from_typ" = !mini.fatptr<"ListIterator">, "to_typ" = !mini.fatptr<"ListIterator">, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %7825 = "hi.cast"(%7824) {"from_typ" = !mini.fatptr<"ListIterator">, "to_typ" = !mini.fatptr<"ListIterator">, "from_typ_name" = "ListIterator", "to_typ_name" = "ListIterator"} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    %7826 = "mini.refer"(%7825) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ListIterator">) -> !mini.fatptr<"ListIterator">
    "mini.while"() ({
      %7827 = "mini.unwrap"(%7826) : (!mini.fatptr<"ListIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7828 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %7829 = "mini.method_call"(%7828, %7827) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 5 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
      %7830 = "hi.cast"(%7829) {"from_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "to_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>
      %7831 = "mini.checkflag"(%7830) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> !mini.ptr<i1>
      %7832 = "mini.unwrap"(%7831) : (!mini.ptr<i1>) -> i1
    }, {
      %7833 = "hi.cast"(%7830) {"from_typ" = !mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "union_typ", "to_typ_name" = "ListNode"} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>) -> !mini.fatptr<"ListNode">
      %7834 = "mini.unwrap"(%7833) : (!mini.fatptr<"ListNode">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7835 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %7836 = "mini.method_call"(%7835, %7834) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 12 : i64, "ret_type" = i32, "ret_type_unq" = i32} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.ptr<i32>
      %7837 = "hi.cast"(%7836) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %7838 = "hi.cast"(%7837) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
      %7839 = "mini.unwrap"(%7838) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %7840 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %7841 = "mini.parameterizations_array"(%7840) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%7841, %7839) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %7842 = "hi.cast"(%7833) {"from_typ" = !mini.fatptr<"ListNode">, "to_typ" = !mini.fatptr<"ListNode">, "from_typ_name" = "ListNode", "to_typ_name" = "ListNode"} : (!mini.fatptr<"ListNode">) -> !mini.fatptr<"ListNode">
      "mini.assign"(%7830, %7842) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.union<[!mini.nil, !mini.fatptr<"ListNode">]>, !mini.fatptr<"ListNode">) -> ()
    }) : () -> ()
    %7843 = "mini.addr_of"() {"global_name" = @print88} : () -> !llvm.ptr
    %7844 = "mini.wrap"(%7843) : (!llvm.ptr) -> !llvm.ptr
    %7845 = "mini.coro_create"(%7844) {"arg_passer" = @coroutine_uypqufbuwa_passer, "buffer_filler" = @coroutine_uypqufbuwa_buffer_filler} : (!llvm.ptr) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %7846 = "hi.cast"(%7845) {"from_typ" = !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>, "to_typ" = !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>, "from_typ_name" = "coroutine_typ", "to_typ_name" = "coroutine_typ"} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %7847 = "mini.refer"(%7846) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %7848 = "mini.coro_call"(%7847) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7849 = "mini.wrap"(%7848) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %7850 = "mini.literal"() {"value" = 89 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7851 = "hi.cast"(%7850) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7852 = "mini.unwrap"(%7851) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7853 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7854 = "mini.parameterizations_array"(%7853) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7854, %7852) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7855 = "mini.coro_call"(%7847) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7856 = "mini.wrap"(%7855) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %7857 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7858 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7859 = "mini.unwrap"(%7857) : (!mini.ptr<i32>) -> i32
    %7860 = "mini.unwrap"(%7858) : (!mini.ptr<i32>) -> i32
    %7861 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %7862 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7863 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7864 = "hi.cast"(%7862) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7865 = "mini.unwrap"(%7864) : (!mini.ptr<i32>) -> i32
    %7866 = "hi.cast"(%7863) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7867 = "mini.unwrap"(%7866) : (!mini.ptr<i32>) -> i32
    %7868 = "mini.unwrap"(%7861) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7869 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7870 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7871 = "mini.parameterizations_array"(%7869, %7870) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7871, %7868, %7865, %7867) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 55 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %7872 = "mini.unwrap"(%7861) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7873 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %7874 = "mini.method_call"(%7873, %7872) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 55 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %7875 = "hi.cast"(%7874) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"RangeIterator">, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"RangeIterator">
    %7876 = "hi.cast"(%7875) {"from_typ" = !mini.fatptr<"RangeIterator">, "to_typ" = !mini.fatptr<"RangeIterator">, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %7877 = "mini.refer"(%7876) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %7878 = "mini.unwrap"(%7877) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %7879 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %7880 = "mini.method_call"(%7879, %7878) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %7881 = "hi.cast"(%7880) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.nil, !mini.ptr<i32>]>
      %7882 = "mini.checkflag"(%7881) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.ptr<i1>
      %7883 = "mini.unwrap"(%7882) : (!mini.ptr<i1>) -> i1
    }, {
      %7884 = "hi.cast"(%7881) {"from_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.ptr<i32>
      %7885 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %7886 = "mini.unwrap"(%7884) : (!mini.ptr<i32>) -> i32
      %7887 = "mini.unwrap"(%7885) : (!mini.ptr<i32>) -> i32
      %7888 = "mini.comparison"(%7886, %7887) {"op" = "EQ"} : (i32, i32) -> i1
      %7889 = "mini.wrap"(%7888) : (i1) -> !mini.ptr<i32>
      %7890 = "mini.unwrap"(%7889) : (!mini.ptr<i32>) -> i1
      "mini.if"(%7890) ({
        "mini.break"() [^bb1445] : () -> ()
      }) : (i1) -> ()
      %7891 = "hi.cast"(%7884) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
      %7892 = "mini.unwrap"(%7891) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %7893 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %7894 = "mini.parameterizations_array"(%7893) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%7894, %7892) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %7895 = "hi.cast"(%7884) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%7881, %7895) {"typ" = i32} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %7896 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7897 = "mini.create_buffer"(%7896) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7898 = "hi.cast"(%7897) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.ptr<i32>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i32>>
    %7899 = "mini.refer"(%7898) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %7900 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7901 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7902 = "hi.cast"(%7900) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%7899, %7901, %7902) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %7903 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7904 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7905 = "hi.cast"(%7903) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%7899, %7904, %7905) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %7906 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7907 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7908 = "hi.cast"(%7906) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%7899, %7907, %7908) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %7909 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7910 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7911 = "hi.cast"(%7909) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%7899, %7910, %7911) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %7912 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7913 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7914 = "mini.unwrap"(%7899) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %7915 = "mini.unwrap"(%7912) : (!mini.ptr<i32>) -> i32
    %7916 = "mini.unwrap"(%7913) : (!mini.ptr<i32>) -> i32
    %7917 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7918 = "mini.new"(%7917) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"Array", [!mini.ptr<i32>]>
    %7919 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7920 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7921 = "hi.cast"(%7899) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %7922 = "mini.unwrap"(%7921) : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> !llvm.struct<(!llvm.ptr)>
    %7923 = "hi.cast"(%7919) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7924 = "mini.unwrap"(%7923) : (!mini.ptr<i32>) -> i32
    %7925 = "hi.cast"(%7920) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7926 = "mini.unwrap"(%7925) : (!mini.ptr<i32>) -> i32
    %7927 = "mini.unwrap"(%7918) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7928 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi32"]} : () -> !llvm.ptr
    %7929 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7930 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7931 = "mini.parameterizations_array"(%7928, %7929, %7930) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7931, %7927, %7922, %7924, %7926) {"offset" = 8 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %7932 = "hi.cast"(%7918) {"from_typ" = !mini.fatptr<"Array", [!mini.ptr<i32>]>, "to_typ" = !mini.fatptr<"Array", [!mini.ptr<i32>]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !mini.fatptr<"Array", [!mini.ptr<i32>]>
    %7933 = "mini.refer"(%7932) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !mini.fatptr<"Array", [!mini.ptr<i32>]>
    %7934 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7935 = "mini.create_buffer"(%7934) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7936 = "hi.cast"(%7935) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.ptr<i32>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i32>>
    %7937 = "mini.refer"(%7936) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %7938 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7939 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7940 = "hi.cast"(%7938) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%7937, %7939, %7940) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %7941 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7942 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7943 = "hi.cast"(%7941) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%7937, %7942, %7943) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %7944 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7945 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7946 = "hi.cast"(%7944) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%7937, %7945, %7946) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %7947 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7948 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7949 = "hi.cast"(%7947) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%7937, %7948, %7949) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %7950 = "mini.literal"() {"value" = 9 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7951 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7952 = "hi.cast"(%7950) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%7937, %7951, %7952) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %7953 = "mini.literal"() {"value" = 10 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7954 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7955 = "hi.cast"(%7953) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%7937, %7954, %7955) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %7956 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7957 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7958 = "mini.unwrap"(%7937) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %7959 = "mini.unwrap"(%7956) : (!mini.ptr<i32>) -> i32
    %7960 = "mini.unwrap"(%7957) : (!mini.ptr<i32>) -> i32
    %7961 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7962 = "mini.new"(%7961) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"Array", [!mini.ptr<i32>]>
    %7963 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7964 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7965 = "hi.cast"(%7937) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %7966 = "mini.unwrap"(%7965) : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> !llvm.struct<(!llvm.ptr)>
    %7967 = "hi.cast"(%7963) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7968 = "mini.unwrap"(%7967) : (!mini.ptr<i32>) -> i32
    %7969 = "hi.cast"(%7964) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7970 = "mini.unwrap"(%7969) : (!mini.ptr<i32>) -> i32
    %7971 = "mini.unwrap"(%7962) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7972 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi32"]} : () -> !llvm.ptr
    %7973 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7974 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7975 = "mini.parameterizations_array"(%7972, %7973, %7974) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%7975, %7971, %7966, %7968, %7970) {"offset" = 8 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %7976 = "hi.cast"(%7962) {"from_typ" = !mini.fatptr<"Array", [!mini.ptr<i32>]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7977 = "mini.unwrap"(%7976) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7978 = "mini.unwrap"(%7933) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7979 = "mini.parameterization"() {"id_hierarchy" = ["Array", ["i32_typ"]], "name_hierarchy" = ["Arrayi32", ["i32"]]} : () -> !llvm.ptr
    %7980 = "mini.parameterizations_array"(%7979) : (!llvm.ptr) -> !llvm.ptr
    %7981 = "mini.method_call"(%7980, %7978, %7977) {"offset" = 12 : i32, "vptrs" = [#none], "vtable_size" = 83 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %7982 = "hi.cast"(%7981) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.ptr<i32>]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.ptr<i32>]>
    %7983 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7984 = "hi.cast"(%7983) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %7985 = "mini.unwrap"(%7984) : (!mini.ptr<i32>) -> i32
    %7986 = "mini.unwrap"(%7933) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %7987 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7988 = "mini.parameterizations_array"(%7987) : (!llvm.ptr) -> !llvm.ptr
    %7989 = "mini.method_call"(%7988, %7986, %7985) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.type_param<"T", !mini.any, "Array">
    %7990 = "hi.cast"(%7989) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.ptr<i32>
    %7991 = "hi.cast"(%7990) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %7992 = "mini.unwrap"(%7991) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %7993 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %7994 = "mini.parameterizations_array"(%7993) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%7994, %7992) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %7995 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %7996 = "mini.create_buffer"(%7995) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %7997 = "hi.cast"(%7996) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.ptr<i32>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i32>>
    %7998 = "mini.refer"(%7997) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %7999 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8000 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8001 = "mini.unwrap"(%7998) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %8002 = "mini.unwrap"(%7999) : (!mini.ptr<i32>) -> i32
    %8003 = "mini.unwrap"(%8000) : (!mini.ptr<i32>) -> i32
    %8004 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8005 = "mini.new"(%8004) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"Array", [!mini.ptr<i32>]>
    %8006 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8007 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8008 = "hi.cast"(%7998) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %8009 = "mini.unwrap"(%8008) : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> !llvm.struct<(!llvm.ptr)>
    %8010 = "hi.cast"(%8006) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8011 = "mini.unwrap"(%8010) : (!mini.ptr<i32>) -> i32
    %8012 = "hi.cast"(%8007) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8013 = "mini.unwrap"(%8012) : (!mini.ptr<i32>) -> i32
    %8014 = "mini.unwrap"(%8005) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8015 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi32"]} : () -> !llvm.ptr
    %8016 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8017 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8018 = "mini.parameterizations_array"(%8015, %8016, %8017) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8018, %8014, %8009, %8011, %8013) {"offset" = 8 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8019 = "hi.cast"(%8005) {"from_typ" = !mini.fatptr<"Array", [!mini.ptr<i32>]>, "to_typ" = !mini.fatptr<"Array", [!mini.ptr<i32>]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !mini.fatptr<"Array", [!mini.ptr<i32>]>
    %8020 = "mini.refer"(%8019) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !mini.fatptr<"Array", [!mini.ptr<i32>]>
    %8021 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8022 = "mini.create_buffer"(%8021) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8023 = "hi.cast"(%8022) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.ptr<i32>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i32>>
    %8024 = "mini.refer"(%8023) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %8025 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8026 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8027 = "hi.cast"(%8025) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8024, %8026, %8027) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8028 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8029 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8030 = "hi.cast"(%8028) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8024, %8029, %8030) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8031 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8032 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8033 = "hi.cast"(%8031) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8024, %8032, %8033) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8034 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8035 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8036 = "hi.cast"(%8034) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8024, %8035, %8036) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8037 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8038 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8039 = "mini.unwrap"(%8024) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %8040 = "mini.unwrap"(%8037) : (!mini.ptr<i32>) -> i32
    %8041 = "mini.unwrap"(%8038) : (!mini.ptr<i32>) -> i32
    %8042 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8043 = "mini.new"(%8042) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"Array", [!mini.ptr<i32>]>
    %8044 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8045 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8046 = "hi.cast"(%8024) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %8047 = "mini.unwrap"(%8046) : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> !llvm.struct<(!llvm.ptr)>
    %8048 = "hi.cast"(%8044) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8049 = "mini.unwrap"(%8048) : (!mini.ptr<i32>) -> i32
    %8050 = "hi.cast"(%8045) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8051 = "mini.unwrap"(%8050) : (!mini.ptr<i32>) -> i32
    %8052 = "mini.unwrap"(%8043) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8053 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi32"]} : () -> !llvm.ptr
    %8054 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8055 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8056 = "mini.parameterizations_array"(%8053, %8054, %8055) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8056, %8052, %8047, %8049, %8051) {"offset" = 8 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8057 = "hi.cast"(%8043) {"from_typ" = !mini.fatptr<"Array", [!mini.ptr<i32>]>, "to_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %8058 = "mini.unwrap"(%8057) : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8059 = "mini.unwrap"(%8020) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8060 = "mini.parameterization"() {"id_hierarchy" = ["Array", ["i32_typ"]], "name_hierarchy" = ["Arrayi32", ["i32"]]} : () -> !llvm.ptr
    %8061 = "mini.parameterizations_array"(%8060) : (!llvm.ptr) -> !llvm.ptr
    %8062 = "mini.method_call"(%8061, %8059, %8058) {"offset" = 12 : i32, "vptrs" = [#none], "vtable_size" = 83 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>
    %8063 = "hi.cast"(%8062) {"from_typ" = !mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>, "to_typ" = !mini.fatptr<"Array", [!mini.ptr<i32>]>, "from_typ_name" = "Array", "to_typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.type_param<"T", !mini.any, "Array">]>) -> !mini.fatptr<"Array", [!mini.ptr<i32>]>
    %8064 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8065 = "hi.cast"(%8064) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8066 = "mini.unwrap"(%8065) : (!mini.ptr<i32>) -> i32
    %8067 = "mini.unwrap"(%8020) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8068 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8069 = "mini.parameterizations_array"(%8068) : (!llvm.ptr) -> !llvm.ptr
    %8070 = "mini.method_call"(%8069, %8067, %8066) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.type_param<"T", !mini.any, "Array">
    %8071 = "hi.cast"(%8070) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.ptr<i32>
    %8072 = "hi.cast"(%8071) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8073 = "mini.unwrap"(%8072) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8074 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8075 = "mini.parameterizations_array"(%8074) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8075, %8073) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    "mini.call"() {"func_name" = "grabo", "ret_type" = !llvm.void} : () -> ()
    %8076 = "mini.checkflag"(%7933) {"typ_name" = "Array"} : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !mini.ptr<i1>
    %8077 = "mini.unwrap"(%8076) : (!mini.ptr<i1>) -> i1
    %8078 = "mini.logical"(%8077) ({
      %8079 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %8080 = "hi.cast"(%8079) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %8081 = "mini.unwrap"(%8080) : (!mini.ptr<i32>) -> i32
      %8082 = "mini.unwrap"(%7933) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %8083 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %8084 = "mini.parameterizations_array"(%8083) : (!llvm.ptr) -> !llvm.ptr
      %8085 = "mini.method_call"(%8084, %8082, %8081) {"offset" = 14 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.type_param<"T", !mini.any, "Array">
      %8086 = "hi.cast"(%8085) {"from_typ" = !mini.type_param<"T", !mini.any, "Array">, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!mini.type_param<"T", !mini.any, "Array">) -> !mini.ptr<i32>
      %8087 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %8088 = "mini.unwrap"(%8086) : (!mini.ptr<i32>) -> i32
      %8089 = "mini.unwrap"(%8087) : (!mini.ptr<i32>) -> i32
      %8090 = "mini.comparison"(%8088, %8089) {"op" = "EQ"} : (i32, i32) -> i1
      %8091 = "mini.wrap"(%8090) : (i1) -> !mini.ptr<i32>
      func.return %8091 : !mini.ptr<i32>
    }) {"op" = "and"} : (i1) -> i1
    %8092 = "mini.wrap"(%8078) : (i1) -> !mini.ptr<i1>
    %8093 = "mini.unwrap"(%8092) : (!mini.ptr<i1>) -> i1
    "mini.if"(%8093) ({
      %8094 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %8095 = "mini.create_buffer"(%8094) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
      %8096 = "hi.cast"(%8095) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
      %8097 = "mini.refer"(%8096) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %8098 = "mini.literal"() {"typ" = !llvm.array<14 x i8>, "value" = "so it is true!"} : () -> !llvm.ptr
      %8099 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
      "mini.buffer_set"(%8097, %8099, %8098) {"typ" = !llvm.array<14 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
      %8100 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %8101 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %8102 = "mini.unwrap"(%8097) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %8103 = "mini.unwrap"(%8100) : (!mini.ptr<i32>) -> i32
      %8104 = "mini.unwrap"(%8101) : (!mini.ptr<i32>) -> i32
      %8105 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
      %8106 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %8107 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
      %8108 = "hi.cast"(%8097) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
      %8109 = "mini.unwrap"(%8108) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
      %8110 = "hi.cast"(%8106) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %8111 = "mini.unwrap"(%8110) : (!mini.ptr<i32>) -> i32
      %8112 = "hi.cast"(%8107) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      %8113 = "mini.unwrap"(%8112) : (!mini.ptr<i32>) -> i32
      %8114 = "mini.unwrap"(%8105) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %8115 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
      %8116 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %8117 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %8118 = "mini.parameterizations_array"(%8115, %8116, %8117) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
      "mini.method_call"(%8118, %8114, %8109, %8111, %8113) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
      %8119 = "hi.cast"(%8105) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!mini.fatptr<"String">) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
      %8120 = "mini.unwrap"(%8119) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %8121 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
      %8122 = "mini.parameterizations_array"(%8121) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%8122, %8120) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    }) : (i1) -> ()
    %8123 = "mini.literal"() {"value" = 5 : i64, "typ" = i64} : () -> !mini.ptr<i64>
    %8124 = "hi.cast"(%8123) {"from_typ" = !mini.ptr<i64>, "to_typ" = !mini.ptr<i64>, "from_typ_name" = "i64_typ", "to_typ_name" = "i64_typ"} : (!mini.ptr<i64>) -> !mini.ptr<i64>
    %8125 = "hi.cast"(%8124) {"from_typ" = !mini.ptr<i64>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i64>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8126 = "mini.unwrap"(%8125) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8127 = "mini.parameterization"() {"id_hierarchy" = ["i64_typ"], "name_hierarchy" = ["i64"]} : () -> !llvm.ptr
    %8128 = "mini.parameterizations_array"(%8127) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8128, %8126) {"offset" = 0 : i32, "vptrs" = ["i64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8129 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8130 = "hi.cast"(%8129) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<f64>, "from_typ_name" = "i32_typ", "to_typ_name" = "f64_typ"} : (!mini.ptr<i32>) -> !mini.ptr<f64>
    %8131 = "hi.cast"(%8130) {"from_typ" = !mini.ptr<f64>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "f64_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<f64>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8132 = "mini.unwrap"(%8131) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8133 = "mini.parameterization"() {"id_hierarchy" = ["f64_typ"], "name_hierarchy" = ["f64"]} : () -> !llvm.ptr
    %8134 = "mini.parameterizations_array"(%8133) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8134, %8132) {"offset" = 0 : i32, "vptrs" = ["f64_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8135 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8136 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8137 = "mini.unwrap"(%8135) : (!mini.ptr<i32>) -> i32
    %8138 = "mini.unwrap"(%8136) : (!mini.ptr<i32>) -> i32
    %8139 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %8140 = "mini.literal"() {"value" = 11 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8141 = "mini.literal"() {"value" = 14 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8142 = "hi.cast"(%8140) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8143 = "mini.unwrap"(%8142) : (!mini.ptr<i32>) -> i32
    %8144 = "hi.cast"(%8141) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8145 = "mini.unwrap"(%8144) : (!mini.ptr<i32>) -> i32
    %8146 = "mini.unwrap"(%8139) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8147 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8148 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8149 = "mini.parameterizations_array"(%8147, %8148) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8149, %8146, %8143, %8145) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 55 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %8150 = "mini.unwrap"(%8139) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8151 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8152 = "mini.method_call"(%8151, %8150) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 55 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %8153 = "hi.cast"(%8152) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"RangeIterator">, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"RangeIterator">
    %8154 = "hi.cast"(%8153) {"from_typ" = !mini.fatptr<"RangeIterator">, "to_typ" = !mini.fatptr<"RangeIterator">, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %8155 = "mini.refer"(%8154) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %8156 = "mini.unwrap"(%8155) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %8157 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %8158 = "mini.method_call"(%8157, %8156) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %8159 = "hi.cast"(%8158) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.nil, !mini.ptr<i32>]>
      %8160 = "mini.checkflag"(%8159) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.ptr<i1>
      %8161 = "mini.unwrap"(%8160) : (!mini.ptr<i1>) -> i1
    }, {
      %8162 = "hi.cast"(%8159) {"from_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.ptr<i32>
      %8163 = "hi.cast"(%8162) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
      %8164 = "mini.unwrap"(%8163) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %8165 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %8166 = "mini.parameterizations_array"(%8165) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%8166, %8164) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %8167 = "hi.cast"(%8162) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%8159, %8167) {"typ" = i32} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %8168 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8169 = "mini.create_buffer"(%8168) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8170 = "hi.cast"(%8169) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.ptr<i32>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i32>>
    %8171 = "mini.refer"(%8170) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %8172 = "mini.literal"() {"value" = 44 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8173 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8174 = "hi.cast"(%8172) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8171, %8173, %8174) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8175 = "mini.literal"() {"value" = 55 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8176 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8177 = "hi.cast"(%8175) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8171, %8176, %8177) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8178 = "mini.literal"() {"value" = 66 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8179 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8180 = "hi.cast"(%8178) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8171, %8179, %8180) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8181 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8182 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8183 = "mini.unwrap"(%8171) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %8184 = "mini.unwrap"(%8181) : (!mini.ptr<i32>) -> i32
    %8185 = "mini.unwrap"(%8182) : (!mini.ptr<i32>) -> i32
    %8186 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8187 = "mini.new"(%8186) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"Array", [!mini.ptr<i32>]>
    %8188 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8189 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8190 = "hi.cast"(%8171) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %8191 = "mini.unwrap"(%8190) : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> !llvm.struct<(!llvm.ptr)>
    %8192 = "hi.cast"(%8188) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8193 = "mini.unwrap"(%8192) : (!mini.ptr<i32>) -> i32
    %8194 = "hi.cast"(%8189) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8195 = "mini.unwrap"(%8194) : (!mini.ptr<i32>) -> i32
    %8196 = "mini.unwrap"(%8187) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8197 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi32"]} : () -> !llvm.ptr
    %8198 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8199 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8200 = "mini.parameterizations_array"(%8197, %8198, %8199) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8200, %8196, %8191, %8193, %8195) {"offset" = 8 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8201 = "mini.unwrap"(%8187) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8202 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8203 = "mini.method_call"(%8202, %8201) {"offset" = 19 : i32, "vptrs" = [], "vtable_size" = 83 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %8204 = "hi.cast"(%8203) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"ArrayIterator", [!mini.ptr<i32>]>, "from_typ_name" = "Iterator", "to_typ_name" = "ArrayIterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"ArrayIterator", [!mini.ptr<i32>]>
    %8205 = "hi.cast"(%8204) {"from_typ" = !mini.fatptr<"ArrayIterator", [!mini.ptr<i32>]>, "to_typ" = !mini.fatptr<"ArrayIterator", [!mini.ptr<i32>]>, "from_typ_name" = "ArrayIterator", "to_typ_name" = "ArrayIterator"} : (!mini.fatptr<"ArrayIterator", [!mini.ptr<i32>]>) -> !mini.fatptr<"ArrayIterator", [!mini.ptr<i32>]>
    %8206 = "mini.refer"(%8205) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"ArrayIterator", [!mini.ptr<i32>]>) -> !mini.fatptr<"ArrayIterator", [!mini.ptr<i32>]>
    "mini.while"() ({
      %8207 = "mini.unwrap"(%8206) : (!mini.fatptr<"ArrayIterator", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %8208 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %8209 = "mini.method_call"(%8208, %8207) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 10 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %8210 = "hi.cast"(%8209) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.nil, !mini.ptr<i32>]>
      %8211 = "mini.checkflag"(%8210) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.ptr<i1>
      %8212 = "mini.unwrap"(%8211) : (!mini.ptr<i1>) -> i1
    }, {
      %8213 = "hi.cast"(%8210) {"from_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.ptr<i32>
      %8214 = "hi.cast"(%8213) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
      %8215 = "mini.unwrap"(%8214) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %8216 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %8217 = "mini.parameterizations_array"(%8216) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%8217, %8215) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %8218 = "hi.cast"(%8213) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%8210, %8218) {"typ" = i32} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %8219 = "mini.literal"() {"value" = 3 : i8, "typ" = i8} : () -> !mini.ptr<i8>
    %8220 = "hi.cast"(%8219) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.ptr<i8>, "from_typ_name" = "i8_typ", "to_typ_name" = "i8_typ"} : (!mini.ptr<i8>) -> !mini.ptr<i8>
    %8221 = "hi.cast"(%8220) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i8>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8222 = "mini.unwrap"(%8221) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8223 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["i8"]} : () -> !llvm.ptr
    %8224 = "mini.parameterizations_array"(%8223) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8224, %8222) {"offset" = 0 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8225 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8226 = "mini.create_buffer"(%8225) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8227 = "hi.cast"(%8226) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %8228 = "mini.refer"(%8227) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8229 = "mini.literal"() {"typ" = !llvm.array<5 x i8>, "value" = "boom!"} : () -> !llvm.ptr
    %8230 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%8228, %8230, %8229) {"typ" = !llvm.array<5 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %8231 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8232 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8233 = "mini.unwrap"(%8228) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8234 = "mini.unwrap"(%8231) : (!mini.ptr<i32>) -> i32
    %8235 = "mini.unwrap"(%8232) : (!mini.ptr<i32>) -> i32
    %8236 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %8237 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8238 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8239 = "hi.cast"(%8228) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8240 = "mini.unwrap"(%8239) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8241 = "hi.cast"(%8237) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8242 = "mini.unwrap"(%8241) : (!mini.ptr<i32>) -> i32
    %8243 = "hi.cast"(%8238) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8244 = "mini.unwrap"(%8243) : (!mini.ptr<i32>) -> i32
    %8245 = "mini.unwrap"(%8236) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8246 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %8247 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8248 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8249 = "mini.parameterizations_array"(%8246, %8247, %8248) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8249, %8245, %8240, %8242, %8244) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8250 = "mini.unwrap"(%8236) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8251 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8252 = "mini.method_call"(%8251, %8250) {"offset" = 16 : i32, "vptrs" = [], "vtable_size" = 77 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %8253 = "hi.cast"(%8252) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"StringIterator">, "from_typ_name" = "Iterator", "to_typ_name" = "StringIterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"StringIterator">
    %8254 = "hi.cast"(%8253) {"from_typ" = !mini.fatptr<"StringIterator">, "to_typ" = !mini.fatptr<"StringIterator">, "from_typ_name" = "StringIterator", "to_typ_name" = "StringIterator"} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    %8255 = "mini.refer"(%8254) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"StringIterator">) -> !mini.fatptr<"StringIterator">
    "mini.while"() ({
      %8256 = "mini.unwrap"(%8255) : (!mini.fatptr<"StringIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %8257 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %8258 = "mini.method_call"(%8257, %8256) {"offset" = 4 : i32, "vptrs" = [], "vtable_size" = 10 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %8259 = "hi.cast"(%8258) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.nil]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.fatptr<"Character">, !mini.nil]>
      %8260 = "mini.checkflag"(%8259) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>) -> !mini.ptr<i1>
      %8261 = "mini.unwrap"(%8260) : (!mini.ptr<i1>) -> i1
    }, {
      %8262 = "hi.cast"(%8259) {"from_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.nil]>, "to_typ" = !mini.fatptr<"Character">, "from_typ_name" = "union_typ", "to_typ_name" = "Character"} : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>) -> !mini.fatptr<"Character">
      %8263 = "hi.cast"(%8262) {"from_typ" = !mini.fatptr<"Character">, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "Character", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Character">) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
      %8264 = "mini.unwrap"(%8263) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %8265 = "mini.parameterization"() {"id_hierarchy" = ["Character"], "name_hierarchy" = ["Character"]} : () -> !llvm.ptr
      %8266 = "mini.parameterizations_array"(%8265) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%8266, %8264) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %8267 = "hi.cast"(%8262) {"from_typ" = !mini.fatptr<"Character">, "to_typ" = !mini.fatptr<"Character">, "from_typ_name" = "Character", "to_typ_name" = "Character"} : (!mini.fatptr<"Character">) -> !mini.fatptr<"Character">
      "mini.assign"(%8259, %8267) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.union<[!mini.fatptr<"Character">, !mini.nil]>, !mini.fatptr<"Character">) -> ()
    }) : () -> ()
    %8268 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8269 = "mini.create_buffer"(%8268) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8270 = "hi.cast"(%8269) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.ptr<i32>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i32>>
    %8271 = "mini.refer"(%8270) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %8272 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8273 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8274 = "hi.cast"(%8272) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8271, %8273, %8274) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8275 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8276 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8277 = "hi.cast"(%8275) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8271, %8276, %8277) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8278 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8279 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8280 = "hi.cast"(%8278) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8271, %8279, %8280) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8281 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8282 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8283 = "mini.unwrap"(%8271) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %8284 = "mini.unwrap"(%8281) : (!mini.ptr<i32>) -> i32
    %8285 = "mini.unwrap"(%8282) : (!mini.ptr<i32>) -> i32
    %8286 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8287 = "mini.new"(%8286) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"Array", [!mini.ptr<i32>]>
    %8288 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8289 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8290 = "hi.cast"(%8271) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %8291 = "mini.unwrap"(%8290) : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> !llvm.struct<(!llvm.ptr)>
    %8292 = "hi.cast"(%8288) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8293 = "mini.unwrap"(%8292) : (!mini.ptr<i32>) -> i32
    %8294 = "hi.cast"(%8289) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8295 = "mini.unwrap"(%8294) : (!mini.ptr<i32>) -> i32
    %8296 = "mini.unwrap"(%8287) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8297 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi32"]} : () -> !llvm.ptr
    %8298 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8299 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8300 = "mini.parameterizations_array"(%8297, %8298, %8299) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8300, %8296, %8291, %8293, %8295) {"offset" = 8 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8301 = "mini.unwrap"(%8287) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8302 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8303 = "mini.method_call"(%8302, %8301) {"offset" = 30 : i32, "vptrs" = [], "vtable_size" = 83 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %8304 = "hi.cast"(%8303) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %8305 = "hi.cast"(%8304) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!mini.fatptr<"String">) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8306 = "mini.unwrap"(%8305) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8307 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %8308 = "mini.parameterizations_array"(%8307) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8308, %8306) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8309 = "mini.literal"() {"value" = 77 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8310 = "mini.unwrap"(%8309) : (!mini.ptr<i32>) -> i32
    %8311 = "mini.new"() {"typ" = !llvm.struct<(i32)>, "class_name" = "Integer2", "num_data_fields" = 1 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Integer2">
    %8312 = "mini.literal"() {"value" = 77 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8313 = "hi.cast"(%8312) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8314 = "mini.unwrap"(%8313) : (!mini.ptr<i32>) -> i32
    %8315 = "mini.unwrap"(%8311) : (!mini.fatptr<"Integer2">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8316 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8317 = "mini.parameterizations_array"(%8316) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8317, %8315, %8314) {"offset" = 2 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 40 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> ()
    %8318 = "hi.cast"(%8311) {"from_typ" = !mini.fatptr<"Integer2">, "to_typ" = !mini.fatptr<"Integer2">, "from_typ_name" = "Integer2", "to_typ_name" = "Integer2"} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %8319 = "mini.refer"(%8318) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Integer2">) -> !mini.fatptr<"Integer2">
    %8320 = "mini.unwrap"(%8319) : (!mini.fatptr<"Integer2">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8321 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%8321, %8320) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 40 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %8322 = "hi.cast"(%8319) {"from_typ" = !mini.fatptr<"Integer2">, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "Integer2", "to_typ_name" = "union_typ"} : (!mini.fatptr<"Integer2">) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8323 = "mini.unwrap"(%8322) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8324 = "mini.parameterization"() {"id_hierarchy" = ["Integer2"], "name_hierarchy" = ["Integer2"]} : () -> !llvm.ptr
    %8325 = "mini.parameterizations_array"(%8324) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8325, %8323) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8326 = "mini.unwrap"(%8319) : (!mini.fatptr<"Integer2">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8327 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%8327, %8326) {"offset" = 8 : i32, "vptrs" = [], "vtable_size" = 40 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %8328 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8329 = "hi.cast"(%8328) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8330 = "mini.unwrap"(%8329) : (!mini.ptr<i32>) -> i32
    %8331 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8332 = "mini.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8333 = "mini.unwrap"(%8331) : (!mini.ptr<i32>) -> i32
    %8334 = "mini.unwrap"(%8332) : (!mini.ptr<i32>) -> i32
    %8335 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %8336 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8337 = "mini.literal"() {"value" = 25 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8338 = "hi.cast"(%8336) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8339 = "mini.unwrap"(%8338) : (!mini.ptr<i32>) -> i32
    %8340 = "hi.cast"(%8337) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8341 = "mini.unwrap"(%8340) : (!mini.ptr<i32>) -> i32
    %8342 = "mini.unwrap"(%8335) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8343 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8344 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8345 = "mini.parameterizations_array"(%8343, %8344) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8345, %8342, %8339, %8341) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 55 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %8346 = "mini.unwrap"(%8335) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8347 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8348 = "mini.parameterizations_array"(%8347) : (!llvm.ptr) -> !llvm.ptr
    %8349 = "mini.method_call"(%8348, %8346, %8330) {"offset" = 6 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 55 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32) -> !mini.fatptr<"Range">
    %8350 = "hi.cast"(%8349) {"from_typ" = !mini.fatptr<"Range">, "to_typ" = !mini.fatptr<"Range">, "from_typ_name" = "Range", "to_typ_name" = "Range"} : (!mini.fatptr<"Range">) -> !mini.fatptr<"Range">
    %8351 = "mini.unwrap"(%8350) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8352 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8353 = "mini.method_call"(%8352, %8351) {"offset" = 7 : i32, "vptrs" = [], "vtable_size" = 55 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %8354 = "hi.cast"(%8353) {"from_typ" = !mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"RangeIterator">, "from_typ_name" = "Iterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"Iterator", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"RangeIterator">
    %8355 = "hi.cast"(%8354) {"from_typ" = !mini.fatptr<"RangeIterator">, "to_typ" = !mini.fatptr<"RangeIterator">, "from_typ_name" = "RangeIterator", "to_typ_name" = "RangeIterator"} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    %8356 = "mini.refer"(%8355) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"RangeIterator">) -> !mini.fatptr<"RangeIterator">
    "mini.while"() ({
      %8357 = "mini.unwrap"(%8356) : (!mini.fatptr<"RangeIterator">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
      %8358 = "mini.parameterizations_array"() : () -> !llvm.ptr
      %8359 = "mini.method_call"(%8358, %8357) {"offset" = 5 : i32, "vptrs" = [], "vtable_size" = 11 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>
      %8360 = "hi.cast"(%8359) {"from_typ" = !mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>, "to_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.type_param<"T", !mini.any, "Iterator">, !mini.nil]>) -> !mini.union<[!mini.nil, !mini.ptr<i32>]>
      %8361 = "mini.checkflag"(%8360) {"typ_name" = "nil_typ", "neg"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.ptr<i1>
      %8362 = "mini.unwrap"(%8361) : (!mini.ptr<i1>) -> i1
    }, {
      %8363 = "hi.cast"(%8360) {"from_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "union_typ", "to_typ_name" = "i32_typ"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.ptr<i32>
      %8364 = "hi.cast"(%8363) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
      %8365 = "mini.unwrap"(%8364) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
      %8366 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
      %8367 = "mini.parameterizations_array"(%8366) : (!llvm.ptr) -> !llvm.ptr
      "mini.class_method_call"(%8367, %8365) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
      %8368 = "hi.cast"(%8363) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
      "mini.assign"(%8360, %8368) {"typ" = i32} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>, !mini.ptr<i32>) -> ()
    }) : () -> ()
    %8369 = "mini.addr_of"() {"global_name" = @_functionliteral_aawmpodyms} : () -> !llvm.ptr
    %8370 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%8369, %8370) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %8371 = "mini.addr_of"() {"global_name" = @_functionliteral_kgivmcmbfd} : () -> !llvm.ptr
    %8372 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%8371, %8372) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %8373 = "mini.addr_of"() {"global_name" = @_functionliteral_fqsttylcbv} : () -> !llvm.ptr
    %8374 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%8373, %8374) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %8375 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8376 = "hi.cast"(%8375) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!mini.ptr<i32>) -> !mini.type_param<"T", !mini.any, "Iterable">
    %8377 = "mini.unwrap"(%8376) : (!mini.type_param<"T", !mini.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
    %8378 = "hi.cast"(%8370) {"from_typ" = !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.ptr<i32>>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable">>
    %8379 = "mini.unwrap"(%8378) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable">>) -> !llvm.struct<(!llvm.ptr)>
    %8380 = "hi.cast"(%8372) {"from_typ" = !mini.function<[!mini.ptr<i32>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.ptr<i32>>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable">>
    %8381 = "mini.unwrap"(%8380) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable">>) -> !llvm.struct<(!llvm.ptr)>
    %8382 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8383 = "mini.create_buffer"(%8382) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8384 = "hi.cast"(%8383) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.ptr<i32>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i32>>
    %8385 = "mini.refer"(%8384) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %8386 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8387 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8388 = "hi.cast"(%8386) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8385, %8387, %8388) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8389 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8390 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8391 = "hi.cast"(%8389) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8385, %8390, %8391) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8392 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8393 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8394 = "hi.cast"(%8392) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8385, %8393, %8394) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8395 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8396 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8397 = "hi.cast"(%8395) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8385, %8396, %8397) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8398 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8399 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8400 = "mini.unwrap"(%8385) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %8401 = "mini.unwrap"(%8398) : (!mini.ptr<i32>) -> i32
    %8402 = "mini.unwrap"(%8399) : (!mini.ptr<i32>) -> i32
    %8403 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8404 = "mini.new"(%8403) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"Array", [!mini.ptr<i32>]>
    %8405 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8406 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8407 = "hi.cast"(%8385) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %8408 = "mini.unwrap"(%8407) : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> !llvm.struct<(!llvm.ptr)>
    %8409 = "hi.cast"(%8405) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8410 = "mini.unwrap"(%8409) : (!mini.ptr<i32>) -> i32
    %8411 = "hi.cast"(%8406) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8412 = "mini.unwrap"(%8411) : (!mini.ptr<i32>) -> i32
    %8413 = "mini.unwrap"(%8404) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8414 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi32"]} : () -> !llvm.ptr
    %8415 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8416 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8417 = "mini.parameterizations_array"(%8414, %8415, %8416) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8417, %8413, %8408, %8410, %8412) {"offset" = 8 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8418 = "mini.unwrap"(%8404) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8419 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
    %8420 = "mini.parameterizations_array"(%8419) : (!llvm.ptr) -> !llvm.ptr
    %8421 = "mini.method_call"(%8420, %8418, %8381) {"offset" = 24 : i32, "vptrs" = ["function_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>
    %8422 = "hi.cast"(%8421) {"from_typ" = !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"MapIterable", [!mini.ptr<i32>, !mini.ptr<i32>]>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable"} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>) -> !mini.fatptr<"MapIterable", [!mini.ptr<i32>, !mini.ptr<i32>]>
    %8423 = "mini.unwrap"(%8422) : (!mini.fatptr<"MapIterable", [!mini.ptr<i32>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8424 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8425 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_i32", ["i32"], ["i32"], ["i32"]]} : () -> !llvm.ptr
    %8426 = "mini.parameterizations_array"(%8424, %8425) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %8427 = "mini.method_call"(%8426, %8423, %8377, %8379) {"offset" = 7 : i32, "vptrs" = ["i32_typ", "function_typ"], "vtable_size" = 51 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>) -> !mini.type_param<"T", !mini.any, "Iterable">
    %8428 = "hi.cast"(%8427) {"from_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!mini.type_param<"T", !mini.any, "Iterable">) -> !mini.ptr<i32>
    %8429 = "hi.cast"(%8428) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8430 = "mini.unwrap"(%8429) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8431 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8432 = "mini.parameterizations_array"(%8431) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8432, %8430) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8433 = "mini.addr_of"() {"global_name" = @_functionliteral_huabycyhfr} : () -> !llvm.ptr
    %8434 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%8433, %8434) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %8435 = "hi.cast"(%8434) {"from_typ" = !mini.function<[!mini.ptr<i32>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.nothing>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.nothing>
    %8436 = "mini.unwrap"(%8435) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.nothing>) -> !llvm.struct<(!llvm.ptr)>
    %8437 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8438 = "mini.create_buffer"(%8437) {"typ" = i32, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8439 = "hi.cast"(%8438) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.ptr<i32>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i32>>
    %8440 = "mini.refer"(%8439) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.ptr<i32>>
    %8441 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8442 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8443 = "hi.cast"(%8441) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8440, %8442, %8443) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8444 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8445 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8446 = "hi.cast"(%8444) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8440, %8445, %8446) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8447 = "mini.literal"() {"value" = 7 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8448 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8449 = "hi.cast"(%8447) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8440, %8448, %8449) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8450 = "mini.literal"() {"value" = 8 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8451 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8452 = "hi.cast"(%8450) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    "mini.buffer_set"(%8440, %8451, %8452) {"typ" = i32} : (!mini.buffer<!mini.ptr<i32>>, !mini.ptr<i32>, !mini.ptr<i32>) -> ()
    %8453 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8454 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8455 = "mini.unwrap"(%8440) : (!mini.buffer<!mini.ptr<i32>>) -> !llvm.struct<(!llvm.ptr)>
    %8456 = "mini.unwrap"(%8453) : (!mini.ptr<i32>) -> i32
    %8457 = "mini.unwrap"(%8454) : (!mini.ptr<i32>) -> i32
    %8458 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8459 = "mini.new"(%8458) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "Array", "num_data_fields" = 3 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"Array", [!mini.ptr<i32>]>
    %8460 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8461 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8462 = "hi.cast"(%8440) {"from_typ" = !mini.buffer<!mini.ptr<i32>>, "to_typ" = !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i32>>) -> !mini.buffer<!mini.type_param<"T", !mini.any, "Array">>
    %8463 = "mini.unwrap"(%8462) : (!mini.buffer<!mini.type_param<"T", !mini.any, "Array">>) -> !llvm.struct<(!llvm.ptr)>
    %8464 = "hi.cast"(%8460) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8465 = "mini.unwrap"(%8464) : (!mini.ptr<i32>) -> i32
    %8466 = "hi.cast"(%8461) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8467 = "mini.unwrap"(%8466) : (!mini.ptr<i32>) -> i32
    %8468 = "mini.unwrap"(%8459) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8469 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi32"]} : () -> !llvm.ptr
    %8470 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8471 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8472 = "mini.parameterizations_array"(%8469, %8470, %8471) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8472, %8468, %8463, %8465, %8467) {"offset" = 8 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8473 = "mini.unwrap"(%8459) : (!mini.fatptr<"Array", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8474 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["nothing_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_Nothing", ["Nothing"], ["i32"]]} : () -> !llvm.ptr
    %8475 = "mini.parameterizations_array"(%8474) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8475, %8473, %8436) {"offset" = 20 : i32, "vptrs" = ["function_typ"], "vtable_size" = 83 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %8476 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8477 = "mini.create_buffer"(%8476) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8478 = "hi.cast"(%8477) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %8479 = "mini.refer"(%8478) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8480 = "mini.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "bigtings.txt"} : () -> !llvm.ptr
    %8481 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%8479, %8481, %8480) {"typ" = !llvm.array<12 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %8482 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8483 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8484 = "mini.unwrap"(%8479) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8485 = "mini.unwrap"(%8482) : (!mini.ptr<i32>) -> i32
    %8486 = "mini.unwrap"(%8483) : (!mini.ptr<i32>) -> i32
    %8487 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %8488 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8489 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8490 = "hi.cast"(%8479) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8491 = "mini.unwrap"(%8490) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8492 = "hi.cast"(%8488) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8493 = "mini.unwrap"(%8492) : (!mini.ptr<i32>) -> i32
    %8494 = "hi.cast"(%8489) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8495 = "mini.unwrap"(%8494) : (!mini.ptr<i32>) -> i32
    %8496 = "mini.unwrap"(%8487) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8497 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %8498 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8499 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8500 = "mini.parameterizations_array"(%8497, %8498, %8499) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8500, %8496, %8491, %8493, %8495) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8501 = "mini.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8502 = "mini.create_buffer"(%8501) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8503 = "hi.cast"(%8502) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %8504 = "mini.refer"(%8503) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8505 = "mini.literal"() {"typ" = !llvm.array<20 x i8>, "value" = "this\nis how\nwe do\nit"} : () -> !llvm.ptr
    %8506 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%8504, %8506, %8505) {"typ" = !llvm.array<20 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %8507 = "mini.literal"() {"value" = 20 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8508 = "mini.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8509 = "mini.unwrap"(%8504) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8510 = "mini.unwrap"(%8507) : (!mini.ptr<i32>) -> i32
    %8511 = "mini.unwrap"(%8508) : (!mini.ptr<i32>) -> i32
    %8512 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %8513 = "mini.literal"() {"value" = 20 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8514 = "mini.literal"() {"value" = 21 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8515 = "hi.cast"(%8504) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8516 = "mini.unwrap"(%8515) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8517 = "hi.cast"(%8513) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8518 = "mini.unwrap"(%8517) : (!mini.ptr<i32>) -> i32
    %8519 = "hi.cast"(%8514) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8520 = "mini.unwrap"(%8519) : (!mini.ptr<i32>) -> i32
    %8521 = "mini.unwrap"(%8512) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8522 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %8523 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8524 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8525 = "mini.parameterizations_array"(%8522, %8523, %8524) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8525, %8521, %8516, %8518, %8520) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8526 = "hi.cast"(%8487) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %8527 = "mini.unwrap"(%8526) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8528 = "hi.cast"(%8512) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %8529 = "mini.unwrap"(%8528) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8530 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %8531 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %8532 = "mini.parameterizations_array"(%8530, %8531) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8532, %8527, %8529) {"offset" = 2 : i32, "vptrs" = [#none, #none], "vtable_size" = 7 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "FileSystem"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %8533 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8534 = "mini.create_buffer"(%8533) {"typ" = i8, "region_id" = ""} : (!mini.ptr<i32>) -> !llvm.ptr
    %8535 = "hi.cast"(%8534) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!llvm.ptr) -> !mini.buffer<!mini.ptr<i8>>
    %8536 = "mini.refer"(%8535) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8537 = "mini.literal"() {"typ" = !llvm.array<12 x i8>, "value" = "bigtings.txt"} : () -> !llvm.ptr
    %8538 = "mini.literal"() {"typ" = i32, "value" = 0 : i32} : () -> !llvm.ptr
    "mini.buffer_set"(%8536, %8538, %8537) {"typ" = !llvm.array<12 x i8>} : (!mini.buffer<!mini.ptr<i8>>, !llvm.ptr, !llvm.ptr) -> ()
    %8539 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8540 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8541 = "mini.unwrap"(%8536) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8542 = "mini.unwrap"(%8539) : (!mini.ptr<i32>) -> i32
    %8543 = "mini.unwrap"(%8540) : (!mini.ptr<i32>) -> i32
    %8544 = "mini.new"() {"typ" = !llvm.struct<(!llvm.struct<(!llvm.ptr)>, i32, i32)>, "class_name" = "String", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"String">
    %8545 = "mini.literal"() {"value" = 12 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8546 = "mini.literal"() {"value" = 13 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8547 = "hi.cast"(%8536) {"from_typ" = !mini.buffer<!mini.ptr<i8>>, "to_typ" = !mini.buffer<!mini.ptr<i8>>, "from_typ_name" = "buffer_typ", "to_typ_name" = "buffer_typ"} : (!mini.buffer<!mini.ptr<i8>>) -> !mini.buffer<!mini.ptr<i8>>
    %8548 = "mini.unwrap"(%8547) : (!mini.buffer<!mini.ptr<i8>>) -> !llvm.struct<(!llvm.ptr)>
    %8549 = "hi.cast"(%8545) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8550 = "mini.unwrap"(%8549) : (!mini.ptr<i32>) -> i32
    %8551 = "hi.cast"(%8546) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8552 = "mini.unwrap"(%8551) : (!mini.ptr<i32>) -> i32
    %8553 = "mini.unwrap"(%8544) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8554 = "mini.parameterization"() {"id_hierarchy" = ["buffer_typ"], "name_hierarchy" = ["Bufferi8"]} : () -> !llvm.ptr
    %8555 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8556 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8557 = "mini.parameterizations_array"(%8554, %8555, %8556) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8557, %8553, %8548, %8550, %8552) {"offset" = 5 : i32, "vptrs" = ["buffer_typ", "i32_typ", "i32_typ"], "vtable_size" = 77 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>, i32, i32) -> ()
    %8558 = "hi.cast"(%8544) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %8559 = "mini.unwrap"(%8558) : (!mini.fatptr<"String">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8560 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %8561 = "mini.parameterizations_array"(%8560) : (!llvm.ptr) -> !llvm.ptr
    %8562 = "mini.class_method_call"(%8561, %8559) {"offset" = 1 : i32, "vptrs" = [#none], "vtable_size" = 7 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "class_name" = "FileSystem"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.fatptr<"String">
    %8563 = "hi.cast"(%8562) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.fatptr<"String">, "from_typ_name" = "String", "to_typ_name" = "String"} : (!mini.fatptr<"String">) -> !mini.fatptr<"String">
    %8564 = "hi.cast"(%8563) {"from_typ" = !mini.fatptr<"String">, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "String", "to_typ_name" = "union_typ"} : (!mini.fatptr<"String">) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8565 = "mini.unwrap"(%8564) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8566 = "mini.parameterization"() {"id_hierarchy" = ["String"], "name_hierarchy" = ["String"]} : () -> !llvm.ptr
    %8567 = "mini.parameterizations_array"(%8566) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8567, %8565) {"offset" = 0 : i32, "vptrs" = [#none], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8568 = "mini.addr_of"() {"global_name" = @_functionliteral_celgcexpvq} : () -> !llvm.ptr
    %8569 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%8568, %8569) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %8570 = "hi.cast"(%8569) {"from_typ" = !mini.function<[!mini.ptr<i32>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.nothing>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.nothing>
    %8571 = "mini.unwrap"(%8570) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.nothing>) -> !llvm.struct<(!llvm.ptr)>
    %8572 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8573 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8574 = "mini.unwrap"(%8572) : (!mini.ptr<i32>) -> i32
    %8575 = "mini.unwrap"(%8573) : (!mini.ptr<i32>) -> i32
    %8576 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %8577 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8578 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8579 = "hi.cast"(%8577) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8580 = "mini.unwrap"(%8579) : (!mini.ptr<i32>) -> i32
    %8581 = "hi.cast"(%8578) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8582 = "mini.unwrap"(%8581) : (!mini.ptr<i32>) -> i32
    %8583 = "mini.unwrap"(%8576) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8584 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8585 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8586 = "mini.parameterizations_array"(%8584, %8585) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8586, %8583, %8580, %8582) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 55 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %8587 = "mini.unwrap"(%8576) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8588 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["nothing_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_Nothing", ["Nothing"], ["i32"]]} : () -> !llvm.ptr
    %8589 = "mini.parameterizations_array"(%8588) : (!llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8589, %8587, %8571) {"offset" = 8 : i32, "vptrs" = ["function_typ"], "vtable_size" = 55 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> ()
    %8590 = "mini.addr_of"() {"global_name" = @i32toi8} : () -> !llvm.ptr
    %8591 = "mini.wrap"(%8590) : (!llvm.ptr) -> !llvm.ptr
    %8592 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8593 = "hi.cast"(%8592) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8594 = "mini.unwrap"(%8593) : (!mini.ptr<i32>) -> i32
    %8595 = "mini.unwrap"(%8591) : (!llvm.ptr) -> !llvm.ptr
    %8596 = "mini.fptr_call"(%8595, %8594) {"ret_type" = i8} : (!llvm.ptr, i32) -> !mini.ptr<i8>
    %8597 = "hi.cast"(%8596) {"from_typ" = !mini.ptr<i8>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i8_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i8>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8598 = "mini.unwrap"(%8597) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8599 = "mini.parameterization"() {"id_hierarchy" = ["i8_typ"], "name_hierarchy" = ["i8"]} : () -> !llvm.ptr
    %8600 = "mini.parameterizations_array"(%8599) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8600, %8598) {"offset" = 0 : i32, "vptrs" = ["i8_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8601 = "mini.addr_of"() {"global_name" = @_functionliteral_zckdguiuxy} : () -> !llvm.ptr
    %8602 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%8601, %8602) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %8603 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8604 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8605 = "mini.unwrap"(%8603) : (!mini.ptr<i32>) -> i32
    %8606 = "mini.unwrap"(%8604) : (!mini.ptr<i32>) -> i32
    %8607 = "mini.coro_create"(%8602, %8605, %8606) {"arg_passer" = @coroutine_fvfimafigw_passer, "buffer_filler" = @coroutine_fvfimafigw_buffer_filler} : (!llvm.ptr, i32, i32) -> !mini.coroutine<[!mini.union<[!mini.nil, !mini.ptr<i32>]>], !mini.ptr<i32>, !mini.nothing>
    %8608 = "hi.cast"(%8607) {"from_typ" = !mini.coroutine<[!mini.union<[!mini.nil, !mini.ptr<i32>]>], !mini.ptr<i32>, !mini.nothing>, "to_typ" = !mini.coroutine<[!mini.union<[!mini.nil, !mini.ptr<i32>]>], !mini.ptr<i32>, !mini.nothing>, "from_typ_name" = "coroutine_typ", "to_typ_name" = "coroutine_typ"} : (!mini.coroutine<[!mini.union<[!mini.nil, !mini.ptr<i32>]>], !mini.ptr<i32>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.nil, !mini.ptr<i32>]>], !mini.ptr<i32>, !mini.nothing>
    %8609 = "mini.refer"(%8608) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.nil, !mini.ptr<i32>]>], !mini.ptr<i32>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.nil, !mini.ptr<i32>]>], !mini.ptr<i32>, !mini.nothing>
    %8610 = "mini.literal"() {"value" = 2 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8611 = "hi.cast"(%8610) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.nil, !mini.ptr<i32>]>
    %8612 = "mini.unwrap"(%8611) : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i32)>
    %8613 = "mini.coro_call"(%8609, %8612) : (!mini.coroutine<[!mini.union<[!mini.nil, !mini.ptr<i32>]>], !mini.ptr<i32>, !mini.nothing>, !llvm.struct<(!llvm.ptr, i32)>) -> !llvm.struct<(!llvm.ptr, i32)>
    %8614 = "mini.wrap"(%8613) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.ptr<i32>]>
    %8615 = "hi.cast"(%8614) {"from_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8616 = "mini.unwrap"(%8615) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8617 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["nil_typ"], ["i32_typ"]], "name_hierarchy" = ["Nil_or_i32", ["Nil"], ["i32"]]} : () -> !llvm.ptr
    %8618 = "mini.parameterizations_array"(%8617) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8618, %8616) {"offset" = 0 : i32, "vptrs" = ["union_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8619 = "mini.literal"() {"value" = 3 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8620 = "hi.cast"(%8619) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.nil, !mini.ptr<i32>]>
    %8621 = "mini.unwrap"(%8620) : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i32)>
    %8622 = "mini.coro_call"(%8609, %8621) : (!mini.coroutine<[!mini.union<[!mini.nil, !mini.ptr<i32>]>], !mini.ptr<i32>, !mini.nothing>, !llvm.struct<(!llvm.ptr, i32)>) -> !llvm.struct<(!llvm.ptr, i32)>
    %8623 = "mini.wrap"(%8622) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.ptr<i32>]>
    %8624 = "hi.cast"(%8623) {"from_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8625 = "mini.unwrap"(%8624) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8626 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["nil_typ"], ["i32_typ"]], "name_hierarchy" = ["Nil_or_i32", ["Nil"], ["i32"]]} : () -> !llvm.ptr
    %8627 = "mini.parameterizations_array"(%8626) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8627, %8625) {"offset" = 0 : i32, "vptrs" = ["union_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8628 = "mini.coro_create"(%8374) {"arg_passer" = @coroutine_luopxlwzzk_passer, "buffer_filler" = @coroutine_luopxlwzzk_buffer_filler} : (!llvm.ptr) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.nil, !mini.ptr<i32>]>>
    %8629 = "hi.cast"(%8628) {"from_typ" = !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.nil, !mini.ptr<i32>]>>, "to_typ" = !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.nil, !mini.ptr<i32>]>>, "from_typ_name" = "coroutine_typ", "to_typ_name" = "coroutine_typ"} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.nil, !mini.ptr<i32>]>>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.nil, !mini.ptr<i32>]>>
    %8630 = "mini.refer"(%8629) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.nil, !mini.ptr<i32>]>>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.nil, !mini.ptr<i32>]>>
    %8631 = "mini.coro_call"(%8630) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.nil, !mini.ptr<i32>]>>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8632 = "mini.wrap"(%8631) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %8633 = "llvm.load"(%8630) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.union<[!mini.nil, !mini.ptr<i32>]>>) -> !llvm.ptr
    %8634 = "mini.coro_get_result"(%8633) : (!llvm.ptr) -> !llvm.struct<(!llvm.ptr, i32)>
    %8635 = "mini.wrap"(%8634) : (!llvm.struct<(!llvm.ptr, i32)>) -> !mini.union<[!mini.nil, !mini.ptr<i32>]>
    %8636 = "hi.cast"(%8635) {"from_typ" = !mini.union<[!mini.nil, !mini.ptr<i32>]>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "union_typ", "to_typ_name" = "union_typ"} : (!mini.union<[!mini.nil, !mini.ptr<i32>]>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8637 = "mini.unwrap"(%8636) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8638 = "mini.parameterization"() {"id_hierarchy" = ["union_typ", ["nil_typ"], ["i32_typ"]], "name_hierarchy" = ["Nil_or_i32", ["Nil"], ["i32"]]} : () -> !llvm.ptr
    %8639 = "mini.parameterizations_array"(%8638) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8639, %8637) {"offset" = 0 : i32, "vptrs" = ["union_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8640 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8641 = "mini.new"(%8640) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>)>, "class_name" = "Channel", "num_data_fields" = 1 : i32, "region_id" = "none", "has_type_fields"} : (!llvm.ptr) -> !mini.fatptr<"Channel", [!mini.ptr<i32>]>
    %8642 = "mini.unwrap"(%8641) : (!mini.fatptr<"Channel", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8643 = "mini.parameterizations_array"() : () -> !llvm.ptr
    "mini.method_call"(%8643, %8642) {"offset" = 2 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> ()
    %8644 = "hi.cast"(%8641) {"from_typ" = !mini.fatptr<"Channel", [!mini.ptr<i32>]>, "to_typ" = !mini.fatptr<"Channel", [!mini.ptr<i32>]>, "from_typ_name" = "Channel", "to_typ_name" = "Channel"} : (!mini.fatptr<"Channel", [!mini.ptr<i32>]>) -> !mini.fatptr<"Channel", [!mini.ptr<i32>]>
    %8645 = "mini.refer"(%8644) {"typ" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!mini.fatptr<"Channel", [!mini.ptr<i32>]>) -> !mini.fatptr<"Channel", [!mini.ptr<i32>]>
    %8646 = "mini.addr_of"() {"global_name" = @_functionliteral_jfuijcegou} : () -> !llvm.ptr
    %8647 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%8646, %8647) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %8648 = "mini.unwrap"(%8645) : (!mini.fatptr<"Channel", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8649 = "mini.coro_create"(%8647, %8648) {"arg_passer" = @coroutine_rvyftlgybn_passer, "buffer_filler" = @coroutine_rvyftlgybn_buffer_filler} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %8650 = "hi.cast"(%8649) {"from_typ" = !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>, "to_typ" = !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>, "from_typ_name" = "coroutine_typ", "to_typ_name" = "coroutine_typ"} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %8651 = "mini.refer"(%8650) {"typ" = !llvm.struct<(!llvm.ptr)>} : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>
    %8652 = "mini.coro_call"(%8651) : (!mini.coroutine<[!mini.union<[!mini.fatptr<"Exception">, !mini.nil]>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.nothing>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8653 = "mini.wrap"(%8652) : (!llvm.struct<(!llvm.ptr, i160)>) -> !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>
    %8654 = "mini.unwrap"(%8645) : (!mini.fatptr<"Channel", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8655 = "mini.parameterizations_array"() : () -> !llvm.ptr
    %8656 = "mini.method_call"(%8655, %8654) {"offset" = 3 : i32, "vptrs" = [], "vtable_size" = 8 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>) -> !mini.type_param<"T", !mini.any, "Channel">
    %8657 = "hi.cast"(%8656) {"from_typ" = !mini.type_param<"T", !mini.any, "Channel">, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!mini.type_param<"T", !mini.any, "Channel">) -> !mini.ptr<i32>
    %8658 = "hi.cast"(%8657) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8659 = "mini.unwrap"(%8658) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8660 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8661 = "mini.parameterizations_array"(%8660) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8661, %8659) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8662 = "mini.literal"() {"value" = 0 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8663 = "hi.cast"(%8662) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "from_typ_name" = "i32_typ", "to_typ_name" = "any_typ"} : (!mini.ptr<i32>) -> !mini.type_param<"T", !mini.any, "Iterable">
    %8664 = "mini.unwrap"(%8663) : (!mini.type_param<"T", !mini.any, "Iterable">) -> !llvm.struct<(!llvm.ptr, i160)>
    %8665 = "hi.cast"(%8370) {"from_typ" = !mini.function<[!mini.ptr<i32>, !mini.ptr<i32>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.ptr<i32>>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable">>
    %8666 = "mini.unwrap"(%8665) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"T", !mini.any, "Iterable">>) -> !llvm.struct<(!llvm.ptr)>
    %8667 = "mini.addr_of"() {"global_name" = @_functionliteral_iravxoewyu} : () -> !llvm.ptr
    %8668 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%8667, %8668) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %8669 = "hi.cast"(%8668) {"from_typ" = !mini.function<[!mini.ptr<i32>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.ptr<i1>>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>
    %8670 = "mini.unwrap"(%8669) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.ptr<i1>>) -> !llvm.struct<(!llvm.ptr)>
    %8671 = "mini.addr_of"() {"global_name" = @_functionliteral_mutpkxirlo} : () -> !llvm.ptr
    %8672 = "mini.alloc"() {"typ" = !llvm.ptr} : () -> !llvm.ptr
    "llvm.store"(%8671, %8672) <{"ordering" = 0 : i64}> : (!llvm.ptr, !llvm.ptr) -> ()
    %8673 = "hi.cast"(%8672) {"from_typ" = !mini.function<[!mini.ptr<i32>], !mini.union<[!mini.fatptr<"Exception">, !mini.nil]>, !mini.ptr<i32>>, "to_typ" = !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable">>, "from_typ_name" = "function_typ", "to_typ_name" = "function_typ"} : (!llvm.ptr) -> !mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable">>
    %8674 = "mini.unwrap"(%8673) : (!mini.function<[!mini.type_param<"T", !mini.any, "Iterable">], !mini.any, !mini.type_param<"U", !mini.any, "Iterable">>) -> !llvm.struct<(!llvm.ptr)>
    %8675 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8676 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8677 = "mini.unwrap"(%8675) : (!mini.ptr<i32>) -> i32
    %8678 = "mini.unwrap"(%8676) : (!mini.ptr<i32>) -> i32
    %8679 = "mini.new"() {"typ" = !llvm.struct<(i32, i32, i32)>, "class_name" = "Range", "num_data_fields" = 3 : i32, "region_id" = "none"} : () -> !mini.fatptr<"Range">
    %8680 = "mini.literal"() {"value" = 1 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8681 = "mini.literal"() {"value" = 15 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8682 = "hi.cast"(%8680) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8683 = "mini.unwrap"(%8682) : (!mini.ptr<i32>) -> i32
    %8684 = "hi.cast"(%8681) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "i32_typ", "to_typ_name" = "i32_typ"} : (!mini.ptr<i32>) -> !mini.ptr<i32>
    %8685 = "mini.unwrap"(%8684) : (!mini.ptr<i32>) -> i32
    %8686 = "mini.unwrap"(%8679) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8687 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8688 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8689 = "mini.parameterizations_array"(%8687, %8688) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    "mini.method_call"(%8689, %8686, %8683, %8685) {"offset" = 5 : i32, "vptrs" = ["i32_typ", "i32_typ"], "vtable_size" = 55 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, i32, i32) -> ()
    %8690 = "mini.unwrap"(%8679) : (!mini.fatptr<"Range">) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8691 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i32", ["i32"], ["i32"]]} : () -> !llvm.ptr
    %8692 = "mini.parameterizations_array"(%8691) : (!llvm.ptr) -> !llvm.ptr
    %8693 = "mini.method_call"(%8692, %8690, %8674) {"offset" = 12 : i32, "vptrs" = ["function_typ"], "vtable_size" = 55 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>
    %8694 = "hi.cast"(%8693) {"from_typ" = !mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"MapIterable", [!mini.ptr<i32>, !mini.ptr<i32>]>, "from_typ_name" = "MapIterable", "to_typ_name" = "MapIterable"} : (!mini.fatptr<"MapIterable", [!mini.type_param<"T", !mini.any, "Iterable">, !mini.type_param<"U", !mini.any, "Iterable">]>) -> !mini.fatptr<"MapIterable", [!mini.ptr<i32>, !mini.ptr<i32>]>
    %8695 = "mini.unwrap"(%8694) : (!mini.fatptr<"MapIterable", [!mini.ptr<i32>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8696 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["bool_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32_to_i1", ["i1"], ["i32"]]} : () -> !llvm.ptr
    %8697 = "mini.parameterizations_array"(%8696) : (!llvm.ptr) -> !llvm.ptr
    %8698 = "mini.method_call"(%8697, %8695, %8670) {"offset" = 11 : i32, "vptrs" = ["function_typ"], "vtable_size" = 51 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr)>) -> !mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>
    %8699 = "hi.cast"(%8698) {"from_typ" = !mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>, "to_typ" = !mini.fatptr<"FilterIterable", [!mini.ptr<i32>]>, "from_typ_name" = "FilterIterable", "to_typ_name" = "FilterIterable"} : (!mini.fatptr<"FilterIterable", [!mini.type_param<"T", !mini.any, "Iterable">]>) -> !mini.fatptr<"FilterIterable", [!mini.ptr<i32>]>
    %8700 = "mini.unwrap"(%8699) : (!mini.fatptr<"FilterIterable", [!mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>
    %8701 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8702 = "mini.parameterization"() {"id_hierarchy" = ["function_typ", ["i32_typ"], ["i32_typ"], ["i32_typ"]], "name_hierarchy" = ["Functioni32._i32_to_i32", ["i32"], ["i32"], ["i32"]]} : () -> !llvm.ptr
    %8703 = "mini.parameterizations_array"(%8701, %8702) : (!llvm.ptr, !llvm.ptr) -> !llvm.ptr
    %8704 = "mini.method_call"(%8703, %8700, %8664, %8666) {"offset" = 6 : i32, "vptrs" = ["i32_typ", "function_typ"], "vtable_size" = 50 : i64, "ret_type" = !llvm.struct<(!llvm.ptr, i160)>, "ret_type_unq" = !llvm.struct<(!llvm.ptr, i160)>} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, !llvm.ptr, !llvm.ptr, i32)>, !llvm.struct<(!llvm.ptr, i160)>, !llvm.struct<(!llvm.ptr)>) -> !mini.type_param<"T", !mini.any, "Iterable">
    %8705 = "hi.cast"(%8704) {"from_typ" = !mini.type_param<"T", !mini.any, "Iterable">, "to_typ" = !mini.ptr<i32>, "from_typ_name" = "any_typ", "to_typ_name" = "i32_typ"} : (!mini.type_param<"T", !mini.any, "Iterable">) -> !mini.ptr<i32>
    %8706 = "hi.cast"(%8705) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8707 = "mini.unwrap"(%8706) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8708 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8709 = "mini.parameterizations_array"(%8708) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8709, %8707) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8710 = "mini.literal"() {"value" = 256 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8711 = "hi.cast"(%8710) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8712 = "mini.unwrap"(%8711) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8713 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8714 = "mini.parameterizations_array"(%8713) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8714, %8712) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
    %8715 = "mini.literal"() {"value" = 4 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8716 = "mini.literal"() {"value" = 5 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8717 = "mini.literal"() {"value" = 6 : i32, "typ" = i32} : () -> !mini.ptr<i32>
    %8718 = "mini.unwrap"(%8715) : (!mini.ptr<i32>) -> i32
    %8719 = "mini.unwrap"(%8716) : (!mini.ptr<i32>) -> i32
    %8720 = "mini.unwrap"(%8717) : (!mini.ptr<i32>) -> i32
    %8721 = "mini.create_tuple"(%8718, %8719, %8720) {"typ" = !llvm.struct<(i32, i32, i32)>} : (i32, i32, i32) -> !mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>, !mini.ptr<i32>]>
    %8722 = "mini.tuple_indexation"(%8721) {"typ" = !llvm.struct<(i32, i32, i32)>, "index" = 1 : i32} : (!mini.tuple<[!mini.ptr<i32>, !mini.ptr<i32>, !mini.ptr<i32>]>) -> !mini.ptr<i32>
    %8723 = "hi.cast"(%8722) {"from_typ" = !mini.ptr<i32>, "to_typ" = !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>, "from_typ_name" = "i32_typ", "to_typ_name" = "union_typ"} : (!mini.ptr<i32>) -> !mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>
    %8724 = "mini.unwrap"(%8723) : (!mini.union<[!mini.fatptr<"Character">, !mini.ptr<i8>, !mini.ptr<i1>, !mini.fatptr<"Representable">, !mini.ptr<f64>, !mini.nil, !mini.ptr<i64>, !mini.ptr<i32>]>) -> !llvm.struct<(!llvm.ptr, i160)>
    %8725 = "mini.parameterization"() {"id_hierarchy" = ["i32_typ"], "name_hierarchy" = ["i32"]} : () -> !llvm.ptr
    %8726 = "mini.parameterizations_array"(%8725) : (!llvm.ptr) -> !llvm.ptr
    "mini.class_method_call"(%8726, %8724) {"offset" = 0 : i32, "vptrs" = ["i32_typ"], "vtable_size" = 10 : i64, "ret_type" = !llvm.void, "ret_type_unq" = !llvm.void, "class_name" = "IO"} : (!llvm.ptr, !llvm.struct<(!llvm.ptr, i160)>) -> ()
  }) {"main_name" = "_main_zrwcinittk"} : () -> ()
}
