; ModuleID = 'llvm-link'
source_filename = "llvm-link"

@Pair_field_first = internal constant { ptr, ptr } { ptr @Pair_getter_first, ptr @Pair_setter_first }
@Pair_field_second = internal constant { ptr, ptr } { ptr @Pair_getter_second, ptr @Pair_setter_second }
@MapIterable_field_iterable = internal constant { ptr, ptr } { ptr @MapIterable_getter_iterable, ptr @MapIterable_setter_iterable }
@MapIterable_field_f = internal constant { ptr, ptr } { ptr @MapIterable_getter_f, ptr @MapIterable_setter_f }
@MapIterator_field_iterator = internal constant { ptr, ptr } { ptr @MapIterator_getter_iterator, ptr @MapIterator_setter_iterator }
@MapIterator_field_f = internal constant { ptr, ptr } { ptr @MapIterator_getter_f, ptr @MapIterator_setter_f }
@FilterIterable_field_iterable = internal constant { ptr, ptr } { ptr @FilterIterable_getter_iterable, ptr @FilterIterable_setter_iterable }
@FilterIterable_field_f = internal constant { ptr, ptr } { ptr @FilterIterable_getter_f, ptr @FilterIterable_setter_f }
@FilterIterator_field_iterator = internal constant { ptr, ptr } { ptr @FilterIterator_getter_iterator, ptr @FilterIterator_setter_iterator }
@FilterIterator_field_f = internal constant { ptr, ptr } { ptr @FilterIterator_getter_f, ptr @FilterIterator_setter_f }
@ChainIterable_field_first = internal constant { ptr, ptr } { ptr @ChainIterable_getter_first, ptr @ChainIterable_setter_first }
@ChainIterable_field_second = internal constant { ptr, ptr } { ptr @ChainIterable_getter_second, ptr @ChainIterable_setter_second }
@ChainIterator_field_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_first, ptr @ChainIterator_setter_first }
@ChainIterator_field_second = internal constant { ptr, ptr } { ptr @ChainIterator_getter_second, ptr @ChainIterator_setter_second }
@ChainIterator_field_on_first = internal constant { ptr, ptr } { ptr @ChainIterator_getter_on_first, ptr @ChainIterator_setter_on_first }
@InterleaveIterable_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_first, ptr @InterleaveIterable_setter_first }
@InterleaveIterable_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterable_getter_second, ptr @InterleaveIterable_setter_second }
@InterleaveIterator_field_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_first, ptr @InterleaveIterator_setter_first }
@InterleaveIterator_field_second = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_second, ptr @InterleaveIterator_setter_second }
@InterleaveIterator_field_on_first = internal constant { ptr, ptr } { ptr @InterleaveIterator_getter_on_first, ptr @InterleaveIterator_setter_on_first }
@ZipIterable_field_first = internal constant { ptr, ptr } { ptr @ZipIterable_getter_first, ptr @ZipIterable_setter_first }
@ZipIterable_field_second = internal constant { ptr, ptr } { ptr @ZipIterable_getter_second, ptr @ZipIterable_setter_second }
@ZipIterator_field_first = internal constant { ptr, ptr } { ptr @ZipIterator_getter_first, ptr @ZipIterator_setter_first }
@ZipIterator_field_second = internal constant { ptr, ptr } { ptr @ZipIterator_getter_second, ptr @ZipIterator_setter_second }
@ProductIterable_field_first = internal constant { ptr, ptr } { ptr @ProductIterable_getter_first, ptr @ProductIterable_setter_first }
@ProductIterable_field_second = internal constant { ptr, ptr } { ptr @ProductIterable_getter_second, ptr @ProductIterable_setter_second }
@ProductIterator_field_first_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_first_iterator, ptr @ProductIterator_setter_first_iterator }
@ProductIterator_field_second_iterator = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterator, ptr @ProductIterator_setter_second_iterator }
@ProductIterator_field_second_iterable = internal constant { ptr, ptr } { ptr @ProductIterator_getter_second_iterable, ptr @ProductIterator_setter_second_iterable }
@ProductIterator_field_current_first = internal constant { ptr, ptr } { ptr @ProductIterator_getter_current_first, ptr @ProductIterator_setter_current_first }
@String_field_bytes = internal constant { ptr, ptr } { ptr @String_getter_bytes, ptr @String_setter_bytes }
@String_field_length = internal constant { ptr, ptr } { ptr @String_getter_length, ptr @String_setter_length }
@String_field_capacity = internal constant { ptr, ptr } { ptr @String_getter_capacity, ptr @String_setter_capacity }
@Character_field_byte = internal constant { ptr, ptr } { ptr @Character_getter_byte, ptr @Character_setter_byte }
@StringIterator_field_str = internal constant { ptr, ptr } { ptr @StringIterator_getter_str, ptr @StringIterator_setter_str }
@StringIterator_field_index = internal constant { ptr, ptr } { ptr @StringIterator_getter_index, ptr @StringIterator_setter_index }
@Exception_field_line_number = internal constant { ptr, ptr } { ptr @Exception_getter_line_number, ptr @Exception_setter_line_number }
@Exception_field_file_name = internal constant { ptr, ptr } { ptr @Exception_getter_file_name, ptr @Exception_setter_file_name }
@Exception_field_message = internal constant { ptr, ptr } { ptr @Exception_getter_message, ptr @Exception_setter_message }
@Channel_field_value = internal constant { ptr, ptr } { ptr @Channel_getter_value, ptr @Channel_setter_value }
@Array_field_buffer = internal constant { ptr, ptr } { ptr @Array_getter_buffer, ptr @Array_setter_buffer }
@Array_field_length = internal constant { ptr, ptr } { ptr @Array_getter_length, ptr @Array_setter_length }
@Array_field_capacity = internal constant { ptr, ptr } { ptr @Array_getter_capacity, ptr @Array_setter_capacity }
@ArrayIterator_field_array = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_array, ptr @ArrayIterator_setter_array }
@ArrayIterator_field_index = internal constant { ptr, ptr } { ptr @ArrayIterator_getter_index, ptr @ArrayIterator_setter_index }
@Range_field_start = internal constant { ptr, ptr } { ptr @Range_getter_start, ptr @Range_setter_start }
@Range_field_end = internal constant { ptr, ptr } { ptr @Range_getter_end, ptr @Range_setter_end }
@Range_field_step = internal constant { ptr, ptr } { ptr @Range_getter_step, ptr @Range_setter_step }
@RangeIterator_field_counter = internal constant { ptr, ptr } { ptr @RangeIterator_getter_counter, ptr @RangeIterator_setter_counter }
@RangeIterator_field_end = internal constant { ptr, ptr } { ptr @RangeIterator_getter_end, ptr @RangeIterator_setter_end }
@RangeIterator_field_step = internal constant { ptr, ptr } { ptr @RangeIterator_getter_step, ptr @RangeIterator_setter_step }
@FileSystemError_field_line_number = internal constant { ptr, ptr } { ptr @FileSystemError_getter_line_number, ptr @FileSystemError_setter_line_number }
@FileSystemError_field_file_name = internal constant { ptr, ptr } { ptr @FileSystemError_getter_file_name, ptr @FileSystemError_setter_file_name }
@FileSystemError_field_message = internal constant { ptr, ptr } { ptr @FileSystemError_getter_message, ptr @FileSystemError_setter_message }
@File_field_name = internal constant { ptr, ptr } { ptr @File_getter_name, ptr @File_setter_name }
@File_field_mode = internal constant { ptr, ptr } { ptr @File_getter_mode, ptr @File_setter_mode }
@File_field_handle = internal constant { ptr, ptr } { ptr @File_getter_handle, ptr @File_setter_handle }
@File_field_open = internal constant { ptr, ptr } { ptr @File_getter_open, ptr @File_setter_open }
@FileWriter_field_text = internal constant { ptr, ptr } { ptr @FileWriter_getter_text, ptr @FileWriter_setter_text }
@Integer_field_value = internal constant { ptr, ptr } { ptr @Integer_getter_value, ptr @Integer_setter_value }
@Integer2_field_value = internal constant { ptr, ptr } { ptr @Integer2_getter_value, ptr @Integer2_setter_value }
@Animal_field_age = internal constant { ptr, ptr } { ptr @Animal_getter_age, ptr @Animal_setter_age }
@Animal_field_hp = internal constant { ptr, ptr } { ptr @Animal_getter_hp, ptr @Animal_setter_hp }
@Animal_field_skill = internal constant { ptr, ptr } { ptr @Animal_getter_skill, ptr @Animal_setter_skill }
@Beaver_field_color = internal constant { ptr, ptr } { ptr @Beaver_getter_color, ptr @Beaver_setter_color }
@Beaver_field_name = internal constant { ptr, ptr } { ptr @Beaver_getter_name, ptr @Beaver_setter_name }
@ListNode_field_data = internal constant { ptr, ptr } { ptr @ListNode_getter_data, ptr @ListNode_setter_data }
@ListNode_field_next = internal constant { ptr, ptr } { ptr @ListNode_getter_next, ptr @ListNode_setter_next }
@ListIterator_field_node = internal constant { ptr, ptr } { ptr @ListIterator_getter_node, ptr @ListIterator_setter_node }
@string_string = internal constant [4 x i8] c"%s\0A\00"
@exception_message = internal constant [45 x i8] c"Error: uncaught exception. Program aborted.\0A\00"
@into_caller_buf = linkonce_odr thread_local global [3 x ptr] zeroinitializer
@current_coroutine = linkonce_odr thread_local global ptr null
@always_one = linkonce thread_local global i1 true
@current_ptr = internal thread_local global ptr null
@bool_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @bool_typ]
@bool_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@i8_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @i8_typ]
@i8_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@i32_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @i32_typ, ptr null]
@i32_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@i64_typ_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @Object, ptr @i64_typ, ptr null]
@i64_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@f64_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @f64_typ]
@f64_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@nil_typ_hashtbl = constant [2 x ptr] [ptr @nil_typ, ptr @any_typ]
@nil_typ_offset_tbl = constant [2 x i32] [i32 10, i32 10]
@any_typ_hashtbl = constant [1 x ptr] [ptr @any_typ]
@any_typ_offset_tbl = constant [1 x i32] [i32 10]
@nothing_typ_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @nothing_typ]
@nothing_typ_offset_tbl = constant [4 x i32] [i32 0, i32 10, i32 10, i32 10]
@function_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @function_typ, ptr null]
@function_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@buffer_typ_hashtbl = constant [4 x ptr] [ptr @Object, ptr @buffer_typ, ptr @any_typ, ptr null]
@buffer_typ_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 10, i32 0]
@union_typ_hashtbl = constant [4 x ptr] [ptr @union_typ, ptr null, ptr @any_typ, ptr @Object]
@union_typ_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 10]
@Object_hashtbl = constant [2 x ptr] [ptr @Object, ptr @any_typ]
@Object_offset_tbl = constant [2 x i32] [i32 10, i32 10]
@_parameterization_Nothing = linkonce_odr constant [2 x ptr] [ptr @nothing_typ, ptr null]
@_parameterization_Nil = linkonce_odr constant [2 x ptr] [ptr @nil_typ, ptr null]
@_parameterization_Functioni32_to_i1 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_i1, ptr @_parameterization_i32, ptr null]
@_parameterization_Nil_or_i32 = linkonce_odr constant [4 x ptr] [ptr @union_typ, ptr @_parameterization_Nil, ptr @_parameterization_i32, ptr null]
@_parameterization_Functioni32_to_Nothing = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_Nothing, ptr @_parameterization_i32, ptr null]
@_parameterization_Functioni32._i32_to_i32 = linkonce_odr constant [5 x ptr] [ptr @function_typ, ptr @_parameterization_i32, ptr @_parameterization_i32, ptr @_parameterization_i32, ptr null]
@_parameterization_Functioni32_to_i32 = linkonce_odr constant [4 x ptr] [ptr @function_typ, ptr @_parameterization_i32, ptr @_parameterization_i32, ptr null]
@_parameterization_Integer2 = linkonce_odr constant [2 x ptr] [ptr @Integer2, ptr null]
@_parameterization_Character = linkonce_odr constant [2 x ptr] [ptr @Character, ptr null]
@_parameterization_i64 = linkonce_odr constant [2 x ptr] [ptr @i64_typ, ptr null]
@_parameterization_Arrayi32 = linkonce_odr constant [3 x ptr] [ptr @Array, ptr @_parameterization_i32, ptr null]
@_parameterization_Bufferi32 = linkonce_odr constant [2 x ptr] [ptr @buffer_typ, ptr null]
@_parameterization_Beaver = linkonce_odr constant [2 x ptr] [ptr @Beaver, ptr null]
@_parameterization_Animal = linkonce_odr constant [2 x ptr] [ptr @Animal, ptr null]
@_parameterization_f64_or_i32 = linkonce_odr constant [4 x ptr] [ptr @union_typ, ptr @_parameterization_f64, ptr @_parameterization_i32, ptr null]
@_parameterization_i1 = linkonce_odr constant [2 x ptr] [ptr @bool_typ, ptr null]
@_parameterization_ListNode = linkonce_odr constant [2 x ptr] [ptr @ListNode, ptr null]
@_parameterization_f64 = linkonce_odr constant [2 x ptr] [ptr @f64_typ, ptr null]
@_parameterization_FileWriter = linkonce_odr constant [2 x ptr] [ptr @FileWriter, ptr null]
@_parameterization_FileReader = linkonce_odr constant [2 x ptr] [ptr @FileReader, ptr null]
@_parameterization_File = linkonce_odr constant [2 x ptr] [ptr @File, ptr null]
@_parameterization_i8 = linkonce_odr constant [2 x ptr] [ptr @i8_typ, ptr null]
@_parameterization_String = linkonce_odr constant [2 x ptr] [ptr @String, ptr null]
@_parameterization_i32 = linkonce_odr constant [2 x ptr] [ptr @i32_typ, ptr null]
@_parameterization_Bufferi8 = linkonce_odr constant [2 x ptr] [ptr @buffer_typ, ptr null]
@i32_string = linkonce_odr constant [4 x i8] c"%d\0A\00"
@i64_string = linkonce_odr constant [6 x i8] c"%lld\0A\00"
@float_string = linkonce_odr constant [4 x i8] c"%f\0A\00"
@bool_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 5801531371504802705, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @bool_typ_hashtbl, ptr @bool_typ_offset_tbl, ptr @_data_size_bool_typ, ptr @_box_bool_typ, ptr @_unbox_bool_typ, ptr @_data_size_bool_typ], [0 x ptr] undef }
@i8_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 2582149688529881115, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i8_typ_hashtbl, ptr @i8_typ_offset_tbl, ptr @_data_size_i8_typ, ptr @_box_i8_typ, ptr @_unbox_i8_typ, ptr @_data_size_i8_typ], [0 x ptr] undef }
@i32_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -2253724949814257982, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i32_typ_hashtbl, ptr @i32_typ_offset_tbl, ptr @_data_size_i32_typ, ptr @_box_i32_typ, ptr @_unbox_i32_typ, ptr @_data_size_i32_typ], [0 x ptr] undef }
@i64_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7469797244461771922, i64 4611686018427388157, i64 3], [7 x ptr] [ptr @subtype_test, ptr @i64_typ_hashtbl, ptr @i64_typ_offset_tbl, ptr @_data_size_i64_typ, ptr @_box_i64_typ, ptr @_unbox_i64_typ, ptr @_data_size_i64_typ], [0 x ptr] undef }
@f64_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -757315540097298781, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @f64_typ_hashtbl, ptr @f64_typ_offset_tbl, ptr @_data_size_f64_typ, ptr @_box_f64_typ, ptr @_unbox_f64_typ, ptr @_data_size_f64_typ], [0 x ptr] undef }
@nil_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -5126806859456325683, i64 4611686018427388081, i64 1], [7 x ptr] [ptr @subtype_test, ptr @nil_typ_hashtbl, ptr @nil_typ_offset_tbl, ptr @_data_size_nil_typ, ptr @_box_nil_typ, ptr @_unbox_nil_typ, ptr @_data_size_nil_typ], [0 x ptr] undef }
@any_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3084208142191802847, i64 4611686018427388073, i64 0], [7 x ptr] [ptr @subtype_test, ptr @any_typ_hashtbl, ptr @any_typ_offset_tbl, ptr @_data_size_any_typ, ptr @_box_Default, ptr @_unbox_Default, ptr @_data_size_any_typ], [0 x ptr] undef }
@nothing_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -3334456163433371378, i64 4611686018427388097, i64 3], [7 x ptr] [ptr @subtype_test, ptr @nothing_typ_hashtbl, ptr @nothing_typ_offset_tbl, ptr @_data_size_nothing_typ, ptr @_box_nothing_typ, ptr @_unbox_nothing_typ, ptr @_data_size_nothing_typ], [0 x ptr] undef }
@function_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 7927147055246173914, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @function_typ_hashtbl, ptr @function_typ_offset_tbl, ptr @_data_size_function_typ, ptr @_box_function_typ, ptr @_unbox_function_typ, ptr @_data_size_function_typ], [0 x ptr] undef }
@buffer_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -318192747195410237, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @buffer_typ_hashtbl, ptr @buffer_typ_offset_tbl, ptr @_data_size_buffer_typ, ptr @_box_buffer_typ, ptr @_unbox_buffer_typ, ptr @_data_size_buffer_typ], [0 x ptr] undef }
@union_typ = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 -7543233778997666740, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @union_typ_hashtbl, ptr @union_typ_offset_tbl, ptr @_data_size_union_typ, ptr @_box_union_typ, ptr @_unbox_union_typ, ptr @_data_size_union_typ], [0 x ptr] undef }
@Object = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3282773614056351330, i64 4611686018427388081, i64 1], [7 x ptr] [ptr @subtype_test, ptr @Object_hashtbl, ptr @Object_offset_tbl, ptr @_data_size_Object, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Pair_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Pair, ptr null]
@Pair_offset_tbl = constant [4 x i32] [i32 20, i32 10, i32 10, i32 0]
@Pair = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 9197944775169318296, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Pair_hashtbl, ptr @Pair_offset_tbl, ptr @_data_size_Pair, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @Pair_field_Pair_0, ptr @Pair_field_Pair_1, ptr @Pair_field_first, ptr @Pair_field_second, ptr @Pair_B_init_firstT_secondU, ptr @Pair_B_first_, ptr @Pair_B_second_, ptr @Pair_init_firstT_secondU, ptr @Pair_first_, ptr @Pair_second_] }
@Container_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container]
@Container_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 10]
@Container = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 9056556090793359372, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Container_hashtbl, ptr @Container_offset_tbl, ptr @_data_size_Container, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Iterator_hashtbl = constant [4 x ptr] [ptr @Iterator, ptr @any_typ, ptr @Container, ptr @Object]
@Iterator_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 13, i32 13]
@Iterator = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 8673632051301757104, i64 4611686018427388349, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterator_hashtbl, ptr @Iterator_offset_tbl, ptr @_data_size_Iterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@Iterable_hashtbl = constant [4 x ptr] [ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Object]
@Iterable_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 33, i32 33]
@Iterable = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 3037712219555723519, i64 4611686018427388477, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Iterable_hashtbl, ptr @Iterable_offset_tbl, ptr @_data_size_Iterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@MapIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Container, ptr @MapIterable, ptr @Iterable, ptr @Object, ptr null, ptr null, ptr @any_typ]
@MapIterable_offset_tbl = constant [8 x i32] [i32 0, i32 61, i32 10, i32 38, i32 61, i32 0, i32 0, i32 10]
@MapIterable = constant { [3 x i64], [7 x ptr], [51 x ptr] } { [3 x i64] [i64 -7488770571603291722, i64 4611686018427388279, i64 7], [7 x ptr] [ptr @subtype_test, ptr @MapIterable_hashtbl, ptr @MapIterable_offset_tbl, ptr @_data_size_MapIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [51 x ptr] [ptr @MapIterable_field_MapIterable_0, ptr @MapIterable_field_MapIterable_1, ptr @MapIterable_field_iterable, ptr @MapIterable_field_f, ptr @MapIterable_B_init_iterableIterableT_fFunctionT_to_U, ptr @MapIterable_B_iterator_, ptr @MapIterable_B_each_fFunctionT_to_Nothing, ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable_B_all_fFunctionT_to_i1, ptr @MapIterable_B_any_fFunctionT_to_i1, ptr @MapIterable_B_map_fFunctionT_to_U, ptr @MapIterable_B_filter_fFunctionT_to_i1, ptr @MapIterable_B_chain_otherIterableT, ptr @MapIterable_B_interleave_otherIterableT, ptr @MapIterable_B_zip_otherIterableU, ptr @MapIterable_B_product_otherIterableU, ptr @MapIterable_init_iterableIterableT_fFunctionT_to_U, ptr @MapIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @MapIterable_field_MapIterable_1, ptr @MapIterable_B_iterator_, ptr @MapIterable_B_each_fFunctionT_to_Nothing, ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @MapIterable_B_all_fFunctionT_to_i1, ptr @MapIterable_B_any_fFunctionT_to_i1, ptr @MapIterable_B_map_fFunctionT_to_U, ptr @MapIterable_B_filter_fFunctionT_to_i1, ptr @MapIterable_B_chain_otherIterableT, ptr @MapIterable_B_interleave_otherIterableT, ptr @MapIterable_B_zip_otherIterableU, ptr @MapIterable_B_product_otherIterableU, ptr @MapIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@MapIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @MapIterator, ptr @Container, ptr null, ptr @Iterator, ptr null, ptr null]
@MapIterator_offset_tbl = constant [8 x i32] [i32 21, i32 10, i32 10, i32 21, i32 0, i32 18, i32 0, i32 0]
@MapIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -146553482626734782, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @MapIterator_hashtbl, ptr @MapIterator_offset_tbl, ptr @_data_size_MapIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @MapIterator_field_MapIterator_0, ptr @MapIterator_field_MapIterator_1, ptr @MapIterator_field_iterator, ptr @MapIterator_field_f, ptr @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U, ptr @MapIterator_B_next_, ptr @MapIterator_init_iteratorIteratorT_fFunctionT_to_U, ptr @MapIterator_next_, ptr @MapIterator_field_MapIterator_1, ptr @MapIterator_B_next_, ptr @MapIterator_next_] }
@FilterIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @FilterIterable, ptr null, ptr @Container, ptr @Iterable, ptr null]
@FilterIterable_offset_tbl = constant [8 x i32] [i32 0, i32 60, i32 10, i32 10, i32 0, i32 60, i32 37, i32 0]
@FilterIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 8498466713076104350, i64 4611686018427388319, i64 7], [7 x ptr] [ptr @subtype_test, ptr @FilterIterable_hashtbl, ptr @FilterIterable_offset_tbl, ptr @_data_size_FilterIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @FilterIterable_field_FilterIterable_0, ptr @FilterIterable_field_iterable, ptr @FilterIterable_field_f, ptr @FilterIterable_B_init_iterableIterableT_fFunctionT_to_i1, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_B_each_fFunctionT_to_Nothing, ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable_B_all_fFunctionT_to_i1, ptr @FilterIterable_B_any_fFunctionT_to_i1, ptr @FilterIterable_B_map_fFunctionT_to_U, ptr @FilterIterable_B_filter_fFunctionT_to_i1, ptr @FilterIterable_B_chain_otherIterableT, ptr @FilterIterable_B_interleave_otherIterableT, ptr @FilterIterable_B_zip_otherIterableU, ptr @FilterIterable_B_product_otherIterableU, ptr @FilterIterable_init_iterableIterableT_fFunctionT_to_i1, ptr @FilterIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @FilterIterable_field_FilterIterable_0, ptr @FilterIterable_B_iterator_, ptr @FilterIterable_B_each_fFunctionT_to_Nothing, ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @FilterIterable_B_all_fFunctionT_to_i1, ptr @FilterIterable_B_any_fFunctionT_to_i1, ptr @FilterIterable_B_map_fFunctionT_to_U, ptr @FilterIterable_B_filter_fFunctionT_to_i1, ptr @FilterIterable_B_chain_otherIterableT, ptr @FilterIterable_B_interleave_otherIterableT, ptr @FilterIterable_B_zip_otherIterableU, ptr @FilterIterable_B_product_otherIterableU, ptr @FilterIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@FilterIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterator, ptr @FilterIterator, ptr null]
@FilterIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 0, i32 17, i32 10, i32 0]
@FilterIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 -1221365496900303883, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @FilterIterator_hashtbl, ptr @FilterIterator_offset_tbl, ptr @_data_size_FilterIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @FilterIterator_field_FilterIterator_0, ptr @FilterIterator_field_iterator, ptr @FilterIterator_field_f, ptr @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_i1, ptr @FilterIterator_B_next_, ptr @FilterIterator_init_iteratorIteratorT_fFunctionT_to_i1, ptr @FilterIterator_next_, ptr @FilterIterator_field_FilterIterator_0, ptr @FilterIterator_B_next_, ptr @FilterIterator_next_] }
@ChainIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr null, ptr @ChainIterable, ptr @Container, ptr null, ptr null, ptr @Object]
@ChainIterable_offset_tbl = constant [8 x i32] [i32 10, i32 37, i32 0, i32 10, i32 60, i32 0, i32 0, i32 60]
@ChainIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 -2370247058431047815, i64 4611686018427388247, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ChainIterable_hashtbl, ptr @ChainIterable_offset_tbl, ptr @_data_size_ChainIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @ChainIterable_field_ChainIterable_0, ptr @ChainIterable_field_first, ptr @ChainIterable_field_second, ptr @ChainIterable_B_init_firstIterableT_secondIterableT, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_B_each_fFunctionT_to_Nothing, ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable_B_all_fFunctionT_to_i1, ptr @ChainIterable_B_any_fFunctionT_to_i1, ptr @ChainIterable_B_map_fFunctionT_to_U, ptr @ChainIterable_B_filter_fFunctionT_to_i1, ptr @ChainIterable_B_chain_otherIterableT, ptr @ChainIterable_B_interleave_otherIterableT, ptr @ChainIterable_B_zip_otherIterableU, ptr @ChainIterable_B_product_otherIterableU, ptr @ChainIterable_init_firstIterableT_secondIterableT, ptr @ChainIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ChainIterable_field_ChainIterable_0, ptr @ChainIterable_B_iterator_, ptr @ChainIterable_B_each_fFunctionT_to_Nothing, ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ChainIterable_B_all_fFunctionT_to_i1, ptr @ChainIterable_B_any_fFunctionT_to_i1, ptr @ChainIterable_B_map_fFunctionT_to_U, ptr @ChainIterable_B_filter_fFunctionT_to_i1, ptr @ChainIterable_B_chain_otherIterableT, ptr @ChainIterable_B_interleave_otherIterableT, ptr @ChainIterable_B_zip_otherIterableU, ptr @ChainIterable_B_product_otherIterableU, ptr @ChainIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ChainIterator_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ChainIterator]
@ChainIterator_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 21, i32 18, i32 21, i32 0, i32 10, i32 10]
@ChainIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 6043157723929225452, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ChainIterator_hashtbl, ptr @ChainIterator_offset_tbl, ptr @_data_size_ChainIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @ChainIterator_field_ChainIterator_0, ptr @ChainIterator_field_first, ptr @ChainIterator_field_second, ptr @ChainIterator_field_on_first, ptr @ChainIterator_B_init_firstIteratorT_secondIteratorT, ptr @ChainIterator_B_next_, ptr @ChainIterator_init_firstIteratorT_secondIteratorT, ptr @ChainIterator_next_, ptr @ChainIterator_field_ChainIterator_0, ptr @ChainIterator_B_next_, ptr @ChainIterator_next_] }
@InterleaveIterable_hashtbl = constant [8 x ptr] [ptr null, ptr @Container, ptr @InterleaveIterable, ptr @Iterable, ptr @Object, ptr null, ptr null, ptr @any_typ]
@InterleaveIterable_offset_tbl = constant [8 x i32] [i32 0, i32 60, i32 10, i32 37, i32 60, i32 0, i32 0, i32 10]
@InterleaveIterable = constant { [3 x i64], [7 x ptr], [50 x ptr] } { [3 x i64] [i64 4936782714255954462, i64 4611686018427388279, i64 7], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterable_hashtbl, ptr @InterleaveIterable_offset_tbl, ptr @_data_size_InterleaveIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [50 x ptr] [ptr @InterleaveIterable_field_InterleaveIterable_0, ptr @InterleaveIterable_field_first, ptr @InterleaveIterable_field_second, ptr @InterleaveIterable_B_init_firstIterableT_secondIterableT, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable_B_all_fFunctionT_to_i1, ptr @InterleaveIterable_B_any_fFunctionT_to_i1, ptr @InterleaveIterable_B_map_fFunctionT_to_U, ptr @InterleaveIterable_B_filter_fFunctionT_to_i1, ptr @InterleaveIterable_B_chain_otherIterableT, ptr @InterleaveIterable_B_interleave_otherIterableT, ptr @InterleaveIterable_B_zip_otherIterableU, ptr @InterleaveIterable_B_product_otherIterableU, ptr @InterleaveIterable_init_firstIterableT_secondIterableT, ptr @InterleaveIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @InterleaveIterable_field_InterleaveIterable_0, ptr @InterleaveIterable_B_iterator_, ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing, ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @InterleaveIterable_B_all_fFunctionT_to_i1, ptr @InterleaveIterable_B_any_fFunctionT_to_i1, ptr @InterleaveIterable_B_map_fFunctionT_to_U, ptr @InterleaveIterable_B_filter_fFunctionT_to_i1, ptr @InterleaveIterable_B_chain_otherIterableT, ptr @InterleaveIterable_B_interleave_otherIterableT, ptr @InterleaveIterable_B_zip_otherIterableU, ptr @InterleaveIterable_B_product_otherIterableU, ptr @InterleaveIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@InterleaveIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @InterleaveIterator, ptr @Iterator, ptr null, ptr null]
@InterleaveIterator_offset_tbl = constant [8 x i32] [i32 21, i32 10, i32 0, i32 21, i32 10, i32 18, i32 0, i32 0]
@InterleaveIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -3924664358248524505, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @InterleaveIterator_hashtbl, ptr @InterleaveIterator_offset_tbl, ptr @_data_size_InterleaveIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @InterleaveIterator_field_InterleaveIterator_0, ptr @InterleaveIterator_field_first, ptr @InterleaveIterator_field_second, ptr @InterleaveIterator_field_on_first, ptr @InterleaveIterator_B_init_firstIteratorT_secondIteratorT, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_init_firstIteratorT_secondIteratorT, ptr @InterleaveIterator_next_, ptr @InterleaveIterator_field_InterleaveIterator_0, ptr @InterleaveIterator_B_next_, ptr @InterleaveIterator_next_] }
@ZipIterable_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr null, ptr null, ptr @Container, ptr null, ptr @ZipIterable, ptr @Object]
@ZipIterable_offset_tbl = constant [8 x i32] [i32 10, i32 39, i32 0, i32 0, i32 62, i32 0, i32 10, i32 62]
@ZipIterable = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 35232740166152944, i64 4611686018427388247, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ZipIterable_hashtbl, ptr @ZipIterable_offset_tbl, ptr @_data_size_ZipIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ZipIterable_field_ZipIterable_0, ptr @ZipIterable_field_ZipIterable_1, ptr @ZipIterable_field_ZipIterable_2, ptr @ZipIterable_field_first, ptr @ZipIterable_field_second, ptr @ZipIterable_B_init_firstIterableT_secondIterableU, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_B_each_fFunctionT_to_Nothing, ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable_B_all_fFunctionT_to_i1, ptr @ZipIterable_B_any_fFunctionT_to_i1, ptr @ZipIterable_B_map_fFunctionT_to_U, ptr @ZipIterable_B_filter_fFunctionT_to_i1, ptr @ZipIterable_B_chain_otherIterableT, ptr @ZipIterable_B_interleave_otherIterableT, ptr @ZipIterable_B_zip_otherIterableU, ptr @ZipIterable_B_product_otherIterableU, ptr @ZipIterable_init_firstIterableT_secondIterableU, ptr @ZipIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ZipIterable_field_ZipIterable_2, ptr @ZipIterable_B_iterator_, ptr @ZipIterable_B_each_fFunctionT_to_Nothing, ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ZipIterable_B_all_fFunctionT_to_i1, ptr @ZipIterable_B_any_fFunctionT_to_i1, ptr @ZipIterable_B_map_fFunctionT_to_U, ptr @ZipIterable_B_filter_fFunctionT_to_i1, ptr @ZipIterable_B_chain_otherIterableT, ptr @ZipIterable_B_interleave_otherIterableT, ptr @ZipIterable_B_zip_otherIterableU, ptr @ZipIterable_B_product_otherIterableU, ptr @ZipIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ZipIterator_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Container, ptr @Iterator, ptr @Object, ptr null, ptr @any_typ, ptr @ZipIterator]
@ZipIterator_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 22, i32 19, i32 22, i32 0, i32 10, i32 10]
@ZipIterator = constant { [3 x i64], [7 x ptr], [12 x ptr] } { [3 x i64] [i64 -2141114445739585318, i64 4611686018427388091, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ZipIterator_hashtbl, ptr @ZipIterator_offset_tbl, ptr @_data_size_ZipIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [12 x ptr] [ptr @ZipIterator_field_ZipIterator_0, ptr @ZipIterator_field_ZipIterator_1, ptr @ZipIterator_field_ZipIterator_2, ptr @ZipIterator_field_first, ptr @ZipIterator_field_second, ptr @ZipIterator_B_init_firstIteratorT_secondIteratorU, ptr @ZipIterator_B_next_, ptr @ZipIterator_init_firstIteratorT_secondIteratorU, ptr @ZipIterator_next_, ptr @ZipIterator_field_ZipIterator_2, ptr @ZipIterator_B_next_, ptr @ZipIterator_next_] }
@ProductIterable_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr @ProductIterable, ptr @Container, ptr null, ptr @Iterable, ptr null, ptr null]
@ProductIterable_offset_tbl = constant [8 x i32] [i32 62, i32 10, i32 10, i32 62, i32 0, i32 39, i32 0, i32 0]
@ProductIterable = constant { [3 x i64], [7 x ptr], [52 x ptr] } { [3 x i64] [i64 4128338911757318636, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ProductIterable_hashtbl, ptr @ProductIterable_offset_tbl, ptr @_data_size_ProductIterable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [52 x ptr] [ptr @ProductIterable_field_ProductIterable_0, ptr @ProductIterable_field_ProductIterable_1, ptr @ProductIterable_field_ProductIterable_2, ptr @ProductIterable_field_first, ptr @ProductIterable_field_second, ptr @ProductIterable_B_init_firstIterableT_secondIterableU, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_B_each_fFunctionT_to_Nothing, ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable_B_all_fFunctionT_to_i1, ptr @ProductIterable_B_any_fFunctionT_to_i1, ptr @ProductIterable_B_map_fFunctionT_to_U, ptr @ProductIterable_B_filter_fFunctionT_to_i1, ptr @ProductIterable_B_chain_otherIterableT, ptr @ProductIterable_B_interleave_otherIterableT, ptr @ProductIterable_B_zip_otherIterableU, ptr @ProductIterable_B_product_otherIterableU, ptr @ProductIterable_init_firstIterableT_secondIterableU, ptr @ProductIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @ProductIterable_field_ProductIterable_2, ptr @ProductIterable_B_iterator_, ptr @ProductIterable_B_each_fFunctionT_to_Nothing, ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @ProductIterable_B_all_fFunctionT_to_i1, ptr @ProductIterable_B_any_fFunctionT_to_i1, ptr @ProductIterable_B_map_fFunctionT_to_U, ptr @ProductIterable_B_filter_fFunctionT_to_i1, ptr @ProductIterable_B_chain_otherIterableT, ptr @ProductIterable_B_interleave_otherIterableT, ptr @ProductIterable_B_zip_otherIterableU, ptr @ProductIterable_B_product_otherIterableU, ptr @ProductIterable_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@ProductIterator_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr @Iterator, ptr null, ptr @Container, ptr @Object, ptr null, ptr @ProductIterator]
@ProductIterator_offset_tbl = constant [8 x i32] [i32 10, i32 0, i32 21, i32 0, i32 24, i32 24, i32 0, i32 10]
@ProductIterator = constant { [3 x i64], [7 x ptr], [14 x ptr] } { [3 x i64] [i64 1697250377212095568, i64 4611686018427388157, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ProductIterator_hashtbl, ptr @ProductIterator_offset_tbl, ptr @_data_size_ProductIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [14 x ptr] [ptr @ProductIterator_field_ProductIterator_0, ptr @ProductIterator_field_ProductIterator_1, ptr @ProductIterator_field_ProductIterator_2, ptr @ProductIterator_field_first_iterator, ptr @ProductIterator_field_second_iterator, ptr @ProductIterator_field_second_iterable, ptr @ProductIterator_field_current_first, ptr @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU, ptr @ProductIterator_B_next_, ptr @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU, ptr @ProductIterator_next_, ptr @ProductIterator_field_ProductIterator_2, ptr @ProductIterator_B_next_, ptr @ProductIterator_next_] }
@Representable_hashtbl = constant [4 x ptr] [ptr @Representable, ptr null, ptr @any_typ, ptr @Object]
@Representable_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 12]
@Representable = constant { [3 x i64], [7 x ptr], [2 x ptr] } { [3 x i64] [i64 -7260840641129990118, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Representable_hashtbl, ptr @Representable_offset_tbl, ptr @_data_size_Representable, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [2 x ptr] [ptr @Representable_B_repr_, ptr @Representable_repr_] }
@String_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr @Iterable, ptr @Representable, ptr @Container, ptr @Object, ptr null, ptr null, ptr @String]
@String_offset_tbl = constant [8 x i32] [i32 10, i32 62, i32 85, i32 85, i32 85, i32 0, i32 0, i32 10]
@String = constant { [3 x i64], [7 x ptr], [77 x ptr] } { [3 x i64] [i64 6499063144389013426, i64 4611686018427388601, i64 7], [7 x ptr] [ptr @subtype_test, ptr @String_hashtbl, ptr @String_offset_tbl, ptr @_data_size_String, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [77 x ptr] [ptr @String_field_bytes, ptr @String_field_length, ptr @String_field_capacity, ptr @String_field_String_0, ptr @String_B_init_, ptr @String_B_init_bytesBufferi8_lengthi32_capacityi32, ptr @String_B_length_, ptr @String_B_capacity_, ptr @String_B_bytes_, ptr @String_B_append_xi8, ptr @String_B_extend_strString, ptr @String_B__index_xi32, ptr @String_B__EQ_otherString, ptr @String_B_pop_, ptr @String_B_copy_, ptr @String_B_c_string_, ptr @String_B_iterator_, ptr @String_B_each_fFunctionT_to_Nothing, ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @String_B_all_fFunctionT_to_i1, ptr @String_B_any_fFunctionT_to_i1, ptr @String_B_map_fFunctionT_to_U, ptr @String_B_filter_fFunctionT_to_i1, ptr @String_B_chain_otherIterableT, ptr @String_B_interleave_otherIterableT, ptr @String_B_zip_otherIterableU, ptr @String_B_product_otherIterableU, ptr @String_B_repr_, ptr @String_init_, ptr @String_init_bytesBufferi8_lengthi32_capacityi32, ptr @String_length_, ptr @String_capacity_, ptr @String_bytes_, ptr @String_append_xi8, ptr @String_extend_strString, ptr @String__index_xi32, ptr @String__EQ_otherString, ptr @String_pop_, ptr @String_copy_, ptr @String_c_string_, ptr @String_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @String_repr_, ptr @String_field_String_0, ptr @String_B_iterator_, ptr @String_B_each_fFunctionT_to_Nothing, ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @String_B_all_fFunctionT_to_i1, ptr @String_B_any_fFunctionT_to_i1, ptr @String_B_map_fFunctionT_to_U, ptr @String_B_filter_fFunctionT_to_i1, ptr @String_B_chain_otherIterableT, ptr @String_B_interleave_otherIterableT, ptr @String_B_zip_otherIterableU, ptr @String_B_product_otherIterableU, ptr @String_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @String_B_repr_, ptr @String_repr_] }
@Character_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Character]
@Character_offset_tbl = constant [4 x i32] [i32 15, i32 0, i32 10, i32 10]
@Character = constant { [3 x i64], [7 x ptr], [5 x ptr] } { [3 x i64] [i64 6681222582356018452, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Character_hashtbl, ptr @Character_offset_tbl, ptr @_data_size_Character, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [5 x ptr] [ptr @Character_field_byte, ptr @Character_B_byte_, ptr @Character_B_init_bytei8, ptr @Character_byte_, ptr @Character_init_bytei8] }
@StringIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterator, ptr @StringIterator, ptr null]
@StringIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 0, i32 17, i32 10, i32 0]
@StringIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 -7260570988945952630, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @StringIterator_hashtbl, ptr @StringIterator_offset_tbl, ptr @_data_size_StringIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @StringIterator_field_str, ptr @StringIterator_field_index, ptr @StringIterator_field_StringIterator_0, ptr @StringIterator_B_init_strString, ptr @StringIterator_B_next_, ptr @StringIterator_init_strString, ptr @StringIterator_next_, ptr @StringIterator_field_StringIterator_0, ptr @StringIterator_B_next_, ptr @StringIterator_next_] }
@Exception_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Exception]
@Exception_offset_tbl = constant [4 x i32] [i32 23, i32 0, i32 10, i32 10]
@Exception = constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 9027164862567808692, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Exception_hashtbl, ptr @Exception_offset_tbl, ptr @_data_size_Exception, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Exception_field_line_number, ptr @Exception_field_file_name, ptr @Exception_field_message, ptr @Exception_B_init_messageString, ptr @Exception_B_init_, ptr @Exception_B_set_info_line_numberi32_file_nameString, ptr @Exception_B_report_, ptr @Exception_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberi32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@IO_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @IO, ptr null, ptr @Object]
@IO_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 0, i32 20]
@IO = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 5359822646784595218, i64 4611686018427388247, i64 3], [7 x ptr] [ptr @subtype_test, ptr @IO_hashtbl, ptr @IO_offset_tbl, ptr @_data_size_IO, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr @IO__Self_print_xi32, ptr @IO__Self_print_xi1, ptr @IO__Self_print_xi8, ptr @IO__Self_print_xCharacter, ptr @IO__Self_print_xi64, ptr @IO__Self_print_xNil, ptr @IO__Self_print_xRepresentable, ptr @IO__Self_print_xf64, ptr @IO__Self_print_xString] }
@Math_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Math]
@Math_offset_tbl = constant [4 x i32] [i32 27, i32 0, i32 10, i32 10]
@Math = constant { [3 x i64], [7 x ptr], [17 x ptr] } { [3 x i64] [i64 8094150130346788308, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Math_hashtbl, ptr @Math_offset_tbl, ptr @_data_size_Math, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [17 x ptr] [ptr @Math_B__Self_sqrt_xf64, ptr @Math_B__Self_abs_xi32__Self_abs_xf64, ptr @Math_B__Self_max_ai32_bi32__Self_max_af64_bf64, ptr @Math_B__Self_min_ai32_bi32__Self_min_af64_bf64, ptr @Math_B__Self_round_xf64, ptr @Math_B__Self_floor_xf64, ptr @Math_B__Self_ceiling_xf64, ptr @Math__Self_sqrt_xf64, ptr @Math__Self_abs_xi32, ptr @Math__Self_abs_xf64, ptr @Math__Self_max_ai32_bi32, ptr @Math__Self_max_af64_bf64, ptr @Math__Self_min_ai32_bi32, ptr @Math__Self_min_af64_bf64, ptr @Math__Self_round_xf64, ptr @Math__Self_floor_xf64, ptr @Math__Self_ceiling_xf64] }
@Blocking_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Blocking, ptr null]
@Blocking_offset_tbl = constant [4 x i32] [i32 12, i32 10, i32 10, i32 0]
@Blocking = constant { [3 x i64], [7 x ptr], [2 x ptr] } { [3 x i64] [i64 847773162914674935, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Blocking_hashtbl, ptr @Blocking_offset_tbl, ptr @_data_size_Blocking, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [2 x ptr] [ptr @Blocking_B_init_, ptr @Blocking_init_] }
@Channel_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Channel]
@Channel_offset_tbl = constant [4 x i32] [i32 18, i32 10, i32 0, i32 10]
@Channel = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 -3668118116639750450, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Channel_hashtbl, ptr @Channel_offset_tbl, ptr @_data_size_Channel, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @Channel_field_Channel_0, ptr @Channel_field_value, ptr @Channel_B_init_, ptr @Channel_B_get_, ptr @Channel_B_put_new_valueT, ptr @Channel_init_, ptr @Channel_get_, ptr @Channel_put_new_valueT] }
@Array_hashtbl = constant [8 x ptr] [ptr null, ptr null, ptr @Iterable, ptr @any_typ, ptr @Container, ptr @Array, ptr @Representable, ptr @Object]
@Array_offset_tbl = constant [8 x i32] [i32 0, i32 0, i32 68, i32 10, i32 91, i32 10, i32 91, i32 91]
@Array = constant { [3 x i64], [7 x ptr], [83 x ptr] } { [3 x i64] [i64 -5261542750394134544, i64 4611686018427388331, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Array_hashtbl, ptr @Array_offset_tbl, ptr @_data_size_Array, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [83 x ptr] [ptr @Array_field_Array_0, ptr @Array_field_buffer, ptr @Array_field_length, ptr @Array_field_capacity, ptr @Array_B__Self_from_iterable_iterableIterableT, ptr @Array_B_init_, ptr @Array_B_init_capacityi32, ptr @Array_B_init_lengthi32_capacityi32, ptr @Array_B_init_bufferBufferT_lengthi32_capacityi32, ptr @Array_B_length_, ptr @Array_B_capacity_, ptr @Array_B_append_xT, ptr @Array_B_extend_otherArrayT, ptr @Array_B_reserve_new_capacityi32, ptr @Array_B__index_xi32, ptr @Array_B__set_index_xi32_valueT, ptr @Array_B_throw_oob_xi32, ptr @Array_B_unchecked_index_xi32, ptr @Array_B_unchecked_insert_xi32_valueT, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_i1, ptr @Array_B_any_fFunctionT_to_i1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_i1, ptr @Array_B_chain_otherIterableT, ptr @Array_B_interleave_otherIterableT, ptr @Array_B_zip_otherIterableU, ptr @Array_B_product_otherIterableU, ptr @Array_B_repr_, ptr @Array__Self_from_iterable_iterableIterableT, ptr @Array_init_, ptr @Array_init_capacityi32, ptr @Array_init_lengthi32_capacityi32, ptr @Array_init_bufferBufferT_lengthi32_capacityi32, ptr @Array_length_, ptr @Array_capacity_, ptr @Array_append_xT, ptr @Array_extend_otherArrayT, ptr @Array_reserve_new_capacityi32, ptr @Array__index_xi32, ptr @Array__set_index_xi32_valueT, ptr @Array_throw_oob_xi32, ptr @Array_unchecked_index_xi32, ptr @Array_unchecked_insert_xi32_valueT, ptr @Array_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Array_repr_, ptr @Array_field_Array_0, ptr @Array_B_iterator_, ptr @Array_B_each_fFunctionT_to_Nothing, ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Array_B_all_fFunctionT_to_i1, ptr @Array_B_any_fFunctionT_to_i1, ptr @Array_B_map_fFunctionT_to_U, ptr @Array_B_filter_fFunctionT_to_i1, ptr @Array_B_chain_otherIterableT, ptr @Array_B_interleave_otherIterableT, ptr @Array_B_zip_otherIterableU, ptr @Array_B_product_otherIterableU, ptr @Array_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Array_B_repr_, ptr @Array_repr_] }
@ArrayIterator_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr @ArrayIterator, ptr @Iterator, ptr null, ptr null]
@ArrayIterator_offset_tbl = constant [8 x i32] [i32 20, i32 10, i32 0, i32 20, i32 10, i32 17, i32 0, i32 0]
@ArrayIterator = constant { [3 x i64], [7 x ptr], [10 x ptr] } { [3 x i64] [i64 3447345754186651411, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @ArrayIterator_hashtbl, ptr @ArrayIterator_offset_tbl, ptr @_data_size_ArrayIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [10 x ptr] [ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_field_array, ptr @ArrayIterator_field_index, ptr @ArrayIterator_B_init_arrayArrayT, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_init_arrayArrayT, ptr @ArrayIterator_next_, ptr @ArrayIterator_field_ArrayIterator_0, ptr @ArrayIterator_B_next_, ptr @ArrayIterator_next_] }
@Range_hashtbl = constant [8 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Container, ptr null, ptr @Iterable, ptr null, ptr @Range]
@Range_offset_tbl = constant [8 x i32] [i32 65, i32 10, i32 0, i32 65, i32 0, i32 42, i32 0, i32 10]
@Range = constant { [3 x i64], [7 x ptr], [55 x ptr] } { [3 x i64] [i64 5490049236840671069, i64 4611686018427388081, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Range_hashtbl, ptr @Range_offset_tbl, ptr @_data_size_Range, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [55 x ptr] [ptr @Range_field_start, ptr @Range_field_end, ptr @Range_field_step, ptr @Range_field_Range_0, ptr @Range_B_init_endi32, ptr @Range_B_init_starti32_endi32, ptr @Range_B_step_stepi32, ptr @Range_B_iterator_, ptr @Range_B_each_fFunctionT_to_Nothing, ptr @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Range_B_all_fFunctionT_to_i1, ptr @Range_B_any_fFunctionT_to_i1, ptr @Range_B_map_fFunctionT_to_U, ptr @Range_B_filter_fFunctionT_to_i1, ptr @Range_B_chain_otherIterableT, ptr @Range_B_interleave_otherIterableT, ptr @Range_B_zip_otherIterableU, ptr @Range_B_product_otherIterableU, ptr @Range_init_endi32, ptr @Range_init_starti32_endi32, ptr @Range_step_stepi32, ptr @Range_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU, ptr @Range_field_Range_0, ptr @Range_B_iterator_, ptr @Range_B_each_fFunctionT_to_Nothing, ptr @Range_B_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Range_B_all_fFunctionT_to_i1, ptr @Range_B_any_fFunctionT_to_i1, ptr @Range_B_map_fFunctionT_to_U, ptr @Range_B_filter_fFunctionT_to_i1, ptr @Range_B_chain_otherIterableT, ptr @Range_B_interleave_otherIterableT, ptr @Range_B_zip_otherIterableU, ptr @Range_B_product_otherIterableU, ptr @Range_iterator_, ptr @Iterable_each_fFunctionT_to_Nothing, ptr @Iterable_reduce_accumulatorT_fFunctionT._T_to_T, ptr @Iterable_all_fFunctionT_to_i1, ptr @Iterable_any_fFunctionT_to_i1, ptr @Iterable_map_fFunctionT_to_U, ptr @Iterable_filter_fFunctionT_to_i1, ptr @Iterable_chain_otherIterableT, ptr @Iterable_interleave_otherIterableT, ptr @Iterable_zip_otherIterableU, ptr @Iterable_product_otherIterableU] }
@RangeIterator_hashtbl = constant [8 x ptr] [ptr @any_typ, ptr null, ptr @Iterator, ptr @RangeIterator, ptr @Container, ptr @Object, ptr null, ptr null]
@RangeIterator_offset_tbl = constant [8 x i32] [i32 10, i32 0, i32 18, i32 10, i32 21, i32 21, i32 0, i32 0]
@RangeIterator = constant { [3 x i64], [7 x ptr], [11 x ptr] } { [3 x i64] [i64 -913562485944406675, i64 4611686018427388157, i64 7], [7 x ptr] [ptr @subtype_test, ptr @RangeIterator_hashtbl, ptr @RangeIterator_offset_tbl, ptr @_data_size_RangeIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [11 x ptr] [ptr @RangeIterator_field_counter, ptr @RangeIterator_field_end, ptr @RangeIterator_field_step, ptr @RangeIterator_field_RangeIterator_0, ptr @RangeIterator_B_init_counteri32_endi32_stepi32, ptr @RangeIterator_B_next_, ptr @RangeIterator_init_counteri32_endi32_stepi32, ptr @RangeIterator_next_, ptr @RangeIterator_field_RangeIterator_0, ptr @RangeIterator_B_next_, ptr @RangeIterator_next_] }
@FileSystemError_hashtbl = constant [4 x ptr] [ptr @any_typ, ptr @FileSystemError, ptr @Object, ptr @Exception]
@FileSystemError_offset_tbl = constant [4 x i32] [i32 10, i32 10, i32 36, i32 23]
@FileSystemError = constant { [3 x i64], [7 x ptr], [26 x ptr] } { [3 x i64] [i64 -4504708879057548074, i64 4611686018427388291, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileSystemError_hashtbl, ptr @FileSystemError_offset_tbl, ptr @_data_size_FileSystemError, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [26 x ptr] [ptr @FileSystemError_field_line_number, ptr @FileSystemError_field_file_name, ptr @FileSystemError_field_message, ptr @FileSystemError_B_init_messageString, ptr @FileSystemError_B_init_, ptr @FileSystemError_B_set_info_line_numberi32_file_nameString, ptr @FileSystemError_B_report_, ptr @FileSystemError_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberi32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_, ptr @FileSystemError_field_line_number, ptr @FileSystemError_field_file_name, ptr @FileSystemError_field_message, ptr @FileSystemError_B_init_messageString, ptr @FileSystemError_B_init_, ptr @FileSystemError_B_set_info_line_numberi32_file_nameString, ptr @FileSystemError_B_report_, ptr @FileSystemError_B_print_message_, ptr @Exception_init_messageString, ptr @Exception_init_, ptr @Exception_set_info_line_numberi32_file_nameString, ptr @Exception_report_, ptr @Exception_print_message_] }
@File_hashtbl = constant [4 x ptr] [ptr @File, ptr null, ptr @any_typ, ptr @Object]
@File_offset_tbl = constant [4 x i32] [i32 10, i32 0, i32 10, i32 26]
@File = constant { [3 x i64], [7 x ptr], [16 x ptr] } { [3 x i64] [i64 -2227788838181535664, i64 4611686018427388093, i64 3], [7 x ptr] [ptr @subtype_test, ptr @File_hashtbl, ptr @File_offset_tbl, ptr @_data_size_File, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [16 x ptr] [ptr @File_field_name, ptr @File_field_mode, ptr @File_field_handle, ptr @File_field_open, ptr @File_B_init_nameString_modeString, ptr @File_B_close_, ptr @File_B_reopen_, ptr @File_B_get_byte_, ptr @File_B_write_textString, ptr @File_B__set_mode_modeString, ptr @File_init_nameString_modeString, ptr @File_close_, ptr @File_reopen_, ptr @File_get_byte_, ptr @File_write_textString, ptr @File__set_mode_modeString] }
@FileProcessor_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @FileProcessor, ptr null]
@FileProcessor_offset_tbl = constant [4 x i32] [i32 13, i32 10, i32 10, i32 0]
@FileProcessor = constant { [3 x i64], [7 x ptr], [0 x ptr] } { [3 x i64] [i64 4146660827496349788, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileProcessor_hashtbl, ptr @FileProcessor_offset_tbl, ptr @_data_size_FileProcessor, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [0 x ptr] undef }
@FileReader_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @FileProcessor, ptr @FileReader]
@FileReader_offset_tbl = constant [4 x i32] [i32 18, i32 10, i32 15, i32 10]
@FileReader = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 5641023583277533454, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileReader_hashtbl, ptr @FileReader_offset_tbl, ptr @_data_size_FileReader, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @FileReader_field_FileReader_0, ptr @FileReader_B_init_, ptr @FileReader_B_process_fileFile, ptr @FileReader_init_, ptr @FileReader_process_fileFile, ptr @FileReader_field_FileReader_0, ptr @FileReader_B_process_fileFile, ptr @FileReader_process_fileFile] }
@FileWriter_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @FileProcessor, ptr @FileWriter]
@FileWriter_offset_tbl = constant [4 x i32] [i32 19, i32 10, i32 16, i32 10]
@FileWriter = constant { [3 x i64], [7 x ptr], [9 x ptr] } { [3 x i64] [i64 2522433070607690589, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileWriter_hashtbl, ptr @FileWriter_offset_tbl, ptr @_data_size_FileWriter, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [9 x ptr] [ptr @FileWriter_field_text, ptr @FileWriter_field_FileWriter_0, ptr @FileWriter_B_init_textString, ptr @FileWriter_B_process_fileFile, ptr @FileWriter_init_textString, ptr @FileWriter_process_fileFile, ptr @FileWriter_field_FileWriter_0, ptr @FileWriter_B_process_fileFile, ptr @FileWriter_process_fileFile] }
@FileSystem_hashtbl = constant [4 x ptr] [ptr @Object, ptr @FileSystem, ptr @any_typ, ptr null]
@FileSystem_offset_tbl = constant [4 x i32] [i32 17, i32 10, i32 10, i32 0]
@FileSystem = constant { [3 x i64], [7 x ptr], [7 x ptr] } { [3 x i64] [i64 5344209596779946859, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @FileSystem_hashtbl, ptr @FileSystem_offset_tbl, ptr @_data_size_FileSystem, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [7 x ptr] [ptr @FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT, ptr @FileSystem_B__Self_read_file_file_nameString, ptr @FileSystem_B__Self_write_file_file_nameString_textString, ptr @FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T, ptr @FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT, ptr @FileSystem__Self_read_file_file_nameString, ptr @FileSystem__Self_write_file_file_nameString_textString] }
@Integer_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @Integer]
@Integer_offset_tbl = constant [4 x i32] [i32 23, i32 10, i32 0, i32 10]
@Integer = constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 -735147942809078232, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Integer_hashtbl, ptr @Integer_offset_tbl, ptr @_data_size_Integer, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Integer_field_value, ptr @Integer_B_init_valuei32, ptr @Integer_B__ADD_otheri32, ptr @Integer_B__SUB_otheri32, ptr @Integer_B__MUL_otheri32, ptr @Integer_B__DIV_otheri32, ptr @Integer_B_print_, ptr @Integer_init_valuei32, ptr @Integer__ADD_otheri32, ptr @Integer__SUB_otheri32, ptr @Integer__MUL_otheri32, ptr @Integer__DIV_otheri32, ptr @Integer_print_] }
@BigBoy_hashtbl = constant [4 x ptr] [ptr @Representable, ptr @Object, ptr @any_typ, ptr @BigBoy]
@BigBoy_offset_tbl = constant [4 x i32] [i32 14, i32 16, i32 10, i32 10]
@BigBoy = constant { [3 x i64], [7 x ptr], [6 x ptr] } { [3 x i64] [i64 3069357308562348185, i64 4611686018427388361, i64 3], [7 x ptr] [ptr @subtype_test, ptr @BigBoy_hashtbl, ptr @BigBoy_offset_tbl, ptr @_data_size_BigBoy, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [6 x ptr] [ptr @BigBoy_B_introduce_, ptr @BigBoy_B_repr_, ptr @BigBoy_introduce_, ptr @Representable_repr_, ptr @BigBoy_B_repr_, ptr @Representable_repr_] }
@Integer2_hashtbl = constant [8 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @Integer2, ptr @Integer, ptr @Representable, ptr null, ptr @BigBoy]
@Integer2_offset_tbl = constant [8 x i32] [i32 0, i32 42, i32 10, i32 10, i32 29, i32 48, i32 0, i32 42]
@Integer2 = constant { [3 x i64], [7 x ptr], [40 x ptr] } { [3 x i64] [i64 1844024195090879880, i64 4611686018427388181, i64 7], [7 x ptr] [ptr @subtype_test, ptr @Integer2_hashtbl, ptr @Integer2_offset_tbl, ptr @_data_size_Integer2, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [40 x ptr] [ptr @Integer2_field_value, ptr @Integer2_B_value_, ptr @Integer2_B_init_valuei32, ptr @Integer2_B__ADD_otheri32, ptr @Integer2_B__SUB_otheri32, ptr @Integer2_B__MUL_otheri32, ptr @Integer2_B__DIV_otheri32, ptr @Integer2_B_print_, ptr @Integer2_B_introduce_, ptr @Integer2_B_repr_, ptr @Integer2_value_, ptr @Integer_init_valuei32, ptr @Integer__ADD_otheri32, ptr @Integer__SUB_otheri32, ptr @Integer__MUL_otheri32, ptr @Integer__DIV_otheri32, ptr @Integer_print_, ptr @BigBoy_introduce_, ptr @Integer2_repr_, ptr @Integer2_field_value, ptr @Integer2_B_init_valuei32, ptr @Integer2_B__ADD_otheri32, ptr @Integer2_B__SUB_otheri32, ptr @Integer2_B__MUL_otheri32, ptr @Integer2_B__DIV_otheri32, ptr @Integer2_B_print_, ptr @Integer_init_valuei32, ptr @Integer__ADD_otheri32, ptr @Integer__SUB_otheri32, ptr @Integer__MUL_otheri32, ptr @Integer__DIV_otheri32, ptr @Integer_print_, ptr @Integer2_B_introduce_, ptr @Integer2_B_repr_, ptr @BigBoy_introduce_, ptr @Integer2_repr_, ptr @Integer2_B_repr_, ptr @Integer2_repr_, ptr @Integer2_B_repr_, ptr @Integer2_repr_] }
@Animal_hashtbl = constant [4 x ptr] [ptr @Object, ptr null, ptr @any_typ, ptr @Animal]
@Animal_offset_tbl = constant [4 x i32] [i32 23, i32 0, i32 10, i32 10]
@Animal = constant { [3 x i64], [7 x ptr], [13 x ptr] } { [3 x i64] [i64 1075018126824711487, i64 4611686018427388091, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Animal_hashtbl, ptr @Animal_offset_tbl, ptr @_data_size_Animal, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [13 x ptr] [ptr @Animal_field_age, ptr @Animal_field_hp, ptr @Animal_field_skill, ptr @Animal_B_init_agei32_hpf64_skilli32, ptr @Animal_B_say_age_, ptr @Animal_B_say_skill_, ptr @Animal_B_say_messagei32, ptr @Animal_B_do_nothing_, ptr @Animal_init_agei32_hpf64_skilli32, ptr @Animal_say_age_, ptr @Animal_say_skill_, ptr @Animal_say_messagei32, ptr @Animal_do_nothing_] }
@Beaver_hashtbl = constant [4 x ptr] [ptr null, ptr @Object, ptr @any_typ, ptr @Beaver]
@Beaver_offset_tbl = constant [4 x i32] [i32 0, i32 18, i32 10, i32 10]
@Beaver = constant { [3 x i64], [7 x ptr], [8 x ptr] } { [3 x i64] [i64 -6124772949900838462, i64 4611686018427388097, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Beaver_hashtbl, ptr @Beaver_offset_tbl, ptr @_data_size_Beaver, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [8 x ptr] [ptr @Beaver_field_color, ptr @Beaver_field_name, ptr @Beaver_B_init_colori32_namef64, ptr @Beaver_B__ADD_xi32, ptr @Beaver_B_say_color_, ptr @Beaver_init_colori32_namef64, ptr @Beaver__ADD_xi32, ptr @Beaver_say_color_] }
@ListNode_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr null, ptr @ListNode]
@ListNode_offset_tbl = constant [4 x i32] [i32 22, i32 10, i32 0, i32 10]
@ListNode = constant { [3 x i64], [7 x ptr], [12 x ptr] } { [3 x i64] [i64 -1756024950533091476, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ListNode_hashtbl, ptr @ListNode_offset_tbl, ptr @_data_size_ListNode, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [12 x ptr] [ptr @ListNode_field_data, ptr @ListNode_field_next, ptr @ListNode_B_init_datai32, ptr @ListNode_B_push_nextListNode, ptr @ListNode_B_next_, ptr @ListNode_B_data_, ptr @ListNode_B_iterator_, ptr @ListNode_init_datai32, ptr @ListNode_push_nextListNode, ptr @ListNode_next_, ptr @ListNode_data_, ptr @ListNode_iterator_] }
@ListIterator_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @ListIterator, ptr null]
@ListIterator_offset_tbl = constant [4 x i32] [i32 15, i32 10, i32 10, i32 0]
@ListIterator = constant { [3 x i64], [7 x ptr], [5 x ptr] } { [3 x i64] [i64 -5838699946612561379, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @ListIterator_hashtbl, ptr @ListIterator_offset_tbl, ptr @_data_size_ListIterator, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [5 x ptr] [ptr @ListIterator_field_node, ptr @ListIterator_B_init_nodeListNode, ptr @ListIterator_B_next_, ptr @ListIterator_init_nodeListNode, ptr @ListIterator_next_] }
@Bard_hashtbl = constant [4 x ptr] [ptr @Object, ptr @any_typ, ptr @Bard, ptr null]
@Bard_offset_tbl = constant [4 x i32] [i32 17, i32 10, i32 10, i32 0]
@Bard = constant { [3 x i64], [7 x ptr], [7 x ptr] } { [3 x i64] [i64 -7979915337087193093, i64 4611686018427388081, i64 3], [7 x ptr] [ptr @subtype_test, ptr @Bard_hashtbl, ptr @Bard_offset_tbl, ptr @_data_size_Bard, ptr @_box_Default, ptr @_unbox_Default, ptr @_size_Default], [7 x ptr] [ptr @Bard_B_init_, ptr @Bard_B_take_af64_bf64_take_ai32_bi32_take_aAnimal_bBeaver_take_ai32_bf64, ptr @Bard_init_, ptr @Bard_take_af64_bf64, ptr @Bard_take_ai32_bi32, ptr @Bard_take_aAnimal_bBeaver, ptr @Bard_take_ai32_bf64] }

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #0 {
  %hash = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id)
  %gep = getelementptr i64, ptr %supertype_tbl, i64 %hash
  %stored_val = load i64, ptr %gep, align 4
  %eq = icmp eq i64 %stored_val, %candidate
  ret i1 %eq
}

define { i64, i64 } @_data_size_Pair(ptr nocapture readonly %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } @size_wrapper(ptr %6, ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 16, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 16
  %15 = add i64 %14, %13
  %16 = getelementptr i8, ptr %0, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 72
  %20 = load ptr, ptr %19, align 8
  %21 = tail call { i64, i64 } @size_wrapper(ptr %20, ptr nonnull %17)
  %22 = extractvalue { i64, i64 } %21, 0
  %23 = extractvalue { i64, i64 } %21, 1
  %24 = tail call i64 @llvm.umax.i64(i64 %9, i64 %23)
  %25 = tail call i64 @llvm.umax.i64(i64 %24, i64 8)
  %26 = urem i64 %15, %23
  %27 = icmp eq i64 %26, 0
  %28 = sub i64 %23, %26
  %29 = select i1 %27, i64 0, i64 %28
  %30 = add i64 %22, %15
  %31 = add i64 %30, %29
  %32 = urem i64 %31, %25
  %33 = icmp eq i64 %32, 0
  %34 = sub i64 %25, %32
  %35 = select i1 %33, i64 0, i64 %34
  %36 = add i64 %31, %35
  %37 = insertvalue { i64, i64 } undef, i64 %36, 0
  %38 = insertvalue { i64, i64 } %37, i64 %25, 1
  ret { i64, i64 } %38
}

define { ptr, i160 } @_box_Default(ptr %fat_ptr, ptr %parameterization) {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %1 = insertvalue { ptr, i160 } undef, ptr %vptr, 0
  %2 = getelementptr i8, ptr %fat_ptr, i64 8
  %3 = load i160, ptr %2, align 4
  %4 = insertvalue { ptr, i160 } %1, i160 %3, 1
  ret { ptr, i160 } %4
}

define void @_unbox_Default({ ptr, i160 } %fat_ptr, ptr %parameterization, ptr %destination) {
  %vptr = extractvalue { ptr, i160 } %fat_ptr, 0
  %data = extractvalue { ptr, i160 } %fat_ptr, 1
  %dest_data = getelementptr i8, ptr %destination, i64 8
  store ptr %vptr, ptr %destination, align 8
  store i160 %data, ptr %dest_data, align 4
  ret void
}

define { i64, i64 } @_size_Default(ptr %parameterization) {
  ret { i64, i64 } { i64 32, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Pair_field_Pair_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Pair_field_Pair_1(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @Pair_B_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = getelementptr i8, ptr %1, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = getelementptr i8, ptr %16, i64 16
  %19 = getelementptr i8, ptr %16, i64 24
  %20 = getelementptr i8, ptr %16, i64 32
  %21 = load i64, ptr %17, align 4
  %22 = load i64, ptr %18, align 4
  %23 = load ptr, ptr %19, align 8
  %24 = load ptr, ptr %20, align 8
  %25 = tail call i1 @subtype_test_wrapper(ptr %23, i64 %22, i64 %21, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %24)
  %26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %27 = getelementptr i8, ptr %26, i64 136
  %28 = load ptr, ptr %27, align 8
  ret ptr %28
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Pair_B_first_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Pair_B_second_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Pair_init_firstT_secondU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract11, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract12, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Pair)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 80, ptr %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = getelementptr i8, ptr %15, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  call void %19(ptr %10, { ptr, i160 } %3) #23
  %20 = load ptr, ptr %7, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 80, ptr %21)
  %23 = load i32, ptr %9, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr ptr, ptr %21, i64 %24
  %26 = getelementptr i8, ptr %25, i64 24
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %20, { ptr, i160 } %4) #23
  ret void
}

define { ptr, i160 } @Pair_first_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract4, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Pair)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 80, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 16
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call { ptr, i160 } %16(ptr %8) #24
  ret { ptr, i160 } %17
}

define { ptr, i160 } @Pair_second_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract4, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Pair)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 80, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call { ptr, i160 } %16(ptr %8) #24
  ret { ptr, i160 } %17
}

define void @set_offset(ptr %fat_ptr, ptr %id_ptr) {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  store i32 %offset, ptr %destination, align 4
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #3

define i32 @get_offset(ptr %vptr, ptr %id_ptr) {
  %id = load i64, ptr %id_ptr, align 4
  %id_of_casted = load i64, ptr %vptr, align 4
  %hash_coef_ptr = getelementptr i64, ptr %vptr, i32 1
  %tbl_size_ptr = getelementptr i64, ptr %vptr, i32 2
  %offset_tbl_ptr = getelementptr ptr, ptr %vptr, i32 5
  %hash_coef = load i64, ptr %hash_coef_ptr, align 4
  %tbl_size = load i64, ptr %tbl_size_ptr, align 4
  %offset_tbl = load ptr, ptr %offset_tbl_ptr, align 8
  %index = call i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %id)
  %offset_ptr = getelementptr i32, ptr %offset_tbl, i64 %index
  %offset = load i32, ptr %offset_ptr, align 4
  ret i32 %offset
}

define i64 @hash_to_index(i64 %tbl_size, i64 %hash_coef, i64 %cand_id) {
  %product = mul i64 %cand_id, %hash_coef
  %shifted = lshr i64 %product, 32
  %xored = xor i64 %product, %shifted
  %hash = and i64 %xored, %tbl_size
  %bug = icmp sgt i64 %hash, %tbl_size
  ret i64 %hash
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define i1 @subtype_test_wrapper(ptr %f, i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #0 {
  %result = call i1 %f(i64 %tbl_size, i64 %hash_coef, i64 %cand_id, i64 %candidate, ptr %supertype_tbl) #1
  ret i1 %result
}

define { ptr, i160 } @Pair_getter_second(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 72
  %5 = load ptr, ptr %4, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr %5, ptr nonnull %2)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = extractvalue { i64, i64 } %6, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %11 = sub i64 %8, %9
  %12 = select i1 %10, i64 0, i64 %11
  %13 = add i64 %7, 16
  %14 = add i64 %13, %12
  %15 = getelementptr i8, ptr %0, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 72
  %19 = load ptr, ptr %18, align 8
  %20 = tail call { i64, i64 } @size_wrapper(ptr %19, ptr nonnull %16)
  %21 = extractvalue { i64, i64 } %20, 1
  %22 = urem i64 %14, %21
  %23 = icmp eq i64 %22, 0
  %24 = sub i64 %21, %22
  %25 = select i1 %23, i64 0, i64 %24
  %26 = getelementptr i8, ptr %0, i64 %14
  %27 = getelementptr i8, ptr %26, i64 %25
  %28 = load ptr, ptr %15, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 56
  %31 = load ptr, ptr %30, align 8
  %32 = tail call { ptr, i160 } @box_wrapper(ptr %31, ptr %27, ptr nonnull %28)
  ret { ptr, i160 } %32
}

define void @Pair_setter_second(ptr %0, { ptr, i160 } %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } @size_wrapper(ptr %6, ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 0
  %9 = extractvalue { i64, i64 } %7, 1
  %10 = urem i64 16, %9
  %11 = icmp eq i64 %10, 0
  %12 = sub i64 %9, %10
  %13 = select i1 %11, i64 0, i64 %12
  %14 = add i64 %8, 16
  %15 = add i64 %14, %13
  %16 = getelementptr i8, ptr %0, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 72
  %20 = load ptr, ptr %19, align 8
  %21 = tail call { i64, i64 } @size_wrapper(ptr %20, ptr nonnull %17)
  %22 = extractvalue { i64, i64 } %21, 1
  %23 = urem i64 %15, %22
  %24 = icmp eq i64 %23, 0
  %25 = sub i64 %22, %23
  %26 = select i1 %24, i64 0, i64 %25
  %27 = getelementptr i8, ptr %0, i64 %15
  %28 = getelementptr i8, ptr %27, i64 %26
  %29 = load ptr, ptr %16, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr i8, ptr %30, i64 64
  %32 = load ptr, ptr %31, align 8
  tail call void @unbox_wrapper(ptr %32, { ptr, i160 } %1, ptr nonnull %29, ptr %28)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { i64, i64 } @size_wrapper(ptr %f, ptr nocapture nofree readonly %0) #0 {
  %result = call { i64, i64 } %f(ptr nocapture nofree readonly %0) #1
  ret { i64, i64 } %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define void @unbox_wrapper(ptr %f, { ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #4 {
  call void %f({ ptr, i160 } %0, ptr nocapture nofree readonly %1, ptr nocapture nofree writeonly %2) #2
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define { ptr, i160 } @box_wrapper(ptr %f, ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #0 {
  %result = call { ptr, i160 } %f(ptr nocapture nofree readonly %0, ptr nocapture nofree readonly %1) #1
  ret { ptr, i160 } %result
}

define { ptr, i160 } @Pair_getter_first(ptr %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = load ptr, ptr %2, align 8
  %4 = getelementptr i8, ptr %3, i64 72
  %5 = load ptr, ptr %4, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr %5, ptr nonnull %2)
  %7 = extractvalue { i64, i64 } %6, 1
  %8 = urem i64 16, %7
  %9 = icmp eq i64 %8, 0
  %reass.sub = sub i64 %7, %8
  %10 = add i64 %reass.sub, 16
  %11 = select i1 %9, i64 16, i64 %10
  %12 = getelementptr i8, ptr %0, i64 %11
  %13 = load ptr, ptr %0, align 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 56
  %16 = load ptr, ptr %15, align 8
  %17 = tail call { ptr, i160 } @box_wrapper(ptr %16, ptr %12, ptr nonnull %13)
  ret { ptr, i160 } %17
}

define void @Pair_setter_first(ptr %0, { ptr, i160 } %1) {
  %3 = load ptr, ptr %0, align 8
  %4 = load ptr, ptr %3, align 8
  %5 = getelementptr i8, ptr %4, i64 72
  %6 = load ptr, ptr %5, align 8
  %7 = tail call { i64, i64 } @size_wrapper(ptr %6, ptr nonnull %3)
  %8 = extractvalue { i64, i64 } %7, 1
  %9 = urem i64 16, %8
  %10 = icmp eq i64 %9, 0
  %reass.sub = sub i64 %8, %9
  %11 = add i64 %reass.sub, 16
  %12 = select i1 %10, i64 16, i64 %11
  %13 = getelementptr i8, ptr %0, i64 %12
  %14 = load ptr, ptr %0, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 64
  %17 = load ptr, ptr %16, align 8
  tail call void @unbox_wrapper(ptr %17, { ptr, i160 } %1, ptr nonnull %14, ptr %13)
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #5

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Container(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Iterator(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Iterable(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_MapIterable(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 56, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterable_field_MapIterable_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterable_field_MapIterable_1(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

define ptr @MapIterable_B_init_iterableIterableT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 208
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @MapIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 232
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @MapIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 272
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @MapIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @MapIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @MapIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 296
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @MapIterable_init_iterableIterableT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract5, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @MapIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 408, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 408, ptr %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 24
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %40, { ptr } %4) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @MapIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract35 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract37 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract39 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract41 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract35, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract37, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract39, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract41, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @MapIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 408, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 16
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract27, ptr %19, align 8
  %.fca.1.extract29 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep30 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract29, ptr %.fca.1.gep30, align 8
  %.fca.2.extract31 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep32 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract31, ptr %.fca.2.gep32, align 8
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep34 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract33, ptr %.fca.3.gep34, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep30, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep32, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep34, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 184, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract15 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract17 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract19 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract21 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract15, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract17, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract19, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract21, ptr %39, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 408, ptr %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 24
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr } %48(ptr %40) #24
  %50 = call ptr @llvm.invariant.start.p0(i64 408, ptr %41)
  %51 = load ptr, ptr %45, align 8
  %52 = call ptr @typegetter_wrapper(ptr %51, ptr %40)
  %53 = load ptr, ptr %6, align 8
  %54 = load ptr, ptr %5, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 408, ptr %54)
  %56 = load i32, ptr %8, align 8
  %57 = sext i32 %56 to i64
  %58 = getelementptr ptr, ptr %54, i64 %57
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  %61 = call ptr @typegetter_wrapper(ptr %60, ptr %53)
  %62 = alloca [3 x ptr], align 8
  store ptr @MapIterator, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %62, i64 8
  store ptr %52, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %62, i64 16
  store ptr %61, ptr %64, align 8
  %65 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_MapIterator, ptr nonnull %62)
  %66 = extractvalue { i64, i64 } %65, 0
  %67 = call ptr @bump_malloc(i64 %66)
  store ptr %52, ptr %67, align 8
  %68 = getelementptr i8, ptr %67, i64 8
  store ptr %61, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %67)
  %70 = load ptr, ptr %6, align 8
  %71 = load ptr, ptr %5, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 408, ptr %71)
  %73 = load i32, ptr %8, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 16
  %77 = load ptr, ptr %76, align 8
  %78 = load ptr, ptr %77, align 8
  %79 = call { ptr, ptr, ptr, i32 } %78(ptr %70) #24
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %79, 0
  store ptr %.fca.0.extract2, ptr %80, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %79, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %80, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep, align 8
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %79, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %80, i64 16
  store ptr %.fca.2.extract4, ptr %.fca.2.gep, align 8
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %79, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %80, i64 24
  store i32 %.fca.3.extract5, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %80, ptr nonnull @Iterable)
  %81 = load ptr, ptr %80, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %81, 0
  %83 = load ptr, ptr %.fca.1.gep, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %83, 1
  %85 = load ptr, ptr %.fca.2.gep, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %85, 2
  %87 = load i32, ptr %.fca.3.gep, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, i32 %87, 3
  %89 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %90 = call ptr @llvm.invariant.start.p0(i64 184, ptr %81)
  %91 = sext i32 %87 to i64
  %92 = getelementptr ptr, ptr %81, i64 %91
  %93 = getelementptr i8, ptr %92, i64 8
  %94 = load ptr, ptr %93, align 8
  %95 = call ptr @behavior_wrapper(ptr %94, { ptr, ptr, ptr, i32 } %88, ptr nonnull %4)
  %96 = call { ptr, ptr, ptr, i32 } %95({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr nonnull %4) #25
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %96, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %96, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %96, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %96, 3
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %97, align 8
  %98 = getelementptr inbounds i8, ptr %97, i64 8
  store ptr %.fca.1.extract, ptr %98, align 8
  %99 = getelementptr inbounds i8, ptr %97, i64 16
  store ptr %.fca.2.extract, ptr %99, align 8
  %100 = getelementptr inbounds i8, ptr %97, i64 24
  store i32 %.fca.3.extract, ptr %100, align 8
  call void @set_offset(ptr nonnull %97, ptr nonnull @Iterator)
  %101 = load ptr, ptr %6, align 8
  %102 = load ptr, ptr %5, align 8
  %103 = call ptr @llvm.invariant.start.p0(i64 408, ptr %102)
  %104 = load i32, ptr %8, align 8
  %105 = sext i32 %104 to i64
  %106 = getelementptr ptr, ptr %102, i64 %105
  %107 = getelementptr i8, ptr %106, i64 24
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %108, align 8
  %110 = call { ptr } %109(ptr %101) #24
  %111 = alloca { ptr, ptr, ptr, i32 }, align 8
  %112 = load ptr, ptr %97, align 8
  store ptr %112, ptr %111, align 8
  %113 = getelementptr inbounds i8, ptr %111, i64 8
  %114 = load ptr, ptr %98, align 8
  store ptr %114, ptr %113, align 8
  %115 = getelementptr inbounds i8, ptr %111, i64 16
  %116 = load ptr, ptr %99, align 8
  store ptr %116, ptr %115, align 8
  %117 = getelementptr inbounds i8, ptr %111, i64 24
  %118 = load i32, ptr %100, align 8
  store i32 %118, ptr %117, align 8
  call void @set_offset(ptr nonnull %111, ptr nonnull @Iterator)
  %119 = load ptr, ptr %111, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %119, 0
  %121 = load ptr, ptr %113, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 1
  %123 = load ptr, ptr %115, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %123, 2
  %125 = load i32, ptr %117, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, i32 %125, 3
  %127 = insertvalue { ptr, ptr, ptr, i32 } { ptr @MapIterator, ptr undef, ptr undef, i32 undef }, ptr %67, 1
  %128 = insertvalue { ptr, ptr, ptr, i32 } %127, ptr undef, 2
  %129 = insertvalue { ptr, ptr, ptr, i32 } %128, i32 10, 3
  %130 = load ptr, ptr %6, align 8
  %131 = load ptr, ptr %5, align 8
  %132 = call ptr @llvm.invariant.start.p0(i64 408, ptr %131)
  %133 = load i32, ptr %8, align 8
  %134 = sext i32 %133 to i64
  %135 = getelementptr ptr, ptr %131, i64 %134
  %136 = load ptr, ptr %135, align 8
  %137 = call ptr @typegetter_wrapper(ptr %136, ptr %130)
  %138 = call ptr @bump_malloc(i64 24)
  %139 = getelementptr i8, ptr %138, i64 8
  store ptr %137, ptr %139, align 8
  %140 = getelementptr i8, ptr %138, i64 16
  store ptr null, ptr %140, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 16, ptr %138)
  store ptr @Iterator, ptr %138, align 8
  %142 = load ptr, ptr %6, align 8
  %143 = load ptr, ptr %5, align 8
  %144 = call ptr @llvm.invariant.start.p0(i64 408, ptr %143)
  %145 = load i32, ptr %8, align 8
  %146 = sext i32 %145 to i64
  %147 = getelementptr ptr, ptr %143, i64 %146
  %148 = getelementptr i8, ptr %147, i64 8
  %149 = load ptr, ptr %148, align 8
  %150 = call ptr @typegetter_wrapper(ptr %149, ptr %142)
  %151 = load ptr, ptr %6, align 8
  %152 = load ptr, ptr %5, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 408, ptr %152)
  %154 = load i32, ptr %8, align 8
  %155 = sext i32 %154 to i64
  %156 = getelementptr ptr, ptr %152, i64 %155
  %157 = load ptr, ptr %156, align 8
  %158 = call ptr @typegetter_wrapper(ptr %157, ptr %151)
  %159 = call ptr @bump_malloc(i64 32)
  %160 = getelementptr i8, ptr %159, i64 16
  store ptr %158, ptr %160, align 8
  %161 = getelementptr i8, ptr %159, i64 8
  store ptr %150, ptr %161, align 8
  %162 = getelementptr i8, ptr %159, i64 24
  store ptr null, ptr %162, align 8
  %163 = call ptr @llvm.invariant.start.p0(i64 24, ptr %159)
  store ptr @function_typ, ptr %159, align 8
  %164 = alloca [2 x ptr], align 8
  store ptr %138, ptr %164, align 8
  %165 = getelementptr inbounds i8, ptr %164, i64 8
  store ptr %159, ptr %165, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %164)
  %167 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @MapIterator)
  %168 = alloca { ptr, ptr }, align 8
  store ptr %119, ptr %168, align 8
  %169 = getelementptr inbounds i8, ptr %168, i64 8
  store ptr @function_typ, ptr %169, align 8
  %170 = call ptr @behavior_wrapper(ptr nonnull @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U, { ptr, ptr, ptr, i32 } %129, ptr nonnull %168)
  call void %170({ ptr, ptr, ptr, i32 } %129, { ptr, ptr, ptr, i32 } %129, ptr nonnull %164, { ptr, ptr, ptr, i32 } %126, { ptr } %110) #25
  %171 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @MapIterator, ptr %171, align 8
  %172 = getelementptr inbounds i8, ptr %171, i64 8
  store ptr %67, ptr %172, align 8
  %173 = getelementptr inbounds i8, ptr %171, i64 16
  %174 = getelementptr inbounds i8, ptr %171, i64 24
  store i32 10, ptr %174, align 8
  call void @set_offset(ptr nonnull %171, ptr nonnull @Iterator)
  %175 = load ptr, ptr %171, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %175, 0
  %177 = load ptr, ptr %172, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, ptr %177, 1
  %179 = load ptr, ptr %173, align 8
  %180 = insertvalue { ptr, ptr, ptr, i32 } %178, ptr %179, 2
  %181 = load i32, ptr %174, align 8
  %182 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 %181, 3
  ret { ptr, ptr, ptr, i32 } %182
}

define void @Iterable_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract6, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract7, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract8, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Iterable)
  %.fca.0.extract3 = extractvalue { ptr } %3, 0
  %10 = load ptr, ptr %6, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %12 = load ptr, ptr %7, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %12, 1
  %14 = load ptr, ptr %8, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %14, 2
  %16 = load i32, ptr %9, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %16, 3
  %18 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %19 = call ptr @llvm.invariant.start.p0(i64 184, ptr %10)
  %20 = sext i32 %16 to i64
  %21 = getelementptr ptr, ptr %10, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
  %25 = call { ptr, ptr, ptr, i32 } %24({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr %.fca.1.extract, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr %.fca.2.extract, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %26, i64 24
  store i32 %.fca.3.extract, ptr %29, align 8
  call void @set_offset(ptr nonnull %26, ptr nonnull @Iterator)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = load ptr, ptr %26, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr inbounds i8, ptr %30, i64 8
  %33 = load ptr, ptr %27, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %30, i64 16
  %35 = load ptr, ptr %28, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr inbounds i8, ptr %30, i64 24
  %37 = load i32, ptr %29, align 8
  store i32 %37, ptr %36, align 8
  call void @set_offset(ptr nonnull %30, ptr nonnull @Iterator)
  %38 = load ptr, ptr %30, align 8
  %39 = load ptr, ptr %32, align 8
  %40 = load ptr, ptr %34, align 8
  %41 = load i32, ptr %36, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %39, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %40, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %41, 3
  %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %47 = call ptr @llvm.invariant.start.p0(i64 24, ptr %38)
  %48 = sext i32 %41 to i64
  %49 = getelementptr ptr, ptr %38, i64 %48
  %50 = getelementptr i8, ptr %49, i64 8
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %4
  %51 = load ptr, ptr %50, align 8
  %52 = call ptr @behavior_wrapper(ptr %51, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5)
  %53 = call { ptr, i160 } %52({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5) #25
  %.fca.0.extract22 = extractvalue { ptr, i160 } %53, 0
  %54 = load ptr, ptr %7, align 8
  %55 = load ptr, ptr %6, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 184, ptr %55)
  %57 = load i32, ptr %9, align 8
  %58 = sext i32 %57 to i64
  %59 = getelementptr ptr, ptr %55, i64 %58
  %60 = load ptr, ptr %59, align 8
  %61 = call ptr @typegetter_wrapper(ptr %60, ptr %54)
  %62 = icmp ne ptr %.fca.0.extract22, @nil_typ
  %63 = icmp ne ptr %.fca.0.extract22, null
  %.not28 = and i1 %62, %63
  br i1 %.not28, label %._crit_edge, label %.critedge

._crit_edge:                                      ; preds = %._crit_edge1
  call void %.fca.0.extract3({ ptr, i160 } %53)
  br label %._crit_edge1

.critedge:                                        ; preds = %._crit_edge1
  ret void
}

define { ptr, i160 } @Iterable_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr } %4) {
  %6 = alloca [0 x ptr], align 8
  %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract15 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract13, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract14, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract15, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract16, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @Iterable)
  %.fca.0.extract9 = extractvalue { ptr, i160 } %3, 0
  %.fca.1.extract10 = extractvalue { ptr, i160 } %3, 1
  %.fca.0.extract3 = extractvalue { ptr } %4, 0
  %11 = load ptr, ptr %7, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %11, 0
  %13 = load ptr, ptr %8, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr %13, 1
  %15 = load ptr, ptr %9, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr %15, 2
  %17 = load i32, ptr %10, align 8
  %18 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 %17, 3
  %19 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %20 = call ptr @llvm.invariant.start.p0(i64 184, ptr %11)
  %21 = sext i32 %17 to i64
  %22 = getelementptr ptr, ptr %11, i64 %21
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @behavior_wrapper(ptr %24, { ptr, ptr, ptr, i32 } %18, ptr nonnull %6)
  %26 = call { ptr, ptr, ptr, i32 } %25({ ptr, ptr, ptr, i32 } %18, { ptr, ptr, ptr, i32 } %18, ptr nonnull %6) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 3
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %27, i64 8
  store ptr %.fca.1.extract, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %27, i64 16
  store ptr %.fca.2.extract, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %27, i64 24
  store i32 %.fca.3.extract, ptr %30, align 8
  call void @set_offset(ptr nonnull %27, ptr nonnull @Iterator)
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = load ptr, ptr %27, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr inbounds i8, ptr %31, i64 8
  %34 = load ptr, ptr %28, align 8
  store ptr %34, ptr %33, align 8
  %35 = getelementptr inbounds i8, ptr %31, i64 16
  %36 = load ptr, ptr %29, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr inbounds i8, ptr %31, i64 24
  %38 = load i32, ptr %30, align 8
  store i32 %38, ptr %37, align 8
  call void @set_offset(ptr nonnull %31, ptr nonnull @Iterator)
  %39 = load ptr, ptr %31, align 8
  %40 = load ptr, ptr %33, align 8
  %41 = load ptr, ptr %35, align 8
  %42 = load i32, ptr %37, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %39, 0
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %40, 1
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %41, 2
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %42, 3
  %47 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %48 = call ptr @llvm.invariant.start.p0(i64 24, ptr %39)
  %49 = sext i32 %42 to i64
  %50 = getelementptr ptr, ptr %39, i64 %49
  %51 = getelementptr i8, ptr %50, i64 8
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %5
  %.045 = phi ptr [ %.fca.0.extract9, %5 ], [ %.146, %._crit_edge ]
  %.0 = phi i160 [ %.fca.1.extract10, %5 ], [ %.1, %._crit_edge ]
  %52 = load ptr, ptr %51, align 8
  %53 = call ptr @behavior_wrapper(ptr %52, { ptr, ptr, ptr, i32 } %46, ptr nonnull %6)
  %54 = call { ptr, i160 } %53({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr nonnull %6) #25
  %.fca.0.extract40 = extractvalue { ptr, i160 } %54, 0
  %55 = load ptr, ptr %8, align 8
  %56 = load ptr, ptr %7, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 184, ptr %56)
  %58 = load i32, ptr %10, align 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr ptr, ptr %56, i64 %59
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @typegetter_wrapper(ptr %61, ptr %55)
  %63 = icmp ne ptr %.fca.0.extract40, @nil_typ
  %64 = icmp ne ptr %.fca.0.extract40, null
  %.not48 = and i1 %63, %64
  br i1 %.not48, label %65, label %._crit_edge

65:                                               ; preds = %._crit_edge1
  %66 = insertvalue { ptr, i160 } undef, ptr %.045, 0
  %67 = insertvalue { ptr, i160 } %66, i160 %.0, 1
  %68 = call { ptr, i160 } %.fca.0.extract3({ ptr, i160 } %67, { ptr, i160 } %54)
  %.fca.0.extract27 = extractvalue { ptr, i160 } %68, 0
  %.fca.1.extract28 = extractvalue { ptr, i160 } %68, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %65, %._crit_edge1
  %.146 = phi ptr [ %.fca.0.extract27, %65 ], [ %.045, %._crit_edge1 ]
  %.1 = phi i160 [ %.fca.1.extract28, %65 ], [ %.0, %._crit_edge1 ]
  br i1 %.not48, label %._crit_edge1, label %69

69:                                               ; preds = %._crit_edge
  %70 = insertvalue { ptr, i160 } undef, ptr %.146, 0
  %71 = insertvalue { ptr, i160 } %70, i160 %.1, 1
  ret { ptr, i160 } %71
}

define noundef i1 @Iterable_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract6, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract7, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract8, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Iterable)
  %.fca.0.extract3 = extractvalue { ptr } %3, 0
  %10 = load ptr, ptr %6, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %12 = load ptr, ptr %7, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %12, 1
  %14 = load ptr, ptr %8, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %14, 2
  %16 = load i32, ptr %9, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %16, 3
  %18 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %19 = call ptr @llvm.invariant.start.p0(i64 184, ptr %10)
  %20 = sext i32 %16 to i64
  %21 = getelementptr ptr, ptr %10, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
  %25 = call { ptr, ptr, ptr, i32 } %24({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr %.fca.1.extract, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr %.fca.2.extract, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %26, i64 24
  store i32 %.fca.3.extract, ptr %29, align 8
  call void @set_offset(ptr nonnull %26, ptr nonnull @Iterator)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = load ptr, ptr %26, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr inbounds i8, ptr %30, i64 8
  %33 = load ptr, ptr %27, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %30, i64 16
  %35 = load ptr, ptr %28, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr inbounds i8, ptr %30, i64 24
  %37 = load i32, ptr %29, align 8
  store i32 %37, ptr %36, align 8
  call void @set_offset(ptr nonnull %30, ptr nonnull @Iterator)
  %38 = load ptr, ptr %30, align 8
  %39 = load ptr, ptr %32, align 8
  %40 = load ptr, ptr %34, align 8
  %41 = load i32, ptr %36, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %39, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %40, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %41, 3
  %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %47 = call ptr @llvm.invariant.start.p0(i64 24, ptr %38)
  %48 = sext i32 %41 to i64
  %49 = getelementptr ptr, ptr %38, i64 %48
  %50 = getelementptr i8, ptr %49, i64 8
  br label %51

51:                                               ; preds = %65, %4
  %52 = load ptr, ptr %50, align 8
  %53 = call ptr @behavior_wrapper(ptr %52, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5)
  %54 = call { ptr, i160 } %53({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5) #25
  %.fca.0.extract25 = extractvalue { ptr, i160 } %54, 0
  %55 = load ptr, ptr %7, align 8
  %56 = load ptr, ptr %6, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 184, ptr %56)
  %58 = load i32, ptr %9, align 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr ptr, ptr %56, i64 %59
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @typegetter_wrapper(ptr %61, ptr %55)
  %63 = icmp eq ptr %.fca.0.extract25, @nil_typ
  %64 = icmp eq ptr %.fca.0.extract25, null
  %.not28.not = or i1 %63, %64
  br i1 %.not28.not, label %.critedge.cont, label %65

65:                                               ; preds = %51
  %66 = call i1 %.fca.0.extract3({ ptr, i160 } %54)
  br i1 %66, label %51, label %.critedge.cont

.critedge.cont:                                   ; preds = %65, %51
  ret i1 %.not28.not
}

define noundef i1 @Iterable_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract6, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract7, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract8, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Iterable)
  %.fca.0.extract3 = extractvalue { ptr } %3, 0
  %10 = load ptr, ptr %6, align 8
  %11 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %10, 0
  %12 = load ptr, ptr %7, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %11, ptr %12, 1
  %14 = load ptr, ptr %8, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %13, ptr %14, 2
  %16 = load i32, ptr %9, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 %16, 3
  %18 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %19 = call ptr @llvm.invariant.start.p0(i64 184, ptr %10)
  %20 = sext i32 %16 to i64
  %21 = getelementptr ptr, ptr %10, i64 %20
  %22 = getelementptr i8, ptr %21, i64 8
  %23 = load ptr, ptr %22, align 8
  %24 = call ptr @behavior_wrapper(ptr %23, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5)
  %25 = call { ptr, ptr, ptr, i32 } %24({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %5) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr %.fca.1.extract, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr %.fca.2.extract, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %26, i64 24
  store i32 %.fca.3.extract, ptr %29, align 8
  call void @set_offset(ptr nonnull %26, ptr nonnull @Iterator)
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  %31 = load ptr, ptr %26, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr inbounds i8, ptr %30, i64 8
  %33 = load ptr, ptr %27, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %30, i64 16
  %35 = load ptr, ptr %28, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr inbounds i8, ptr %30, i64 24
  %37 = load i32, ptr %29, align 8
  store i32 %37, ptr %36, align 8
  call void @set_offset(ptr nonnull %30, ptr nonnull @Iterator)
  %38 = load ptr, ptr %30, align 8
  %39 = load ptr, ptr %32, align 8
  %40 = load ptr, ptr %34, align 8
  %41 = load i32, ptr %36, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %43 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %39, 1
  %44 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %40, 2
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %41, 3
  %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %47 = call ptr @llvm.invariant.start.p0(i64 24, ptr %38)
  %48 = sext i32 %41 to i64
  %49 = getelementptr ptr, ptr %38, i64 %48
  %50 = getelementptr i8, ptr %49, i64 8
  br label %51

51:                                               ; preds = %65, %4
  %52 = load ptr, ptr %50, align 8
  %53 = call ptr @behavior_wrapper(ptr %52, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5)
  %54 = call { ptr, i160 } %53({ ptr, ptr, ptr, i32 } %45, { ptr, ptr, ptr, i32 } %45, ptr nonnull %5) #25
  %.fca.0.extract23 = extractvalue { ptr, i160 } %54, 0
  %55 = load ptr, ptr %7, align 8
  %56 = load ptr, ptr %6, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 184, ptr %56)
  %58 = load i32, ptr %9, align 8
  %59 = sext i32 %58 to i64
  %60 = getelementptr ptr, ptr %56, i64 %59
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @typegetter_wrapper(ptr %61, ptr %55)
  %63 = icmp ne ptr %.fca.0.extract23, @nil_typ
  %64 = icmp ne ptr %.fca.0.extract23, null
  %.not26 = and i1 %63, %64
  br i1 %.not26, label %65, label %.critedge.cont

65:                                               ; preds = %51
  %66 = call i1 %.fca.0.extract3({ ptr, i160 } %54)
  br i1 %66, label %.critedge.cont, label %51

.critedge.cont:                                   ; preds = %65, %51
  ret i1 %.not26
}

define { ptr, ptr, ptr, i32 } @Iterable_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readonly %2, { ptr } %3) {
  %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract8, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Iterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 184, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr @typegetter_wrapper(ptr %15, ptr %9)
  %17 = load ptr, ptr %2, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  %20 = alloca [3 x ptr], align 8
  store ptr @MapIterable, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr %16, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %20, i64 16
  store ptr %19, ptr %22, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_MapIterable, ptr nonnull %20)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  store ptr %16, ptr %25, align 8
  %26 = getelementptr i8, ptr %25, i64 8
  store ptr %19, ptr %26, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %25)
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = load ptr, ptr %5, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr inbounds i8, ptr %28, i64 8
  %31 = load ptr, ptr %6, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr inbounds i8, ptr %28, i64 16
  %33 = load ptr, ptr %7, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %28, i64 24
  %35 = load i32, ptr %8, align 8
  store i32 %35, ptr %34, align 8
  call void @set_offset(ptr nonnull %28, ptr nonnull @Iterable)
  %36 = load ptr, ptr %28, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %38 = load ptr, ptr %30, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 1
  %40 = load ptr, ptr %32, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 2
  %42 = load i32, ptr %34, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %42, 3
  %44 = insertvalue { ptr, ptr, ptr, i32 } { ptr @MapIterable, ptr undef, ptr undef, i32 undef }, ptr %25, 1
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr undef, 2
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 10, 3
  %47 = load ptr, ptr %6, align 8
  %48 = load ptr, ptr %5, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 184, ptr %48)
  %50 = load i32, ptr %8, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr ptr, ptr %48, i64 %51
  %53 = load ptr, ptr %52, align 8
  %54 = call ptr @typegetter_wrapper(ptr %53, ptr %47)
  %55 = call ptr @bump_malloc(i64 24)
  %56 = getelementptr i8, ptr %55, i64 8
  store ptr %54, ptr %56, align 8
  %57 = getelementptr i8, ptr %55, i64 16
  store ptr null, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 16, ptr %55)
  store ptr @Iterable, ptr %55, align 8
  %59 = load ptr, ptr %2, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %6, align 8
  %63 = load ptr, ptr %5, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 184, ptr %63)
  %65 = load i32, ptr %8, align 8
  %66 = sext i32 %65 to i64
  %67 = getelementptr ptr, ptr %63, i64 %66
  %68 = load ptr, ptr %67, align 8
  %69 = call ptr @typegetter_wrapper(ptr %68, ptr %62)
  %70 = call ptr @bump_malloc(i64 32)
  %71 = getelementptr i8, ptr %70, i64 16
  store ptr %69, ptr %71, align 8
  %72 = getelementptr i8, ptr %70, i64 8
  store ptr %61, ptr %72, align 8
  %73 = getelementptr i8, ptr %70, i64 24
  store ptr null, ptr %73, align 8
  %74 = call ptr @llvm.invariant.start.p0(i64 24, ptr %70)
  store ptr @function_typ, ptr %70, align 8
  %75 = alloca [2 x ptr], align 8
  store ptr %55, ptr %75, align 8
  %76 = getelementptr inbounds i8, ptr %75, i64 8
  store ptr %70, ptr %76, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %75)
  %78 = call ptr @llvm.invariant.start.p0(i64 408, ptr nonnull @MapIterable)
  %79 = alloca { ptr, ptr }, align 8
  store ptr %36, ptr %79, align 8
  %80 = getelementptr inbounds i8, ptr %79, i64 8
  store ptr @function_typ, ptr %80, align 8
  %81 = call ptr @behavior_wrapper(ptr nonnull @MapIterable_B_init_iterableIterableT_fFunctionT_to_U, { ptr, ptr, ptr, i32 } %46, ptr nonnull %79)
  call void %81({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr nonnull %75, { ptr, ptr, ptr, i32 } %43, { ptr } %3) #25
  %82 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @MapIterable, ptr %82, align 8
  %83 = getelementptr inbounds i8, ptr %82, i64 8
  store ptr %25, ptr %83, align 8
  %84 = getelementptr inbounds i8, ptr %82, i64 16
  %85 = getelementptr inbounds i8, ptr %82, i64 24
  store i32 10, ptr %85, align 8
  call void @set_offset(ptr nonnull %82, ptr nonnull @MapIterable)
  %86 = load ptr, ptr %82, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %86, 0
  %88 = load ptr, ptr %83, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, ptr %88, 1
  %90 = load ptr, ptr %84, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %90, 2
  %92 = load i32, ptr %85, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, i32 %92, 3
  ret { ptr, ptr, ptr, i32 } %93
}

define { ptr, ptr, ptr, i32 } @Iterable_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3) {
  %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract8, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Iterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 184, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr @typegetter_wrapper(ptr %15, ptr %9)
  %17 = alloca [2 x ptr], align 8
  store ptr @FilterIterable, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr %16, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FilterIterable, ptr nonnull %17)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  store ptr %16, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %21)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = load ptr, ptr %5, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 8
  %26 = load ptr, ptr %6, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr inbounds i8, ptr %23, i64 16
  %28 = load ptr, ptr %7, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %23, i64 24
  %30 = load i32, ptr %8, align 8
  store i32 %30, ptr %29, align 8
  call void @set_offset(ptr nonnull %23, ptr nonnull @Iterable)
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = load ptr, ptr %25, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = load ptr, ptr %27, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 2
  %37 = load i32, ptr %29, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %37, 3
  %39 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FilterIterable, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr undef, 2
  %41 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 10, 3
  %42 = load ptr, ptr %6, align 8
  %43 = load ptr, ptr %5, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 184, ptr %43)
  %45 = load i32, ptr %8, align 8
  %46 = sext i32 %45 to i64
  %47 = getelementptr ptr, ptr %43, i64 %46
  %48 = load ptr, ptr %47, align 8
  %49 = call ptr @typegetter_wrapper(ptr %48, ptr %42)
  %50 = call ptr @bump_malloc(i64 24)
  %51 = getelementptr i8, ptr %50, i64 8
  store ptr %49, ptr %51, align 8
  %52 = getelementptr i8, ptr %50, i64 16
  store ptr null, ptr %52, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 16, ptr %50)
  store ptr @Iterable, ptr %50, align 8
  %54 = load ptr, ptr %6, align 8
  %55 = load ptr, ptr %5, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 184, ptr %55)
  %57 = load i32, ptr %8, align 8
  %58 = sext i32 %57 to i64
  %59 = getelementptr ptr, ptr %55, i64 %58
  %60 = load ptr, ptr %59, align 8
  %61 = call ptr @typegetter_wrapper(ptr %60, ptr %54)
  %62 = call ptr @bump_malloc(i64 32)
  %63 = getelementptr i8, ptr %62, i64 16
  store ptr %61, ptr %63, align 8
  %64 = getelementptr i8, ptr %62, i64 8
  store ptr @_parameterization_i1, ptr %64, align 8
  %65 = getelementptr i8, ptr %62, i64 24
  store ptr null, ptr %65, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 24, ptr %62)
  store ptr @function_typ, ptr %62, align 8
  %67 = alloca [2 x ptr], align 8
  store ptr %50, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr %62, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %67)
  %70 = call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @FilterIterable)
  %71 = alloca { ptr, ptr }, align 8
  store ptr %31, ptr %71, align 8
  %72 = getelementptr inbounds i8, ptr %71, i64 8
  store ptr @function_typ, ptr %72, align 8
  %73 = call ptr @behavior_wrapper(ptr nonnull @FilterIterable_B_init_iterableIterableT_fFunctionT_to_i1, { ptr, ptr, ptr, i32 } %41, ptr nonnull %71)
  call void %73({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr nonnull %67, { ptr, ptr, ptr, i32 } %38, { ptr } %3) #25
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @FilterIterable, ptr %74, align 8
  %75 = getelementptr inbounds i8, ptr %74, i64 8
  store ptr %21, ptr %75, align 8
  %76 = getelementptr inbounds i8, ptr %74, i64 16
  %77 = getelementptr inbounds i8, ptr %74, i64 24
  store i32 10, ptr %77, align 8
  call void @set_offset(ptr nonnull %74, ptr nonnull @FilterIterable)
  %78 = load ptr, ptr %74, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = load ptr, ptr %75, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 1
  %82 = load ptr, ptr %76, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 2
  %84 = load i32, ptr %77, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %84, 3
  ret { ptr, ptr, ptr, i32 } %85
}

define { ptr, ptr, ptr, i32 } @Iterable_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract7, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract8, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract9, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract10, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Iterable)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @Iterable)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 184, ptr %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @typegetter_wrapper(ptr %19, ptr %13)
  %21 = alloca [2 x ptr], align 8
  store ptr @ChainIterable, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr %20, ptr %22, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ChainIterable, ptr nonnull %21)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  store ptr %20, ptr %25, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %25)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = load ptr, ptr %5, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %27, i64 8
  %30 = load ptr, ptr %6, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr inbounds i8, ptr %27, i64 16
  %32 = load ptr, ptr %7, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr inbounds i8, ptr %27, i64 24
  %34 = load i32, ptr %8, align 8
  store i32 %34, ptr %33, align 8
  call void @set_offset(ptr nonnull %27, ptr nonnull @Iterable)
  %35 = load ptr, ptr %27, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = load ptr, ptr %29, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 1
  %39 = load ptr, ptr %31, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 2
  %41 = load i32, ptr %33, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %41, 3
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = load ptr, ptr %9, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr inbounds i8, ptr %43, i64 8
  %46 = load ptr, ptr %10, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr inbounds i8, ptr %43, i64 16
  %48 = load ptr, ptr %11, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr inbounds i8, ptr %43, i64 24
  %50 = load i32, ptr %12, align 8
  store i32 %50, ptr %49, align 8
  call void @set_offset(ptr nonnull %43, ptr nonnull @Iterable)
  %51 = load ptr, ptr %43, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %45, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %47, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %49, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ChainIterable, ptr undef, ptr undef, i32 undef }, ptr %25, 1
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr undef, 2
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 10, 3
  %62 = load ptr, ptr %6, align 8
  %63 = load ptr, ptr %5, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 184, ptr %63)
  %65 = load i32, ptr %8, align 8
  %66 = sext i32 %65 to i64
  %67 = getelementptr ptr, ptr %63, i64 %66
  %68 = load ptr, ptr %67, align 8
  %69 = call ptr @typegetter_wrapper(ptr %68, ptr %62)
  %70 = call ptr @bump_malloc(i64 24)
  %71 = getelementptr i8, ptr %70, i64 8
  store ptr %69, ptr %71, align 8
  %72 = getelementptr i8, ptr %70, i64 16
  store ptr null, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %70)
  store ptr @Iterable, ptr %70, align 8
  %74 = load ptr, ptr %6, align 8
  %75 = load ptr, ptr %5, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 184, ptr %75)
  %77 = load i32, ptr %8, align 8
  %78 = sext i32 %77 to i64
  %79 = getelementptr ptr, ptr %75, i64 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %74)
  %82 = call ptr @bump_malloc(i64 24)
  %83 = getelementptr i8, ptr %82, i64 8
  store ptr %81, ptr %83, align 8
  %84 = getelementptr i8, ptr %82, i64 16
  store ptr null, ptr %84, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 16, ptr %82)
  store ptr @Iterable, ptr %82, align 8
  %86 = alloca [2 x ptr], align 8
  store ptr %70, ptr %86, align 8
  %87 = getelementptr inbounds i8, ptr %86, i64 8
  store ptr %82, ptr %87, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %86)
  %89 = call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @ChainIterable)
  %90 = alloca { ptr, ptr }, align 8
  store ptr %35, ptr %90, align 8
  %91 = getelementptr inbounds i8, ptr %90, i64 8
  store ptr %51, ptr %91, align 8
  %92 = call ptr @behavior_wrapper(ptr nonnull @ChainIterable_B_init_firstIterableT_secondIterableT, { ptr, ptr, ptr, i32 } %61, ptr nonnull %90)
  call void %92({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr nonnull %86, { ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %58) #25
  %93 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ChainIterable, ptr %93, align 8
  %94 = getelementptr inbounds i8, ptr %93, i64 8
  store ptr %25, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %93, i64 16
  %96 = getelementptr inbounds i8, ptr %93, i64 24
  store i32 10, ptr %96, align 8
  call void @set_offset(ptr nonnull %93, ptr nonnull @ChainIterable)
  %97 = load ptr, ptr %93, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = load ptr, ptr %94, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 1
  %101 = load ptr, ptr %95, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %101, 2
  %103 = load i32, ptr %96, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %103, 3
  ret { ptr, ptr, ptr, i32 } %104
}

define { ptr, ptr, ptr, i32 } @Iterable_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract7, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract8, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract9, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract10, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Iterable)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @Iterable)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 184, ptr %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @typegetter_wrapper(ptr %19, ptr %13)
  %21 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterable, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr %20, ptr %22, align 8
  %23 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_InterleaveIterable, ptr nonnull %21)
  %24 = extractvalue { i64, i64 } %23, 0
  %25 = call ptr @bump_malloc(i64 %24)
  store ptr %20, ptr %25, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %25)
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = load ptr, ptr %5, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %27, i64 8
  %30 = load ptr, ptr %6, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr inbounds i8, ptr %27, i64 16
  %32 = load ptr, ptr %7, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr inbounds i8, ptr %27, i64 24
  %34 = load i32, ptr %8, align 8
  store i32 %34, ptr %33, align 8
  call void @set_offset(ptr nonnull %27, ptr nonnull @Iterable)
  %35 = load ptr, ptr %27, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = load ptr, ptr %29, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 1
  %39 = load ptr, ptr %31, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 2
  %41 = load i32, ptr %33, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %41, 3
  %43 = alloca { ptr, ptr, ptr, i32 }, align 8
  %44 = load ptr, ptr %9, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr inbounds i8, ptr %43, i64 8
  %46 = load ptr, ptr %10, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr inbounds i8, ptr %43, i64 16
  %48 = load ptr, ptr %11, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr inbounds i8, ptr %43, i64 24
  %50 = load i32, ptr %12, align 8
  store i32 %50, ptr %49, align 8
  call void @set_offset(ptr nonnull %43, ptr nonnull @Iterable)
  %51 = load ptr, ptr %43, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %45, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %47, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %49, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = insertvalue { ptr, ptr, ptr, i32 } { ptr @InterleaveIterable, ptr undef, ptr undef, i32 undef }, ptr %25, 1
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr undef, 2
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 10, 3
  %62 = load ptr, ptr %6, align 8
  %63 = load ptr, ptr %5, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 184, ptr %63)
  %65 = load i32, ptr %8, align 8
  %66 = sext i32 %65 to i64
  %67 = getelementptr ptr, ptr %63, i64 %66
  %68 = load ptr, ptr %67, align 8
  %69 = call ptr @typegetter_wrapper(ptr %68, ptr %62)
  %70 = call ptr @bump_malloc(i64 24)
  %71 = getelementptr i8, ptr %70, i64 8
  store ptr %69, ptr %71, align 8
  %72 = getelementptr i8, ptr %70, i64 16
  store ptr null, ptr %72, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 16, ptr %70)
  store ptr @Iterable, ptr %70, align 8
  %74 = load ptr, ptr %6, align 8
  %75 = load ptr, ptr %5, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 184, ptr %75)
  %77 = load i32, ptr %8, align 8
  %78 = sext i32 %77 to i64
  %79 = getelementptr ptr, ptr %75, i64 %78
  %80 = load ptr, ptr %79, align 8
  %81 = call ptr @typegetter_wrapper(ptr %80, ptr %74)
  %82 = call ptr @bump_malloc(i64 24)
  %83 = getelementptr i8, ptr %82, i64 8
  store ptr %81, ptr %83, align 8
  %84 = getelementptr i8, ptr %82, i64 16
  store ptr null, ptr %84, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 16, ptr %82)
  store ptr @Iterable, ptr %82, align 8
  %86 = alloca [2 x ptr], align 8
  store ptr %70, ptr %86, align 8
  %87 = getelementptr inbounds i8, ptr %86, i64 8
  store ptr %82, ptr %87, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %86)
  %89 = call ptr @llvm.invariant.start.p0(i64 400, ptr nonnull @InterleaveIterable)
  %90 = alloca { ptr, ptr }, align 8
  store ptr %35, ptr %90, align 8
  %91 = getelementptr inbounds i8, ptr %90, i64 8
  store ptr %51, ptr %91, align 8
  %92 = call ptr @behavior_wrapper(ptr nonnull @InterleaveIterable_B_init_firstIterableT_secondIterableT, { ptr, ptr, ptr, i32 } %61, ptr nonnull %90)
  call void %92({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr nonnull %86, { ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %58) #25
  %93 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @InterleaveIterable, ptr %93, align 8
  %94 = getelementptr inbounds i8, ptr %93, i64 8
  store ptr %25, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %93, i64 16
  %96 = getelementptr inbounds i8, ptr %93, i64 24
  store i32 10, ptr %96, align 8
  call void @set_offset(ptr nonnull %93, ptr nonnull @InterleaveIterable)
  %97 = load ptr, ptr %93, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %97, 0
  %99 = load ptr, ptr %94, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 1
  %101 = load ptr, ptr %95, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, ptr %101, 2
  %103 = load i32, ptr %96, align 8
  %104 = insertvalue { ptr, ptr, ptr, i32 } %102, i32 %103, 3
  ret { ptr, ptr, ptr, i32 } %104
}

define { ptr, ptr, ptr, i32 } @Iterable_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract31 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract30, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract31, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract32, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract33, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Iterable)
  %.fca.0.extract23 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract24 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract25 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract26 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract23, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract24, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract25, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract26, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @Iterable)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 184, ptr %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @typegetter_wrapper(ptr %19, ptr %13)
  %21 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract23)
  %22 = sext i32 %.fca.3.extract26 to i64
  %23 = getelementptr ptr, ptr %.fca.0.extract23, i64 %22
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @typegetter_wrapper(ptr %24, ptr %.fca.1.extract24)
  %26 = load ptr, ptr %6, align 8
  %27 = load ptr, ptr %5, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 184, ptr %27)
  %29 = load i32, ptr %8, align 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr ptr, ptr %27, i64 %30
  %32 = load ptr, ptr %31, align 8
  %33 = call ptr @typegetter_wrapper(ptr %32, ptr %26)
  %34 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract23)
  %35 = load ptr, ptr %23, align 8
  %36 = call ptr @typegetter_wrapper(ptr %35, ptr %.fca.1.extract24)
  %37 = call ptr @bump_malloc(i64 32)
  %38 = getelementptr i8, ptr %37, i64 16
  store ptr %36, ptr %38, align 8
  %39 = getelementptr i8, ptr %37, i64 8
  store ptr %33, ptr %39, align 8
  %40 = getelementptr i8, ptr %37, i64 24
  store ptr null, ptr %40, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 24, ptr %37)
  store ptr @Pair, ptr %37, align 8
  %42 = alloca [4 x ptr], align 8
  store ptr @ZipIterable, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %42, i64 8
  store ptr %20, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %42, i64 16
  store ptr %25, ptr %44, align 8
  %45 = getelementptr inbounds i8, ptr %42, i64 24
  store ptr %37, ptr %45, align 8
  %46 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ZipIterable, ptr nonnull %42)
  %47 = extractvalue { i64, i64 } %46, 0
  %48 = call ptr @bump_malloc(i64 %47)
  store ptr %20, ptr %48, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  store ptr %25, ptr %49, align 8
  %50 = getelementptr i8, ptr %48, i64 16
  store ptr %37, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %48)
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = load ptr, ptr %5, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr inbounds i8, ptr %52, i64 8
  %55 = load ptr, ptr %6, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr inbounds i8, ptr %52, i64 16
  %57 = load ptr, ptr %7, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr inbounds i8, ptr %52, i64 24
  %59 = load i32, ptr %8, align 8
  store i32 %59, ptr %58, align 8
  call void @set_offset(ptr nonnull %52, ptr nonnull @Iterable)
  %60 = load ptr, ptr %52, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %54, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %56, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = load ptr, ptr %9, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr inbounds i8, ptr %68, i64 8
  %71 = load ptr, ptr %10, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr inbounds i8, ptr %68, i64 16
  %73 = load ptr, ptr %11, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr inbounds i8, ptr %68, i64 24
  %75 = load i32, ptr %12, align 8
  store i32 %75, ptr %74, align 8
  call void @set_offset(ptr nonnull %68, ptr nonnull @Iterable)
  %76 = load ptr, ptr %68, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = load ptr, ptr %70, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 1
  %80 = load ptr, ptr %72, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 2
  %82 = load i32, ptr %74, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %82, 3
  %84 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ZipIterable, ptr undef, ptr undef, i32 undef }, ptr %48, 1
  %85 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr undef, 2
  %86 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 10, 3
  %87 = load ptr, ptr %6, align 8
  %88 = load ptr, ptr %5, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 184, ptr %88)
  %90 = load i32, ptr %8, align 8
  %91 = sext i32 %90 to i64
  %92 = getelementptr ptr, ptr %88, i64 %91
  %93 = load ptr, ptr %92, align 8
  %94 = call ptr @typegetter_wrapper(ptr %93, ptr %87)
  %95 = call ptr @bump_malloc(i64 24)
  %96 = getelementptr i8, ptr %95, i64 8
  store ptr %94, ptr %96, align 8
  %97 = getelementptr i8, ptr %95, i64 16
  store ptr null, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  store ptr @Iterable, ptr %95, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract23)
  %100 = load ptr, ptr %23, align 8
  %101 = call ptr @typegetter_wrapper(ptr %100, ptr %.fca.1.extract24)
  %102 = call ptr @bump_malloc(i64 24)
  %103 = getelementptr i8, ptr %102, i64 8
  store ptr %101, ptr %103, align 8
  %104 = getelementptr i8, ptr %102, i64 16
  store ptr null, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 16, ptr %102)
  store ptr @Iterable, ptr %102, align 8
  %106 = alloca [2 x ptr], align 8
  store ptr %95, ptr %106, align 8
  %107 = getelementptr inbounds i8, ptr %106, i64 8
  store ptr %102, ptr %107, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %106)
  %109 = call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ZipIterable)
  %110 = alloca { ptr, ptr }, align 8
  store ptr %60, ptr %110, align 8
  %111 = getelementptr inbounds i8, ptr %110, i64 8
  store ptr %76, ptr %111, align 8
  %112 = call ptr @behavior_wrapper(ptr nonnull @ZipIterable_B_init_firstIterableT_secondIterableU, { ptr, ptr, ptr, i32 } %86, ptr nonnull %110)
  call void %112({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr nonnull %106, { ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %83) #25
  %113 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ZipIterable, ptr %113, align 8
  %114 = getelementptr inbounds i8, ptr %113, i64 8
  store ptr %48, ptr %114, align 8
  %115 = getelementptr inbounds i8, ptr %113, i64 16
  %116 = getelementptr inbounds i8, ptr %113, i64 24
  store i32 10, ptr %116, align 8
  call void @set_offset(ptr nonnull %113, ptr nonnull @ZipIterable)
  %117 = load ptr, ptr %113, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = load ptr, ptr %114, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 1
  %121 = load ptr, ptr %115, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 2
  %123 = load i32, ptr %116, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 %123, 3
  ret { ptr, ptr, ptr, i32 } %124
}

define { ptr, ptr, ptr, i32 } @Iterable_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract30 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract31 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract30, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract31, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract32, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract33, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Iterable)
  %.fca.0.extract23 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract24 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract25 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract26 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract23, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract24, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract25, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract26, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @Iterable)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 184, ptr %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = call ptr @typegetter_wrapper(ptr %19, ptr %13)
  %21 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract23)
  %22 = sext i32 %.fca.3.extract26 to i64
  %23 = getelementptr ptr, ptr %.fca.0.extract23, i64 %22
  %24 = load ptr, ptr %23, align 8
  %25 = call ptr @typegetter_wrapper(ptr %24, ptr %.fca.1.extract24)
  %26 = load ptr, ptr %6, align 8
  %27 = load ptr, ptr %5, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 184, ptr %27)
  %29 = load i32, ptr %8, align 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr ptr, ptr %27, i64 %30
  %32 = load ptr, ptr %31, align 8
  %33 = call ptr @typegetter_wrapper(ptr %32, ptr %26)
  %34 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract23)
  %35 = load ptr, ptr %23, align 8
  %36 = call ptr @typegetter_wrapper(ptr %35, ptr %.fca.1.extract24)
  %37 = call ptr @bump_malloc(i64 32)
  %38 = getelementptr i8, ptr %37, i64 16
  store ptr %36, ptr %38, align 8
  %39 = getelementptr i8, ptr %37, i64 8
  store ptr %33, ptr %39, align 8
  %40 = getelementptr i8, ptr %37, i64 24
  store ptr null, ptr %40, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 24, ptr %37)
  store ptr @Pair, ptr %37, align 8
  %42 = alloca [4 x ptr], align 8
  store ptr @ProductIterable, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %42, i64 8
  store ptr %20, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %42, i64 16
  store ptr %25, ptr %44, align 8
  %45 = getelementptr inbounds i8, ptr %42, i64 24
  store ptr %37, ptr %45, align 8
  %46 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ProductIterable, ptr nonnull %42)
  %47 = extractvalue { i64, i64 } %46, 0
  %48 = call ptr @bump_malloc(i64 %47)
  store ptr %20, ptr %48, align 8
  %49 = getelementptr i8, ptr %48, i64 8
  store ptr %25, ptr %49, align 8
  %50 = getelementptr i8, ptr %48, i64 16
  store ptr %37, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %48)
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  %53 = load ptr, ptr %5, align 8
  store ptr %53, ptr %52, align 8
  %54 = getelementptr inbounds i8, ptr %52, i64 8
  %55 = load ptr, ptr %6, align 8
  store ptr %55, ptr %54, align 8
  %56 = getelementptr inbounds i8, ptr %52, i64 16
  %57 = load ptr, ptr %7, align 8
  store ptr %57, ptr %56, align 8
  %58 = getelementptr inbounds i8, ptr %52, i64 24
  %59 = load i32, ptr %8, align 8
  store i32 %59, ptr %58, align 8
  call void @set_offset(ptr nonnull %52, ptr nonnull @Iterable)
  %60 = load ptr, ptr %52, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %54, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %56, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  %68 = alloca { ptr, ptr, ptr, i32 }, align 8
  %69 = load ptr, ptr %9, align 8
  store ptr %69, ptr %68, align 8
  %70 = getelementptr inbounds i8, ptr %68, i64 8
  %71 = load ptr, ptr %10, align 8
  store ptr %71, ptr %70, align 8
  %72 = getelementptr inbounds i8, ptr %68, i64 16
  %73 = load ptr, ptr %11, align 8
  store ptr %73, ptr %72, align 8
  %74 = getelementptr inbounds i8, ptr %68, i64 24
  %75 = load i32, ptr %12, align 8
  store i32 %75, ptr %74, align 8
  call void @set_offset(ptr nonnull %68, ptr nonnull @Iterable)
  %76 = load ptr, ptr %68, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %76, 0
  %78 = load ptr, ptr %70, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 1
  %80 = load ptr, ptr %72, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 2
  %82 = load i32, ptr %74, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, i32 %82, 3
  %84 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ProductIterable, ptr undef, ptr undef, i32 undef }, ptr %48, 1
  %85 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr undef, 2
  %86 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 10, 3
  %87 = load ptr, ptr %6, align 8
  %88 = load ptr, ptr %5, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 184, ptr %88)
  %90 = load i32, ptr %8, align 8
  %91 = sext i32 %90 to i64
  %92 = getelementptr ptr, ptr %88, i64 %91
  %93 = load ptr, ptr %92, align 8
  %94 = call ptr @typegetter_wrapper(ptr %93, ptr %87)
  %95 = call ptr @bump_malloc(i64 24)
  %96 = getelementptr i8, ptr %95, i64 8
  store ptr %94, ptr %96, align 8
  %97 = getelementptr i8, ptr %95, i64 16
  store ptr null, ptr %97, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 16, ptr %95)
  store ptr @Iterable, ptr %95, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 184, ptr %.fca.0.extract23)
  %100 = load ptr, ptr %23, align 8
  %101 = call ptr @typegetter_wrapper(ptr %100, ptr %.fca.1.extract24)
  %102 = call ptr @bump_malloc(i64 24)
  %103 = getelementptr i8, ptr %102, i64 8
  store ptr %101, ptr %103, align 8
  %104 = getelementptr i8, ptr %102, i64 16
  store ptr null, ptr %104, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 16, ptr %102)
  store ptr @Iterable, ptr %102, align 8
  %106 = alloca [2 x ptr], align 8
  store ptr %95, ptr %106, align 8
  %107 = getelementptr inbounds i8, ptr %106, i64 8
  store ptr %102, ptr %107, align 8
  %108 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %106)
  %109 = call ptr @llvm.invariant.start.p0(i64 416, ptr nonnull @ProductIterable)
  %110 = alloca { ptr, ptr }, align 8
  store ptr %60, ptr %110, align 8
  %111 = getelementptr inbounds i8, ptr %110, i64 8
  store ptr %76, ptr %111, align 8
  %112 = call ptr @behavior_wrapper(ptr nonnull @ProductIterable_B_init_firstIterableT_secondIterableU, { ptr, ptr, ptr, i32 } %86, ptr nonnull %110)
  call void %112({ ptr, ptr, ptr, i32 } %86, { ptr, ptr, ptr, i32 } %86, ptr nonnull %106, { ptr, ptr, ptr, i32 } %67, { ptr, ptr, ptr, i32 } %83) #25
  %113 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ProductIterable, ptr %113, align 8
  %114 = getelementptr inbounds i8, ptr %113, i64 8
  store ptr %48, ptr %114, align 8
  %115 = getelementptr inbounds i8, ptr %113, i64 16
  %116 = getelementptr inbounds i8, ptr %113, i64 24
  store i32 10, ptr %116, align 8
  call void @set_offset(ptr nonnull %113, ptr nonnull @ProductIterable)
  %117 = load ptr, ptr %113, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %117, 0
  %119 = load ptr, ptr %114, align 8
  %120 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr %119, 1
  %121 = load ptr, ptr %115, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } %120, ptr %121, 2
  %123 = load i32, ptr %116, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, i32 %123, 3
  ret { ptr, ptr, ptr, i32 } %124
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read)
define ptr @typegetter_wrapper(ptr %f, ptr nocapture nofree noundef nonnull readonly %0) #0 {
  %result = call ptr %f(ptr nocapture nofree noundef nonnull readonly %0) #1
  ret ptr %result
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc(i64 noundef %size) #7 {
  %result = tail call noalias ptr @bump_malloc_inner(i64 noundef %size, ptr @current_ptr) #7
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ProductIterable(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 88, i64 8 }
}

define ptr @ProductIterable_B_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 216
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @behavior_wrapper(ptr %f, { ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #8 {
  %result = call ptr %f({ ptr, ptr, ptr, i32 } %0, ptr nocapture nofree noundef nonnull %1) #26
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable_field_ProductIterable_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable_field_ProductIterable_1(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterable_field_ProductIterable_2(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ProductIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 9197944775169318296, i64 ptrtoint (ptr @Pair to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 240
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ProductIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ProductIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ProductIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 296
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ProductIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 304
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @ProductIterable_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @ProductIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 416, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 24
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Iterable)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Iterable)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 416, ptr %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 32
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @ProductIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract53 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract55 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract57 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract51, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract53, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract55, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract57, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ProductIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 416, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract43 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract43, ptr %19, align 8
  %.fca.1.extract45 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep46 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract45, ptr %.fca.1.gep46, align 8
  %.fca.2.extract47 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep48 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract47, ptr %.fca.2.gep48, align 8
  %.fca.3.extract49 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep50 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract49, ptr %.fca.3.gep50, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep46, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep48, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep50, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 184, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract33 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract35 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract37 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract33, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract35, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract37, ptr %39, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 416, ptr %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 32
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %40) #24
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract23 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  store ptr %.fca.0.extract23, ptr %50, align 8
  %.fca.1.extract25 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.1.gep26 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr %.fca.1.extract25, ptr %.fca.1.gep26, align 8
  %.fca.2.extract27 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %.fca.2.gep28 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr %.fca.2.extract27, ptr %.fca.2.gep28, align 8
  %.fca.3.extract29 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %.fca.3.gep30 = getelementptr inbounds i8, ptr %50, i64 24
  store i32 %.fca.3.extract29, ptr %.fca.3.gep30, align 8
  call void @assume_offset(ptr nonnull %50, ptr nonnull @Iterable)
  %51 = load ptr, ptr %6, align 8
  %52 = load ptr, ptr %5, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 416, ptr %52)
  %54 = load i32, ptr %8, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr ptr, ptr %52, i64 %55
  %57 = load ptr, ptr %56, align 8
  %58 = call ptr @typegetter_wrapper(ptr %57, ptr %51)
  %59 = load ptr, ptr %6, align 8
  %60 = load ptr, ptr %5, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 416, ptr %60)
  %62 = load i32, ptr %8, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr ptr, ptr %60, i64 %63
  %65 = getelementptr i8, ptr %64, i64 8
  %66 = load ptr, ptr %65, align 8
  %67 = call ptr @typegetter_wrapper(ptr %66, ptr %59)
  %68 = load ptr, ptr %6, align 8
  %69 = load ptr, ptr %5, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 416, ptr %69)
  %71 = load i32, ptr %8, align 8
  %72 = sext i32 %71 to i64
  %73 = getelementptr ptr, ptr %69, i64 %72
  %74 = load ptr, ptr %73, align 8
  %75 = call ptr @typegetter_wrapper(ptr %74, ptr %68)
  %76 = load ptr, ptr %6, align 8
  %77 = load ptr, ptr %5, align 8
  %78 = call ptr @llvm.invariant.start.p0(i64 416, ptr %77)
  %79 = load i32, ptr %8, align 8
  %80 = sext i32 %79 to i64
  %81 = getelementptr ptr, ptr %77, i64 %80
  %82 = getelementptr i8, ptr %81, i64 8
  %83 = load ptr, ptr %82, align 8
  %84 = call ptr @typegetter_wrapper(ptr %83, ptr %76)
  %85 = call ptr @bump_malloc(i64 32)
  %86 = getelementptr i8, ptr %85, i64 16
  store ptr %84, ptr %86, align 8
  %87 = getelementptr i8, ptr %85, i64 8
  store ptr %75, ptr %87, align 8
  %88 = getelementptr i8, ptr %85, i64 24
  store ptr null, ptr %88, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 24, ptr %85)
  store ptr @Pair, ptr %85, align 8
  %90 = alloca [4 x ptr], align 8
  store ptr @ProductIterator, ptr %90, align 8
  %91 = getelementptr inbounds i8, ptr %90, i64 8
  store ptr %58, ptr %91, align 8
  %92 = getelementptr inbounds i8, ptr %90, i64 16
  store ptr %67, ptr %92, align 8
  %93 = getelementptr inbounds i8, ptr %90, i64 24
  store ptr %85, ptr %93, align 8
  %94 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ProductIterator, ptr nonnull %90)
  %95 = extractvalue { i64, i64 } %94, 0
  %96 = call ptr @bump_malloc(i64 %95)
  store ptr %58, ptr %96, align 8
  %97 = getelementptr i8, ptr %96, i64 8
  store ptr %67, ptr %97, align 8
  %98 = getelementptr i8, ptr %96, i64 16
  store ptr %85, ptr %98, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %96)
  %100 = load ptr, ptr %6, align 8
  %101 = load ptr, ptr %5, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 416, ptr %101)
  %103 = load i32, ptr %8, align 8
  %104 = sext i32 %103 to i64
  %105 = getelementptr ptr, ptr %101, i64 %104
  %106 = getelementptr i8, ptr %105, i64 24
  %107 = load ptr, ptr %106, align 8
  %108 = load ptr, ptr %107, align 8
  %109 = call { ptr, ptr, ptr, i32 } %108(ptr %100) #24
  %110 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %109, 0
  store ptr %.fca.0.extract9, ptr %110, align 8
  %.fca.1.extract11 = extractvalue { ptr, ptr, ptr, i32 } %109, 1
  %.fca.1.gep12 = getelementptr inbounds i8, ptr %110, i64 8
  store ptr %.fca.1.extract11, ptr %.fca.1.gep12, align 8
  %.fca.2.extract13 = extractvalue { ptr, ptr, ptr, i32 } %109, 2
  %.fca.2.gep14 = getelementptr inbounds i8, ptr %110, i64 16
  store ptr %.fca.2.extract13, ptr %.fca.2.gep14, align 8
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %109, 3
  %.fca.3.gep16 = getelementptr inbounds i8, ptr %110, i64 24
  store i32 %.fca.3.extract15, ptr %.fca.3.gep16, align 8
  call void @assume_offset(ptr nonnull %110, ptr nonnull @Iterable)
  %111 = load ptr, ptr %110, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %111, 0
  %113 = load ptr, ptr %.fca.1.gep12, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %112, ptr %113, 1
  %115 = load ptr, ptr %.fca.2.gep14, align 8
  %116 = insertvalue { ptr, ptr, ptr, i32 } %114, ptr %115, 2
  %117 = load i32, ptr %.fca.3.gep16, align 8
  %118 = insertvalue { ptr, ptr, ptr, i32 } %116, i32 %117, 3
  %119 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %120 = call ptr @llvm.invariant.start.p0(i64 184, ptr %111)
  %121 = sext i32 %117 to i64
  %122 = getelementptr ptr, ptr %111, i64 %121
  %123 = getelementptr i8, ptr %122, i64 8
  %124 = load ptr, ptr %123, align 8
  %125 = call ptr @behavior_wrapper(ptr %124, { ptr, ptr, ptr, i32 } %118, ptr nonnull %4)
  %126 = call { ptr, ptr, ptr, i32 } %125({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr nonnull %4) #25
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %126, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %126, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %126, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %126, 3
  %127 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %127, align 8
  %128 = getelementptr inbounds i8, ptr %127, i64 8
  store ptr %.fca.1.extract3, ptr %128, align 8
  %129 = getelementptr inbounds i8, ptr %127, i64 16
  store ptr %.fca.2.extract5, ptr %129, align 8
  %130 = getelementptr inbounds i8, ptr %127, i64 24
  store i32 %.fca.3.extract7, ptr %130, align 8
  call void @set_offset(ptr nonnull %127, ptr nonnull @Iterator)
  %131 = load ptr, ptr %6, align 8
  %132 = load ptr, ptr %5, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 416, ptr %132)
  %134 = load i32, ptr %8, align 8
  %135 = sext i32 %134 to i64
  %136 = getelementptr ptr, ptr %132, i64 %135
  %137 = getelementptr i8, ptr %136, i64 32
  %138 = load ptr, ptr %137, align 8
  %139 = load ptr, ptr %138, align 8
  %140 = call { ptr, ptr, ptr, i32 } %139(ptr %131) #24
  %141 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %140, 0
  store ptr %.fca.0.extract, ptr %141, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %140, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %141, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %140, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %141, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %140, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %141, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %141, ptr nonnull @Iterable)
  %142 = alloca { ptr, ptr, ptr, i32 }, align 8
  %143 = load ptr, ptr %127, align 8
  store ptr %143, ptr %142, align 8
  %144 = getelementptr inbounds i8, ptr %142, i64 8
  %145 = load ptr, ptr %128, align 8
  store ptr %145, ptr %144, align 8
  %146 = getelementptr inbounds i8, ptr %142, i64 16
  %147 = load ptr, ptr %129, align 8
  store ptr %147, ptr %146, align 8
  %148 = getelementptr inbounds i8, ptr %142, i64 24
  %149 = load i32, ptr %130, align 8
  store i32 %149, ptr %148, align 8
  call void @set_offset(ptr nonnull %142, ptr nonnull @Iterator)
  %150 = load ptr, ptr %142, align 8
  %151 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %150, 0
  %152 = load ptr, ptr %144, align 8
  %153 = insertvalue { ptr, ptr, ptr, i32 } %151, ptr %152, 1
  %154 = load ptr, ptr %146, align 8
  %155 = insertvalue { ptr, ptr, ptr, i32 } %153, ptr %154, 2
  %156 = load i32, ptr %148, align 8
  %157 = insertvalue { ptr, ptr, ptr, i32 } %155, i32 %156, 3
  %158 = alloca { ptr, ptr, ptr, i32 }, align 8
  %159 = load ptr, ptr %141, align 8
  store ptr %159, ptr %158, align 8
  %160 = getelementptr inbounds i8, ptr %158, i64 8
  %161 = load ptr, ptr %.fca.1.gep, align 8
  store ptr %161, ptr %160, align 8
  %162 = getelementptr inbounds i8, ptr %158, i64 16
  %163 = load ptr, ptr %.fca.2.gep, align 8
  store ptr %163, ptr %162, align 8
  %164 = getelementptr inbounds i8, ptr %158, i64 24
  %165 = load i32, ptr %.fca.3.gep, align 8
  store i32 %165, ptr %164, align 8
  call void @set_offset(ptr nonnull %158, ptr nonnull @Iterable)
  %166 = load ptr, ptr %158, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %166, 0
  %168 = load ptr, ptr %160, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, ptr %168, 1
  %170 = load ptr, ptr %162, align 8
  %171 = insertvalue { ptr, ptr, ptr, i32 } %169, ptr %170, 2
  %172 = load i32, ptr %164, align 8
  %173 = insertvalue { ptr, ptr, ptr, i32 } %171, i32 %172, 3
  %174 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ProductIterator, ptr undef, ptr undef, i32 undef }, ptr %96, 1
  %175 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr undef, 2
  %176 = insertvalue { ptr, ptr, ptr, i32 } %175, i32 10, 3
  %177 = load ptr, ptr %6, align 8
  %178 = load ptr, ptr %5, align 8
  %179 = call ptr @llvm.invariant.start.p0(i64 416, ptr %178)
  %180 = load i32, ptr %8, align 8
  %181 = sext i32 %180 to i64
  %182 = getelementptr ptr, ptr %178, i64 %181
  %183 = load ptr, ptr %182, align 8
  %184 = call ptr @typegetter_wrapper(ptr %183, ptr %177)
  %185 = call ptr @bump_malloc(i64 24)
  %186 = getelementptr i8, ptr %185, i64 8
  store ptr %184, ptr %186, align 8
  %187 = getelementptr i8, ptr %185, i64 16
  store ptr null, ptr %187, align 8
  %188 = call ptr @llvm.invariant.start.p0(i64 16, ptr %185)
  store ptr @Iterator, ptr %185, align 8
  %189 = load ptr, ptr %6, align 8
  %190 = load ptr, ptr %5, align 8
  %191 = call ptr @llvm.invariant.start.p0(i64 416, ptr %190)
  %192 = load i32, ptr %8, align 8
  %193 = sext i32 %192 to i64
  %194 = getelementptr ptr, ptr %190, i64 %193
  %195 = getelementptr i8, ptr %194, i64 8
  %196 = load ptr, ptr %195, align 8
  %197 = call ptr @typegetter_wrapper(ptr %196, ptr %189)
  %198 = call ptr @bump_malloc(i64 24)
  %199 = getelementptr i8, ptr %198, i64 8
  store ptr %197, ptr %199, align 8
  %200 = getelementptr i8, ptr %198, i64 16
  store ptr null, ptr %200, align 8
  %201 = call ptr @llvm.invariant.start.p0(i64 16, ptr %198)
  store ptr @Iterable, ptr %198, align 8
  %202 = alloca [2 x ptr], align 8
  store ptr %185, ptr %202, align 8
  %203 = getelementptr inbounds i8, ptr %202, i64 8
  store ptr %198, ptr %203, align 8
  %204 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %202)
  %205 = call ptr @llvm.invariant.start.p0(i64 112, ptr nonnull @ProductIterator)
  %206 = alloca { ptr, ptr }, align 8
  store ptr %150, ptr %206, align 8
  %207 = getelementptr inbounds i8, ptr %206, i64 8
  store ptr %166, ptr %207, align 8
  %208 = call ptr @behavior_wrapper(ptr nonnull @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU, { ptr, ptr, ptr, i32 } %176, ptr nonnull %206)
  call void %208({ ptr, ptr, ptr, i32 } %176, { ptr, ptr, ptr, i32 } %176, ptr nonnull %202, { ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } %173) #25
  %209 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ProductIterator, ptr %209, align 8
  %210 = getelementptr inbounds i8, ptr %209, i64 8
  store ptr %96, ptr %210, align 8
  %211 = getelementptr inbounds i8, ptr %209, i64 16
  %212 = getelementptr inbounds i8, ptr %209, i64 24
  store i32 10, ptr %212, align 8
  call void @set_offset(ptr nonnull %209, ptr nonnull @Iterator)
  %213 = load ptr, ptr %209, align 8
  %214 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %213, 0
  %215 = load ptr, ptr %210, align 8
  %216 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr %215, 1
  %217 = load ptr, ptr %211, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } %216, ptr %217, 2
  %219 = load i32, ptr %212, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %218, i32 %219, 3
  ret { ptr, ptr, ptr, i32 } %220
}

define void @assume_offset(ptr %fat_ptr, ptr %id_ptr) {
  %vptr = load ptr, ptr %fat_ptr, align 8
  %id_of_casted = load i64, ptr %vptr, align 4
  %offset = call i32 @get_offset(ptr %vptr, ptr %id_ptr)
  %destination = getelementptr { ptr, ptr, ptr, i32 }, ptr %fat_ptr, i32 0, i32 3
  %dest_value = load i32, ptr %destination, align 4
  %slot = alloca i32, align 4
  store i32 %dest_value, ptr %slot, align 4
  %slotval = load i32, ptr %slot, align 4
  %eq = icmp eq i32 %slotval, %offset
  call void @llvm.assume(i1 %eq) #27
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ProductIterator(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 152, i64 8 }
}

define ptr @ProductIterator_B_init_first_iteratorIteratorT_second_iterableIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 152
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator_field_ProductIterator_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator_field_ProductIterator_1(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ProductIterator_field_ProductIterator_2(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ProductIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ProductIterator_init_first_iteratorIteratorT_second_iterableIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca [0 x ptr], align 8
  %.fca.0.extract45 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract47 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract49 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract51 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract45, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract47, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract49, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract51, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @ProductIterator)
  %.fca.0.extract33 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract35 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract37 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract33, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %.fca.1.extract35, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %11, i64 16
  store ptr %.fca.2.extract37, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %11, i64 24
  store i32 %.fca.3.extract39, ptr %14, align 8
  call void @set_offset(ptr nonnull %11, ptr nonnull @Iterator)
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = load ptr, ptr %11, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 8
  %18 = load ptr, ptr %12, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %15, i64 16
  %20 = load ptr, ptr %13, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr inbounds i8, ptr %15, i64 24
  %22 = load i32, ptr %14, align 8
  store i32 %22, ptr %21, align 8
  call void @set_offset(ptr nonnull %15, ptr nonnull @Iterator)
  %23 = load ptr, ptr %8, align 8
  %24 = load ptr, ptr %7, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 112, ptr %24)
  %26 = load i32, ptr %10, align 8
  %27 = sext i32 %26 to i64
  %28 = getelementptr ptr, ptr %24, i64 %27
  %29 = getelementptr i8, ptr %28, i64 24
  %30 = load ptr, ptr %29, align 8
  %31 = getelementptr i8, ptr %30, i64 8
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %15, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %35 = load ptr, ptr %17, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 1
  %37 = load ptr, ptr %19, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 2
  %39 = load i32, ptr %21, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 %39, 3
  call void %32(ptr %23, { ptr, ptr, ptr, i32 } %40) #23
  %.fca.0.extract21 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract23 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract25 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract27 = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %41 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract21, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %41, i64 8
  store ptr %.fca.1.extract23, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %41, i64 16
  store ptr %.fca.2.extract25, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %41, i64 24
  store i32 %.fca.3.extract27, ptr %44, align 8
  call void @set_offset(ptr nonnull %41, ptr nonnull @Iterable)
  %45 = alloca { ptr, ptr, ptr, i32 }, align 8
  %46 = load ptr, ptr %41, align 8
  store ptr %46, ptr %45, align 8
  %47 = getelementptr inbounds i8, ptr %45, i64 8
  %48 = load ptr, ptr %42, align 8
  store ptr %48, ptr %47, align 8
  %49 = getelementptr inbounds i8, ptr %45, i64 16
  %50 = load ptr, ptr %43, align 8
  store ptr %50, ptr %49, align 8
  %51 = getelementptr inbounds i8, ptr %45, i64 24
  %52 = load i32, ptr %44, align 8
  store i32 %52, ptr %51, align 8
  call void @set_offset(ptr nonnull %45, ptr nonnull @Iterable)
  %53 = load ptr, ptr %8, align 8
  %54 = load ptr, ptr %7, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 112, ptr %54)
  %56 = load i32, ptr %10, align 8
  %57 = sext i32 %56 to i64
  %58 = getelementptr ptr, ptr %54, i64 %57
  %59 = getelementptr i8, ptr %58, i64 40
  %60 = load ptr, ptr %59, align 8
  %61 = getelementptr i8, ptr %60, i64 8
  %62 = load ptr, ptr %61, align 8
  %63 = load ptr, ptr %45, align 8
  %64 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %63, 0
  %65 = load ptr, ptr %47, align 8
  %66 = insertvalue { ptr, ptr, ptr, i32 } %64, ptr %65, 1
  %67 = load ptr, ptr %49, align 8
  %68 = insertvalue { ptr, ptr, ptr, i32 } %66, ptr %67, 2
  %69 = load i32, ptr %51, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } %68, i32 %69, 3
  call void %62(ptr %53, { ptr, ptr, ptr, i32 } %70) #23
  %71 = load ptr, ptr %8, align 8
  %72 = load ptr, ptr %7, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 112, ptr %72)
  %74 = load i32, ptr %10, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = getelementptr i8, ptr %76, i64 40
  %78 = load ptr, ptr %77, align 8
  %79 = load ptr, ptr %78, align 8
  %80 = call { ptr, ptr, ptr, i32 } %79(ptr %71) #24
  %81 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %80, 0
  store ptr %.fca.0.extract13, ptr %81, align 8
  %.fca.1.extract15 = extractvalue { ptr, ptr, ptr, i32 } %80, 1
  %.fca.1.gep16 = getelementptr inbounds i8, ptr %81, i64 8
  store ptr %.fca.1.extract15, ptr %.fca.1.gep16, align 8
  %.fca.2.extract17 = extractvalue { ptr, ptr, ptr, i32 } %80, 2
  %.fca.2.gep18 = getelementptr inbounds i8, ptr %81, i64 16
  store ptr %.fca.2.extract17, ptr %.fca.2.gep18, align 8
  %.fca.3.extract19 = extractvalue { ptr, ptr, ptr, i32 } %80, 3
  %.fca.3.gep20 = getelementptr inbounds i8, ptr %81, i64 24
  store i32 %.fca.3.extract19, ptr %.fca.3.gep20, align 8
  call void @assume_offset(ptr nonnull %81, ptr nonnull @Iterable)
  %82 = load ptr, ptr %81, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %82, 0
  %84 = load ptr, ptr %.fca.1.gep16, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 1
  %86 = load ptr, ptr %.fca.2.gep18, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %86, 2
  %88 = load i32, ptr %.fca.3.gep20, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } %87, i32 %88, 3
  %90 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %91 = call ptr @llvm.invariant.start.p0(i64 184, ptr %82)
  %92 = sext i32 %88 to i64
  %93 = getelementptr ptr, ptr %82, i64 %92
  %94 = getelementptr i8, ptr %93, i64 8
  %95 = load ptr, ptr %94, align 8
  %96 = call ptr @behavior_wrapper(ptr %95, { ptr, ptr, ptr, i32 } %89, ptr nonnull %6)
  %97 = call { ptr, ptr, ptr, i32 } %96({ ptr, ptr, ptr, i32 } %89, { ptr, ptr, ptr, i32 } %89, ptr nonnull %6) #25
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %97, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %97, 1
  %.fca.2.extract7 = extractvalue { ptr, ptr, ptr, i32 } %97, 2
  %.fca.3.extract9 = extractvalue { ptr, ptr, ptr, i32 } %97, 3
  %98 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %98, align 8
  %99 = getelementptr inbounds i8, ptr %98, i64 8
  store ptr %.fca.1.extract5, ptr %99, align 8
  %100 = getelementptr inbounds i8, ptr %98, i64 16
  store ptr %.fca.2.extract7, ptr %100, align 8
  %101 = getelementptr inbounds i8, ptr %98, i64 24
  store i32 %.fca.3.extract9, ptr %101, align 8
  call void @set_offset(ptr nonnull %98, ptr nonnull @Iterator)
  %102 = alloca { ptr, ptr, ptr, i32 }, align 8
  %103 = load ptr, ptr %98, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr inbounds i8, ptr %102, i64 8
  %105 = load ptr, ptr %99, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr inbounds i8, ptr %102, i64 16
  %107 = load ptr, ptr %100, align 8
  store ptr %107, ptr %106, align 8
  %108 = getelementptr inbounds i8, ptr %102, i64 24
  %109 = load i32, ptr %101, align 8
  store i32 %109, ptr %108, align 8
  call void @set_offset(ptr nonnull %102, ptr nonnull @Iterator)
  %110 = load ptr, ptr %8, align 8
  %111 = load ptr, ptr %7, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 112, ptr %111)
  %113 = load i32, ptr %10, align 8
  %114 = sext i32 %113 to i64
  %115 = getelementptr ptr, ptr %111, i64 %114
  %116 = getelementptr i8, ptr %115, i64 32
  %117 = load ptr, ptr %116, align 8
  %118 = getelementptr i8, ptr %117, i64 8
  %119 = load ptr, ptr %118, align 8
  %120 = load ptr, ptr %102, align 8
  %121 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %120, 0
  %122 = load ptr, ptr %104, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } %121, ptr %122, 1
  %124 = load ptr, ptr %106, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %124, 2
  %126 = load i32, ptr %108, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, i32 %126, 3
  call void %119(ptr %110, { ptr, ptr, ptr, i32 } %127) #23
  %128 = load ptr, ptr %8, align 8
  %129 = load ptr, ptr %7, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 112, ptr %129)
  %131 = load i32, ptr %10, align 8
  %132 = sext i32 %131 to i64
  %133 = getelementptr ptr, ptr %129, i64 %132
  %134 = getelementptr i8, ptr %133, i64 24
  %135 = load ptr, ptr %134, align 8
  %136 = load ptr, ptr %135, align 8
  %137 = call { ptr, ptr, ptr, i32 } %136(ptr %128) #24
  %138 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %137, 0
  store ptr %.fca.0.extract1, ptr %138, align 8
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %137, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %138, i64 8
  store ptr %.fca.1.extract2, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %137, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %138, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %137, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %138, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %138, ptr nonnull @Iterator)
  %139 = load ptr, ptr %138, align 8
  %140 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %139, 0
  %141 = load ptr, ptr %.fca.1.gep, align 8
  %142 = insertvalue { ptr, ptr, ptr, i32 } %140, ptr %141, 1
  %143 = load ptr, ptr %.fca.2.gep, align 8
  %144 = insertvalue { ptr, ptr, ptr, i32 } %142, ptr %143, 2
  %145 = load i32, ptr %.fca.3.gep, align 8
  %146 = insertvalue { ptr, ptr, ptr, i32 } %144, i32 %145, 3
  %147 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %148 = call ptr @llvm.invariant.start.p0(i64 24, ptr %139)
  %149 = sext i32 %145 to i64
  %150 = getelementptr ptr, ptr %139, i64 %149
  %151 = getelementptr i8, ptr %150, i64 8
  %152 = load ptr, ptr %151, align 8
  %153 = call ptr @behavior_wrapper(ptr %152, { ptr, ptr, ptr, i32 } %146, ptr nonnull %6)
  %154 = call { ptr, i160 } %153({ ptr, ptr, ptr, i32 } %146, { ptr, ptr, ptr, i32 } %146, ptr nonnull %6) #25
  %155 = load ptr, ptr %8, align 8
  %156 = load ptr, ptr %7, align 8
  %157 = call ptr @llvm.invariant.start.p0(i64 112, ptr %156)
  %158 = load i32, ptr %10, align 8
  %159 = sext i32 %158 to i64
  %160 = getelementptr ptr, ptr %156, i64 %159
  %161 = getelementptr i8, ptr %160, i64 48
  %162 = load ptr, ptr %161, align 8
  %163 = getelementptr i8, ptr %162, i64 8
  %164 = load ptr, ptr %163, align 8
  call void %164(ptr %155, { ptr, i160 } %154) #23
  ret void
}

define { ptr, i160 } @ProductIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [3 x ptr], align 8
  %7 = alloca [2 x ptr], align 8
  %8 = alloca { ptr, ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract10, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr %.fca.1.extract12, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr %.fca.2.extract, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %13, i64 24
  store i32 %.fca.3.extract, ptr %16, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @ProductIterator)
  %17 = load ptr, ptr %14, align 8
  %18 = load ptr, ptr %13, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 112, ptr %18)
  %20 = load i32, ptr %16, align 8
  %21 = sext i32 %20 to i64
  %22 = getelementptr ptr, ptr %18, i64 %21
  %23 = getelementptr i8, ptr %22, i64 48
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, i160 } %25(ptr %17) #24
  %.fca.0.extract = extractvalue { ptr, i160 } %26, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %26, 1
  %.fca.1.gep71 = getelementptr inbounds i8, ptr %5, i64 8
  %.fca.2.gep73 = getelementptr inbounds i8, ptr %5, i64 16
  %.fca.3.gep75 = getelementptr inbounds i8, ptr %5, i64 24
  %.fca.1.gep45 = getelementptr inbounds i8, ptr %9, i64 8
  %.fca.2.gep47 = getelementptr inbounds i8, ptr %9, i64 16
  %.fca.3.gep49 = getelementptr inbounds i8, ptr %9, i64 24
  %.fca.1.gep33 = getelementptr inbounds i8, ptr %10, i64 8
  %.fca.2.gep = getelementptr inbounds i8, ptr %10, i64 16
  %.fca.3.gep = getelementptr inbounds i8, ptr %10, i64 24
  %27 = getelementptr inbounds i8, ptr %11, i64 8
  %28 = getelementptr inbounds i8, ptr %11, i64 16
  %29 = getelementptr inbounds i8, ptr %11, i64 24
  %30 = getelementptr inbounds i8, ptr %12, i64 8
  %31 = getelementptr inbounds i8, ptr %12, i64 16
  %32 = getelementptr inbounds i8, ptr %12, i64 24
  br label %33

33:                                               ; preds = %177, %3
  %.sroa.3.0 = phi i160 [ %.fca.1.extract, %3 ], [ %.sroa.3.1, %177 ]
  %.sroa.0.0 = phi ptr [ %.fca.0.extract, %3 ], [ %.sroa.0.1, %177 ]
  %.sroa.065.0 = phi ptr [ undef, %3 ], [ %.sroa.065.1, %177 ]
  %.sroa.367.0 = phi i160 [ undef, %3 ], [ %.sroa.367.1, %177 ]
  %.079 = phi ptr [ undef, %3 ], [ %.180, %177 ]
  %.0 = phi i160 [ undef, %3 ], [ %.1, %177 ]
  %34 = load ptr, ptr %14, align 8
  %35 = load ptr, ptr %13, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 112, ptr %35)
  %37 = load i32, ptr %16, align 8
  %38 = sext i32 %37 to i64
  %39 = getelementptr ptr, ptr %35, i64 %38
  %40 = load ptr, ptr %39, align 8
  %41 = call ptr @typegetter_wrapper(ptr %40, ptr %34)
  %42 = icmp ne ptr %.sroa.0.0, @nil_typ
  %43 = icmp ne ptr %.sroa.0.0, null
  %.not82 = and i1 %42, %43
  br i1 %.not82, label %44, label %177

44:                                               ; preds = %33
  %45 = load ptr, ptr %14, align 8
  %46 = load ptr, ptr %13, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 112, ptr %46)
  %48 = load i32, ptr %16, align 8
  %49 = sext i32 %48 to i64
  %50 = getelementptr ptr, ptr %46, i64 %49
  %51 = getelementptr i8, ptr %50, i64 32
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = call { ptr, ptr, ptr, i32 } %53(ptr %45) #24
  %.fca.0.extract68 = extractvalue { ptr, ptr, ptr, i32 } %54, 0
  store ptr %.fca.0.extract68, ptr %5, align 8
  %.fca.1.extract70 = extractvalue { ptr, ptr, ptr, i32 } %54, 1
  store ptr %.fca.1.extract70, ptr %.fca.1.gep71, align 8
  %.fca.2.extract72 = extractvalue { ptr, ptr, ptr, i32 } %54, 2
  store ptr %.fca.2.extract72, ptr %.fca.2.gep73, align 8
  %.fca.3.extract74 = extractvalue { ptr, ptr, ptr, i32 } %54, 3
  store i32 %.fca.3.extract74, ptr %.fca.3.gep75, align 8
  call void @assume_offset(ptr nonnull %5, ptr nonnull @Iterator)
  %55 = load ptr, ptr %5, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %55, 0
  %57 = load ptr, ptr %.fca.1.gep71, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 1
  %59 = load ptr, ptr %.fca.2.gep73, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, ptr %59, 2
  %61 = load i32, ptr %.fca.3.gep75, align 8
  %62 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 %61, 3
  %63 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %64 = call ptr @llvm.invariant.start.p0(i64 24, ptr %55)
  %65 = sext i32 %61 to i64
  %66 = getelementptr ptr, ptr %55, i64 %65
  %67 = getelementptr i8, ptr %66, i64 8
  %68 = load ptr, ptr %67, align 8
  %69 = call ptr @behavior_wrapper(ptr %68, { ptr, ptr, ptr, i32 } %62, ptr nonnull %4)
  %70 = call { ptr, i160 } %69({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr nonnull %4) #25
  %.fca.0.extract61 = extractvalue { ptr, i160 } %70, 0
  %.fca.1.extract63 = extractvalue { ptr, i160 } %70, 1
  %71 = load ptr, ptr %14, align 8
  %72 = load ptr, ptr %13, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 112, ptr %72)
  %74 = load i32, ptr %16, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = getelementptr i8, ptr %76, i64 8
  %78 = load ptr, ptr %77, align 8
  %79 = call ptr @typegetter_wrapper(ptr %78, ptr %71)
  %80 = icmp eq ptr %.fca.0.extract61, @nil_typ
  %81 = icmp eq ptr %.fca.0.extract61, null
  %.not84.not = or i1 %80, %81
  br i1 %.not84.not, label %82, label %177

82:                                               ; preds = %44
  %83 = load ptr, ptr %14, align 8
  %84 = load ptr, ptr %13, align 8
  %85 = call ptr @llvm.invariant.start.p0(i64 112, ptr %84)
  %86 = load i32, ptr %16, align 8
  %87 = sext i32 %86 to i64
  %88 = getelementptr ptr, ptr %84, i64 %87
  %89 = getelementptr i8, ptr %88, i64 24
  %90 = load ptr, ptr %89, align 8
  %91 = load ptr, ptr %90, align 8
  %92 = call { ptr, ptr, ptr, i32 } %91(ptr %83) #24
  %.fca.0.extract42 = extractvalue { ptr, ptr, ptr, i32 } %92, 0
  store ptr %.fca.0.extract42, ptr %9, align 8
  %.fca.1.extract44 = extractvalue { ptr, ptr, ptr, i32 } %92, 1
  store ptr %.fca.1.extract44, ptr %.fca.1.gep45, align 8
  %.fca.2.extract46 = extractvalue { ptr, ptr, ptr, i32 } %92, 2
  store ptr %.fca.2.extract46, ptr %.fca.2.gep47, align 8
  %.fca.3.extract48 = extractvalue { ptr, ptr, ptr, i32 } %92, 3
  store i32 %.fca.3.extract48, ptr %.fca.3.gep49, align 8
  call void @assume_offset(ptr nonnull %9, ptr nonnull @Iterator)
  %93 = load ptr, ptr %9, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %93, 0
  %95 = load ptr, ptr %.fca.1.gep45, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 1
  %97 = load ptr, ptr %.fca.2.gep47, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 2
  %99 = load i32, ptr %.fca.3.gep49, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, i32 %99, 3
  %101 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %102 = call ptr @llvm.invariant.start.p0(i64 24, ptr %93)
  %103 = sext i32 %99 to i64
  %104 = getelementptr ptr, ptr %93, i64 %103
  %105 = getelementptr i8, ptr %104, i64 8
  %106 = load ptr, ptr %105, align 8
  %107 = call ptr @behavior_wrapper(ptr %106, { ptr, ptr, ptr, i32 } %100, ptr nonnull %4)
  %108 = call { ptr, i160 } %107({ ptr, ptr, ptr, i32 } %100, { ptr, ptr, ptr, i32 } %100, ptr nonnull %4) #25
  %109 = load ptr, ptr %14, align 8
  %110 = load ptr, ptr %13, align 8
  %111 = call ptr @llvm.invariant.start.p0(i64 112, ptr %110)
  %112 = load i32, ptr %16, align 8
  %113 = sext i32 %112 to i64
  %114 = getelementptr ptr, ptr %110, i64 %113
  %115 = getelementptr i8, ptr %114, i64 48
  %116 = load ptr, ptr %115, align 8
  %117 = getelementptr i8, ptr %116, i64 8
  %118 = load ptr, ptr %117, align 8
  call void %118(ptr %109, { ptr, i160 } %108) #23
  %119 = load ptr, ptr %14, align 8
  %120 = load ptr, ptr %13, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 112, ptr %120)
  %122 = load i32, ptr %16, align 8
  %123 = sext i32 %122 to i64
  %124 = getelementptr ptr, ptr %120, i64 %123
  %125 = getelementptr i8, ptr %124, i64 40
  %126 = load ptr, ptr %125, align 8
  %127 = load ptr, ptr %126, align 8
  %128 = call { ptr, ptr, ptr, i32 } %127(ptr %119) #24
  %.fca.0.extract30 = extractvalue { ptr, ptr, ptr, i32 } %128, 0
  store ptr %.fca.0.extract30, ptr %10, align 8
  %.fca.1.extract32 = extractvalue { ptr, ptr, ptr, i32 } %128, 1
  store ptr %.fca.1.extract32, ptr %.fca.1.gep33, align 8
  %.fca.2.extract34 = extractvalue { ptr, ptr, ptr, i32 } %128, 2
  store ptr %.fca.2.extract34, ptr %.fca.2.gep, align 8
  %.fca.3.extract35 = extractvalue { ptr, ptr, ptr, i32 } %128, 3
  store i32 %.fca.3.extract35, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %10, ptr nonnull @Iterable)
  %129 = load ptr, ptr %10, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %129, 0
  %131 = load ptr, ptr %.fca.1.gep33, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 1
  %133 = load ptr, ptr %.fca.2.gep, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %133, 2
  %135 = load i32, ptr %.fca.3.gep, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %134, i32 %135, 3
  %137 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %138 = call ptr @llvm.invariant.start.p0(i64 184, ptr %129)
  %139 = sext i32 %135 to i64
  %140 = getelementptr ptr, ptr %129, i64 %139
  %141 = getelementptr i8, ptr %140, i64 8
  %142 = load ptr, ptr %141, align 8
  %143 = call ptr @behavior_wrapper(ptr %142, { ptr, ptr, ptr, i32 } %136, ptr nonnull %4)
  %144 = call { ptr, ptr, ptr, i32 } %143({ ptr, ptr, ptr, i32 } %136, { ptr, ptr, ptr, i32 } %136, ptr nonnull %4) #25
  %.fca.0.extract20 = extractvalue { ptr, ptr, ptr, i32 } %144, 0
  %.fca.1.extract22 = extractvalue { ptr, ptr, ptr, i32 } %144, 1
  %.fca.2.extract24 = extractvalue { ptr, ptr, ptr, i32 } %144, 2
  %.fca.3.extract25 = extractvalue { ptr, ptr, ptr, i32 } %144, 3
  store ptr %.fca.0.extract20, ptr %11, align 8
  store ptr %.fca.1.extract22, ptr %27, align 8
  store ptr %.fca.2.extract24, ptr %28, align 8
  store i32 %.fca.3.extract25, ptr %29, align 8
  call void @set_offset(ptr nonnull %11, ptr nonnull @Iterator)
  %145 = load ptr, ptr %11, align 8
  store ptr %145, ptr %12, align 8
  %146 = load ptr, ptr %27, align 8
  store ptr %146, ptr %30, align 8
  %147 = load ptr, ptr %28, align 8
  store ptr %147, ptr %31, align 8
  %148 = load i32, ptr %29, align 8
  store i32 %148, ptr %32, align 8
  call void @set_offset(ptr nonnull %12, ptr nonnull @Iterator)
  %149 = load ptr, ptr %14, align 8
  %150 = load ptr, ptr %13, align 8
  %151 = call ptr @llvm.invariant.start.p0(i64 112, ptr %150)
  %152 = load i32, ptr %16, align 8
  %153 = sext i32 %152 to i64
  %154 = getelementptr ptr, ptr %150, i64 %153
  %155 = getelementptr i8, ptr %154, i64 32
  %156 = load ptr, ptr %155, align 8
  %157 = getelementptr i8, ptr %156, i64 8
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %12, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %159, 0
  %161 = load ptr, ptr %30, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %160, ptr %161, 1
  %163 = load ptr, ptr %31, align 8
  %164 = insertvalue { ptr, ptr, ptr, i32 } %162, ptr %163, 2
  %165 = load i32, ptr %32, align 8
  %166 = insertvalue { ptr, ptr, ptr, i32 } %164, i32 %165, 3
  call void %158(ptr %149, { ptr, ptr, ptr, i32 } %166) #23
  %167 = load ptr, ptr %14, align 8
  %168 = load ptr, ptr %13, align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 112, ptr %168)
  %170 = load i32, ptr %16, align 8
  %171 = sext i32 %170 to i64
  %172 = getelementptr ptr, ptr %168, i64 %171
  %173 = getelementptr i8, ptr %172, i64 48
  %174 = load ptr, ptr %173, align 8
  %175 = load ptr, ptr %174, align 8
  %176 = call { ptr, i160 } %175(ptr %167) #24
  %.fca.0.extract14 = extractvalue { ptr, i160 } %176, 0
  %.fca.1.extract16 = extractvalue { ptr, i160 } %176, 1
  br label %177

177:                                              ; preds = %82, %44, %33
  %.sroa.3.1 = phi i160 [ %.sroa.3.0, %44 ], [ %.fca.1.extract16, %82 ], [ %.sroa.3.0, %33 ]
  %.sroa.0.1 = phi ptr [ %.sroa.0.0, %44 ], [ %.fca.0.extract14, %82 ], [ %.sroa.0.0, %33 ]
  %.sroa.065.1 = phi ptr [ %.fca.0.extract61, %44 ], [ %.fca.0.extract61, %82 ], [ %.sroa.065.0, %33 ]
  %.sroa.367.1 = phi i160 [ %.fca.1.extract63, %44 ], [ %.fca.1.extract63, %82 ], [ %.sroa.367.0, %33 ]
  %.180 = phi ptr [ %.sroa.0.0, %44 ], [ %.sroa.0.0, %82 ], [ %.079, %33 ]
  %.1 = phi i160 [ %.sroa.3.0, %44 ], [ %.sroa.3.0, %82 ], [ %.0, %33 ]
  %.reg2mem50.0.off0 = phi i1 [ false, %44 ], [ true, %82 ], [ false, %33 ]
  %.reg2mem52.0 = phi i1 [ true, %44 ], [ false, %82 ], [ false, %33 ]
  br i1 %.reg2mem50.0.off0, label %33, label %178

178:                                              ; preds = %177
  br i1 %.reg2mem52.0, label %179, label %234

179:                                              ; preds = %178
  %180 = load ptr, ptr %14, align 8
  %181 = load ptr, ptr %13, align 8
  %182 = call ptr @llvm.invariant.start.p0(i64 112, ptr %181)
  %183 = load i32, ptr %16, align 8
  %184 = sext i32 %183 to i64
  %185 = getelementptr ptr, ptr %181, i64 %184
  %186 = load ptr, ptr %185, align 8
  %187 = call ptr @typegetter_wrapper(ptr %186, ptr %180)
  %188 = load ptr, ptr %14, align 8
  %189 = load ptr, ptr %13, align 8
  %190 = call ptr @llvm.invariant.start.p0(i64 112, ptr %189)
  %191 = load i32, ptr %16, align 8
  %192 = sext i32 %191 to i64
  %193 = getelementptr ptr, ptr %189, i64 %192
  %194 = getelementptr i8, ptr %193, i64 8
  %195 = load ptr, ptr %194, align 8
  %196 = call ptr @typegetter_wrapper(ptr %195, ptr %188)
  store ptr @Pair, ptr %6, align 8
  %197 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %187, ptr %197, align 8
  %198 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %196, ptr %198, align 8
  %199 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Pair, ptr nonnull %6)
  %200 = extractvalue { i64, i64 } %199, 0
  %201 = call ptr @bump_malloc(i64 %200)
  store ptr %187, ptr %201, align 8
  %202 = getelementptr i8, ptr %201, i64 8
  store ptr %196, ptr %202, align 8
  %203 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %201)
  %204 = insertvalue { ptr, i160 } undef, ptr %.180, 0
  %205 = insertvalue { ptr, i160 } %204, i160 %.1, 1
  %206 = insertvalue { ptr, i160 } undef, ptr %.sroa.065.1, 0
  %207 = insertvalue { ptr, i160 } %206, i160 %.sroa.367.1, 1
  %208 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Pair, ptr undef, ptr undef, i32 undef }, ptr %201, 1
  %209 = insertvalue { ptr, ptr, ptr, i32 } %208, ptr undef, 2
  %210 = insertvalue { ptr, ptr, ptr, i32 } %209, i32 10, 3
  %211 = load ptr, ptr %14, align 8
  %212 = load ptr, ptr %13, align 8
  %213 = call ptr @llvm.invariant.start.p0(i64 112, ptr %212)
  %214 = load i32, ptr %16, align 8
  %215 = sext i32 %214 to i64
  %216 = getelementptr ptr, ptr %212, i64 %215
  %217 = load ptr, ptr %216, align 8
  %218 = call ptr @typegetter_wrapper(ptr %217, ptr %211)
  %219 = load ptr, ptr %14, align 8
  %220 = load ptr, ptr %13, align 8
  %221 = call ptr @llvm.invariant.start.p0(i64 112, ptr %220)
  %222 = load i32, ptr %16, align 8
  %223 = sext i32 %222 to i64
  %224 = getelementptr ptr, ptr %220, i64 %223
  %225 = getelementptr i8, ptr %224, i64 8
  %226 = load ptr, ptr %225, align 8
  %227 = call ptr @typegetter_wrapper(ptr %226, ptr %219)
  store ptr %218, ptr %7, align 8
  %228 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %227, ptr %228, align 8
  %229 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %7)
  %230 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
  store ptr %.180, ptr %8, align 8
  %231 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.sroa.065.1, ptr %231, align 8
  %232 = call ptr @behavior_wrapper(ptr nonnull @Pair_B_init_firstT_secondU, { ptr, ptr, ptr, i32 } %210, ptr nonnull %8)
  call void %232({ ptr, ptr, ptr, i32 } %210, { ptr, ptr, ptr, i32 } %210, ptr nonnull %7, { ptr, i160 } %205, { ptr, i160 } %207) #25
  %233 = ptrtoint ptr %201 to i64
  %.sroa.3.8.insert.ext = zext i64 %233 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  br label %234

234:                                              ; preds = %179, %178
  %.reg2mem48.sroa.3.0 = phi i160 [ %.sroa.3.8.insert.insert, %179 ], [ undef, %178 ]
  %.reg2mem48.sroa.0.0 = phi ptr [ @Pair, %179 ], [ @nil_typ, %178 ]
  %.reload49.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem48.sroa.0.0, 0
  %.reload49.fca.1.insert = insertvalue { ptr, i160 } %.reload49.fca.0.insert, i160 %.reg2mem48.sroa.3.0, 1
  ret { ptr, i160 } %.reload49.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, i160 } @ProductIterator_getter_current_first(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 120
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 128
  %6 = load i160, ptr %5, align 4
  %7 = insertvalue { ptr, i160 } %4, i160 %6, 1
  ret { ptr, i160 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator_setter_current_first(ptr nocapture writeonly %0, { ptr, i160 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 120
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 128
  store i160 %.fca.1.extract, ptr %4, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterable(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 88
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 96
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 104
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 112
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator_setter_second_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 88
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 96
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 104
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 112
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator_getter_second_iterator(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator_setter_second_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterator_getter_first_iterator(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterator_setter_first_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #10

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterable_getter_second(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterable_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ProductIterable_getter_first(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ProductIterable_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0)
define noalias ptr @bump_malloc_inner(i64 noundef %size, ptr %current_ptr) #11 {
  %size_plus_15 = add i64 %size, 15
  %aligned_size = and i64 %size_plus_15, -16
  %current = load ptr, ptr %current_ptr, align 8
  %new_ptr = getelementptr i8, ptr %current, i64 %aligned_size
  store ptr %new_ptr, ptr %current_ptr, align 8
  ret ptr %current
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ZipIterable(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 88, i64 8 }
}

define ptr @ZipIterable_B_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 216
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable_field_ZipIterable_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable_field_ZipIterable_1(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterable_field_ZipIterable_2(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ZipIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 9197944775169318296, i64 ptrtoint (ptr @Pair to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 240
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ZipIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ZipIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ZipIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 296
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ZipIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 304
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @ZipIterable_init_firstIterableT_secondIterableU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @ZipIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 416, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 24
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Iterable)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Iterable)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 416, ptr %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 32
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @ZipIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract71 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract73 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract75 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract77 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract71, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract73, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract75, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract77, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ZipIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 416, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract63 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract63, ptr %19, align 8
  %.fca.1.extract65 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep66 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract65, ptr %.fca.1.gep66, align 8
  %.fca.2.extract67 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep68 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract67, ptr %.fca.2.gep68, align 8
  %.fca.3.extract69 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep70 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract69, ptr %.fca.3.gep70, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep66, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep68, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep70, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 184, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract53 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract55 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract57 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract51, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract53, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract55, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract57, ptr %39, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 416, ptr %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 32
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %40) #24
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract43 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  store ptr %.fca.0.extract43, ptr %50, align 8
  %.fca.1.extract45 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.1.gep46 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr %.fca.1.extract45, ptr %.fca.1.gep46, align 8
  %.fca.2.extract47 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %.fca.2.gep48 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr %.fca.2.extract47, ptr %.fca.2.gep48, align 8
  %.fca.3.extract49 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %.fca.3.gep50 = getelementptr inbounds i8, ptr %50, i64 24
  store i32 %.fca.3.extract49, ptr %.fca.3.gep50, align 8
  call void @assume_offset(ptr nonnull %50, ptr nonnull @Iterable)
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %.fca.1.gep46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %.fca.2.gep48, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %.fca.3.gep50, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %60 = call ptr @llvm.invariant.start.p0(i64 184, ptr %51)
  %61 = sext i32 %57 to i64
  %62 = getelementptr ptr, ptr %51, i64 %61
  %63 = getelementptr i8, ptr %62, i64 8
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @behavior_wrapper(ptr %64, { ptr, ptr, ptr, i32 } %58, ptr nonnull %4)
  %66 = call { ptr, ptr, ptr, i32 } %65({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr nonnull %4) #25
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %66, 0
  %.fca.1.extract33 = extractvalue { ptr, ptr, ptr, i32 } %66, 1
  %.fca.2.extract35 = extractvalue { ptr, ptr, ptr, i32 } %66, 2
  %.fca.3.extract37 = extractvalue { ptr, ptr, ptr, i32 } %66, 3
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr %.fca.1.extract33, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %67, i64 16
  store ptr %.fca.2.extract35, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %67, i64 24
  store i32 %.fca.3.extract37, ptr %70, align 8
  call void @set_offset(ptr nonnull %67, ptr nonnull @Iterator)
  %71 = load ptr, ptr %6, align 8
  %72 = load ptr, ptr %5, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 416, ptr %72)
  %74 = load i32, ptr %8, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @typegetter_wrapper(ptr %77, ptr %71)
  %79 = load ptr, ptr %6, align 8
  %80 = load ptr, ptr %5, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 416, ptr %80)
  %82 = load i32, ptr %8, align 8
  %83 = sext i32 %82 to i64
  %84 = getelementptr ptr, ptr %80, i64 %83
  %85 = getelementptr i8, ptr %84, i64 8
  %86 = load ptr, ptr %85, align 8
  %87 = call ptr @typegetter_wrapper(ptr %86, ptr %79)
  %88 = load ptr, ptr %6, align 8
  %89 = load ptr, ptr %5, align 8
  %90 = call ptr @llvm.invariant.start.p0(i64 416, ptr %89)
  %91 = load i32, ptr %8, align 8
  %92 = sext i32 %91 to i64
  %93 = getelementptr ptr, ptr %89, i64 %92
  %94 = load ptr, ptr %93, align 8
  %95 = call ptr @typegetter_wrapper(ptr %94, ptr %88)
  %96 = load ptr, ptr %6, align 8
  %97 = load ptr, ptr %5, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 416, ptr %97)
  %99 = load i32, ptr %8, align 8
  %100 = sext i32 %99 to i64
  %101 = getelementptr ptr, ptr %97, i64 %100
  %102 = getelementptr i8, ptr %101, i64 8
  %103 = load ptr, ptr %102, align 8
  %104 = call ptr @typegetter_wrapper(ptr %103, ptr %96)
  %105 = call ptr @bump_malloc(i64 32)
  %106 = getelementptr i8, ptr %105, i64 16
  store ptr %104, ptr %106, align 8
  %107 = getelementptr i8, ptr %105, i64 8
  store ptr %95, ptr %107, align 8
  %108 = getelementptr i8, ptr %105, i64 24
  store ptr null, ptr %108, align 8
  %109 = call ptr @llvm.invariant.start.p0(i64 24, ptr %105)
  store ptr @Pair, ptr %105, align 8
  %110 = alloca [4 x ptr], align 8
  store ptr @ZipIterator, ptr %110, align 8
  %111 = getelementptr inbounds i8, ptr %110, i64 8
  store ptr %78, ptr %111, align 8
  %112 = getelementptr inbounds i8, ptr %110, i64 16
  store ptr %87, ptr %112, align 8
  %113 = getelementptr inbounds i8, ptr %110, i64 24
  store ptr %105, ptr %113, align 8
  %114 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ZipIterator, ptr nonnull %110)
  %115 = extractvalue { i64, i64 } %114, 0
  %116 = call ptr @bump_malloc(i64 %115)
  store ptr %78, ptr %116, align 8
  %117 = getelementptr i8, ptr %116, i64 8
  store ptr %87, ptr %117, align 8
  %118 = getelementptr i8, ptr %116, i64 16
  store ptr %105, ptr %118, align 8
  %119 = call ptr @llvm.invariant.start.p0(i64 24, ptr nonnull %116)
  %120 = load ptr, ptr %6, align 8
  %121 = load ptr, ptr %5, align 8
  %122 = call ptr @llvm.invariant.start.p0(i64 416, ptr %121)
  %123 = load i32, ptr %8, align 8
  %124 = sext i32 %123 to i64
  %125 = getelementptr ptr, ptr %121, i64 %124
  %126 = getelementptr i8, ptr %125, i64 24
  %127 = load ptr, ptr %126, align 8
  %128 = load ptr, ptr %127, align 8
  %129 = call { ptr, ptr, ptr, i32 } %128(ptr %120) #24
  %130 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %129, 0
  store ptr %.fca.0.extract17, ptr %130, align 8
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %129, 1
  %.fca.1.gep20 = getelementptr inbounds i8, ptr %130, i64 8
  store ptr %.fca.1.extract19, ptr %.fca.1.gep20, align 8
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %129, 2
  %.fca.2.gep22 = getelementptr inbounds i8, ptr %130, i64 16
  store ptr %.fca.2.extract21, ptr %.fca.2.gep22, align 8
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %129, 3
  %.fca.3.gep24 = getelementptr inbounds i8, ptr %130, i64 24
  store i32 %.fca.3.extract23, ptr %.fca.3.gep24, align 8
  call void @assume_offset(ptr nonnull %130, ptr nonnull @Iterable)
  %131 = load ptr, ptr %130, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %131, 0
  %133 = load ptr, ptr %.fca.1.gep20, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, ptr %133, 1
  %135 = load ptr, ptr %.fca.2.gep22, align 8
  %136 = insertvalue { ptr, ptr, ptr, i32 } %134, ptr %135, 2
  %137 = load i32, ptr %.fca.3.gep24, align 8
  %138 = insertvalue { ptr, ptr, ptr, i32 } %136, i32 %137, 3
  %139 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %140 = call ptr @llvm.invariant.start.p0(i64 184, ptr %131)
  %141 = sext i32 %137 to i64
  %142 = getelementptr ptr, ptr %131, i64 %141
  %143 = getelementptr i8, ptr %142, i64 8
  %144 = load ptr, ptr %143, align 8
  %145 = call ptr @behavior_wrapper(ptr %144, { ptr, ptr, ptr, i32 } %138, ptr nonnull %4)
  %146 = call { ptr, ptr, ptr, i32 } %145({ ptr, ptr, ptr, i32 } %138, { ptr, ptr, ptr, i32 } %138, ptr nonnull %4) #25
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %146, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %146, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %146, 2
  %.fca.3.extract11 = extractvalue { ptr, ptr, ptr, i32 } %146, 3
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %147, align 8
  %148 = getelementptr inbounds i8, ptr %147, i64 8
  store ptr %.fca.1.extract7, ptr %148, align 8
  %149 = getelementptr inbounds i8, ptr %147, i64 16
  store ptr %.fca.2.extract9, ptr %149, align 8
  %150 = getelementptr inbounds i8, ptr %147, i64 24
  store i32 %.fca.3.extract11, ptr %150, align 8
  call void @set_offset(ptr nonnull %147, ptr nonnull @Iterator)
  %151 = load ptr, ptr %6, align 8
  %152 = load ptr, ptr %5, align 8
  %153 = call ptr @llvm.invariant.start.p0(i64 416, ptr %152)
  %154 = load i32, ptr %8, align 8
  %155 = sext i32 %154 to i64
  %156 = getelementptr ptr, ptr %152, i64 %155
  %157 = getelementptr i8, ptr %156, i64 32
  %158 = load ptr, ptr %157, align 8
  %159 = load ptr, ptr %158, align 8
  %160 = call { ptr, ptr, ptr, i32 } %159(ptr %151) #24
  %161 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %160, 0
  store ptr %.fca.0.extract1, ptr %161, align 8
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %160, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %161, i64 8
  store ptr %.fca.1.extract2, ptr %.fca.1.gep, align 8
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %160, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %161, i64 16
  store ptr %.fca.2.extract3, ptr %.fca.2.gep, align 8
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %160, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %161, i64 24
  store i32 %.fca.3.extract4, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %161, ptr nonnull @Iterable)
  %162 = load ptr, ptr %161, align 8
  %163 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %162, 0
  %164 = load ptr, ptr %.fca.1.gep, align 8
  %165 = insertvalue { ptr, ptr, ptr, i32 } %163, ptr %164, 1
  %166 = load ptr, ptr %.fca.2.gep, align 8
  %167 = insertvalue { ptr, ptr, ptr, i32 } %165, ptr %166, 2
  %168 = load i32, ptr %.fca.3.gep, align 8
  %169 = insertvalue { ptr, ptr, ptr, i32 } %167, i32 %168, 3
  %170 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %171 = call ptr @llvm.invariant.start.p0(i64 184, ptr %162)
  %172 = sext i32 %168 to i64
  %173 = getelementptr ptr, ptr %162, i64 %172
  %174 = getelementptr i8, ptr %173, i64 8
  %175 = load ptr, ptr %174, align 8
  %176 = call ptr @behavior_wrapper(ptr %175, { ptr, ptr, ptr, i32 } %169, ptr nonnull %4)
  %177 = call { ptr, ptr, ptr, i32 } %176({ ptr, ptr, ptr, i32 } %169, { ptr, ptr, ptr, i32 } %169, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %177, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %177, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %177, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %177, 3
  %178 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %178, align 8
  %179 = getelementptr inbounds i8, ptr %178, i64 8
  store ptr %.fca.1.extract, ptr %179, align 8
  %180 = getelementptr inbounds i8, ptr %178, i64 16
  store ptr %.fca.2.extract, ptr %180, align 8
  %181 = getelementptr inbounds i8, ptr %178, i64 24
  store i32 %.fca.3.extract, ptr %181, align 8
  call void @set_offset(ptr nonnull %178, ptr nonnull @Iterator)
  %182 = alloca { ptr, ptr, ptr, i32 }, align 8
  %183 = load ptr, ptr %147, align 8
  store ptr %183, ptr %182, align 8
  %184 = getelementptr inbounds i8, ptr %182, i64 8
  %185 = load ptr, ptr %148, align 8
  store ptr %185, ptr %184, align 8
  %186 = getelementptr inbounds i8, ptr %182, i64 16
  %187 = load ptr, ptr %149, align 8
  store ptr %187, ptr %186, align 8
  %188 = getelementptr inbounds i8, ptr %182, i64 24
  %189 = load i32, ptr %150, align 8
  store i32 %189, ptr %188, align 8
  call void @set_offset(ptr nonnull %182, ptr nonnull @Iterator)
  %190 = load ptr, ptr %182, align 8
  %191 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %190, 0
  %192 = load ptr, ptr %184, align 8
  %193 = insertvalue { ptr, ptr, ptr, i32 } %191, ptr %192, 1
  %194 = load ptr, ptr %186, align 8
  %195 = insertvalue { ptr, ptr, ptr, i32 } %193, ptr %194, 2
  %196 = load i32, ptr %188, align 8
  %197 = insertvalue { ptr, ptr, ptr, i32 } %195, i32 %196, 3
  %198 = alloca { ptr, ptr, ptr, i32 }, align 8
  %199 = load ptr, ptr %178, align 8
  store ptr %199, ptr %198, align 8
  %200 = getelementptr inbounds i8, ptr %198, i64 8
  %201 = load ptr, ptr %179, align 8
  store ptr %201, ptr %200, align 8
  %202 = getelementptr inbounds i8, ptr %198, i64 16
  %203 = load ptr, ptr %180, align 8
  store ptr %203, ptr %202, align 8
  %204 = getelementptr inbounds i8, ptr %198, i64 24
  %205 = load i32, ptr %181, align 8
  store i32 %205, ptr %204, align 8
  call void @set_offset(ptr nonnull %198, ptr nonnull @Iterator)
  %206 = load ptr, ptr %198, align 8
  %207 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %206, 0
  %208 = load ptr, ptr %200, align 8
  %209 = insertvalue { ptr, ptr, ptr, i32 } %207, ptr %208, 1
  %210 = load ptr, ptr %202, align 8
  %211 = insertvalue { ptr, ptr, ptr, i32 } %209, ptr %210, 2
  %212 = load i32, ptr %204, align 8
  %213 = insertvalue { ptr, ptr, ptr, i32 } %211, i32 %212, 3
  %214 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ZipIterator, ptr undef, ptr undef, i32 undef }, ptr %116, 1
  %215 = insertvalue { ptr, ptr, ptr, i32 } %214, ptr undef, 2
  %216 = insertvalue { ptr, ptr, ptr, i32 } %215, i32 10, 3
  %217 = load ptr, ptr %6, align 8
  %218 = load ptr, ptr %5, align 8
  %219 = call ptr @llvm.invariant.start.p0(i64 416, ptr %218)
  %220 = load i32, ptr %8, align 8
  %221 = sext i32 %220 to i64
  %222 = getelementptr ptr, ptr %218, i64 %221
  %223 = load ptr, ptr %222, align 8
  %224 = call ptr @typegetter_wrapper(ptr %223, ptr %217)
  %225 = call ptr @bump_malloc(i64 24)
  %226 = getelementptr i8, ptr %225, i64 8
  store ptr %224, ptr %226, align 8
  %227 = getelementptr i8, ptr %225, i64 16
  store ptr null, ptr %227, align 8
  %228 = call ptr @llvm.invariant.start.p0(i64 16, ptr %225)
  store ptr @Iterator, ptr %225, align 8
  %229 = load ptr, ptr %6, align 8
  %230 = load ptr, ptr %5, align 8
  %231 = call ptr @llvm.invariant.start.p0(i64 416, ptr %230)
  %232 = load i32, ptr %8, align 8
  %233 = sext i32 %232 to i64
  %234 = getelementptr ptr, ptr %230, i64 %233
  %235 = getelementptr i8, ptr %234, i64 8
  %236 = load ptr, ptr %235, align 8
  %237 = call ptr @typegetter_wrapper(ptr %236, ptr %229)
  %238 = call ptr @bump_malloc(i64 24)
  %239 = getelementptr i8, ptr %238, i64 8
  store ptr %237, ptr %239, align 8
  %240 = getelementptr i8, ptr %238, i64 16
  store ptr null, ptr %240, align 8
  %241 = call ptr @llvm.invariant.start.p0(i64 16, ptr %238)
  store ptr @Iterator, ptr %238, align 8
  %242 = alloca [2 x ptr], align 8
  store ptr %225, ptr %242, align 8
  %243 = getelementptr inbounds i8, ptr %242, i64 8
  store ptr %238, ptr %243, align 8
  %244 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %242)
  %245 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @ZipIterator)
  %246 = alloca { ptr, ptr }, align 8
  store ptr %190, ptr %246, align 8
  %247 = getelementptr inbounds i8, ptr %246, i64 8
  store ptr %206, ptr %247, align 8
  %248 = call ptr @behavior_wrapper(ptr nonnull @ZipIterator_B_init_firstIteratorT_secondIteratorU, { ptr, ptr, ptr, i32 } %216, ptr nonnull %246)
  call void %248({ ptr, ptr, ptr, i32 } %216, { ptr, ptr, ptr, i32 } %216, ptr nonnull %242, { ptr, ptr, ptr, i32 } %197, { ptr, ptr, ptr, i32 } %213) #25
  %249 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ZipIterator, ptr %249, align 8
  %250 = getelementptr inbounds i8, ptr %249, i64 8
  store ptr %116, ptr %250, align 8
  %251 = getelementptr inbounds i8, ptr %249, i64 16
  %252 = getelementptr inbounds i8, ptr %249, i64 24
  store i32 10, ptr %252, align 8
  call void @set_offset(ptr nonnull %249, ptr nonnull @Iterator)
  %253 = load ptr, ptr %249, align 8
  %254 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %253, 0
  %255 = load ptr, ptr %250, align 8
  %256 = insertvalue { ptr, ptr, ptr, i32 } %254, ptr %255, 1
  %257 = load ptr, ptr %251, align 8
  %258 = insertvalue { ptr, ptr, ptr, i32 } %256, ptr %257, 2
  %259 = load i32, ptr %252, align 8
  %260 = insertvalue { ptr, ptr, ptr, i32 } %258, i32 %259, 3
  ret { ptr, ptr, ptr, i32 } %260
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ZipIterator(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 88, i64 8 }
}

define ptr @ZipIterator_B_init_firstIteratorT_secondIteratorU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 136
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator_field_ZipIterator_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator_field_ZipIterator_1(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ZipIterator_field_ZipIterator_2(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ZipIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ZipIterator_init_firstIteratorT_secondIteratorU({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @ZipIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 96, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 24
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Iterator)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Iterator)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 96, ptr %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 32
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  ret void
}

define { ptr, i160 } @ZipIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [3 x ptr], align 8
  %6 = alloca [2 x ptr], align 8
  %7 = alloca { ptr, ptr }, align 8
  %.fca.0.extract28 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract30 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract34 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract28, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract30, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract32, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract34, ptr %11, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @ZipIterator)
  %12 = load ptr, ptr %9, align 8
  %13 = load ptr, ptr %8, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 96, ptr %13)
  %15 = load i32, ptr %11, align 8
  %16 = sext i32 %15 to i64
  %17 = getelementptr ptr, ptr %13, i64 %16
  %18 = getelementptr i8, ptr %17, i64 24
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call { ptr, ptr, ptr, i32 } %20(ptr %12) #24
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  store ptr %.fca.0.extract8, ptr %22, align 8
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %.fca.1.gep11 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr %.fca.1.extract10, ptr %.fca.1.gep11, align 8
  %.fca.2.extract12 = extractvalue { ptr, ptr, ptr, i32 } %21, 2
  %.fca.2.gep13 = getelementptr inbounds i8, ptr %22, i64 16
  store ptr %.fca.2.extract12, ptr %.fca.2.gep13, align 8
  %.fca.3.extract14 = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %.fca.3.gep15 = getelementptr inbounds i8, ptr %22, i64 24
  store i32 %.fca.3.extract14, ptr %.fca.3.gep15, align 8
  call void @assume_offset(ptr nonnull %22, ptr nonnull @Iterator)
  %23 = load ptr, ptr %22, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %23, 0
  %25 = load ptr, ptr %.fca.1.gep11, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %25, 1
  %27 = load ptr, ptr %.fca.2.gep13, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr %27, 2
  %29 = load i32, ptr %.fca.3.gep15, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, i32 %29, 3
  %31 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %32 = call ptr @llvm.invariant.start.p0(i64 24, ptr %23)
  %33 = sext i32 %29 to i64
  %34 = getelementptr ptr, ptr %23, i64 %33
  %35 = getelementptr i8, ptr %34, i64 8
  %36 = load ptr, ptr %35, align 8
  %37 = call ptr @behavior_wrapper(ptr %36, { ptr, ptr, ptr, i32 } %30, ptr nonnull %4)
  %38 = call { ptr, i160 } %37({ ptr, ptr, ptr, i32 } %30, { ptr, ptr, ptr, i32 } %30, ptr nonnull %4) #25
  %.fca.0.extract4 = extractvalue { ptr, i160 } %38, 0
  %39 = load ptr, ptr %9, align 8
  %40 = load ptr, ptr %8, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 96, ptr %40)
  %42 = load i32, ptr %11, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr ptr, ptr %40, i64 %43
  %45 = getelementptr i8, ptr %44, i64 32
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = call { ptr, ptr, ptr, i32 } %47(ptr %39) #24
  %49 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %48, 0
  store ptr %.fca.0.extract2, ptr %49, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %48, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %49, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %48, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %49, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %48, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %49, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %49, ptr nonnull @Iterator)
  %50 = load ptr, ptr %49, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %50, 0
  %52 = load ptr, ptr %.fca.1.gep, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 1
  %54 = load ptr, ptr %.fca.2.gep, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 2
  %56 = load i32, ptr %.fca.3.gep, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 %56, 3
  %58 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %59 = call ptr @llvm.invariant.start.p0(i64 24, ptr %50)
  %60 = sext i32 %56 to i64
  %61 = getelementptr ptr, ptr %50, i64 %60
  %62 = getelementptr i8, ptr %61, i64 8
  %63 = load ptr, ptr %62, align 8
  %64 = call ptr @behavior_wrapper(ptr %63, { ptr, ptr, ptr, i32 } %57, ptr nonnull %4)
  %65 = call { ptr, i160 } %64({ ptr, ptr, ptr, i32 } %57, { ptr, ptr, ptr, i32 } %57, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr, i160 } %65, 0
  %66 = load ptr, ptr %9, align 8
  %67 = load ptr, ptr %8, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 96, ptr %67)
  %69 = load i32, ptr %11, align 8
  %70 = sext i32 %69 to i64
  %71 = getelementptr ptr, ptr %67, i64 %70
  %72 = load ptr, ptr %71, align 8
  %73 = call ptr @typegetter_wrapper(ptr %72, ptr %66)
  %74 = icmp ne ptr %.fca.0.extract4, @nil_typ
  %75 = icmp ne ptr %.fca.0.extract4, null
  %.not55 = and i1 %74, %75
  br i1 %.not55, label %76, label %139

76:                                               ; preds = %3
  %77 = load ptr, ptr %9, align 8
  %78 = load ptr, ptr %8, align 8
  %79 = call ptr @llvm.invariant.start.p0(i64 96, ptr %78)
  %80 = load i32, ptr %11, align 8
  %81 = sext i32 %80 to i64
  %82 = getelementptr ptr, ptr %78, i64 %81
  %83 = getelementptr i8, ptr %82, i64 8
  %84 = load ptr, ptr %83, align 8
  %85 = call ptr @typegetter_wrapper(ptr %84, ptr %77)
  %86 = icmp ne ptr %.fca.0.extract, @nil_typ
  %87 = icmp ne ptr %.fca.0.extract, null
  %.not57.not.not = and i1 %86, %87
  br i1 %.not57.not.not, label %88, label %139

88:                                               ; preds = %76
  %89 = load ptr, ptr %9, align 8
  %90 = load ptr, ptr %8, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 96, ptr %90)
  %92 = load i32, ptr %11, align 8
  %93 = sext i32 %92 to i64
  %94 = getelementptr ptr, ptr %90, i64 %93
  %95 = load ptr, ptr %94, align 8
  %96 = call ptr @typegetter_wrapper(ptr %95, ptr %89)
  %97 = load ptr, ptr %9, align 8
  %98 = load ptr, ptr %8, align 8
  %99 = call ptr @llvm.invariant.start.p0(i64 96, ptr %98)
  %100 = load i32, ptr %11, align 8
  %101 = sext i32 %100 to i64
  %102 = getelementptr ptr, ptr %98, i64 %101
  %103 = getelementptr i8, ptr %102, i64 8
  %104 = load ptr, ptr %103, align 8
  %105 = call ptr @typegetter_wrapper(ptr %104, ptr %97)
  store ptr @Pair, ptr %5, align 8
  %106 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %96, ptr %106, align 8
  %107 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %105, ptr %107, align 8
  %108 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Pair, ptr nonnull %5)
  %109 = extractvalue { i64, i64 } %108, 0
  %110 = call ptr @bump_malloc(i64 %109)
  store ptr %96, ptr %110, align 8
  %111 = getelementptr i8, ptr %110, i64 8
  store ptr %105, ptr %111, align 8
  %112 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull %110)
  %113 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Pair, ptr undef, ptr undef, i32 undef }, ptr %110, 1
  %114 = insertvalue { ptr, ptr, ptr, i32 } %113, ptr undef, 2
  %115 = insertvalue { ptr, ptr, ptr, i32 } %114, i32 10, 3
  %116 = load ptr, ptr %9, align 8
  %117 = load ptr, ptr %8, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 96, ptr %117)
  %119 = load i32, ptr %11, align 8
  %120 = sext i32 %119 to i64
  %121 = getelementptr ptr, ptr %117, i64 %120
  %122 = load ptr, ptr %121, align 8
  %123 = call ptr @typegetter_wrapper(ptr %122, ptr %116)
  %124 = load ptr, ptr %9, align 8
  %125 = load ptr, ptr %8, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 96, ptr %125)
  %127 = load i32, ptr %11, align 8
  %128 = sext i32 %127 to i64
  %129 = getelementptr ptr, ptr %125, i64 %128
  %130 = getelementptr i8, ptr %129, i64 8
  %131 = load ptr, ptr %130, align 8
  %132 = call ptr @typegetter_wrapper(ptr %131, ptr %124)
  store ptr %123, ptr %6, align 8
  %133 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %132, ptr %133, align 8
  %134 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %6)
  %135 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @Pair)
  store ptr %.fca.0.extract4, ptr %7, align 8
  %136 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.0.extract, ptr %136, align 8
  %137 = call ptr @behavior_wrapper(ptr nonnull @Pair_B_init_firstT_secondU, { ptr, ptr, ptr, i32 } %115, ptr nonnull %7)
  call void %137({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr nonnull %6, { ptr, i160 } %38, { ptr, i160 } %65) #25
  %138 = ptrtoint ptr %110 to i64
  %.sroa.344.8.insert.ext = zext i64 %138 to i160
  %.sroa.344.8.insert.insert = or disjoint i160 %.sroa.344.8.insert.ext, 3402823669209384634633746074317682114560
  br label %139

139:                                              ; preds = %88, %76, %3
  %.reg2mem41.sroa.3.0 = phi i160 [ %.sroa.344.8.insert.insert, %88 ], [ poison, %3 ], [ poison, %76 ]
  %.reg2mem39.0 = phi ptr [ @Pair, %88 ], [ @nil_typ, %3 ], [ @nil_typ, %76 ]
  %.reload38.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem39.0, 0
  %.reload38.fca.1.insert = insertvalue { ptr, i160 } %.reload38.fca.0.insert, i160 %.reg2mem41.sroa.3.0, 1
  ret { ptr, i160 } %.reload38.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterator_getter_second(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterator_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterator_getter_first(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterator_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterable_getter_second(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 56
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 64
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 80
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterable_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 56
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 64
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 72
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 80
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ZipIterable_getter_first(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 24
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 32
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 40
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 48
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ZipIterable_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 24
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 48
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_InterleaveIterable(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 72, i64 8 }
}

define ptr @InterleaveIterable_B_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 200
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @InterleaveIterable_field_InterleaveIterable_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @InterleaveIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 224
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @InterleaveIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 264
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @InterleaveIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 272
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @InterleaveIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @InterleaveIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @InterleaveIterable_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @InterleaveIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 400, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Iterable)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Iterable)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 400, ptr %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 16
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @InterleaveIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract71 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract73 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract75 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract77 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract71, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract73, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract75, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract77, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @InterleaveIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 400, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract63 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract63, ptr %19, align 8
  %.fca.1.extract65 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep66 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract65, ptr %.fca.1.gep66, align 8
  %.fca.2.extract67 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep68 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract67, ptr %.fca.2.gep68, align 8
  %.fca.3.extract69 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep70 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract69, ptr %.fca.3.gep70, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep66, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep68, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep70, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 184, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract53 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract55 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract57 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract51, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract53, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract55, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract57, ptr %39, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 400, ptr %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %40) #24
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract43 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  store ptr %.fca.0.extract43, ptr %50, align 8
  %.fca.1.extract45 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.1.gep46 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr %.fca.1.extract45, ptr %.fca.1.gep46, align 8
  %.fca.2.extract47 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %.fca.2.gep48 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr %.fca.2.extract47, ptr %.fca.2.gep48, align 8
  %.fca.3.extract49 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %.fca.3.gep50 = getelementptr inbounds i8, ptr %50, i64 24
  store i32 %.fca.3.extract49, ptr %.fca.3.gep50, align 8
  call void @assume_offset(ptr nonnull %50, ptr nonnull @Iterable)
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %.fca.1.gep46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %.fca.2.gep48, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %.fca.3.gep50, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %60 = call ptr @llvm.invariant.start.p0(i64 184, ptr %51)
  %61 = sext i32 %57 to i64
  %62 = getelementptr ptr, ptr %51, i64 %61
  %63 = getelementptr i8, ptr %62, i64 8
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @behavior_wrapper(ptr %64, { ptr, ptr, ptr, i32 } %58, ptr nonnull %4)
  %66 = call { ptr, ptr, ptr, i32 } %65({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr nonnull %4) #25
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %66, 0
  %.fca.1.extract33 = extractvalue { ptr, ptr, ptr, i32 } %66, 1
  %.fca.2.extract35 = extractvalue { ptr, ptr, ptr, i32 } %66, 2
  %.fca.3.extract37 = extractvalue { ptr, ptr, ptr, i32 } %66, 3
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr %.fca.1.extract33, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %67, i64 16
  store ptr %.fca.2.extract35, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %67, i64 24
  store i32 %.fca.3.extract37, ptr %70, align 8
  call void @set_offset(ptr nonnull %67, ptr nonnull @Iterator)
  %71 = load ptr, ptr %6, align 8
  %72 = load ptr, ptr %5, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 400, ptr %72)
  %74 = load i32, ptr %8, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @typegetter_wrapper(ptr %77, ptr %71)
  %79 = alloca [2 x ptr], align 8
  store ptr @InterleaveIterator, ptr %79, align 8
  %80 = getelementptr inbounds i8, ptr %79, i64 8
  store ptr %78, ptr %80, align 8
  %81 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_InterleaveIterator, ptr nonnull %79)
  %82 = extractvalue { i64, i64 } %81, 0
  %83 = call ptr @bump_malloc(i64 %82)
  store ptr %78, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %83)
  %85 = load ptr, ptr %6, align 8
  %86 = load ptr, ptr %5, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 400, ptr %86)
  %88 = load i32, ptr %8, align 8
  %89 = sext i32 %88 to i64
  %90 = getelementptr ptr, ptr %86, i64 %89
  %91 = getelementptr i8, ptr %90, i64 8
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %92, align 8
  %94 = call { ptr, ptr, ptr, i32 } %93(ptr %85) #24
  %95 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %94, 0
  store ptr %.fca.0.extract17, ptr %95, align 8
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %94, 1
  %.fca.1.gep20 = getelementptr inbounds i8, ptr %95, i64 8
  store ptr %.fca.1.extract19, ptr %.fca.1.gep20, align 8
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %94, 2
  %.fca.2.gep22 = getelementptr inbounds i8, ptr %95, i64 16
  store ptr %.fca.2.extract21, ptr %.fca.2.gep22, align 8
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %94, 3
  %.fca.3.gep24 = getelementptr inbounds i8, ptr %95, i64 24
  store i32 %.fca.3.extract23, ptr %.fca.3.gep24, align 8
  call void @assume_offset(ptr nonnull %95, ptr nonnull @Iterable)
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = load ptr, ptr %.fca.1.gep20, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 1
  %100 = load ptr, ptr %.fca.2.gep22, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 2
  %102 = load i32, ptr %.fca.3.gep24, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, i32 %102, 3
  %104 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %105 = call ptr @llvm.invariant.start.p0(i64 184, ptr %96)
  %106 = sext i32 %102 to i64
  %107 = getelementptr ptr, ptr %96, i64 %106
  %108 = getelementptr i8, ptr %107, i64 8
  %109 = load ptr, ptr %108, align 8
  %110 = call ptr @behavior_wrapper(ptr %109, { ptr, ptr, ptr, i32 } %103, ptr nonnull %4)
  %111 = call { ptr, ptr, ptr, i32 } %110({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr nonnull %4) #25
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %111, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %111, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %111, 2
  %.fca.3.extract11 = extractvalue { ptr, ptr, ptr, i32 } %111, 3
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %112, align 8
  %113 = getelementptr inbounds i8, ptr %112, i64 8
  store ptr %.fca.1.extract7, ptr %113, align 8
  %114 = getelementptr inbounds i8, ptr %112, i64 16
  store ptr %.fca.2.extract9, ptr %114, align 8
  %115 = getelementptr inbounds i8, ptr %112, i64 24
  store i32 %.fca.3.extract11, ptr %115, align 8
  call void @set_offset(ptr nonnull %112, ptr nonnull @Iterator)
  %116 = load ptr, ptr %6, align 8
  %117 = load ptr, ptr %5, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 400, ptr %117)
  %119 = load i32, ptr %8, align 8
  %120 = sext i32 %119 to i64
  %121 = getelementptr ptr, ptr %117, i64 %120
  %122 = getelementptr i8, ptr %121, i64 16
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %123, align 8
  %125 = call { ptr, ptr, ptr, i32 } %124(ptr %116) #24
  %126 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %125, 0
  store ptr %.fca.0.extract1, ptr %126, align 8
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %125, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %126, i64 8
  store ptr %.fca.1.extract2, ptr %.fca.1.gep, align 8
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %125, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %126, i64 16
  store ptr %.fca.2.extract3, ptr %.fca.2.gep, align 8
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %125, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %126, i64 24
  store i32 %.fca.3.extract4, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %126, ptr nonnull @Iterable)
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = load ptr, ptr %.fca.1.gep, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 1
  %131 = load ptr, ptr %.fca.2.gep, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 2
  %133 = load i32, ptr %.fca.3.gep, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %133, 3
  %135 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %136 = call ptr @llvm.invariant.start.p0(i64 184, ptr %127)
  %137 = sext i32 %133 to i64
  %138 = getelementptr ptr, ptr %127, i64 %137
  %139 = getelementptr i8, ptr %138, i64 8
  %140 = load ptr, ptr %139, align 8
  %141 = call ptr @behavior_wrapper(ptr %140, { ptr, ptr, ptr, i32 } %134, ptr nonnull %4)
  %142 = call { ptr, ptr, ptr, i32 } %141({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 3
  %143 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %143, align 8
  %144 = getelementptr inbounds i8, ptr %143, i64 8
  store ptr %.fca.1.extract, ptr %144, align 8
  %145 = getelementptr inbounds i8, ptr %143, i64 16
  store ptr %.fca.2.extract, ptr %145, align 8
  %146 = getelementptr inbounds i8, ptr %143, i64 24
  store i32 %.fca.3.extract, ptr %146, align 8
  call void @set_offset(ptr nonnull %143, ptr nonnull @Iterator)
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  %148 = load ptr, ptr %112, align 8
  store ptr %148, ptr %147, align 8
  %149 = getelementptr inbounds i8, ptr %147, i64 8
  %150 = load ptr, ptr %113, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr inbounds i8, ptr %147, i64 16
  %152 = load ptr, ptr %114, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr inbounds i8, ptr %147, i64 24
  %154 = load i32, ptr %115, align 8
  store i32 %154, ptr %153, align 8
  call void @set_offset(ptr nonnull %147, ptr nonnull @Iterator)
  %155 = load ptr, ptr %147, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = load ptr, ptr %149, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %157, 1
  %159 = load ptr, ptr %151, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %159, 2
  %161 = load i32, ptr %153, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %161, 3
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = load ptr, ptr %143, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr inbounds i8, ptr %163, i64 8
  %166 = load ptr, ptr %144, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr inbounds i8, ptr %163, i64 16
  %168 = load ptr, ptr %145, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr inbounds i8, ptr %163, i64 24
  %170 = load i32, ptr %146, align 8
  store i32 %170, ptr %169, align 8
  call void @set_offset(ptr nonnull %163, ptr nonnull @Iterator)
  %171 = load ptr, ptr %163, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = load ptr, ptr %165, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 1
  %175 = load ptr, ptr %167, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 2
  %177 = load i32, ptr %169, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 %177, 3
  %179 = insertvalue { ptr, ptr, ptr, i32 } { ptr @InterleaveIterator, ptr undef, ptr undef, i32 undef }, ptr %83, 1
  %180 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr undef, 2
  %181 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 10, 3
  %182 = load ptr, ptr %6, align 8
  %183 = load ptr, ptr %5, align 8
  %184 = call ptr @llvm.invariant.start.p0(i64 400, ptr %183)
  %185 = load i32, ptr %8, align 8
  %186 = sext i32 %185 to i64
  %187 = getelementptr ptr, ptr %183, i64 %186
  %188 = load ptr, ptr %187, align 8
  %189 = call ptr @typegetter_wrapper(ptr %188, ptr %182)
  %190 = call ptr @bump_malloc(i64 24)
  %191 = getelementptr i8, ptr %190, i64 8
  store ptr %189, ptr %191, align 8
  %192 = getelementptr i8, ptr %190, i64 16
  store ptr null, ptr %192, align 8
  %193 = call ptr @llvm.invariant.start.p0(i64 16, ptr %190)
  store ptr @Iterator, ptr %190, align 8
  %194 = load ptr, ptr %6, align 8
  %195 = load ptr, ptr %5, align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 400, ptr %195)
  %197 = load i32, ptr %8, align 8
  %198 = sext i32 %197 to i64
  %199 = getelementptr ptr, ptr %195, i64 %198
  %200 = load ptr, ptr %199, align 8
  %201 = call ptr @typegetter_wrapper(ptr %200, ptr %194)
  %202 = call ptr @bump_malloc(i64 24)
  %203 = getelementptr i8, ptr %202, i64 8
  store ptr %201, ptr %203, align 8
  %204 = getelementptr i8, ptr %202, i64 16
  store ptr null, ptr %204, align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 16, ptr %202)
  store ptr @Iterator, ptr %202, align 8
  %206 = alloca [2 x ptr], align 8
  store ptr %190, ptr %206, align 8
  %207 = getelementptr inbounds i8, ptr %206, i64 8
  store ptr %202, ptr %207, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %206)
  %209 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @InterleaveIterator)
  %210 = alloca { ptr, ptr }, align 8
  store ptr %155, ptr %210, align 8
  %211 = getelementptr inbounds i8, ptr %210, i64 8
  store ptr %171, ptr %211, align 8
  %212 = call ptr @behavior_wrapper(ptr nonnull @InterleaveIterator_B_init_firstIteratorT_secondIteratorT, { ptr, ptr, ptr, i32 } %181, ptr nonnull %210)
  call void %212({ ptr, ptr, ptr, i32 } %181, { ptr, ptr, ptr, i32 } %181, ptr nonnull %206, { ptr, ptr, ptr, i32 } %162, { ptr, ptr, ptr, i32 } %178) #25
  %213 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @InterleaveIterator, ptr %213, align 8
  %214 = getelementptr inbounds i8, ptr %213, i64 8
  store ptr %83, ptr %214, align 8
  %215 = getelementptr inbounds i8, ptr %213, i64 16
  %216 = getelementptr inbounds i8, ptr %213, i64 24
  store i32 10, ptr %216, align 8
  call void @set_offset(ptr nonnull %213, ptr nonnull @Iterator)
  %217 = load ptr, ptr %213, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %217, 0
  %219 = load ptr, ptr %214, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %219, 1
  %221 = load ptr, ptr %215, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %220, ptr %221, 2
  %223 = load i32, ptr %216, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } %222, i32 %223, 3
  ret { ptr, ptr, ptr, i32 } %224
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_InterleaveIterator(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 80, i64 8 }
}

define ptr @InterleaveIterator_B_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 128
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @InterleaveIterator_field_InterleaveIterator_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @InterleaveIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @InterleaveIterator_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @InterleaveIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 88, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Iterator)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Iterator)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 88, ptr %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 16
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  %70 = load ptr, ptr %7, align 8
  %71 = load ptr, ptr %6, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 88, ptr %71)
  %73 = load i32, ptr %9, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 24
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr i8, ptr %77, i64 8
  %79 = load ptr, ptr %78, align 8
  call void %79(ptr %70, i1 true) #23
  ret void
}

define { ptr, i160 } @InterleaveIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @InterleaveIterator)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 88, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 24
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call i1 %19(ptr %11) #24
  %21 = call ptr @llvm.invariant.start.p0(i64 88, ptr %12)
  %22 = getelementptr i8, ptr %18, i64 8
  %23 = load ptr, ptr %22, align 8
  %not. = xor i1 %20, true
  %.68 = select i1 %20, i64 8, i64 16
  %.69 = select i1 %20, ptr %5, ptr %6
  call void %23(ptr %11, i1 %not.) #23
  %24 = load ptr, ptr %8, align 8
  %25 = load ptr, ptr %7, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 88, ptr %25)
  %27 = load i32, ptr %10, align 8
  %28 = sext i32 %27 to i64
  %29 = getelementptr ptr, ptr %25, i64 %28
  %30 = getelementptr i8, ptr %29, i64 %.68
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call { ptr, ptr, ptr, i32 } %32(ptr %24) #24
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %33, 0
  store ptr %.fca.0.extract9, ptr %.69, align 8
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %33, 1
  %.69.sroa.sel.v = select i1 %20, ptr %5, ptr %6
  %.69.sroa.sel = getelementptr inbounds i8, ptr %.69.sroa.sel.v, i64 8
  store ptr %.fca.1.extract10, ptr %.69.sroa.sel, align 8
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %33, 2
  %.69.sroa.sel73.v = select i1 %20, ptr %5, ptr %6
  %.69.sroa.sel73 = getelementptr inbounds i8, ptr %.69.sroa.sel73.v, i64 16
  store ptr %.fca.2.extract11, ptr %.69.sroa.sel73, align 8
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %33, 3
  %.69.sroa.sel76.v = select i1 %20, ptr %5, ptr %6
  %.69.sroa.sel76 = getelementptr inbounds i8, ptr %.69.sroa.sel76.v, i64 24
  store i32 %.fca.3.extract12, ptr %.69.sroa.sel76, align 8
  call void @assume_offset(ptr nonnull %.69, ptr nonnull @Iterator)
  %34 = load ptr, ptr %.69, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = load ptr, ptr %.69.sroa.sel, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 1
  %38 = load ptr, ptr %.69.sroa.sel73, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 2
  %40 = load i32, ptr %.69.sroa.sel76, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 %40, 3
  %42 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %43 = call ptr @llvm.invariant.start.p0(i64 24, ptr %34)
  %44 = sext i32 %40 to i64
  %45 = getelementptr ptr, ptr %34, i64 %44
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  %48 = call ptr @behavior_wrapper(ptr %47, { ptr, ptr, ptr, i32 } %41, ptr nonnull %4)
  %49 = call { ptr, i160 } %48({ ptr, ptr, ptr, i32 } %41, { ptr, ptr, ptr, i32 } %41, ptr nonnull %4) #25
  ret { ptr, i160 } %49
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i1 @InterleaveIterator_getter_on_first(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator_setter_on_first(ptr nocapture writeonly %0, i1 %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 72
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_second(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterator_getter_first(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterator_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_second(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterable_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @InterleaveIterable_getter_first(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @InterleaveIterable_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ChainIterable(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 72, i64 8 }
}

define ptr @ChainIterable_B_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 200
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ChainIterable_field_ChainIterable_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ChainIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 224
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ChainIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 264
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ChainIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 272
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ChainIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @ChainIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @ChainIterable_init_firstIterableT_secondIterableT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @ChainIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 400, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Iterable)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Iterable)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 400, ptr %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 16
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @ChainIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract71 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract73 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract75 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract77 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract71, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract73, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract75, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract77, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ChainIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 400, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract63 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract63, ptr %19, align 8
  %.fca.1.extract65 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep66 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract65, ptr %.fca.1.gep66, align 8
  %.fca.2.extract67 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep68 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract67, ptr %.fca.2.gep68, align 8
  %.fca.3.extract69 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep70 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract69, ptr %.fca.3.gep70, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep66, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep68, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep70, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 184, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract51 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract53 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract55 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract57 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract51, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract53, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract55, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract57, ptr %39, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 400, ptr %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr, ptr, ptr, i32 } %48(ptr %40) #24
  %50 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract43 = extractvalue { ptr, ptr, ptr, i32 } %49, 0
  store ptr %.fca.0.extract43, ptr %50, align 8
  %.fca.1.extract45 = extractvalue { ptr, ptr, ptr, i32 } %49, 1
  %.fca.1.gep46 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr %.fca.1.extract45, ptr %.fca.1.gep46, align 8
  %.fca.2.extract47 = extractvalue { ptr, ptr, ptr, i32 } %49, 2
  %.fca.2.gep48 = getelementptr inbounds i8, ptr %50, i64 16
  store ptr %.fca.2.extract47, ptr %.fca.2.gep48, align 8
  %.fca.3.extract49 = extractvalue { ptr, ptr, ptr, i32 } %49, 3
  %.fca.3.gep50 = getelementptr inbounds i8, ptr %50, i64 24
  store i32 %.fca.3.extract49, ptr %.fca.3.gep50, align 8
  call void @assume_offset(ptr nonnull %50, ptr nonnull @Iterable)
  %51 = load ptr, ptr %50, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %51, 0
  %53 = load ptr, ptr %.fca.1.gep46, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 1
  %55 = load ptr, ptr %.fca.2.gep48, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 2
  %57 = load i32, ptr %.fca.3.gep50, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, i32 %57, 3
  %59 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %60 = call ptr @llvm.invariant.start.p0(i64 184, ptr %51)
  %61 = sext i32 %57 to i64
  %62 = getelementptr ptr, ptr %51, i64 %61
  %63 = getelementptr i8, ptr %62, i64 8
  %64 = load ptr, ptr %63, align 8
  %65 = call ptr @behavior_wrapper(ptr %64, { ptr, ptr, ptr, i32 } %58, ptr nonnull %4)
  %66 = call { ptr, ptr, ptr, i32 } %65({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr nonnull %4) #25
  %.fca.0.extract31 = extractvalue { ptr, ptr, ptr, i32 } %66, 0
  %.fca.1.extract33 = extractvalue { ptr, ptr, ptr, i32 } %66, 1
  %.fca.2.extract35 = extractvalue { ptr, ptr, ptr, i32 } %66, 2
  %.fca.3.extract37 = extractvalue { ptr, ptr, ptr, i32 } %66, 3
  %67 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract31, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  store ptr %.fca.1.extract33, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %67, i64 16
  store ptr %.fca.2.extract35, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %67, i64 24
  store i32 %.fca.3.extract37, ptr %70, align 8
  call void @set_offset(ptr nonnull %67, ptr nonnull @Iterator)
  %71 = load ptr, ptr %6, align 8
  %72 = load ptr, ptr %5, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 400, ptr %72)
  %74 = load i32, ptr %8, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @typegetter_wrapper(ptr %77, ptr %71)
  %79 = alloca [2 x ptr], align 8
  store ptr @ChainIterator, ptr %79, align 8
  %80 = getelementptr inbounds i8, ptr %79, i64 8
  store ptr %78, ptr %80, align 8
  %81 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ChainIterator, ptr nonnull %79)
  %82 = extractvalue { i64, i64 } %81, 0
  %83 = call ptr @bump_malloc(i64 %82)
  store ptr %78, ptr %83, align 8
  %84 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %83)
  %85 = load ptr, ptr %6, align 8
  %86 = load ptr, ptr %5, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 400, ptr %86)
  %88 = load i32, ptr %8, align 8
  %89 = sext i32 %88 to i64
  %90 = getelementptr ptr, ptr %86, i64 %89
  %91 = getelementptr i8, ptr %90, i64 8
  %92 = load ptr, ptr %91, align 8
  %93 = load ptr, ptr %92, align 8
  %94 = call { ptr, ptr, ptr, i32 } %93(ptr %85) #24
  %95 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %94, 0
  store ptr %.fca.0.extract17, ptr %95, align 8
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %94, 1
  %.fca.1.gep20 = getelementptr inbounds i8, ptr %95, i64 8
  store ptr %.fca.1.extract19, ptr %.fca.1.gep20, align 8
  %.fca.2.extract21 = extractvalue { ptr, ptr, ptr, i32 } %94, 2
  %.fca.2.gep22 = getelementptr inbounds i8, ptr %95, i64 16
  store ptr %.fca.2.extract21, ptr %.fca.2.gep22, align 8
  %.fca.3.extract23 = extractvalue { ptr, ptr, ptr, i32 } %94, 3
  %.fca.3.gep24 = getelementptr inbounds i8, ptr %95, i64 24
  store i32 %.fca.3.extract23, ptr %.fca.3.gep24, align 8
  call void @assume_offset(ptr nonnull %95, ptr nonnull @Iterable)
  %96 = load ptr, ptr %95, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %96, 0
  %98 = load ptr, ptr %.fca.1.gep20, align 8
  %99 = insertvalue { ptr, ptr, ptr, i32 } %97, ptr %98, 1
  %100 = load ptr, ptr %.fca.2.gep22, align 8
  %101 = insertvalue { ptr, ptr, ptr, i32 } %99, ptr %100, 2
  %102 = load i32, ptr %.fca.3.gep24, align 8
  %103 = insertvalue { ptr, ptr, ptr, i32 } %101, i32 %102, 3
  %104 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %105 = call ptr @llvm.invariant.start.p0(i64 184, ptr %96)
  %106 = sext i32 %102 to i64
  %107 = getelementptr ptr, ptr %96, i64 %106
  %108 = getelementptr i8, ptr %107, i64 8
  %109 = load ptr, ptr %108, align 8
  %110 = call ptr @behavior_wrapper(ptr %109, { ptr, ptr, ptr, i32 } %103, ptr nonnull %4)
  %111 = call { ptr, ptr, ptr, i32 } %110({ ptr, ptr, ptr, i32 } %103, { ptr, ptr, ptr, i32 } %103, ptr nonnull %4) #25
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %111, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %111, 1
  %.fca.2.extract9 = extractvalue { ptr, ptr, ptr, i32 } %111, 2
  %.fca.3.extract11 = extractvalue { ptr, ptr, ptr, i32 } %111, 3
  %112 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %112, align 8
  %113 = getelementptr inbounds i8, ptr %112, i64 8
  store ptr %.fca.1.extract7, ptr %113, align 8
  %114 = getelementptr inbounds i8, ptr %112, i64 16
  store ptr %.fca.2.extract9, ptr %114, align 8
  %115 = getelementptr inbounds i8, ptr %112, i64 24
  store i32 %.fca.3.extract11, ptr %115, align 8
  call void @set_offset(ptr nonnull %112, ptr nonnull @Iterator)
  %116 = load ptr, ptr %6, align 8
  %117 = load ptr, ptr %5, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 400, ptr %117)
  %119 = load i32, ptr %8, align 8
  %120 = sext i32 %119 to i64
  %121 = getelementptr ptr, ptr %117, i64 %120
  %122 = getelementptr i8, ptr %121, i64 16
  %123 = load ptr, ptr %122, align 8
  %124 = load ptr, ptr %123, align 8
  %125 = call { ptr, ptr, ptr, i32 } %124(ptr %116) #24
  %126 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %125, 0
  store ptr %.fca.0.extract1, ptr %126, align 8
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %125, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %126, i64 8
  store ptr %.fca.1.extract2, ptr %.fca.1.gep, align 8
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %125, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %126, i64 16
  store ptr %.fca.2.extract3, ptr %.fca.2.gep, align 8
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %125, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %126, i64 24
  store i32 %.fca.3.extract4, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %126, ptr nonnull @Iterable)
  %127 = load ptr, ptr %126, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %127, 0
  %129 = load ptr, ptr %.fca.1.gep, align 8
  %130 = insertvalue { ptr, ptr, ptr, i32 } %128, ptr %129, 1
  %131 = load ptr, ptr %.fca.2.gep, align 8
  %132 = insertvalue { ptr, ptr, ptr, i32 } %130, ptr %131, 2
  %133 = load i32, ptr %.fca.3.gep, align 8
  %134 = insertvalue { ptr, ptr, ptr, i32 } %132, i32 %133, 3
  %135 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %136 = call ptr @llvm.invariant.start.p0(i64 184, ptr %127)
  %137 = sext i32 %133 to i64
  %138 = getelementptr ptr, ptr %127, i64 %137
  %139 = getelementptr i8, ptr %138, i64 8
  %140 = load ptr, ptr %139, align 8
  %141 = call ptr @behavior_wrapper(ptr %140, { ptr, ptr, ptr, i32 } %134, ptr nonnull %4)
  %142 = call { ptr, ptr, ptr, i32 } %141({ ptr, ptr, ptr, i32 } %134, { ptr, ptr, ptr, i32 } %134, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %142, 3
  %143 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %143, align 8
  %144 = getelementptr inbounds i8, ptr %143, i64 8
  store ptr %.fca.1.extract, ptr %144, align 8
  %145 = getelementptr inbounds i8, ptr %143, i64 16
  store ptr %.fca.2.extract, ptr %145, align 8
  %146 = getelementptr inbounds i8, ptr %143, i64 24
  store i32 %.fca.3.extract, ptr %146, align 8
  call void @set_offset(ptr nonnull %143, ptr nonnull @Iterator)
  %147 = alloca { ptr, ptr, ptr, i32 }, align 8
  %148 = load ptr, ptr %112, align 8
  store ptr %148, ptr %147, align 8
  %149 = getelementptr inbounds i8, ptr %147, i64 8
  %150 = load ptr, ptr %113, align 8
  store ptr %150, ptr %149, align 8
  %151 = getelementptr inbounds i8, ptr %147, i64 16
  %152 = load ptr, ptr %114, align 8
  store ptr %152, ptr %151, align 8
  %153 = getelementptr inbounds i8, ptr %147, i64 24
  %154 = load i32, ptr %115, align 8
  store i32 %154, ptr %153, align 8
  call void @set_offset(ptr nonnull %147, ptr nonnull @Iterator)
  %155 = load ptr, ptr %147, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = load ptr, ptr %149, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %157, 1
  %159 = load ptr, ptr %151, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %159, 2
  %161 = load i32, ptr %153, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %161, 3
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = load ptr, ptr %143, align 8
  store ptr %164, ptr %163, align 8
  %165 = getelementptr inbounds i8, ptr %163, i64 8
  %166 = load ptr, ptr %144, align 8
  store ptr %166, ptr %165, align 8
  %167 = getelementptr inbounds i8, ptr %163, i64 16
  %168 = load ptr, ptr %145, align 8
  store ptr %168, ptr %167, align 8
  %169 = getelementptr inbounds i8, ptr %163, i64 24
  %170 = load i32, ptr %146, align 8
  store i32 %170, ptr %169, align 8
  call void @set_offset(ptr nonnull %163, ptr nonnull @Iterator)
  %171 = load ptr, ptr %163, align 8
  %172 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %171, 0
  %173 = load ptr, ptr %165, align 8
  %174 = insertvalue { ptr, ptr, ptr, i32 } %172, ptr %173, 1
  %175 = load ptr, ptr %167, align 8
  %176 = insertvalue { ptr, ptr, ptr, i32 } %174, ptr %175, 2
  %177 = load i32, ptr %169, align 8
  %178 = insertvalue { ptr, ptr, ptr, i32 } %176, i32 %177, 3
  %179 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ChainIterator, ptr undef, ptr undef, i32 undef }, ptr %83, 1
  %180 = insertvalue { ptr, ptr, ptr, i32 } %179, ptr undef, 2
  %181 = insertvalue { ptr, ptr, ptr, i32 } %180, i32 10, 3
  %182 = load ptr, ptr %6, align 8
  %183 = load ptr, ptr %5, align 8
  %184 = call ptr @llvm.invariant.start.p0(i64 400, ptr %183)
  %185 = load i32, ptr %8, align 8
  %186 = sext i32 %185 to i64
  %187 = getelementptr ptr, ptr %183, i64 %186
  %188 = load ptr, ptr %187, align 8
  %189 = call ptr @typegetter_wrapper(ptr %188, ptr %182)
  %190 = call ptr @bump_malloc(i64 24)
  %191 = getelementptr i8, ptr %190, i64 8
  store ptr %189, ptr %191, align 8
  %192 = getelementptr i8, ptr %190, i64 16
  store ptr null, ptr %192, align 8
  %193 = call ptr @llvm.invariant.start.p0(i64 16, ptr %190)
  store ptr @Iterator, ptr %190, align 8
  %194 = load ptr, ptr %6, align 8
  %195 = load ptr, ptr %5, align 8
  %196 = call ptr @llvm.invariant.start.p0(i64 400, ptr %195)
  %197 = load i32, ptr %8, align 8
  %198 = sext i32 %197 to i64
  %199 = getelementptr ptr, ptr %195, i64 %198
  %200 = load ptr, ptr %199, align 8
  %201 = call ptr @typegetter_wrapper(ptr %200, ptr %194)
  %202 = call ptr @bump_malloc(i64 24)
  %203 = getelementptr i8, ptr %202, i64 8
  store ptr %201, ptr %203, align 8
  %204 = getelementptr i8, ptr %202, i64 16
  store ptr null, ptr %204, align 8
  %205 = call ptr @llvm.invariant.start.p0(i64 16, ptr %202)
  store ptr @Iterator, ptr %202, align 8
  %206 = alloca [2 x ptr], align 8
  store ptr %190, ptr %206, align 8
  %207 = getelementptr inbounds i8, ptr %206, i64 8
  store ptr %202, ptr %207, align 8
  %208 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %206)
  %209 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @ChainIterator)
  %210 = alloca { ptr, ptr }, align 8
  store ptr %155, ptr %210, align 8
  %211 = getelementptr inbounds i8, ptr %210, i64 8
  store ptr %171, ptr %211, align 8
  %212 = call ptr @behavior_wrapper(ptr nonnull @ChainIterator_B_init_firstIteratorT_secondIteratorT, { ptr, ptr, ptr, i32 } %181, ptr nonnull %210)
  call void %212({ ptr, ptr, ptr, i32 } %181, { ptr, ptr, ptr, i32 } %181, ptr nonnull %206, { ptr, ptr, ptr, i32 } %162, { ptr, ptr, ptr, i32 } %178) #25
  %213 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ChainIterator, ptr %213, align 8
  %214 = getelementptr inbounds i8, ptr %213, i64 8
  store ptr %83, ptr %214, align 8
  %215 = getelementptr inbounds i8, ptr %213, i64 16
  %216 = getelementptr inbounds i8, ptr %213, i64 24
  store i32 10, ptr %216, align 8
  call void @set_offset(ptr nonnull %213, ptr nonnull @Iterator)
  %217 = load ptr, ptr %213, align 8
  %218 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %217, 0
  %219 = load ptr, ptr %214, align 8
  %220 = insertvalue { ptr, ptr, ptr, i32 } %218, ptr %219, 1
  %221 = load ptr, ptr %215, align 8
  %222 = insertvalue { ptr, ptr, ptr, i32 } %220, ptr %221, 2
  %223 = load i32, ptr %216, align 8
  %224 = insertvalue { ptr, ptr, ptr, i32 } %222, i32 %223, 3
  ret { ptr, ptr, ptr, i32 } %224
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ChainIterator(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 80, i64 8 }
}

define ptr @ChainIterator_B_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 128
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ChainIterator_field_ChainIterator_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ChainIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ChainIterator_init_firstIteratorT_secondIteratorT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract9, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract10, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract11, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract12, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @ChainIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract2, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract3, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract4, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 88, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Iterator)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @Iterator)
  %52 = load ptr, ptr %7, align 8
  %53 = load ptr, ptr %6, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 88, ptr %53)
  %55 = load i32, ptr %9, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 16
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  %70 = load ptr, ptr %7, align 8
  %71 = load ptr, ptr %6, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 88, ptr %71)
  %73 = load i32, ptr %9, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 24
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr i8, ptr %77, i64 8
  %79 = load ptr, ptr %78, align 8
  call void %79(ptr %70, i1 true) #23
  ret void
}

define { ptr, i160 } @ChainIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract6, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @ChainIterator)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 88, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 24
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call i1 %19(ptr %11) #24
  %21 = call ptr @llvm.invariant.start.p0(i64 88, ptr %12)
  br i1 %20, label %43, label %22

22:                                               ; preds = %3
  %23 = getelementptr i8, ptr %16, i64 16
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, ptr, ptr, i32 } %25(ptr %11) #24
  %.fca.0.extract24 = extractvalue { ptr, ptr, ptr, i32 } %26, 0
  store ptr %.fca.0.extract24, ptr %5, align 8
  %.fca.1.extract26 = extractvalue { ptr, ptr, ptr, i32 } %26, 1
  %.fca.1.gep27 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract26, ptr %.fca.1.gep27, align 8
  %.fca.2.extract28 = extractvalue { ptr, ptr, ptr, i32 } %26, 2
  %.fca.2.gep29 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract28, ptr %.fca.2.gep29, align 8
  %.fca.3.extract30 = extractvalue { ptr, ptr, ptr, i32 } %26, 3
  %.fca.3.gep31 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract30, ptr %.fca.3.gep31, align 8
  call void @assume_offset(ptr nonnull %5, ptr nonnull @Iterator)
  %27 = load ptr, ptr %5, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = load ptr, ptr %.fca.1.gep27, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 1
  %31 = load ptr, ptr %.fca.2.gep29, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %.fca.3.gep31, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  %35 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %36 = call ptr @llvm.invariant.start.p0(i64 24, ptr %27)
  %37 = sext i32 %33 to i64
  %38 = getelementptr ptr, ptr %27, i64 %37
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  %41 = call ptr @behavior_wrapper(ptr %40, { ptr, ptr, ptr, i32 } %34, ptr nonnull %4)
  %42 = call { ptr, i160 } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %4) #25
  %.fca.0.extract18 = extractvalue { ptr, i160 } %42, 0
  br label %84

43:                                               ; preds = %3
  %44 = getelementptr i8, ptr %16, i64 8
  %45 = load ptr, ptr %44, align 8
  %46 = load ptr, ptr %45, align 8
  %47 = call { ptr, ptr, ptr, i32 } %46(ptr %11) #24
  %.fca.0.extract14 = extractvalue { ptr, ptr, ptr, i32 } %47, 0
  store ptr %.fca.0.extract14, ptr %6, align 8
  %.fca.1.extract15 = extractvalue { ptr, ptr, ptr, i32 } %47, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract15, ptr %.fca.1.gep, align 8
  %.fca.2.extract16 = extractvalue { ptr, ptr, ptr, i32 } %47, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract16, ptr %.fca.2.gep, align 8
  %.fca.3.extract17 = extractvalue { ptr, ptr, ptr, i32 } %47, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract17, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %6, ptr nonnull @Iterator)
  %48 = load ptr, ptr %6, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %48, 0
  %50 = load ptr, ptr %.fca.1.gep, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr %50, 1
  %52 = load ptr, ptr %.fca.2.gep, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr %52, 2
  %54 = load i32, ptr %.fca.3.gep, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 %54, 3
  %56 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %57 = call ptr @llvm.invariant.start.p0(i64 24, ptr %48)
  %58 = sext i32 %54 to i64
  %59 = getelementptr ptr, ptr %48, i64 %58
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = call ptr @behavior_wrapper(ptr %61, { ptr, ptr, ptr, i32 } %55, ptr nonnull %4)
  %63 = call { ptr, i160 } %62({ ptr, ptr, ptr, i32 } %55, { ptr, ptr, ptr, i32 } %55, ptr nonnull %4) #25
  %.fca.0.extract10 = extractvalue { ptr, i160 } %63, 0
  %64 = load ptr, ptr %8, align 8
  %65 = load ptr, ptr %7, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 88, ptr %65)
  %67 = load i32, ptr %10, align 8
  %68 = sext i32 %67 to i64
  %69 = getelementptr ptr, ptr %65, i64 %68
  %70 = load ptr, ptr %69, align 8
  %71 = call ptr @typegetter_wrapper(ptr %70, ptr %64)
  %72 = icmp eq ptr %.fca.0.extract10, @nil_typ
  %73 = icmp eq ptr %.fca.0.extract10, null
  %.not33.not = or i1 %72, %73
  br i1 %.not33.not, label %._crit_edge, label %84

._crit_edge:                                      ; preds = %._crit_edge, %43
  %74 = load ptr, ptr %8, align 8
  %75 = load ptr, ptr %7, align 8
  %76 = call ptr @llvm.invariant.start.p0(i64 88, ptr %75)
  %77 = load i32, ptr %10, align 8
  %78 = sext i32 %77 to i64
  %79 = getelementptr ptr, ptr %75, i64 %78
  %80 = getelementptr i8, ptr %79, i64 24
  %81 = load ptr, ptr %80, align 8
  %82 = getelementptr i8, ptr %81, i64 8
  %83 = load ptr, ptr %82, align 8
  call void %83(ptr %74, i1 false) #23
  br label %._crit_edge

84:                                               ; preds = %43, %22
  %.reg2mem29.sroa.0.0 = phi ptr [ %.fca.0.extract18, %22 ], [ %.fca.0.extract10, %43 ]
  %.pn = phi { ptr, i160 } [ %42, %22 ], [ %63, %43 ]
  %.reload30.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem29.sroa.0.0, 0
  %.reg2mem29.sroa.3.0 = extractvalue { ptr, i160 } %.pn, 1
  %.reload30.fca.1.insert = insertvalue { ptr, i160 } %.reload30.fca.0.insert, i160 %.reg2mem29.sroa.3.0, 1
  ret { ptr, i160 } %.reload30.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i1 @ChainIterator_getter_on_first(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator_setter_on_first(ptr nocapture writeonly %0, i1 %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 72
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterator_getter_second(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterator_getter_first(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterator_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterable_getter_second(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterable_setter_second(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ChainIterable_getter_first(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ChainIterable_setter_first(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FilterIterable(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 48, i64 8 }
}

define ptr @FilterIterable_B_init_iterableIterableT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 200
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @FilterIterable_field_FilterIterable_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @FilterIterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 224
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @FilterIterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 264
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @FilterIterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 272
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @FilterIterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 280
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @FilterIterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 288
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @FilterIterable_init_iterableIterableT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract5, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @FilterIterable)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterable)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterable)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 400, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 400, ptr %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %40, { ptr } %4) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @FilterIterable_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract35 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract37 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract39 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract41 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract35, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract37, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract39, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract41, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @FilterIterable)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 400, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract27, ptr %19, align 8
  %.fca.1.extract29 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep30 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract29, ptr %.fca.1.gep30, align 8
  %.fca.2.extract31 = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep32 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract31, ptr %.fca.2.gep32, align 8
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep34 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract33, ptr %.fca.3.gep34, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @Iterable)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep30, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep32, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep34, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 184, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr, ptr, ptr, i32 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract15 = extractvalue { ptr, ptr, ptr, i32 } %35, 0
  %.fca.1.extract17 = extractvalue { ptr, ptr, ptr, i32 } %35, 1
  %.fca.2.extract19 = extractvalue { ptr, ptr, ptr, i32 } %35, 2
  %.fca.3.extract21 = extractvalue { ptr, ptr, ptr, i32 } %35, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract15, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %.fca.1.extract17, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  store ptr %.fca.2.extract19, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 %.fca.3.extract21, ptr %39, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @Iterator)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 400, ptr %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call { ptr } %48(ptr %40) #24
  %50 = call ptr @llvm.invariant.start.p0(i64 400, ptr %41)
  %51 = load ptr, ptr %45, align 8
  %52 = call ptr @typegetter_wrapper(ptr %51, ptr %40)
  %53 = alloca [2 x ptr], align 8
  store ptr @FilterIterator, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %53, i64 8
  store ptr %52, ptr %54, align 8
  %55 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FilterIterator, ptr nonnull %53)
  %56 = extractvalue { i64, i64 } %55, 0
  %57 = call ptr @bump_malloc(i64 %56)
  store ptr %52, ptr %57, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %57)
  %59 = load ptr, ptr %6, align 8
  %60 = load ptr, ptr %5, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 400, ptr %60)
  %62 = load i32, ptr %8, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr ptr, ptr %60, i64 %63
  %65 = getelementptr i8, ptr %64, i64 8
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call { ptr, ptr, ptr, i32 } %67(ptr %59) #24
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %68, 0
  store ptr %.fca.0.extract2, ptr %69, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %68, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %69, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep, align 8
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %68, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %69, i64 16
  store ptr %.fca.2.extract4, ptr %.fca.2.gep, align 8
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %68, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %69, i64 24
  store i32 %.fca.3.extract5, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %69, ptr nonnull @Iterable)
  %70 = load ptr, ptr %69, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %.fca.1.gep, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %.fca.2.gep, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %.fca.3.gep, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %78 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %79 = call ptr @llvm.invariant.start.p0(i64 184, ptr %70)
  %80 = sext i32 %76 to i64
  %81 = getelementptr ptr, ptr %70, i64 %80
  %82 = getelementptr i8, ptr %81, i64 8
  %83 = load ptr, ptr %82, align 8
  %84 = call ptr @behavior_wrapper(ptr %83, { ptr, ptr, ptr, i32 } %77, ptr nonnull %4)
  %85 = call { ptr, ptr, ptr, i32 } %84({ ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %77, ptr nonnull %4) #25
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %85, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %85, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %85, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %85, 3
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %86, align 8
  %87 = getelementptr inbounds i8, ptr %86, i64 8
  store ptr %.fca.1.extract, ptr %87, align 8
  %88 = getelementptr inbounds i8, ptr %86, i64 16
  store ptr %.fca.2.extract, ptr %88, align 8
  %89 = getelementptr inbounds i8, ptr %86, i64 24
  store i32 %.fca.3.extract, ptr %89, align 8
  call void @set_offset(ptr nonnull %86, ptr nonnull @Iterator)
  %90 = load ptr, ptr %6, align 8
  %91 = load ptr, ptr %5, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 400, ptr %91)
  %93 = load i32, ptr %8, align 8
  %94 = sext i32 %93 to i64
  %95 = getelementptr ptr, ptr %91, i64 %94
  %96 = getelementptr i8, ptr %95, i64 16
  %97 = load ptr, ptr %96, align 8
  %98 = load ptr, ptr %97, align 8
  %99 = call { ptr } %98(ptr %90) #24
  %100 = alloca { ptr, ptr, ptr, i32 }, align 8
  %101 = load ptr, ptr %86, align 8
  store ptr %101, ptr %100, align 8
  %102 = getelementptr inbounds i8, ptr %100, i64 8
  %103 = load ptr, ptr %87, align 8
  store ptr %103, ptr %102, align 8
  %104 = getelementptr inbounds i8, ptr %100, i64 16
  %105 = load ptr, ptr %88, align 8
  store ptr %105, ptr %104, align 8
  %106 = getelementptr inbounds i8, ptr %100, i64 24
  %107 = load i32, ptr %89, align 8
  store i32 %107, ptr %106, align 8
  call void @set_offset(ptr nonnull %100, ptr nonnull @Iterator)
  %108 = load ptr, ptr %100, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = load ptr, ptr %102, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 1
  %112 = load ptr, ptr %104, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 2
  %114 = load i32, ptr %106, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %114, 3
  %116 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FilterIterator, ptr undef, ptr undef, i32 undef }, ptr %57, 1
  %117 = insertvalue { ptr, ptr, ptr, i32 } %116, ptr undef, 2
  %118 = insertvalue { ptr, ptr, ptr, i32 } %117, i32 10, 3
  %119 = load ptr, ptr %6, align 8
  %120 = load ptr, ptr %5, align 8
  %121 = call ptr @llvm.invariant.start.p0(i64 400, ptr %120)
  %122 = load i32, ptr %8, align 8
  %123 = sext i32 %122 to i64
  %124 = getelementptr ptr, ptr %120, i64 %123
  %125 = load ptr, ptr %124, align 8
  %126 = call ptr @typegetter_wrapper(ptr %125, ptr %119)
  %127 = call ptr @bump_malloc(i64 24)
  %128 = getelementptr i8, ptr %127, i64 8
  store ptr %126, ptr %128, align 8
  %129 = getelementptr i8, ptr %127, i64 16
  store ptr null, ptr %129, align 8
  %130 = call ptr @llvm.invariant.start.p0(i64 16, ptr %127)
  store ptr @Iterator, ptr %127, align 8
  %131 = load ptr, ptr %6, align 8
  %132 = load ptr, ptr %5, align 8
  %133 = call ptr @llvm.invariant.start.p0(i64 400, ptr %132)
  %134 = load i32, ptr %8, align 8
  %135 = sext i32 %134 to i64
  %136 = getelementptr ptr, ptr %132, i64 %135
  %137 = load ptr, ptr %136, align 8
  %138 = call ptr @typegetter_wrapper(ptr %137, ptr %131)
  %139 = call ptr @bump_malloc(i64 32)
  %140 = getelementptr i8, ptr %139, i64 16
  store ptr %138, ptr %140, align 8
  %141 = getelementptr i8, ptr %139, i64 8
  store ptr @_parameterization_i1, ptr %141, align 8
  %142 = getelementptr i8, ptr %139, i64 24
  store ptr null, ptr %142, align 8
  %143 = call ptr @llvm.invariant.start.p0(i64 24, ptr %139)
  store ptr @function_typ, ptr %139, align 8
  %144 = alloca [2 x ptr], align 8
  store ptr %127, ptr %144, align 8
  %145 = getelementptr inbounds i8, ptr %144, i64 8
  store ptr %139, ptr %145, align 8
  %146 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %144)
  %147 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @FilterIterator)
  %148 = alloca { ptr, ptr }, align 8
  store ptr %108, ptr %148, align 8
  %149 = getelementptr inbounds i8, ptr %148, i64 8
  store ptr @function_typ, ptr %149, align 8
  %150 = call ptr @behavior_wrapper(ptr nonnull @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_i1, { ptr, ptr, ptr, i32 } %118, ptr nonnull %148)
  call void %150({ ptr, ptr, ptr, i32 } %118, { ptr, ptr, ptr, i32 } %118, ptr nonnull %144, { ptr, ptr, ptr, i32 } %115, { ptr } %99) #25
  %151 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @FilterIterator, ptr %151, align 8
  %152 = getelementptr inbounds i8, ptr %151, i64 8
  store ptr %57, ptr %152, align 8
  %153 = getelementptr inbounds i8, ptr %151, i64 16
  %154 = getelementptr inbounds i8, ptr %151, i64 24
  store i32 10, ptr %154, align 8
  call void @set_offset(ptr nonnull %151, ptr nonnull @Iterator)
  %155 = load ptr, ptr %151, align 8
  %156 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %155, 0
  %157 = load ptr, ptr %152, align 8
  %158 = insertvalue { ptr, ptr, ptr, i32 } %156, ptr %157, 1
  %159 = load ptr, ptr %153, align 8
  %160 = insertvalue { ptr, ptr, ptr, i32 } %158, ptr %159, 2
  %161 = load i32, ptr %154, align 8
  %162 = insertvalue { ptr, ptr, ptr, i32 } %160, i32 %161, 3
  ret { ptr, ptr, ptr, i32 } %162
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FilterIterator(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 48, i64 8 }
}

define ptr @FilterIterator_B_init_iteratorIteratorT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 120
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @FilterIterator_field_FilterIterator_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FilterIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @FilterIterator_init_iteratorIteratorT_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract5, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @FilterIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 80, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 80, ptr %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %40, { ptr } %4) #23
  ret void
}

define { ptr, i160 } @FilterIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract20 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract14, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract16, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract18, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract20, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @FilterIterator)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 80, ptr %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = call { ptr, ptr, ptr, i32 } %18(ptr %10) #24
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %19, 0
  store ptr %.fca.0.extract1, ptr %20, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %19, 1
  %.fca.1.gep4 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep4, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %19, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %20, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %19, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %20, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %20, ptr nonnull @Iterator)
  %21 = load ptr, ptr %20, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = load ptr, ptr %.fca.1.gep4, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %23, 1
  %25 = load ptr, ptr %.fca.2.gep, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %25, 2
  %27 = load i32, ptr %.fca.3.gep, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %27, 3
  %29 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %30 = call ptr @llvm.invariant.start.p0(i64 24, ptr %21)
  %31 = sext i32 %27 to i64
  %32 = getelementptr ptr, ptr %21, i64 %31
  %33 = getelementptr i8, ptr %32, i64 8
  %34 = load ptr, ptr %33, align 8
  %35 = call ptr @behavior_wrapper(ptr %34, { ptr, ptr, ptr, i32 } %28, ptr nonnull %4)
  %36 = call { ptr, i160 } %35({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr, i160 } %36, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %36, 1
  %.fca.1.gep31 = getelementptr inbounds i8, ptr %5, i64 8
  %.fca.2.gep33 = getelementptr inbounds i8, ptr %5, i64 16
  %.fca.3.gep35 = getelementptr inbounds i8, ptr %5, i64 24
  br label %37

37:                                               ; preds = %90, %3
  %.sroa.3.0 = phi i160 [ %.fca.1.extract, %3 ], [ %.sroa.3.1, %90 ]
  %.sroa.0.0 = phi ptr [ %.fca.0.extract, %3 ], [ %.sroa.0.1, %90 ]
  %.0 = phi i160 [ undef, %3 ], [ %.1, %90 ]
  %38 = load ptr, ptr %7, align 8
  %39 = load ptr, ptr %6, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 80, ptr %39)
  %41 = load i32, ptr %9, align 8
  %42 = sext i32 %41 to i64
  %43 = getelementptr ptr, ptr %39, i64 %42
  %44 = load ptr, ptr %43, align 8
  %45 = call ptr @typegetter_wrapper(ptr %44, ptr %38)
  %46 = icmp ne ptr %.sroa.0.0, @nil_typ
  %47 = icmp ne ptr %.sroa.0.0, null
  %.not50 = and i1 %46, %47
  br i1 %.not50, label %48, label %90

48:                                               ; preds = %37
  %49 = insertvalue { ptr, i160 } undef, ptr %.sroa.0.0, 0
  %50 = insertvalue { ptr, i160 } %49, i160 %.sroa.3.0, 1
  %51 = load ptr, ptr %7, align 8
  %52 = load ptr, ptr %6, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 80, ptr %52)
  %54 = load i32, ptr %9, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr ptr, ptr %52, i64 %55
  %57 = getelementptr i8, ptr %56, i64 16
  %58 = load ptr, ptr %57, align 8
  %59 = load ptr, ptr %58, align 8
  %60 = call { ptr } %59(ptr %51) #24
  %.fca.0.extract37 = extractvalue { ptr } %60, 0
  %61 = call i1 %.fca.0.extract37({ ptr, i160 } %50)
  %62 = xor i1 %61, true
  br i1 %61, label %90, label %63

63:                                               ; preds = %48
  %64 = load ptr, ptr %7, align 8
  %65 = load ptr, ptr %6, align 8
  %66 = call ptr @llvm.invariant.start.p0(i64 80, ptr %65)
  %67 = load i32, ptr %9, align 8
  %68 = sext i32 %67 to i64
  %69 = getelementptr ptr, ptr %65, i64 %68
  %70 = getelementptr i8, ptr %69, i64 8
  %71 = load ptr, ptr %70, align 8
  %72 = load ptr, ptr %71, align 8
  %73 = call { ptr, ptr, ptr, i32 } %72(ptr %64) #24
  %.fca.0.extract28 = extractvalue { ptr, ptr, ptr, i32 } %73, 0
  store ptr %.fca.0.extract28, ptr %5, align 8
  %.fca.1.extract30 = extractvalue { ptr, ptr, ptr, i32 } %73, 1
  store ptr %.fca.1.extract30, ptr %.fca.1.gep31, align 8
  %.fca.2.extract32 = extractvalue { ptr, ptr, ptr, i32 } %73, 2
  store ptr %.fca.2.extract32, ptr %.fca.2.gep33, align 8
  %.fca.3.extract34 = extractvalue { ptr, ptr, ptr, i32 } %73, 3
  store i32 %.fca.3.extract34, ptr %.fca.3.gep35, align 8
  call void @assume_offset(ptr nonnull %5, ptr nonnull @Iterator)
  %74 = load ptr, ptr %5, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = load ptr, ptr %.fca.1.gep31, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %76, 1
  %78 = load ptr, ptr %.fca.2.gep33, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 2
  %80 = load i32, ptr %.fca.3.gep35, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, i32 %80, 3
  %82 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %83 = call ptr @llvm.invariant.start.p0(i64 24, ptr %74)
  %84 = sext i32 %80 to i64
  %85 = getelementptr ptr, ptr %74, i64 %84
  %86 = getelementptr i8, ptr %85, i64 8
  %87 = load ptr, ptr %86, align 8
  %88 = call ptr @behavior_wrapper(ptr %87, { ptr, ptr, ptr, i32 } %81, ptr nonnull %4)
  %89 = call { ptr, i160 } %88({ ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %81, ptr nonnull %4) #25
  %.fca.0.extract22 = extractvalue { ptr, i160 } %89, 0
  %.fca.1.extract24 = extractvalue { ptr, i160 } %89, 1
  br label %90

90:                                               ; preds = %63, %48, %37
  %.sroa.3.1 = phi i160 [ %.sroa.3.0, %48 ], [ %.fca.1.extract24, %63 ], [ %.sroa.3.0, %37 ]
  %.sroa.0.1 = phi ptr [ %.sroa.0.0, %48 ], [ %.fca.0.extract22, %63 ], [ %.sroa.0.0, %37 ]
  %.1 = phi i160 [ %.sroa.3.0, %48 ], [ %.sroa.3.0, %63 ], [ %.0, %37 ]
  %.reg2mem32.0.off0 = phi i1 [ %62, %48 ], [ %62, %63 ], [ false, %37 ]
  %.reg2mem34.0 = phi ptr [ %.sroa.0.0, %48 ], [ @nil_typ, %63 ], [ @nil_typ, %37 ]
  br i1 %.reg2mem32.0.off0, label %37, label %91

91:                                               ; preds = %90
  %.reload31.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem34.0, 0
  %.reload31.fca.1.insert = insertvalue { ptr, i160 } %.reload31.fca.0.insert, i160 %.1, 1
  ret { ptr, i160 } %.reload31.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @FilterIterator_getter_f(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterator_setter_f(ptr nocapture writeonly %0, { ptr } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FilterIterator_getter_iterator(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterator_setter_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @FilterIterable_getter_f(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterable_setter_f(ptr nocapture writeonly %0, { ptr } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FilterIterable_getter_iterable(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FilterIterable_setter_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_MapIterator(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 56, i64 8 }
}

define ptr @MapIterator_B_init_iteratorIteratorT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 8673632051301757104, i64 ptrtoint (ptr @Iterator to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 128
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterator_field_MapIterator_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @MapIterator_field_MapIterator_1(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  ret ptr %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @MapIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @MapIterator_init_iteratorIteratorT_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr } %4) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract5, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @MapIterator)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Iterator)
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %15 = load ptr, ptr %10, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %14, i64 8
  %17 = load ptr, ptr %11, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %14, i64 16
  %19 = load ptr, ptr %12, align 8
  store ptr %19, ptr %18, align 8
  %20 = getelementptr inbounds i8, ptr %14, i64 24
  %21 = load i32, ptr %13, align 8
  store i32 %21, ptr %20, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @Iterator)
  %22 = load ptr, ptr %7, align 8
  %23 = load ptr, ptr %6, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 88, ptr %23)
  %25 = load i32, ptr %9, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %14, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %16, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %18, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %20, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %22, { ptr, ptr, ptr, i32 } %39) #23
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 88, ptr %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 24
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %40, { ptr } %4) #23
  ret void
}

define { ptr, i160 } @MapIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract12, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract14, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract16, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract18, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @MapIterator)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 88, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 16
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract2, ptr %19, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @Iterator)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 24, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 8
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr, i160 } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr, i160 } %35, 0
  %36 = load ptr, ptr %6, align 8
  %37 = load ptr, ptr %5, align 8
  %38 = call ptr @llvm.invariant.start.p0(i64 88, ptr %37)
  %39 = load i32, ptr %8, align 8
  %40 = sext i32 %39 to i64
  %41 = getelementptr ptr, ptr %37, i64 %40
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @typegetter_wrapper(ptr %42, ptr %36)
  %44 = icmp ne ptr %.fca.0.extract, @nil_typ
  %45 = icmp ne ptr %.fca.0.extract, null
  %.not36 = and i1 %44, %45
  br i1 %.not36, label %46, label %58

46:                                               ; preds = %3
  %47 = load ptr, ptr %6, align 8
  %48 = load ptr, ptr %5, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 88, ptr %48)
  %50 = load i32, ptr %8, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr ptr, ptr %48, i64 %51
  %53 = getelementptr i8, ptr %52, i64 24
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = call { ptr } %55(ptr %47) #24
  %.fca.0.extract28 = extractvalue { ptr } %56, 0
  %57 = call { ptr, i160 } %.fca.0.extract28({ ptr, i160 } %35)
  %.fca.0.extract22 = extractvalue { ptr, i160 } %57, 0
  %.fca.1.extract24 = extractvalue { ptr, i160 } %57, 1
  br label %58

58:                                               ; preds = %46, %3
  %.reg2mem15.sroa.0.0 = phi ptr [ %.fca.0.extract22, %46 ], [ @nil_typ, %3 ]
  %.reg2mem15.sroa.3.0 = phi i160 [ %.fca.1.extract24, %46 ], [ undef, %3 ]
  %.reload16.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem15.sroa.0.0, 0
  %.reload16.fca.1.insert = insertvalue { ptr, i160 } %.reload16.fca.0.insert, i160 %.reg2mem15.sroa.3.0, 1
  ret { ptr, i160 } %.reload16.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @MapIterator_getter_f(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterator_setter_f(ptr nocapture writeonly %0, { ptr } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 48
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @MapIterator_getter_iterator(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 24
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 32
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 40
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterator_setter_iterator(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 16
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 40
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @MapIterable_getter_f(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 48
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterable_setter_f(ptr nocapture writeonly %0, { ptr } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 48
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @MapIterable_getter_iterable(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 24
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 32
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 40
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @MapIterable_setter_iterable(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 16
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 32
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 40
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Representable(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Representable_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 88
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define { ptr, ptr, ptr, i32 } @Representable_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Representable)
  %8 = call ptr @bump_malloc(i64 7)
  store <6 x i8> <i8 79, i8 98, i8 106, i8 101, i8 99, i8 116>, ptr %8, align 8
  %9 = alloca [1 x ptr], align 8
  store ptr @String, ptr %9, align 8
  %10 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %9)
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = call ptr @bump_malloc(i64 %11)
  %13 = insertvalue { ptr } undef, ptr %8, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %12, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr undef, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 10, 3
  %17 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr @_parameterization_i32, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %17, i64 16
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %17)
  %21 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %22 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr @i32_typ, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %22, i64 16
  store ptr @i32_typ, ptr %24, align 8
  %25 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %16, ptr nonnull %22)
  call void %25({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %17, { ptr } %13, i32 6, i32 7) #25
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr %12, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  %29 = getelementptr inbounds i8, ptr %26, i64 24
  store i32 10, ptr %29, align 8
  call void @set_offset(ptr nonnull %26, ptr nonnull @String)
  %30 = load ptr, ptr %26, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %27, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %28, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %29, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_String(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 16, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_init_bytesBufferi8_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 312
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef nonnull ptr @String_field_String_0(ptr nocapture readnone %0) #6 {
  ret ptr @_parameterization_Character
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 304
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_length_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 320
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 328
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_bytes_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 336
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_append_xi8({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 344
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @String_B_extend_strString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 352
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B__index_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 360
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @String_B__EQ_otherString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 368
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_pop_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 376
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_copy_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 384
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_c_string_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 392
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 400
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 408
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @String_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 416
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 424
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 432
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 440
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 448
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @String_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 456
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @String_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 464
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @String_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 472
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @String_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 480
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @String_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 488
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @String_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = call ptr @bump_malloc(i64 1)
  %9 = load ptr, ptr %5, align 8
  %10 = load ptr, ptr %4, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 616, ptr %10)
  %12 = load i32, ptr %7, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = insertvalue { ptr } undef, ptr %8, 0
  call void %17(ptr %9, { ptr } %18) #23
  %19 = load ptr, ptr %5, align 8
  %20 = load ptr, ptr %4, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 616, ptr %20)
  %22 = load i32, ptr %7, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = getelementptr i8, ptr %24, i64 16
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  call void %28(ptr %19, i32 1) #23
  %29 = load ptr, ptr %5, align 8
  %30 = load ptr, ptr %4, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 616, ptr %30)
  %32 = load i32, ptr %7, align 8
  %33 = sext i32 %32 to i64
  %34 = getelementptr ptr, ptr %30, i64 %33
  %35 = getelementptr i8, ptr %34, i64 8
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr i8, ptr %36, i64 8
  %38 = load ptr, ptr %37, align 8
  call void %38(ptr %29, i32 0) #23
  ret void
}

define void @String_init_bytesBufferi8_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3, i32 %4, i32 %5) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @String)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 616, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  call void %19(ptr %11, { ptr } %3) #23
  %20 = load ptr, ptr %8, align 8
  %21 = load ptr, ptr %7, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr %21)
  %23 = load i32, ptr %10, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr ptr, ptr %21, i64 %24
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %20, i32 %4) #23
  %30 = load ptr, ptr %8, align 8
  %31 = load ptr, ptr %7, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 616, ptr %31)
  %33 = load i32, ptr %10, align 8
  %34 = sext i32 %33 to i64
  %35 = getelementptr ptr, ptr %31, i64 %34
  %36 = getelementptr i8, ptr %35, i64 16
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  call void %39(ptr %30, i32 %5) #23
  ret void
}

define i32 @String_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 616, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #24
  ret i32 %17
}

define i32 @String_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 616, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 16
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #24
  ret i32 %17
}

define { ptr } @String_bytes_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 616, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call { ptr } %15(ptr %8) #24
  ret { ptr } %16
}

define { ptr, ptr, ptr, i32 } @String_append_xi8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i8 %3) {
  %.sroa.029 = alloca ptr, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.sroa.0 = alloca ptr, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr %.fca.1.extract, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr %.fca.2.extract, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %15, i64 24
  store i32 %.fca.3.extract, ptr %18, align 8
  call void @set_offset(ptr nonnull %15, ptr nonnull @String)
  %19 = load ptr, ptr %16, align 8
  %20 = load ptr, ptr %15, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 616, ptr %20)
  %22 = load i32, ptr %18, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = getelementptr i8, ptr %24, i64 8
  %26 = load ptr, ptr %25, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %19) #24
  %29 = call ptr @llvm.invariant.start.p0(i64 616, ptr %20)
  %30 = getelementptr i8, ptr %24, i64 16
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call i32 %32(ptr %19) #24
  %34 = icmp slt i32 %28, %33
  %.sroa.gep = getelementptr inbounds i8, ptr %14, i64 8
  %.sroa.gep22 = getelementptr inbounds i8, ptr %9, i64 8
  %.sroa.gep24 = getelementptr inbounds i8, ptr %14, i64 16
  %.sroa.gep25 = getelementptr inbounds i8, ptr %9, i64 16
  %.sroa.gep27 = getelementptr inbounds i8, ptr %14, i64 24
  %.sroa.gep28 = getelementptr inbounds i8, ptr %9, i64 24
  br i1 %34, label %.loopexit, label %35

35:                                               ; preds = %4
  %36 = call ptr @llvm.invariant.start.p0(i64 616, ptr %20)
  %37 = call i32 %32(ptr %19) #24
  %38 = shl i32 %37, 1
  %39 = call ptr @llvm.invariant.start.p0(i64 616, ptr %20)
  %40 = getelementptr i8, ptr %31, i64 8
  %41 = load ptr, ptr %40, align 8
  call void %41(ptr %19, i32 %38) #23
  %42 = load ptr, ptr %16, align 8
  %43 = load ptr, ptr %15, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 616, ptr %43)
  %45 = load i32, ptr %18, align 8
  %46 = sext i32 %45 to i64
  %47 = getelementptr ptr, ptr %43, i64 %46
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %48, align 8
  %50 = call { ptr } %49(ptr %42) #24
  %.fca.0.extract17 = extractvalue { ptr } %50, 0
  %51 = call ptr @llvm.invariant.start.p0(i64 616, ptr %43)
  %52 = getelementptr i8, ptr %47, i64 16
  %53 = load ptr, ptr %52, align 8
  %54 = load ptr, ptr %53, align 8
  %55 = call i32 %54(ptr %42) #24
  %56 = sext i32 %55 to i64
  %57 = call ptr @bump_malloc(i64 %56)
  %58 = load ptr, ptr %16, align 8
  %59 = load ptr, ptr %15, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 616, ptr %59)
  %61 = load i32, ptr %18, align 8
  %62 = sext i32 %61 to i64
  %63 = getelementptr ptr, ptr %59, i64 %62
  %64 = load ptr, ptr %63, align 8
  %65 = getelementptr i8, ptr %64, i64 8
  %66 = load ptr, ptr %65, align 8
  %67 = insertvalue { ptr } undef, ptr %57, 0
  call void %66(ptr %58, { ptr } %67) #23
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %35
  %.0 = phi i32 [ 0, %35 ], [ %.1, %._crit_edge ]
  %68 = load ptr, ptr %16, align 8
  %69 = load ptr, ptr %15, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 616, ptr %69)
  %71 = load i32, ptr %18, align 8
  %72 = sext i32 %71 to i64
  %73 = getelementptr ptr, ptr %69, i64 %72
  %74 = getelementptr i8, ptr %73, i64 8
  %75 = load ptr, ptr %74, align 8
  %76 = load ptr, ptr %75, align 8
  %77 = call i32 %76(ptr %68) #24
  %78 = icmp slt i32 %.0, %77
  br i1 %78, label %79, label %._crit_edge

79:                                               ; preds = %._crit_edge1
  %80 = sext i32 %.0 to i64
  %81 = getelementptr i8, ptr %.fca.0.extract17, i64 %80
  %82 = load i8, ptr %81, align 1
  %83 = call ptr @llvm.invariant.start.p0(i64 616, ptr %69)
  %84 = load ptr, ptr %73, align 8
  %85 = load ptr, ptr %84, align 8
  %86 = call { ptr } %85(ptr %68) #24
  %.fca.0.extract5 = extractvalue { ptr } %86, 0
  %87 = getelementptr i8, ptr %.fca.0.extract5, i64 %80
  store i8 %82, ptr %87, align 1
  %88 = add nsw i32 %.0, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %79, %._crit_edge1
  %.1 = phi i32 [ %88, %79 ], [ %.0, %._crit_edge1 ]
  br i1 %78, label %._crit_edge1, label %.loopexit

.loopexit:                                        ; preds = %._crit_edge, %4
  %.sroa.phi = phi ptr [ %.sroa.gep22, %4 ], [ %.sroa.gep, %._crit_edge ]
  %.sroa.phi23 = phi ptr [ %.sroa.gep25, %4 ], [ %.sroa.gep24, %._crit_edge ]
  %.sroa.phi26 = phi ptr [ %.sroa.gep28, %4 ], [ %.sroa.gep27, %._crit_edge ]
  %89 = phi ptr [ %9, %4 ], [ %14, %._crit_edge ]
  %90 = phi ptr [ %8, %4 ], [ %13, %._crit_edge ]
  %91 = phi ptr [ %7, %4 ], [ %12, %._crit_edge ]
  %92 = phi ptr [ %6, %4 ], [ %11, %._crit_edge ]
  %93 = phi ptr [ %5, %4 ], [ %10, %._crit_edge ]
  %94 = phi ptr [ %.sroa.029, %4 ], [ %.sroa.0, %._crit_edge ]
  %95 = load ptr, ptr %16, align 8
  %96 = load ptr, ptr %15, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 616, ptr %96)
  %98 = load i32, ptr %18, align 8
  %99 = sext i32 %98 to i64
  %100 = getelementptr ptr, ptr %96, i64 %99
  %101 = load ptr, ptr %100, align 8
  %102 = load ptr, ptr %101, align 8
  %103 = call { ptr } %102(ptr %95) #24
  %104 = extractvalue { ptr } %103, 0
  store ptr %104, ptr %94, align 8
  %105 = call ptr @llvm.invariant.start.p0(i64 616, ptr %96)
  %106 = getelementptr i8, ptr %100, i64 8
  %107 = load ptr, ptr %106, align 8
  %108 = load ptr, ptr %107, align 8
  %109 = call i32 %108(ptr %95) #24
  store i32 %109, ptr %93, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr i8, ptr %104, i64 %110
  store i8 %3, ptr %111, align 1
  %112 = load ptr, ptr %16, align 8
  %113 = load ptr, ptr %15, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 616, ptr %113)
  %115 = load i32, ptr %18, align 8
  %116 = sext i32 %115 to i64
  %117 = getelementptr ptr, ptr %113, i64 %116
  %118 = getelementptr i8, ptr %117, i64 8
  %119 = load ptr, ptr %118, align 8
  %120 = load ptr, ptr %119, align 8
  %121 = call i32 %120(ptr %112) #24
  store i32 %121, ptr %92, align 4
  store i32 1, ptr %91, align 4
  %122 = add i32 %121, 1
  store i32 %122, ptr %90, align 4
  %123 = call ptr @llvm.invariant.start.p0(i64 616, ptr %113)
  %124 = getelementptr i8, ptr %119, i64 8
  %125 = load ptr, ptr %124, align 8
  call void %125(ptr %112, i32 %122) #23
  %126 = load ptr, ptr %15, align 8
  store ptr %126, ptr %89, align 8
  %127 = load ptr, ptr %16, align 8
  store ptr %127, ptr %.sroa.phi, align 8
  %128 = load ptr, ptr %17, align 8
  store ptr %128, ptr %.sroa.phi23, align 8
  %129 = load i32, ptr %18, align 8
  store i32 %129, ptr %.sroa.phi26, align 4
  call void @set_offset(ptr nonnull %89, ptr nonnull @String)
  %130 = load ptr, ptr %89, align 8
  %131 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %130, 0
  %132 = load ptr, ptr %.sroa.phi, align 8
  %133 = insertvalue { ptr, ptr, ptr, i32 } %131, ptr %132, 1
  %134 = load ptr, ptr %.sroa.phi23, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } %133, ptr %134, 2
  %136 = load i32, ptr %.sroa.phi26, align 4
  %137 = insertvalue { ptr, ptr, ptr, i32 } %135, i32 %136, 3
  ret { ptr, ptr, ptr, i32 } %137
}

define { ptr, ptr, ptr, i32 } @String_extend_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract15 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract12, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr %.fca.1.extract13, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr %.fca.2.extract14, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %12, i64 24
  store i32 %.fca.3.extract15, ptr %15, align 8
  call void @set_offset(ptr nonnull %12, ptr nonnull @String)
  %.fca.0.extract11 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %16 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract11, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %16, i64 8
  store ptr %.fca.1.extract, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %16, i64 16
  store ptr %.fca.2.extract, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %16, i64 24
  store i32 %.fca.3.extract, ptr %19, align 8
  call void @set_offset(ptr nonnull %16, ptr nonnull @String)
  %20 = load ptr, ptr %16, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %17, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %18, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %19, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %29 = call ptr @llvm.invariant.start.p0(i64 616, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 64
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %5)
  %35 = call { ptr } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %5) #25
  %.fca.0.extract = extractvalue { ptr } %35, 0
  %36 = load ptr, ptr %16, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %38 = load ptr, ptr %17, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 1
  %40 = load ptr, ptr %18, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 2
  %42 = load i32, ptr %19, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %42, 3
  %44 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %45 = call ptr @llvm.invariant.start.p0(i64 616, ptr %36)
  %46 = sext i32 %42 to i64
  %47 = getelementptr ptr, ptr %36, i64 %46
  %48 = getelementptr i8, ptr %47, i64 48
  %49 = load ptr, ptr %48, align 8
  %50 = call ptr @behavior_wrapper(ptr %49, { ptr, ptr, ptr, i32 } %43, ptr nonnull %5)
  %51 = call i32 %50({ ptr, ptr, ptr, i32 } %43, { ptr, ptr, ptr, i32 } %43, ptr nonnull %5) #25
  %52 = load ptr, ptr %13, align 8
  %53 = load ptr, ptr %12, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 616, ptr %53)
  %55 = load i32, ptr %15, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 8
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %59, align 8
  %61 = call i32 %60(ptr %52) #24
  %62 = add i32 %61, %51
  %63 = call ptr @llvm.invariant.start.p0(i64 616, ptr %53)
  %64 = getelementptr i8, ptr %57, i64 16
  %65 = load ptr, ptr %64, align 8
  %66 = load ptr, ptr %65, align 8
  %67 = call i32 %66(ptr %52) #24
  %68 = icmp slt i32 %62, %67
  %.sroa.gep = getelementptr inbounds i8, ptr %11, i64 8
  %.sroa.gep74 = getelementptr inbounds i8, ptr %8, i64 8
  %.sroa.gep76 = getelementptr inbounds i8, ptr %11, i64 16
  %.sroa.gep77 = getelementptr inbounds i8, ptr %8, i64 16
  %.sroa.gep79 = getelementptr inbounds i8, ptr %11, i64 24
  %.sroa.gep80 = getelementptr inbounds i8, ptr %8, i64 24
  %69 = call ptr @llvm.invariant.start.p0(i64 616, ptr %53)
  %70 = call i32 %60(ptr %52) #24
  br i1 %68, label %._crit_edge1, label %95

._crit_edge1:                                     ; preds = %._crit_edge, %4
  %.068 = phi i32 [ %.169, %._crit_edge ], [ 0, %4 ]
  %.0 = phi i32 [ %.1, %._crit_edge ], [ %70, %4 ]
  %71 = load ptr, ptr %13, align 8
  %72 = load ptr, ptr %12, align 8
  %73 = call ptr @llvm.invariant.start.p0(i64 616, ptr %72)
  %74 = load i32, ptr %15, align 8
  %75 = sext i32 %74 to i64
  %76 = getelementptr ptr, ptr %72, i64 %75
  %77 = getelementptr i8, ptr %76, i64 8
  %78 = load ptr, ptr %77, align 8
  %79 = load ptr, ptr %78, align 8
  %80 = call i32 %79(ptr %71) #24
  %81 = add i32 %80, %51
  %82 = icmp slt i32 %.0, %81
  br i1 %82, label %83, label %._crit_edge

83:                                               ; preds = %._crit_edge1
  %84 = sext i32 %.068 to i64
  %85 = getelementptr i8, ptr %.fca.0.extract, i64 %84
  %86 = load i8, ptr %85, align 1
  %87 = call ptr @llvm.invariant.start.p0(i64 616, ptr %72)
  %88 = load ptr, ptr %76, align 8
  %89 = load ptr, ptr %88, align 8
  %90 = call { ptr } %89(ptr %71) #24
  %.fca.0.extract57 = extractvalue { ptr } %90, 0
  %91 = sext i32 %.0 to i64
  %92 = getelementptr i8, ptr %.fca.0.extract57, i64 %91
  store i8 %86, ptr %92, align 1
  %93 = add nsw i32 %.0, 1
  %94 = add i32 %.068, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %83, %._crit_edge1
  %.169 = phi i32 [ %94, %83 ], [ %.068, %._crit_edge1 ]
  %.1 = phi i32 [ %93, %83 ], [ %.0, %._crit_edge1 ]
  br i1 %82, label %._crit_edge1, label %.loopexit

95:                                               ; preds = %4
  %96 = add i32 %70, %51
  %97 = call ptr @llvm.invariant.start.p0(i64 616, ptr %53)
  %98 = getelementptr i8, ptr %65, i64 8
  %99 = load ptr, ptr %98, align 8
  call void %99(ptr %52, i32 %96) #23
  %100 = load ptr, ptr %13, align 8
  %101 = load ptr, ptr %12, align 8
  %102 = call ptr @llvm.invariant.start.p0(i64 616, ptr %101)
  %103 = load i32, ptr %15, align 8
  %104 = sext i32 %103 to i64
  %105 = getelementptr ptr, ptr %101, i64 %104
  %106 = load ptr, ptr %105, align 8
  %107 = load ptr, ptr %106, align 8
  %108 = call { ptr } %107(ptr %100) #24
  %.fca.0.extract49 = extractvalue { ptr } %108, 0
  %109 = call ptr @llvm.invariant.start.p0(i64 616, ptr %101)
  %110 = getelementptr i8, ptr %105, i64 16
  %111 = load ptr, ptr %110, align 8
  %112 = load ptr, ptr %111, align 8
  %113 = call i32 %112(ptr %100) #24
  %114 = sext i32 %113 to i64
  %115 = call ptr @bump_malloc(i64 %114)
  %116 = load ptr, ptr %13, align 8
  %117 = load ptr, ptr %12, align 8
  %118 = call ptr @llvm.invariant.start.p0(i64 616, ptr %117)
  %119 = load i32, ptr %15, align 8
  %120 = sext i32 %119 to i64
  %121 = getelementptr ptr, ptr %117, i64 %120
  %122 = load ptr, ptr %121, align 8
  %123 = getelementptr i8, ptr %122, i64 8
  %124 = load ptr, ptr %123, align 8
  %125 = insertvalue { ptr } undef, ptr %115, 0
  call void %124(ptr %116, { ptr } %125) #23
  br label %._crit_edge3

._crit_edge3:                                     ; preds = %._crit_edge2, %95
  %.072 = phi i32 [ 0, %95 ], [ %.173, %._crit_edge2 ]
  %.070 = phi i32 [ 0, %95 ], [ %.171, %._crit_edge2 ]
  %126 = load ptr, ptr %13, align 8
  %127 = load ptr, ptr %12, align 8
  %128 = call ptr @llvm.invariant.start.p0(i64 616, ptr %127)
  %129 = load i32, ptr %15, align 8
  %130 = sext i32 %129 to i64
  %131 = getelementptr ptr, ptr %127, i64 %130
  %132 = getelementptr i8, ptr %131, i64 8
  %133 = load ptr, ptr %132, align 8
  %134 = load ptr, ptr %133, align 8
  %135 = call i32 %134(ptr %126) #24
  %136 = add i32 %135, %51
  %137 = icmp slt i32 %.070, %136
  br i1 %137, label %138, label %._crit_edge2

138:                                              ; preds = %._crit_edge3
  %139 = call ptr @llvm.invariant.start.p0(i64 616, ptr %127)
  %140 = call i32 %134(ptr %126) #24
  %141 = icmp slt i32 %.070, %140
  br i1 %141, label %142, label %152

142:                                              ; preds = %138
  %143 = sext i32 %.070 to i64
  %144 = getelementptr i8, ptr %.fca.0.extract49, i64 %143
  %145 = load i8, ptr %144, align 1
  %146 = call ptr @llvm.invariant.start.p0(i64 616, ptr %127)
  %147 = load ptr, ptr %131, align 8
  %148 = load ptr, ptr %147, align 8
  %149 = call { ptr } %148(ptr %126) #24
  %.fca.0.extract29 = extractvalue { ptr } %149, 0
  %150 = getelementptr i8, ptr %.fca.0.extract29, i64 %143
  store i8 %145, ptr %150, align 1
  %151 = add nsw i32 %.070, 1
  br label %._crit_edge2

152:                                              ; preds = %138
  %153 = sext i32 %.072 to i64
  %154 = getelementptr i8, ptr %.fca.0.extract, i64 %153
  %155 = load i8, ptr %154, align 1
  %156 = call ptr @llvm.invariant.start.p0(i64 616, ptr %127)
  %157 = load ptr, ptr %131, align 8
  %158 = load ptr, ptr %157, align 8
  %159 = call { ptr } %158(ptr %126) #24
  %.fca.0.extract24 = extractvalue { ptr } %159, 0
  %160 = sext i32 %.070 to i64
  %161 = getelementptr i8, ptr %.fca.0.extract24, i64 %160
  store i8 %155, ptr %161, align 1
  %162 = add nsw i32 %.070, 1
  %163 = add i32 %.072, 1
  br label %._crit_edge2

._crit_edge2:                                     ; preds = %152, %142, %._crit_edge3
  %.173 = phi i32 [ %.072, %142 ], [ %163, %152 ], [ %.072, %._crit_edge3 ]
  %.171 = phi i32 [ %151, %142 ], [ %162, %152 ], [ %.070, %._crit_edge3 ]
  br i1 %137, label %._crit_edge3, label %.loopexit

.loopexit:                                        ; preds = %._crit_edge2, %._crit_edge
  %.sroa.phi = phi ptr [ %.sroa.gep74, %._crit_edge ], [ %.sroa.gep, %._crit_edge2 ]
  %.sroa.phi75 = phi ptr [ %.sroa.gep77, %._crit_edge ], [ %.sroa.gep76, %._crit_edge2 ]
  %.sroa.phi78 = phi ptr [ %.sroa.gep80, %._crit_edge ], [ %.sroa.gep79, %._crit_edge2 ]
  %164 = phi ptr [ %8, %._crit_edge ], [ %11, %._crit_edge2 ]
  %165 = phi ptr [ %7, %._crit_edge ], [ %10, %._crit_edge2 ]
  %166 = phi ptr [ %6, %._crit_edge ], [ %9, %._crit_edge2 ]
  %167 = load ptr, ptr %13, align 8
  %168 = load ptr, ptr %12, align 8
  %169 = call ptr @llvm.invariant.start.p0(i64 616, ptr %168)
  %170 = load i32, ptr %15, align 8
  %171 = sext i32 %170 to i64
  %172 = getelementptr ptr, ptr %168, i64 %171
  %173 = getelementptr i8, ptr %172, i64 8
  %174 = load ptr, ptr %173, align 8
  %175 = load ptr, ptr %174, align 8
  %176 = call i32 %175(ptr %167) #24
  store i32 %176, ptr %166, align 4
  %177 = add i32 %176, %51
  store i32 %177, ptr %165, align 4
  %178 = call ptr @llvm.invariant.start.p0(i64 616, ptr %168)
  %179 = getelementptr i8, ptr %174, i64 8
  %180 = load ptr, ptr %179, align 8
  call void %180(ptr %167, i32 %177) #23
  %181 = load ptr, ptr %12, align 8
  store ptr %181, ptr %164, align 8
  %182 = load ptr, ptr %13, align 8
  store ptr %182, ptr %.sroa.phi, align 8
  %183 = load ptr, ptr %14, align 8
  store ptr %183, ptr %.sroa.phi75, align 8
  %184 = load i32, ptr %15, align 8
  store i32 %184, ptr %.sroa.phi78, align 4
  call void @set_offset(ptr nonnull %164, ptr nonnull @String)
  %185 = load ptr, ptr %164, align 8
  %186 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %185, 0
  %187 = load ptr, ptr %.sroa.phi, align 8
  %188 = insertvalue { ptr, ptr, ptr, i32 } %186, ptr %187, 1
  %189 = load ptr, ptr %.sroa.phi75, align 8
  %190 = insertvalue { ptr, ptr, ptr, i32 } %188, ptr %189, 2
  %191 = load i32, ptr %.sroa.phi78, align 4
  %192 = insertvalue { ptr, ptr, ptr, i32 } %190, i32 %191, 3
  ret { ptr, ptr, ptr, i32 } %192
}

define i8 @String__index_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @String)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 616, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call i32 %17(ptr %9) #24
  %19 = add i32 %18, -1
  %20 = icmp sgt i32 %3, %19
  br i1 %20, label %21, label %._crit_edge

21:                                               ; preds = %4
  %22 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %22)
  br label %._crit_edge

._crit_edge:                                      ; preds = %21, %4
  %23 = icmp sgt i32 %3, -1
  %24 = load ptr, ptr %6, align 8
  %25 = load ptr, ptr %5, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 616, ptr %25)
  %27 = load i32, ptr %8, align 8
  %28 = sext i32 %27 to i64
  %29 = getelementptr ptr, ptr %25, i64 %28
  br i1 %23, label %30, label %36

30:                                               ; preds = %._crit_edge
  %31 = load ptr, ptr %29, align 8
  %32 = load ptr, ptr %31, align 8
  %33 = call { ptr } %32(ptr %24) #24
  %.fca.0.extract18 = extractvalue { ptr } %33, 0
  %34 = zext nneg i32 %3 to i64
  %35 = getelementptr i8, ptr %.fca.0.extract18, i64 %34
  br label %62

36:                                               ; preds = %._crit_edge
  %37 = getelementptr i8, ptr %29, i64 8
  %38 = load ptr, ptr %37, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = call i32 %39(ptr %24) #24
  %41 = add i32 %40, %3
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %43, label %._crit_edge1

43:                                               ; preds = %36
  %44 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %44)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %43, %36
  %45 = load ptr, ptr %6, align 8
  %46 = load ptr, ptr %5, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 616, ptr %46)
  %48 = load i32, ptr %8, align 8
  %49 = sext i32 %48 to i64
  %50 = getelementptr ptr, ptr %46, i64 %49
  %51 = load ptr, ptr %50, align 8
  %52 = load ptr, ptr %51, align 8
  %53 = call { ptr } %52(ptr %45) #24
  %.fca.0.extract11 = extractvalue { ptr } %53, 0
  %54 = call ptr @llvm.invariant.start.p0(i64 616, ptr %46)
  %55 = getelementptr i8, ptr %50, i64 8
  %56 = load ptr, ptr %55, align 8
  %57 = load ptr, ptr %56, align 8
  %58 = call i32 %57(ptr %45) #24
  %59 = add i32 %58, %3
  %60 = sext i32 %59 to i64
  %61 = getelementptr i8, ptr %.fca.0.extract11, i64 %60
  br label %62

62:                                               ; preds = %._crit_edge1, %30
  %.reg2mem20.0.in = phi ptr [ %35, %30 ], [ %61, %._crit_edge1 ]
  %.reg2mem20.0 = load i8, ptr %.reg2mem20.0.in, align 1
  ret i8 %.reg2mem20.0
}

define noundef i1 @String__EQ_otherString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca i1, align 1
  %7 = alloca i1, align 1
  %8 = alloca i1, align 1
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract3, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract4, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract5, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr %.fca.1.extract, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr %.fca.2.extract, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %13, i64 24
  store i32 %.fca.3.extract, ptr %16, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @String)
  %17 = load ptr, ptr %10, align 8
  %18 = load ptr, ptr %9, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 616, ptr %18)
  %20 = load i32, ptr %12, align 8
  %21 = sext i32 %20 to i64
  %22 = getelementptr ptr, ptr %18, i64 %21
  %23 = getelementptr i8, ptr %22, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %17) #24
  %27 = load ptr, ptr %13, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = load ptr, ptr %14, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 1
  %31 = load ptr, ptr %15, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %16, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  %35 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %36 = call ptr @llvm.invariant.start.p0(i64 616, ptr %27)
  %37 = sext i32 %33 to i64
  %38 = getelementptr ptr, ptr %27, i64 %37
  %39 = getelementptr i8, ptr %38, i64 48
  %40 = load ptr, ptr %39, align 8
  %41 = call ptr @behavior_wrapper(ptr %40, { ptr, ptr, ptr, i32 } %34, ptr nonnull %5)
  %42 = call i32 %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %5) #25
  %.not = icmp eq i32 %26, %42
  br i1 %.not, label %.preheader, label %83

.preheader:                                       ; preds = %81, %4
  %.0 = phi i32 [ %.2, %81 ], [ 0, %4 ]
  %43 = load ptr, ptr %10, align 8
  %44 = load ptr, ptr %9, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 616, ptr %44)
  %46 = load i32, ptr %12, align 8
  %47 = sext i32 %46 to i64
  %48 = getelementptr ptr, ptr %44, i64 %47
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 %51(ptr %43) #24
  %53 = icmp sge i32 %.0, %52
  br i1 %53, label %81, label %54

54:                                               ; preds = %.preheader
  %55 = call ptr @llvm.invariant.start.p0(i64 616, ptr %44)
  %56 = load ptr, ptr %48, align 8
  %57 = load ptr, ptr %56, align 8
  %58 = call { ptr } %57(ptr %43) #24
  %.fca.0.extract17 = extractvalue { ptr } %58, 0
  %59 = sext i32 %.0 to i64
  %60 = getelementptr i8, ptr %.fca.0.extract17, i64 %59
  %61 = load i8, ptr %60, align 1
  %62 = load ptr, ptr %13, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %14, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %15, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %16, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  %70 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %71 = call ptr @llvm.invariant.start.p0(i64 616, ptr %62)
  %72 = sext i32 %68 to i64
  %73 = getelementptr ptr, ptr %62, i64 %72
  %74 = getelementptr i8, ptr %73, i64 64
  %75 = load ptr, ptr %74, align 8
  %76 = call ptr @behavior_wrapper(ptr %75, { ptr, ptr, ptr, i32 } %69, ptr nonnull %5)
  %77 = call { ptr } %76({ ptr, ptr, ptr, i32 } %69, { ptr, ptr, ptr, i32 } %69, ptr nonnull %5) #25
  %.fca.0.extract14 = extractvalue { ptr } %77, 0
  %78 = getelementptr i8, ptr %.fca.0.extract14, i64 %59
  %79 = load i8, ptr %78, align 1
  %.not25 = icmp eq i8 %61, %79
  %80 = zext i1 %.not25 to i32
  %spec.select = add i32 %.0, %80
  br label %81

81:                                               ; preds = %54, %.preheader
  %.reg2mem44.0.off0 = phi i1 [ %.not25, %54 ], [ false, %.preheader ]
  %.2 = phi i32 [ %spec.select, %54 ], [ %.0, %.preheader ]
  br i1 %.reg2mem44.0.off0, label %.preheader, label %.loopexit

.loopexit:                                        ; preds = %81
  %82 = select i1 %53, ptr %8, ptr %7
  br label %83

83:                                               ; preds = %.loopexit, %4
  %.reg2mem42.0 = phi i1 [ false, %4 ], [ %53, %.loopexit ]
  %.reg2mem40.0 = phi ptr [ %6, %4 ], [ %82, %.loopexit ]
  store i1 %.reg2mem42.0, ptr %.reg2mem40.0, align 1
  ret i1 %.reg2mem42.0
}

define { ptr, i8 } @String_pop_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract4, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract5, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 616, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #24
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %43, label %19

19:                                               ; preds = %3
  %20 = call ptr @llvm.invariant.start.p0(i64 616, ptr %9)
  %21 = call i32 %16(ptr %8) #24
  %22 = add i32 %21, -1
  %23 = call ptr @llvm.invariant.start.p0(i64 616, ptr %9)
  %24 = getelementptr i8, ptr %15, i64 8
  %25 = load ptr, ptr %24, align 8
  call void %25(ptr %8, i32 %22) #23
  %26 = load ptr, ptr %5, align 8
  %27 = load ptr, ptr %4, align 8
  %28 = call ptr @llvm.invariant.start.p0(i64 616, ptr %27)
  %29 = load i32, ptr %7, align 8
  %30 = sext i32 %29 to i64
  %31 = getelementptr ptr, ptr %27, i64 %30
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call { ptr } %33(ptr %26) #24
  %.fca.0.extract10 = extractvalue { ptr } %34, 0
  %35 = call ptr @llvm.invariant.start.p0(i64 616, ptr %27)
  %36 = getelementptr i8, ptr %31, i64 8
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 %38(ptr %26) #24
  %40 = sext i32 %39 to i64
  %41 = getelementptr i8, ptr %.fca.0.extract10, i64 %40
  %42 = load i8, ptr %41, align 1
  br label %43

43:                                               ; preds = %19, %3
  %.reg2mem19.sroa.0.0 = phi ptr [ @i8_typ, %19 ], [ @nil_typ, %3 ]
  %.reg2mem19.sroa.3.0 = phi i8 [ %42, %19 ], [ undef, %3 ]
  %.reload20.fca.0.insert = insertvalue { ptr, i8 } poison, ptr %.reg2mem19.sroa.0.0, 0
  %.reload20.fca.1.insert = insertvalue { ptr, i8 } %.reload20.fca.0.insert, i8 %.reg2mem19.sroa.3.0, 1
  ret { ptr, i8 } %.reload20.fca.1.insert
}

define { ptr, ptr, ptr, i32 } @String_copy_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [1 x ptr], align 8
  %5 = alloca [3 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %13 = load ptr, ptr %10, align 8
  %14 = load ptr, ptr %9, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 616, ptr %14)
  %16 = load i32, ptr %12, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = call i32 %21(ptr %13) #24
  %23 = sext i32 %22 to i64
  %24 = call ptr @bump_malloc(i64 %23)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %3
  %.0 = phi i32 [ 0, %3 ], [ %.1, %._crit_edge ]
  %25 = load ptr, ptr %10, align 8
  %26 = load ptr, ptr %9, align 8
  %27 = call ptr @llvm.invariant.start.p0(i64 616, ptr %26)
  %28 = load i32, ptr %12, align 8
  %29 = sext i32 %28 to i64
  %30 = getelementptr ptr, ptr %26, i64 %29
  %31 = getelementptr i8, ptr %30, i64 8
  %32 = load ptr, ptr %31, align 8
  %33 = load ptr, ptr %32, align 8
  %34 = call i32 %33(ptr %25) #24
  %35 = icmp slt i32 %.0, %34
  br i1 %35, label %36, label %._crit_edge

36:                                               ; preds = %._crit_edge1
  %37 = call ptr @llvm.invariant.start.p0(i64 616, ptr %26)
  %38 = load ptr, ptr %30, align 8
  %39 = load ptr, ptr %38, align 8
  %40 = call { ptr } %39(ptr %25) #24
  %.fca.0.extract24 = extractvalue { ptr } %40, 0
  %41 = sext i32 %.0 to i64
  %42 = getelementptr i8, ptr %.fca.0.extract24, i64 %41
  %43 = load i8, ptr %42, align 1
  %44 = getelementptr i8, ptr %24, i64 %41
  store i8 %43, ptr %44, align 1
  %45 = add nsw i32 %.0, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %36, %._crit_edge1
  %.1 = phi i32 [ %45, %36 ], [ %.0, %._crit_edge1 ]
  br i1 %35, label %._crit_edge1, label %46

46:                                               ; preds = %._crit_edge
  %47 = load ptr, ptr %10, align 8
  %48 = load ptr, ptr %9, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 616, ptr %48)
  %50 = load i32, ptr %12, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr ptr, ptr %48, i64 %51
  %53 = getelementptr i8, ptr %52, i64 8
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = call i32 %55(ptr %47) #24
  %57 = call ptr @llvm.invariant.start.p0(i64 616, ptr %48)
  %58 = call i32 %55(ptr %47) #24
  store ptr @String, ptr %4, align 8
  %59 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %4)
  %60 = extractvalue { i64, i64 } %59, 0
  %61 = call ptr @bump_malloc(i64 %60)
  %62 = load ptr, ptr %10, align 8
  %63 = load ptr, ptr %9, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 616, ptr %63)
  %65 = load i32, ptr %12, align 8
  %66 = sext i32 %65 to i64
  %67 = getelementptr ptr, ptr %63, i64 %66
  %68 = getelementptr i8, ptr %67, i64 8
  %69 = load ptr, ptr %68, align 8
  %70 = load ptr, ptr %69, align 8
  %71 = call i32 %70(ptr %62) #24
  %72 = call ptr @llvm.invariant.start.p0(i64 616, ptr %63)
  %73 = call i32 %70(ptr %62) #24
  %74 = insertvalue { ptr } undef, ptr %24, 0
  %75 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %61, 1
  %76 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr undef, 2
  %77 = insertvalue { ptr, ptr, ptr, i32 } %76, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %5, align 8
  %78 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr @_parameterization_i32, ptr %78, align 8
  %79 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr @_parameterization_i32, ptr %79, align 8
  %80 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %5)
  %81 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %6, align 8
  %82 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr @i32_typ, ptr %82, align 8
  %83 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr @i32_typ, ptr %83, align 8
  %84 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %77, ptr nonnull %6)
  call void %84({ ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %77, ptr nonnull %5, { ptr } %74, i32 %71, i32 %73) #25
  store ptr @String, ptr %7, align 8
  %85 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %61, ptr %85, align 8
  %86 = getelementptr inbounds i8, ptr %7, i64 16
  %87 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 10, ptr %87, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @String)
  %88 = load ptr, ptr %7, align 8
  %89 = load ptr, ptr %85, align 8
  %90 = load ptr, ptr %86, align 8
  %91 = load i32, ptr %87, align 8
  store ptr %88, ptr %8, align 8
  %92 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %89, ptr %92, align 8
  %93 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %90, ptr %93, align 8
  %94 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %91, ptr %94, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @String)
  %95 = load ptr, ptr %8, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = load ptr, ptr %92, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 1
  %99 = load ptr, ptr %93, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 2
  %101 = load i32, ptr %94, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %101, 3
  ret { ptr, ptr, ptr, i32 } %102
}

define { ptr } @String_c_string_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 616, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #24
  %18 = add i32 %17, 1
  %19 = sext i32 %18 to i64
  %20 = call ptr @bump_malloc(i64 %19)
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %3
  %.0 = phi i32 [ 0, %3 ], [ %.1, %._crit_edge ]
  %21 = load ptr, ptr %5, align 8
  %22 = load ptr, ptr %4, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 616, ptr %22)
  %24 = load i32, ptr %7, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %21) #24
  %31 = icmp slt i32 %.0, %30
  br i1 %31, label %32, label %._crit_edge

32:                                               ; preds = %._crit_edge1
  %33 = call ptr @llvm.invariant.start.p0(i64 616, ptr %22)
  %34 = load ptr, ptr %26, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = call { ptr } %35(ptr %21) #24
  %.fca.0.extract15 = extractvalue { ptr } %36, 0
  %37 = sext i32 %.0 to i64
  %38 = getelementptr i8, ptr %.fca.0.extract15, i64 %37
  %39 = load i8, ptr %38, align 1
  %40 = getelementptr i8, ptr %20, i64 %37
  store i8 %39, ptr %40, align 1
  %41 = add nsw i32 %.0, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %32, %._crit_edge1
  %.1 = phi i32 [ %41, %32 ], [ %.0, %._crit_edge1 ]
  br i1 %31, label %._crit_edge1, label %42

42:                                               ; preds = %._crit_edge
  %43 = load ptr, ptr %5, align 8
  %44 = load ptr, ptr %4, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 616, ptr %44)
  %46 = load i32, ptr %7, align 8
  %47 = sext i32 %46 to i64
  %48 = getelementptr ptr, ptr %44, i64 %47
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 %51(ptr %43) #24
  %53 = sext i32 %52 to i64
  %54 = getelementptr i8, ptr %20, i64 %53
  store i8 0, ptr %54, align 1
  %55 = insertvalue { ptr } undef, ptr %20, 0
  ret { ptr } %55
}

define { ptr, ptr, ptr, i32 } @String_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = alloca [1 x ptr], align 8
  store ptr @StringIterator, ptr %8, align 8
  %9 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_StringIterator, ptr nonnull %8)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = call ptr @bump_malloc(i64 %10)
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %13 = load ptr, ptr %4, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr inbounds i8, ptr %12, i64 8
  %15 = load ptr, ptr %5, align 8
  store ptr %15, ptr %14, align 8
  %16 = getelementptr inbounds i8, ptr %12, i64 16
  %17 = load ptr, ptr %6, align 8
  store ptr %17, ptr %16, align 8
  %18 = getelementptr inbounds i8, ptr %12, i64 24
  %19 = load i32, ptr %7, align 8
  store i32 %19, ptr %18, align 8
  call void @set_offset(ptr nonnull %12, ptr nonnull @String)
  %20 = load ptr, ptr %12, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %14, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %16, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %18, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = insertvalue { ptr, ptr, ptr, i32 } { ptr @StringIterator, ptr undef, ptr undef, i32 undef }, ptr %11, 1
  %29 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr undef, 2
  %30 = insertvalue { ptr, ptr, ptr, i32 } %29, i32 10, 3
  %31 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %31)
  %33 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @StringIterator)
  %34 = alloca { ptr }, align 8
  store ptr %20, ptr %34, align 8
  %35 = call ptr @behavior_wrapper(ptr nonnull @StringIterator_B_init_strString, { ptr, ptr, ptr, i32 } %30, ptr nonnull %34)
  call void %35({ ptr, ptr, ptr, i32 } %30, { ptr, ptr, ptr, i32 } %30, ptr nonnull %31, { ptr, ptr, ptr, i32 } %27) #25
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @StringIterator, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %36, i64 8
  store ptr %11, ptr %37, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 16
  %39 = getelementptr inbounds i8, ptr %36, i64 24
  store i32 10, ptr %39, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @Iterator)
  %40 = load ptr, ptr %36, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %40, 0
  %42 = load ptr, ptr %37, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, ptr %42, 1
  %44 = load ptr, ptr %38, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %44, 2
  %46 = load i32, ptr %39, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, i32 %46, 3
  ret { ptr, ptr, ptr, i32 } %47
}

define { ptr, ptr, ptr, i32 } @String_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %9 = load ptr, ptr %4, align 8
  store ptr %9, ptr %8, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 8
  %11 = load ptr, ptr %5, align 8
  store ptr %11, ptr %10, align 8
  %12 = getelementptr inbounds i8, ptr %8, i64 16
  %13 = load ptr, ptr %6, align 8
  store ptr %13, ptr %12, align 8
  %14 = getelementptr inbounds i8, ptr %8, i64 24
  %15 = load i32, ptr %7, align 8
  store i32 %15, ptr %14, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @String)
  %16 = load ptr, ptr %8, align 8
  %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %16, 0
  %18 = load ptr, ptr %10, align 8
  %19 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %18, 1
  %20 = load ptr, ptr %12, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } %19, ptr %20, 2
  %22 = load i32, ptr %14, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 %22, 3
  ret { ptr, ptr, ptr, i32 } %23
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_StringIterator(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 40, i64 8 }
}

define ptr @StringIterator_B_init_strString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 120
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef nonnull ptr @StringIterator_field_StringIterator_0(ptr nocapture readnone %0) #6 {
  ret ptr @_parameterization_Character
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @StringIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @StringIterator_init_strString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract4, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @StringIterator)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = load ptr, ptr %9, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 8
  %16 = load ptr, ptr %10, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %13, i64 16
  %18 = load ptr, ptr %11, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %13, i64 24
  %20 = load i32, ptr %12, align 8
  store i32 %20, ptr %19, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @String)
  %21 = load ptr, ptr %6, align 8
  %22 = load ptr, ptr %5, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 80, ptr %22)
  %24 = load i32, ptr %8, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %13, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %15, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %17, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %19, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  call void %29(ptr %21, { ptr, ptr, ptr, i32 } %37) #23
  %38 = load ptr, ptr %6, align 8
  %39 = load ptr, ptr %5, align 8
  %40 = call ptr @llvm.invariant.start.p0(i64 80, ptr %39)
  %41 = load i32, ptr %8, align 8
  %42 = sext i32 %41 to i64
  %43 = getelementptr ptr, ptr %39, i64 %42
  %44 = getelementptr i8, ptr %43, i64 8
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  call void %47(ptr %38, i32 0) #23
  ret void
}

define { ptr, i160 } @StringIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract10, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract12, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract14, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract16, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @StringIterator)
  %14 = load ptr, ptr %11, align 8
  %15 = load ptr, ptr %10, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 80, ptr %15)
  %17 = load i32, ptr %13, align 8
  %18 = sext i32 %17 to i64
  %19 = getelementptr ptr, ptr %15, i64 %18
  %20 = getelementptr i8, ptr %19, i64 8
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = call i32 %22(ptr %14) #24
  %24 = call ptr @llvm.invariant.start.p0(i64 80, ptr %15)
  %25 = load ptr, ptr %19, align 8
  %26 = load ptr, ptr %25, align 8
  %27 = call { ptr, ptr, ptr, i32 } %26(ptr %14) #24
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 0
  store ptr %.fca.0.extract, ptr %28, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %28, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %28, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %27, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %28, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %28, ptr nonnull @String)
  %29 = load ptr, ptr %28, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %29, 0
  %31 = load ptr, ptr %.fca.1.gep, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 1
  %33 = load ptr, ptr %.fca.2.gep, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 2
  %35 = load i32, ptr %.fca.3.gep, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %35, 3
  %37 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %38 = call ptr @llvm.invariant.start.p0(i64 616, ptr %29)
  %39 = sext i32 %35 to i64
  %40 = getelementptr ptr, ptr %29, i64 %39
  %41 = getelementptr i8, ptr %40, i64 48
  %42 = load ptr, ptr %41, align 8
  %43 = call ptr @behavior_wrapper(ptr %42, { ptr, ptr, ptr, i32 } %36, ptr nonnull %4)
  %44 = call i32 %43({ ptr, ptr, ptr, i32 } %36, { ptr, ptr, ptr, i32 } %36, ptr nonnull %4) #25
  %45 = icmp slt i32 %23, %44
  br i1 %45, label %46, label %145

46:                                               ; preds = %3
  %47 = load ptr, ptr %11, align 8
  %48 = load ptr, ptr %10, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 80, ptr %48)
  %50 = load i32, ptr %13, align 8
  %51 = sext i32 %50 to i64
  %52 = getelementptr ptr, ptr %48, i64 %51
  %53 = getelementptr i8, ptr %52, i64 8
  %54 = load ptr, ptr %53, align 8
  %55 = load ptr, ptr %54, align 8
  %56 = call i32 %55(ptr %47) #24
  %57 = add i32 %56, 1
  %58 = call ptr @llvm.invariant.start.p0(i64 80, ptr %48)
  %59 = getelementptr i8, ptr %54, i64 8
  %60 = load ptr, ptr %59, align 8
  call void %60(ptr %47, i32 %57) #23
  %61 = load ptr, ptr %11, align 8
  %62 = load ptr, ptr %10, align 8
  %63 = call ptr @llvm.invariant.start.p0(i64 80, ptr %62)
  %64 = load i32, ptr %13, align 8
  %65 = sext i32 %64 to i64
  %66 = getelementptr ptr, ptr %62, i64 %65
  %67 = load ptr, ptr %66, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = call { ptr, ptr, ptr, i32 } %68(ptr %61) #24
  %.fca.0.extract45 = extractvalue { ptr, ptr, ptr, i32 } %69, 0
  store ptr %.fca.0.extract45, ptr %5, align 8
  %.fca.1.extract47 = extractvalue { ptr, ptr, ptr, i32 } %69, 1
  %.fca.1.gep48 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract47, ptr %.fca.1.gep48, align 8
  %.fca.2.extract49 = extractvalue { ptr, ptr, ptr, i32 } %69, 2
  %.fca.2.gep50 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract49, ptr %.fca.2.gep50, align 8
  %.fca.3.extract51 = extractvalue { ptr, ptr, ptr, i32 } %69, 3
  %.fca.3.gep52 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract51, ptr %.fca.3.gep52, align 8
  call void @assume_offset(ptr nonnull %5, ptr nonnull @String)
  %70 = load ptr, ptr %5, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %.fca.1.gep48, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %.fca.2.gep50, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %.fca.3.gep52, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %78 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %79 = call ptr @llvm.invariant.start.p0(i64 616, ptr %70)
  %80 = sext i32 %76 to i64
  %81 = getelementptr ptr, ptr %70, i64 %80
  %82 = getelementptr i8, ptr %81, i64 64
  %83 = load ptr, ptr %82, align 8
  %84 = call ptr @behavior_wrapper(ptr %83, { ptr, ptr, ptr, i32 } %77, ptr nonnull %4)
  %85 = call { ptr } %84({ ptr, ptr, ptr, i32 } %77, { ptr, ptr, ptr, i32 } %77, ptr nonnull %4) #25
  %86 = load ptr, ptr %11, align 8
  %87 = load ptr, ptr %10, align 8
  %88 = call ptr @llvm.invariant.start.p0(i64 80, ptr %87)
  %89 = load i32, ptr %13, align 8
  %90 = sext i32 %89 to i64
  %91 = getelementptr ptr, ptr %87, i64 %90
  %92 = getelementptr i8, ptr %91, i64 8
  %93 = load ptr, ptr %92, align 8
  %94 = load ptr, ptr %93, align 8
  %95 = call i32 %94(ptr %86) #24
  store ptr @Character, ptr %6, align 8
  %96 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Character, ptr nonnull %6)
  %97 = extractvalue { i64, i64 } %96, 0
  %98 = call ptr @bump_malloc(i64 %97)
  %99 = load ptr, ptr %11, align 8
  %100 = load ptr, ptr %10, align 8
  %101 = call ptr @llvm.invariant.start.p0(i64 80, ptr %100)
  %102 = load i32, ptr %13, align 8
  %103 = sext i32 %102 to i64
  %104 = getelementptr ptr, ptr %100, i64 %103
  %105 = load ptr, ptr %104, align 8
  %106 = load ptr, ptr %105, align 8
  %107 = call { ptr, ptr, ptr, i32 } %106(ptr %99) #24
  %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %107, 0
  store ptr %.fca.0.extract27, ptr %7, align 8
  %.fca.1.extract29 = extractvalue { ptr, ptr, ptr, i32 } %107, 1
  %.fca.1.gep30 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract29, ptr %.fca.1.gep30, align 8
  %.fca.2.extract31 = extractvalue { ptr, ptr, ptr, i32 } %107, 2
  %.fca.2.gep32 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract31, ptr %.fca.2.gep32, align 8
  %.fca.3.extract33 = extractvalue { ptr, ptr, ptr, i32 } %107, 3
  %.fca.3.gep34 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract33, ptr %.fca.3.gep34, align 8
  call void @assume_offset(ptr nonnull %7, ptr nonnull @String)
  %108 = load ptr, ptr %7, align 8
  %109 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %108, 0
  %110 = load ptr, ptr %.fca.1.gep30, align 8
  %111 = insertvalue { ptr, ptr, ptr, i32 } %109, ptr %110, 1
  %112 = load ptr, ptr %.fca.2.gep32, align 8
  %113 = insertvalue { ptr, ptr, ptr, i32 } %111, ptr %112, 2
  %114 = load i32, ptr %.fca.3.gep34, align 8
  %115 = insertvalue { ptr, ptr, ptr, i32 } %113, i32 %114, 3
  %116 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %117 = call ptr @llvm.invariant.start.p0(i64 616, ptr %108)
  %118 = sext i32 %114 to i64
  %119 = getelementptr ptr, ptr %108, i64 %118
  %120 = getelementptr i8, ptr %119, i64 64
  %121 = load ptr, ptr %120, align 8
  %122 = call ptr @behavior_wrapper(ptr %121, { ptr, ptr, ptr, i32 } %115, ptr nonnull %4)
  %123 = call { ptr } %122({ ptr, ptr, ptr, i32 } %115, { ptr, ptr, ptr, i32 } %115, ptr nonnull %4) #25
  %.fca.0.extract24 = extractvalue { ptr } %123, 0
  %124 = load ptr, ptr %11, align 8
  %125 = load ptr, ptr %10, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 80, ptr %125)
  %127 = load i32, ptr %13, align 8
  %128 = sext i32 %127 to i64
  %129 = getelementptr ptr, ptr %125, i64 %128
  %130 = getelementptr i8, ptr %129, i64 8
  %131 = load ptr, ptr %130, align 8
  %132 = load ptr, ptr %131, align 8
  %133 = call i32 %132(ptr %124) #24
  %134 = add i32 %133, -1
  %135 = sext i32 %134 to i64
  %136 = getelementptr i8, ptr %.fca.0.extract24, i64 %135
  %137 = load i8, ptr %136, align 1
  %138 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Character, ptr undef, ptr undef, i32 undef }, ptr %98, 1
  %139 = insertvalue { ptr, ptr, ptr, i32 } %138, ptr undef, 2
  %140 = insertvalue { ptr, ptr, ptr, i32 } %139, i32 10, 3
  store ptr @_parameterization_i8, ptr %8, align 8
  %141 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %8)
  %142 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @Character)
  store ptr @i8_typ, ptr %9, align 8
  %143 = call ptr @behavior_wrapper(ptr nonnull @Character_B_init_bytei8, { ptr, ptr, ptr, i32 } %140, ptr nonnull %9)
  call void %143({ ptr, ptr, ptr, i32 } %140, { ptr, ptr, ptr, i32 } %140, ptr nonnull %8, i8 %137) #25
  %144 = ptrtoint ptr %98 to i64
  %.sroa.3.8.insert.ext = zext i64 %144 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  br label %145

145:                                              ; preds = %46, %3
  %.reg2mem25.sroa.0.0 = phi ptr [ @Character, %46 ], [ @nil_typ, %3 ]
  %.reg2mem25.sroa.3.0 = phi i160 [ %.sroa.3.8.insert.insert, %46 ], [ undef, %3 ]
  %.reload26.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem25.sroa.0.0, 0
  %.reload26.fca.1.insert = insertvalue { ptr, i160 } %.reload26.fca.0.insert, i160 %.reg2mem25.sroa.3.0, 1
  ret { ptr, i160 } %.reload26.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Character(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Character_B_init_bytei8({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 112
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Character_B_byte_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define i8 @Character_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Character)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 40, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i8 %15(ptr %8) #24
  ret i8 %16
}

define void @Character_init_bytei8({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i8 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Character)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 40, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  call void %17(ptr %9, i8 %3) #23
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i8 @Character_getter_byte(ptr nocapture readonly %0) #1 {
  %2 = load i8, ptr %0, align 1
  ret i8 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Character_setter_byte(ptr nocapture writeonly %0, i8 %1) #9 {
  store i8 %1, ptr %0, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @StringIterator_getter_index(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 32
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @StringIterator_setter_index(ptr nocapture writeonly %0, i32 %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 32
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @StringIterator_getter_str(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
  %4 = getelementptr i8, ptr %0, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
  %7 = getelementptr i8, ptr %0, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
  %10 = getelementptr i8, ptr %0, i64 24
  %11 = load i32, ptr %10, align 4
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
  ret { ptr, ptr, ptr, i32 } %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @StringIterator_setter_str(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %0, align 8
  %3 = getelementptr i8, ptr %0, i64 8
  store ptr %.fca.1.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.2.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store i32 %.fca.3.extract, ptr %5, align 4
  ret void
}

define ptr @get_current_coroutine() {
  %current_coroutine = load ptr, ptr @current_coroutine, align 8
  ret ptr %current_coroutine
}

define void @coroutine_yield(ptr %current_coroutine) {
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly %into_callee_buf, ptr @into_caller_buf) #28
  ret void
}

; Function Attrs: noinline nounwind memory(readwrite)
define preserve_nonecc void @context_switch(ptr nocapture writeonly %from_buf, ptr %to_buf) #12 {
  %from_buf_first_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 0
  %from_buf_second_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 1
  %from_buf_third_word = getelementptr [3 x ptr], ptr %from_buf, i32 0, i32 2
  store ptr blockaddress(@context_switch, %return_from_switch), ptr %from_buf_second_word, align 8
  %sp = call ptr @llvm.stacksave.p0() #29
  store ptr %sp, ptr %from_buf_first_word, align 8
  store ptr %sp, ptr %from_buf_third_word, align 8
  %is_first_time = call i1 @returns_one()
  br i1 %is_first_time, label %do_switch, label %return_from_switch

do_switch:                                        ; preds = %0
  call void @llvm.eh.sjlj.longjmp(ptr %to_buf) #14
  unreachable

return_from_switch:                               ; preds = %0
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #13

define i1 @returns_one() {
  %retval = load i1, ptr @always_one, align 1
  ret i1 %retval
}

; Function Attrs: noreturn nounwind
declare void @llvm.eh.sjlj.longjmp(ptr) #14

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @String_getter_capacity(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 12
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_capacity(ptr nocapture writeonly %0, i32 %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 12
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @String_getter_length(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_length(ptr nocapture writeonly %0, i32 %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @String_getter_bytes(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr } undef, ptr %2, 0
  ret { ptr } %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @String_setter_bytes(ptr nocapture writeonly %0, { ptr } %1) #9 {
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %0, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Exception(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 72, i64 8 }
}

define ptr @Exception_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 144
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Exception_B_set_info_line_numberi32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr i8, ptr %1, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr i8, ptr %5, i64 8
  %7 = getelementptr i8, ptr %5, i64 16
  %8 = getelementptr i8, ptr %5, i64 24
  %9 = getelementptr i8, ptr %5, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 160
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_report_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Exception_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Exception_init_messageString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract15 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract13, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract14, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract15, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract16, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Exception)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = load ptr, ptr %9, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 8
  %16 = load ptr, ptr %10, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %13, i64 16
  %18 = load ptr, ptr %11, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %13, i64 24
  %20 = load i32, ptr %12, align 8
  store i32 %20, ptr %19, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @String)
  %21 = load ptr, ptr %6, align 8
  %22 = load ptr, ptr %5, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 104, ptr %22)
  %24 = load i32, ptr %8, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 16
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %13, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = load ptr, ptr %15, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = load ptr, ptr %17, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 2
  %37 = load i32, ptr %19, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %37, 3
  call void %30(ptr %21, { ptr, ptr, ptr, i32 } %38) #23
  %39 = load ptr, ptr %6, align 8
  %40 = load ptr, ptr %5, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 104, ptr %40)
  %42 = load i32, ptr %8, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr ptr, ptr %40, i64 %43
  %45 = load ptr, ptr %44, align 8
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  call void %47(ptr %39, i32 0) #23
  %48 = call ptr @bump_malloc(i64 1)
  %49 = alloca [1 x ptr], align 8
  store ptr @String, ptr %49, align 8
  %50 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %49)
  %51 = extractvalue { i64, i64 } %50, 0
  %52 = call ptr @bump_malloc(i64 %51)
  %53 = insertvalue { ptr } undef, ptr %48, 0
  %54 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %52, 1
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr undef, 2
  %56 = insertvalue { ptr, ptr, ptr, i32 } %55, i32 10, 3
  %57 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %57, align 8
  %58 = getelementptr inbounds i8, ptr %57, i64 8
  store ptr @_parameterization_i32, ptr %58, align 8
  %59 = getelementptr inbounds i8, ptr %57, i64 16
  store ptr @_parameterization_i32, ptr %59, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %57)
  %61 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %62 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %62, i64 8
  store ptr @i32_typ, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %62, i64 16
  store ptr @i32_typ, ptr %64, align 8
  %65 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %56, ptr nonnull %62)
  call void %65({ ptr, ptr, ptr, i32 } %56, { ptr, ptr, ptr, i32 } %56, ptr nonnull %57, { ptr } %53, i32 0, i32 1) #25
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %66, align 8
  %67 = getelementptr inbounds i8, ptr %66, i64 8
  store ptr %52, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %66, i64 16
  %69 = getelementptr inbounds i8, ptr %66, i64 24
  store i32 10, ptr %69, align 8
  call void @set_offset(ptr nonnull %66, ptr nonnull @String)
  %70 = load ptr, ptr %6, align 8
  %71 = load ptr, ptr %5, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 104, ptr %71)
  %73 = load i32, ptr %8, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 8
  %77 = load ptr, ptr %76, align 8
  %78 = getelementptr i8, ptr %77, i64 8
  %79 = load ptr, ptr %78, align 8
  %80 = load ptr, ptr %66, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %80, 0
  %82 = load ptr, ptr %67, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 1
  %84 = load ptr, ptr %68, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 2
  %86 = load i32, ptr %69, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %86, 3
  call void %79(ptr %70, { ptr, ptr, ptr, i32 } %87) #23
  ret void
}

define void @Exception_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Exception)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 104, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  call void %16(ptr %8, i32 0) #23
  %17 = call ptr @bump_malloc(i64 7)
  store <6 x i8> <i8 60, i8 78, i8 111, i8 110, i8 101, i8 62>, ptr %17, align 8
  %18 = alloca [1 x ptr], align 8
  store ptr @String, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %18)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = insertvalue { ptr } undef, ptr %17, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr undef, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 10, 3
  %26 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr @_parameterization_i32, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr @_parameterization_i32, ptr %28, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %26)
  %30 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %31 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %31, align 8
  %32 = getelementptr inbounds i8, ptr %31, i64 8
  store ptr @i32_typ, ptr %32, align 8
  %33 = getelementptr inbounds i8, ptr %31, i64 16
  store ptr @i32_typ, ptr %33, align 8
  %34 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %25, ptr nonnull %31)
  call void %34({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %26, { ptr } %22, i32 6, i32 7) #25
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %35, align 8
  %36 = getelementptr inbounds i8, ptr %35, i64 8
  store ptr %21, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %35, i64 16
  %38 = getelementptr inbounds i8, ptr %35, i64 24
  store i32 10, ptr %38, align 8
  call void @set_offset(ptr nonnull %35, ptr nonnull @String)
  %39 = load ptr, ptr %5, align 8
  %40 = load ptr, ptr %4, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 104, ptr %40)
  %42 = load i32, ptr %7, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr ptr, ptr %40, i64 %43
  %45 = getelementptr i8, ptr %44, i64 16
  %46 = load ptr, ptr %45, align 8
  %47 = getelementptr i8, ptr %46, i64 8
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %35, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %49, 0
  %51 = load ptr, ptr %36, align 8
  %52 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr %51, 1
  %53 = load ptr, ptr %37, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr %53, 2
  %55 = load i32, ptr %38, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, i32 %55, 3
  call void %48(ptr %39, { ptr, ptr, ptr, i32 } %56) #23
  %57 = call ptr @bump_malloc(i64 1)
  %58 = alloca [1 x ptr], align 8
  store ptr @String, ptr %58, align 8
  %59 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %58)
  %60 = extractvalue { i64, i64 } %59, 0
  %61 = call ptr @bump_malloc(i64 %60)
  %62 = insertvalue { ptr } undef, ptr %57, 0
  %63 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %61, 1
  %64 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr undef, 2
  %65 = insertvalue { ptr, ptr, ptr, i32 } %64, i32 10, 3
  %66 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %66, align 8
  %67 = getelementptr inbounds i8, ptr %66, i64 8
  store ptr @_parameterization_i32, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %66, i64 16
  store ptr @_parameterization_i32, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %66)
  %70 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %71 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %71, align 8
  %72 = getelementptr inbounds i8, ptr %71, i64 8
  store ptr @i32_typ, ptr %72, align 8
  %73 = getelementptr inbounds i8, ptr %71, i64 16
  store ptr @i32_typ, ptr %73, align 8
  %74 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %65, ptr nonnull %71)
  call void %74({ ptr, ptr, ptr, i32 } %65, { ptr, ptr, ptr, i32 } %65, ptr nonnull %66, { ptr } %62, i32 0, i32 1) #25
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %75, align 8
  %76 = getelementptr inbounds i8, ptr %75, i64 8
  store ptr %61, ptr %76, align 8
  %77 = getelementptr inbounds i8, ptr %75, i64 16
  %78 = getelementptr inbounds i8, ptr %75, i64 24
  store i32 10, ptr %78, align 8
  call void @set_offset(ptr nonnull %75, ptr nonnull @String)
  %79 = load ptr, ptr %5, align 8
  %80 = load ptr, ptr %4, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 104, ptr %80)
  %82 = load i32, ptr %7, align 8
  %83 = sext i32 %82 to i64
  %84 = getelementptr ptr, ptr %80, i64 %83
  %85 = getelementptr i8, ptr %84, i64 8
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr i8, ptr %86, i64 8
  %88 = load ptr, ptr %87, align 8
  %89 = load ptr, ptr %75, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %89, 0
  %91 = load ptr, ptr %76, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, ptr %91, 1
  %93 = load ptr, ptr %77, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 2
  %95 = load i32, ptr %78, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, i32 %95, 3
  call void %88(ptr %79, { ptr, ptr, ptr, i32 } %96) #23
  ret void
}

define void @Exception_set_info_line_numberi32_file_nameString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, { ptr, ptr, ptr, i32 } %4) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract2, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract3, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract4, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Exception)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 104, ptr %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  call void %18(ptr %10, i32 %3) #23
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract, ptr %22, align 8
  call void @set_offset(ptr nonnull %19, ptr nonnull @String)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = load ptr, ptr %19, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 8
  %26 = load ptr, ptr %20, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr inbounds i8, ptr %23, i64 16
  %28 = load ptr, ptr %21, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %23, i64 24
  %30 = load i32, ptr %22, align 8
  store i32 %30, ptr %29, align 8
  call void @set_offset(ptr nonnull %23, ptr nonnull @String)
  %31 = load ptr, ptr %7, align 8
  %32 = load ptr, ptr %6, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 104, ptr %32)
  %34 = load i32, ptr %9, align 8
  %35 = sext i32 %34 to i64
  %36 = getelementptr ptr, ptr %32, i64 %35
  %37 = getelementptr i8, ptr %36, i64 8
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  %41 = load ptr, ptr %23, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %41, 0
  %43 = load ptr, ptr %25, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %43, 1
  %45 = load ptr, ptr %27, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %45, 2
  %47 = load i32, ptr %29, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %47, 3
  call void %40(ptr %31, { ptr, ptr, ptr, i32 } %48) #23
  ret void
}

define void @Exception_report_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract89 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract91 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract93 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract95 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract89, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract91, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract93, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract95, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Exception)
  %9 = call ptr @bump_malloc(i64 10)
  store <9 x i8> <i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45>, ptr %9, align 16
  %10 = alloca [1 x ptr], align 8
  store ptr @String, ptr %10, align 8
  %11 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %10)
  %12 = extractvalue { i64, i64 } %11, 0
  %13 = call ptr @bump_malloc(i64 %12)
  %14 = insertvalue { ptr } undef, ptr %9, 0
  %15 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %13, 1
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, ptr undef, 2
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, i32 10, 3
  %18 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr @_parameterization_i32, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %18)
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %23 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %23, i64 8
  store ptr @i32_typ, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 16
  store ptr @i32_typ, ptr %25, align 8
  %26 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %17, ptr nonnull %23)
  call void %26({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %18, { ptr } %14, i32 9, i32 10) #25
  %27 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %28 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %29 = call ptr @behavior_wrapper(ptr nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %17, ptr nonnull %4)
  %30 = call { ptr } %29({ ptr, ptr, ptr, i32 } %17, { ptr, ptr, ptr, i32 } %17, ptr nonnull %4) #25
  %.fca.0.extract71 = extractvalue { ptr } %30, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract71)
  %31 = call ptr @bump_malloc(i64 27)
  store <26 x i8> <i8 69, i8 120, i8 99, i8 101, i8 112, i8 116, i8 105, i8 111, i8 110, i8 32, i8 116, i8 104, i8 114, i8 111, i8 119, i8 110, i8 32, i8 102, i8 114, i8 111, i8 109, i8 32, i8 102, i8 105, i8 108, i8 101>, ptr %31, align 32
  %32 = alloca [1 x ptr], align 8
  store ptr @String, ptr %32, align 8
  %33 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %32)
  %34 = extractvalue { i64, i64 } %33, 0
  %35 = call ptr @bump_malloc(i64 %34)
  %36 = insertvalue { ptr } undef, ptr %31, 0
  %37 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %35, 1
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr undef, 2
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, i32 10, 3
  %40 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr @_parameterization_i32, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr @_parameterization_i32, ptr %42, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %40)
  %44 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %45 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %45, align 8
  %46 = getelementptr inbounds i8, ptr %45, i64 8
  store ptr @i32_typ, ptr %46, align 8
  %47 = getelementptr inbounds i8, ptr %45, i64 16
  store ptr @i32_typ, ptr %47, align 8
  %48 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %39, ptr nonnull %45)
  call void %48({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %40, { ptr } %36, i32 26, i32 27) #25
  %49 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %50 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %51 = call ptr @behavior_wrapper(ptr nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %39, ptr nonnull %4)
  %52 = call { ptr } %51({ ptr, ptr, ptr, i32 } %39, { ptr, ptr, ptr, i32 } %39, ptr nonnull %4) #25
  %.fca.0.extract53 = extractvalue { ptr } %52, 0
  %puts97 = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract53)
  %53 = load ptr, ptr %6, align 8
  %54 = load ptr, ptr %5, align 8
  %55 = call ptr @llvm.invariant.start.p0(i64 104, ptr %54)
  %56 = load i32, ptr %8, align 8
  %57 = sext i32 %56 to i64
  %58 = getelementptr ptr, ptr %54, i64 %57
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  %61 = load ptr, ptr %60, align 8
  %62 = call { ptr, ptr, ptr, i32 } %61(ptr %53) #24
  %63 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract52 = extractvalue { ptr, ptr, ptr, i32 } %62, 0
  store ptr %.fca.0.extract52, ptr %63, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %63, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %63, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %62, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %63, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %63, ptr nonnull @String)
  %64 = load ptr, ptr %63, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %64, 0
  %66 = load ptr, ptr %.fca.1.gep, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 1
  %68 = load ptr, ptr %.fca.2.gep, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 2
  %70 = load i32, ptr %.fca.3.gep, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, i32 %70, 3
  %72 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %73 = call ptr @llvm.invariant.start.p0(i64 616, ptr %64)
  %74 = sext i32 %70 to i64
  %75 = getelementptr ptr, ptr %64, i64 %74
  %76 = getelementptr i8, ptr %75, i64 120
  %77 = load ptr, ptr %76, align 8
  %78 = call ptr @behavior_wrapper(ptr %77, { ptr, ptr, ptr, i32 } %71, ptr nonnull %4)
  %79 = call { ptr } %78({ ptr, ptr, ptr, i32 } %71, { ptr, ptr, ptr, i32 } %71, ptr nonnull %4) #25
  %.fca.0.extract50 = extractvalue { ptr } %79, 0
  %puts98 = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract50)
  %80 = call ptr @bump_malloc(i64 8)
  store <7 x i8> <i8 65, i8 116, i8 32, i8 108, i8 105, i8 110, i8 101>, ptr %80, align 8
  %81 = alloca [1 x ptr], align 8
  store ptr @String, ptr %81, align 8
  %82 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %81)
  %83 = extractvalue { i64, i64 } %82, 0
  %84 = call ptr @bump_malloc(i64 %83)
  %85 = insertvalue { ptr } undef, ptr %80, 0
  %86 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %84, 1
  %87 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr undef, 2
  %88 = insertvalue { ptr, ptr, ptr, i32 } %87, i32 10, 3
  %89 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %89, align 8
  %90 = getelementptr inbounds i8, ptr %89, i64 8
  store ptr @_parameterization_i32, ptr %90, align 8
  %91 = getelementptr inbounds i8, ptr %89, i64 16
  store ptr @_parameterization_i32, ptr %91, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %89)
  %93 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %94 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %94, i64 8
  store ptr @i32_typ, ptr %95, align 8
  %96 = getelementptr inbounds i8, ptr %94, i64 16
  store ptr @i32_typ, ptr %96, align 8
  %97 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %88, ptr nonnull %94)
  call void %97({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr nonnull %89, { ptr } %85, i32 7, i32 8) #25
  %98 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %99 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %100 = call ptr @behavior_wrapper(ptr nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %88, ptr nonnull %4)
  %101 = call { ptr } %100({ ptr, ptr, ptr, i32 } %88, { ptr, ptr, ptr, i32 } %88, ptr nonnull %4) #25
  %.fca.0.extract33 = extractvalue { ptr } %101, 0
  %puts99 = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract33)
  %102 = load ptr, ptr %6, align 8
  %103 = load ptr, ptr %5, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 104, ptr %103)
  %105 = load i32, ptr %8, align 8
  %106 = sext i32 %105 to i64
  %107 = getelementptr ptr, ptr %103, i64 %106
  %108 = load ptr, ptr %107, align 8
  %109 = load ptr, ptr %108, align 8
  %110 = call i32 %109(ptr %102) #24
  %111 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %110)
  %112 = call ptr @bump_malloc(i64 13)
  store <12 x i8> <i8 87, i8 105, i8 116, i8 104, i8 32, i8 109, i8 101, i8 115, i8 115, i8 97, i8 103, i8 101>, ptr %112, align 16
  %113 = alloca [1 x ptr], align 8
  store ptr @String, ptr %113, align 8
  %114 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %113)
  %115 = extractvalue { i64, i64 } %114, 0
  %116 = call ptr @bump_malloc(i64 %115)
  %117 = insertvalue { ptr } undef, ptr %112, 0
  %118 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %116, 1
  %119 = insertvalue { ptr, ptr, ptr, i32 } %118, ptr undef, 2
  %120 = insertvalue { ptr, ptr, ptr, i32 } %119, i32 10, 3
  %121 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %121, align 8
  %122 = getelementptr inbounds i8, ptr %121, i64 8
  store ptr @_parameterization_i32, ptr %122, align 8
  %123 = getelementptr inbounds i8, ptr %121, i64 16
  store ptr @_parameterization_i32, ptr %123, align 8
  %124 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %121)
  %125 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %126 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %126, align 8
  %127 = getelementptr inbounds i8, ptr %126, i64 8
  store ptr @i32_typ, ptr %127, align 8
  %128 = getelementptr inbounds i8, ptr %126, i64 16
  store ptr @i32_typ, ptr %128, align 8
  %129 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %120, ptr nonnull %126)
  call void %129({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr nonnull %121, { ptr } %117, i32 12, i32 13) #25
  %130 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %131 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %132 = call ptr @behavior_wrapper(ptr nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %120, ptr nonnull %4)
  %133 = call { ptr } %132({ ptr, ptr, ptr, i32 } %120, { ptr, ptr, ptr, i32 } %120, ptr nonnull %4) #25
  %.fca.0.extract15 = extractvalue { ptr } %133, 0
  %puts100 = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract15)
  %134 = load ptr, ptr %5, align 8
  %135 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %134, 0
  %136 = load ptr, ptr %6, align 8
  %137 = insertvalue { ptr, ptr, ptr, i32 } %135, ptr %136, 1
  %138 = load ptr, ptr %7, align 8
  %139 = insertvalue { ptr, ptr, ptr, i32 } %137, ptr %138, 2
  %140 = load i32, ptr %8, align 8
  %141 = insertvalue { ptr, ptr, ptr, i32 } %139, i32 %140, 3
  %142 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %143 = call ptr @llvm.invariant.start.p0(i64 104, ptr %134)
  %144 = sext i32 %140 to i64
  %145 = getelementptr ptr, ptr %134, i64 %144
  %146 = getelementptr i8, ptr %145, i64 56
  %147 = load ptr, ptr %146, align 8
  %148 = call ptr @behavior_wrapper(ptr %147, { ptr, ptr, ptr, i32 } %141, ptr nonnull %4)
  call void %148({ ptr, ptr, ptr, i32 } %141, { ptr, ptr, ptr, i32 } %141, ptr nonnull %4) #25
  %149 = call ptr @bump_malloc(i64 10)
  store <9 x i8> <i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45, i8 45>, ptr %149, align 16
  %150 = alloca [1 x ptr], align 8
  store ptr @String, ptr %150, align 8
  %151 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %150)
  %152 = extractvalue { i64, i64 } %151, 0
  %153 = call ptr @bump_malloc(i64 %152)
  %154 = insertvalue { ptr } undef, ptr %149, 0
  %155 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %153, 1
  %156 = insertvalue { ptr, ptr, ptr, i32 } %155, ptr undef, 2
  %157 = insertvalue { ptr, ptr, ptr, i32 } %156, i32 10, 3
  %158 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %158, align 8
  %159 = getelementptr inbounds i8, ptr %158, i64 8
  store ptr @_parameterization_i32, ptr %159, align 8
  %160 = getelementptr inbounds i8, ptr %158, i64 16
  store ptr @_parameterization_i32, ptr %160, align 8
  %161 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %158)
  %162 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %163 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %163, align 8
  %164 = getelementptr inbounds i8, ptr %163, i64 8
  store ptr @i32_typ, ptr %164, align 8
  %165 = getelementptr inbounds i8, ptr %163, i64 16
  store ptr @i32_typ, ptr %165, align 8
  %166 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %157, ptr nonnull %163)
  call void %166({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } %157, ptr nonnull %158, { ptr } %154, i32 9, i32 10) #25
  %167 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %168 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %169 = call ptr @behavior_wrapper(ptr nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %157, ptr nonnull %4)
  %170 = call { ptr } %169({ ptr, ptr, ptr, i32 } %157, { ptr, ptr, ptr, i32 } %157, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr } %170, 0
  %puts101 = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

define void @Exception_print_message_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract4, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract6, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract8, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Exception)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 16
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr, ptr, ptr, i32 } %17(ptr %9) #24
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %18, 0
  store ptr %.fca.0.extract1, ptr %19, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %18, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %19, ptr nonnull @String)
  %20 = load ptr, ptr %19, align 8
  %21 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %20, 0
  %22 = load ptr, ptr %.fca.1.gep, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %21, ptr %22, 1
  %24 = load ptr, ptr %.fca.2.gep, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 2
  %26 = load i32, ptr %.fca.3.gep, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, i32 %26, 3
  %28 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %29 = call ptr @llvm.invariant.start.p0(i64 616, ptr %20)
  %30 = sext i32 %26 to i64
  %31 = getelementptr ptr, ptr %20, i64 %30
  %32 = getelementptr i8, ptr %31, i64 120
  %33 = load ptr, ptr %32, align 8
  %34 = call ptr @behavior_wrapper(ptr %33, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4)
  %35 = call { ptr } %34({ ptr, ptr, ptr, i32 } %27, { ptr, ptr, ptr, i32 } %27, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr } %35, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #15

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) #15

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @Exception_getter_message(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_message(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @Exception_getter_file_name(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_file_name(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Exception_getter_line_number(ptr nocapture readonly %0) #1 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Exception_setter_line_number(ptr nocapture writeonly %0, i32 %1) #9 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_IO(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString(ptr nocapture %0) {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = getelementptr i8, ptr %3, i64 8
  %5 = getelementptr i8, ptr %3, i64 16
  %6 = getelementptr i8, ptr %3, i64 24
  %7 = getelementptr i8, ptr %3, i64 32
  %8 = load i64, ptr %4, align 4
  %9 = load i64, ptr %5, align 4
  %10 = load ptr, ptr %6, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = tail call i1 @subtype_test_wrapper(ptr %10, i64 %9, i64 %8, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %11)
  br i1 %12, label %13, label %.critedge

13:                                               ; preds = %1
  %14 = load i64, ptr %4, align 4
  %15 = load i64, ptr %5, align 4
  %16 = load ptr, ptr %6, align 8
  %17 = load ptr, ptr %7, align 8
  %18 = tail call i1 @subtype_test_wrapper(ptr %16, i64 %15, i64 %14, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %17)
  br i1 %18, label %.critedge, label %58

.critedge:                                        ; preds = %13, %1
  %19 = load i64, ptr %4, align 4
  %20 = load i64, ptr %5, align 4
  %21 = load ptr, ptr %6, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = tail call i1 @subtype_test_wrapper(ptr %21, i64 %20, i64 %19, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %22)
  br i1 %23, label %24, label %.critedge15

24:                                               ; preds = %.critedge
  %25 = load i64, ptr %4, align 4
  %26 = load i64, ptr %5, align 4
  %27 = load ptr, ptr %6, align 8
  %28 = load ptr, ptr %7, align 8
  %29 = tail call i1 @subtype_test_wrapper(ptr %27, i64 %26, i64 %25, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %28)
  br i1 %29, label %.critedge15, label %58

.critedge15:                                      ; preds = %24, %.critedge
  %30 = icmp eq ptr %3, @nil_typ
  %31 = icmp eq ptr %3, null
  %32 = or i1 %30, %31
  br i1 %32, label %58, label %33

33:                                               ; preds = %.critedge15
  %34 = icmp eq ptr %3, @f64_typ
  br i1 %34, label %58, label %35

35:                                               ; preds = %33
  %36 = icmp eq ptr %3, @bool_typ
  br i1 %36, label %58, label %37

37:                                               ; preds = %35
  %38 = load i64, ptr %4, align 4
  %39 = load i64, ptr %5, align 4
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %7, align 8
  %42 = tail call i1 @subtype_test_wrapper(ptr %40, i64 %39, i64 %38, i64 -7260840641129990118, i64 ptrtoint (ptr @Representable to i64), ptr %41)
  br i1 %42, label %43, label %.critedge17

43:                                               ; preds = %37
  %44 = load i64, ptr %4, align 4
  %45 = load i64, ptr %5, align 4
  %46 = load ptr, ptr %6, align 8
  %47 = load ptr, ptr %7, align 8
  %48 = tail call i1 @subtype_test_wrapper(ptr %46, i64 %45, i64 %44, i64 6681222582356018452, i64 ptrtoint (ptr @Character to i64), ptr %47)
  br i1 %48, label %.critedge17, label %49

49:                                               ; preds = %43
  %50 = load i64, ptr %4, align 4
  %51 = load i64, ptr %5, align 4
  %52 = load ptr, ptr %6, align 8
  %53 = load ptr, ptr %7, align 8
  %54 = tail call i1 @subtype_test_wrapper(ptr %52, i64 %51, i64 %50, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %53)
  br i1 %54, label %.critedge17, label %58

.critedge17:                                      ; preds = %49, %43, %37
  %55 = icmp eq ptr %3, @i8_typ
  %56 = icmp eq ptr %3, @i32_typ
  %57 = select i1 %56, i32 1, i32 5
  %.reg2mem39.0 = select i1 %55, i32 3, i32 %57
  br label %58

58:                                               ; preds = %.critedge17, %49, %35, %33, %.critedge15, %24, %13
  %.reg2mem27.0 = phi i32 [ 6, %.critedge15 ], [ 8, %33 ], [ 2, %35 ], [ %.reg2mem39.0, %.critedge17 ], [ 7, %49 ], [ 9, %24 ], [ 4, %13 ]
  %59 = zext nneg i32 %.reg2mem27.0 to i64
  %60 = getelementptr [10 x ptr], ptr @IO, i64 0, i64 %59
  %61 = getelementptr i8, ptr %60, i64 80
  %62 = load ptr, ptr %61, align 8
  ret ptr %62
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xi32(ptr nocapture readnone %0, { ptr, i160 } %1) #15 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %.sroa.1.8.extract.trunc)
  ret void
}

define void @IO__Self_print_xi1(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %4 = alloca [1 x ptr], align 8
  %5 = alloca [3 x ptr], align 8
  %6 = alloca { ptr, ptr, ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %.sroa.1.sroa.0 = alloca i8, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i8
  store i8 %.sroa.1.8.extract.trunc, ptr %.sroa.1.sroa.0, align 8
  %.sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.8. = load i1, ptr %.sroa.1.sroa.0, align 8
  br i1 %.sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.sroa.0.0..sroa.1.8., label %10, label %30

10:                                               ; preds = %2
  %11 = tail call ptr @bump_malloc(i64 5)
  store <4 x i8> <i8 116, i8 114, i8 117, i8 101>, ptr %11, align 4
  store ptr @String, ptr %4, align 8
  %12 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %4)
  %13 = extractvalue { i64, i64 } %12, 0
  %14 = call ptr @bump_malloc(i64 %13)
  %15 = insertvalue { ptr } undef, ptr %11, 0
  %16 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %14, 1
  %17 = insertvalue { ptr, ptr, ptr, i32 } %16, ptr undef, 2
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %5, align 8
  %19 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr @_parameterization_i32, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %5)
  %22 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %6, align 8
  %23 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr @i32_typ, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr @i32_typ, ptr %24, align 8
  %25 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %18, ptr nonnull %6)
  call void %25({ ptr, ptr, ptr, i32 } %18, { ptr, ptr, ptr, i32 } %18, ptr nonnull %5, { ptr } %15, i32 4, i32 5) #25
  %26 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %27 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %28 = call ptr @behavior_wrapper(ptr nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %18, ptr nonnull %3)
  %29 = call { ptr } %28({ ptr, ptr, ptr, i32 } %18, { ptr, ptr, ptr, i32 } %18, ptr nonnull %3) #25
  br label %50

30:                                               ; preds = %2
  %31 = tail call ptr @bump_malloc(i64 6)
  store <5 x i8> <i8 102, i8 97, i8 108, i8 115, i8 101>, ptr %31, align 8
  store ptr @String, ptr %7, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %7)
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = call ptr @bump_malloc(i64 %33)
  %35 = insertvalue { ptr } undef, ptr %31, 0
  %36 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %34, 1
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr undef, 2
  %38 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %8, align 8
  %39 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @_parameterization_i32, ptr %39, align 8
  %40 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @_parameterization_i32, ptr %40, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %8)
  %42 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %9, align 8
  %43 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr @i32_typ, ptr %43, align 8
  %44 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr @i32_typ, ptr %44, align 8
  %45 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %38, ptr nonnull %9)
  call void %45({ ptr, ptr, ptr, i32 } %38, { ptr, ptr, ptr, i32 } %38, ptr nonnull %8, { ptr } %35, i32 5, i32 6) #25
  %46 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %47 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %48 = call ptr @behavior_wrapper(ptr nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %38, ptr nonnull %3)
  %49 = call { ptr } %48({ ptr, ptr, ptr, i32 } %38, { ptr, ptr, ptr, i32 } %38, ptr nonnull %3) #25
  br label %50

50:                                               ; preds = %30, %10
  %.sink = phi { ptr } [ %49, %30 ], [ %29, %10 ]
  %.fca.0.extract1 = extractvalue { ptr } %.sink, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract1)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xi8(ptr nocapture readnone %0, { ptr, i160 } %1) #15 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i8
  %3 = sext i8 %.sroa.1.8.extract.trunc to i32
  %4 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, i32 %3)
  ret void
}

define void @IO__Self_print_xCharacter(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %5, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Character)
  %6 = call ptr @bump_malloc(i64 2)
  %7 = load ptr, ptr %4, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %7, 0
  %9 = load ptr, ptr %5, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %9, 1
  %11 = getelementptr inbounds i8, ptr %4, i64 16
  %12 = load ptr, ptr %11, align 8
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %12, 2
  %14 = getelementptr inbounds i8, ptr %4, i64 24
  %15 = load i32, ptr %14, align 8
  %16 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 %15, 3
  %17 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %18 = call ptr @llvm.invariant.start.p0(i64 40, ptr %7)
  %19 = sext i32 %15 to i64
  %20 = getelementptr ptr, ptr %7, i64 %19
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = call ptr @behavior_wrapper(ptr %22, { ptr, ptr, ptr, i32 } %16, ptr nonnull %3)
  %24 = call i8 %23({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %3) #25
  store i8 %24, ptr %6, align 1
  %25 = getelementptr i8, ptr %6, i64 1
  store i8 0, ptr %25, align 1
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %6)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xi64(ptr nocapture readnone %0, { ptr, i160 } %1) #15 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %3 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i64_string, i64 %.sroa.1.8.extract.trunc)
  ret void
}

define void @IO__Self_print_xNil(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %4 = tail call ptr @bump_malloc(i64 4)
  store <3 x i8> <i8 110, i8 105, i8 108>, ptr %4, align 4
  %5 = alloca [1 x ptr], align 8
  store ptr @String, ptr %5, align 8
  %6 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %5)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = call ptr @bump_malloc(i64 %7)
  %9 = insertvalue { ptr } undef, ptr %4, 0
  %10 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %8, 1
  %11 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr undef, 2
  %12 = insertvalue { ptr, ptr, ptr, i32 } %11, i32 10, 3
  %13 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr @_parameterization_i32, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr @_parameterization_i32, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %13)
  %17 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %18 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr @i32_typ, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %18, i64 16
  store ptr @i32_typ, ptr %20, align 8
  %21 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %12, ptr nonnull %18)
  call void %21({ ptr, ptr, ptr, i32 } %12, { ptr, ptr, ptr, i32 } %12, ptr nonnull %13, { ptr } %9, i32 3, i32 4) #25
  %22 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %23 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %24 = call ptr @behavior_wrapper(ptr nonnull @String_B_c_string_, { ptr, ptr, ptr, i32 } %12, ptr nonnull %3)
  %25 = call { ptr } %24({ ptr, ptr, ptr, i32 } %12, { ptr, ptr, ptr, i32 } %12, ptr nonnull %3) #25
  %.fca.0.extract = extractvalue { ptr } %25, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

define void @IO__Self_print_xRepresentable(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract3 = extractvalue { ptr, i160 } %1, 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract3, ptr %5, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Representable)
  %6 = load ptr, ptr %4, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %6, 0
  %8 = load ptr, ptr %5, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %8, 1
  %10 = getelementptr inbounds i8, ptr %4, i64 16
  %11 = load ptr, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr %11, 2
  %13 = getelementptr inbounds i8, ptr %4, i64 24
  %14 = load i32, ptr %13, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %14, 3
  %16 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %17 = call ptr @llvm.invariant.start.p0(i64 16, ptr %6)
  %18 = sext i32 %14 to i64
  %19 = getelementptr ptr, ptr %6, i64 %18
  %20 = load ptr, ptr %19, align 8
  %21 = call ptr @behavior_wrapper(ptr %20, { ptr, ptr, ptr, i32 } %15, ptr nonnull %3)
  %22 = call { ptr, ptr, ptr, i32 } %21({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %3) #25
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %22, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %22, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %22, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %22, 3
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %23, i64 8
  store ptr %.fca.1.extract, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 16
  store ptr %.fca.2.extract, ptr %25, align 8
  %26 = getelementptr inbounds i8, ptr %23, i64 24
  store i32 %.fca.3.extract, ptr %26, align 8
  call void @set_offset(ptr nonnull %23, ptr nonnull @String)
  %27 = load ptr, ptr %23, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = load ptr, ptr %24, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 1
  %31 = load ptr, ptr %25, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %26, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  %35 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %36 = call ptr @llvm.invariant.start.p0(i64 616, ptr %27)
  %37 = sext i32 %33 to i64
  %38 = getelementptr ptr, ptr %27, i64 %37
  %39 = getelementptr i8, ptr %38, i64 120
  %40 = load ptr, ptr %39, align 8
  %41 = call ptr @behavior_wrapper(ptr %40, { ptr, ptr, ptr, i32 } %34, ptr nonnull %3)
  %42 = call { ptr } %41({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %3) #25
  %.fca.0.extract = extractvalue { ptr } %42, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

; Function Attrs: nofree nounwind
define void @IO__Self_print_xf64(ptr nocapture readnone %0, { ptr, i160 } %1) #15 {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i64
  %3 = bitcast i64 %.sroa.1.8.extract.trunc to double
  %4 = tail call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @float_string, double %3)
  ret void
}

define void @IO__Self_print_xString(ptr nocapture readnone %0, { ptr, i160 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract1 = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %5, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %6 = load ptr, ptr %4, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %6, 0
  %8 = load ptr, ptr %5, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %8, 1
  %10 = getelementptr inbounds i8, ptr %4, i64 16
  %11 = load ptr, ptr %10, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, ptr %11, 2
  %13 = getelementptr inbounds i8, ptr %4, i64 24
  %14 = load i32, ptr %13, align 8
  %15 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %14, 3
  %16 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %17 = call ptr @llvm.invariant.start.p0(i64 616, ptr %6)
  %18 = sext i32 %14 to i64
  %19 = getelementptr ptr, ptr %6, i64 %18
  %20 = getelementptr i8, ptr %19, i64 120
  %21 = load ptr, ptr %20, align 8
  %22 = call ptr @behavior_wrapper(ptr %21, { ptr, ptr, ptr, i32 } %15, ptr nonnull %3)
  %23 = call { ptr } %22({ ptr, ptr, ptr, i32 } %15, { ptr, ptr, ptr, i32 } %15, ptr nonnull %3) #25
  %.fca.0.extract = extractvalue { ptr } %23, 0
  %puts = call i32 @puts(ptr nonnull dereferenceable(1) %.fca.0.extract)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Math(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define noundef nonnull ptr @Math_B__Self_sqrt_xf64(ptr nocapture %0) #16 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  ret ptr @Math__Self_sqrt_xf64
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define ptr @Math_B__Self_abs_xi32__Self_abs_xf64(ptr nocapture %0) #16 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = icmp eq ptr %3, @f64_typ
  %5 = select i1 %4, i64 9, i64 8
  %6 = getelementptr [17 x ptr], ptr @Math, i64 0, i64 %5
  %7 = getelementptr i8, ptr %6, i64 80
  %8 = load ptr, ptr %7, align 8
  ret ptr %8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define ptr @Math_B__Self_max_ai32_bi32__Self_max_af64_bf64(ptr nocapture %0) #16 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = icmp eq ptr %3, @i32_typ
  %5 = select i1 %4, i64 10, i64 11
  %6 = getelementptr [17 x ptr], ptr @Math, i64 0, i64 %5
  %7 = getelementptr i8, ptr %6, i64 80
  %8 = load ptr, ptr %7, align 8
  ret ptr %8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define ptr @Math_B__Self_min_ai32_bi32__Self_min_af64_bf64(ptr nocapture %0) #16 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = icmp eq ptr %3, @f64_typ
  %5 = select i1 %4, i64 13, i64 12
  %6 = getelementptr [17 x ptr], ptr @Math, i64 0, i64 %5
  %7 = getelementptr i8, ptr %6, i64 80
  %8 = load ptr, ptr %7, align 8
  ret ptr %8
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define noundef nonnull ptr @Math_B__Self_round_xf64(ptr nocapture %0) #16 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  ret ptr @Math__Self_round_xf64
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define noundef nonnull ptr @Math_B__Self_floor_xf64(ptr nocapture %0) #16 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  ret ptr @Math__Self_floor_xf64
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite)
define noundef nonnull ptr @Math_B__Self_ceiling_xf64(ptr nocapture %0) #16 {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  ret ptr @Math__Self_ceiling_xf64
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define double @Math__Self_sqrt_xf64(ptr nocapture readnone %0, double %1) #6 {
  %3 = tail call double @llvm.sqrt.f64(double %1)
  ret double %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { ptr, i64 } @Math__Self_abs_xi32(ptr nocapture readnone %0, { ptr, i64 } %1) #6 {
  %.fca.1.extract7 = extractvalue { ptr, i64 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i64 %.fca.1.extract7 to i32
  %.sroa.013.0.insert.ext = and i64 %.fca.1.extract7, 2147483647
  %3 = sub i32 0, %.sroa.1.8.extract.trunc
  %.sroa.09.0.insert.ext = zext i32 %3 to i64
  %4 = icmp slt i32 %.sroa.1.8.extract.trunc, 0
  %.reg2mem5.sroa.3.0 = select i1 %4, i64 %.sroa.09.0.insert.ext, i64 %.sroa.013.0.insert.ext
  %.reload6.fca.1.insert = insertvalue { ptr, i64 } { ptr @i32_typ, i64 undef }, i64 %.reg2mem5.sroa.3.0, 1
  ret { ptr, i64 } %.reload6.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { ptr, i64 } @Math__Self_abs_xf64(ptr nocapture readnone %0, { ptr, i64 } %1) #6 {
  %.fca.1.extract8 = extractvalue { ptr, i64 } %1, 1
  %3 = bitcast i64 %.fca.1.extract8 to double
  %4 = fcmp ult double %3, 0.000000e+00
  %5 = fneg double %3
  %6 = bitcast double %5 to i64
  %.reg2mem5.sroa.3.0 = select i1 %4, i64 %6, i64 %.fca.1.extract8
  %.reload6.fca.1.insert = insertvalue { ptr, i64 } { ptr @f64_typ, i64 undef }, i64 %.reg2mem5.sroa.3.0, 1
  ret { ptr, i64 } %.reload6.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { ptr, i64 } @Math__Self_max_ai32_bi32(ptr nocapture readnone %0, { ptr, i64 } %1, { ptr, i64 } %2) #6 {
.cont:
  %.fca.1.extract6 = extractvalue { ptr, i64 } %1, 1
  %.sroa.18.8.extract.trunc = trunc i64 %.fca.1.extract6 to i32
  %.fca.1.extract = extractvalue { ptr, i64 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i64 %.fca.1.extract to i32
  %.sroa.speculated = tail call i32 @llvm.smax.i32(i32 %.sroa.18.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  %.sroa.2.8.insert.ext = zext i32 %.sroa.speculated to i64
  %3 = insertvalue { ptr, i64 } { ptr @i32_typ, i64 undef }, i64 %.sroa.2.8.insert.ext, 1
  ret { ptr, i64 } %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { ptr, i64 } @Math__Self_max_af64_bf64(ptr nocapture readnone %0, { ptr, i64 } %1, { ptr, i64 } %2) #6 {
.cont:
  %.fca.1.extract4 = extractvalue { ptr, i64 } %1, 1
  %3 = bitcast i64 %.fca.1.extract4 to double
  %.fca.1.extract = extractvalue { ptr, i64 } %2, 1
  %4 = bitcast i64 %.fca.1.extract to double
  %5 = fcmp ogt double %3, %4
  %.sroa.speculated = select i1 %5, double %3, double %4
  %6 = bitcast double %.sroa.speculated to i64
  %7 = insertvalue { ptr, i64 } { ptr @f64_typ, i64 undef }, i64 %6, 1
  ret { ptr, i64 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { ptr, i64 } @Math__Self_min_ai32_bi32(ptr nocapture readnone %0, { ptr, i64 } %1, { ptr, i64 } %2) #6 {
.cont:
  %.fca.1.extract6 = extractvalue { ptr, i64 } %1, 1
  %.sroa.18.8.extract.trunc = trunc i64 %.fca.1.extract6 to i32
  %.fca.1.extract = extractvalue { ptr, i64 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i64 %.fca.1.extract to i32
  %.sroa.speculated = tail call i32 @llvm.smin.i32(i32 %.sroa.18.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  %.sroa.2.8.insert.ext = zext i32 %.sroa.speculated to i64
  %3 = insertvalue { ptr, i64 } { ptr @i32_typ, i64 undef }, i64 %.sroa.2.8.insert.ext, 1
  ret { ptr, i64 } %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { ptr, i64 } @Math__Self_min_af64_bf64(ptr nocapture readnone %0, { ptr, i64 } %1, { ptr, i64 } %2) #6 {
.cont:
  %.fca.1.extract4 = extractvalue { ptr, i64 } %1, 1
  %3 = bitcast i64 %.fca.1.extract4 to double
  %.fca.1.extract = extractvalue { ptr, i64 } %2, 1
  %4 = bitcast i64 %.fca.1.extract to double
  %5 = fcmp olt double %3, %4
  %.sroa.speculated = select i1 %5, double %3, double %4
  %6 = bitcast double %.sroa.speculated to i64
  %7 = insertvalue { ptr, i64 } { ptr @f64_typ, i64 undef }, i64 %6, 1
  ret { ptr, i64 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define double @Math__Self_round_xf64(ptr nocapture readnone %0, double %1) #6 {
  %3 = tail call double @llvm.round.f64(double %1)
  ret double %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define double @Math__Self_floor_xf64(ptr nocapture readnone %0, double %1) #6 {
  %3 = tail call double @llvm.floor.f64(double %1)
  ret double %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define double @Math__Self_ceiling_xf64(ptr nocapture readnone %0, double %1) #6 {
  %3 = tail call double @llvm.ceil.f64(double %1)
  ret double %3
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.ceil.f64(double) #5

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.floor.f64(double) #5

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.round.f64(double) #5

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #5

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #5

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.sqrt.f64(double) #5

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Blocking(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Blocking_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 88
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Blocking_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Blocking)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Channel(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 40, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Channel_field_Channel_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Channel_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Channel_B_get_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Channel_B_put_new_valueT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 136
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define void @Channel_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Channel)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 64, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  call void %17(ptr %8, { ptr, i160 } { ptr @nil_typ, i160 undef }) #23
  ret void
}

define { ptr, i160 } @Channel_get_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [1 x ptr], align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Channel)
  br label %10

10:                                               ; preds = %26, %3
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %6, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 64, ptr %12)
  %14 = load i32, ptr %9, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call { ptr, i160 } %19(ptr %11) #24
  %.fca.0.extract16 = extractvalue { ptr, i160 } %20, 0
  %21 = call ptr @llvm.invariant.start.p0(i64 64, ptr %12)
  %22 = load ptr, ptr %16, align 8
  %23 = call ptr @typegetter_wrapper(ptr %22, ptr %11)
  %24 = icmp ne ptr %.fca.0.extract16, @nil_typ
  %25 = icmp ne ptr %.fca.0.extract16, null
  %.not23 = and i1 %24, %25
  br i1 %.not23, label %.critedge, label %26

26:                                               ; preds = %10
  store ptr @Blocking, ptr %5, align 8
  %27 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Blocking, ptr nonnull %5)
  %28 = extractvalue { i64, i64 } %27, 0
  %29 = call ptr @bump_malloc(i64 %28)
  %30 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Blocking, ptr undef, ptr undef, i32 undef }, ptr %29, 1
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr undef, 2
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, i32 10, 3
  %33 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %34 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull @Blocking)
  %35 = call ptr @behavior_wrapper(ptr nonnull @Blocking_B_init_, { ptr, ptr, ptr, i32 } %32, ptr nonnull %4)
  call void %35({ ptr, ptr, ptr, i32 } %32, { ptr, ptr, ptr, i32 } %32, ptr nonnull %4) #25
  %36 = ptrtoint ptr %29 to i64
  %.sroa.3.8.insert.ext = zext i64 %36 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %37 = insertvalue { ptr, i160 } { ptr @Blocking, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %38 = call ptr @get_current_coroutine()
  %39 = getelementptr i8, ptr %38, i64 48
  store { ptr, i160 } %37, ptr %39, align 8
  call void @coroutine_yield(ptr %38)
  br label %10

.critedge:                                        ; preds = %10
  %40 = load ptr, ptr %7, align 8
  %41 = load ptr, ptr %6, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 64, ptr %41)
  %43 = load i32, ptr %9, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  call void %49(ptr %40, { ptr, i160 } { ptr @nil_typ, i160 undef }) #23
  ret { ptr, i160 } %20
}

define void @Channel_put_new_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract6, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @Channel)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 64, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call { ptr, i160 } %19(ptr %11) #24
  %.fca.0.extract = extractvalue { ptr, i160 } %20, 0
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %4
  %.sroa.0.0 = phi ptr [ %.fca.0.extract, %4 ], [ %.sroa.0.1, %._crit_edge ]
  %21 = load ptr, ptr %8, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 64, ptr %22)
  %24 = load i32, ptr %10, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = load ptr, ptr %26, align 8
  %28 = call ptr @typegetter_wrapper(ptr %27, ptr %21)
  %29 = icmp ne ptr %.sroa.0.0, @nil_typ
  %30 = icmp ne ptr %.sroa.0.0, null
  %.not23 = and i1 %29, %30
  br i1 %.not23, label %31, label %._crit_edge

31:                                               ; preds = %._crit_edge1
  store ptr @Blocking, ptr %6, align 8
  %32 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Blocking, ptr nonnull %6)
  %33 = extractvalue { i64, i64 } %32, 0
  %34 = call ptr @bump_malloc(i64 %33)
  %35 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Blocking, ptr undef, ptr undef, i32 undef }, ptr %34, 1
  %36 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr undef, 2
  %37 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 10, 3
  %38 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %39 = call ptr @llvm.invariant.start.p0(i64 16, ptr nonnull @Blocking)
  %40 = call ptr @behavior_wrapper(ptr nonnull @Blocking_B_init_, { ptr, ptr, ptr, i32 } %37, ptr nonnull %5)
  call void %40({ ptr, ptr, ptr, i32 } %37, { ptr, ptr, ptr, i32 } %37, ptr nonnull %5) #25
  %41 = ptrtoint ptr %34 to i64
  %.sroa.3.8.insert.ext = zext i64 %41 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %42 = insertvalue { ptr, i160 } { ptr @Blocking, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %43 = call ptr @get_current_coroutine()
  %44 = getelementptr i8, ptr %43, i64 48
  store { ptr, i160 } %42, ptr %44, align 8
  call void @coroutine_yield(ptr %43)
  %45 = load ptr, ptr %8, align 8
  %46 = load ptr, ptr %7, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 64, ptr %46)
  %48 = load i32, ptr %10, align 8
  %49 = sext i32 %48 to i64
  %50 = getelementptr ptr, ptr %46, i64 %49
  %51 = getelementptr i8, ptr %50, i64 8
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = call { ptr, i160 } %53(ptr %45) #24
  %.fca.0.extract10 = extractvalue { ptr, i160 } %54, 0
  br label %._crit_edge

._crit_edge:                                      ; preds = %31, %._crit_edge1
  %.sroa.0.1 = phi ptr [ %.fca.0.extract10, %31 ], [ %.sroa.0.0, %._crit_edge1 ]
  br i1 %.not23, label %._crit_edge1, label %55

55:                                               ; preds = %._crit_edge
  %56 = load ptr, ptr %8, align 8
  %57 = load ptr, ptr %7, align 8
  %58 = call ptr @llvm.invariant.start.p0(i64 64, ptr %57)
  %59 = load i32, ptr %10, align 8
  %60 = sext i32 %59 to i64
  %61 = getelementptr ptr, ptr %57, i64 %60
  %62 = getelementptr i8, ptr %61, i64 8
  %63 = load ptr, ptr %62, align 8
  %64 = getelementptr i8, ptr %63, i64 8
  %65 = load ptr, ptr %64, align 8
  call void %65(ptr %56, { ptr, i160 } %3) #23
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, i160 } @Channel_getter_value(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load i160, ptr %5, align 4
  %7 = insertvalue { ptr, i160 } %4, i160 %6, 1
  ret { ptr, i160 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Channel_setter_value(ptr nocapture writeonly %0, { ptr, i160 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store i160 %.fca.1.extract, ptr %4, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Array(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 24, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Array_field_Array_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define noundef nonnull ptr @Array_B__Self_from_iterable_iterableIterableT(ptr nocapture %0) {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = getelementptr i8, ptr %3, i64 8
  %5 = getelementptr i8, ptr %3, i64 16
  %6 = getelementptr i8, ptr %3, i64 24
  %7 = getelementptr i8, ptr %3, i64 32
  %8 = load i64, ptr %4, align 4
  %9 = load i64, ptr %5, align 4
  %10 = load ptr, ptr %6, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = tail call i1 @subtype_test_wrapper(ptr %10, i64 %9, i64 %8, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %11)
  ret ptr @Array__Self_from_iterable_iterableIterableT
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 336
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 344
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 352
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_init_bufferBufferT_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 360
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_length_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 368
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_capacity_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 376
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B_append_xT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 384
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

define ptr @Array_B_extend_otherArrayT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 392
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_reserve_new_capacityi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 400
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B__index_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 408
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B__set_index_xi32_valueT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr i8, ptr %1, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr i8, ptr %5, i64 8
  %7 = getelementptr i8, ptr %5, i64 16
  %8 = getelementptr i8, ptr %5, i64 24
  %9 = getelementptr i8, ptr %5, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @any_typ, align 8
  %15 = tail call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr i8, ptr %16, i64 416
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_throw_oob_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 424
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_unchecked_index_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 432
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B_unchecked_insert_xi32_valueT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr i8, ptr %1, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr i8, ptr %5, i64 8
  %7 = getelementptr i8, ptr %5, i64 16
  %8 = getelementptr i8, ptr %5, i64 24
  %9 = getelementptr i8, ptr %5, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = load i64, ptr @any_typ, align 8
  %15 = tail call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 %14, i64 ptrtoint (ptr @any_typ to i64), ptr %13)
  %16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %17 = getelementptr i8, ptr %16, i64 440
  %18 = load ptr, ptr %17, align 8
  ret ptr %18
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 448
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 456
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 464
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 472
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 480
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 488
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 496
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Array_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 504
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @Array_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 512
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @Array_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 520
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @Array_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 528
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Array_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 536
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define { ptr, ptr, ptr, i32 } @Array__Self_from_iterable_iterableIterableT(ptr nocapture readnone %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca [0 x ptr], align 8
  %4 = alloca [1 x ptr], align 8
  %5 = alloca { ptr }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract27 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract28 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract29 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract26, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract27, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract28, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract29, ptr %11, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @Iterable)
  %12 = call ptr @llvm.invariant.start.p0(i64 664, ptr %.fca.0.extract26)
  %13 = sext i32 %.fca.3.extract29 to i64
  %14 = getelementptr ptr, ptr %.fca.0.extract26, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = call ptr @typegetter_wrapper(ptr %15, ptr %.fca.1.extract27)
  %17 = alloca [2 x ptr], align 8
  store ptr @Array, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr %16, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Array, ptr nonnull %17)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  store ptr %16, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %21)
  %23 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr undef, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 10, 3
  %26 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %27 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  %28 = call ptr @behavior_wrapper(ptr nonnull @Array_B_init_, { ptr, ptr, ptr, i32 } %25, ptr nonnull %3)
  call void %28({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %3) #25
  %29 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Array, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %29, i64 8
  store ptr %21, ptr %30, align 8
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  %32 = getelementptr inbounds i8, ptr %29, i64 24
  store i32 10, ptr %32, align 8
  call void @set_offset(ptr nonnull %29, ptr nonnull @Array)
  %33 = load ptr, ptr %29, align 8
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = load i32, ptr %32, align 8
  %37 = load ptr, ptr %8, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %37, 0
  %39 = load ptr, ptr %9, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 1
  %41 = load ptr, ptr %10, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %41, 2
  %43 = load i32, ptr %11, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %43, 3
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %46 = call ptr @llvm.invariant.start.p0(i64 184, ptr %37)
  %47 = sext i32 %43 to i64
  %48 = getelementptr ptr, ptr %37, i64 %47
  %49 = getelementptr i8, ptr %48, i64 8
  %50 = load ptr, ptr %49, align 8
  %51 = call ptr @behavior_wrapper(ptr %50, { ptr, ptr, ptr, i32 } %44, ptr nonnull %3)
  %52 = call { ptr, ptr, ptr, i32 } %51({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr nonnull %3) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %52, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %52, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %52, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %52, 3
  %53 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %53, i64 8
  store ptr %.fca.1.extract, ptr %54, align 8
  %55 = getelementptr inbounds i8, ptr %53, i64 16
  store ptr %.fca.2.extract, ptr %55, align 8
  %56 = getelementptr inbounds i8, ptr %53, i64 24
  store i32 %.fca.3.extract, ptr %56, align 8
  call void @set_offset(ptr nonnull %53, ptr nonnull @Iterator)
  %57 = alloca { ptr, ptr, ptr, i32 }, align 8
  %58 = load ptr, ptr %53, align 8
  store ptr %58, ptr %57, align 8
  %59 = getelementptr inbounds i8, ptr %57, i64 8
  %60 = load ptr, ptr %54, align 8
  store ptr %60, ptr %59, align 8
  %61 = getelementptr inbounds i8, ptr %57, i64 16
  %62 = load ptr, ptr %55, align 8
  store ptr %62, ptr %61, align 8
  %63 = getelementptr inbounds i8, ptr %57, i64 24
  %64 = load i32, ptr %56, align 8
  store i32 %64, ptr %63, align 8
  call void @set_offset(ptr nonnull %57, ptr nonnull @Iterator)
  %65 = load ptr, ptr %57, align 8
  %66 = load ptr, ptr %59, align 8
  %67 = load ptr, ptr %61, align 8
  %68 = load i32, ptr %63, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %65, 0
  %70 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %66, 1
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %67, 2
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %68, 3
  %73 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %74 = call ptr @llvm.invariant.start.p0(i64 24, ptr %65)
  %75 = sext i32 %68 to i64
  %76 = getelementptr ptr, ptr %65, i64 %75
  %77 = getelementptr i8, ptr %76, i64 8
  %invariant.gep = getelementptr i8, ptr %33, i64 88
  %78 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %33, 0
  %79 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %34, 1
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %35, 2
  %81 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %36, 3
  %82 = sext i32 %36 to i64
  %gep = getelementptr ptr, ptr %invariant.gep, i64 %82
  %83 = getelementptr inbounds i8, ptr %6, i64 8
  %84 = getelementptr inbounds i8, ptr %6, i64 16
  %85 = getelementptr inbounds i8, ptr %6, i64 24
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %2
  %86 = load ptr, ptr %77, align 8
  %87 = call ptr @behavior_wrapper(ptr %86, { ptr, ptr, ptr, i32 } %72, ptr nonnull %3)
  %88 = call { ptr, i160 } %87({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr nonnull %3) #25
  %.fca.0.extract63 = extractvalue { ptr, i160 } %88, 0
  %89 = call ptr @llvm.invariant.start.p0(i64 664, ptr %.fca.0.extract26)
  %90 = load ptr, ptr %14, align 8
  %91 = call ptr @typegetter_wrapper(ptr %90, ptr %.fca.1.extract27)
  %92 = icmp ne ptr %.fca.0.extract63, @nil_typ
  %93 = icmp ne ptr %.fca.0.extract63, null
  %.not71 = and i1 %92, %93
  br i1 %.not71, label %._crit_edge, label %.critedge

._crit_edge:                                      ; preds = %._crit_edge1
  %94 = call ptr @llvm.invariant.start.p0(i64 664, ptr %.fca.0.extract26)
  %95 = load ptr, ptr %14, align 8
  %96 = call ptr @typegetter_wrapper(ptr %95, ptr %.fca.1.extract27)
  store ptr %96, ptr %4, align 8
  %97 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %4)
  %98 = call ptr @llvm.invariant.start.p0(i64 664, ptr %33)
  %99 = load ptr, ptr %gep, align 8
  store ptr %.fca.0.extract63, ptr %5, align 8
  %100 = call ptr @behavior_wrapper(ptr %99, { ptr, ptr, ptr, i32 } %81, ptr nonnull %5)
  %101 = call { ptr, ptr, ptr, i32 } %100({ ptr, ptr, ptr, i32 } %81, { ptr, ptr, ptr, i32 } %81, ptr nonnull %4, { ptr, i160 } %88) #25
  %.fca.0.extract36 = extractvalue { ptr, ptr, ptr, i32 } %101, 0
  %.fca.1.extract37 = extractvalue { ptr, ptr, ptr, i32 } %101, 1
  %.fca.2.extract38 = extractvalue { ptr, ptr, ptr, i32 } %101, 2
  %.fca.3.extract39 = extractvalue { ptr, ptr, ptr, i32 } %101, 3
  store ptr %.fca.0.extract36, ptr %6, align 8
  store ptr %.fca.1.extract37, ptr %83, align 8
  store ptr %.fca.2.extract38, ptr %84, align 8
  store i32 %.fca.3.extract39, ptr %85, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Array)
  br label %._crit_edge1

.critedge:                                        ; preds = %._crit_edge1
  store ptr %33, ptr %7, align 8
  %102 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %34, ptr %102, align 8
  %103 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %35, ptr %103, align 8
  %104 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %36, ptr %104, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @Array)
  %105 = load ptr, ptr %7, align 8
  %106 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %105, 0
  %107 = load ptr, ptr %102, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } %106, ptr %107, 1
  %109 = load ptr, ptr %103, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %109, 2
  %111 = load i32, ptr %104, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %110, i32 %111, 3
  ret { ptr, ptr, ptr, i32 } %112
}

define void @Array_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Array)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 664, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = call ptr @typegetter_wrapper(ptr %14, ptr %8)
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 72
  %18 = load ptr, ptr %17, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr %18, ptr nonnull %15)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = load ptr, ptr %5, align 8
  %23 = load ptr, ptr %4, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 664, ptr %23)
  %25 = load i32, ptr %7, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr } undef, ptr %21, 0
  call void %31(ptr %22, { ptr } %32) #23
  %33 = load ptr, ptr %5, align 8
  %34 = load ptr, ptr %4, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 664, ptr %34)
  %36 = load i32, ptr %7, align 8
  %37 = sext i32 %36 to i64
  %38 = getelementptr ptr, ptr %34, i64 %37
  %39 = getelementptr i8, ptr %38, i64 16
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr i8, ptr %40, i64 8
  %42 = load ptr, ptr %41, align 8
  call void %42(ptr %33, i32 0) #23
  %43 = load ptr, ptr %5, align 8
  %44 = load ptr, ptr %4, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 664, ptr %44)
  %46 = load i32, ptr %7, align 8
  %47 = sext i32 %46 to i64
  %48 = getelementptr ptr, ptr %44, i64 %47
  %49 = getelementptr i8, ptr %48, i64 24
  %50 = load ptr, ptr %49, align 8
  %51 = getelementptr i8, ptr %50, i64 8
  %52 = load ptr, ptr %51, align 8
  call void %52(ptr %43, i32 1) #23
  ret void
}

define void @Array_init_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Array)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 664, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  call void %18(ptr %9, i32 %3) #23
  %19 = load ptr, ptr %6, align 8
  %20 = load ptr, ptr %5, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 664, ptr %20)
  %22 = load i32, ptr %8, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = getelementptr i8, ptr %24, i64 24
  %26 = load ptr, ptr %25, align 8
  %27 = load ptr, ptr %26, align 8
  %28 = call i32 %27(ptr %19) #24
  %29 = call ptr @llvm.invariant.start.p0(i64 664, ptr %20)
  %30 = load ptr, ptr %24, align 8
  %31 = call ptr @typegetter_wrapper(ptr %30, ptr %19)
  %32 = load ptr, ptr %31, align 8
  %33 = getelementptr i8, ptr %32, i64 72
  %34 = load ptr, ptr %33, align 8
  %35 = call { i64, i64 } @size_wrapper(ptr %34, ptr nonnull %31)
  %36 = extractvalue { i64, i64 } %35, 0
  %37 = sext i32 %28 to i64
  %38 = mul i64 %36, %37
  %39 = call ptr @bump_malloc(i64 %38)
  %40 = load ptr, ptr %6, align 8
  %41 = load ptr, ptr %5, align 8
  %42 = call ptr @llvm.invariant.start.p0(i64 664, ptr %41)
  %43 = load i32, ptr %8, align 8
  %44 = sext i32 %43 to i64
  %45 = getelementptr ptr, ptr %41, i64 %44
  %46 = getelementptr i8, ptr %45, i64 8
  %47 = load ptr, ptr %46, align 8
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  %50 = insertvalue { ptr } undef, ptr %39, 0
  call void %49(ptr %40, { ptr } %50) #23
  %51 = load ptr, ptr %6, align 8
  %52 = load ptr, ptr %5, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 664, ptr %52)
  %54 = load i32, ptr %8, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr ptr, ptr %52, i64 %55
  %57 = getelementptr i8, ptr %56, i64 16
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  call void %60(ptr %51, i32 0) #23
  ret void
}

define void @Array_init_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, i32 %4) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Array)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 664, ptr %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = getelementptr i8, ptr %15, i64 16
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  call void %19(ptr %10, i32 %3) #23
  %20 = load ptr, ptr %7, align 8
  %21 = load ptr, ptr %6, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 664, ptr %21)
  %23 = load i32, ptr %9, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr ptr, ptr %21, i64 %24
  %26 = getelementptr i8, ptr %25, i64 24
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %20, i32 %4) #23
  %30 = load ptr, ptr %7, align 8
  %31 = load ptr, ptr %6, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 664, ptr %31)
  %33 = load i32, ptr %9, align 8
  %34 = sext i32 %33 to i64
  %35 = getelementptr ptr, ptr %31, i64 %34
  %36 = getelementptr i8, ptr %35, i64 24
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 %38(ptr %30) #24
  %40 = call ptr @llvm.invariant.start.p0(i64 664, ptr %31)
  %41 = load ptr, ptr %35, align 8
  %42 = call ptr @typegetter_wrapper(ptr %41, ptr %30)
  %43 = load ptr, ptr %42, align 8
  %44 = getelementptr i8, ptr %43, i64 72
  %45 = load ptr, ptr %44, align 8
  %46 = call { i64, i64 } @size_wrapper(ptr %45, ptr nonnull %42)
  %47 = extractvalue { i64, i64 } %46, 0
  %48 = sext i32 %39 to i64
  %49 = mul i64 %47, %48
  %50 = call ptr @bump_malloc(i64 %49)
  %51 = load ptr, ptr %7, align 8
  %52 = load ptr, ptr %6, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 664, ptr %52)
  %54 = load i32, ptr %9, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr ptr, ptr %52, i64 %55
  %57 = getelementptr i8, ptr %56, i64 8
  %58 = load ptr, ptr %57, align 8
  %59 = getelementptr i8, ptr %58, i64 8
  %60 = load ptr, ptr %59, align 8
  %61 = insertvalue { ptr } undef, ptr %50, 0
  call void %60(ptr %51, { ptr } %61) #23
  ret void
}

define void @Array_init_bufferBufferT_lengthi32_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr } %3, i32 %4, i32 %5) {
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract2, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @Array)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 664, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  call void %20(ptr %11, { ptr } %3) #23
  %21 = load ptr, ptr %8, align 8
  %22 = load ptr, ptr %7, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 664, ptr %22)
  %24 = load i32, ptr %10, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 16
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  call void %30(ptr %21, i32 %4) #23
  %31 = load ptr, ptr %8, align 8
  %32 = load ptr, ptr %7, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 664, ptr %32)
  %34 = load i32, ptr %10, align 8
  %35 = sext i32 %34 to i64
  %36 = getelementptr ptr, ptr %32, i64 %35
  %37 = getelementptr i8, ptr %36, i64 24
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  call void %40(ptr %31, i32 %5) #23
  ret void
}

define i32 @Array_length_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Array)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 664, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 16
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #24
  ret i32 %17
}

define i32 @Array_capacity_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Array)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 664, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 24
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %8) #24
  ret i32 %17
}

define { ptr, ptr, ptr, i32 } @Array_append_xT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract4, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract5, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract, ptr %11, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @Array)
  %12 = load ptr, ptr %9, align 8
  %13 = load ptr, ptr %8, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 664, ptr %13)
  %15 = load i32, ptr %11, align 8
  %16 = sext i32 %15 to i64
  %17 = getelementptr ptr, ptr %13, i64 %16
  %18 = getelementptr i8, ptr %17, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call i32 %20(ptr %12) #24
  %22 = call ptr @llvm.invariant.start.p0(i64 664, ptr %13)
  %23 = getelementptr i8, ptr %17, i64 24
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %12) #24
  %.not = icmp slt i32 %21, %26
  br i1 %.not, label %._crit_edge, label %27

27:                                               ; preds = %4
  %28 = call ptr @llvm.invariant.start.p0(i64 664, ptr %13)
  %29 = call i32 %25(ptr %12) #24
  %30 = shl i32 %29, 1
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %13, 0
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %12, 1
  %33 = load ptr, ptr %10, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 2
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %15, 3
  store ptr @_parameterization_i32, ptr %5, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %37 = call ptr @llvm.invariant.start.p0(i64 664, ptr %13)
  %38 = getelementptr i8, ptr %17, i64 104
  %39 = load ptr, ptr %38, align 8
  store ptr @i32_typ, ptr %6, align 8
  %40 = call ptr @behavior_wrapper(ptr %39, { ptr, ptr, ptr, i32 } %35, ptr nonnull %6)
  call void %40({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %5, i32 %30) #25
  br label %._crit_edge

._crit_edge:                                      ; preds = %27, %4
  %41 = load ptr, ptr %9, align 8
  %42 = load ptr, ptr %8, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 664, ptr %42)
  %44 = load i32, ptr %11, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr ptr, ptr %42, i64 %45
  %47 = getelementptr i8, ptr %46, i64 8
  %48 = load ptr, ptr %47, align 8
  %49 = load ptr, ptr %48, align 8
  %50 = call { ptr } %49(ptr %41) #24
  %.fca.0.extract14 = extractvalue { ptr } %50, 0
  %51 = call ptr @llvm.invariant.start.p0(i64 664, ptr %42)
  %52 = getelementptr i8, ptr %46, i64 16
  %53 = load ptr, ptr %52, align 8
  %54 = load ptr, ptr %53, align 8
  %55 = call i32 %54(ptr %41) #24
  %56 = call ptr @llvm.invariant.start.p0(i64 664, ptr %42)
  %57 = load ptr, ptr %46, align 8
  %58 = call ptr @typegetter_wrapper(ptr %57, ptr %41)
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 72
  %61 = load ptr, ptr %60, align 8
  %62 = call { i64, i64 } @size_wrapper(ptr %61, ptr nonnull %58)
  %63 = extractvalue { i64, i64 } %62, 0
  %64 = sext i32 %55 to i64
  %65 = mul i64 %63, %64
  %66 = getelementptr i8, ptr %.fca.0.extract14, i64 %65
  %67 = load ptr, ptr %58, align 8
  %68 = getelementptr i8, ptr %67, i64 64
  %69 = load ptr, ptr %68, align 8
  call void @unbox_wrapper(ptr %69, { ptr, i160 } %3, ptr nonnull %58, ptr %66)
  %70 = load ptr, ptr %9, align 8
  %71 = load ptr, ptr %8, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 664, ptr %71)
  %73 = load i32, ptr %11, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = getelementptr i8, ptr %75, i64 16
  %77 = load ptr, ptr %76, align 8
  %78 = load ptr, ptr %77, align 8
  %79 = call i32 %78(ptr %70) #24
  %80 = add i32 %79, 1
  %81 = call ptr @llvm.invariant.start.p0(i64 664, ptr %71)
  %82 = getelementptr i8, ptr %77, i64 8
  %83 = load ptr, ptr %82, align 8
  call void %83(ptr %70, i32 %80) #23
  %84 = load ptr, ptr %8, align 8
  store ptr %84, ptr %7, align 8
  %85 = getelementptr inbounds i8, ptr %7, i64 8
  %86 = load ptr, ptr %9, align 8
  store ptr %86, ptr %85, align 8
  %87 = getelementptr inbounds i8, ptr %7, i64 16
  %88 = load ptr, ptr %10, align 8
  store ptr %88, ptr %87, align 8
  %89 = getelementptr inbounds i8, ptr %7, i64 24
  %90 = load i32, ptr %11, align 8
  store i32 %90, ptr %89, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @Array)
  %91 = load ptr, ptr %7, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %91, 0
  %93 = load ptr, ptr %85, align 8
  %94 = insertvalue { ptr, ptr, ptr, i32 } %92, ptr %93, 1
  %95 = load ptr, ptr %87, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } %94, ptr %95, 2
  %97 = load i32, ptr %89, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, i32 %97, 3
  ret { ptr, ptr, ptr, i32 } %98
}

define { ptr, ptr, ptr, i32 } @Array_extend_otherArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr }, align 8
  %10 = alloca [2 x ptr], align 8
  %11 = alloca { ptr, ptr }, align 8
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract9 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract11 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract8, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr %.fca.1.extract9, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr %.fca.2.extract10, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %13, i64 24
  store i32 %.fca.3.extract11, ptr %16, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @Array)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr %.fca.1.extract, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %17, i64 16
  store ptr %.fca.2.extract, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %17, i64 24
  store i32 %.fca.3.extract, ptr %20, align 8
  call void @set_offset(ptr nonnull %17, ptr nonnull @Array)
  %21 = load ptr, ptr %17, align 8
  %22 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %21, 0
  %23 = load ptr, ptr %18, align 8
  %24 = insertvalue { ptr, ptr, ptr, i32 } %22, ptr %23, 1
  %25 = load ptr, ptr %19, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %24, ptr %25, 2
  %27 = load i32, ptr %20, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } %26, i32 %27, 3
  %29 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %30 = call ptr @llvm.invariant.start.p0(i64 664, ptr %21)
  %31 = sext i32 %27 to i64
  %32 = getelementptr ptr, ptr %21, i64 %31
  %33 = getelementptr i8, ptr %32, i64 72
  %34 = load ptr, ptr %33, align 8
  %35 = call ptr @behavior_wrapper(ptr %34, { ptr, ptr, ptr, i32 } %28, ptr nonnull %5)
  %36 = call i32 %35({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull %5) #25
  %37 = load ptr, ptr %14, align 8
  %38 = load ptr, ptr %13, align 8
  %39 = call ptr @llvm.invariant.start.p0(i64 664, ptr %38)
  %40 = load i32, ptr %16, align 8
  %41 = sext i32 %40 to i64
  %42 = getelementptr ptr, ptr %38, i64 %41
  %43 = getelementptr i8, ptr %42, i64 16
  %44 = load ptr, ptr %43, align 8
  %45 = load ptr, ptr %44, align 8
  %46 = call i32 %45(ptr %37) #24
  %47 = add i32 %46, %36
  %48 = call ptr @llvm.invariant.start.p0(i64 664, ptr %38)
  %49 = getelementptr i8, ptr %42, i64 24
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 %51(ptr %37) #24
  %.not = icmp slt i32 %47, %52
  br i1 %.not, label %._crit_edge, label %53

53:                                               ; preds = %4
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %38, 0
  %55 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %37, 1
  %56 = load ptr, ptr %15, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %40, 3
  store ptr @_parameterization_i32, ptr %6, align 8
  %59 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %60 = call ptr @llvm.invariant.start.p0(i64 664, ptr %38)
  %61 = getelementptr i8, ptr %42, i64 104
  %62 = load ptr, ptr %61, align 8
  store ptr @i32_typ, ptr %7, align 8
  %63 = call ptr @behavior_wrapper(ptr %62, { ptr, ptr, ptr, i32 } %58, ptr nonnull %7)
  call void %63({ ptr, ptr, ptr, i32 } %58, { ptr, ptr, ptr, i32 } %58, ptr nonnull %6, i32 %47) #25
  br label %._crit_edge

._crit_edge:                                      ; preds = %53, %4
  %64 = getelementptr inbounds i8, ptr %10, i64 8
  %65 = getelementptr inbounds i8, ptr %11, i64 8
  br label %._crit_edge2

._crit_edge2:                                     ; preds = %._crit_edge1, %._crit_edge
  %.0 = phi i32 [ 0, %._crit_edge ], [ %.1, %._crit_edge1 ]
  %66 = icmp slt i32 %.0, %36
  br i1 %66, label %67, label %._crit_edge1

67:                                               ; preds = %._crit_edge2
  %68 = add i32 %.0, %46
  %69 = load ptr, ptr %17, align 8
  %70 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %69, 0
  %71 = load ptr, ptr %18, align 8
  %72 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr %71, 1
  %73 = load ptr, ptr %19, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } %72, ptr %73, 2
  %75 = load i32, ptr %20, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, i32 %75, 3
  store ptr @_parameterization_i32, ptr %8, align 8
  %77 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %8)
  %78 = call ptr @llvm.invariant.start.p0(i64 664, ptr %69)
  %79 = sext i32 %75 to i64
  %80 = getelementptr ptr, ptr %69, i64 %79
  %81 = getelementptr i8, ptr %80, i64 136
  %82 = load ptr, ptr %81, align 8
  store ptr @i32_typ, ptr %9, align 8
  %83 = call ptr @behavior_wrapper(ptr %82, { ptr, ptr, ptr, i32 } %76, ptr nonnull %9)
  %84 = call { ptr, i160 } %83({ ptr, ptr, ptr, i32 } %76, { ptr, ptr, ptr, i32 } %76, ptr nonnull %8, i32 %.0) #25
  %.fca.0.extract22 = extractvalue { ptr, i160 } %84, 0
  %85 = load ptr, ptr %13, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %85, 0
  %87 = load ptr, ptr %14, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %87, 1
  %89 = load ptr, ptr %15, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, ptr %89, 2
  %91 = load i32, ptr %16, align 8
  %92 = insertvalue { ptr, ptr, ptr, i32 } %90, i32 %91, 3
  %93 = call ptr @llvm.invariant.start.p0(i64 664, ptr %85)
  %94 = sext i32 %91 to i64
  %95 = getelementptr ptr, ptr %85, i64 %94
  %96 = load ptr, ptr %95, align 8
  %97 = call ptr @typegetter_wrapper(ptr %96, ptr %87)
  store ptr @_parameterization_i32, ptr %10, align 8
  store ptr %97, ptr %64, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %10)
  %99 = call ptr @llvm.invariant.start.p0(i64 664, ptr %85)
  %100 = getelementptr i8, ptr %95, i64 144
  %101 = load ptr, ptr %100, align 8
  store ptr @i32_typ, ptr %11, align 8
  store ptr %.fca.0.extract22, ptr %65, align 8
  %102 = call ptr @behavior_wrapper(ptr %101, { ptr, ptr, ptr, i32 } %92, ptr nonnull %11)
  call void %102({ ptr, ptr, ptr, i32 } %92, { ptr, ptr, ptr, i32 } %92, ptr nonnull %10, i32 %68, { ptr, i160 } %84) #25
  %103 = add nsw i32 %.0, 1
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %67, %._crit_edge2
  %.1 = phi i32 [ %103, %67 ], [ %.0, %._crit_edge2 ]
  br i1 %66, label %._crit_edge2, label %104

104:                                              ; preds = %._crit_edge1
  %105 = load ptr, ptr %14, align 8
  %106 = load ptr, ptr %13, align 8
  %107 = call ptr @llvm.invariant.start.p0(i64 664, ptr %106)
  %108 = load i32, ptr %16, align 8
  %109 = sext i32 %108 to i64
  %110 = getelementptr ptr, ptr %106, i64 %109
  %111 = getelementptr i8, ptr %110, i64 16
  %112 = load ptr, ptr %111, align 8
  %113 = getelementptr i8, ptr %112, i64 8
  %114 = load ptr, ptr %113, align 8
  call void %114(ptr %105, i32 %47) #23
  %115 = load ptr, ptr %13, align 8
  store ptr %115, ptr %12, align 8
  %116 = getelementptr inbounds i8, ptr %12, i64 8
  %117 = load ptr, ptr %14, align 8
  store ptr %117, ptr %116, align 8
  %118 = getelementptr inbounds i8, ptr %12, i64 16
  %119 = load ptr, ptr %15, align 8
  store ptr %119, ptr %118, align 8
  %120 = getelementptr inbounds i8, ptr %12, i64 24
  %121 = load i32, ptr %16, align 8
  store i32 %121, ptr %120, align 8
  call void @set_offset(ptr nonnull %12, ptr nonnull @Array)
  %122 = load ptr, ptr %12, align 8
  %123 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %122, 0
  %124 = load ptr, ptr %116, align 8
  %125 = insertvalue { ptr, ptr, ptr, i32 } %123, ptr %124, 1
  %126 = load ptr, ptr %118, align 8
  %127 = insertvalue { ptr, ptr, ptr, i32 } %125, ptr %126, 2
  %128 = load i32, ptr %120, align 8
  %129 = insertvalue { ptr, ptr, ptr, i32 } %127, i32 %128, 3
  ret { ptr, ptr, ptr, i32 } %129
}

define void @Array_reserve_new_capacityi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Array)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 664, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 24
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call i32 %17(ptr %9) #24
  %.not = icmp sgt i32 %3, %18
  br i1 %.not, label %19, label %.loopexit

19:                                               ; preds = %4
  %20 = call ptr @llvm.invariant.start.p0(i64 664, ptr %10)
  %21 = getelementptr i8, ptr %16, i64 8
  %22 = load ptr, ptr %21, align 8
  call void %22(ptr %9, i32 %3) #23
  %23 = load ptr, ptr %6, align 8
  %24 = load ptr, ptr %5, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 664, ptr %24)
  %26 = load i32, ptr %8, align 8
  %27 = sext i32 %26 to i64
  %28 = getelementptr ptr, ptr %24, i64 %27
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %30, align 8
  %32 = call { ptr } %31(ptr %23) #24
  %.fca.0.extract22 = extractvalue { ptr } %32, 0
  %33 = call ptr @llvm.invariant.start.p0(i64 664, ptr %24)
  %34 = getelementptr i8, ptr %28, i64 24
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = call i32 %36(ptr %23) #24
  %38 = call ptr @llvm.invariant.start.p0(i64 664, ptr %24)
  %39 = load ptr, ptr %28, align 8
  %40 = call ptr @typegetter_wrapper(ptr %39, ptr %23)
  %41 = load ptr, ptr %40, align 8
  %42 = getelementptr i8, ptr %41, i64 72
  %43 = load ptr, ptr %42, align 8
  %44 = call { i64, i64 } @size_wrapper(ptr %43, ptr nonnull %40)
  %45 = extractvalue { i64, i64 } %44, 0
  %46 = sext i32 %37 to i64
  %47 = mul i64 %45, %46
  %48 = call ptr @bump_malloc(i64 %47)
  %49 = load ptr, ptr %6, align 8
  %50 = load ptr, ptr %5, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 664, ptr %50)
  %52 = load i32, ptr %8, align 8
  %53 = sext i32 %52 to i64
  %54 = getelementptr ptr, ptr %50, i64 %53
  %55 = getelementptr i8, ptr %54, i64 8
  %56 = load ptr, ptr %55, align 8
  %57 = getelementptr i8, ptr %56, i64 8
  %58 = load ptr, ptr %57, align 8
  %59 = insertvalue { ptr } undef, ptr %48, 0
  call void %58(ptr %49, { ptr } %59) #23
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %19
  %.0 = phi i32 [ 0, %19 ], [ %.1, %._crit_edge ]
  %60 = load ptr, ptr %6, align 8
  %61 = load ptr, ptr %5, align 8
  %62 = call ptr @llvm.invariant.start.p0(i64 664, ptr %61)
  %63 = load i32, ptr %8, align 8
  %64 = sext i32 %63 to i64
  %65 = getelementptr ptr, ptr %61, i64 %64
  %66 = getelementptr i8, ptr %65, i64 16
  %67 = load ptr, ptr %66, align 8
  %68 = load ptr, ptr %67, align 8
  %69 = call i32 %68(ptr %60) #24
  %70 = icmp slt i32 %.0, %69
  br i1 %70, label %71, label %._crit_edge

71:                                               ; preds = %._crit_edge1
  %72 = call ptr @llvm.invariant.start.p0(i64 664, ptr %61)
  %73 = load ptr, ptr %65, align 8
  %74 = call ptr @typegetter_wrapper(ptr %73, ptr %60)
  %75 = load ptr, ptr %74, align 8
  %76 = getelementptr i8, ptr %75, i64 72
  %77 = load ptr, ptr %76, align 8
  %78 = call { i64, i64 } @size_wrapper(ptr %77, ptr nonnull %74)
  %79 = extractvalue { i64, i64 } %78, 0
  %80 = sext i32 %.0 to i64
  %81 = mul i64 %79, %80
  %82 = getelementptr i8, ptr %.fca.0.extract22, i64 %81
  %83 = load ptr, ptr %74, align 8
  %84 = getelementptr i8, ptr %83, i64 56
  %85 = load ptr, ptr %84, align 8
  %86 = call { ptr, i160 } @box_wrapper(ptr %85, ptr %82, ptr nonnull %74)
  %87 = load ptr, ptr %6, align 8
  %88 = load ptr, ptr %5, align 8
  %89 = call ptr @llvm.invariant.start.p0(i64 664, ptr %88)
  %90 = load i32, ptr %8, align 8
  %91 = sext i32 %90 to i64
  %92 = getelementptr ptr, ptr %88, i64 %91
  %93 = getelementptr i8, ptr %92, i64 8
  %94 = load ptr, ptr %93, align 8
  %95 = load ptr, ptr %94, align 8
  %96 = call { ptr } %95(ptr %87) #24
  %.fca.0.extract7 = extractvalue { ptr } %96, 0
  %97 = call ptr @llvm.invariant.start.p0(i64 664, ptr %88)
  %98 = load ptr, ptr %92, align 8
  %99 = call ptr @typegetter_wrapper(ptr %98, ptr %87)
  %100 = load ptr, ptr %99, align 8
  %101 = getelementptr i8, ptr %100, i64 72
  %102 = load ptr, ptr %101, align 8
  %103 = call { i64, i64 } @size_wrapper(ptr %102, ptr nonnull %99)
  %104 = extractvalue { i64, i64 } %103, 0
  %105 = mul i64 %104, %80
  %106 = getelementptr i8, ptr %.fca.0.extract7, i64 %105
  %107 = load ptr, ptr %99, align 8
  %108 = getelementptr i8, ptr %107, i64 64
  %109 = load ptr, ptr %108, align 8
  call void @unbox_wrapper(ptr %109, { ptr, i160 } %86, ptr nonnull %99, ptr %106)
  %110 = add nsw i32 %.0, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %71, %._crit_edge1
  %.1 = phi i32 [ %110, %71 ], [ %.0, %._crit_edge1 ]
  br i1 %70, label %._crit_edge1, label %.loopexit

.loopexit:                                        ; preds = %._crit_edge, %4
  ret void
}

define { ptr, i160 } @Array__index_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %5 = alloca [1 x ptr], align 8
  %6 = alloca { ptr }, align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca { ptr }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @Array)
  %13 = load ptr, ptr %10, align 8
  %14 = load ptr, ptr %9, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 664, ptr %14)
  %16 = load i32, ptr %12, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = getelementptr i8, ptr %18, i64 16
  %20 = load ptr, ptr %19, align 8
  %21 = load ptr, ptr %20, align 8
  %22 = call i32 %21(ptr %13) #24
  %23 = add i32 %22, -1
  %24 = icmp sgt i32 %3, %23
  %25 = call ptr @llvm.invariant.start.p0(i64 664, ptr %14)
  %26 = call i32 %21(ptr %13) #24
  %27 = add i32 %26, %3
  %28 = icmp slt i32 %27, 0
  %.0 = select i1 %24, i1 true, i1 %28
  br i1 %.0, label %29, label %._crit_edge

29:                                               ; preds = %4
  %30 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %14, 0
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %13, 1
  %32 = load ptr, ptr %11, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %16, 3
  store ptr @_parameterization_i32, ptr %5, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %5)
  %36 = call ptr @llvm.invariant.start.p0(i64 664, ptr %14)
  %37 = getelementptr i8, ptr %18, i64 128
  %38 = load ptr, ptr %37, align 8
  store ptr @i32_typ, ptr %6, align 8
  %39 = call ptr @behavior_wrapper(ptr %38, { ptr, ptr, ptr, i32 } %34, ptr nonnull %6)
  call void %39({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %5, i32 %3) #25
  br label %._crit_edge

._crit_edge:                                      ; preds = %29, %4
  %40 = icmp slt i32 %3, 0
  br i1 %40, label %41, label %._crit_edge1

41:                                               ; preds = %._crit_edge
  %42 = load ptr, ptr %10, align 8
  %43 = load ptr, ptr %9, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 664, ptr %43)
  %45 = load i32, ptr %12, align 8
  %46 = sext i32 %45 to i64
  %47 = getelementptr ptr, ptr %43, i64 %46
  %48 = getelementptr i8, ptr %47, i64 16
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %49, align 8
  %51 = call i32 %50(ptr %42) #24
  %52 = add i32 %51, %3
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %41, %._crit_edge
  %.027 = phi i32 [ %52, %41 ], [ %3, %._crit_edge ]
  %53 = load ptr, ptr %9, align 8
  %54 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %53, 0
  %55 = load ptr, ptr %10, align 8
  %56 = insertvalue { ptr, ptr, ptr, i32 } %54, ptr %55, 1
  %57 = load ptr, ptr %11, align 8
  %58 = insertvalue { ptr, ptr, ptr, i32 } %56, ptr %57, 2
  %59 = load i32, ptr %12, align 8
  %60 = insertvalue { ptr, ptr, ptr, i32 } %58, i32 %59, 3
  store ptr @_parameterization_i32, ptr %7, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %62 = call ptr @llvm.invariant.start.p0(i64 664, ptr %53)
  %63 = sext i32 %59 to i64
  %64 = getelementptr ptr, ptr %53, i64 %63
  %65 = getelementptr i8, ptr %64, i64 136
  %66 = load ptr, ptr %65, align 8
  store ptr @i32_typ, ptr %8, align 8
  %67 = call ptr @behavior_wrapper(ptr %66, { ptr, ptr, ptr, i32 } %60, ptr nonnull %8)
  %68 = call { ptr, i160 } %67({ ptr, ptr, ptr, i32 } %60, { ptr, ptr, ptr, i32 } %60, ptr nonnull %7, i32 %.027) #25
  ret { ptr, i160 } %68
}

define void @Array__set_index_xi32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, { ptr, i160 } %4) {
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca [2 x ptr], align 8
  %9 = alloca { ptr, ptr }, align 8
  %.fca.0.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract16, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract17, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Array)
  %14 = load ptr, ptr %11, align 8
  %15 = load ptr, ptr %10, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 664, ptr %15)
  %17 = load i32, ptr %13, align 8
  %18 = sext i32 %17 to i64
  %19 = getelementptr ptr, ptr %15, i64 %18
  %20 = getelementptr i8, ptr %19, i64 16
  %21 = load ptr, ptr %20, align 8
  %22 = load ptr, ptr %21, align 8
  %23 = call i32 %22(ptr %14) #24
  %24 = add i32 %23, -1
  %25 = icmp sgt i32 %3, %24
  %26 = call ptr @llvm.invariant.start.p0(i64 664, ptr %15)
  %27 = call i32 %22(ptr %14) #24
  %28 = add i32 %27, %3
  %29 = icmp slt i32 %28, 0
  %.0 = select i1 %25, i1 true, i1 %29
  br i1 %.0, label %30, label %._crit_edge

30:                                               ; preds = %5
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %15, 0
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %14, 1
  %33 = load ptr, ptr %12, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 2
  %35 = insertvalue { ptr, ptr, ptr, i32 } %34, i32 %17, 3
  store ptr @_parameterization_i32, ptr %6, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %37 = call ptr @llvm.invariant.start.p0(i64 664, ptr %15)
  %38 = getelementptr i8, ptr %19, i64 128
  %39 = load ptr, ptr %38, align 8
  store ptr @i32_typ, ptr %7, align 8
  %40 = call ptr @behavior_wrapper(ptr %39, { ptr, ptr, ptr, i32 } %35, ptr nonnull %7)
  call void %40({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %6, i32 %3) #25
  br label %._crit_edge

._crit_edge:                                      ; preds = %30, %5
  %41 = icmp slt i32 %3, 0
  br i1 %41, label %42, label %._crit_edge1

42:                                               ; preds = %._crit_edge
  %43 = load ptr, ptr %11, align 8
  %44 = load ptr, ptr %10, align 8
  %45 = call ptr @llvm.invariant.start.p0(i64 664, ptr %44)
  %46 = load i32, ptr %13, align 8
  %47 = sext i32 %46 to i64
  %48 = getelementptr ptr, ptr %44, i64 %47
  %49 = getelementptr i8, ptr %48, i64 16
  %50 = load ptr, ptr %49, align 8
  %51 = load ptr, ptr %50, align 8
  %52 = call i32 %51(ptr %43) #24
  %53 = add i32 %52, %3
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %42, %._crit_edge
  %.027 = phi i32 [ %53, %42 ], [ %3, %._crit_edge ]
  %.fca.0.extract = extractvalue { ptr, i160 } %4, 0
  %54 = load ptr, ptr %10, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %54, 0
  %56 = load ptr, ptr %11, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 1
  %58 = load ptr, ptr %12, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %58, 2
  %60 = load i32, ptr %13, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, i32 %60, 3
  %62 = call ptr @llvm.invariant.start.p0(i64 664, ptr %54)
  %63 = sext i32 %60 to i64
  %64 = getelementptr ptr, ptr %54, i64 %63
  %65 = load ptr, ptr %64, align 8
  %66 = call ptr @typegetter_wrapper(ptr %65, ptr %56)
  store ptr @_parameterization_i32, ptr %8, align 8
  %67 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %66, ptr %67, align 8
  %68 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %8)
  %69 = call ptr @llvm.invariant.start.p0(i64 664, ptr %54)
  %70 = getelementptr i8, ptr %64, i64 144
  %71 = load ptr, ptr %70, align 8
  store ptr @i32_typ, ptr %9, align 8
  %72 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.0.extract, ptr %72, align 8
  %73 = call ptr @behavior_wrapper(ptr %71, { ptr, ptr, ptr, i32 } %61, ptr nonnull %9)
  call void %73({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr nonnull %8, i32 %.027, { ptr, i160 } %4) #25
  ret void
}

define void @Array_throw_oob_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract22 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract23 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract22, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract23, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Array)
  %10 = alloca [1 x ptr], align 8
  store ptr @Exception, ptr %10, align 8
  %11 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Exception, ptr nonnull %10)
  %12 = extractvalue { i64, i64 } %11, 0
  %13 = call ptr @bump_malloc(i64 %12)
  %14 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Exception, ptr undef, ptr undef, i32 undef }, ptr %13, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr undef, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 10, 3
  %17 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %18 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Exception)
  %19 = call ptr @behavior_wrapper(ptr nonnull @Exception_B_init_, { ptr, ptr, ptr, i32 } %16, ptr nonnull %5)
  call void %19({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %5) #25
  %20 = call ptr @bump_malloc(i64 16)
  store <15 x i8> <i8 122, i8 114, i8 119, i8 99, i8 105, i8 110, i8 105, i8 116, i8 116, i8 107, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %20, align 16
  %21 = alloca [1 x ptr], align 8
  store ptr @String, ptr %21, align 8
  %22 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %21)
  %23 = extractvalue { i64, i64 } %22, 0
  %24 = call ptr @bump_malloc(i64 %23)
  %25 = insertvalue { ptr } undef, ptr %20, 0
  %26 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %24, 1
  %27 = insertvalue { ptr, ptr, ptr, i32 } %26, ptr undef, 2
  %28 = insertvalue { ptr, ptr, ptr, i32 } %27, i32 10, 3
  %29 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %29, i64 8
  store ptr @_parameterization_i32, ptr %30, align 8
  %31 = getelementptr inbounds i8, ptr %29, i64 16
  store ptr @_parameterization_i32, ptr %31, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %29)
  %33 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %34 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %34, align 8
  %35 = getelementptr inbounds i8, ptr %34, i64 8
  store ptr @i32_typ, ptr %35, align 8
  %36 = getelementptr inbounds i8, ptr %34, i64 16
  store ptr @i32_typ, ptr %36, align 8
  %37 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %28, ptr nonnull %34)
  call void %37({ ptr, ptr, ptr, i32 } %28, { ptr, ptr, ptr, i32 } %28, ptr nonnull %29, { ptr } %25, i32 15, i32 16) #25
  %38 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %38, align 8
  %39 = getelementptr inbounds i8, ptr %38, i64 8
  store ptr %24, ptr %39, align 8
  %40 = getelementptr inbounds i8, ptr %38, i64 16
  %41 = getelementptr inbounds i8, ptr %38, i64 24
  store i32 10, ptr %41, align 8
  call void @set_offset(ptr nonnull %38, ptr nonnull @String)
  %42 = load ptr, ptr %38, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %42, 0
  %44 = load ptr, ptr %39, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %44, 1
  %46 = load ptr, ptr %40, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 2
  %48 = load i32, ptr %41, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, i32 %48, 3
  %50 = alloca [2 x ptr], align 8
  store ptr @_parameterization_i32, ptr %50, align 8
  %51 = getelementptr inbounds i8, ptr %50, i64 8
  store ptr @_parameterization_String, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %50)
  %53 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Exception)
  %54 = alloca { ptr, ptr }, align 8
  store ptr @i32_typ, ptr %54, align 8
  %55 = getelementptr inbounds i8, ptr %54, i64 8
  store ptr %42, ptr %55, align 8
  %56 = call ptr @behavior_wrapper(ptr nonnull @Exception_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %16, ptr nonnull %54)
  call void %56({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %50, i32 669, { ptr, ptr, ptr, i32 } %49) #25
  %57 = ptrtoint ptr %13 to i64
  %.sroa.4.8.insert.ext = zext i64 %57 to i160
  %.sroa.4.8.insert.insert = or disjoint i160 %.sroa.4.8.insert.ext, 3402823669209384634633746074317682114560
  %58 = insertvalue { ptr, i160 } { ptr @Exception, i160 undef }, i160 %.sroa.4.8.insert.insert, 1
  %59 = call ptr @get_current_coroutine()
  %60 = getelementptr i8, ptr %59, i64 48
  store { ptr, i160 } %58, ptr %60, align 8
  call void @coroutine_yield(ptr %59)
  ret void
}

define { ptr, i160 } @Array_unchecked_index_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract4, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract5, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Array)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 664, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call { ptr } %17(ptr %9) #24
  %.fca.0.extract1 = extractvalue { ptr } %18, 0
  %19 = call ptr @llvm.invariant.start.p0(i64 664, ptr %10)
  %20 = load ptr, ptr %14, align 8
  %21 = call ptr @typegetter_wrapper(ptr %20, ptr %9)
  %22 = load ptr, ptr %21, align 8
  %23 = getelementptr i8, ptr %22, i64 72
  %24 = load ptr, ptr %23, align 8
  %25 = call { i64, i64 } @size_wrapper(ptr %24, ptr nonnull %21)
  %26 = extractvalue { i64, i64 } %25, 0
  %27 = sext i32 %3 to i64
  %28 = mul i64 %26, %27
  %29 = getelementptr i8, ptr %.fca.0.extract1, i64 %28
  %30 = load ptr, ptr %21, align 8
  %31 = getelementptr i8, ptr %30, i64 56
  %32 = load ptr, ptr %31, align 8
  %33 = call { ptr, i160 } @box_wrapper(ptr %32, ptr %29, ptr nonnull %21)
  ret { ptr, i160 } %33
}

define void @Array_unchecked_insert_xi32_valueT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, { ptr, i160 } %4) {
  %.fca.0.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract6, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract7, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Array)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 664, ptr %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  %18 = load ptr, ptr %17, align 8
  %19 = call { ptr } %18(ptr %10) #24
  %.fca.0.extract = extractvalue { ptr } %19, 0
  %20 = call ptr @llvm.invariant.start.p0(i64 664, ptr %11)
  %21 = load ptr, ptr %15, align 8
  %22 = call ptr @typegetter_wrapper(ptr %21, ptr %10)
  %23 = load ptr, ptr %22, align 8
  %24 = getelementptr i8, ptr %23, i64 72
  %25 = load ptr, ptr %24, align 8
  %26 = call { i64, i64 } @size_wrapper(ptr %25, ptr nonnull %22)
  %27 = extractvalue { i64, i64 } %26, 0
  %28 = sext i32 %3 to i64
  %29 = mul i64 %27, %28
  %30 = getelementptr i8, ptr %.fca.0.extract, i64 %29
  %31 = load ptr, ptr %22, align 8
  %32 = getelementptr i8, ptr %31, i64 64
  %33 = load ptr, ptr %32, align 8
  call void @unbox_wrapper(ptr %33, { ptr, i160 } %4, ptr nonnull %22, ptr %30)
  ret void
}

define { ptr, ptr, ptr, i32 } @Array_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Array)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 664, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = call ptr @typegetter_wrapper(ptr %14, ptr %8)
  %16 = alloca [2 x ptr], align 8
  store ptr @ArrayIterator, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %16, i64 8
  store ptr %15, ptr %17, align 8
  %18 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ArrayIterator, ptr nonnull %16)
  %19 = extractvalue { i64, i64 } %18, 0
  %20 = call ptr @bump_malloc(i64 %19)
  store ptr %15, ptr %20, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %20)
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %23 = load ptr, ptr %4, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr inbounds i8, ptr %22, i64 8
  %25 = load ptr, ptr %5, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr inbounds i8, ptr %22, i64 16
  %27 = load ptr, ptr %6, align 8
  store ptr %27, ptr %26, align 8
  %28 = getelementptr inbounds i8, ptr %22, i64 24
  %29 = load i32, ptr %7, align 8
  store i32 %29, ptr %28, align 8
  call void @set_offset(ptr nonnull %22, ptr nonnull @Array)
  %30 = load ptr, ptr %22, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %24, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %26, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %28, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  %38 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ArrayIterator, ptr undef, ptr undef, i32 undef }, ptr %20, 1
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr undef, 2
  %40 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 10, 3
  %41 = load ptr, ptr %5, align 8
  %42 = load ptr, ptr %4, align 8
  %43 = call ptr @llvm.invariant.start.p0(i64 664, ptr %42)
  %44 = load i32, ptr %7, align 8
  %45 = sext i32 %44 to i64
  %46 = getelementptr ptr, ptr %42, i64 %45
  %47 = load ptr, ptr %46, align 8
  %48 = call ptr @typegetter_wrapper(ptr %47, ptr %41)
  %49 = call ptr @bump_malloc(i64 24)
  %50 = getelementptr i8, ptr %49, i64 8
  store ptr %48, ptr %50, align 8
  %51 = getelementptr i8, ptr %49, i64 16
  store ptr null, ptr %51, align 8
  %52 = call ptr @llvm.invariant.start.p0(i64 16, ptr %49)
  store ptr @Array, ptr %49, align 8
  %53 = alloca [1 x ptr], align 8
  store ptr %49, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %53)
  %55 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @ArrayIterator)
  %56 = alloca { ptr }, align 8
  store ptr %30, ptr %56, align 8
  %57 = call ptr @behavior_wrapper(ptr nonnull @ArrayIterator_B_init_arrayArrayT, { ptr, ptr, ptr, i32 } %40, ptr nonnull %56)
  call void %57({ ptr, ptr, ptr, i32 } %40, { ptr, ptr, ptr, i32 } %40, ptr nonnull %53, { ptr, ptr, ptr, i32 } %37) #25
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ArrayIterator, ptr %58, align 8
  %59 = getelementptr inbounds i8, ptr %58, i64 8
  store ptr %20, ptr %59, align 8
  %60 = getelementptr inbounds i8, ptr %58, i64 16
  %61 = getelementptr inbounds i8, ptr %58, i64 24
  store i32 10, ptr %61, align 8
  call void @set_offset(ptr nonnull %58, ptr nonnull @Iterator)
  %62 = load ptr, ptr %58, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %59, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %60, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %61, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  ret { ptr, ptr, ptr, i32 } %69
}

define { ptr, ptr, ptr, i32 } @Array_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Array)
  %8 = call ptr @bump_malloc(i64 6)
  store <5 x i8> <i8 65, i8 114, i8 114, i8 97, i8 121>, ptr %8, align 8
  %9 = alloca [1 x ptr], align 8
  store ptr @String, ptr %9, align 8
  %10 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %9)
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = call ptr @bump_malloc(i64 %11)
  %13 = insertvalue { ptr } undef, ptr %8, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %12, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr undef, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 10, 3
  %17 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr @_parameterization_i32, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %17, i64 16
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %17)
  %21 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %22 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr @i32_typ, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %22, i64 16
  store ptr @i32_typ, ptr %24, align 8
  %25 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %16, ptr nonnull %22)
  call void %25({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %17, { ptr } %13, i32 5, i32 6) #25
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr %12, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  %29 = getelementptr inbounds i8, ptr %26, i64 24
  store i32 10, ptr %29, align 8
  call void @set_offset(ptr nonnull %26, ptr nonnull @String)
  %30 = load ptr, ptr %26, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %27, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %28, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %29, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ArrayIterator(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 48, i64 8 }
}

define ptr @ArrayIterator_B_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 120
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @ArrayIterator_field_ArrayIterator_0(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ArrayIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ArrayIterator_init_arrayArrayT({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract4, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ArrayIterator)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @Array)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = load ptr, ptr %9, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 8
  %16 = load ptr, ptr %10, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %13, i64 16
  %18 = load ptr, ptr %11, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %13, i64 24
  %20 = load i32, ptr %12, align 8
  store i32 %20, ptr %19, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @Array)
  %21 = load ptr, ptr %6, align 8
  %22 = load ptr, ptr %5, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 80, ptr %22)
  %24 = load i32, ptr %8, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  %29 = getelementptr i8, ptr %28, i64 8
  %30 = load ptr, ptr %29, align 8
  %31 = load ptr, ptr %13, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = load ptr, ptr %15, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = load ptr, ptr %17, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 2
  %37 = load i32, ptr %19, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %37, 3
  call void %30(ptr %21, { ptr, ptr, ptr, i32 } %38) #23
  %39 = load ptr, ptr %6, align 8
  %40 = load ptr, ptr %5, align 8
  %41 = call ptr @llvm.invariant.start.p0(i64 80, ptr %40)
  %42 = load i32, ptr %8, align 8
  %43 = sext i32 %42 to i64
  %44 = getelementptr ptr, ptr %40, i64 %43
  %45 = getelementptr i8, ptr %44, i64 16
  %46 = load ptr, ptr %45, align 8
  %47 = getelementptr i8, ptr %46, i64 8
  %48 = load ptr, ptr %47, align 8
  call void %48(ptr %39, i32 0) #23
  ret void
}

define { ptr, i160 } @ArrayIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract10, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract12, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract14, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract16, ptr %11, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @ArrayIterator)
  %12 = load ptr, ptr %9, align 8
  %13 = load ptr, ptr %8, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 80, ptr %13)
  %15 = load i32, ptr %11, align 8
  %16 = sext i32 %15 to i64
  %17 = getelementptr ptr, ptr %13, i64 %16
  %18 = getelementptr i8, ptr %17, i64 16
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call i32 %20(ptr %12) #24
  %22 = call ptr @llvm.invariant.start.p0(i64 80, ptr %13)
  %23 = getelementptr i8, ptr %17, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call { ptr, ptr, ptr, i32 } %25(ptr %12) #24
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 0
  store ptr %.fca.0.extract, ptr %27, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %27, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %27, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %26, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %27, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %27, ptr nonnull @Array)
  %28 = load ptr, ptr %27, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %28, 0
  %30 = load ptr, ptr %.fca.1.gep, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %30, 1
  %32 = load ptr, ptr %.fca.2.gep, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 2
  %34 = load i32, ptr %.fca.3.gep, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %34, 3
  %36 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %37 = call ptr @llvm.invariant.start.p0(i64 664, ptr %28)
  %38 = sext i32 %34 to i64
  %39 = getelementptr ptr, ptr %28, i64 %38
  %40 = getelementptr i8, ptr %39, i64 72
  %41 = load ptr, ptr %40, align 8
  %42 = call ptr @behavior_wrapper(ptr %41, { ptr, ptr, ptr, i32 } %35, ptr nonnull %4)
  %43 = call i32 %42({ ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %35, ptr nonnull %4) #25
  %.not = icmp slt i32 %21, %43
  br i1 %.not, label %44, label %91

44:                                               ; preds = %3
  %45 = load ptr, ptr %9, align 8
  %46 = load ptr, ptr %8, align 8
  %47 = call ptr @llvm.invariant.start.p0(i64 80, ptr %46)
  %48 = load i32, ptr %11, align 8
  %49 = sext i32 %48 to i64
  %50 = getelementptr ptr, ptr %46, i64 %49
  %51 = getelementptr i8, ptr %50, i64 16
  %52 = load ptr, ptr %51, align 8
  %53 = load ptr, ptr %52, align 8
  %54 = call i32 %53(ptr %45) #24
  %55 = add i32 %54, 1
  %56 = call ptr @llvm.invariant.start.p0(i64 80, ptr %46)
  %57 = getelementptr i8, ptr %52, i64 8
  %58 = load ptr, ptr %57, align 8
  call void %58(ptr %45, i32 %55) #23
  %59 = load ptr, ptr %9, align 8
  %60 = load ptr, ptr %8, align 8
  %61 = call ptr @llvm.invariant.start.p0(i64 80, ptr %60)
  %62 = load i32, ptr %11, align 8
  %63 = sext i32 %62 to i64
  %64 = getelementptr ptr, ptr %60, i64 %63
  %65 = getelementptr i8, ptr %64, i64 16
  %66 = load ptr, ptr %65, align 8
  %67 = load ptr, ptr %66, align 8
  %68 = call i32 %67(ptr %59) #24
  %69 = add i32 %68, -1
  %70 = call ptr @llvm.invariant.start.p0(i64 80, ptr %60)
  %71 = getelementptr i8, ptr %64, i64 8
  %72 = load ptr, ptr %71, align 8
  %73 = load ptr, ptr %72, align 8
  %74 = call { ptr, ptr, ptr, i32 } %73(ptr %59) #24
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  store ptr %.fca.0.extract26, ptr %5, align 8
  %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %.fca.1.gep29 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract28, ptr %.fca.1.gep29, align 8
  %.fca.2.extract30 = extractvalue { ptr, ptr, ptr, i32 } %74, 2
  %.fca.2.gep31 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract30, ptr %.fca.2.gep31, align 8
  %.fca.3.extract32 = extractvalue { ptr, ptr, ptr, i32 } %74, 3
  %.fca.3.gep33 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract32, ptr %.fca.3.gep33, align 8
  call void @assume_offset(ptr nonnull %5, ptr nonnull @Array)
  %75 = load ptr, ptr %5, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = load ptr, ptr %.fca.1.gep29, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 1
  %79 = load ptr, ptr %.fca.2.gep31, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %79, 2
  %81 = load i32, ptr %.fca.3.gep33, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %81, 3
  store ptr @_parameterization_i32, ptr %6, align 8
  %83 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %84 = call ptr @llvm.invariant.start.p0(i64 664, ptr %75)
  %85 = sext i32 %81 to i64
  %86 = getelementptr ptr, ptr %75, i64 %85
  %87 = getelementptr i8, ptr %86, i64 136
  %88 = load ptr, ptr %87, align 8
  store ptr @i32_typ, ptr %7, align 8
  %89 = call ptr @behavior_wrapper(ptr %88, { ptr, ptr, ptr, i32 } %82, ptr nonnull %7)
  %90 = call { ptr, i160 } %89({ ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %82, ptr nonnull %6, i32 %69) #25
  %.fca.0.extract20 = extractvalue { ptr, i160 } %90, 0
  %.fca.1.extract22 = extractvalue { ptr, i160 } %90, 1
  br label %91

91:                                               ; preds = %44, %3
  %.reg2mem21.sroa.0.0 = phi ptr [ %.fca.0.extract20, %44 ], [ @nil_typ, %3 ]
  %.reg2mem21.sroa.3.0 = phi i160 [ %.fca.1.extract22, %44 ], [ undef, %3 ]
  %.reload22.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem21.sroa.0.0, 0
  %.reload22.fca.1.insert = insertvalue { ptr, i160 } %.reload22.fca.0.insert, i160 %.reg2mem21.sroa.3.0, 1
  ret { ptr, i160 } %.reload22.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @ArrayIterator_getter_index(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ArrayIterator_setter_index(ptr nocapture writeonly %0, i32 %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 40
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ArrayIterator_getter_array(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ArrayIterator_setter_array(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Array_getter_capacity(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 20
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_capacity(ptr nocapture writeonly %0, i32 %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 20
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Array_getter_length(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_length(ptr nocapture writeonly %0, i32 %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 16
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @Array_getter_buffer(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Array_setter_buffer(ptr nocapture writeonly %0, { ptr } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Range(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 12, i64 4 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef nonnull ptr @Range_field_Range_0(ptr nocapture readnone %0) #6 {
  ret ptr @_parameterization_i32
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_init_endi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_init_starti32_endi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 232
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_step_stepi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 240
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 248
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 256
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 264
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 272
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 280
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 288
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Range_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 296
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Range_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 304
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @Range_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 312
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @Range_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 320
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @Range_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 328
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @Range_init_endi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Range)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 440, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  call void %18(ptr %9, i32 %3) #23
  %19 = load ptr, ptr %6, align 8
  %20 = load ptr, ptr %5, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 440, ptr %20)
  %22 = load i32, ptr %8, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  call void %27(ptr %19, i32 0) #23
  %28 = load ptr, ptr %6, align 8
  %29 = load ptr, ptr %5, align 8
  %30 = call ptr @llvm.invariant.start.p0(i64 440, ptr %29)
  %31 = load i32, ptr %8, align 8
  %32 = sext i32 %31 to i64
  %33 = getelementptr ptr, ptr %29, i64 %32
  %34 = getelementptr i8, ptr %33, i64 16
  %35 = load ptr, ptr %34, align 8
  %36 = getelementptr i8, ptr %35, i64 8
  %37 = load ptr, ptr %36, align 8
  call void %37(ptr %28, i32 1) #23
  ret void
}

define void @Range_init_starti32_endi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, i32 %4) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Range)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 440, ptr %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  call void %18(ptr %10, i32 %3) #23
  %19 = load ptr, ptr %7, align 8
  %20 = load ptr, ptr %6, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 440, ptr %20)
  %22 = load i32, ptr %9, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = getelementptr i8, ptr %24, i64 8
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  call void %28(ptr %19, i32 %4) #23
  %29 = load ptr, ptr %7, align 8
  %30 = load ptr, ptr %6, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 440, ptr %30)
  %32 = load i32, ptr %9, align 8
  %33 = sext i32 %32 to i64
  %34 = getelementptr ptr, ptr %30, i64 %33
  %35 = getelementptr i8, ptr %34, i64 16
  %36 = load ptr, ptr %35, align 8
  %37 = getelementptr i8, ptr %36, i64 8
  %38 = load ptr, ptr %37, align 8
  call void %38(ptr %29, i32 1) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @Range_step_stepi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Range)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 440, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 16
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  call void %18(ptr %9, i32 %3) #23
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = load ptr, ptr %5, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr inbounds i8, ptr %19, i64 8
  %22 = load ptr, ptr %6, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr inbounds i8, ptr %19, i64 16
  %24 = load ptr, ptr %7, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr inbounds i8, ptr %19, i64 24
  %26 = load i32, ptr %8, align 8
  store i32 %26, ptr %25, align 8
  call void @set_offset(ptr nonnull %19, ptr nonnull @Range)
  %27 = load ptr, ptr %19, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = load ptr, ptr %21, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 1
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %25, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  ret { ptr, ptr, ptr, i32 } %34
}

define { ptr, ptr, ptr, i32 } @Range_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Range)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 440, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #24
  %17 = call ptr @llvm.invariant.start.p0(i64 440, ptr %9)
  %18 = getelementptr i8, ptr %13, i64 8
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call i32 %20(ptr %8) #24
  %22 = call ptr @llvm.invariant.start.p0(i64 440, ptr %9)
  %23 = getelementptr i8, ptr %13, i64 16
  %24 = load ptr, ptr %23, align 8
  %25 = load ptr, ptr %24, align 8
  %26 = call i32 %25(ptr %8) #24
  %27 = alloca [1 x ptr], align 8
  store ptr @RangeIterator, ptr %27, align 8
  %28 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_RangeIterator, ptr nonnull %27)
  %29 = extractvalue { i64, i64 } %28, 0
  %30 = call ptr @bump_malloc(i64 %29)
  %31 = load ptr, ptr %5, align 8
  %32 = load ptr, ptr %4, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 440, ptr %32)
  %34 = load i32, ptr %7, align 8
  %35 = sext i32 %34 to i64
  %36 = getelementptr ptr, ptr %32, i64 %35
  %37 = load ptr, ptr %36, align 8
  %38 = load ptr, ptr %37, align 8
  %39 = call i32 %38(ptr %31) #24
  %40 = call ptr @llvm.invariant.start.p0(i64 440, ptr %32)
  %41 = getelementptr i8, ptr %36, i64 8
  %42 = load ptr, ptr %41, align 8
  %43 = load ptr, ptr %42, align 8
  %44 = call i32 %43(ptr %31) #24
  %45 = call ptr @llvm.invariant.start.p0(i64 440, ptr %32)
  %46 = getelementptr i8, ptr %36, i64 16
  %47 = load ptr, ptr %46, align 8
  %48 = load ptr, ptr %47, align 8
  %49 = call i32 %48(ptr %31) #24
  %50 = insertvalue { ptr, ptr, ptr, i32 } { ptr @RangeIterator, ptr undef, ptr undef, i32 undef }, ptr %30, 1
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr undef, 2
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 10, 3
  %53 = alloca [3 x ptr], align 8
  store ptr @_parameterization_i32, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %53, i64 8
  store ptr @_parameterization_i32, ptr %54, align 8
  %55 = getelementptr inbounds i8, ptr %53, i64 16
  store ptr @_parameterization_i32, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %53)
  %57 = call ptr @llvm.invariant.start.p0(i64 88, ptr nonnull @RangeIterator)
  %58 = alloca { ptr, ptr, ptr }, align 8
  store ptr @i32_typ, ptr %58, align 8
  %59 = getelementptr inbounds i8, ptr %58, i64 8
  store ptr @i32_typ, ptr %59, align 8
  %60 = getelementptr inbounds i8, ptr %58, i64 16
  store ptr @i32_typ, ptr %60, align 8
  %61 = call ptr @behavior_wrapper(ptr nonnull @RangeIterator_B_init_counteri32_endi32_stepi32, { ptr, ptr, ptr, i32 } %52, ptr nonnull %58)
  call void %61({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr nonnull %53, i32 %39, i32 %44, i32 %49) #25
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @RangeIterator, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %62, i64 8
  store ptr %30, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %62, i64 16
  %65 = getelementptr inbounds i8, ptr %62, i64 24
  store i32 10, ptr %65, align 8
  call void @set_offset(ptr nonnull %62, ptr nonnull @Iterator)
  %66 = load ptr, ptr %62, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = load ptr, ptr %63, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 1
  %70 = load ptr, ptr %64, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %70, 2
  %72 = load i32, ptr %65, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %72, 3
  ret { ptr, ptr, ptr, i32 } %73
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_RangeIterator(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 12, i64 4 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @RangeIterator_B_init_counteri32_endi32_stepi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef nonnull ptr @RangeIterator_field_RangeIterator_0(ptr nocapture readnone %0) #6 {
  ret ptr @_parameterization_i32
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @RangeIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @RangeIterator_init_counteri32_endi32_stepi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, i32 %4, i32 %5) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @RangeIterator)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 88, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  call void %19(ptr %11, i32 %3) #23
  %20 = load ptr, ptr %8, align 8
  %21 = load ptr, ptr %7, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 88, ptr %21)
  %23 = load i32, ptr %10, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr ptr, ptr %21, i64 %24
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %20, i32 %4) #23
  %30 = load ptr, ptr %8, align 8
  %31 = load ptr, ptr %7, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 88, ptr %31)
  %33 = load i32, ptr %10, align 8
  %34 = sext i32 %33 to i64
  %35 = getelementptr ptr, ptr %31, i64 %34
  %36 = getelementptr i8, ptr %35, i64 16
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  call void %39(ptr %30, i32 %5) #23
  ret void
}

define { ptr, i160 } @RangeIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract4, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract5, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @RangeIterator)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 88, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #24
  %17 = call ptr @llvm.invariant.start.p0(i64 88, ptr %9)
  %18 = getelementptr i8, ptr %13, i64 8
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call i32 %20(ptr %8) #24
  %22 = icmp sgt i32 %16, %21
  br i1 %22, label %50, label %23

23:                                               ; preds = %3
  %24 = call ptr @llvm.invariant.start.p0(i64 88, ptr %9)
  %25 = call i32 %15(ptr %8) #24
  %26 = call ptr @llvm.invariant.start.p0(i64 88, ptr %9)
  %27 = getelementptr i8, ptr %13, i64 16
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %8) #24
  %31 = add i32 %30, %25
  %32 = call ptr @llvm.invariant.start.p0(i64 88, ptr %9)
  %33 = getelementptr i8, ptr %14, i64 8
  %34 = load ptr, ptr %33, align 8
  call void %34(ptr %8, i32 %31) #23
  %35 = load ptr, ptr %5, align 8
  %36 = load ptr, ptr %4, align 8
  %37 = call ptr @llvm.invariant.start.p0(i64 88, ptr %36)
  %38 = load i32, ptr %7, align 8
  %39 = sext i32 %38 to i64
  %40 = getelementptr ptr, ptr %36, i64 %39
  %41 = load ptr, ptr %40, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = call i32 %42(ptr %35) #24
  %44 = call ptr @llvm.invariant.start.p0(i64 88, ptr %36)
  %45 = getelementptr i8, ptr %40, i64 16
  %46 = load ptr, ptr %45, align 8
  %47 = load ptr, ptr %46, align 8
  %48 = call i32 %47(ptr %35) #24
  %49 = sub i32 %43, %48
  %.sroa.07.0.insert.ext = zext i32 %49 to i160
  br label %50

50:                                               ; preds = %23, %3
  %.reg2mem23.sroa.0.0 = phi ptr [ @i32_typ, %23 ], [ @nil_typ, %3 ]
  %.reg2mem23.sroa.3.0 = phi i160 [ %.sroa.07.0.insert.ext, %23 ], [ undef, %3 ]
  %.reload24.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem23.sroa.0.0, 0
  %.reload24.fca.1.insert = insertvalue { ptr, i160 } %.reload24.fca.0.insert, i160 %.reg2mem23.sroa.3.0, 1
  ret { ptr, i160 } %.reload24.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @RangeIterator_getter_step(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @RangeIterator_setter_step(ptr nocapture writeonly %0, i32 %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @RangeIterator_getter_end(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 4
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @RangeIterator_setter_end(ptr nocapture writeonly %0, i32 %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 4
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @RangeIterator_getter_counter(ptr nocapture readonly %0) #1 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @RangeIterator_setter_counter(ptr nocapture writeonly %0, i32 %1) #9 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Range_getter_step(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Range_setter_step(ptr nocapture writeonly %0, i32 %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Range_getter_end(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 4
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Range_setter_end(ptr nocapture writeonly %0, i32 %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 4
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Range_getter_start(ptr nocapture readonly %0) #1 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Range_setter_start(ptr nocapture writeonly %0, i32 %1) #9 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FileSystemError(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 72, i64 8 }
}

define ptr @FileSystemError_B_init_messageString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 144
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FileSystemError_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @FileSystemError_B_set_info_line_numberi32_file_nameString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = getelementptr i8, ptr %1, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = getelementptr i8, ptr %5, i64 8
  %7 = getelementptr i8, ptr %5, i64 16
  %8 = getelementptr i8, ptr %5, i64 24
  %9 = getelementptr i8, ptr %5, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %13)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 160
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FileSystemError_B_report_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FileSystemError_B_print_message_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FileSystemError_getter_message(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 40
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 48
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 56
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 64
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FileSystemError_setter_message(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 40
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 56
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 64
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FileSystemError_getter_file_name(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 24
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 32
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FileSystemError_setter_file_name(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 32
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @FileSystemError_getter_line_number(ptr nocapture readonly %0) #1 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FileSystemError_setter_line_number(ptr nocapture writeonly %0, i32 %1) #9 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_File(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 80, i64 8 }
}

define ptr @File_B_init_nameString_modeString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %12)
  %14 = getelementptr i8, ptr %1, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = getelementptr i8, ptr %15, i64 16
  %18 = getelementptr i8, ptr %15, i64 24
  %19 = getelementptr i8, ptr %15, i64 32
  %20 = load i64, ptr %16, align 4
  %21 = load i64, ptr %17, align 4
  %22 = load ptr, ptr %18, align 8
  %23 = load ptr, ptr %19, align 8
  %24 = tail call i1 @subtype_test_wrapper(ptr %22, i64 %21, i64 %20, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %23)
  %25 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %26 = getelementptr i8, ptr %25, i64 160
  %27 = load ptr, ptr %26, align 8
  ret ptr %27
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @File_B_close_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @File_B_reopen_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @File_B_get_byte_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 184
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @File_B_write_textString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 192
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @File_B__set_mode_modeString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 200
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @File_init_nameString_modeString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3, { ptr, ptr, ptr, i32 } %4) {
  %6 = alloca [0 x ptr], align 8
  %.fca.0.extract36 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract38 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract40 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract42 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract36, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract38, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract40, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract42, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @File)
  %.fca.0.extract24 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract26 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract28 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract30 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %11 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract24, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %.fca.1.extract26, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %11, i64 16
  store ptr %.fca.2.extract28, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %11, i64 24
  store i32 %.fca.3.extract30, ptr %14, align 8
  call void @set_offset(ptr nonnull %11, ptr nonnull @String)
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  %16 = load ptr, ptr %11, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 8
  %18 = load ptr, ptr %12, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %15, i64 16
  %20 = load ptr, ptr %13, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr inbounds i8, ptr %15, i64 24
  %22 = load i32, ptr %14, align 8
  store i32 %22, ptr %21, align 8
  call void @set_offset(ptr nonnull %15, ptr nonnull @String)
  %23 = load ptr, ptr %8, align 8
  %24 = load ptr, ptr %7, align 8
  %25 = call ptr @llvm.invariant.start.p0(i64 128, ptr %24)
  %26 = load i32, ptr %10, align 8
  %27 = sext i32 %26 to i64
  %28 = getelementptr ptr, ptr %24, i64 %27
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr i8, ptr %29, i64 8
  %31 = load ptr, ptr %30, align 8
  %32 = load ptr, ptr %15, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %32, 0
  %34 = load ptr, ptr %17, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 1
  %36 = load ptr, ptr %19, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 2
  %38 = load i32, ptr %21, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, i32 %38, 3
  call void %31(ptr %23, { ptr, ptr, ptr, i32 } %39) #23
  %.fca.0.extract16 = extractvalue { ptr, ptr, ptr, i32 } %4, 0
  %.fca.1.extract18 = extractvalue { ptr, ptr, ptr, i32 } %4, 1
  %.fca.2.extract20 = extractvalue { ptr, ptr, ptr, i32 } %4, 2
  %.fca.3.extract22 = extractvalue { ptr, ptr, ptr, i32 } %4, 3
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract16, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %.fca.1.extract18, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  store ptr %.fca.2.extract20, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 %.fca.3.extract22, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @String)
  %44 = alloca { ptr, ptr, ptr, i32 }, align 8
  %45 = load ptr, ptr %40, align 8
  store ptr %45, ptr %44, align 8
  %46 = getelementptr inbounds i8, ptr %44, i64 8
  %47 = load ptr, ptr %41, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %44, i64 16
  %49 = load ptr, ptr %42, align 8
  store ptr %49, ptr %48, align 8
  %50 = getelementptr inbounds i8, ptr %44, i64 24
  %51 = load i32, ptr %43, align 8
  store i32 %51, ptr %50, align 8
  call void @set_offset(ptr nonnull %44, ptr nonnull @String)
  %52 = load ptr, ptr %8, align 8
  %53 = load ptr, ptr %7, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 128, ptr %53)
  %55 = load i32, ptr %10, align 8
  %56 = sext i32 %55 to i64
  %57 = getelementptr ptr, ptr %53, i64 %56
  %58 = getelementptr i8, ptr %57, i64 8
  %59 = load ptr, ptr %58, align 8
  %60 = getelementptr i8, ptr %59, i64 8
  %61 = load ptr, ptr %60, align 8
  %62 = load ptr, ptr %44, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %62, 0
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 1
  %66 = load ptr, ptr %48, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, ptr %66, 2
  %68 = load i32, ptr %50, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, i32 %68, 3
  call void %61(ptr %52, { ptr, ptr, ptr, i32 } %69) #23
  %70 = load ptr, ptr %8, align 8
  %71 = load ptr, ptr %7, align 8
  %72 = call ptr @llvm.invariant.start.p0(i64 128, ptr %71)
  %73 = load i32, ptr %10, align 8
  %74 = sext i32 %73 to i64
  %75 = getelementptr ptr, ptr %71, i64 %74
  %76 = load ptr, ptr %75, align 8
  %77 = load ptr, ptr %76, align 8
  %78 = call { ptr, ptr, ptr, i32 } %77(ptr %70) #24
  %79 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract8 = extractvalue { ptr, ptr, ptr, i32 } %78, 0
  store ptr %.fca.0.extract8, ptr %79, align 8
  %.fca.1.extract10 = extractvalue { ptr, ptr, ptr, i32 } %78, 1
  %.fca.1.gep11 = getelementptr inbounds i8, ptr %79, i64 8
  store ptr %.fca.1.extract10, ptr %.fca.1.gep11, align 8
  %.fca.2.extract12 = extractvalue { ptr, ptr, ptr, i32 } %78, 2
  %.fca.2.gep13 = getelementptr inbounds i8, ptr %79, i64 16
  store ptr %.fca.2.extract12, ptr %.fca.2.gep13, align 8
  %.fca.3.extract14 = extractvalue { ptr, ptr, ptr, i32 } %78, 3
  %.fca.3.gep15 = getelementptr inbounds i8, ptr %79, i64 24
  store i32 %.fca.3.extract14, ptr %.fca.3.gep15, align 8
  call void @assume_offset(ptr nonnull %79, ptr nonnull @String)
  %80 = load ptr, ptr %79, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %80, 0
  %82 = load ptr, ptr %.fca.1.gep11, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 1
  %84 = load ptr, ptr %.fca.2.gep13, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 2
  %86 = load i32, ptr %.fca.3.gep15, align 8
  %87 = insertvalue { ptr, ptr, ptr, i32 } %85, i32 %86, 3
  %88 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %89 = call ptr @llvm.invariant.start.p0(i64 616, ptr %80)
  %90 = sext i32 %86 to i64
  %91 = getelementptr ptr, ptr %80, i64 %90
  %92 = getelementptr i8, ptr %91, i64 120
  %93 = load ptr, ptr %92, align 8
  %94 = call ptr @behavior_wrapper(ptr %93, { ptr, ptr, ptr, i32 } %87, ptr nonnull %6)
  %95 = call { ptr } %94({ ptr, ptr, ptr, i32 } %87, { ptr, ptr, ptr, i32 } %87, ptr nonnull %6) #25
  %96 = load ptr, ptr %8, align 8
  %97 = load ptr, ptr %7, align 8
  %98 = call ptr @llvm.invariant.start.p0(i64 128, ptr %97)
  %99 = load i32, ptr %10, align 8
  %100 = sext i32 %99 to i64
  %101 = getelementptr ptr, ptr %97, i64 %100
  %102 = getelementptr i8, ptr %101, i64 8
  %103 = load ptr, ptr %102, align 8
  %104 = load ptr, ptr %103, align 8
  %105 = call { ptr, ptr, ptr, i32 } %104(ptr %96) #24
  %106 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract4 = extractvalue { ptr, ptr, ptr, i32 } %105, 0
  store ptr %.fca.0.extract4, ptr %106, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %105, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %106, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %105, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %106, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %105, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %106, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %106, ptr nonnull @String)
  %107 = load ptr, ptr %106, align 8
  %108 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %107, 0
  %109 = load ptr, ptr %.fca.1.gep, align 8
  %110 = insertvalue { ptr, ptr, ptr, i32 } %108, ptr %109, 1
  %111 = load ptr, ptr %.fca.2.gep, align 8
  %112 = insertvalue { ptr, ptr, ptr, i32 } %110, ptr %111, 2
  %113 = load i32, ptr %.fca.3.gep, align 8
  %114 = insertvalue { ptr, ptr, ptr, i32 } %112, i32 %113, 3
  %115 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %6)
  %116 = call ptr @llvm.invariant.start.p0(i64 616, ptr %107)
  %117 = sext i32 %113 to i64
  %118 = getelementptr ptr, ptr %107, i64 %117
  %119 = getelementptr i8, ptr %118, i64 120
  %120 = load ptr, ptr %119, align 8
  %121 = call ptr @behavior_wrapper(ptr %120, { ptr, ptr, ptr, i32 } %114, ptr nonnull %6)
  %122 = call { ptr } %121({ ptr, ptr, ptr, i32 } %114, { ptr, ptr, ptr, i32 } %114, ptr nonnull %6) #25
  %123 = call { ptr } @fopen({ ptr } %95, { ptr } %122)
  %124 = load ptr, ptr %8, align 8
  %125 = load ptr, ptr %7, align 8
  %126 = call ptr @llvm.invariant.start.p0(i64 128, ptr %125)
  %127 = load i32, ptr %10, align 8
  %128 = sext i32 %127 to i64
  %129 = getelementptr ptr, ptr %125, i64 %128
  %130 = getelementptr i8, ptr %129, i64 16
  %131 = load ptr, ptr %130, align 8
  %132 = getelementptr i8, ptr %131, i64 8
  %133 = load ptr, ptr %132, align 8
  call void %133(ptr %124, { ptr } %123) #23
  %134 = load ptr, ptr %8, align 8
  %135 = load ptr, ptr %7, align 8
  %136 = call ptr @llvm.invariant.start.p0(i64 128, ptr %135)
  %137 = load i32, ptr %10, align 8
  %138 = sext i32 %137 to i64
  %139 = getelementptr ptr, ptr %135, i64 %138
  %140 = getelementptr i8, ptr %139, i64 24
  %141 = load ptr, ptr %140, align 8
  %142 = getelementptr i8, ptr %141, i64 8
  %143 = load ptr, ptr %142, align 8
  call void %143(ptr %134, i1 true) #23
  ret void
}

define void @File_close_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca [3 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [2 x ptr], align 8
  %11 = alloca { ptr, ptr }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr %.fca.1.extract, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr %.fca.2.extract, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %12, i64 24
  store i32 %.fca.3.extract, ptr %15, align 8
  call void @set_offset(ptr nonnull %12, ptr nonnull @File)
  %16 = load ptr, ptr %13, align 8
  %17 = load ptr, ptr %12, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 128, ptr %17)
  %19 = load i32, ptr %15, align 8
  %20 = sext i32 %19 to i64
  %21 = getelementptr ptr, ptr %17, i64 %20
  %22 = getelementptr i8, ptr %21, i64 24
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call i1 %24(ptr %16) #24
  br i1 %25, label %26, label %._crit_edge

26:                                               ; preds = %3
  %27 = call ptr @llvm.invariant.start.p0(i64 128, ptr %17)
  %28 = getelementptr i8, ptr %21, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = call { ptr } %30(ptr %16) #24
  %32 = call i32 @fclose({ ptr } %31)
  %33 = load ptr, ptr %13, align 8
  %34 = load ptr, ptr %12, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 128, ptr %34)
  %36 = load i32, ptr %15, align 8
  %37 = sext i32 %36 to i64
  %38 = getelementptr ptr, ptr %34, i64 %37
  %39 = getelementptr i8, ptr %38, i64 24
  %40 = load ptr, ptr %39, align 8
  %41 = getelementptr i8, ptr %40, i64 8
  %42 = load ptr, ptr %41, align 8
  call void %42(ptr %33, i1 false) #23
  %43 = icmp eq i32 %32, -1
  br i1 %43, label %44, label %._crit_edge

44:                                               ; preds = %26
  store ptr @FileSystemError, ptr %5, align 8
  %45 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileSystemError, ptr nonnull %5)
  %46 = extractvalue { i64, i64 } %45, 0
  %47 = call ptr @bump_malloc(i64 %46)
  %48 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileSystemError, ptr undef, ptr undef, i32 undef }, ptr %47, 1
  %49 = insertvalue { ptr, ptr, ptr, i32 } %48, ptr undef, 2
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 10, 3
  %51 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %52 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  %53 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_init_, { ptr, ptr, ptr, i32 } %50, ptr nonnull %4)
  call void %53({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %4) #25
  %54 = call ptr @bump_malloc(i64 16)
  store <15 x i8> <i8 122, i8 114, i8 119, i8 99, i8 105, i8 110, i8 105, i8 116, i8 116, i8 107, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %54, align 16
  store ptr @String, ptr %6, align 8
  %55 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %6)
  %56 = extractvalue { i64, i64 } %55, 0
  %57 = call ptr @bump_malloc(i64 %56)
  %58 = insertvalue { ptr } undef, ptr %54, 0
  %59 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %57, 1
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr undef, 2
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %7, align 8
  %62 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr @_parameterization_i32, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr @_parameterization_i32, ptr %63, align 8
  %64 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %7)
  %65 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %8, align 8
  %66 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @i32_typ, ptr %66, align 8
  %67 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @i32_typ, ptr %67, align 8
  %68 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %61, ptr nonnull %8)
  call void %68({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr nonnull %7, { ptr } %58, i32 15, i32 16) #25
  store ptr @String, ptr %9, align 8
  %69 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %57, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %9, i64 16
  %71 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 10, ptr %71, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %72 = load ptr, ptr %9, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %72, 0
  %74 = load ptr, ptr %69, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 1
  %76 = load ptr, ptr %70, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %76, 2
  %78 = load i32, ptr %71, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, i32 %78, 3
  store ptr @_parameterization_i32, ptr %10, align 8
  %80 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr @_parameterization_String, ptr %80, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %10)
  %82 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  store ptr @i32_typ, ptr %11, align 8
  %83 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %72, ptr %83, align 8
  %84 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %50, ptr nonnull %11)
  call void %84({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %10, i32 760, { ptr, ptr, ptr, i32 } %79) #25
  %85 = ptrtoint ptr %47 to i64
  %.sroa.424.8.insert.ext = zext i64 %85 to i160
  %.sroa.424.8.insert.insert = or disjoint i160 %.sroa.424.8.insert.ext, 3402823669209384634633746074317682114560
  %86 = insertvalue { ptr, i160 } { ptr @FileSystemError, i160 undef }, i160 %.sroa.424.8.insert.insert, 1
  %87 = call ptr @get_current_coroutine()
  %88 = getelementptr i8, ptr %87, i64 48
  store { ptr, i160 } %86, ptr %88, align 8
  call void @coroutine_yield(ptr %87)
  br label %._crit_edge

._crit_edge:                                      ; preds = %44, %26, %3
  ret void
}

define void @File_reopen_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @File)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 128, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = getelementptr i8, ptr %16, i64 24
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call i1 %19(ptr %11) #24
  br i1 %20, label %89, label %21

21:                                               ; preds = %3
  %22 = call ptr @llvm.invariant.start.p0(i64 128, ptr %12)
  %23 = load ptr, ptr %16, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call { ptr, ptr, ptr, i32 } %24(ptr %11) #24
  %.fca.0.extract13 = extractvalue { ptr, ptr, ptr, i32 } %25, 0
  store ptr %.fca.0.extract13, ptr %5, align 8
  %.fca.1.extract15 = extractvalue { ptr, ptr, ptr, i32 } %25, 1
  %.fca.1.gep16 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract15, ptr %.fca.1.gep16, align 8
  %.fca.2.extract17 = extractvalue { ptr, ptr, ptr, i32 } %25, 2
  %.fca.2.gep18 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract17, ptr %.fca.2.gep18, align 8
  %.fca.3.extract19 = extractvalue { ptr, ptr, ptr, i32 } %25, 3
  %.fca.3.gep20 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract19, ptr %.fca.3.gep20, align 8
  call void @assume_offset(ptr nonnull %5, ptr nonnull @String)
  %26 = load ptr, ptr %5, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %26, 0
  %28 = load ptr, ptr %.fca.1.gep16, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %27, ptr %28, 1
  %30 = load ptr, ptr %.fca.2.gep18, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %30, 2
  %32 = load i32, ptr %.fca.3.gep20, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, i32 %32, 3
  %34 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %35 = call ptr @llvm.invariant.start.p0(i64 616, ptr %26)
  %36 = sext i32 %32 to i64
  %37 = getelementptr ptr, ptr %26, i64 %36
  %38 = getelementptr i8, ptr %37, i64 120
  %39 = load ptr, ptr %38, align 8
  %40 = call ptr @behavior_wrapper(ptr %39, { ptr, ptr, ptr, i32 } %33, ptr nonnull %4)
  %41 = call { ptr } %40({ ptr, ptr, ptr, i32 } %33, { ptr, ptr, ptr, i32 } %33, ptr nonnull %4) #25
  %42 = load ptr, ptr %8, align 8
  %43 = load ptr, ptr %7, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 128, ptr %43)
  %45 = load i32, ptr %10, align 8
  %46 = sext i32 %45 to i64
  %47 = getelementptr ptr, ptr %43, i64 %46
  %48 = getelementptr i8, ptr %47, i64 8
  %49 = load ptr, ptr %48, align 8
  %50 = load ptr, ptr %49, align 8
  %51 = call { ptr, ptr, ptr, i32 } %50(ptr %42) #24
  %.fca.0.extract6 = extractvalue { ptr, ptr, ptr, i32 } %51, 0
  store ptr %.fca.0.extract6, ptr %6, align 8
  %.fca.1.extract7 = extractvalue { ptr, ptr, ptr, i32 } %51, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract7, ptr %.fca.1.gep, align 8
  %.fca.2.extract8 = extractvalue { ptr, ptr, ptr, i32 } %51, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract8, ptr %.fca.2.gep, align 8
  %.fca.3.extract9 = extractvalue { ptr, ptr, ptr, i32 } %51, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract9, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %6, ptr nonnull @String)
  %52 = load ptr, ptr %6, align 8
  %53 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %52, 0
  %54 = load ptr, ptr %.fca.1.gep, align 8
  %55 = insertvalue { ptr, ptr, ptr, i32 } %53, ptr %54, 1
  %56 = load ptr, ptr %.fca.2.gep, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } %55, ptr %56, 2
  %58 = load i32, ptr %.fca.3.gep, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, i32 %58, 3
  %60 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %61 = call ptr @llvm.invariant.start.p0(i64 616, ptr %52)
  %62 = sext i32 %58 to i64
  %63 = getelementptr ptr, ptr %52, i64 %62
  %64 = getelementptr i8, ptr %63, i64 120
  %65 = load ptr, ptr %64, align 8
  %66 = call ptr @behavior_wrapper(ptr %65, { ptr, ptr, ptr, i32 } %59, ptr nonnull %4)
  %67 = call { ptr } %66({ ptr, ptr, ptr, i32 } %59, { ptr, ptr, ptr, i32 } %59, ptr nonnull %4) #25
  %68 = call { ptr } @fopen({ ptr } %41, { ptr } %67)
  %69 = load ptr, ptr %8, align 8
  %70 = load ptr, ptr %7, align 8
  %71 = call ptr @llvm.invariant.start.p0(i64 128, ptr %70)
  %72 = load i32, ptr %10, align 8
  %73 = sext i32 %72 to i64
  %74 = getelementptr ptr, ptr %70, i64 %73
  %75 = getelementptr i8, ptr %74, i64 16
  %76 = load ptr, ptr %75, align 8
  %77 = getelementptr i8, ptr %76, i64 8
  %78 = load ptr, ptr %77, align 8
  call void %78(ptr %69, { ptr } %68) #23
  %79 = load ptr, ptr %8, align 8
  %80 = load ptr, ptr %7, align 8
  %81 = call ptr @llvm.invariant.start.p0(i64 128, ptr %80)
  %82 = load i32, ptr %10, align 8
  %83 = sext i32 %82 to i64
  %84 = getelementptr ptr, ptr %80, i64 %83
  %85 = getelementptr i8, ptr %84, i64 24
  %86 = load ptr, ptr %85, align 8
  %87 = getelementptr i8, ptr %86, i64 8
  %88 = load ptr, ptr %87, align 8
  call void %88(ptr %79, i1 true) #23
  br label %89

89:                                               ; preds = %21, %3
  ret void
}

define { ptr, i8 } @File_get_byte_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca [1 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca [3 x ptr], align 8
  %8 = alloca { ptr, ptr, ptr }, align 8
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  %10 = alloca [2 x ptr], align 8
  %11 = alloca { ptr, ptr }, align 8
  %.fca.0.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract5, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr %.fca.1.extract6, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr %.fca.2.extract, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %12, i64 24
  store i32 %.fca.3.extract, ptr %15, align 8
  call void @set_offset(ptr nonnull %12, ptr nonnull @File)
  %16 = load ptr, ptr %13, align 8
  %17 = load ptr, ptr %12, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 128, ptr %17)
  %19 = load i32, ptr %15, align 8
  %20 = sext i32 %19 to i64
  %21 = getelementptr ptr, ptr %17, i64 %20
  %22 = getelementptr i8, ptr %21, i64 24
  %23 = load ptr, ptr %22, align 8
  %24 = load ptr, ptr %23, align 8
  %25 = call i1 %24(ptr %16) #24
  br i1 %25, label %26, label %._crit_edge

26:                                               ; preds = %3
  %27 = call ptr @llvm.invariant.start.p0(i64 128, ptr %17)
  %28 = getelementptr i8, ptr %21, i64 16
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %29, align 8
  %31 = call { ptr } %30(ptr %16) #24
  %32 = call i32 @fgetc({ ptr } %31)
  %.not58 = icmp eq i32 %32, -1
  br i1 %.not58, label %33, label %90

33:                                               ; preds = %26
  %34 = load ptr, ptr %13, align 8
  %35 = load ptr, ptr %12, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 128, ptr %35)
  %37 = load i32, ptr %15, align 8
  %38 = sext i32 %37 to i64
  %39 = getelementptr ptr, ptr %35, i64 %38
  %40 = getelementptr i8, ptr %39, i64 16
  %41 = load ptr, ptr %40, align 8
  %42 = load ptr, ptr %41, align 8
  %43 = call { ptr } %42(ptr %34) #24
  %44 = call i32 @ferror({ ptr } %43)
  %.not = icmp eq i32 %44, 0
  br i1 %.not, label %._crit_edge, label %45

45:                                               ; preds = %33
  store ptr @FileSystemError, ptr %5, align 8
  %46 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileSystemError, ptr nonnull %5)
  %47 = extractvalue { i64, i64 } %46, 0
  %48 = call ptr @bump_malloc(i64 %47)
  %49 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileSystemError, ptr undef, ptr undef, i32 undef }, ptr %48, 1
  %50 = insertvalue { ptr, ptr, ptr, i32 } %49, ptr undef, 2
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, i32 10, 3
  %52 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %53 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  %54 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_init_, { ptr, ptr, ptr, i32 } %51, ptr nonnull %4)
  call void %54({ ptr, ptr, ptr, i32 } %51, { ptr, ptr, ptr, i32 } %51, ptr nonnull %4) #25
  %55 = call ptr @bump_malloc(i64 16)
  store <15 x i8> <i8 122, i8 114, i8 119, i8 99, i8 105, i8 110, i8 105, i8 116, i8 116, i8 107, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %55, align 16
  store ptr @String, ptr %6, align 8
  %56 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %6)
  %57 = extractvalue { i64, i64 } %56, 0
  %58 = call ptr @bump_malloc(i64 %57)
  %59 = insertvalue { ptr } undef, ptr %55, 0
  %60 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %58, 1
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr undef, 2
  %62 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %7, align 8
  %63 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr @_parameterization_i32, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr @_parameterization_i32, ptr %64, align 8
  %65 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %7)
  %66 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %8, align 8
  %67 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @i32_typ, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @i32_typ, ptr %68, align 8
  %69 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %62, ptr nonnull %8)
  call void %69({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr nonnull %7, { ptr } %59, i32 15, i32 16) #25
  store ptr @String, ptr %9, align 8
  %70 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %58, ptr %70, align 8
  %71 = getelementptr inbounds i8, ptr %9, i64 16
  %72 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 10, ptr %72, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %73 = load ptr, ptr %9, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = load ptr, ptr %70, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 1
  %77 = load ptr, ptr %71, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 2
  %79 = load i32, ptr %72, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %79, 3
  store ptr @_parameterization_i32, ptr %10, align 8
  %81 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr @_parameterization_String, ptr %81, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %10)
  %83 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  store ptr @i32_typ, ptr %11, align 8
  %84 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr %73, ptr %84, align 8
  %85 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %51, ptr nonnull %11)
  call void %85({ ptr, ptr, ptr, i32 } %51, { ptr, ptr, ptr, i32 } %51, ptr nonnull %10, i32 771, { ptr, ptr, ptr, i32 } %80) #25
  %86 = ptrtoint ptr %48 to i64
  %.sroa.440.8.insert.ext = zext i64 %86 to i160
  %.sroa.440.8.insert.insert = or disjoint i160 %.sroa.440.8.insert.ext, 3402823669209384634633746074317682114560
  %87 = insertvalue { ptr, i160 } { ptr @FileSystemError, i160 undef }, i160 %.sroa.440.8.insert.insert, 1
  %88 = call ptr @get_current_coroutine()
  %89 = getelementptr i8, ptr %88, i64 48
  store { ptr, i160 } %87, ptr %89, align 8
  call void @coroutine_yield(ptr %88)
  br label %._crit_edge

90:                                               ; preds = %26
  %91 = trunc i32 %32 to i8
  br label %._crit_edge

._crit_edge:                                      ; preds = %90, %45, %33, %3
  %.reg2mem29.sroa.3.0 = phi i8 [ poison, %3 ], [ %91, %90 ], [ poison, %33 ], [ poison, %45 ]
  %.reg2mem27.0 = phi ptr [ @nil_typ, %3 ], [ @i8_typ, %90 ], [ @nil_typ, %33 ], [ @nil_typ, %45 ]
  %.reload26.fca.0.insert = insertvalue { ptr, i8 } poison, ptr %.reg2mem27.0, 0
  %.reload26.fca.1.insert = insertvalue { ptr, i8 } %.reload26.fca.0.insert, i8 %.reg2mem29.sroa.3.0, 1
  ret { ptr, i8 } %.reload26.fca.1.insert
}

define i32 @File_write_textString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [2 x ptr], align 8
  %12 = alloca { ptr, ptr }, align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr %.fca.1.extract4, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr %.fca.2.extract5, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %13, i64 24
  store i32 %.fca.3.extract6, ptr %16, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @File)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %17 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr %.fca.1.extract, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %17, i64 16
  store ptr %.fca.2.extract, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %17, i64 24
  store i32 %.fca.3.extract, ptr %20, align 8
  call void @set_offset(ptr nonnull %17, ptr nonnull @String)
  %21 = load ptr, ptr %14, align 8
  %22 = load ptr, ptr %13, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 128, ptr %22)
  %24 = load i32, ptr %16, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = getelementptr i8, ptr %26, i64 24
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i1 %29(ptr %21) #24
  br i1 %30, label %31, label %._crit_edge

31:                                               ; preds = %4
  %32 = call ptr @llvm.invariant.start.p0(i64 128, ptr %22)
  %33 = getelementptr i8, ptr %26, i64 16
  %34 = load ptr, ptr %33, align 8
  %35 = load ptr, ptr %34, align 8
  %36 = call { ptr } %35(ptr %21) #24
  %37 = load ptr, ptr %17, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %37, 0
  %39 = load ptr, ptr %18, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 1
  %41 = load ptr, ptr %19, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %41, 2
  %43 = load i32, ptr %20, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, i32 %43, 3
  %45 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %46 = call ptr @llvm.invariant.start.p0(i64 616, ptr %37)
  %47 = sext i32 %43 to i64
  %48 = getelementptr ptr, ptr %37, i64 %47
  %49 = getelementptr i8, ptr %48, i64 120
  %50 = load ptr, ptr %49, align 8
  %51 = call ptr @behavior_wrapper(ptr %50, { ptr, ptr, ptr, i32 } %44, ptr nonnull %5)
  %52 = call { ptr } %51({ ptr, ptr, ptr, i32 } %44, { ptr, ptr, ptr, i32 } %44, ptr nonnull %5) #25
  %53 = call i32 @fprintf({ ptr } %36, { ptr } %52)
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %55, label %._crit_edge

55:                                               ; preds = %31
  store ptr @FileSystemError, ptr %6, align 8
  %56 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileSystemError, ptr nonnull %6)
  %57 = extractvalue { i64, i64 } %56, 0
  %58 = call ptr @bump_malloc(i64 %57)
  %59 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileSystemError, ptr undef, ptr undef, i32 undef }, ptr %58, 1
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr undef, 2
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, i32 10, 3
  %62 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %63 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  %64 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_init_, { ptr, ptr, ptr, i32 } %61, ptr nonnull %5)
  call void %64({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr nonnull %5) #25
  %65 = call ptr @bump_malloc(i64 16)
  store <15 x i8> <i8 122, i8 114, i8 119, i8 99, i8 105, i8 110, i8 105, i8 116, i8 116, i8 107, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %65, align 16
  store ptr @String, ptr %7, align 8
  %66 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %7)
  %67 = extractvalue { i64, i64 } %66, 0
  %68 = call ptr @bump_malloc(i64 %67)
  %69 = insertvalue { ptr } undef, ptr %65, 0
  %70 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %68, 1
  %71 = insertvalue { ptr, ptr, ptr, i32 } %70, ptr undef, 2
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %8, align 8
  %73 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @_parameterization_i32, ptr %73, align 8
  %74 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @_parameterization_i32, ptr %74, align 8
  %75 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %8)
  %76 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %9, align 8
  %77 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr @i32_typ, ptr %77, align 8
  %78 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr @i32_typ, ptr %78, align 8
  %79 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %72, ptr nonnull %9)
  call void %79({ ptr, ptr, ptr, i32 } %72, { ptr, ptr, ptr, i32 } %72, ptr nonnull %8, { ptr } %69, i32 15, i32 16) #25
  store ptr @String, ptr %10, align 8
  %80 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %68, ptr %80, align 8
  %81 = getelementptr inbounds i8, ptr %10, i64 16
  %82 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 10, ptr %82, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @String)
  %83 = load ptr, ptr %10, align 8
  %84 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %83, 0
  %85 = load ptr, ptr %80, align 8
  %86 = insertvalue { ptr, ptr, ptr, i32 } %84, ptr %85, 1
  %87 = load ptr, ptr %81, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %86, ptr %87, 2
  %89 = load i32, ptr %82, align 8
  %90 = insertvalue { ptr, ptr, ptr, i32 } %88, i32 %89, 3
  store ptr @_parameterization_i32, ptr %11, align 8
  %91 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr @_parameterization_String, ptr %91, align 8
  %92 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %11)
  %93 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  store ptr @i32_typ, ptr %12, align 8
  %94 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr %83, ptr %94, align 8
  %95 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %61, ptr nonnull %12)
  call void %95({ ptr, ptr, ptr, i32 } %61, { ptr, ptr, ptr, i32 } %61, ptr nonnull %11, i32 779, { ptr, ptr, ptr, i32 } %90) #25
  %96 = ptrtoint ptr %58 to i64
  %.sroa.432.8.insert.ext = zext i64 %96 to i160
  %.sroa.432.8.insert.insert = or disjoint i160 %.sroa.432.8.insert.ext, 3402823669209384634633746074317682114560
  %97 = insertvalue { ptr, i160 } { ptr @FileSystemError, i160 undef }, i160 %.sroa.432.8.insert.insert, 1
  %98 = call ptr @get_current_coroutine()
  %99 = getelementptr i8, ptr %98, i64 48
  store { ptr, i160 } %97, ptr %99, align 8
  call void @coroutine_yield(ptr %98)
  br label %._crit_edge

._crit_edge:                                      ; preds = %55, %31, %4
  %.reg2mem25.0 = phi i32 [ -1, %4 ], [ %53, %31 ], [ %53, %55 ]
  ret i32 %.reg2mem25.0
}

define void @File__set_mode_modeString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca [1 x ptr], align 8
  %8 = alloca [3 x ptr], align 8
  %9 = alloca { ptr, ptr, ptr }, align 8
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  %11 = alloca [2 x ptr], align 8
  %12 = alloca { ptr, ptr }, align 8
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract6 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %15 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract3, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr %.fca.1.extract4, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr %.fca.2.extract5, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %15, i64 24
  store i32 %.fca.3.extract6, ptr %18, align 8
  call void @set_offset(ptr nonnull %15, ptr nonnull @File)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %19, align 8
  %20 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %.fca.1.extract, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %19, i64 16
  store ptr %.fca.2.extract, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %19, i64 24
  store i32 %.fca.3.extract, ptr %22, align 8
  call void @set_offset(ptr nonnull %19, ptr nonnull @String)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = load ptr, ptr %19, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 8
  %26 = load ptr, ptr %20, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr inbounds i8, ptr %23, i64 16
  %28 = load ptr, ptr %21, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %23, i64 24
  %30 = load i32, ptr %22, align 8
  store i32 %30, ptr %29, align 8
  call void @set_offset(ptr nonnull %23, ptr nonnull @String)
  %31 = load ptr, ptr %16, align 8
  %32 = load ptr, ptr %15, align 8
  %33 = call ptr @llvm.invariant.start.p0(i64 128, ptr %32)
  %34 = load i32, ptr %18, align 8
  %35 = sext i32 %34 to i64
  %36 = getelementptr ptr, ptr %32, i64 %35
  %37 = getelementptr i8, ptr %36, i64 8
  %38 = load ptr, ptr %37, align 8
  %39 = getelementptr i8, ptr %38, i64 8
  %40 = load ptr, ptr %39, align 8
  %41 = load ptr, ptr %23, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %41, 0
  %43 = load ptr, ptr %25, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %43, 1
  %45 = load ptr, ptr %27, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %45, 2
  %47 = load i32, ptr %29, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %47, 3
  call void %40(ptr %31, { ptr, ptr, ptr, i32 } %48) #23
  %49 = load ptr, ptr %16, align 8
  %50 = load ptr, ptr %15, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 128, ptr %50)
  %52 = load i32, ptr %18, align 8
  %53 = sext i32 %52 to i64
  %54 = getelementptr ptr, ptr %50, i64 %53
  %55 = getelementptr i8, ptr %54, i64 24
  %56 = load ptr, ptr %55, align 8
  %57 = load ptr, ptr %56, align 8
  %58 = call i1 %57(ptr %49) #24
  br i1 %58, label %59, label %174

59:                                               ; preds = %4
  %60 = call ptr @llvm.invariant.start.p0(i64 128, ptr %50)
  %61 = getelementptr i8, ptr %54, i64 16
  %62 = load ptr, ptr %61, align 8
  %63 = load ptr, ptr %62, align 8
  %64 = call { ptr } %63(ptr %49) #24
  %65 = call i32 @fclose({ ptr } %64)
  %66 = icmp eq i32 %65, -1
  br i1 %66, label %67, label %._crit_edge

67:                                               ; preds = %59
  store ptr @FileSystemError, ptr %6, align 8
  %68 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileSystemError, ptr nonnull %6)
  %69 = extractvalue { i64, i64 } %68, 0
  %70 = call ptr @bump_malloc(i64 %69)
  %71 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileSystemError, ptr undef, ptr undef, i32 undef }, ptr %70, 1
  %72 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr undef, 2
  %73 = insertvalue { ptr, ptr, ptr, i32 } %72, i32 10, 3
  %74 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %75 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  %76 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_init_, { ptr, ptr, ptr, i32 } %73, ptr nonnull %5)
  call void %76({ ptr, ptr, ptr, i32 } %73, { ptr, ptr, ptr, i32 } %73, ptr nonnull %5) #25
  %77 = call ptr @bump_malloc(i64 16)
  store <15 x i8> <i8 122, i8 114, i8 119, i8 99, i8 105, i8 110, i8 105, i8 116, i8 116, i8 107, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %77, align 16
  store ptr @String, ptr %7, align 8
  %78 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %7)
  %79 = extractvalue { i64, i64 } %78, 0
  %80 = call ptr @bump_malloc(i64 %79)
  %81 = insertvalue { ptr } undef, ptr %77, 0
  %82 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %80, 1
  %83 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr undef, 2
  %84 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %8, align 8
  %85 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr @_parameterization_i32, ptr %85, align 8
  %86 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr @_parameterization_i32, ptr %86, align 8
  %87 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %8)
  %88 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %9, align 8
  %89 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr @i32_typ, ptr %89, align 8
  %90 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr @i32_typ, ptr %90, align 8
  %91 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %84, ptr nonnull %9)
  call void %91({ ptr, ptr, ptr, i32 } %84, { ptr, ptr, ptr, i32 } %84, ptr nonnull %8, { ptr } %81, i32 15, i32 16) #25
  store ptr @String, ptr %10, align 8
  %92 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %80, ptr %92, align 8
  %93 = getelementptr inbounds i8, ptr %10, i64 16
  %94 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 10, ptr %94, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @String)
  %95 = load ptr, ptr %10, align 8
  %96 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %95, 0
  %97 = load ptr, ptr %92, align 8
  %98 = insertvalue { ptr, ptr, ptr, i32 } %96, ptr %97, 1
  %99 = load ptr, ptr %93, align 8
  %100 = insertvalue { ptr, ptr, ptr, i32 } %98, ptr %99, 2
  %101 = load i32, ptr %94, align 8
  %102 = insertvalue { ptr, ptr, ptr, i32 } %100, i32 %101, 3
  store ptr @_parameterization_i32, ptr %11, align 8
  %103 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr @_parameterization_String, ptr %103, align 8
  %104 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %11)
  %105 = call ptr @llvm.invariant.start.p0(i64 208, ptr nonnull @FileSystemError)
  store ptr @i32_typ, ptr %12, align 8
  %106 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr %95, ptr %106, align 8
  %107 = call ptr @behavior_wrapper(ptr nonnull @FileSystemError_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %73, ptr nonnull %12)
  call void %107({ ptr, ptr, ptr, i32 } %73, { ptr, ptr, ptr, i32 } %73, ptr nonnull %11, i32 785, { ptr, ptr, ptr, i32 } %102) #25
  %108 = ptrtoint ptr %70 to i64
  %.sroa.453.8.insert.ext = zext i64 %108 to i160
  %.sroa.453.8.insert.insert = or disjoint i160 %.sroa.453.8.insert.ext, 3402823669209384634633746074317682114560
  %109 = insertvalue { ptr, i160 } { ptr @FileSystemError, i160 undef }, i160 %.sroa.453.8.insert.insert, 1
  %110 = call ptr @get_current_coroutine()
  %111 = getelementptr i8, ptr %110, i64 48
  store { ptr, i160 } %109, ptr %111, align 8
  call void @coroutine_yield(ptr %110)
  br label %._crit_edge

._crit_edge:                                      ; preds = %67, %59
  %112 = load ptr, ptr %16, align 8
  %113 = load ptr, ptr %15, align 8
  %114 = call ptr @llvm.invariant.start.p0(i64 128, ptr %113)
  %115 = load i32, ptr %18, align 8
  %116 = sext i32 %115 to i64
  %117 = getelementptr ptr, ptr %113, i64 %116
  %118 = load ptr, ptr %117, align 8
  %119 = load ptr, ptr %118, align 8
  %120 = call { ptr, ptr, ptr, i32 } %119(ptr %112) #24
  %.fca.0.extract22 = extractvalue { ptr, ptr, ptr, i32 } %120, 0
  store ptr %.fca.0.extract22, ptr %13, align 8
  %.fca.1.extract24 = extractvalue { ptr, ptr, ptr, i32 } %120, 1
  %.fca.1.gep25 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr %.fca.1.extract24, ptr %.fca.1.gep25, align 8
  %.fca.2.extract26 = extractvalue { ptr, ptr, ptr, i32 } %120, 2
  %.fca.2.gep27 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr %.fca.2.extract26, ptr %.fca.2.gep27, align 8
  %.fca.3.extract28 = extractvalue { ptr, ptr, ptr, i32 } %120, 3
  %.fca.3.gep29 = getelementptr inbounds i8, ptr %13, i64 24
  store i32 %.fca.3.extract28, ptr %.fca.3.gep29, align 8
  call void @assume_offset(ptr nonnull %13, ptr nonnull @String)
  %121 = load ptr, ptr %13, align 8
  %122 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %121, 0
  %123 = load ptr, ptr %.fca.1.gep25, align 8
  %124 = insertvalue { ptr, ptr, ptr, i32 } %122, ptr %123, 1
  %125 = load ptr, ptr %.fca.2.gep27, align 8
  %126 = insertvalue { ptr, ptr, ptr, i32 } %124, ptr %125, 2
  %127 = load i32, ptr %.fca.3.gep29, align 8
  %128 = insertvalue { ptr, ptr, ptr, i32 } %126, i32 %127, 3
  %129 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %130 = call ptr @llvm.invariant.start.p0(i64 616, ptr %121)
  %131 = sext i32 %127 to i64
  %132 = getelementptr ptr, ptr %121, i64 %131
  %133 = getelementptr i8, ptr %132, i64 120
  %134 = load ptr, ptr %133, align 8
  %135 = call ptr @behavior_wrapper(ptr %134, { ptr, ptr, ptr, i32 } %128, ptr nonnull %5)
  %136 = call { ptr } %135({ ptr, ptr, ptr, i32 } %128, { ptr, ptr, ptr, i32 } %128, ptr nonnull %5) #25
  %137 = load ptr, ptr %16, align 8
  %138 = load ptr, ptr %15, align 8
  %139 = call ptr @llvm.invariant.start.p0(i64 128, ptr %138)
  %140 = load i32, ptr %18, align 8
  %141 = sext i32 %140 to i64
  %142 = getelementptr ptr, ptr %138, i64 %141
  %143 = getelementptr i8, ptr %142, i64 8
  %144 = load ptr, ptr %143, align 8
  %145 = load ptr, ptr %144, align 8
  %146 = call { ptr, ptr, ptr, i32 } %145(ptr %137) #24
  %.fca.0.extract15 = extractvalue { ptr, ptr, ptr, i32 } %146, 0
  store ptr %.fca.0.extract15, ptr %14, align 8
  %.fca.1.extract16 = extractvalue { ptr, ptr, ptr, i32 } %146, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %14, i64 8
  store ptr %.fca.1.extract16, ptr %.fca.1.gep, align 8
  %.fca.2.extract17 = extractvalue { ptr, ptr, ptr, i32 } %146, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %14, i64 16
  store ptr %.fca.2.extract17, ptr %.fca.2.gep, align 8
  %.fca.3.extract18 = extractvalue { ptr, ptr, ptr, i32 } %146, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %14, i64 24
  store i32 %.fca.3.extract18, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %14, ptr nonnull @String)
  %147 = load ptr, ptr %14, align 8
  %148 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %147, 0
  %149 = load ptr, ptr %.fca.1.gep, align 8
  %150 = insertvalue { ptr, ptr, ptr, i32 } %148, ptr %149, 1
  %151 = load ptr, ptr %.fca.2.gep, align 8
  %152 = insertvalue { ptr, ptr, ptr, i32 } %150, ptr %151, 2
  %153 = load i32, ptr %.fca.3.gep, align 8
  %154 = insertvalue { ptr, ptr, ptr, i32 } %152, i32 %153, 3
  %155 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %156 = call ptr @llvm.invariant.start.p0(i64 616, ptr %147)
  %157 = sext i32 %153 to i64
  %158 = getelementptr ptr, ptr %147, i64 %157
  %159 = getelementptr i8, ptr %158, i64 120
  %160 = load ptr, ptr %159, align 8
  %161 = call ptr @behavior_wrapper(ptr %160, { ptr, ptr, ptr, i32 } %154, ptr nonnull %5)
  %162 = call { ptr } %161({ ptr, ptr, ptr, i32 } %154, { ptr, ptr, ptr, i32 } %154, ptr nonnull %5) #25
  %163 = call { ptr } @fopen({ ptr } %136, { ptr } %162)
  %164 = load ptr, ptr %16, align 8
  %165 = load ptr, ptr %15, align 8
  %166 = call ptr @llvm.invariant.start.p0(i64 128, ptr %165)
  %167 = load i32, ptr %18, align 8
  %168 = sext i32 %167 to i64
  %169 = getelementptr ptr, ptr %165, i64 %168
  %170 = getelementptr i8, ptr %169, i64 16
  %171 = load ptr, ptr %170, align 8
  %172 = getelementptr i8, ptr %171, i64 8
  %173 = load ptr, ptr %172, align 8
  call void %173(ptr %164, { ptr } %163) #23
  br label %174

174:                                              ; preds = %._crit_edge, %4
  ret void
}

declare i32 @fclose({ ptr }) local_unnamed_addr

declare { ptr } @fopen({ ptr }, { ptr }) local_unnamed_addr

declare i32 @fprintf({ ptr }, { ptr }) local_unnamed_addr

declare i32 @fgetc({ ptr }) local_unnamed_addr

declare i32 @ferror({ ptr }) local_unnamed_addr

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i1 @File_getter_open(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 72
  %3 = load i1, ptr %2, align 1
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @File_setter_open(ptr nocapture writeonly %0, i1 %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 72
  store i1 %1, ptr %3, align 1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr } @File_getter_handle(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 64
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr } undef, ptr %3, 0
  ret { ptr } %4
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @File_setter_handle(ptr nocapture writeonly %0, { ptr } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 64
  %.fca.0.extract = extractvalue { ptr } %1, 0
  store ptr %.fca.0.extract, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @File_getter_mode(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 32
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 40
  %6 = load ptr, ptr %5, align 8
  %7 = insertvalue { ptr, ptr, ptr, i32 } %4, ptr %6, 1
  %8 = getelementptr i8, ptr %0, i64 48
  %9 = load ptr, ptr %8, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr %9, 2
  %11 = getelementptr i8, ptr %0, i64 56
  %12 = load i32, ptr %11, align 4
  %13 = insertvalue { ptr, ptr, ptr, i32 } %10, i32 %12, 3
  ret { ptr, ptr, ptr, i32 } %13
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @File_setter_mode(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 32
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 40
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 48
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr i8, ptr %0, i64 56
  store i32 %.fca.3.extract, ptr %6, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @File_getter_name(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
  %4 = getelementptr i8, ptr %0, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
  %7 = getelementptr i8, ptr %0, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
  %10 = getelementptr i8, ptr %0, i64 24
  %11 = load i32, ptr %10, align 4
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
  ret { ptr, ptr, ptr, i32 } %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @File_setter_name(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %0, align 8
  %3 = getelementptr i8, ptr %0, i64 8
  store ptr %.fca.1.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.2.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store i32 %.fca.3.extract, ptr %5, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FileProcessor(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 8, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FileReader(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef nonnull ptr @FileReader_field_FileReader_0(ptr nocapture readnone %0) #6 {
  ret ptr @_parameterization_String
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @FileReader_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @FileReader_B_process_fileFile({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -2227788838181535664, i64 ptrtoint (ptr @File to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 112
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @FileReader_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @FileReader)
  ret void
}

define { ptr, i160 } @FileReader_process_fileFile({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %5 = alloca [0 x ptr], align 8
  %6 = alloca [1 x ptr], align 8
  %7 = alloca { ptr }, align 8
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract23 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract24 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract25 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract26 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract23, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract24, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract25, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract26, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @FileReader)
  %.fca.0.extract20 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract21 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract20, ptr %13, align 8
  %14 = getelementptr inbounds i8, ptr %13, i64 8
  store ptr %.fca.1.extract21, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 16
  store ptr %.fca.2.extract, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %13, i64 24
  store i32 %.fca.3.extract, ptr %16, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @File)
  %17 = call ptr @bump_malloc(i64 1)
  %18 = alloca [1 x ptr], align 8
  store ptr @String, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %18)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = insertvalue { ptr } undef, ptr %17, 0
  %23 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %24 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr undef, 2
  %25 = insertvalue { ptr, ptr, ptr, i32 } %24, i32 10, 3
  %26 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr @_parameterization_i32, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr @_parameterization_i32, ptr %28, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %26)
  %30 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %31 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %31, align 8
  %32 = getelementptr inbounds i8, ptr %31, i64 8
  store ptr @i32_typ, ptr %32, align 8
  %33 = getelementptr inbounds i8, ptr %31, i64 16
  store ptr @i32_typ, ptr %33, align 8
  %34 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %25, ptr nonnull %31)
  call void %34({ ptr, ptr, ptr, i32 } %25, { ptr, ptr, ptr, i32 } %25, ptr nonnull %26, { ptr } %22, i32 0, i32 1) #25
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %35, align 8
  %36 = getelementptr inbounds i8, ptr %35, i64 8
  store ptr %21, ptr %36, align 8
  %37 = getelementptr inbounds i8, ptr %35, i64 16
  %38 = getelementptr inbounds i8, ptr %35, i64 24
  store i32 10, ptr %38, align 8
  call void @set_offset(ptr nonnull %35, ptr nonnull @String)
  %39 = load ptr, ptr %35, align 8
  %40 = load ptr, ptr %36, align 8
  %41 = load ptr, ptr %37, align 8
  %42 = load i32, ptr %38, align 8
  %43 = load ptr, ptr %13, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = load ptr, ptr %14, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %45, 1
  %47 = load ptr, ptr %15, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %47, 2
  %49 = load i32, ptr %16, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %49, 3
  %51 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %52 = call ptr @llvm.invariant.start.p0(i64 128, ptr %43)
  %53 = sext i32 %49 to i64
  %54 = getelementptr ptr, ptr %43, i64 %53
  %55 = getelementptr i8, ptr %54, i64 56
  %56 = load ptr, ptr %55, align 8
  %57 = call ptr @behavior_wrapper(ptr %56, { ptr, ptr, ptr, i32 } %50, ptr nonnull %5)
  %58 = call { ptr, i8 } %57({ ptr, ptr, ptr, i32 } %50, { ptr, ptr, ptr, i32 } %50, ptr nonnull %5) #25
  %.fca.0.extract = extractvalue { ptr, i8 } %58, 0
  %.fca.1.extract = extractvalue { ptr, i8 } %58, 1
  %invariant.gep = getelementptr i8, ptr %39, i64 72
  %59 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %39, 0
  %60 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %40, 1
  %61 = insertvalue { ptr, ptr, ptr, i32 } %60, ptr %41, 2
  %62 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %42, 3
  %63 = sext i32 %42 to i64
  %gep = getelementptr ptr, ptr %invariant.gep, i64 %63
  %64 = getelementptr inbounds i8, ptr %8, i64 8
  %65 = getelementptr inbounds i8, ptr %8, i64 16
  %66 = getelementptr inbounds i8, ptr %8, i64 24
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge, %4
  %.sroa.3.0 = phi i8 [ %.fca.1.extract, %4 ], [ %.sroa.3.1, %._crit_edge ]
  %.sroa.0.0 = phi ptr [ %.fca.0.extract, %4 ], [ %.sroa.0.1, %._crit_edge ]
  %67 = icmp ne ptr %.sroa.0.0, @nil_typ
  %68 = icmp ne ptr %.sroa.0.0, null
  %.not50 = and i1 %67, %68
  br i1 %.not50, label %69, label %._crit_edge

69:                                               ; preds = %._crit_edge1
  store ptr @_parameterization_i8, ptr %6, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %71 = call ptr @llvm.invariant.start.p0(i64 616, ptr %39)
  %72 = load ptr, ptr %gep, align 8
  store ptr @i8_typ, ptr %7, align 8
  %73 = call ptr @behavior_wrapper(ptr %72, { ptr, ptr, ptr, i32 } %62, ptr nonnull %7)
  %74 = call { ptr, ptr, ptr, i32 } %73({ ptr, ptr, ptr, i32 } %62, { ptr, ptr, ptr, i32 } %62, ptr nonnull %6, i8 %.sroa.3.0) #25
  %.fca.0.extract39 = extractvalue { ptr, ptr, ptr, i32 } %74, 0
  %.fca.1.extract40 = extractvalue { ptr, ptr, ptr, i32 } %74, 1
  %.fca.2.extract41 = extractvalue { ptr, ptr, ptr, i32 } %74, 2
  %.fca.3.extract42 = extractvalue { ptr, ptr, ptr, i32 } %74, 3
  store ptr %.fca.0.extract39, ptr %8, align 8
  store ptr %.fca.1.extract40, ptr %64, align 8
  store ptr %.fca.2.extract41, ptr %65, align 8
  store i32 %.fca.3.extract42, ptr %66, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @String)
  %75 = load ptr, ptr %13, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %75, 0
  %77 = load ptr, ptr %14, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 1
  %79 = load ptr, ptr %15, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr %79, 2
  %81 = load i32, ptr %16, align 8
  %82 = insertvalue { ptr, ptr, ptr, i32 } %80, i32 %81, 3
  %83 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %84 = call ptr @llvm.invariant.start.p0(i64 128, ptr %75)
  %85 = sext i32 %81 to i64
  %86 = getelementptr ptr, ptr %75, i64 %85
  %87 = getelementptr i8, ptr %86, i64 56
  %88 = load ptr, ptr %87, align 8
  %89 = call ptr @behavior_wrapper(ptr %88, { ptr, ptr, ptr, i32 } %82, ptr nonnull %5)
  %90 = call { ptr, i8 } %89({ ptr, ptr, ptr, i32 } %82, { ptr, ptr, ptr, i32 } %82, ptr nonnull %5) #25
  %.fca.0.extract35 = extractvalue { ptr, i8 } %90, 0
  %.fca.1.extract36 = extractvalue { ptr, i8 } %90, 1
  br label %._crit_edge

._crit_edge:                                      ; preds = %69, %._crit_edge1
  %.sroa.3.1 = phi i8 [ %.fca.1.extract36, %69 ], [ %.sroa.3.0, %._crit_edge1 ]
  %.sroa.0.1 = phi ptr [ %.fca.0.extract35, %69 ], [ %.sroa.0.0, %._crit_edge1 ]
  br i1 %.not50, label %._crit_edge1, label %91

91:                                               ; preds = %._crit_edge
  %92 = insertvalue { ptr, i160 } undef, ptr %39, 0
  %93 = ptrtoint ptr %40 to i64
  %94 = ptrtoint ptr %41 to i64
  %.sroa.334.0.insert.ext = zext i32 %42 to i160
  %.sroa.334.0.insert.shift = shl nuw i160 %.sroa.334.0.insert.ext, 128
  %.sroa.233.0.insert.ext = zext i64 %94 to i160
  %.sroa.233.0.insert.shift = shl nuw nsw i160 %.sroa.233.0.insert.ext, 64
  %.sroa.233.0.insert.insert = or disjoint i160 %.sroa.334.0.insert.shift, %.sroa.233.0.insert.shift
  %.sroa.032.0.insert.ext = zext i64 %93 to i160
  %.sroa.032.0.insert.insert = or disjoint i160 %.sroa.233.0.insert.insert, %.sroa.032.0.insert.ext
  %95 = insertvalue { ptr, i160 } %92, i160 %.sroa.032.0.insert.insert, 1
  ret { ptr, i160 } %95
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FileWriter(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 32, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef nonnull ptr @FileWriter_field_FileWriter_0(ptr nocapture readnone %0) #6 {
  ret ptr @_parameterization_i32
}

define ptr @FileWriter_B_init_textString({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 112
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @FileWriter_B_process_fileFile({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -2227788838181535664, i64 ptrtoint (ptr @File to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 120
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @FileWriter_init_textString({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract4, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @FileWriter)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @String)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = load ptr, ptr %9, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 8
  %16 = load ptr, ptr %10, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %13, i64 16
  %18 = load ptr, ptr %11, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %13, i64 24
  %20 = load i32, ptr %12, align 8
  store i32 %20, ptr %19, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @String)
  %21 = load ptr, ptr %6, align 8
  %22 = load ptr, ptr %5, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 72, ptr %22)
  %24 = load i32, ptr %8, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %13, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %15, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %17, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %19, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  call void %29(ptr %21, { ptr, ptr, ptr, i32 } %37) #23
  ret void
}

define { ptr, i160 } @FileWriter_process_fileFile({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract10 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract10, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract12, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract14, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract16, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @FileWriter)
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract5 = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract7 = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract3, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract5, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract7, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @File)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 72, ptr %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = load ptr, ptr %18, align 8
  %20 = load ptr, ptr %19, align 8
  %21 = call { ptr, ptr, ptr, i32 } %20(ptr %13) #24
  %22 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 0
  store ptr %.fca.0.extract, ptr %22, align 8
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %22, i64 8
  store ptr %.fca.1.extract, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %22, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %21, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %22, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %22, ptr nonnull @String)
  %23 = alloca { ptr, ptr, ptr, i32 }, align 8
  %24 = load ptr, ptr %22, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 8
  %26 = load ptr, ptr %.fca.1.gep, align 8
  store ptr %26, ptr %25, align 8
  %27 = getelementptr inbounds i8, ptr %23, i64 16
  %28 = load ptr, ptr %.fca.2.gep, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %23, i64 24
  %30 = load i32, ptr %.fca.3.gep, align 8
  store i32 %30, ptr %29, align 8
  call void @set_offset(ptr nonnull %23, ptr nonnull @String)
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %31, 0
  %33 = load ptr, ptr %25, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr %33, 1
  %35 = load ptr, ptr %27, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } %34, ptr %35, 2
  %37 = load i32, ptr %29, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, i32 %37, 3
  %39 = load ptr, ptr %9, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %39, 0
  %41 = load ptr, ptr %10, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, ptr %41, 1
  %43 = load ptr, ptr %11, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } %42, ptr %43, 2
  %45 = load i32, ptr %12, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, i32 %45, 3
  %47 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %47, align 8
  %48 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %47)
  %49 = call ptr @llvm.invariant.start.p0(i64 128, ptr %39)
  %50 = sext i32 %45 to i64
  %51 = getelementptr ptr, ptr %39, i64 %50
  %52 = getelementptr i8, ptr %51, i64 64
  %53 = load ptr, ptr %52, align 8
  %54 = alloca { ptr }, align 8
  store ptr %31, ptr %54, align 8
  %55 = call ptr @behavior_wrapper(ptr %53, { ptr, ptr, ptr, i32 } %46, ptr nonnull %54)
  %56 = call i32 %55({ ptr, ptr, ptr, i32 } %46, { ptr, ptr, ptr, i32 } %46, ptr nonnull %47, { ptr, ptr, ptr, i32 } %38) #25
  %.sroa.0.0.insert.ext = zext i32 %56 to i160
  %57 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %57
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @FileWriter_getter_text(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
  %4 = getelementptr i8, ptr %0, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
  %7 = getelementptr i8, ptr %0, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
  %10 = getelementptr i8, ptr %0, i64 24
  %11 = load i32, ptr %10, align 4
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
  ret { ptr, ptr, ptr, i32 } %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @FileWriter_setter_text(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %0, align 8
  %3 = getelementptr i8, ptr %0, i64 8
  store ptr %.fca.1.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.2.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store i32 %.fca.3.extract, ptr %5, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_FileSystem(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 0, i64 1 }
}

define ptr @FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT(ptr nocapture %0) {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = getelementptr i8, ptr %3, i64 8
  %5 = getelementptr i8, ptr %3, i64 16
  %6 = getelementptr i8, ptr %3, i64 24
  %7 = getelementptr i8, ptr %3, i64 32
  %8 = load i64, ptr %4, align 4
  %9 = load i64, ptr %5, align 4
  %10 = load ptr, ptr %6, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = tail call i1 @subtype_test_wrapper(ptr %10, i64 %9, i64 %8, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %11)
  %13 = getelementptr i8, ptr %0, i64 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = getelementptr i8, ptr %14, i64 16
  %17 = getelementptr i8, ptr %14, i64 24
  %18 = getelementptr i8, ptr %14, i64 32
  %19 = load i64, ptr %15, align 4
  %20 = load i64, ptr %16, align 4
  %21 = load ptr, ptr %17, align 8
  %22 = load ptr, ptr %18, align 8
  %23 = tail call i1 @subtype_test_wrapper(ptr %21, i64 %20, i64 %19, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %22)
  %24 = getelementptr i8, ptr %0, i64 16
  %25 = load ptr, ptr %24, align 8
  %26 = icmp eq ptr %25, @function_typ
  br i1 %26, label %37, label %27

27:                                               ; preds = %1
  %28 = getelementptr i8, ptr %25, i64 8
  %29 = getelementptr i8, ptr %25, i64 16
  %30 = getelementptr i8, ptr %25, i64 24
  %31 = getelementptr i8, ptr %25, i64 32
  %32 = load i64, ptr %28, align 4
  %33 = load i64, ptr %29, align 4
  %34 = load ptr, ptr %30, align 8
  %35 = load ptr, ptr %31, align 8
  %36 = tail call i1 @subtype_test_wrapper(ptr %34, i64 %33, i64 %32, i64 4146660827496349788, i64 ptrtoint (ptr @FileProcessor to i64), ptr %35)
  br label %37

37:                                               ; preds = %27, %1
  %38 = phi i32 [ 3, %1 ], [ 4, %27 ]
  %39 = zext nneg i32 %38 to i64
  %40 = getelementptr [7 x ptr], ptr @FileSystem, i64 0, i64 %39
  %41 = getelementptr i8, ptr %40, i64 80
  %42 = load ptr, ptr %41, align 8
  ret ptr %42
}

define noundef nonnull ptr @FileSystem_B__Self_read_file_file_nameString(ptr nocapture %0) {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = getelementptr i8, ptr %3, i64 8
  %5 = getelementptr i8, ptr %3, i64 16
  %6 = getelementptr i8, ptr %3, i64 24
  %7 = getelementptr i8, ptr %3, i64 32
  %8 = load i64, ptr %4, align 4
  %9 = load i64, ptr %5, align 4
  %10 = load ptr, ptr %6, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = tail call i1 @subtype_test_wrapper(ptr %10, i64 %9, i64 %8, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %11)
  ret ptr @FileSystem__Self_read_file_file_nameString
}

define noundef nonnull ptr @FileSystem_B__Self_write_file_file_nameString_textString(ptr nocapture %0) {
  %2 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %0)
  %3 = load ptr, ptr %0, align 8
  %4 = getelementptr i8, ptr %3, i64 8
  %5 = getelementptr i8, ptr %3, i64 16
  %6 = getelementptr i8, ptr %3, i64 24
  %7 = getelementptr i8, ptr %3, i64 32
  %8 = load i64, ptr %4, align 4
  %9 = load i64, ptr %5, align 4
  %10 = load ptr, ptr %6, align 8
  %11 = load ptr, ptr %7, align 8
  %12 = tail call i1 @subtype_test_wrapper(ptr %10, i64 %9, i64 %8, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %11)
  %13 = getelementptr i8, ptr %0, i64 8
  %14 = load ptr, ptr %13, align 8
  %15 = getelementptr i8, ptr %14, i64 8
  %16 = getelementptr i8, ptr %14, i64 16
  %17 = getelementptr i8, ptr %14, i64 24
  %18 = getelementptr i8, ptr %14, i64 32
  %19 = load i64, ptr %15, align 4
  %20 = load i64, ptr %16, align 4
  %21 = load ptr, ptr %17, align 8
  %22 = load ptr, ptr %18, align 8
  %23 = tail call i1 @subtype_test_wrapper(ptr %21, i64 %20, i64 %19, i64 6499063144389013426, i64 ptrtoint (ptr @String to i64), ptr %22)
  ret ptr @FileSystem__Self_write_file_file_nameString_textString
}

define { ptr, i160 } @FileSystem__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T(ptr nocapture readnone %0, { ptr, ptr, ptr, i32 } %1, { ptr, ptr, ptr, i32 } %2, { ptr, i160 } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract25 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract26 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract27 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract28 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract25, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract26, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract27, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract28, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @String)
  %.fca.0.extract21 = extractvalue { ptr, ptr, ptr, i32 } %2, 0
  %.fca.1.extract22 = extractvalue { ptr, ptr, ptr, i32 } %2, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %2, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %2, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract21, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract22, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @String)
  %.fca.1.extract19 = extractvalue { ptr, i160 } %3, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract19 to i64
  %14 = inttoptr i64 %.sroa.1.8.extract.trunc to ptr
  %15 = alloca [1 x ptr], align 8
  store ptr @File, ptr %15, align 8
  %16 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_File, ptr nonnull %15)
  %17 = extractvalue { i64, i64 } %16, 0
  %18 = call ptr @bump_malloc(i64 %17)
  %19 = alloca { ptr, ptr, ptr, i32 }, align 8
  %20 = load ptr, ptr %6, align 8
  store ptr %20, ptr %19, align 8
  %21 = getelementptr inbounds i8, ptr %19, i64 8
  %22 = load ptr, ptr %7, align 8
  store ptr %22, ptr %21, align 8
  %23 = getelementptr inbounds i8, ptr %19, i64 16
  %24 = load ptr, ptr %8, align 8
  store ptr %24, ptr %23, align 8
  %25 = getelementptr inbounds i8, ptr %19, i64 24
  %26 = load i32, ptr %9, align 8
  store i32 %26, ptr %25, align 8
  call void @set_offset(ptr nonnull %19, ptr nonnull @String)
  %27 = load ptr, ptr %19, align 8
  %28 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %27, 0
  %29 = load ptr, ptr %21, align 8
  %30 = insertvalue { ptr, ptr, ptr, i32 } %28, ptr %29, 1
  %31 = load ptr, ptr %23, align 8
  %32 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr %31, 2
  %33 = load i32, ptr %25, align 8
  %34 = insertvalue { ptr, ptr, ptr, i32 } %32, i32 %33, 3
  %35 = alloca { ptr, ptr, ptr, i32 }, align 8
  %36 = load ptr, ptr %10, align 8
  store ptr %36, ptr %35, align 8
  %37 = getelementptr inbounds i8, ptr %35, i64 8
  %38 = load ptr, ptr %11, align 8
  store ptr %38, ptr %37, align 8
  %39 = getelementptr inbounds i8, ptr %35, i64 16
  %40 = load ptr, ptr %12, align 8
  store ptr %40, ptr %39, align 8
  %41 = getelementptr inbounds i8, ptr %35, i64 24
  %42 = load i32, ptr %13, align 8
  store i32 %42, ptr %41, align 8
  call void @set_offset(ptr nonnull %35, ptr nonnull @String)
  %43 = load ptr, ptr %35, align 8
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %43, 0
  %45 = load ptr, ptr %37, align 8
  %46 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %45, 1
  %47 = load ptr, ptr %39, align 8
  %48 = insertvalue { ptr, ptr, ptr, i32 } %46, ptr %47, 2
  %49 = load i32, ptr %41, align 8
  %50 = insertvalue { ptr, ptr, ptr, i32 } %48, i32 %49, 3
  %51 = insertvalue { ptr, ptr, ptr, i32 } { ptr @File, ptr undef, ptr undef, i32 undef }, ptr %18, 1
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, ptr undef, 2
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, i32 10, 3
  %54 = alloca [2 x ptr], align 8
  store ptr @_parameterization_String, ptr %54, align 8
  %55 = getelementptr inbounds i8, ptr %54, i64 8
  store ptr @_parameterization_String, ptr %55, align 8
  %56 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %54)
  %57 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull @File)
  %58 = alloca { ptr, ptr }, align 8
  store ptr %27, ptr %58, align 8
  %59 = getelementptr inbounds i8, ptr %58, i64 8
  store ptr %43, ptr %59, align 8
  %60 = call ptr @behavior_wrapper(ptr nonnull @File_B_init_nameString_modeString, { ptr, ptr, ptr, i32 } %53, ptr nonnull %58)
  call void %60({ ptr, ptr, ptr, i32 } %53, { ptr, ptr, ptr, i32 } %53, ptr nonnull %54, { ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %50) #25
  %61 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @File, ptr %61, align 8
  %62 = getelementptr inbounds i8, ptr %61, i64 8
  store ptr %18, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %61, i64 16
  %64 = getelementptr inbounds i8, ptr %61, i64 24
  store i32 10, ptr %64, align 8
  call void @set_offset(ptr nonnull %61, ptr nonnull @File)
  %65 = load ptr, ptr %61, align 8
  %66 = load ptr, ptr %62, align 8
  %67 = load ptr, ptr %63, align 8
  %68 = load i32, ptr %64, align 8
  %69 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %65, ptr %69, align 8
  %70 = getelementptr inbounds i8, ptr %69, i64 8
  store ptr %66, ptr %70, align 8
  %71 = getelementptr inbounds i8, ptr %69, i64 16
  store ptr %67, ptr %71, align 8
  %72 = getelementptr inbounds i8, ptr %69, i64 24
  store i32 %68, ptr %72, align 8
  call void @set_offset(ptr nonnull %69, ptr nonnull @File)
  %73 = load ptr, ptr %69, align 8
  %74 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %73, 0
  %75 = load ptr, ptr %70, align 8
  %76 = insertvalue { ptr, ptr, ptr, i32 } %74, ptr %75, 1
  %77 = load ptr, ptr %71, align 8
  %78 = insertvalue { ptr, ptr, ptr, i32 } %76, ptr %77, 2
  %79 = load i32, ptr %72, align 8
  %80 = insertvalue { ptr, ptr, ptr, i32 } %78, i32 %79, 3
  %81 = call { ptr, i160 } %14({ ptr, ptr, ptr, i32 } %80)
  %82 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %65, 0
  %83 = insertvalue { ptr, ptr, ptr, i32 } %82, ptr %66, 1
  %84 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %67, 2
  %85 = insertvalue { ptr, ptr, ptr, i32 } %84, i32 %68, 3
  %86 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %87 = call ptr @llvm.invariant.start.p0(i64 128, ptr %65)
  %88 = sext i32 %68 to i64
  %89 = getelementptr ptr, ptr %65, i64 %88
  %90 = getelementptr i8, ptr %89, i64 40
  %91 = load ptr, ptr %90, align 8
  %92 = call ptr @behavior_wrapper(ptr %91, { ptr, ptr, ptr, i32 } %85, ptr nonnull %5)
  call void %92({ ptr, ptr, ptr, i32 } %85, { ptr, ptr, ptr, i32 } %85, ptr nonnull %5) #25
  ret { ptr, i160 } %81
}

define { ptr, i160 } @FileSystem__Self_process_file_file_nameString_modeString_processorFileProcessorT(ptr nocapture readnone %0, { ptr, ptr, ptr, i32 } %1, { ptr, ptr, ptr, i32 } %2, { ptr, i160 } %3) {
  %5 = alloca [0 x ptr], align 8
  %.fca.0.extract27 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract28 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract29 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract30 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract27, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract28, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract29, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract30, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @String)
  %.fca.0.extract23 = extractvalue { ptr, ptr, ptr, i32 } %2, 0
  %.fca.1.extract24 = extractvalue { ptr, ptr, ptr, i32 } %2, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %2, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %2, 3
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract23, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr %.fca.1.extract24, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr %.fca.2.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %10, i64 24
  store i32 %.fca.3.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @String)
  %.fca.0.extract19 = extractvalue { ptr, i160 } %3, 0
  %.fca.1.extract20 = extractvalue { ptr, i160 } %3, 1
  %14 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract19, ptr %14, align 8
  %15 = getelementptr inbounds i8, ptr %14, i64 8
  store i160 %.fca.1.extract20, ptr %15, align 8
  call void @set_offset(ptr nonnull %14, ptr nonnull @FileProcessor)
  %16 = alloca [1 x ptr], align 8
  store ptr @File, ptr %16, align 8
  %17 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_File, ptr nonnull %16)
  %18 = extractvalue { i64, i64 } %17, 0
  %19 = call ptr @bump_malloc(i64 %18)
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  %21 = load ptr, ptr %6, align 8
  store ptr %21, ptr %20, align 8
  %22 = getelementptr inbounds i8, ptr %20, i64 8
  %23 = load ptr, ptr %7, align 8
  store ptr %23, ptr %22, align 8
  %24 = getelementptr inbounds i8, ptr %20, i64 16
  %25 = load ptr, ptr %8, align 8
  store ptr %25, ptr %24, align 8
  %26 = getelementptr inbounds i8, ptr %20, i64 24
  %27 = load i32, ptr %9, align 8
  store i32 %27, ptr %26, align 8
  call void @set_offset(ptr nonnull %20, ptr nonnull @String)
  %28 = load ptr, ptr %20, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %28, 0
  %30 = load ptr, ptr %22, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } %29, ptr %30, 1
  %32 = load ptr, ptr %24, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 2
  %34 = load i32, ptr %26, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 %34, 3
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = load ptr, ptr %10, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 8
  %39 = load ptr, ptr %11, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr inbounds i8, ptr %36, i64 16
  %41 = load ptr, ptr %12, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr inbounds i8, ptr %36, i64 24
  %43 = load i32, ptr %13, align 8
  store i32 %43, ptr %42, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @String)
  %44 = load ptr, ptr %36, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = load ptr, ptr %38, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 1
  %48 = load ptr, ptr %40, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 2
  %50 = load i32, ptr %42, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %50, 3
  %52 = insertvalue { ptr, ptr, ptr, i32 } { ptr @File, ptr undef, ptr undef, i32 undef }, ptr %19, 1
  %53 = insertvalue { ptr, ptr, ptr, i32 } %52, ptr undef, 2
  %54 = insertvalue { ptr, ptr, ptr, i32 } %53, i32 10, 3
  %55 = alloca [2 x ptr], align 8
  store ptr @_parameterization_String, ptr %55, align 8
  %56 = getelementptr inbounds i8, ptr %55, i64 8
  store ptr @_parameterization_String, ptr %56, align 8
  %57 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %55)
  %58 = call ptr @llvm.invariant.start.p0(i64 128, ptr nonnull @File)
  %59 = alloca { ptr, ptr }, align 8
  store ptr %28, ptr %59, align 8
  %60 = getelementptr inbounds i8, ptr %59, i64 8
  store ptr %44, ptr %60, align 8
  %61 = call ptr @behavior_wrapper(ptr nonnull @File_B_init_nameString_modeString, { ptr, ptr, ptr, i32 } %54, ptr nonnull %59)
  call void %61({ ptr, ptr, ptr, i32 } %54, { ptr, ptr, ptr, i32 } %54, ptr nonnull %55, { ptr, ptr, ptr, i32 } %35, { ptr, ptr, ptr, i32 } %51) #25
  %62 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @File, ptr %62, align 8
  %63 = getelementptr inbounds i8, ptr %62, i64 8
  store ptr %19, ptr %63, align 8
  %64 = getelementptr inbounds i8, ptr %62, i64 16
  %65 = getelementptr inbounds i8, ptr %62, i64 24
  store i32 10, ptr %65, align 8
  call void @set_offset(ptr nonnull %62, ptr nonnull @File)
  %66 = load ptr, ptr %62, align 8
  %67 = load ptr, ptr %63, align 8
  %68 = load ptr, ptr %64, align 8
  %69 = load i32, ptr %65, align 8
  %70 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %66, ptr %70, align 8
  %71 = getelementptr inbounds i8, ptr %70, i64 8
  store ptr %67, ptr %71, align 8
  %72 = getelementptr inbounds i8, ptr %70, i64 16
  store ptr %68, ptr %72, align 8
  %73 = getelementptr inbounds i8, ptr %70, i64 24
  store i32 %69, ptr %73, align 8
  call void @set_offset(ptr nonnull %70, ptr nonnull @File)
  %74 = load ptr, ptr %70, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %74, 0
  %76 = load ptr, ptr %71, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, ptr %76, 1
  %78 = load ptr, ptr %72, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } %77, ptr %78, 2
  %80 = load i32, ptr %73, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, i32 %80, 3
  %82 = load ptr, ptr %14, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %82, 0
  %84 = load ptr, ptr %15, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, ptr %84, 1
  %86 = getelementptr inbounds i8, ptr %14, i64 16
  %87 = load ptr, ptr %86, align 8
  %88 = insertvalue { ptr, ptr, ptr, i32 } %85, ptr %87, 2
  %89 = getelementptr inbounds i8, ptr %14, i64 24
  %90 = load i32, ptr %89, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %88, i32 %90, 3
  %92 = alloca [1 x ptr], align 8
  store ptr @_parameterization_File, ptr %92, align 8
  %93 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %92)
  %94 = call ptr @llvm.invariant.start.p0(i64 24, ptr %82)
  %95 = sext i32 %90 to i64
  %96 = getelementptr ptr, ptr %82, i64 %95
  %97 = getelementptr i8, ptr %96, i64 8
  %98 = load ptr, ptr %97, align 8
  %99 = alloca { ptr }, align 8
  store ptr %74, ptr %99, align 8
  %100 = call ptr @behavior_wrapper(ptr %98, { ptr, ptr, ptr, i32 } %91, ptr nonnull %99)
  %101 = call { ptr, i160 } %100({ ptr, ptr, ptr, i32 } %91, { ptr, ptr, ptr, i32 } %91, ptr nonnull %92, { ptr, ptr, ptr, i32 } %81) #25
  %102 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %103 = insertvalue { ptr, ptr, ptr, i32 } %102, ptr %67, 1
  %104 = insertvalue { ptr, ptr, ptr, i32 } %103, ptr %68, 2
  %105 = insertvalue { ptr, ptr, ptr, i32 } %104, i32 %69, 3
  %106 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %5)
  %107 = call ptr @llvm.invariant.start.p0(i64 128, ptr %66)
  %108 = sext i32 %69 to i64
  %109 = getelementptr ptr, ptr %66, i64 %108
  %110 = getelementptr i8, ptr %109, i64 40
  %111 = load ptr, ptr %110, align 8
  %112 = call ptr @behavior_wrapper(ptr %111, { ptr, ptr, ptr, i32 } %105, ptr nonnull %5)
  call void %112({ ptr, ptr, ptr, i32 } %105, { ptr, ptr, ptr, i32 } %105, ptr nonnull %5) #25
  ret { ptr, i160 } %101
}

define { ptr, ptr, ptr, i32 } @FileSystem__Self_read_file_file_nameString(ptr nocapture readnone %0, { ptr, ptr, ptr, i32 } %1) {
  %3 = alloca [0 x ptr], align 8
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract18 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract17, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract18, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %8 = call ptr @bump_malloc(i64 2)
  store <1 x i8> <i8 114>, ptr %8, align 1
  %9 = alloca [1 x ptr], align 8
  store ptr @String, ptr %9, align 8
  %10 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %9)
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = call ptr @bump_malloc(i64 %11)
  %13 = insertvalue { ptr } undef, ptr %8, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %12, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr undef, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 10, 3
  %17 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr @_parameterization_i32, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %17, i64 16
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %17)
  %21 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %22 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr @i32_typ, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %22, i64 16
  store ptr @i32_typ, ptr %24, align 8
  %25 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %16, ptr nonnull %22)
  call void %25({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %17, { ptr } %13, i32 1, i32 2) #25
  %26 = alloca [1 x ptr], align 8
  store ptr @FileReader, ptr %26, align 8
  %27 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileReader, ptr nonnull %26)
  %28 = extractvalue { i64, i64 } %27, 0
  %29 = call ptr @bump_malloc(i64 %28)
  %30 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileReader, ptr undef, ptr undef, i32 undef }, ptr %29, 1
  %31 = insertvalue { ptr, ptr, ptr, i32 } %30, ptr undef, 2
  %32 = insertvalue { ptr, ptr, ptr, i32 } %31, i32 10, 3
  %33 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %3)
  %34 = call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @FileReader)
  %35 = call ptr @behavior_wrapper(ptr nonnull @FileReader_B_init_, { ptr, ptr, ptr, i32 } %32, ptr nonnull %3)
  call void %35({ ptr, ptr, ptr, i32 } %32, { ptr, ptr, ptr, i32 } %32, ptr nonnull %3) #25
  %36 = alloca { ptr, ptr, ptr, i32 }, align 8
  %37 = load ptr, ptr %4, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr inbounds i8, ptr %36, i64 8
  %39 = load ptr, ptr %5, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr inbounds i8, ptr %36, i64 16
  %41 = load ptr, ptr %6, align 8
  store ptr %41, ptr %40, align 8
  %42 = getelementptr inbounds i8, ptr %36, i64 24
  %43 = load i32, ptr %7, align 8
  store i32 %43, ptr %42, align 8
  call void @set_offset(ptr nonnull %36, ptr nonnull @String)
  %44 = load ptr, ptr %36, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = load ptr, ptr %38, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 1
  %48 = load ptr, ptr %40, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 2
  %50 = load i32, ptr %42, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %50, 3
  %52 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %52, align 8
  %53 = getelementptr inbounds i8, ptr %52, i64 8
  store ptr %12, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %52, i64 16
  %55 = getelementptr inbounds i8, ptr %52, i64 24
  store i32 10, ptr %55, align 8
  call void @set_offset(ptr nonnull %52, ptr nonnull @String)
  %56 = load ptr, ptr %52, align 8
  %57 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %56, 0
  %58 = load ptr, ptr %53, align 8
  %59 = insertvalue { ptr, ptr, ptr, i32 } %57, ptr %58, 1
  %60 = load ptr, ptr %54, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } %59, ptr %60, 2
  %62 = load i32, ptr %55, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, i32 %62, 3
  %64 = ptrtoint ptr %29 to i64
  %.sroa.3.8.insert.ext = zext i64 %64 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %65 = insertvalue { ptr, i160 } { ptr @FileReader, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %66 = alloca [3 x ptr], align 8
  store ptr @_parameterization_String, ptr %66, align 8
  %67 = getelementptr inbounds i8, ptr %66, i64 8
  store ptr @_parameterization_String, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %66, i64 16
  store ptr @_parameterization_FileReader, ptr %68, align 8
  %69 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %66)
  %70 = call ptr @llvm.invariant.start.p0(i64 56, ptr nonnull @FileSystem)
  %71 = alloca { ptr, ptr, ptr }, align 8
  store ptr %44, ptr %71, align 8
  %72 = getelementptr inbounds i8, ptr %71, i64 8
  store ptr %56, ptr %72, align 8
  %73 = getelementptr inbounds i8, ptr %71, i64 16
  store ptr @FileReader, ptr %73, align 8
  %74 = call ptr @class_behavior_wrapper(ptr nonnull @FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT, ptr nonnull %71)
  %75 = call { ptr, i160 } %74(ptr nonnull %66, { ptr, ptr, ptr, i32 } %51, { ptr, ptr, ptr, i32 } %63, { ptr, i160 } %65) #25
  %.fca.0.extract = extractvalue { ptr, i160 } %75, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %75, 1
  %76 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %76, align 8
  %77 = getelementptr inbounds i8, ptr %76, i64 8
  store i160 %.fca.1.extract, ptr %77, align 8
  call void @set_offset(ptr nonnull %76, ptr nonnull @String)
  %78 = alloca { ptr, ptr, ptr, i32 }, align 8
  %79 = load ptr, ptr %76, align 8
  store ptr %79, ptr %78, align 8
  %80 = getelementptr inbounds i8, ptr %78, i64 8
  %81 = load ptr, ptr %77, align 8
  store ptr %81, ptr %80, align 8
  %82 = getelementptr inbounds i8, ptr %76, i64 16
  %83 = getelementptr inbounds i8, ptr %78, i64 16
  %84 = load ptr, ptr %82, align 8
  store ptr %84, ptr %83, align 8
  %85 = getelementptr inbounds i8, ptr %76, i64 24
  %86 = getelementptr inbounds i8, ptr %78, i64 24
  %87 = load i32, ptr %85, align 8
  store i32 %87, ptr %86, align 8
  call void @set_offset(ptr nonnull %78, ptr nonnull @String)
  %88 = load ptr, ptr %78, align 8
  %89 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %88, 0
  %90 = load ptr, ptr %80, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } %89, ptr %90, 1
  %92 = load ptr, ptr %83, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %92, 2
  %94 = load i32, ptr %86, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, i32 %94, 3
  ret { ptr, ptr, ptr, i32 } %95
}

define void @FileSystem__Self_write_file_file_nameString_textString(ptr nocapture readnone %0, { ptr, ptr, ptr, i32 } %1, { ptr, ptr, ptr, i32 } %2) {
  %.fca.0.extract21 = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract22 = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract23 = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract24 = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract21, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract22, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract23, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract24, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @String)
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %2, 0
  %.fca.1.extract18 = extractvalue { ptr, ptr, ptr, i32 } %2, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %2, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %2, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract17, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract18, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract, ptr %11, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @String)
  %12 = call ptr @bump_malloc(i64 2)
  store <1 x i8> <i8 119>, ptr %12, align 1
  %13 = alloca [1 x ptr], align 8
  store ptr @String, ptr %13, align 8
  %14 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %13)
  %15 = extractvalue { i64, i64 } %14, 0
  %16 = call ptr @bump_malloc(i64 %15)
  %17 = insertvalue { ptr } undef, ptr %12, 0
  %18 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %16, 1
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr undef, 2
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 10, 3
  %21 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr @_parameterization_i32, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %21, i64 16
  store ptr @_parameterization_i32, ptr %23, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %21)
  %25 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %26 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr @i32_typ, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr @i32_typ, ptr %28, align 8
  %29 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %20, ptr nonnull %26)
  call void %29({ ptr, ptr, ptr, i32 } %20, { ptr, ptr, ptr, i32 } %20, ptr nonnull %21, { ptr } %17, i32 1, i32 2) #25
  %30 = alloca [1 x ptr], align 8
  store ptr @FileWriter, ptr %30, align 8
  %31 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_FileWriter, ptr nonnull %30)
  %32 = extractvalue { i64, i64 } %31, 0
  %33 = call ptr @bump_malloc(i64 %32)
  %34 = alloca { ptr, ptr, ptr, i32 }, align 8
  %35 = load ptr, ptr %8, align 8
  store ptr %35, ptr %34, align 8
  %36 = getelementptr inbounds i8, ptr %34, i64 8
  %37 = load ptr, ptr %9, align 8
  store ptr %37, ptr %36, align 8
  %38 = getelementptr inbounds i8, ptr %34, i64 16
  %39 = load ptr, ptr %10, align 8
  store ptr %39, ptr %38, align 8
  %40 = getelementptr inbounds i8, ptr %34, i64 24
  %41 = load i32, ptr %11, align 8
  store i32 %41, ptr %40, align 8
  call void @set_offset(ptr nonnull %34, ptr nonnull @String)
  %42 = load ptr, ptr %34, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %42, 0
  %44 = load ptr, ptr %36, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } %43, ptr %44, 1
  %46 = load ptr, ptr %38, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 2
  %48 = load i32, ptr %40, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, i32 %48, 3
  %50 = insertvalue { ptr, ptr, ptr, i32 } { ptr @FileWriter, ptr undef, ptr undef, i32 undef }, ptr %33, 1
  %51 = insertvalue { ptr, ptr, ptr, i32 } %50, ptr undef, 2
  %52 = insertvalue { ptr, ptr, ptr, i32 } %51, i32 10, 3
  %53 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %53, align 8
  %54 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %53)
  %55 = call ptr @llvm.invariant.start.p0(i64 72, ptr nonnull @FileWriter)
  %56 = alloca { ptr }, align 8
  store ptr %42, ptr %56, align 8
  %57 = call ptr @behavior_wrapper(ptr nonnull @FileWriter_B_init_textString, { ptr, ptr, ptr, i32 } %52, ptr nonnull %56)
  call void %57({ ptr, ptr, ptr, i32 } %52, { ptr, ptr, ptr, i32 } %52, ptr nonnull %53, { ptr, ptr, ptr, i32 } %49) #25
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  %59 = load ptr, ptr %4, align 8
  store ptr %59, ptr %58, align 8
  %60 = getelementptr inbounds i8, ptr %58, i64 8
  %61 = load ptr, ptr %5, align 8
  store ptr %61, ptr %60, align 8
  %62 = getelementptr inbounds i8, ptr %58, i64 16
  %63 = load ptr, ptr %6, align 8
  store ptr %63, ptr %62, align 8
  %64 = getelementptr inbounds i8, ptr %58, i64 24
  %65 = load i32, ptr %7, align 8
  store i32 %65, ptr %64, align 8
  call void @set_offset(ptr nonnull %58, ptr nonnull @String)
  %66 = load ptr, ptr %58, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %66, 0
  %68 = load ptr, ptr %60, align 8
  %69 = insertvalue { ptr, ptr, ptr, i32 } %67, ptr %68, 1
  %70 = load ptr, ptr %62, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } %69, ptr %70, 2
  %72 = load i32, ptr %64, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, i32 %72, 3
  %74 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %74, align 8
  %75 = getelementptr inbounds i8, ptr %74, i64 8
  store ptr %16, ptr %75, align 8
  %76 = getelementptr inbounds i8, ptr %74, i64 16
  %77 = getelementptr inbounds i8, ptr %74, i64 24
  store i32 10, ptr %77, align 8
  call void @set_offset(ptr nonnull %74, ptr nonnull @String)
  %78 = load ptr, ptr %74, align 8
  %79 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %78, 0
  %80 = load ptr, ptr %75, align 8
  %81 = insertvalue { ptr, ptr, ptr, i32 } %79, ptr %80, 1
  %82 = load ptr, ptr %76, align 8
  %83 = insertvalue { ptr, ptr, ptr, i32 } %81, ptr %82, 2
  %84 = load i32, ptr %77, align 8
  %85 = insertvalue { ptr, ptr, ptr, i32 } %83, i32 %84, 3
  %86 = ptrtoint ptr %33 to i64
  %.sroa.3.8.insert.ext = zext i64 %86 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %87 = insertvalue { ptr, i160 } { ptr @FileWriter, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %88 = alloca [3 x ptr], align 8
  store ptr @_parameterization_String, ptr %88, align 8
  %89 = getelementptr inbounds i8, ptr %88, i64 8
  store ptr @_parameterization_String, ptr %89, align 8
  %90 = getelementptr inbounds i8, ptr %88, i64 16
  store ptr @_parameterization_FileWriter, ptr %90, align 8
  %91 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %88)
  %92 = call ptr @llvm.invariant.start.p0(i64 56, ptr nonnull @FileSystem)
  %93 = alloca { ptr, ptr, ptr }, align 8
  store ptr %66, ptr %93, align 8
  %94 = getelementptr inbounds i8, ptr %93, i64 8
  store ptr %78, ptr %94, align 8
  %95 = getelementptr inbounds i8, ptr %93, i64 16
  store ptr @FileWriter, ptr %95, align 8
  %96 = call ptr @class_behavior_wrapper(ptr nonnull @FileSystem_B__Self_process_file_file_nameString_modeString_processorFunctionFile_to_T__Self_process_file_file_nameString_modeString_processorFileProcessorT, ptr nonnull %93)
  %97 = call { ptr, i160 } %96(ptr nonnull %88, { ptr, ptr, ptr, i32 } %73, { ptr, ptr, ptr, i32 } %85, { ptr, i160 } %87) #25
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none)
define ptr @class_behavior_wrapper(ptr %f, ptr nocapture nofree noundef nonnull %0) #8 {
  %result = call ptr %f(ptr nocapture nofree noundef nonnull %0) #26
  ret ptr %result
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Integer(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 4, i64 4 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer_B_init_valuei32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer_B__ADD_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer_B__SUB_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer_B__MUL_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer_B__DIV_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer_B_print_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Integer_init_valuei32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Integer)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  call void %17(ptr %9, i32 %3) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @Integer__ADD_otheri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Integer)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %9) #24
  %18 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Integer, ptr nonnull %18)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = load ptr, ptr %6, align 8
  %23 = load ptr, ptr %5, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = load i32, ptr %8, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %22) #24
  %31 = add i32 %30, %3
  %32 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Integer, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr undef, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 10, 3
  %35 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %37 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Integer)
  %38 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %38, align 8
  %39 = call ptr @behavior_wrapper(ptr nonnull @Integer_B_init_valuei32, { ptr, ptr, ptr, i32 } %34, ptr nonnull %38)
  call void %39({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %35, i32 %31) #25
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Integer, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %21, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 10, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Integer)
  %44 = load ptr, ptr %40, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = load ptr, ptr %41, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 1
  %48 = load ptr, ptr %42, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 2
  %50 = load i32, ptr %43, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %50, 3
  ret { ptr, ptr, ptr, i32 } %51
}

define { ptr, ptr, ptr, i32 } @Integer__SUB_otheri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Integer)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %9) #24
  %18 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Integer, ptr nonnull %18)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = load ptr, ptr %6, align 8
  %23 = load ptr, ptr %5, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = load i32, ptr %8, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %22) #24
  %31 = sub i32 %30, %3
  %32 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Integer, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr undef, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 10, 3
  %35 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %37 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Integer)
  %38 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %38, align 8
  %39 = call ptr @behavior_wrapper(ptr nonnull @Integer_B_init_valuei32, { ptr, ptr, ptr, i32 } %34, ptr nonnull %38)
  call void %39({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %35, i32 %31) #25
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Integer, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %21, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 10, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Integer)
  %44 = load ptr, ptr %40, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = load ptr, ptr %41, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 1
  %48 = load ptr, ptr %42, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 2
  %50 = load i32, ptr %43, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %50, 3
  ret { ptr, ptr, ptr, i32 } %51
}

define { ptr, ptr, ptr, i32 } @Integer__MUL_otheri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Integer)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %9) #24
  %18 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Integer, ptr nonnull %18)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = load ptr, ptr %6, align 8
  %23 = load ptr, ptr %5, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = load i32, ptr %8, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %22) #24
  %31 = mul i32 %30, %3
  %32 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Integer, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr undef, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 10, 3
  %35 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %37 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Integer)
  %38 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %38, align 8
  %39 = call ptr @behavior_wrapper(ptr nonnull @Integer_B_init_valuei32, { ptr, ptr, ptr, i32 } %34, ptr nonnull %38)
  call void %39({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %35, i32 %31) #25
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Integer, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %21, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 10, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Integer)
  %44 = load ptr, ptr %40, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = load ptr, ptr %41, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 1
  %48 = load ptr, ptr %42, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 2
  %50 = load i32, ptr %43, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %50, 3
  ret { ptr, ptr, ptr, i32 } %51
}

define { ptr, ptr, ptr, i32 } @Integer__DIV_otheri32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Integer)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %9) #24
  %18 = alloca [1 x ptr], align 8
  store ptr @Integer, ptr %18, align 8
  %19 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Integer, ptr nonnull %18)
  %20 = extractvalue { i64, i64 } %19, 0
  %21 = call ptr @bump_malloc(i64 %20)
  %22 = load ptr, ptr %6, align 8
  %23 = load ptr, ptr %5, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %23)
  %25 = load i32, ptr %8, align 8
  %26 = sext i32 %25 to i64
  %27 = getelementptr ptr, ptr %23, i64 %26
  %28 = load ptr, ptr %27, align 8
  %29 = load ptr, ptr %28, align 8
  %30 = call i32 %29(ptr %22) #24
  %31 = sdiv i32 %30, %3
  %32 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Integer, ptr undef, ptr undef, i32 undef }, ptr %21, 1
  %33 = insertvalue { ptr, ptr, ptr, i32 } %32, ptr undef, 2
  %34 = insertvalue { ptr, ptr, ptr, i32 } %33, i32 10, 3
  %35 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %35, align 8
  %36 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %37 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Integer)
  %38 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %38, align 8
  %39 = call ptr @behavior_wrapper(ptr nonnull @Integer_B_init_valuei32, { ptr, ptr, ptr, i32 } %34, ptr nonnull %38)
  call void %39({ ptr, ptr, ptr, i32 } %34, { ptr, ptr, ptr, i32 } %34, ptr nonnull %35, i32 %31) #25
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @Integer, ptr %40, align 8
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %21, ptr %41, align 8
  %42 = getelementptr inbounds i8, ptr %40, i64 16
  %43 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 10, ptr %43, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Integer)
  %44 = load ptr, ptr %40, align 8
  %45 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %44, 0
  %46 = load ptr, ptr %41, align 8
  %47 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %46, 1
  %48 = load ptr, ptr %42, align 8
  %49 = insertvalue { ptr, ptr, ptr, i32 } %47, ptr %48, 2
  %50 = load i32, ptr %43, align 8
  %51 = insertvalue { ptr, ptr, ptr, i32 } %49, i32 %50, 3
  ret { ptr, ptr, ptr, i32 } %51
}

define void @Integer_print_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Integer)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 104, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #24
  %.sroa.0.0.insert.ext = zext i32 %16 to i160
  %17 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %18 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %18)
  %20 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %21 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %21, align 8
  %22 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %21)
  call void %22(ptr nonnull %18, { ptr, i160 } %17) #25
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Integer_getter_value(ptr nocapture readonly %0) #1 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Integer_setter_value(ptr nocapture writeonly %0, i32 %1) #9 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_BigBoy(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @BigBoy_B_introduce_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 96
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @BigBoy_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 104
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @BigBoy_introduce_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @BigBoy)
  %8 = call ptr @bump_malloc(i64 11)
  store <10 x i8> <i8 72, i8 101, i8 114, i8 101, i8 32, i8 73, i8 32, i8 97, i8 109, i8 33>, ptr %8, align 16
  %9 = alloca [1 x ptr], align 8
  store ptr @String, ptr %9, align 8
  %10 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %9)
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = call ptr @bump_malloc(i64 %11)
  %13 = insertvalue { ptr } undef, ptr %8, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %12, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr undef, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 10, 3
  %17 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr @_parameterization_i32, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %17, i64 16
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %17)
  %21 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %22 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr @i32_typ, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %22, i64 16
  store ptr @i32_typ, ptr %24, align 8
  %25 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %16, ptr nonnull %22)
  call void %25({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %17, { ptr } %13, i32 10, i32 11) #25
  %26 = ptrtoint ptr %12 to i64
  %.sroa.3.8.insert.ext = zext i64 %26 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %27 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %28 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %28, align 8
  %29 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %28)
  %30 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %31 = alloca { ptr }, align 8
  store ptr @String, ptr %31, align 8
  %32 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %31)
  call void %32(ptr nonnull %28, { ptr, i160 } %27) #25
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Integer2(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 4, i64 4 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B_value_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B_init_valuei32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B__ADD_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B__SUB_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 184
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B__MUL_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 192
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B__DIV_otheri32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B_print_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B_introduce_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Integer2_B_repr_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define i32 @Integer2_value_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Integer2)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 320, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #24
  ret i32 %16
}

define { ptr, ptr, ptr, i32 } @Integer2_repr_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Integer2)
  %8 = call ptr @bump_malloc(i64 9)
  store <8 x i8> <i8 73, i8 110, i8 116, i8 101, i8 103, i8 101, i8 114, i8 50>, ptr %8, align 8
  %9 = alloca [1 x ptr], align 8
  store ptr @String, ptr %9, align 8
  %10 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %9)
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = call ptr @bump_malloc(i64 %11)
  %13 = insertvalue { ptr } undef, ptr %8, 0
  %14 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %12, 1
  %15 = insertvalue { ptr, ptr, ptr, i32 } %14, ptr undef, 2
  %16 = insertvalue { ptr, ptr, ptr, i32 } %15, i32 10, 3
  %17 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %17, i64 8
  store ptr @_parameterization_i32, ptr %18, align 8
  %19 = getelementptr inbounds i8, ptr %17, i64 16
  store ptr @_parameterization_i32, ptr %19, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %17)
  %21 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %22 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr @i32_typ, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %22, i64 16
  store ptr @i32_typ, ptr %24, align 8
  %25 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %16, ptr nonnull %22)
  call void %25({ ptr, ptr, ptr, i32 } %16, { ptr, ptr, ptr, i32 } %16, ptr nonnull %17, { ptr } %13, i32 8, i32 9) #25
  %26 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr %12, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  %29 = getelementptr inbounds i8, ptr %26, i64 24
  store i32 10, ptr %29, align 8
  call void @set_offset(ptr nonnull %26, ptr nonnull @String)
  %30 = load ptr, ptr %26, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %27, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %28, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %29, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  ret { ptr, ptr, ptr, i32 } %37
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Integer2_getter_value(ptr nocapture readonly %0) #1 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Integer2_setter_value(ptr nocapture writeonly %0, i32 %1) #9 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Animal(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 24, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Animal_B_init_agei32_hpf64_skilli32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 24, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 144
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Animal_B_say_age_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Animal_B_say_skill_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Animal_B_say_messagei32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Animal_B_do_nothing_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Animal_init_agei32_hpf64_skilli32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, double %4, i32 %5) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract, ptr %10, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @Animal)
  %11 = load ptr, ptr %8, align 8
  %12 = load ptr, ptr %7, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 104, ptr %12)
  %14 = load i32, ptr %10, align 8
  %15 = sext i32 %14 to i64
  %16 = getelementptr ptr, ptr %12, i64 %15
  %17 = load ptr, ptr %16, align 8
  %18 = getelementptr i8, ptr %17, i64 8
  %19 = load ptr, ptr %18, align 8
  call void %19(ptr %11, i32 %3) #23
  %20 = load ptr, ptr %8, align 8
  %21 = load ptr, ptr %7, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 104, ptr %21)
  %23 = load i32, ptr %10, align 8
  %24 = sext i32 %23 to i64
  %25 = getelementptr ptr, ptr %21, i64 %24
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  call void %29(ptr %20, double %4) #23
  %30 = load ptr, ptr %8, align 8
  %31 = load ptr, ptr %7, align 8
  %32 = call ptr @llvm.invariant.start.p0(i64 104, ptr %31)
  %33 = load i32, ptr %10, align 8
  %34 = sext i32 %33 to i64
  %35 = getelementptr ptr, ptr %31, i64 %34
  %36 = getelementptr i8, ptr %35, i64 16
  %37 = load ptr, ptr %36, align 8
  %38 = getelementptr i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8
  call void %39(ptr %30, i32 %5) #23
  ret void
}

define void @Animal_say_age_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Animal)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 104, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #24
  %17 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %9, 0
  %18 = insertvalue { ptr, ptr, ptr, i32 } %17, ptr %8, 1
  %19 = load ptr, ptr %6, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %19, 2
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, i32 %11, 3
  %22 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %22, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %22)
  %24 = call ptr @llvm.invariant.start.p0(i64 104, ptr %9)
  %25 = getelementptr i8, ptr %13, i64 48
  %26 = load ptr, ptr %25, align 8
  %27 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %27, align 8
  %28 = call ptr @behavior_wrapper(ptr %26, { ptr, ptr, ptr, i32 } %21, ptr nonnull %27)
  call void %28({ ptr, ptr, ptr, i32 } %21, { ptr, ptr, ptr, i32 } %21, ptr nonnull %22, i32 %16) #25
  %29 = load ptr, ptr %5, align 8
  %30 = load ptr, ptr %4, align 8
  %31 = call ptr @llvm.invariant.start.p0(i64 104, ptr %30)
  %32 = load i32, ptr %7, align 8
  %33 = sext i32 %32 to i64
  %34 = getelementptr ptr, ptr %30, i64 %33
  %35 = load ptr, ptr %34, align 8
  %36 = load ptr, ptr %35, align 8
  %37 = call i32 %36(ptr %29) #24
  %38 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %39 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %29, 1
  %40 = load ptr, ptr %6, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 2
  %42 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %32, 3
  %43 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %43)
  %45 = call ptr @llvm.invariant.start.p0(i64 104, ptr %30)
  %46 = getelementptr i8, ptr %34, i64 48
  %47 = load ptr, ptr %46, align 8
  %48 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %48, align 8
  %49 = call ptr @behavior_wrapper(ptr %47, { ptr, ptr, ptr, i32 } %42, ptr nonnull %48)
  call void %49({ ptr, ptr, ptr, i32 } %42, { ptr, ptr, ptr, i32 } %42, ptr nonnull %43, i32 %37) #25
  ret void
}

define void @Animal_say_skill_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
._crit_edge:
  %3 = alloca [1 x ptr], align 8
  %4 = alloca { ptr }, align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Animal)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 104, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = getelementptr i8, ptr %14, i64 16
  %16 = load ptr, ptr %15, align 8
  %17 = load ptr, ptr %16, align 8
  %18 = call i32 %17(ptr %9) #24
  %.sroa.03.0.insert.ext = zext i32 %18 to i160
  %19 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.03.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %3, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %21 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %4, align 8
  %22 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %4)
  call void %22(ptr nonnull %3, { ptr, i160 } %19) #25
  ret void
}

define void @Animal_say_messagei32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Animal)
  %.sroa.0.0.insert.ext = zext i32 %3 to i160
  %9 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %10 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %10, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %10)
  %12 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %13 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %13, align 8
  %14 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %13)
  call void %14(ptr nonnull %10, { ptr, i160 } %9) #25
  ret void
}

define { ptr, i160 } @Animal_do_nothing_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Animal)
  %8 = alloca [1 x ptr], align 8
  store ptr @Animal, ptr %8, align 8
  %9 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Animal, ptr nonnull %8)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = call ptr @bump_malloc(i64 %10)
  %12 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Animal, ptr undef, ptr undef, i32 undef }, ptr %11, 1
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr undef, 2
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 10, 3
  %15 = alloca [3 x ptr], align 8
  store ptr @_parameterization_i32, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr @_parameterization_f64, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr @_parameterization_i32, ptr %17, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %15)
  %19 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Animal)
  %20 = alloca { ptr, ptr, ptr }, align 8
  store ptr @i32_typ, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr @f64_typ, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %20, i64 16
  store ptr @i32_typ, ptr %22, align 8
  %23 = call ptr @behavior_wrapper(ptr nonnull @Animal_B_init_agei32_hpf64_skilli32, { ptr, ptr, ptr, i32 } %14, ptr nonnull %20)
  call void %23({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %15, i32 5, double 5.000000e+00, i32 5) #25
  %24 = ptrtoint ptr %11 to i64
  %.sroa.3.8.insert.ext = zext i64 %24 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %25 = insertvalue { ptr, i160 } { ptr @Animal, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  ret { ptr, i160 } %25
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Animal_getter_skill(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 16
  %3 = load i32, ptr %2, align 4
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Animal_setter_skill(ptr nocapture writeonly %0, i32 %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 16
  store i32 %1, ptr %3, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define double @Animal_getter_hp(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load double, ptr %2, align 8
  ret double %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Animal_setter_hp(ptr nocapture writeonly %0, double %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  store double %1, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Animal_getter_age(ptr nocapture readonly %0) #1 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Animal_setter_age(ptr nocapture writeonly %0, i32 %1) #9 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Beaver(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 16, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Beaver_B_init_colori32_namef64({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 120
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Beaver_B__ADD_xi32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 128
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Beaver_B_say_color_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @Beaver_init_colori32_namef64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3, double %4) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Beaver)
  %10 = load ptr, ptr %7, align 8
  %11 = load ptr, ptr %6, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 64, ptr %11)
  %13 = load i32, ptr %9, align 8
  %14 = sext i32 %13 to i64
  %15 = getelementptr ptr, ptr %11, i64 %14
  %16 = load ptr, ptr %15, align 8
  %17 = getelementptr i8, ptr %16, i64 8
  %18 = load ptr, ptr %17, align 8
  call void %18(ptr %10, i32 %3) #23
  %19 = load ptr, ptr %7, align 8
  %20 = load ptr, ptr %6, align 8
  %21 = call ptr @llvm.invariant.start.p0(i64 64, ptr %20)
  %22 = load i32, ptr %9, align 8
  %23 = sext i32 %22 to i64
  %24 = getelementptr ptr, ptr %20, i64 %23
  %25 = getelementptr i8, ptr %24, i64 8
  %26 = load ptr, ptr %25, align 8
  %27 = getelementptr i8, ptr %26, i64 8
  %28 = load ptr, ptr %27, align 8
  call void %28(ptr %19, double %4) #23
  ret void
}

define void @Beaver__ADD_xi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @Beaver)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 64, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call i32 %16(ptr %9) #24
  %18 = add i32 %17, %3
  %19 = call ptr @llvm.invariant.start.p0(i64 64, ptr %10)
  %20 = getelementptr i8, ptr %15, i64 8
  %21 = load ptr, ptr %20, align 8
  call void %21(ptr %9, i32 %18) #23
  ret void
}

define void @Beaver_say_color_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Beaver)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 64, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #24
  %.sroa.0.0.insert.ext = zext i32 %16 to i160
  %17 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %18 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %18, align 8
  %19 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %18)
  %20 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %21 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %21, align 8
  %22 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %21)
  call void %22(ptr nonnull %18, { ptr, i160 } %17) #25
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define double @Beaver_getter_name(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load double, ptr %2, align 8
  ret double %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Beaver_setter_name(ptr nocapture writeonly %0, double %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  store double %1, ptr %3, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @Beaver_getter_color(ptr nocapture readonly %0) #1 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @Beaver_setter_color(ptr nocapture writeonly %0, i32 %1) #9 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ListNode(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 40, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ListNode_B_init_datai32({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 136
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @ListNode_B_push_nextListNode({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -1756024950533091476, i64 ptrtoint (ptr @ListNode to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 144
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ListNode_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 152
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ListNode_B_data_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 160
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ListNode_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 168
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ListNode_init_datai32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, i32 %3) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ListNode)
  %9 = load ptr, ptr %6, align 8
  %10 = load ptr, ptr %5, align 8
  %11 = call ptr @llvm.invariant.start.p0(i64 96, ptr %10)
  %12 = load i32, ptr %8, align 8
  %13 = sext i32 %12 to i64
  %14 = getelementptr ptr, ptr %10, i64 %13
  %15 = load ptr, ptr %14, align 8
  %16 = getelementptr i8, ptr %15, i64 8
  %17 = load ptr, ptr %16, align 8
  call void %17(ptr %9, i32 %3) #23
  %18 = load ptr, ptr %6, align 8
  %19 = load ptr, ptr %5, align 8
  %20 = call ptr @llvm.invariant.start.p0(i64 96, ptr %19)
  %21 = load i32, ptr %8, align 8
  %22 = sext i32 %21 to i64
  %23 = getelementptr ptr, ptr %19, i64 %22
  %24 = getelementptr i8, ptr %23, i64 8
  %25 = load ptr, ptr %24, align 8
  %26 = getelementptr i8, ptr %25, i64 8
  %27 = load ptr, ptr %26, align 8
  call void %27(ptr %18, { ptr, i160 } { ptr @nil_typ, i160 undef }) #23
  ret void
}

define { ptr, ptr, ptr, i32 } @ListNode_push_nextListNode({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract4, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ListNode)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @ListNode)
  %13 = load ptr, ptr %6, align 8
  %14 = load ptr, ptr %5, align 8
  %15 = call ptr @llvm.invariant.start.p0(i64 96, ptr %14)
  %16 = load i32, ptr %8, align 8
  %17 = sext i32 %16 to i64
  %18 = getelementptr ptr, ptr %14, i64 %17
  %19 = getelementptr i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8
  %21 = getelementptr i8, ptr %20, i64 8
  %22 = load ptr, ptr %21, align 8
  %23 = load ptr, ptr %9, align 8
  %24 = insertvalue { ptr, i160 } undef, ptr %23, 0
  %25 = load i160, ptr %10, align 8
  %26 = insertvalue { ptr, i160 } %24, i160 %25, 1
  call void %22(ptr %13, { ptr, i160 } %26) #23
  %27 = alloca { ptr, ptr, ptr, i32 }, align 8
  %28 = load ptr, ptr %9, align 8
  store ptr %28, ptr %27, align 8
  %29 = getelementptr inbounds i8, ptr %27, i64 8
  %30 = load ptr, ptr %10, align 8
  store ptr %30, ptr %29, align 8
  %31 = getelementptr inbounds i8, ptr %27, i64 16
  %32 = load ptr, ptr %11, align 8
  store ptr %32, ptr %31, align 8
  %33 = getelementptr inbounds i8, ptr %27, i64 24
  %34 = load i32, ptr %12, align 8
  store i32 %34, ptr %33, align 8
  call void @set_offset(ptr nonnull %27, ptr nonnull @ListNode)
  %35 = load ptr, ptr %27, align 8
  %36 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %35, 0
  %37 = load ptr, ptr %29, align 8
  %38 = insertvalue { ptr, ptr, ptr, i32 } %36, ptr %37, 1
  %39 = load ptr, ptr %31, align 8
  %40 = insertvalue { ptr, ptr, ptr, i32 } %38, ptr %39, 2
  %41 = load i32, ptr %33, align 8
  %42 = insertvalue { ptr, ptr, ptr, i32 } %40, i32 %41, 3
  ret { ptr, ptr, ptr, i32 } %42
}

define { ptr, i160 } @ListNode_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract2, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @ListNode)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 96, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = getelementptr i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8
  %16 = load ptr, ptr %15, align 8
  %17 = call { ptr, i160 } %16(ptr %8) #24
  ret { ptr, i160 } %17
}

define i32 @ListNode_data_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @ListNode)
  %8 = load ptr, ptr %5, align 8
  %9 = load ptr, ptr %4, align 8
  %10 = call ptr @llvm.invariant.start.p0(i64 96, ptr %9)
  %11 = load i32, ptr %7, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr ptr, ptr %9, i64 %12
  %14 = load ptr, ptr %13, align 8
  %15 = load ptr, ptr %14, align 8
  %16 = call i32 %15(ptr %8) #24
  ret i32 %16
}

define { ptr, ptr, ptr, i32 } @ListNode_iterator_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract24 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract25 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract26 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract27 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract24, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract25, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract26, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract27, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @ListNode)
  %8 = alloca [1 x ptr], align 8
  store ptr @ListNode, ptr %8, align 8
  %9 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ListNode, ptr nonnull %8)
  %10 = extractvalue { i64, i64 } %9, 0
  %11 = call ptr @bump_malloc(i64 %10)
  %12 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ListNode, ptr undef, ptr undef, i32 undef }, ptr %11, 1
  %13 = insertvalue { ptr, ptr, ptr, i32 } %12, ptr undef, 2
  %14 = insertvalue { ptr, ptr, ptr, i32 } %13, i32 10, 3
  %15 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %15, align 8
  %16 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %15)
  %17 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @ListNode)
  %18 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %18, align 8
  %19 = call ptr @behavior_wrapper(ptr nonnull @ListNode_B_init_datai32, { ptr, ptr, ptr, i32 } %14, ptr nonnull %18)
  call void %19({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %15, i32 0) #25
  %20 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ListNode, ptr %20, align 8
  %21 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr %11, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %20, i64 16
  %23 = getelementptr inbounds i8, ptr %20, i64 24
  store i32 10, ptr %23, align 8
  call void @set_offset(ptr nonnull %20, ptr nonnull @ListNode)
  %24 = load ptr, ptr %20, align 8
  %25 = load ptr, ptr %21, align 8
  %26 = load ptr, ptr %22, align 8
  %27 = load i32, ptr %23, align 8
  %28 = alloca { ptr, ptr, ptr, i32 }, align 8
  %29 = load ptr, ptr %4, align 8
  store ptr %29, ptr %28, align 8
  %30 = getelementptr inbounds i8, ptr %28, i64 8
  %31 = load ptr, ptr %5, align 8
  store ptr %31, ptr %30, align 8
  %32 = getelementptr inbounds i8, ptr %28, i64 16
  %33 = load ptr, ptr %6, align 8
  store ptr %33, ptr %32, align 8
  %34 = getelementptr inbounds i8, ptr %28, i64 24
  %35 = load i32, ptr %7, align 8
  store i32 %35, ptr %34, align 8
  call void @set_offset(ptr nonnull %28, ptr nonnull @ListNode)
  %36 = load ptr, ptr %28, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %36, 0
  %38 = load ptr, ptr %30, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 1
  %40 = load ptr, ptr %32, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, ptr %40, 2
  %42 = load i32, ptr %34, align 8
  %43 = insertvalue { ptr, ptr, ptr, i32 } %41, i32 %42, 3
  %44 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %24, 0
  %45 = insertvalue { ptr, ptr, ptr, i32 } %44, ptr %25, 1
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr %26, 2
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 %27, 3
  %48 = alloca [1 x ptr], align 8
  store ptr @_parameterization_ListNode, ptr %48, align 8
  %49 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %48)
  %50 = call ptr @llvm.invariant.start.p0(i64 96, ptr %24)
  %51 = sext i32 %27 to i64
  %52 = getelementptr ptr, ptr %24, i64 %51
  %53 = getelementptr i8, ptr %52, i64 24
  %54 = load ptr, ptr %53, align 8
  %55 = alloca { ptr }, align 8
  store ptr %36, ptr %55, align 8
  %56 = call ptr @behavior_wrapper(ptr %54, { ptr, ptr, ptr, i32 } %47, ptr nonnull %55)
  %57 = call { ptr, ptr, ptr, i32 } %56({ ptr, ptr, ptr, i32 } %47, { ptr, ptr, ptr, i32 } %47, ptr nonnull %48, { ptr, ptr, ptr, i32 } %43) #25
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %57, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %57, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %57, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %57, 3
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %58, align 8
  %59 = getelementptr inbounds i8, ptr %58, i64 8
  store ptr %.fca.1.extract, ptr %59, align 8
  %60 = getelementptr inbounds i8, ptr %58, i64 16
  store ptr %.fca.2.extract, ptr %60, align 8
  %61 = getelementptr inbounds i8, ptr %58, i64 24
  store i32 %.fca.3.extract, ptr %61, align 8
  call void @set_offset(ptr nonnull %58, ptr nonnull @ListNode)
  %62 = alloca [1 x ptr], align 8
  store ptr @ListIterator, ptr %62, align 8
  %63 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ListIterator, ptr nonnull %62)
  %64 = extractvalue { i64, i64 } %63, 0
  %65 = call ptr @bump_malloc(i64 %64)
  %66 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %24, ptr %66, align 8
  %67 = getelementptr inbounds i8, ptr %66, i64 8
  store ptr %25, ptr %67, align 8
  %68 = getelementptr inbounds i8, ptr %66, i64 16
  store ptr %26, ptr %68, align 8
  %69 = getelementptr inbounds i8, ptr %66, i64 24
  store i32 %27, ptr %69, align 8
  call void @set_offset(ptr nonnull %66, ptr nonnull @ListNode)
  %70 = load ptr, ptr %66, align 8
  %71 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %70, 0
  %72 = load ptr, ptr %67, align 8
  %73 = insertvalue { ptr, ptr, ptr, i32 } %71, ptr %72, 1
  %74 = load ptr, ptr %68, align 8
  %75 = insertvalue { ptr, ptr, ptr, i32 } %73, ptr %74, 2
  %76 = load i32, ptr %69, align 8
  %77 = insertvalue { ptr, ptr, ptr, i32 } %75, i32 %76, 3
  %78 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ListIterator, ptr undef, ptr undef, i32 undef }, ptr %65, 1
  %79 = insertvalue { ptr, ptr, ptr, i32 } %78, ptr undef, 2
  %80 = insertvalue { ptr, ptr, ptr, i32 } %79, i32 10, 3
  %81 = alloca [1 x ptr], align 8
  store ptr @_parameterization_ListNode, ptr %81, align 8
  %82 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %81)
  %83 = call ptr @llvm.invariant.start.p0(i64 40, ptr nonnull @ListIterator)
  %84 = alloca { ptr }, align 8
  store ptr %70, ptr %84, align 8
  %85 = call ptr @behavior_wrapper(ptr nonnull @ListIterator_B_init_nodeListNode, { ptr, ptr, ptr, i32 } %80, ptr nonnull %84)
  call void %85({ ptr, ptr, ptr, i32 } %80, { ptr, ptr, ptr, i32 } %80, ptr nonnull %81, { ptr, ptr, ptr, i32 } %77) #25
  %86 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @ListIterator, ptr %86, align 8
  %87 = getelementptr inbounds i8, ptr %86, i64 8
  store ptr %65, ptr %87, align 8
  %88 = getelementptr inbounds i8, ptr %86, i64 16
  %89 = getelementptr inbounds i8, ptr %86, i64 24
  store i32 10, ptr %89, align 8
  call void @set_offset(ptr nonnull %86, ptr nonnull @ListIterator)
  %90 = load ptr, ptr %86, align 8
  %91 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %90, 0
  %92 = load ptr, ptr %87, align 8
  %93 = insertvalue { ptr, ptr, ptr, i32 } %91, ptr %92, 1
  %94 = load ptr, ptr %88, align 8
  %95 = insertvalue { ptr, ptr, ptr, i32 } %93, ptr %94, 2
  %96 = load i32, ptr %89, align 8
  %97 = insertvalue { ptr, ptr, ptr, i32 } %95, i32 %96, 3
  ret { ptr, ptr, ptr, i32 } %97
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_ListIterator(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 32, i64 8 }
}

define ptr @ListIterator_B_init_nodeListNode({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -1756024950533091476, i64 ptrtoint (ptr @ListNode to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 104
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @ListIterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 112
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define void @ListIterator_init_nodeListNode({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, ptr, ptr, i32 } %3) {
  %.fca.0.extract1 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract2 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract3 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract4 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract1, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  store ptr %.fca.1.extract2, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %5, i64 16
  store ptr %.fca.2.extract3, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %5, i64 24
  store i32 %.fca.3.extract4, ptr %8, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ListIterator)
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %3, 3
  %9 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %9, i64 8
  store ptr %.fca.1.extract, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %9, i64 16
  store ptr %.fca.2.extract, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %9, i64 24
  store i32 %.fca.3.extract, ptr %12, align 8
  call void @set_offset(ptr nonnull %9, ptr nonnull @ListNode)
  %13 = alloca { ptr, ptr, ptr, i32 }, align 8
  %14 = load ptr, ptr %9, align 8
  store ptr %14, ptr %13, align 8
  %15 = getelementptr inbounds i8, ptr %13, i64 8
  %16 = load ptr, ptr %10, align 8
  store ptr %16, ptr %15, align 8
  %17 = getelementptr inbounds i8, ptr %13, i64 16
  %18 = load ptr, ptr %11, align 8
  store ptr %18, ptr %17, align 8
  %19 = getelementptr inbounds i8, ptr %13, i64 24
  %20 = load i32, ptr %12, align 8
  store i32 %20, ptr %19, align 8
  call void @set_offset(ptr nonnull %13, ptr nonnull @ListNode)
  %21 = load ptr, ptr %6, align 8
  %22 = load ptr, ptr %5, align 8
  %23 = call ptr @llvm.invariant.start.p0(i64 40, ptr %22)
  %24 = load i32, ptr %8, align 8
  %25 = sext i32 %24 to i64
  %26 = getelementptr ptr, ptr %22, i64 %25
  %27 = load ptr, ptr %26, align 8
  %28 = getelementptr i8, ptr %27, i64 8
  %29 = load ptr, ptr %28, align 8
  %30 = load ptr, ptr %13, align 8
  %31 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %30, 0
  %32 = load ptr, ptr %15, align 8
  %33 = insertvalue { ptr, ptr, ptr, i32 } %31, ptr %32, 1
  %34 = load ptr, ptr %17, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } %33, ptr %34, 2
  %36 = load i32, ptr %19, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, i32 %36, 3
  call void %29(ptr %21, { ptr, ptr, ptr, i32 } %37) #23
  ret void
}

define { ptr, i160 } @ListIterator_next_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %4 = alloca [0 x ptr], align 8
  %5 = alloca { ptr, ptr, ptr, i32 }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract12 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract14 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract16 = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %8 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract12, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %8, i64 8
  store ptr %.fca.1.extract14, ptr %9, align 8
  %10 = getelementptr inbounds i8, ptr %8, i64 16
  store ptr %.fca.2.extract16, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %8, i64 24
  store i32 %.fca.3.extract18, ptr %11, align 8
  call void @set_offset(ptr nonnull %8, ptr nonnull @ListIterator)
  %12 = load ptr, ptr %9, align 8
  %13 = load ptr, ptr %8, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 40, ptr %13)
  %15 = load i32, ptr %11, align 8
  %16 = sext i32 %15 to i64
  %17 = getelementptr ptr, ptr %13, i64 %16
  %18 = load ptr, ptr %17, align 8
  %19 = load ptr, ptr %18, align 8
  %20 = call { ptr, ptr, ptr, i32 } %19(ptr %12) #24
  %21 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr, ptr, ptr, i32 } %20, 0
  store ptr %.fca.0.extract2, ptr %21, align 8
  %.fca.1.extract3 = extractvalue { ptr, ptr, ptr, i32 } %20, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %21, i64 8
  store ptr %.fca.1.extract3, ptr %.fca.1.gep, align 8
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 2
  %.fca.2.gep = getelementptr inbounds i8, ptr %21, i64 16
  store ptr %.fca.2.extract, ptr %.fca.2.gep, align 8
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %20, 3
  %.fca.3.gep = getelementptr inbounds i8, ptr %21, i64 24
  store i32 %.fca.3.extract, ptr %.fca.3.gep, align 8
  call void @assume_offset(ptr nonnull %21, ptr nonnull @ListNode)
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %22, 0
  %24 = load ptr, ptr %.fca.1.gep, align 8
  %25 = insertvalue { ptr, ptr, ptr, i32 } %23, ptr %24, 1
  %26 = load ptr, ptr %.fca.2.gep, align 8
  %27 = insertvalue { ptr, ptr, ptr, i32 } %25, ptr %26, 2
  %28 = load i32, ptr %.fca.3.gep, align 8
  %29 = insertvalue { ptr, ptr, ptr, i32 } %27, i32 %28, 3
  %30 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %4)
  %31 = call ptr @llvm.invariant.start.p0(i64 96, ptr %22)
  %32 = sext i32 %28 to i64
  %33 = getelementptr ptr, ptr %22, i64 %32
  %34 = getelementptr i8, ptr %33, i64 32
  %35 = load ptr, ptr %34, align 8
  %36 = call ptr @behavior_wrapper(ptr %35, { ptr, ptr, ptr, i32 } %29, ptr nonnull %4)
  %37 = call { ptr, i160 } %36({ ptr, ptr, ptr, i32 } %29, { ptr, ptr, ptr, i32 } %29, ptr nonnull %4) #25
  %.fca.0.extract = extractvalue { ptr, i160 } %37, 0
  %38 = icmp ne ptr %.fca.0.extract, @nil_typ
  %39 = icmp ne ptr %.fca.0.extract, null
  %.not31 = and i1 %38, %39
  br i1 %.not31, label %40, label %79

40:                                               ; preds = %3
  %.fca.1.extract = extractvalue { ptr, i160 } %37, 1
  store ptr %.fca.0.extract, ptr %5, align 8
  %41 = getelementptr inbounds i8, ptr %5, i64 8
  store i160 %.fca.1.extract, ptr %41, align 8
  call void @set_offset(ptr nonnull %5, ptr nonnull @ListNode)
  %42 = load ptr, ptr %5, align 8
  store ptr %42, ptr %6, align 8
  %43 = getelementptr inbounds i8, ptr %6, i64 8
  %44 = load ptr, ptr %41, align 8
  store ptr %44, ptr %43, align 8
  %45 = getelementptr inbounds i8, ptr %5, i64 16
  %46 = getelementptr inbounds i8, ptr %6, i64 16
  %47 = load ptr, ptr %45, align 8
  store ptr %47, ptr %46, align 8
  %48 = getelementptr inbounds i8, ptr %5, i64 24
  %49 = getelementptr inbounds i8, ptr %6, i64 24
  %50 = load i32, ptr %48, align 8
  store i32 %50, ptr %49, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @ListNode)
  %51 = load ptr, ptr %9, align 8
  %52 = load ptr, ptr %8, align 8
  %53 = call ptr @llvm.invariant.start.p0(i64 40, ptr %52)
  %54 = load i32, ptr %11, align 8
  %55 = sext i32 %54 to i64
  %56 = getelementptr ptr, ptr %52, i64 %55
  %57 = load ptr, ptr %56, align 8
  %58 = getelementptr i8, ptr %57, i64 8
  %59 = load ptr, ptr %58, align 8
  %60 = load ptr, ptr %6, align 8
  %61 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %60, 0
  %62 = load ptr, ptr %43, align 8
  %63 = insertvalue { ptr, ptr, ptr, i32 } %61, ptr %62, 1
  %64 = load ptr, ptr %46, align 8
  %65 = insertvalue { ptr, ptr, ptr, i32 } %63, ptr %64, 2
  %66 = load i32, ptr %49, align 8
  %67 = insertvalue { ptr, ptr, ptr, i32 } %65, i32 %66, 3
  call void %59(ptr %51, { ptr, ptr, ptr, i32 } %67) #23
  %68 = load ptr, ptr %9, align 8
  %69 = load ptr, ptr %8, align 8
  %70 = call ptr @llvm.invariant.start.p0(i64 40, ptr %69)
  %71 = load i32, ptr %11, align 8
  %72 = sext i32 %71 to i64
  %73 = getelementptr ptr, ptr %69, i64 %72
  %74 = load ptr, ptr %73, align 8
  %75 = load ptr, ptr %74, align 8
  %76 = call { ptr, ptr, ptr, i32 } %75(ptr %68) #24
  %.fca.0.extract22 = extractvalue { ptr, ptr, ptr, i32 } %76, 0
  store ptr %.fca.0.extract22, ptr %7, align 8
  %.fca.1.extract24 = extractvalue { ptr, ptr, ptr, i32 } %76, 1
  %.fca.1.gep25 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %.fca.1.extract24, ptr %.fca.1.gep25, align 8
  %.fca.2.extract26 = extractvalue { ptr, ptr, ptr, i32 } %76, 2
  %.fca.2.gep27 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %.fca.2.extract26, ptr %.fca.2.gep27, align 8
  %.fca.3.extract28 = extractvalue { ptr, ptr, ptr, i32 } %76, 3
  %.fca.3.gep29 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %.fca.3.extract28, ptr %.fca.3.gep29, align 8
  call void @assume_offset(ptr nonnull %7, ptr nonnull @ListNode)
  %77 = load ptr, ptr %7, align 8
  %78 = load i160, ptr %.fca.1.gep25, align 8
  br label %79

79:                                               ; preds = %40, %3
  %.reg2mem15.sroa.0.0 = phi ptr [ %77, %40 ], [ @nil_typ, %3 ]
  %.reg2mem15.sroa.3.0 = phi i160 [ %78, %40 ], [ undef, %3 ]
  %.reload16.fca.0.insert = insertvalue { ptr, i160 } poison, ptr %.reg2mem15.sroa.0.0, 0
  %.reload16.fca.1.insert = insertvalue { ptr, i160 } %.reload16.fca.0.insert, i160 %.reg2mem15.sroa.3.0, 1
  ret { ptr, i160 } %.reload16.fca.1.insert
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, ptr, ptr, i32 } @ListIterator_getter_node(ptr nocapture readonly %0) #1 {
  %2 = load ptr, ptr %0, align 8
  %3 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %2, 0
  %4 = getelementptr i8, ptr %0, i64 8
  %5 = load ptr, ptr %4, align 8
  %6 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %5, 1
  %7 = getelementptr i8, ptr %0, i64 16
  %8 = load ptr, ptr %7, align 8
  %9 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr %8, 2
  %10 = getelementptr i8, ptr %0, i64 24
  %11 = load i32, ptr %10, align 4
  %12 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 %11, 3
  ret { ptr, ptr, ptr, i32 } %12
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ListIterator_setter_node(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) #9 {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1, 3
  store ptr %.fca.0.extract, ptr %0, align 8
  %3 = getelementptr i8, ptr %0, i64 8
  store ptr %.fca.1.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store ptr %.fca.2.extract, ptr %4, align 8
  %5 = getelementptr i8, ptr %0, i64 24
  store i32 %.fca.3.extract, ptr %5, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define { ptr, i160 } @ListNode_getter_next(ptr nocapture readonly %0) #1 {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load ptr, ptr %2, align 8
  %4 = insertvalue { ptr, i160 } undef, ptr %3, 0
  %5 = getelementptr i8, ptr %0, i64 16
  %6 = load i160, ptr %5, align 4
  %7 = insertvalue { ptr, i160 } %4, i160 %6, 1
  ret { ptr, i160 } %7
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ListNode_setter_next(ptr nocapture writeonly %0, { ptr, i160 } %1) #9 {
  %3 = getelementptr i8, ptr %0, i64 8
  %.fca.0.extract = extractvalue { ptr, i160 } %1, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr i8, ptr %0, i64 16
  store i160 %.fca.1.extract, ptr %4, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define i32 @ListNode_getter_data(ptr nocapture readonly %0) #1 {
  %2 = load i32, ptr %0, align 4
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @ListNode_setter_data(ptr nocapture writeonly %0, i32 %1) #9 {
  store i32 %1, ptr %0, align 4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Bard(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Bard_B_init_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 96
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Bard_B_take_af64_bf64_take_ai32_bi32_take_aAnimal_bBeaver_take_ai32_bf64({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = icmp eq ptr %4, @f64_typ
  br i1 %5, label %34, label %6

6:                                                ; preds = %2
  %7 = icmp eq ptr %4, @i32_typ
  %8 = select i1 %7, i32 4, i32 5
  br i1 %7, label %9, label %13

9:                                                ; preds = %6
  %10 = getelementptr i8, ptr %1, i64 8
  %11 = load ptr, ptr %10, align 8
  %.not = icmp eq ptr %11, @i32_typ
  %12 = select i1 %.not, i32 %8, i32 6
  br label %34

13:                                               ; preds = %6
  %14 = getelementptr i8, ptr %4, i64 8
  %15 = getelementptr i8, ptr %4, i64 16
  %16 = getelementptr i8, ptr %4, i64 24
  %17 = getelementptr i8, ptr %4, i64 32
  %18 = load i64, ptr %14, align 4
  %19 = load i64, ptr %15, align 4
  %20 = load ptr, ptr %16, align 8
  %21 = load ptr, ptr %17, align 8
  %22 = tail call i1 @subtype_test_wrapper(ptr %20, i64 %19, i64 %18, i64 1075018126824711487, i64 ptrtoint (ptr @Animal to i64), ptr %21)
  %23 = getelementptr i8, ptr %1, i64 8
  %24 = load ptr, ptr %23, align 8
  %25 = getelementptr i8, ptr %24, i64 8
  %26 = getelementptr i8, ptr %24, i64 16
  %27 = getelementptr i8, ptr %24, i64 24
  %28 = getelementptr i8, ptr %24, i64 32
  %29 = load i64, ptr %25, align 4
  %30 = load i64, ptr %26, align 4
  %31 = load ptr, ptr %27, align 8
  %32 = load ptr, ptr %28, align 8
  %33 = tail call i1 @subtype_test_wrapper(ptr %31, i64 %30, i64 %29, i64 -6124772949900838462, i64 ptrtoint (ptr @Beaver to i64), ptr %32)
  br label %34

34:                                               ; preds = %13, %9, %2
  %.reg2mem17.0 = phi i32 [ 3, %2 ], [ %12, %9 ], [ %8, %13 ]
  %35 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %36 = zext nneg i32 %.reg2mem17.0 to i64
  %37 = getelementptr [7 x ptr], ptr %35, i64 0, i64 %36
  %38 = getelementptr i8, ptr %37, i64 80
  %39 = load ptr, ptr %38, align 8
  ret ptr %39
}

define void @Bard_init_({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %4 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %4, i64 8
  store ptr %.fca.1.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %4, i64 16
  store ptr %.fca.2.extract, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %4, i64 24
  store i32 %.fca.3.extract, ptr %7, align 8
  call void @set_offset(ptr nonnull %4, ptr nonnull @Bard)
  ret void
}

define void @Bard_take_af64_bf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %.fca.0.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract19 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract18, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract19, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Bard)
  %.fca.1.extract12 = extractvalue { ptr, i160 } %3, 1
  %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
  %.sroa.02.0.insert.ext = and i160 %.fca.1.extract12, 18446744073709551615
  %10 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.02.0.insert.ext, 1
  %11 = alloca [1 x ptr], align 8
  store ptr @_parameterization_f64, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %13 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %14 = alloca { ptr }, align 8
  store ptr @f64_typ, ptr %14, align 8
  %15 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %14)
  call void %15(ptr nonnull %11, { ptr, i160 } %10) #25
  %.sroa.0.0.insert.ext = and i160 %.fca.1.extract, 18446744073709551615
  %16 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %17 = alloca [1 x ptr], align 8
  store ptr @_parameterization_f64, ptr %17, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %17)
  %19 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %20 = alloca { ptr }, align 8
  store ptr @f64_typ, ptr %20, align 8
  %21 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %20)
  call void %21(ptr nonnull %17, { ptr, i160 } %16) #25
  ret void
}

define void @Bard_take_ai32_bi32({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract17, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract18, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Bard)
  %.fca.1.extract11 = extractvalue { ptr, i160 } %3, 1
  %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
  %.sroa.02.0.insert.ext = and i160 %.fca.1.extract11, 4294967295
  %10 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.02.0.insert.ext, 1
  %11 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %13 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %14 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %14, align 8
  %15 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %14)
  call void %15(ptr nonnull %11, { ptr, i160 } %10) #25
  %.sroa.0.0.insert.ext = and i160 %.fca.1.extract, 4294967295
  %16 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %17 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %17, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %17)
  %19 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %20 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %20, align 8
  %21 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %20)
  call void %21(ptr nonnull %17, { ptr, i160 } %16) #25
  ret void
}

define void @Bard_take_aAnimal_bBeaver({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %.fca.0.extract26 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract27 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract26, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract27, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Bard)
  %.fca.0.extract22 = extractvalue { ptr, i160 } %3, 0
  %.fca.1.extract23 = extractvalue { ptr, i160 } %3, 1
  %10 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract22, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store i160 %.fca.1.extract23, ptr %11, align 8
  call void @set_offset(ptr nonnull %10, ptr nonnull @Animal)
  %.fca.0.extract = extractvalue { ptr, i160 } %4, 0
  %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
  %12 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %12, i64 8
  store i160 %.fca.1.extract, ptr %13, align 8
  call void @set_offset(ptr nonnull %12, ptr nonnull @Beaver)
  %14 = call ptr @bump_malloc(i64 8)
  store <7 x i8> <i8 97, i8 110, i8 105, i8 109, i8 97, i8 108, i8 33>, ptr %14, align 8
  %15 = alloca [1 x ptr], align 8
  store ptr @String, ptr %15, align 8
  %16 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %15)
  %17 = extractvalue { i64, i64 } %16, 0
  %18 = call ptr @bump_malloc(i64 %17)
  %19 = insertvalue { ptr } undef, ptr %14, 0
  %20 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %18, 1
  %21 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr undef, 2
  %22 = insertvalue { ptr, ptr, ptr, i32 } %21, i32 10, 3
  %23 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %23, align 8
  %24 = getelementptr inbounds i8, ptr %23, i64 8
  store ptr @_parameterization_i32, ptr %24, align 8
  %25 = getelementptr inbounds i8, ptr %23, i64 16
  store ptr @_parameterization_i32, ptr %25, align 8
  %26 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %23)
  %27 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %28 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %28, align 8
  %29 = getelementptr inbounds i8, ptr %28, i64 8
  store ptr @i32_typ, ptr %29, align 8
  %30 = getelementptr inbounds i8, ptr %28, i64 16
  store ptr @i32_typ, ptr %30, align 8
  %31 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %22, ptr nonnull %28)
  call void %31({ ptr, ptr, ptr, i32 } %22, { ptr, ptr, ptr, i32 } %22, ptr nonnull %23, { ptr } %19, i32 7, i32 8) #25
  %32 = ptrtoint ptr %18 to i64
  %.sroa.312.8.insert.ext = zext i64 %32 to i160
  %.sroa.312.8.insert.insert = or disjoint i160 %.sroa.312.8.insert.ext, 3402823669209384634633746074317682114560
  %33 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.312.8.insert.insert, 1
  %34 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %34, align 8
  %35 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %34)
  %36 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %37 = alloca { ptr }, align 8
  store ptr @String, ptr %37, align 8
  %38 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %37)
  call void %38(ptr nonnull %34, { ptr, i160 } %33) #25
  %39 = call ptr @bump_malloc(i64 8)
  store <7 x i8> <i8 98, i8 101, i8 97, i8 118, i8 101, i8 114, i8 33>, ptr %39, align 8
  %40 = alloca [1 x ptr], align 8
  store ptr @String, ptr %40, align 8
  %41 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %40)
  %42 = extractvalue { i64, i64 } %41, 0
  %43 = call ptr @bump_malloc(i64 %42)
  %44 = insertvalue { ptr } undef, ptr %39, 0
  %45 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %43, 1
  %46 = insertvalue { ptr, ptr, ptr, i32 } %45, ptr undef, 2
  %47 = insertvalue { ptr, ptr, ptr, i32 } %46, i32 10, 3
  %48 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %48, align 8
  %49 = getelementptr inbounds i8, ptr %48, i64 8
  store ptr @_parameterization_i32, ptr %49, align 8
  %50 = getelementptr inbounds i8, ptr %48, i64 16
  store ptr @_parameterization_i32, ptr %50, align 8
  %51 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %48)
  %52 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %53 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %53, align 8
  %54 = getelementptr inbounds i8, ptr %53, i64 8
  store ptr @i32_typ, ptr %54, align 8
  %55 = getelementptr inbounds i8, ptr %53, i64 16
  store ptr @i32_typ, ptr %55, align 8
  %56 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %47, ptr nonnull %53)
  call void %56({ ptr, ptr, ptr, i32 } %47, { ptr, ptr, ptr, i32 } %47, ptr nonnull %48, { ptr } %44, i32 7, i32 8) #25
  %57 = ptrtoint ptr %43 to i64
  %.sroa.3.8.insert.ext = zext i64 %57 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %58 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %59 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %59, align 8
  %60 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %59)
  %61 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %62 = alloca { ptr }, align 8
  store ptr @String, ptr %62, align 8
  %63 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %62)
  call void %63(ptr nonnull %59, { ptr, i160 } %58) #25
  ret void
}

define void @Bard_take_ai32_bf64({ ptr, ptr, ptr, i32 } %0, { ptr, ptr, ptr, i32 } %1, ptr nocapture readnone %2, { ptr, i160 } %3, { ptr, i160 } %4) {
  %.fca.0.extract17 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract18 = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract17, ptr %6, align 8
  %7 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %.fca.1.extract18, ptr %7, align 8
  %8 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %.fca.2.extract, ptr %8, align 8
  %9 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %.fca.3.extract, ptr %9, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Bard)
  %.fca.1.extract11 = extractvalue { ptr, i160 } %3, 1
  %.fca.1.extract = extractvalue { ptr, i160 } %4, 1
  %.sroa.02.0.insert.ext = and i160 %.fca.1.extract11, 4294967295
  %10 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.02.0.insert.ext, 1
  %11 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %11, align 8
  %12 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %11)
  %13 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %14 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %14, align 8
  %15 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %14)
  call void %15(ptr nonnull %11, { ptr, i160 } %10) #25
  %.sroa.0.0.insert.ext = and i160 %.fca.1.extract, 18446744073709551615
  %16 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %17 = alloca [1 x ptr], align 8
  store ptr @_parameterization_f64, ptr %17, align 8
  %18 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %17)
  %19 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %20 = alloca { ptr }, align 8
  store ptr @f64_typ, ptr %20, align 8
  %21 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %20)
  call void %21(ptr nonnull %17, { ptr, i160 } %16) #25
  ret void
}

define { ptr, i160 } @jthuxytxem(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  %.sroa.0.0.insert.ext = zext i32 %3 to i160
  %4 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %4
}

define i1 @uubdoqxhvm(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i1 %0(i32 %.sroa.1.8.extract.trunc)
  ret i1 %3
}

define { ptr, i160 } @vpjwaexmjo(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract5 = extractvalue { ptr, i160 } %1, 1
  %.sroa.17.8.extract.trunc = trunc i160 %.fca.1.extract5 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i32 %0(i32 %.sroa.17.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  %.sroa.0.0.insert.ext = zext i32 %4 to i160
  %5 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %5
}

define void @yaxkqtlxlj(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  tail call void %0(i32 %.sroa.1.8.extract.trunc)
  ret void
}

define void @avsqykeibf(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  tail call void %0(i32 %.sroa.1.8.extract.trunc)
  ret void
}

define { ptr, i160 } @kmitoizdxb(ptr nest nocapture readonly %0, { ptr, i160 } %1) {
  %.fca.1.extract = extractvalue { ptr, i160 } %1, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %3 = tail call i32 %0(i32 %.sroa.1.8.extract.trunc)
  %.sroa.0.0.insert.ext = zext i32 %3 to i160
  %4 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %4
}

define { ptr, i160 } @gjeefxztyp(ptr nest nocapture readonly %0, { ptr, i160 } %1, { ptr, i160 } %2) {
  %.fca.1.extract5 = extractvalue { ptr, i160 } %1, 1
  %.sroa.17.8.extract.trunc = trunc i160 %.fca.1.extract5 to i32
  %.fca.1.extract = extractvalue { ptr, i160 } %2, 1
  %.sroa.1.8.extract.trunc = trunc i160 %.fca.1.extract to i32
  %4 = tail call i32 %0(i32 %.sroa.17.8.extract.trunc, i32 %.sroa.1.8.extract.trunc)
  %.sroa.0.0.insert.ext = zext i32 %4 to i160
  %5 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  ret { ptr, i160 } %5
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Iterator_field_Iterator_0(ptr nocapture readonly %0) local_unnamed_addr #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterator_B_next_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 96
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @Iterable_field_Iterable_0(ptr nocapture readonly %0) local_unnamed_addr #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable_B_iterator_({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 0, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 176
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable_B_each_fFunctionT_to_Nothing({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 184
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Iterable_B_reduce_accumulatorT_fFunctionT._T_to_T({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 16, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = load i64, ptr @any_typ, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 %13, i64 ptrtoint (ptr @any_typ to i64), ptr %12)
  %15 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %16 = getelementptr i8, ptr %15, i64 192
  %17 = load ptr, ptr %16, align 8
  ret ptr %17
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable_B_all_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 200
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable_B_any_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 208
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable_B_map_fFunctionT_to_U({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 216
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none)
define ptr @Iterable_B_filter_fFunctionT_to_i1({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr #2 {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %5 = getelementptr i8, ptr %4, i64 224
  %6 = load ptr, ptr %5, align 8
  ret ptr %6
}

define ptr @Iterable_B_chain_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 232
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @Iterable_B_interleave_otherIterableT({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 240
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @Iterable_B_zip_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 248
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define ptr @Iterable_B_product_otherIterableU({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 3037712219555723519, i64 ptrtoint (ptr @Iterable to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 256
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @report_exception({ ptr } %0) {
  %2 = alloca [0 x ptr], align 8
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  %.fca.0.extract2 = extractvalue { ptr } %0, 0
  %4 = getelementptr i8, ptr %.fca.0.extract2, i64 48
  %5 = load { ptr, i160 }, ptr %4, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %5, 0
  %6 = getelementptr i8, ptr %.fca.0.extract, i64 8
  %7 = getelementptr i8, ptr %.fca.0.extract, i64 16
  %8 = getelementptr i8, ptr %.fca.0.extract, i64 24
  %9 = getelementptr i8, ptr %.fca.0.extract, i64 32
  %10 = load i64, ptr %6, align 4
  %11 = load i64, ptr %7, align 4
  %12 = load ptr, ptr %8, align 8
  %13 = load ptr, ptr %9, align 8
  %14 = tail call i1 @subtype_test_wrapper(ptr %12, i64 %11, i64 %10, i64 9027164862567808692, i64 ptrtoint (ptr @Exception to i64), ptr %13)
  br i1 %14, label %15, label %._crit_edge

15:                                               ; preds = %1
  %.fca.1.extract = extractvalue { ptr, i160 } %5, 1
  store ptr %.fca.0.extract, ptr %3, align 8
  %16 = getelementptr inbounds i8, ptr %3, i64 8
  store i160 %.fca.1.extract, ptr %16, align 8
  call void @set_offset(ptr nonnull %3, ptr nonnull @Exception)
  %17 = load ptr, ptr %3, align 8
  %18 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %17, 0
  %19 = load ptr, ptr %16, align 8
  %20 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr %19, 1
  %21 = getelementptr inbounds i8, ptr %3, i64 16
  %22 = load ptr, ptr %21, align 8
  %23 = insertvalue { ptr, ptr, ptr, i32 } %20, ptr %22, 2
  %24 = getelementptr inbounds i8, ptr %3, i64 24
  %25 = load i32, ptr %24, align 8
  %26 = insertvalue { ptr, ptr, ptr, i32 } %23, i32 %25, 3
  %27 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %28 = call ptr @llvm.invariant.start.p0(i64 104, ptr %17)
  %29 = sext i32 %25 to i64
  %30 = getelementptr ptr, ptr %17, i64 %29
  %31 = getelementptr i8, ptr %30, i64 48
  %32 = load ptr, ptr %31, align 8
  %33 = call ptr @behavior_wrapper(ptr %32, { ptr, ptr, ptr, i32 } %26, ptr nonnull %2)
  call void %33({ ptr, ptr, ptr, i32 } %26, { ptr, ptr, ptr, i32 } %26, ptr nonnull %2) #25
  br label %._crit_edge

._crit_edge:                                      ; preds = %15, %1
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read)
define ptr @FileProcessor_field_FileProcessor_0(ptr nocapture readonly %0) local_unnamed_addr #1 {
  %2 = load ptr, ptr %0, align 8
  ret ptr %2
}

define ptr @FileProcessor_B_process_fileFile({ ptr, ptr, ptr, i32 } %0, ptr nocapture %1) local_unnamed_addr {
  %3 = tail call ptr @llvm.invariant.start.p0(i64 8, ptr %1)
  %4 = load ptr, ptr %1, align 8
  %5 = getelementptr i8, ptr %4, i64 8
  %6 = getelementptr i8, ptr %4, i64 16
  %7 = getelementptr i8, ptr %4, i64 24
  %8 = getelementptr i8, ptr %4, i64 32
  %9 = load i64, ptr %5, align 4
  %10 = load i64, ptr %6, align 4
  %11 = load ptr, ptr %7, align 8
  %12 = load ptr, ptr %8, align 8
  %13 = tail call i1 @subtype_test_wrapper(ptr %11, i64 %10, i64 %9, i64 -2227788838181535664, i64 ptrtoint (ptr @File to i64), ptr %12)
  %14 = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %15 = getelementptr i8, ptr %14, i64 96
  %16 = load ptr, ptr %15, align 8
  ret ptr %16
}

define void @number_taker({ ptr, i64 } %0) local_unnamed_addr {
  %2 = tail call ptr @bump_malloc(i64 7)
  store <6 x i8> <i8 110, i8 117, i8 109, i8 98, i8 101, i8 114>, ptr %2, align 8
  %3 = alloca [1 x ptr], align 8
  store ptr @String, ptr %3, align 8
  %4 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %3)
  %5 = extractvalue { i64, i64 } %4, 0
  %6 = call ptr @bump_malloc(i64 %5)
  %7 = insertvalue { ptr } undef, ptr %2, 0
  %8 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %6, 1
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr undef, 2
  %10 = insertvalue { ptr, ptr, ptr, i32 } %9, i32 10, 3
  %11 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr @_parameterization_i32, ptr %12, align 8
  %13 = getelementptr inbounds i8, ptr %11, i64 16
  store ptr @_parameterization_i32, ptr %13, align 8
  %14 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %11)
  %15 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %16 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %16, i64 8
  store ptr @i32_typ, ptr %17, align 8
  %18 = getelementptr inbounds i8, ptr %16, i64 16
  store ptr @i32_typ, ptr %18, align 8
  %19 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %10, ptr nonnull %16)
  call void %19({ ptr, ptr, ptr, i32 } %10, { ptr, ptr, ptr, i32 } %10, ptr nonnull %11, { ptr } %7, i32 6, i32 7) #25
  %.fca.1.insert = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr poison, ptr poison, i32 poison }, ptr %6, 1
  %.fca.2.insert = insertvalue { ptr, ptr, ptr, i32 } %.fca.1.insert, ptr undef, 2
  %.fca.3.insert = insertvalue { ptr, ptr, ptr, i32 } %.fca.2.insert, i32 10, 3
  %20 = call i32 (ptr, ...) @printf(ptr nonnull dereferenceable(1) @i32_string, { ptr, ptr, ptr, i32 } %.fca.3.insert)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef i32 @early_return_in_else() local_unnamed_addr #6 {
.then:
  ret i32 1
}

define void @make_em_speak({ ptr, ptr, ptr, i32 } %0) local_unnamed_addr {
  %2 = alloca [0 x ptr], align 8
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %3 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr %.fca.0.extract, ptr %3, align 8
  %4 = getelementptr inbounds i8, ptr %3, i64 8
  store ptr %.fca.1.extract, ptr %4, align 8
  %5 = getelementptr inbounds i8, ptr %3, i64 16
  store ptr %.fca.2.extract, ptr %5, align 8
  %6 = getelementptr inbounds i8, ptr %3, i64 24
  store i32 %.fca.3.extract, ptr %6, align 8
  call void @set_offset(ptr nonnull %3, ptr nonnull @Animal)
  %7 = load ptr, ptr %3, align 8
  %8 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %7, 0
  %9 = load ptr, ptr %4, align 8
  %10 = insertvalue { ptr, ptr, ptr, i32 } %8, ptr %9, 1
  %11 = load ptr, ptr %5, align 8
  %12 = insertvalue { ptr, ptr, ptr, i32 } %10, ptr %11, 2
  %13 = load i32, ptr %6, align 8
  %14 = insertvalue { ptr, ptr, ptr, i32 } %12, i32 %13, 3
  %15 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %2)
  %16 = call ptr @llvm.invariant.start.p0(i64 104, ptr %7)
  %17 = sext i32 %13 to i64
  %18 = getelementptr ptr, ptr %7, i64 %17
  %19 = getelementptr i8, ptr %18, i64 32
  %20 = load ptr, ptr %19, align 8
  %21 = call ptr @behavior_wrapper(ptr %20, { ptr, ptr, ptr, i32 } %14, ptr nonnull %2)
  call void %21({ ptr, ptr, ptr, i32 } %14, { ptr, ptr, ptr, i32 } %14, ptr nonnull %2) #25
  ret void
}

; Function Attrs: nofree nosync nounwind memory(none)
define i32 @fibonacci(i32 %0) local_unnamed_addr #17 {
  br label %tailrecurse

tailrecurse:                                      ; preds = %3, %1
  %accumulator.tr = phi i32 [ 0, %1 ], [ %7, %3 ]
  %.tr = phi i32 [ %0, %1 ], [ %6, %3 ]
  %2 = icmp slt i32 %.tr, 2
  br i1 %2, label %8, label %3

3:                                                ; preds = %tailrecurse
  %4 = add nsw i32 %.tr, -2
  %5 = tail call i32 @fibonacci(i32 %4)
  %6 = add nsw i32 %.tr, -1
  %7 = add i32 %accumulator.tr, %5
  br label %tailrecurse

8:                                                ; preds = %tailrecurse
  %accumulator.ret.tr = add i32 %accumulator.tr, %.tr
  ret i32 %accumulator.ret.tr
}

; Function Attrs: nofree nosync nounwind memory(none)
define i32 @factorial(i32 %0) local_unnamed_addr #17 {
  br label %tailrecurse

tailrecurse:                                      ; preds = %3, %1
  %accumulator.tr = phi i32 [ 1, %1 ], [ %5, %3 ]
  %.tr = phi i32 [ %0, %1 ], [ %4, %3 ]
  %2 = icmp slt i32 %.tr, 2
  br i1 %2, label %6, label %3

3:                                                ; preds = %tailrecurse
  %4 = add nsw i32 %.tr, -1
  %5 = mul i32 %accumulator.tr, %.tr
  br label %tailrecurse

6:                                                ; preds = %tailrecurse
  %accumulator.ret.tr = mul i32 %accumulator.tr, 1
  ret i32 %accumulator.ret.tr
}

define void @throw() local_unnamed_addr {
  %1 = alloca [0 x ptr], align 8
  %2 = alloca [1 x ptr], align 8
  store ptr @Exception, ptr %2, align 8
  %3 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Exception, ptr nonnull %2)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = call ptr @bump_malloc(i64 %4)
  %6 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Exception, ptr undef, ptr undef, i32 undef }, ptr %5, 1
  %7 = insertvalue { ptr, ptr, ptr, i32 } %6, ptr undef, 2
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, i32 10, 3
  %9 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %1)
  %10 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Exception)
  %11 = call ptr @behavior_wrapper(ptr nonnull @Exception_B_init_, { ptr, ptr, ptr, i32 } %8, ptr nonnull %1)
  call void %11({ ptr, ptr, ptr, i32 } %8, { ptr, ptr, ptr, i32 } %8, ptr nonnull %1) #25
  %12 = call ptr @bump_malloc(i64 16)
  store <15 x i8> <i8 122, i8 114, i8 119, i8 99, i8 105, i8 110, i8 105, i8 116, i8 116, i8 107, i8 46, i8 109, i8 105, i8 110, i8 105>, ptr %12, align 16
  %13 = alloca [1 x ptr], align 8
  store ptr @String, ptr %13, align 8
  %14 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %13)
  %15 = extractvalue { i64, i64 } %14, 0
  %16 = call ptr @bump_malloc(i64 %15)
  %17 = insertvalue { ptr } undef, ptr %12, 0
  %18 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %16, 1
  %19 = insertvalue { ptr, ptr, ptr, i32 } %18, ptr undef, 2
  %20 = insertvalue { ptr, ptr, ptr, i32 } %19, i32 10, 3
  %21 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %21, align 8
  %22 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr @_parameterization_i32, ptr %22, align 8
  %23 = getelementptr inbounds i8, ptr %21, i64 16
  store ptr @_parameterization_i32, ptr %23, align 8
  %24 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %21)
  %25 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %26 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %26, align 8
  %27 = getelementptr inbounds i8, ptr %26, i64 8
  store ptr @i32_typ, ptr %27, align 8
  %28 = getelementptr inbounds i8, ptr %26, i64 16
  store ptr @i32_typ, ptr %28, align 8
  %29 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %20, ptr nonnull %26)
  call void %29({ ptr, ptr, ptr, i32 } %20, { ptr, ptr, ptr, i32 } %20, ptr nonnull %21, { ptr } %17, i32 15, i32 16) #25
  %30 = alloca { ptr, ptr, ptr, i32 }, align 8
  store ptr @String, ptr %30, align 8
  %31 = getelementptr inbounds i8, ptr %30, i64 8
  store ptr %16, ptr %31, align 8
  %32 = getelementptr inbounds i8, ptr %30, i64 16
  %33 = getelementptr inbounds i8, ptr %30, i64 24
  store i32 10, ptr %33, align 8
  call void @set_offset(ptr nonnull %30, ptr nonnull @String)
  %34 = load ptr, ptr %30, align 8
  %35 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %34, 0
  %36 = load ptr, ptr %31, align 8
  %37 = insertvalue { ptr, ptr, ptr, i32 } %35, ptr %36, 1
  %38 = load ptr, ptr %32, align 8
  %39 = insertvalue { ptr, ptr, ptr, i32 } %37, ptr %38, 2
  %40 = load i32, ptr %33, align 8
  %41 = insertvalue { ptr, ptr, ptr, i32 } %39, i32 %40, 3
  %42 = alloca [2 x ptr], align 8
  store ptr @_parameterization_i32, ptr %42, align 8
  %43 = getelementptr inbounds i8, ptr %42, i64 8
  store ptr @_parameterization_String, ptr %43, align 8
  %44 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %42)
  %45 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Exception)
  %46 = alloca { ptr, ptr }, align 8
  store ptr @i32_typ, ptr %46, align 8
  %47 = getelementptr inbounds i8, ptr %46, i64 8
  store ptr %34, ptr %47, align 8
  %48 = call ptr @behavior_wrapper(ptr nonnull @Exception_B_set_info_line_numberi32_file_nameString, { ptr, ptr, ptr, i32 } %8, ptr nonnull %46)
  call void %48({ ptr, ptr, ptr, i32 } %8, { ptr, ptr, ptr, i32 } %8, ptr nonnull %42, i32 1031, { ptr, ptr, ptr, i32 } %41) #25
  %49 = ptrtoint ptr %5 to i64
  %.sroa.4.8.insert.ext = zext i64 %49 to i160
  %.sroa.4.8.insert.insert = or disjoint i160 %.sroa.4.8.insert.ext, 3402823669209384634633746074317682114560
  %50 = insertvalue { ptr, i160 } { ptr @Exception, i160 undef }, i160 %.sroa.4.8.insert.insert, 1
  %51 = call ptr @get_current_coroutine()
  %52 = getelementptr i8, ptr %51, i64 48
  store { ptr, i160 } %50, ptr %52, align 8
  call void @coroutine_yield(ptr %51)
  ret void
}

define void @print88() {
  %1 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %1, align 8
  %2 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %1)
  %3 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %4 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %4, align 8
  %5 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %4)
  call void %5(ptr nonnull %1, { ptr, i160 } { ptr @i32_typ, i160 88 }) #25
  %6 = call ptr @get_current_coroutine()
  call void @coroutine_yield(ptr %6)
  %7 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %7, align 8
  %8 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %7)
  %9 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %10 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %10, align 8
  %11 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %10)
  call void %11(ptr nonnull %7, { ptr, i160 } { ptr @i32_typ, i160 90 }) #25
  ret void
}

define void @coroutine_uypqufbuwa_passer(ptr nocapture readonly %0) {
  %2 = load ptr, ptr %0, align 8
  tail call void %2()
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define void @coroutine_uypqufbuwa_buffer_filler(ptr nocapture readnone %0) local_unnamed_addr #6 {
  ret void
}

define void @grabo() local_unnamed_addr {
  %1 = tail call ptr @bump_malloc(i64 4)
  store <3 x i8> <i8 111, i8 110, i8 101>, ptr %1, align 4
  %2 = alloca [1 x ptr], align 8
  store ptr @String, ptr %2, align 8
  %3 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %2)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = call ptr @bump_malloc(i64 %4)
  %6 = insertvalue { ptr } undef, ptr %1, 0
  %7 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %5, 1
  %8 = insertvalue { ptr, ptr, ptr, i32 } %7, ptr undef, 2
  %9 = insertvalue { ptr, ptr, ptr, i32 } %8, i32 10, 3
  %10 = alloca [3 x ptr], align 8
  store ptr @_parameterization_Bufferi8, ptr %10, align 8
  %11 = getelementptr inbounds i8, ptr %10, i64 8
  store ptr @_parameterization_i32, ptr %11, align 8
  %12 = getelementptr inbounds i8, ptr %10, i64 16
  store ptr @_parameterization_i32, ptr %12, align 8
  %13 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %10)
  %14 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %15 = alloca { ptr, ptr, ptr }, align 8
  store ptr @buffer_typ, ptr %15, align 8
  %16 = getelementptr inbounds i8, ptr %15, i64 8
  store ptr @i32_typ, ptr %16, align 8
  %17 = getelementptr inbounds i8, ptr %15, i64 16
  store ptr @i32_typ, ptr %17, align 8
  %18 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %9, ptr nonnull %15)
  call void %18({ ptr, ptr, ptr, i32 } %9, { ptr, ptr, ptr, i32 } %9, ptr nonnull %10, { ptr } %6, i32 3, i32 4) #25
  %19 = ptrtoint ptr %5 to i64
  %.sroa.3.8.insert.ext = zext i64 %19 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %20 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  %21 = alloca [1 x ptr], align 8
  store ptr @_parameterization_String, ptr %21, align 8
  %22 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %21)
  %23 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %24 = alloca { ptr }, align 8
  store ptr @String, ptr %24, align 8
  %25 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %24)
  call void %25(ptr nonnull %21, { ptr, i160 } %20) #25
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i32 @_functionliteral_aawmpodyms(i32 %0, i32 %1) #6 {
  %3 = add i32 %1, %0
  ret i32 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define range(i32 0, -1) i32 @_functionliteral_kgivmcmbfd(i32 %0) #6 {
  %2 = shl i32 %0, 1
  ret i32 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define noundef i32 @_functionliteral_fqsttylcbv() #6 {
  ret i32 5
}

define void @_functionliteral_huabycyhfr(i32 %0) {
  %.sroa.0.0.insert.ext = zext i32 %0 to i160
  %2 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %3 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %3, align 8
  %4 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %3)
  %5 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %6 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %6, align 8
  %7 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %6)
  call void %7(ptr nonnull %3, { ptr, i160 } %2) #25
  ret void
}

define void @_functionliteral_celgcexpvq(i32 %0) {
  %2 = mul i32 %0, %0
  %.sroa.0.0.insert.ext = zext i32 %2 to i160
  %3 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0.0.insert.ext, 1
  %4 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %4)
  %6 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  %7 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %7, align 8
  %8 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %7)
  call void %8(ptr nonnull %4, { ptr, i160 } %3) #25
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i8 @i32toi8(i32 %0) local_unnamed_addr #6 {
  %2 = trunc i32 %0 to i8
  ret i8 %2
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i32 @_functionliteral_enkjdvjeij(i32 %0, i32 %1) local_unnamed_addr #6 {
  %3 = add i32 %1, %0
  ret i32 %3
}

; Function Attrs: noreturn
define void @_functionliteral_zckdguiuxy(i32 %0, i32 %1) #18 {
  %3 = add i32 %1, %0
  br label %._crit_edge2

._crit_edge2:                                     ; preds = %._crit_edge2, %2
  %.0 = phi i32 [ 7, %2 ], [ %.1, %._crit_edge2 ]
  %4 = add i32 %3, %.0
  %5 = insertvalue { ptr, i32 } { ptr @i32_typ, i32 undef }, i32 %4, 1
  %6 = tail call ptr @get_current_coroutine()
  %7 = getelementptr i8, ptr %6, i64 48
  store { ptr, i32 } %5, ptr %7, align 8
  tail call void @coroutine_yield(ptr %6)
  %8 = load { ptr, i32 }, ptr %7, align 8
  %.fca.0.extract = extractvalue { ptr, i32 } %8, 0
  %9 = icmp ne ptr %.fca.0.extract, @nil_typ
  %10 = icmp ne ptr %.fca.0.extract, null
  %.not16 = and i1 %9, %10
  %.fca.1.extract = extractvalue { ptr, i32 } %8, 1
  %11 = select i1 %.not16, i32 %.fca.1.extract, i32 0
  %.1 = add i32 %11, %.0
  br label %._crit_edge2
}

define void @coroutine_fvfimafigw_passer(ptr nocapture readonly %0) {
  %2 = getelementptr i8, ptr %0, i64 64
  %3 = getelementptr i8, ptr %0, i64 68
  %4 = load i32, ptr %2, align 4
  %5 = load i32, ptr %3, align 4
  %6 = load ptr, ptr %0, align 8
  tail call void %6(i32 %4, i32 %5)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @coroutine_fvfimafigw_buffer_filler(ptr nocapture writeonly %0, i32 %1, i32 %2) local_unnamed_addr #9 {
  %4 = getelementptr i8, ptr %0, i64 64
  %5 = getelementptr i8, ptr %0, i64 68
  store i32 %1, ptr %4, align 4
  store i32 %2, ptr %5, align 4
  ret void
}

define void @coroutine_luopxlwzzk_passer(ptr nocapture %0) {
  %2 = load ptr, ptr %0, align 8
  %3 = tail call i32 %2()
  %4 = getelementptr i8, ptr %0, i64 56
  store i32 %3, ptr %4, align 4
  %5 = getelementptr i8, ptr %0, i64 48
  store ptr @i32_typ, ptr %5, align 8
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define void @coroutine_luopxlwzzk_buffer_filler(ptr nocapture readnone %0) local_unnamed_addr #6 {
  ret void
}

define void @coroutine_rvyftlgybn_passer(ptr nocapture readonly %0) {
  %2 = getelementptr i8, ptr %0, i64 80
  %3 = load { ptr, ptr, ptr, i32 }, ptr %2, align 8
  %4 = load ptr, ptr %0, align 8
  tail call void %4({ ptr, ptr, ptr, i32 } %3)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
define void @coroutine_rvyftlgybn_buffer_filler(ptr nocapture writeonly %0, { ptr, ptr, ptr, i32 } %1) local_unnamed_addr #9 {
  %3 = getelementptr i8, ptr %0, i64 80
  store { ptr, ptr, ptr, i32 } %1, ptr %3, align 8
  ret void
}

define void @_functionliteral_jfuijcegou({ ptr, ptr, ptr, i32 } %0) {
  %.fca.0.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 0
  %.fca.1.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %0, 3
  %2 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.fca.0.extract, 0
  %3 = insertvalue { ptr, ptr, ptr, i32 } %2, ptr %.fca.1.extract, 1
  %4 = insertvalue { ptr, ptr, ptr, i32 } %3, ptr %.fca.2.extract, 2
  %5 = insertvalue { ptr, ptr, ptr, i32 } %4, i32 %.fca.3.extract, 3
  %6 = alloca [1 x ptr], align 8
  store ptr @_parameterization_i32, ptr %6, align 8
  %7 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %6)
  %8 = tail call ptr @llvm.invariant.start.p0(i64 64, ptr %.fca.0.extract)
  %9 = sext i32 %.fca.3.extract to i64
  %10 = getelementptr ptr, ptr %.fca.0.extract, i64 %9
  %11 = getelementptr i8, ptr %10, i64 32
  %12 = load ptr, ptr %11, align 8
  %13 = alloca { ptr }, align 8
  store ptr @i32_typ, ptr %13, align 8
  %14 = call ptr @behavior_wrapper(ptr %12, { ptr, ptr, ptr, i32 } %5, ptr nonnull %13)
  call void %14({ ptr, ptr, ptr, i32 } %5, { ptr, ptr, ptr, i32 } %5, ptr nonnull %6, { ptr, i160 } { ptr @i32_typ, i160 88 }) #25
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i1 @_functionliteral_iravxoewyu(i32 %0) #6 {
  %2 = and i32 %0, 1
  %3 = icmp eq i32 %2, 0
  ret i1 %3
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define i32 @_functionliteral_mutpkxirlo(i32 %0) #6 {
  %2 = mul i32 %0, %0
  ret i32 %2
}

define noundef i32 @main() local_unnamed_addr {
._crit_edge:
  %0 = alloca [0 x ptr], align 8
  %1 = alloca [1 x ptr], align 8
  %2 = alloca [3 x ptr], align 8
  %3 = alloca { ptr, ptr, ptr }, align 8
  %4 = alloca [1 x ptr], align 8
  %5 = alloca { ptr }, align 8
  %6 = alloca { ptr, ptr, ptr, i32 }, align 8
  %7 = alloca { ptr, ptr, ptr, i32 }, align 8
  %8 = alloca [1 x ptr], align 8
  %9 = alloca { ptr }, align 8
  %10 = alloca [1 x ptr], align 8
  %11 = alloca [3 x ptr], align 8
  %12 = alloca { ptr, ptr, ptr }, align 8
  %13 = alloca [1 x ptr], align 8
  %14 = alloca { ptr }, align 8
  %.sroa.01112.sroa.0 = alloca i8, align 8
  %15 = alloca [1 x ptr], align 8
  %16 = alloca { ptr }, align 8
  %17 = alloca [1 x ptr], align 8
  %18 = alloca { ptr, ptr, ptr, i32 }, align 8
  %19 = alloca [2 x ptr], align 8
  %20 = alloca { ptr, ptr }, align 8
  %21 = alloca [2 x ptr], align 8
  %22 = alloca { ptr, ptr }, align 8
  %23 = alloca [1 x ptr], align 8
  %24 = alloca [3 x ptr], align 8
  %25 = alloca { ptr, ptr, ptr }, align 8
  %26 = alloca [1 x ptr], align 8
  %27 = alloca { ptr }, align 8
  %28 = alloca [1 x ptr], align 8
  %29 = alloca [3 x ptr], align 8
  %30 = alloca { ptr, ptr, ptr }, align 8
  %31 = alloca { ptr, ptr, ptr, i32 }, align 8
  %32 = alloca [1 x ptr], align 8
  %33 = alloca [3 x ptr], align 8
  %34 = alloca { ptr, ptr, ptr }, align 8
  %35 = alloca [1 x ptr], align 8
  %36 = alloca { ptr }, align 8
  %37 = alloca [1 x ptr], align 8
  %38 = alloca [2 x ptr], align 8
  %39 = alloca { ptr, ptr }, align 8
  %40 = alloca { ptr, ptr, ptr, i32 }, align 8
  %41 = alloca [2 x ptr], align 8
  %42 = alloca { ptr, ptr }, align 8
  %43 = alloca [2 x ptr], align 8
  %44 = alloca { ptr, ptr }, align 8
  %45 = alloca [1 x ptr], align 8
  %46 = alloca [3 x ptr], align 8
  %47 = alloca { ptr, ptr, ptr }, align 8
  %48 = alloca [1 x ptr], align 8
  %49 = alloca { ptr }, align 8
  %50 = alloca [1 x ptr], align 8
  %51 = alloca { ptr }, align 8
  %52 = alloca [1 x ptr], align 8
  %53 = alloca [1 x ptr], align 8
  %54 = alloca { ptr }, align 8
  %55 = alloca { ptr, ptr, ptr, i32 }, align 8
  %56 = alloca [1 x ptr], align 8
  %57 = alloca { ptr }, align 8
  %58 = alloca { ptr, ptr, ptr, i32 }, align 8
  %59 = alloca [1 x ptr], align 8
  %60 = alloca { ptr }, align 8
  %61 = alloca [1 x ptr], align 8
  %62 = alloca { ptr }, align 8
  %63 = alloca [1 x ptr], align 8
  %64 = alloca { ptr }, align 8
  %65 = alloca [1 x ptr], align 8
  %66 = alloca { ptr }, align 8
  %67 = alloca [1 x ptr], align 8
  %68 = alloca { ptr }, align 8
  %69 = alloca [1 x ptr], align 8
  %70 = alloca [3 x ptr], align 8
  %71 = alloca { ptr, ptr, ptr }, align 8
  %72 = alloca { ptr, ptr, ptr, i32 }, align 8
  %73 = alloca [1 x ptr], align 8
  %74 = alloca { ptr }, align 8
  %75 = alloca { ptr, ptr, ptr, i32 }, align 8
  %76 = alloca [1 x ptr], align 8
  %77 = alloca [1 x ptr], align 8
  %78 = alloca { ptr }, align 8
  %79 = alloca { ptr, ptr, ptr, i32 }, align 8
  %80 = alloca { ptr, ptr, ptr, i32 }, align 8
  %81 = alloca [1 x ptr], align 8
  %82 = alloca [2 x ptr], align 8
  %83 = alloca { ptr, ptr }, align 8
  %84 = alloca { ptr, ptr, ptr, i32 }, align 8
  %85 = alloca { ptr, ptr, ptr, i32 }, align 8
  %86 = alloca [1 x ptr], align 8
  %87 = alloca [1 x ptr], align 8
  %88 = alloca { ptr }, align 8
  %89 = alloca { ptr, ptr, ptr, i32 }, align 8
  %90 = alloca [1 x ptr], align 8
  %91 = alloca { ptr }, align 8
  %92 = alloca { ptr, ptr, ptr, i32 }, align 8
  %93 = alloca { ptr, ptr, ptr, i32 }, align 8
  %94 = alloca [1 x ptr], align 8
  %95 = alloca { ptr }, align 8
  %96 = alloca { ptr, ptr, ptr, i32 }, align 8
  %97 = alloca { ptr, ptr, ptr, i32 }, align 8
  %98 = alloca { ptr, ptr, ptr, i32 }, align 8
  %99 = alloca [1 x ptr], align 8
  %100 = alloca { ptr }, align 8
  %101 = alloca { ptr, ptr, ptr, i32 }, align 8
  %102 = alloca [1 x ptr], align 8
  %103 = alloca { ptr }, align 8
  %104 = alloca [1 x ptr], align 8
  %105 = alloca [2 x ptr], align 8
  %106 = alloca { ptr, ptr }, align 8
  %107 = alloca { ptr, ptr, ptr, i32 }, align 8
  %108 = alloca { ptr, ptr, ptr, i32 }, align 8
  %109 = alloca [1 x ptr], align 8
  %110 = alloca { ptr }, align 8
  %111 = alloca [2 x ptr], align 8
  %112 = alloca [3 x ptr], align 8
  %113 = alloca { ptr, ptr, ptr }, align 8
  %114 = alloca { ptr, ptr, ptr, i32 }, align 8
  %115 = alloca [2 x ptr], align 8
  %116 = alloca [3 x ptr], align 8
  %117 = alloca { ptr, ptr, ptr }, align 8
  %118 = alloca { ptr, ptr, ptr, i32 }, align 8
  %119 = alloca [1 x ptr], align 8
  %120 = alloca { ptr }, align 8
  %121 = alloca { ptr, ptr, ptr, i32 }, align 8
  %122 = alloca [1 x ptr], align 8
  %123 = alloca { ptr }, align 8
  %124 = alloca [1 x ptr], align 8
  %125 = alloca { ptr }, align 8
  %126 = alloca [2 x ptr], align 8
  %127 = alloca [3 x ptr], align 8
  %128 = alloca { ptr, ptr, ptr }, align 8
  %129 = alloca { ptr, ptr, ptr, i32 }, align 8
  %130 = alloca [2 x ptr], align 8
  %131 = alloca [3 x ptr], align 8
  %132 = alloca { ptr, ptr, ptr }, align 8
  %133 = alloca { ptr, ptr, ptr, i32 }, align 8
  %134 = alloca [1 x ptr], align 8
  %135 = alloca { ptr }, align 8
  %136 = alloca { ptr, ptr, ptr, i32 }, align 8
  %137 = alloca [1 x ptr], align 8
  %138 = alloca { ptr }, align 8
  %139 = alloca [1 x ptr], align 8
  %140 = alloca { ptr }, align 8
  %141 = alloca [1 x ptr], align 8
  %142 = alloca { ptr }, align 8
  %143 = alloca [1 x ptr], align 8
  %144 = alloca [3 x ptr], align 8
  %145 = alloca { ptr, ptr, ptr }, align 8
  %146 = alloca [1 x ptr], align 8
  %147 = alloca { ptr }, align 8
  %148 = alloca [1 x ptr], align 8
  %149 = alloca { ptr }, align 8
  %150 = alloca [1 x ptr], align 8
  %151 = alloca { ptr }, align 8
  %152 = alloca [1 x ptr], align 8
  %153 = alloca [2 x ptr], align 8
  %154 = alloca { ptr, ptr }, align 8
  %155 = alloca { ptr, ptr, ptr, i32 }, align 8
  %156 = alloca { ptr, ptr, ptr, i32 }, align 8
  %157 = alloca [1 x ptr], align 8
  %158 = alloca { ptr }, align 8
  %159 = alloca [2 x ptr], align 8
  %160 = alloca [3 x ptr], align 8
  %161 = alloca { ptr, ptr, ptr }, align 8
  %162 = alloca { ptr, ptr, ptr, i32 }, align 8
  %163 = alloca { ptr, ptr, ptr, i32 }, align 8
  %164 = alloca [1 x ptr], align 8
  %165 = alloca { ptr }, align 8
  %166 = alloca [1 x ptr], align 8
  %167 = alloca { ptr }, align 8
  %168 = alloca [1 x ptr], align 8
  %169 = alloca [3 x ptr], align 8
  %170 = alloca { ptr, ptr, ptr }, align 8
  %171 = alloca { ptr, ptr, ptr, i32 }, align 8
  %172 = alloca { ptr, ptr, ptr, i32 }, align 8
  %173 = alloca { ptr, ptr, ptr, i32 }, align 8
  %174 = alloca [1 x ptr], align 8
  %175 = alloca { ptr }, align 8
  %176 = alloca { ptr, ptr, ptr, i32 }, align 8
  %177 = alloca [2 x ptr], align 8
  %178 = alloca [3 x ptr], align 8
  %179 = alloca { ptr, ptr, ptr }, align 8
  %180 = alloca { ptr, ptr, ptr, i32 }, align 8
  %181 = alloca [1 x ptr], align 8
  %182 = alloca { ptr }, align 8
  %183 = alloca [1 x ptr], align 8
  %184 = alloca [1 x ptr], align 8
  %185 = alloca { ptr }, align 8
  %186 = alloca { ptr, ptr, ptr, i32 }, align 8
  %187 = alloca [1 x ptr], align 8
  %188 = alloca { ptr }, align 8
  %189 = alloca [1 x ptr], align 8
  %190 = alloca [2 x ptr], align 8
  %191 = alloca { ptr, ptr }, align 8
  %192 = alloca [1 x ptr], align 8
  %193 = alloca { ptr }, align 8
  %194 = alloca { ptr, ptr, ptr, i32 }, align 8
  %195 = alloca { ptr, ptr, ptr, i32 }, align 8
  %196 = alloca { ptr, ptr, ptr, i32 }, align 8
  %197 = alloca [1 x ptr], align 8
  %198 = alloca { ptr }, align 8
  %199 = alloca [2 x ptr], align 8
  %200 = alloca [3 x ptr], align 8
  %201 = alloca { ptr, ptr, ptr }, align 8
  %202 = alloca [1 x ptr], align 8
  %203 = alloca { ptr }, align 8
  %204 = alloca { ptr, ptr, ptr, i32 }, align 8
  %205 = alloca [2 x ptr], align 8
  %206 = alloca { ptr, ptr }, align 8
  %207 = alloca [1 x ptr], align 8
  %208 = alloca { ptr }, align 8
  %209 = alloca [2 x ptr], align 8
  %210 = alloca [3 x ptr], align 8
  %211 = alloca { ptr, ptr, ptr }, align 8
  %212 = alloca [1 x ptr], align 8
  %213 = alloca { ptr }, align 8
  %214 = alloca [1 x ptr], align 8
  %215 = alloca [3 x ptr], align 8
  %216 = alloca { ptr, ptr, ptr }, align 8
  %217 = alloca [1 x ptr], align 8
  %218 = alloca [3 x ptr], align 8
  %219 = alloca { ptr, ptr, ptr }, align 8
  %220 = alloca { ptr, ptr, ptr, i32 }, align 8
  %221 = alloca { ptr, ptr, ptr, i32 }, align 8
  %222 = alloca [2 x ptr], align 8
  %223 = alloca { ptr, ptr }, align 8
  %224 = alloca [1 x ptr], align 8
  %225 = alloca [3 x ptr], align 8
  %226 = alloca { ptr, ptr, ptr }, align 8
  %227 = alloca { ptr, ptr, ptr, i32 }, align 8
  %228 = alloca [1 x ptr], align 8
  %229 = alloca { ptr }, align 8
  %230 = alloca { ptr, ptr, ptr, i32 }, align 8
  %231 = alloca [1 x ptr], align 8
  %232 = alloca { ptr }, align 8
  %233 = alloca [1 x ptr], align 8
  %234 = alloca [2 x ptr], align 8
  %235 = alloca { ptr, ptr }, align 8
  %236 = alloca [1 x ptr], align 8
  %237 = alloca { ptr }, align 8
  %238 = alloca [1 x ptr], align 8
  %239 = alloca { ptr }, align 8
  %240 = alloca [1 x ptr], align 8
  %241 = alloca { ptr }, align 8
  %242 = alloca [1 x ptr], align 8
  %243 = alloca { ptr }, align 8
  %244 = alloca [1 x ptr], align 8
  %245 = alloca { ptr }, align 8
  %246 = alloca [2 x ptr], align 8
  %247 = alloca { ptr, ptr, ptr, i32 }, align 8
  %248 = alloca [1 x ptr], align 8
  %249 = alloca { ptr }, align 8
  %250 = alloca [1 x ptr], align 8
  %251 = alloca [2 x ptr], align 8
  %252 = alloca { ptr, ptr }, align 8
  %253 = alloca [1 x ptr], align 8
  %254 = alloca { ptr }, align 8
  %255 = alloca { ptr, ptr, ptr, i32 }, align 8
  %256 = alloca [1 x ptr], align 8
  %257 = alloca { ptr }, align 8
  %258 = alloca { ptr, ptr, ptr, i32 }, align 8
  %259 = alloca [2 x ptr], align 8
  %260 = alloca { ptr, ptr }, align 8
  %261 = alloca [1 x ptr], align 8
  %262 = alloca { ptr }, align 8
  %263 = alloca [1 x ptr], align 8
  %264 = alloca { ptr }, align 8
  %265 = alloca [1 x ptr], align 8
  %266 = alloca { ptr }, align 8
  tail call void @setup_landing_pad()
  store ptr @_parameterization_i32, ptr %8, align 8
  %267 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %8)
  %268 = tail call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %9, align 8
  %269 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %9)
  call void %269(ptr nonnull %8, { ptr, i160 } { ptr @i32_typ, i160 3 }) #25
  %270 = call ptr @bump_malloc(i64 14)
  store <13 x i8> <i8 72, i8 101, i8 108, i8 108, i8 111, i8 44, i8 32, i8 87, i8 111, i8 114, i8 108, i8 100, i8 33>, ptr %270, align 16
  store ptr @String, ptr %10, align 8
  %271 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %10)
  %272 = extractvalue { i64, i64 } %271, 0
  %273 = call ptr @bump_malloc(i64 %272)
  %274 = insertvalue { ptr } undef, ptr %270, 0
  %275 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %273, 1
  %276 = insertvalue { ptr, ptr, ptr, i32 } %275, ptr undef, 2
  %277 = insertvalue { ptr, ptr, ptr, i32 } %276, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %11, align 8
  %278 = getelementptr inbounds i8, ptr %11, i64 8
  store ptr @_parameterization_i32, ptr %278, align 8
  %279 = getelementptr inbounds i8, ptr %11, i64 16
  store ptr @_parameterization_i32, ptr %279, align 8
  %280 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %11)
  %281 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %12, align 8
  %282 = getelementptr inbounds i8, ptr %12, i64 8
  store ptr @i32_typ, ptr %282, align 8
  %283 = getelementptr inbounds i8, ptr %12, i64 16
  store ptr @i32_typ, ptr %283, align 8
  %284 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %277, ptr nonnull %12)
  call void %284({ ptr, ptr, ptr, i32 } %277, { ptr, ptr, ptr, i32 } %277, ptr nonnull %11, { ptr } %274, i32 13, i32 14) #25
  %285 = ptrtoint ptr %273 to i64
  %.sroa.31122.8.insert.ext = zext i64 %285 to i160
  %.sroa.31122.8.insert.insert = or disjoint i160 %.sroa.31122.8.insert.ext, 3402823669209384634633746074317682114560
  %286 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.31122.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %13, align 8
  %287 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %13)
  %288 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @String, ptr %14, align 8
  %289 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %14)
  call void %289(ptr nonnull %13, { ptr, i160 } %286) #25
  store i1 false, ptr %.sroa.01112.sroa.0, align 8
  %.sroa.01112.sroa.0.0..sroa.01112.sroa.0.0..sroa.01112.sroa.0.0..sroa.01112.sroa.0.0..sroa.01112.sroa.0.0..sroa.01112.0. = load i8, ptr %.sroa.01112.sroa.0, align 8
  %.sroa.01112.0.insert.ext = zext i8 %.sroa.01112.sroa.0.0..sroa.01112.sroa.0.0..sroa.01112.sroa.0.0..sroa.01112.sroa.0.0..sroa.01112.sroa.0.0..sroa.01112.0. to i160
  %290 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %.sroa.01112.0.insert.ext, 1
  store ptr @_parameterization_i1, ptr %15, align 8
  %291 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %15)
  %292 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @bool_typ, ptr %16, align 8
  %293 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %16)
  call void %293(ptr nonnull %15, { ptr, i160 } %290) #25
  store ptr @Bard, ptr %17, align 8
  %294 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Bard, ptr nonnull %17)
  %295 = extractvalue { i64, i64 } %294, 0
  %296 = call ptr @bump_malloc(i64 %295)
  %297 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Bard, ptr undef, ptr undef, i32 undef }, ptr %296, 1
  %298 = insertvalue { ptr, ptr, ptr, i32 } %297, ptr undef, 2
  %299 = insertvalue { ptr, ptr, ptr, i32 } %298, i32 10, 3
  %300 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %301 = call ptr @llvm.invariant.start.p0(i64 56, ptr nonnull @Bard)
  %302 = call ptr @behavior_wrapper(ptr nonnull @Bard_B_init_, { ptr, ptr, ptr, i32 } %299, ptr nonnull %0)
  call void %302({ ptr, ptr, ptr, i32 } %299, { ptr, ptr, ptr, i32 } %299, ptr nonnull %0) #25
  store ptr @Bard, ptr %18, align 8
  %303 = getelementptr inbounds i8, ptr %18, i64 8
  store ptr %296, ptr %303, align 8
  %304 = getelementptr inbounds i8, ptr %18, i64 16
  %305 = getelementptr inbounds i8, ptr %18, i64 24
  store i32 10, ptr %305, align 8
  call void @set_offset(ptr nonnull %18, ptr nonnull @Bard)
  %306 = load ptr, ptr %18, align 8
  %307 = load ptr, ptr %303, align 8
  %308 = load ptr, ptr %304, align 8
  %309 = load i32, ptr %305, align 8
  %310 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %306, 0
  %311 = insertvalue { ptr, ptr, ptr, i32 } %310, ptr %307, 1
  %312 = insertvalue { ptr, ptr, ptr, i32 } %311, ptr %308, 2
  %313 = insertvalue { ptr, ptr, ptr, i32 } %312, i32 %309, 3
  store ptr @_parameterization_i32, ptr %19, align 8
  %314 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr @_parameterization_i32, ptr %314, align 8
  %315 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %19)
  %316 = call ptr @llvm.invariant.start.p0(i64 56, ptr %306)
  %317 = sext i32 %309 to i64
  %318 = getelementptr ptr, ptr %306, i64 %317
  %319 = getelementptr i8, ptr %318, i64 8
  %320 = load ptr, ptr %319, align 8
  store ptr @i32_typ, ptr %20, align 8
  %321 = getelementptr inbounds i8, ptr %20, i64 8
  store ptr @i32_typ, ptr %321, align 8
  %322 = call ptr @behavior_wrapper(ptr %320, { ptr, ptr, ptr, i32 } %313, ptr nonnull %20)
  call void %322({ ptr, ptr, ptr, i32 } %313, { ptr, ptr, ptr, i32 } %313, ptr nonnull %19, { ptr, i160 } { ptr @i32_typ, i160 5 }, { ptr, i160 } { ptr @i32_typ, i160 10 }) #25
  store ptr @_parameterization_f64_or_i32, ptr %21, align 8
  %323 = getelementptr inbounds i8, ptr %21, i64 8
  store ptr @_parameterization_f64, ptr %323, align 8
  %324 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %21)
  %325 = call ptr @llvm.invariant.start.p0(i64 56, ptr %306)
  %326 = load ptr, ptr %319, align 8
  store ptr @f64_typ, ptr %22, align 8
  %327 = getelementptr inbounds i8, ptr %22, i64 8
  store ptr @f64_typ, ptr %327, align 8
  %328 = call ptr @behavior_wrapper(ptr %326, { ptr, ptr, ptr, i32 } %313, ptr nonnull %22)
  call void %328({ ptr, ptr, ptr, i32 } %313, { ptr, ptr, ptr, i32 } %313, ptr nonnull %21, { ptr, i160 } { ptr @f64_typ, i160 4619567317775286272 }, { ptr, i160 } { ptr @f64_typ, i160 4624070917402656768 }) #25
  %329 = call ptr @bump_malloc(i64 6)
  store <5 x i8> <i8 115, i8 116, i8 97, i8 114, i8 116>, ptr %329, align 8
  store ptr @String, ptr %23, align 8
  %330 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %23)
  %331 = extractvalue { i64, i64 } %330, 0
  %332 = call ptr @bump_malloc(i64 %331)
  %333 = insertvalue { ptr } undef, ptr %329, 0
  %334 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %332, 1
  %335 = insertvalue { ptr, ptr, ptr, i32 } %334, ptr undef, 2
  %336 = insertvalue { ptr, ptr, ptr, i32 } %335, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %24, align 8
  %337 = getelementptr inbounds i8, ptr %24, i64 8
  store ptr @_parameterization_i32, ptr %337, align 8
  %338 = getelementptr inbounds i8, ptr %24, i64 16
  store ptr @_parameterization_i32, ptr %338, align 8
  %339 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %24)
  %340 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %25, align 8
  %341 = getelementptr inbounds i8, ptr %25, i64 8
  store ptr @i32_typ, ptr %341, align 8
  %342 = getelementptr inbounds i8, ptr %25, i64 16
  store ptr @i32_typ, ptr %342, align 8
  %343 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %336, ptr nonnull %25)
  call void %343({ ptr, ptr, ptr, i32 } %336, { ptr, ptr, ptr, i32 } %336, ptr nonnull %24, { ptr } %333, i32 5, i32 6) #25
  %344 = ptrtoint ptr %332 to i64
  %.sroa.31059.8.insert.ext = zext i64 %344 to i160
  %.sroa.31059.8.insert.insert = or disjoint i160 %.sroa.31059.8.insert.ext, 3402823669209384634633746074317682114560
  %345 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.31059.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %26, align 8
  %346 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %26)
  %347 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @String, ptr %27, align 8
  %348 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %27)
  call void %348(ptr nonnull %26, { ptr, i160 } %345) #25
  store ptr @Animal, ptr %28, align 8
  %349 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Animal, ptr nonnull %28)
  %350 = extractvalue { i64, i64 } %349, 0
  %351 = call ptr @bump_malloc(i64 %350)
  %352 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Animal, ptr undef, ptr undef, i32 undef }, ptr %351, 1
  %353 = insertvalue { ptr, ptr, ptr, i32 } %352, ptr undef, 2
  %354 = insertvalue { ptr, ptr, ptr, i32 } %353, i32 10, 3
  store ptr @_parameterization_i32, ptr %29, align 8
  %355 = getelementptr inbounds i8, ptr %29, i64 8
  store ptr @_parameterization_f64, ptr %355, align 8
  %356 = getelementptr inbounds i8, ptr %29, i64 16
  store ptr @_parameterization_i32, ptr %356, align 8
  %357 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %29)
  %358 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Animal)
  store ptr @i32_typ, ptr %30, align 8
  %359 = getelementptr inbounds i8, ptr %30, i64 8
  store ptr @f64_typ, ptr %359, align 8
  %360 = getelementptr inbounds i8, ptr %30, i64 16
  store ptr @i32_typ, ptr %360, align 8
  %361 = call ptr @behavior_wrapper(ptr nonnull @Animal_B_init_agei32_hpf64_skilli32, { ptr, ptr, ptr, i32 } %354, ptr nonnull %30)
  call void %361({ ptr, ptr, ptr, i32 } %354, { ptr, ptr, ptr, i32 } %354, ptr nonnull %29, i32 55, double 8.000000e+00, i32 13) #25
  store ptr @Animal, ptr %31, align 8
  %362 = getelementptr inbounds i8, ptr %31, i64 8
  store ptr %351, ptr %362, align 8
  %363 = getelementptr inbounds i8, ptr %31, i64 16
  %364 = getelementptr inbounds i8, ptr %31, i64 24
  store i32 10, ptr %364, align 8
  call void @set_offset(ptr nonnull %31, ptr nonnull @Animal)
  %365 = load ptr, ptr %31, align 8
  %366 = load ptr, ptr %362, align 8
  %367 = load ptr, ptr %363, align 8
  %368 = load i32, ptr %364, align 8
  %369 = call ptr @bump_malloc(i64 14)
  store <13 x i8> <i8 100, i8 105, i8 100, i8 32, i8 103, i8 101, i8 116, i8 32, i8 104, i8 101, i8 114, i8 101, i8 33>, ptr %369, align 16
  store ptr @String, ptr %32, align 8
  %370 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %32)
  %371 = extractvalue { i64, i64 } %370, 0
  %372 = call ptr @bump_malloc(i64 %371)
  %373 = insertvalue { ptr } undef, ptr %369, 0
  %374 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %372, 1
  %375 = insertvalue { ptr, ptr, ptr, i32 } %374, ptr undef, 2
  %376 = insertvalue { ptr, ptr, ptr, i32 } %375, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %33, align 8
  %377 = getelementptr inbounds i8, ptr %33, i64 8
  store ptr @_parameterization_i32, ptr %377, align 8
  %378 = getelementptr inbounds i8, ptr %33, i64 16
  store ptr @_parameterization_i32, ptr %378, align 8
  %379 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %33)
  %380 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %34, align 8
  %381 = getelementptr inbounds i8, ptr %34, i64 8
  store ptr @i32_typ, ptr %381, align 8
  %382 = getelementptr inbounds i8, ptr %34, i64 16
  store ptr @i32_typ, ptr %382, align 8
  %383 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %376, ptr nonnull %34)
  call void %383({ ptr, ptr, ptr, i32 } %376, { ptr, ptr, ptr, i32 } %376, ptr nonnull %33, { ptr } %373, i32 13, i32 14) #25
  %384 = ptrtoint ptr %372 to i64
  %.sroa.31035.8.insert.ext = zext i64 %384 to i160
  %.sroa.31035.8.insert.insert = or disjoint i160 %.sroa.31035.8.insert.ext, 3402823669209384634633746074317682114560
  %385 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.31035.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %35, align 8
  %386 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %35)
  %387 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @String, ptr %36, align 8
  %388 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %36)
  call void %388(ptr nonnull %35, { ptr, i160 } %385) #25
  store ptr @Beaver, ptr %37, align 8
  %389 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Beaver, ptr nonnull %37)
  %390 = extractvalue { i64, i64 } %389, 0
  %391 = call ptr @bump_malloc(i64 %390)
  %392 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Beaver, ptr undef, ptr undef, i32 undef }, ptr %391, 1
  %393 = insertvalue { ptr, ptr, ptr, i32 } %392, ptr undef, 2
  %394 = insertvalue { ptr, ptr, ptr, i32 } %393, i32 10, 3
  store ptr @_parameterization_i32, ptr %38, align 8
  %395 = getelementptr inbounds i8, ptr %38, i64 8
  store ptr @_parameterization_f64, ptr %395, align 8
  %396 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %38)
  %397 = call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @Beaver)
  store ptr @i32_typ, ptr %39, align 8
  %398 = getelementptr inbounds i8, ptr %39, i64 8
  store ptr @f64_typ, ptr %398, align 8
  %399 = call ptr @behavior_wrapper(ptr nonnull @Beaver_B_init_colori32_namef64, { ptr, ptr, ptr, i32 } %394, ptr nonnull %39)
  call void %399({ ptr, ptr, ptr, i32 } %394, { ptr, ptr, ptr, i32 } %394, ptr nonnull %38, i32 10, double 1.000000e+01) #25
  store ptr @Beaver, ptr %40, align 8
  %400 = getelementptr inbounds i8, ptr %40, i64 8
  store ptr %391, ptr %400, align 8
  %401 = getelementptr inbounds i8, ptr %40, i64 16
  %402 = getelementptr inbounds i8, ptr %40, i64 24
  store i32 10, ptr %402, align 8
  call void @set_offset(ptr nonnull %40, ptr nonnull @Beaver)
  %403 = load ptr, ptr %40, align 8
  %404 = load ptr, ptr %400, align 8
  %405 = load ptr, ptr %401, align 8
  %406 = load i32, ptr %402, align 8
  %407 = insertvalue { ptr, i160 } undef, ptr %365, 0
  %408 = ptrtoint ptr %366 to i64
  %409 = ptrtoint ptr %367 to i64
  %.sroa.14.8.insert.ext1207 = zext i32 %368 to i160
  %.sroa.14.8.insert.shift1208 = shl nuw i160 %.sroa.14.8.insert.ext1207, 128
  %.sroa.10.8.insert.ext1202 = zext i64 %409 to i160
  %.sroa.10.8.insert.shift1203 = shl nuw nsw i160 %.sroa.10.8.insert.ext1202, 64
  %.sroa.10.8.insert.insert1204 = or disjoint i160 %.sroa.14.8.insert.shift1208, %.sroa.10.8.insert.shift1203
  %.sroa.5.8.insert.ext1200 = zext i64 %408 to i160
  %.sroa.5.8.insert.insert1201 = or disjoint i160 %.sroa.10.8.insert.insert1204, %.sroa.5.8.insert.ext1200
  %410 = insertvalue { ptr, i160 } %407, i160 %.sroa.5.8.insert.insert1201, 1
  %411 = insertvalue { ptr, i160 } undef, ptr %403, 0
  %412 = ptrtoint ptr %404 to i64
  %413 = ptrtoint ptr %405 to i64
  %.sroa.14.8.insert.ext = zext i32 %406 to i160
  %.sroa.14.8.insert.shift = shl nuw i160 %.sroa.14.8.insert.ext, 128
  %.sroa.10.8.insert.ext = zext i64 %413 to i160
  %.sroa.10.8.insert.shift = shl nuw nsw i160 %.sroa.10.8.insert.ext, 64
  %.sroa.10.8.insert.insert = or disjoint i160 %.sroa.14.8.insert.shift, %.sroa.10.8.insert.shift
  %.sroa.5.8.insert.ext = zext i64 %412 to i160
  %.sroa.5.8.insert.insert = or disjoint i160 %.sroa.10.8.insert.insert, %.sroa.5.8.insert.ext
  %414 = insertvalue { ptr, i160 } %411, i160 %.sroa.5.8.insert.insert, 1
  store ptr @_parameterization_Animal, ptr %41, align 8
  %415 = getelementptr inbounds i8, ptr %41, i64 8
  store ptr @_parameterization_Beaver, ptr %415, align 8
  %416 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %41)
  %417 = call ptr @llvm.invariant.start.p0(i64 56, ptr %306)
  %418 = load ptr, ptr %319, align 8
  store ptr %365, ptr %42, align 8
  %419 = getelementptr inbounds i8, ptr %42, i64 8
  store ptr %403, ptr %419, align 8
  %420 = call ptr @behavior_wrapper(ptr %418, { ptr, ptr, ptr, i32 } %313, ptr nonnull %42)
  call void %420({ ptr, ptr, ptr, i32 } %313, { ptr, ptr, ptr, i32 } %313, ptr nonnull %41, { ptr, i160 } %410, { ptr, i160 } %414) #25
  store ptr @_parameterization_i32, ptr %43, align 8
  %421 = getelementptr inbounds i8, ptr %43, i64 8
  store ptr @_parameterization_f64_or_i32, ptr %421, align 8
  %422 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %43)
  %423 = call ptr @llvm.invariant.start.p0(i64 56, ptr %306)
  %424 = load ptr, ptr %319, align 8
  store ptr @i32_typ, ptr %44, align 8
  %425 = getelementptr inbounds i8, ptr %44, i64 8
  store ptr @f64_typ, ptr %425, align 8
  %426 = call ptr @behavior_wrapper(ptr %424, { ptr, ptr, ptr, i32 } %313, ptr nonnull %44)
  call void %426({ ptr, ptr, ptr, i32 } %313, { ptr, ptr, ptr, i32 } %313, ptr nonnull %43, { ptr, i160 } { ptr @i32_typ, i160 7 }, { ptr, i160 } { ptr @f64_typ, i160 4619567317775286272 }) #25
  %427 = call ptr @bump_malloc(i64 17)
  store <16 x i8> <i8 98, i8 97, i8 114, i8 114, i8 121, i8 39, i8 115, i8 32, i8 99, i8 111, i8 108, i8 111, i8 114, i8 32, i8 105, i8 115>, ptr %427, align 16
  store ptr @String, ptr %45, align 8
  %428 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %45)
  %429 = extractvalue { i64, i64 } %428, 0
  %430 = call ptr @bump_malloc(i64 %429)
  %431 = insertvalue { ptr } undef, ptr %427, 0
  %432 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %430, 1
  %433 = insertvalue { ptr, ptr, ptr, i32 } %432, ptr undef, 2
  %434 = insertvalue { ptr, ptr, ptr, i32 } %433, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %46, align 8
  %435 = getelementptr inbounds i8, ptr %46, i64 8
  store ptr @_parameterization_i32, ptr %435, align 8
  %436 = getelementptr inbounds i8, ptr %46, i64 16
  store ptr @_parameterization_i32, ptr %436, align 8
  %437 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %46)
  %438 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %47, align 8
  %439 = getelementptr inbounds i8, ptr %47, i64 8
  store ptr @i32_typ, ptr %439, align 8
  %440 = getelementptr inbounds i8, ptr %47, i64 16
  store ptr @i32_typ, ptr %440, align 8
  %441 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %434, ptr nonnull %47)
  call void %441({ ptr, ptr, ptr, i32 } %434, { ptr, ptr, ptr, i32 } %434, ptr nonnull %46, { ptr } %431, i32 16, i32 17) #25
  %442 = ptrtoint ptr %430 to i64
  %.sroa.3995.8.insert.ext = zext i64 %442 to i160
  %.sroa.3995.8.insert.insert = or disjoint i160 %.sroa.3995.8.insert.ext, 3402823669209384634633746074317682114560
  %443 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3995.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %48, align 8
  %444 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %48)
  %445 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @String, ptr %49, align 8
  %446 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %49)
  call void %446(ptr nonnull %48, { ptr, i160 } %443) #25
  %447 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %403, 0
  %448 = insertvalue { ptr, ptr, ptr, i32 } %447, ptr %404, 1
  %449 = insertvalue { ptr, ptr, ptr, i32 } %448, ptr %405, 2
  %450 = insertvalue { ptr, ptr, ptr, i32 } %449, i32 %406, 3
  %451 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %452 = call ptr @llvm.invariant.start.p0(i64 64, ptr %403)
  %453 = sext i32 %406 to i64
  %454 = getelementptr ptr, ptr %403, i64 %453
  %455 = getelementptr i8, ptr %454, i64 32
  %456 = load ptr, ptr %455, align 8
  %457 = call ptr @behavior_wrapper(ptr %456, { ptr, ptr, ptr, i32 } %450, ptr nonnull %0)
  call void %457({ ptr, ptr, ptr, i32 } %450, { ptr, ptr, ptr, i32 } %450, ptr nonnull %0) #25
  store ptr @_parameterization_i32, ptr %50, align 8
  %458 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %50)
  %459 = call ptr @llvm.invariant.start.p0(i64 64, ptr %403)
  %460 = getelementptr i8, ptr %454, i64 24
  %461 = load ptr, ptr %460, align 8
  store ptr @i32_typ, ptr %51, align 8
  %462 = call ptr @behavior_wrapper(ptr %461, { ptr, ptr, ptr, i32 } %450, ptr nonnull %51)
  call void %462({ ptr, ptr, ptr, i32 } %450, { ptr, ptr, ptr, i32 } %450, ptr nonnull %50, i32 5) #25
  %463 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %464 = call ptr @llvm.invariant.start.p0(i64 64, ptr %403)
  %465 = load ptr, ptr %455, align 8
  %466 = call ptr @behavior_wrapper(ptr %465, { ptr, ptr, ptr, i32 } %450, ptr nonnull %0)
  call void %466({ ptr, ptr, ptr, i32 } %450, { ptr, ptr, ptr, i32 } %450, ptr nonnull %0) #25
  store ptr @Integer, ptr %52, align 8
  %467 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Integer, ptr nonnull %52)
  %468 = extractvalue { i64, i64 } %467, 0
  %469 = call ptr @bump_malloc(i64 %468)
  %470 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Integer, ptr undef, ptr undef, i32 undef }, ptr %469, 1
  %471 = insertvalue { ptr, ptr, ptr, i32 } %470, ptr undef, 2
  %472 = insertvalue { ptr, ptr, ptr, i32 } %471, i32 10, 3
  store ptr @_parameterization_i32, ptr %53, align 8
  %473 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %53)
  %474 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Integer)
  store ptr @i32_typ, ptr %54, align 8
  %475 = call ptr @behavior_wrapper(ptr nonnull @Integer_B_init_valuei32, { ptr, ptr, ptr, i32 } %472, ptr nonnull %54)
  call void %475({ ptr, ptr, ptr, i32 } %472, { ptr, ptr, ptr, i32 } %472, ptr nonnull %53, i32 89) #25
  store ptr @Integer, ptr %55, align 8
  %476 = getelementptr inbounds i8, ptr %55, i64 8
  store ptr %469, ptr %476, align 8
  %477 = getelementptr inbounds i8, ptr %55, i64 16
  %478 = getelementptr inbounds i8, ptr %55, i64 24
  store i32 10, ptr %478, align 8
  call void @set_offset(ptr nonnull %55, ptr nonnull @Integer)
  %479 = load ptr, ptr %55, align 8
  %480 = load ptr, ptr %476, align 8
  %481 = load ptr, ptr %477, align 8
  %482 = load i32, ptr %478, align 8
  %483 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %479, 0
  %484 = insertvalue { ptr, ptr, ptr, i32 } %483, ptr %480, 1
  %485 = insertvalue { ptr, ptr, ptr, i32 } %484, ptr %481, 2
  %486 = insertvalue { ptr, ptr, ptr, i32 } %485, i32 %482, 3
  store ptr @_parameterization_i32, ptr %56, align 8
  %487 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %56)
  %488 = call ptr @llvm.invariant.start.p0(i64 104, ptr %479)
  %489 = sext i32 %482 to i64
  %490 = getelementptr ptr, ptr %479, i64 %489
  %491 = getelementptr i8, ptr %490, i64 24
  %492 = load ptr, ptr %491, align 8
  store ptr @i32_typ, ptr %57, align 8
  %493 = call ptr @behavior_wrapper(ptr %492, { ptr, ptr, ptr, i32 } %486, ptr nonnull %57)
  %494 = call { ptr, ptr, ptr, i32 } %493({ ptr, ptr, ptr, i32 } %486, { ptr, ptr, ptr, i32 } %486, ptr nonnull %56, i32 7) #25
  %.fca.0.extract966 = extractvalue { ptr, ptr, ptr, i32 } %494, 0
  %.fca.1.extract968 = extractvalue { ptr, ptr, ptr, i32 } %494, 1
  %.fca.2.extract970 = extractvalue { ptr, ptr, ptr, i32 } %494, 2
  %.fca.3.extract971 = extractvalue { ptr, ptr, ptr, i32 } %494, 3
  store ptr %.fca.0.extract966, ptr %58, align 8
  %495 = getelementptr inbounds i8, ptr %58, i64 8
  store ptr %.fca.1.extract968, ptr %495, align 8
  %496 = getelementptr inbounds i8, ptr %58, i64 16
  store ptr %.fca.2.extract970, ptr %496, align 8
  %497 = getelementptr inbounds i8, ptr %58, i64 24
  store i32 %.fca.3.extract971, ptr %497, align 8
  call void @set_offset(ptr nonnull %58, ptr nonnull @Integer)
  %498 = load ptr, ptr %58, align 8
  %499 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %498, 0
  %500 = load ptr, ptr %495, align 8
  %501 = insertvalue { ptr, ptr, ptr, i32 } %499, ptr %500, 1
  %502 = load ptr, ptr %496, align 8
  %503 = insertvalue { ptr, ptr, ptr, i32 } %501, ptr %502, 2
  %504 = load i32, ptr %497, align 8
  %505 = insertvalue { ptr, ptr, ptr, i32 } %503, i32 %504, 3
  %506 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %507 = call ptr @llvm.invariant.start.p0(i64 104, ptr %498)
  %508 = sext i32 %504 to i64
  %509 = getelementptr ptr, ptr %498, i64 %508
  %510 = getelementptr i8, ptr %509, i64 48
  %511 = load ptr, ptr %510, align 8
  %512 = call ptr @behavior_wrapper(ptr %511, { ptr, ptr, ptr, i32 } %505, ptr nonnull %0)
  call void %512({ ptr, ptr, ptr, i32 } %505, { ptr, ptr, ptr, i32 } %505, ptr nonnull %0) #25
  store ptr @_parameterization_f64, ptr %59, align 8
  %513 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %59)
  %514 = call ptr @llvm.invariant.start.p0(i64 136, ptr nonnull @Math)
  store ptr @f64_typ, ptr %60, align 8
  %515 = call ptr @class_behavior_wrapper(ptr nonnull @Math_B__Self_sqrt_xf64, ptr nonnull %60)
  %516 = call double %515(ptr nonnull %59, double 9.000000e+00) #25
  store ptr @_parameterization_i32, ptr %61, align 8
  %517 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %61)
  %518 = call ptr @llvm.invariant.start.p0(i64 136, ptr nonnull @Math)
  store ptr @i32_typ, ptr %62, align 8
  %519 = call ptr @class_behavior_wrapper(ptr nonnull @Math_B__Self_abs_xi32__Self_abs_xf64, ptr nonnull %62)
  %520 = call { ptr, i64 } %519(ptr nonnull %61, { ptr, i64 } { ptr @i32_typ, i64 4294967287 }) #25
  %.fca.1.extract955 = extractvalue { ptr, i64 } %520, 1
  %.sroa.1958.8.extract.trunc.mask = and i64 %.fca.1.extract955, 4294967295
  %.sroa.0950.0.insert.ext = zext nneg i64 %.sroa.1958.8.extract.trunc.mask to i160
  %521 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0950.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %63, align 8
  %522 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %63)
  %523 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %64, align 8
  %524 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %64)
  call void %524(ptr nonnull %63, { ptr, i160 } %521) #25
  %525 = bitcast double %516 to i64
  %.sroa.0947.0.insert.ext = zext i64 %525 to i160
  %526 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.0947.0.insert.ext, 1
  store ptr @_parameterization_f64, ptr %65, align 8
  %527 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %65)
  %528 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @f64_typ, ptr %66, align 8
  %529 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %66)
  call void %529(ptr nonnull %65, { ptr, i160 } %526) #25
  %530 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %365, 0
  %531 = insertvalue { ptr, ptr, ptr, i32 } %530, ptr %366, 1
  %532 = insertvalue { ptr, ptr, ptr, i32 } %531, ptr %367, 2
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %7)
  store ptr %365, ptr %7, align 8
  %533 = getelementptr inbounds i8, ptr %7, i64 8
  store ptr %366, ptr %533, align 8
  %534 = getelementptr inbounds i8, ptr %7, i64 16
  store ptr %367, ptr %534, align 8
  %535 = getelementptr inbounds i8, ptr %7, i64 24
  store i32 %368, ptr %535, align 8
  call void @set_offset(ptr nonnull %7, ptr nonnull @Animal)
  %536 = load ptr, ptr %7, align 8
  %537 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %536, 0
  %538 = load ptr, ptr %533, align 8
  %539 = insertvalue { ptr, ptr, ptr, i32 } %537, ptr %538, 1
  %540 = load ptr, ptr %534, align 8
  %541 = insertvalue { ptr, ptr, ptr, i32 } %539, ptr %540, 2
  %542 = load i32, ptr %535, align 8
  %543 = insertvalue { ptr, ptr, ptr, i32 } %541, i32 %542, 3
  %544 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %545 = call ptr @llvm.invariant.start.p0(i64 104, ptr %536)
  %546 = sext i32 %542 to i64
  %547 = getelementptr ptr, ptr %536, i64 %546
  %548 = getelementptr i8, ptr %547, i64 32
  %549 = load ptr, ptr %548, align 8
  %550 = call ptr @behavior_wrapper(ptr %549, { ptr, ptr, ptr, i32 } %543, ptr nonnull %0)
  call void %550({ ptr, ptr, ptr, i32 } %543, { ptr, ptr, ptr, i32 } %543, ptr nonnull %0) #25
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %7)
  %551 = insertvalue { ptr, ptr, ptr, i32 } %532, i32 %368, 3
  %552 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %553 = call ptr @llvm.invariant.start.p0(i64 104, ptr %365)
  %554 = sext i32 %368 to i64
  %555 = getelementptr ptr, ptr %365, i64 %554
  %556 = getelementptr i8, ptr %555, i64 56
  %557 = load ptr, ptr %556, align 8
  %558 = call ptr @behavior_wrapper(ptr %557, { ptr, ptr, ptr, i32 } %551, ptr nonnull %0)
  %559 = call { ptr, i160 } %558({ ptr, ptr, ptr, i32 } %551, { ptr, ptr, ptr, i32 } %551, ptr nonnull %0) #25
  %560 = getelementptr inbounds i8, ptr %70, i64 8
  %561 = getelementptr inbounds i8, ptr %70, i64 16
  %562 = getelementptr inbounds i8, ptr %71, i64 8
  %563 = getelementptr inbounds i8, ptr %71, i64 16
  %564 = getelementptr inbounds i8, ptr %72, i64 8
  %565 = getelementptr inbounds i8, ptr %72, i64 16
  %566 = getelementptr inbounds i8, ptr %72, i64 24
  br label %._crit_edge3

._crit_edge3:                                     ; preds = %._crit_edge1, %._crit_edge
  %.sroa.3911.0 = phi i64 [ undef, %._crit_edge ], [ %.sroa.3911.2, %._crit_edge1 ]
  %.sroa.4912.0 = phi i32 [ undef, %._crit_edge ], [ %.sroa.4912.2, %._crit_edge1 ]
  %.sroa.0910.sroa.3.sroa.0.0 = phi i32 [ undef, %._crit_edge ], [ %.sroa.0910.sroa.3.sroa.0.2, %._crit_edge1 ]
  %.01137 = phi ptr [ @i32_typ, %._crit_edge ], [ %.1, %._crit_edge1 ]
  %.sroa.0929.0 = phi i32 [ 5, %._crit_edge ], [ %.sroa.0929.1, %._crit_edge1 ]
  %.sroa.7934.sroa.0.0 = phi i128 [ undef, %._crit_edge ], [ %.sroa.7934.sroa.0.1, %._crit_edge1 ]
  %567 = icmp eq ptr %.01137, @i32_typ
  br i1 %567, label %568, label %._crit_edge1

568:                                              ; preds = %._crit_edge3
  %.sroa.0918.0.insert.ext = zext i32 %.sroa.0929.0 to i160
  %569 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0918.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %67, align 8
  %570 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %67)
  %571 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %68, align 8
  %572 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %68)
  call void %572(ptr nonnull %67, { ptr, i160 } %569) #25
  %573 = add i32 %.sroa.0929.0, 1
  %574 = icmp eq i32 %573, 9
  br i1 %574, label %575, label %._crit_edge2

575:                                              ; preds = %568
  store ptr @Animal, ptr %69, align 8
  %576 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Animal, ptr nonnull %69)
  %577 = extractvalue { i64, i64 } %576, 0
  %578 = call ptr @bump_malloc(i64 %577)
  %579 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Animal, ptr undef, ptr undef, i32 undef }, ptr %578, 1
  %580 = insertvalue { ptr, ptr, ptr, i32 } %579, ptr undef, 2
  %581 = insertvalue { ptr, ptr, ptr, i32 } %580, i32 10, 3
  store ptr @_parameterization_i32, ptr %70, align 8
  store ptr @_parameterization_f64, ptr %560, align 8
  store ptr @_parameterization_i32, ptr %561, align 8
  %582 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %70)
  %583 = call ptr @llvm.invariant.start.p0(i64 104, ptr nonnull @Animal)
  store ptr @i32_typ, ptr %71, align 8
  store ptr @f64_typ, ptr %562, align 8
  store ptr @i32_typ, ptr %563, align 8
  %584 = call ptr @behavior_wrapper(ptr nonnull @Animal_B_init_agei32_hpf64_skilli32, { ptr, ptr, ptr, i32 } %581, ptr nonnull %71)
  call void %584({ ptr, ptr, ptr, i32 } %581, { ptr, ptr, ptr, i32 } %581, ptr nonnull %70, i32 65, double 1.800000e+01, i32 23) #25
  store ptr @Animal, ptr %72, align 8
  store ptr %578, ptr %564, align 8
  store i32 10, ptr %566, align 8
  call void @set_offset(ptr nonnull %72, ptr nonnull @Animal)
  %585 = load ptr, ptr %72, align 8
  %586 = load ptr, ptr %564, align 8
  %587 = load ptr, ptr %565, align 8
  %588 = load i32, ptr %566, align 8
  %589 = ptrtoint ptr %586 to i64
  %590 = ptrtoint ptr %587 to i64
  %.sroa.0910.sroa.0.0.extract.trunc = trunc i64 %589 to i32
  %.sroa.0910.sroa.3.0.extract.shift = lshr i64 %589, 32
  %.sroa.0910.sroa.3.0.extract.trunc = trunc nuw i64 %.sroa.0910.sroa.3.0.extract.shift to i32
  br label %._crit_edge2

._crit_edge2:                                     ; preds = %575, %568
  %.01138 = phi ptr [ %585, %575 ], [ @i32_typ, %568 ]
  %.sroa.3911.1 = phi i64 [ %590, %575 ], [ %.sroa.3911.0, %568 ]
  %.sroa.4912.1 = phi i32 [ %588, %575 ], [ %.sroa.4912.0, %568 ]
  %.sroa.0910.sroa.0.0 = phi i32 [ %.sroa.0910.sroa.0.0.extract.trunc, %575 ], [ %573, %568 ]
  %.sroa.0910.sroa.3.sroa.0.1 = phi i32 [ %.sroa.0910.sroa.3.0.extract.trunc, %575 ], [ %.sroa.0910.sroa.3.sroa.0.0, %568 ]
  %.sroa.0910.sroa.3.0.insert.ext = zext i32 %.sroa.0910.sroa.3.sroa.0.1 to i64
  %.sroa.0910.sroa.3.0.insert.shift = shl nuw i64 %.sroa.0910.sroa.3.0.insert.ext, 32
  %.sroa.4912.0.insert.ext = zext i32 %.sroa.4912.1 to i160
  %.sroa.4912.0.insert.shift = shl nuw i160 %.sroa.4912.0.insert.ext, 128
  %.sroa.3911.0.insert.ext = zext i64 %.sroa.3911.1 to i160
  %.sroa.3911.0.insert.shift = shl nuw nsw i160 %.sroa.3911.0.insert.ext, 64
  %.sroa.3911.0.insert.insert = or disjoint i160 %.sroa.4912.0.insert.shift, %.sroa.3911.0.insert.shift
  %.sroa.0910.0.insert.ext = zext i64 %.sroa.0910.sroa.3.0.insert.shift to i160
  %.sroa.0910.0.insert.insert = or disjoint i160 %.sroa.3911.0.insert.insert, %.sroa.0910.0.insert.ext
  %.sroa.7934.0.extract.shift = lshr exact i160 %.sroa.0910.0.insert.insert, 32
  %.sroa.7934.0.extract.trunc = trunc nuw i160 %.sroa.7934.0.extract.shift to i128
  br label %._crit_edge1

._crit_edge1:                                     ; preds = %._crit_edge2, %._crit_edge3
  %.sroa.3911.2 = phi i64 [ %.sroa.3911.1, %._crit_edge2 ], [ %.sroa.3911.0, %._crit_edge3 ]
  %.sroa.4912.2 = phi i32 [ %.sroa.4912.1, %._crit_edge2 ], [ %.sroa.4912.0, %._crit_edge3 ]
  %.sroa.0910.sroa.3.sroa.0.2 = phi i32 [ %.sroa.0910.sroa.3.sroa.0.1, %._crit_edge2 ], [ %.sroa.0910.sroa.3.sroa.0.0, %._crit_edge3 ]
  %.1 = phi ptr [ %.01138, %._crit_edge2 ], [ %.01137, %._crit_edge3 ]
  %.sroa.0929.1 = phi i32 [ %.sroa.0910.sroa.0.0, %._crit_edge2 ], [ %.sroa.0929.0, %._crit_edge3 ]
  %.sroa.7934.sroa.0.1 = phi i128 [ %.sroa.7934.0.extract.trunc, %._crit_edge2 ], [ %.sroa.7934.sroa.0.0, %._crit_edge3 ]
  br i1 %567, label %._crit_edge3, label %591

591:                                              ; preds = %._crit_edge1
  %592 = icmp eq ptr %.1, @i32_typ
  br i1 %592, label %593, label %._crit_edge4

593:                                              ; preds = %591
  %.sroa.0886.0.insert.ext = zext i32 %.sroa.0929.1 to i160
  %594 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0886.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %73, align 8
  %595 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %73)
  %596 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %74, align 8
  %597 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %74)
  call void %597(ptr nonnull %73, { ptr, i160 } %594) #25
  br label %._crit_edge4

._crit_edge4:                                     ; preds = %593, %591
  %.2 = phi ptr [ @i32_typ, %593 ], [ %.1, %591 ]
  %.sroa.7934.sroa.0.2 = phi i128 [ 0, %593 ], [ %.sroa.7934.sroa.0.1, %591 ]
  %598 = getelementptr i8, ptr %.2, i64 8
  %599 = getelementptr i8, ptr %.2, i64 16
  %600 = getelementptr i8, ptr %.2, i64 24
  %601 = getelementptr i8, ptr %.2, i64 32
  %602 = load i64, ptr %598, align 4
  %603 = load i64, ptr %599, align 4
  %604 = load ptr, ptr %600, align 8
  %605 = load ptr, ptr %601, align 8
  %606 = call i1 @subtype_test_wrapper(ptr %604, i64 %603, i64 %602, i64 1075018126824711487, i64 ptrtoint (ptr @Animal to i64), ptr %605)
  br i1 %606, label %607, label %._crit_edge5

607:                                              ; preds = %._crit_edge4
  store ptr %.2, ptr %75, align 8
  %608 = getelementptr inbounds i8, ptr %75, i64 8
  %.sroa.7934.0.insert.ext = zext i128 %.sroa.7934.sroa.0.2 to i160
  %.sroa.7934.0.insert.shift = shl nuw i160 %.sroa.7934.0.insert.ext, 32
  %.sroa.0929.0.insert.ext = zext i32 %.sroa.0929.1 to i160
  %.sroa.0929.0.insert.insert = or disjoint i160 %.sroa.7934.0.insert.shift, %.sroa.0929.0.insert.ext
  store i160 %.sroa.0929.0.insert.insert, ptr %608, align 8
  call void @set_offset(ptr nonnull %75, ptr nonnull @Animal)
  %609 = load ptr, ptr %75, align 8
  %610 = load ptr, ptr %608, align 8
  %611 = getelementptr inbounds i8, ptr %75, i64 16
  %612 = load ptr, ptr %611, align 8
  %613 = getelementptr inbounds i8, ptr %75, i64 24
  %614 = load i32, ptr %613, align 8
  call void @llvm.lifetime.start.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.start.p0(i64 32, ptr nonnull %6)
  store ptr %609, ptr %6, align 8
  %615 = getelementptr inbounds i8, ptr %6, i64 8
  store ptr %610, ptr %615, align 8
  %616 = getelementptr inbounds i8, ptr %6, i64 16
  store ptr %612, ptr %616, align 8
  %617 = getelementptr inbounds i8, ptr %6, i64 24
  store i32 %614, ptr %617, align 8
  call void @set_offset(ptr nonnull %6, ptr nonnull @Animal)
  %618 = load ptr, ptr %6, align 8
  %619 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %618, 0
  %620 = load ptr, ptr %615, align 8
  %621 = insertvalue { ptr, ptr, ptr, i32 } %619, ptr %620, 1
  %622 = load ptr, ptr %616, align 8
  %623 = insertvalue { ptr, ptr, ptr, i32 } %621, ptr %622, 2
  %624 = load i32, ptr %617, align 8
  %625 = insertvalue { ptr, ptr, ptr, i32 } %623, i32 %624, 3
  %626 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %627 = call ptr @llvm.invariant.start.p0(i64 104, ptr %618)
  %628 = sext i32 %624 to i64
  %629 = getelementptr ptr, ptr %618, i64 %628
  %630 = getelementptr i8, ptr %629, i64 32
  %631 = load ptr, ptr %630, align 8
  %632 = call ptr @behavior_wrapper(ptr %631, { ptr, ptr, ptr, i32 } %625, ptr nonnull %0)
  call void %632({ ptr, ptr, ptr, i32 } %625, { ptr, ptr, ptr, i32 } %625, ptr nonnull %0) #25
  call void @llvm.lifetime.end.p0(i64 0, ptr nonnull %0)
  call void @llvm.lifetime.end.p0(i64 32, ptr nonnull %6)
  br label %._crit_edge5

._crit_edge5:                                     ; preds = %607, %._crit_edge4
  %633 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %634 = call ptr @llvm.invariant.start.p0(i64 104, ptr %365)
  %635 = getelementptr i8, ptr %555, i64 40
  %636 = load ptr, ptr %635, align 8
  %637 = call ptr @behavior_wrapper(ptr %636, { ptr, ptr, ptr, i32 } %551, ptr nonnull %0)
  call void %637({ ptr, ptr, ptr, i32 } %551, { ptr, ptr, ptr, i32 } %551, ptr nonnull %0) #25
  store ptr @ListNode, ptr %76, align 8
  %638 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ListNode, ptr nonnull %76)
  %639 = extractvalue { i64, i64 } %638, 0
  %640 = call ptr @bump_malloc(i64 %639)
  %641 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ListNode, ptr undef, ptr undef, i32 undef }, ptr %640, 1
  %642 = insertvalue { ptr, ptr, ptr, i32 } %641, ptr undef, 2
  %643 = insertvalue { ptr, ptr, ptr, i32 } %642, i32 10, 3
  store ptr @_parameterization_i32, ptr %77, align 8
  %644 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %77)
  %645 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @ListNode)
  store ptr @i32_typ, ptr %78, align 8
  %646 = call ptr @behavior_wrapper(ptr nonnull @ListNode_B_init_datai32, { ptr, ptr, ptr, i32 } %643, ptr nonnull %78)
  call void %646({ ptr, ptr, ptr, i32 } %643, { ptr, ptr, ptr, i32 } %643, ptr nonnull %77, i32 0) #25
  store ptr @ListNode, ptr %79, align 8
  %647 = getelementptr inbounds i8, ptr %79, i64 8
  store ptr %640, ptr %647, align 8
  %648 = getelementptr inbounds i8, ptr %79, i64 16
  %649 = getelementptr inbounds i8, ptr %79, i64 24
  store i32 10, ptr %649, align 8
  call void @set_offset(ptr nonnull %79, ptr nonnull @ListNode)
  %650 = load ptr, ptr %79, align 8
  %651 = load ptr, ptr %647, align 8
  %652 = load ptr, ptr %648, align 8
  %653 = load i32, ptr %649, align 8
  store ptr %650, ptr %80, align 8
  %654 = getelementptr inbounds i8, ptr %80, i64 8
  store ptr %651, ptr %654, align 8
  %655 = getelementptr inbounds i8, ptr %80, i64 16
  store ptr %652, ptr %655, align 8
  %656 = getelementptr inbounds i8, ptr %80, i64 24
  store i32 %653, ptr %656, align 8
  call void @set_offset(ptr nonnull %80, ptr nonnull @ListNode)
  %657 = load ptr, ptr %80, align 8
  %658 = load ptr, ptr %654, align 8
  %659 = load ptr, ptr %655, align 8
  %660 = load i32, ptr %656, align 8
  store ptr @Range, ptr %81, align 8
  %661 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Range, ptr nonnull %81)
  %662 = extractvalue { i64, i64 } %661, 0
  %663 = call ptr @bump_malloc(i64 %662)
  %664 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Range, ptr undef, ptr undef, i32 undef }, ptr %663, 1
  %665 = insertvalue { ptr, ptr, ptr, i32 } %664, ptr undef, 2
  %666 = insertvalue { ptr, ptr, ptr, i32 } %665, i32 10, 3
  store ptr @_parameterization_i32, ptr %82, align 8
  %667 = getelementptr inbounds i8, ptr %82, i64 8
  store ptr @_parameterization_i32, ptr %667, align 8
  %668 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %82)
  %669 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  store ptr @i32_typ, ptr %83, align 8
  %670 = getelementptr inbounds i8, ptr %83, i64 8
  store ptr @i32_typ, ptr %670, align 8
  %671 = call ptr @behavior_wrapper(ptr nonnull @Range_B_init_starti32_endi32, { ptr, ptr, ptr, i32 } %666, ptr nonnull %83)
  call void %671({ ptr, ptr, ptr, i32 } %666, { ptr, ptr, ptr, i32 } %666, ptr nonnull %82, i32 1, i32 10) #25
  %672 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %673 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  %674 = call ptr @behavior_wrapper(ptr nonnull @Range_B_iterator_, { ptr, ptr, ptr, i32 } %666, ptr nonnull %0)
  %675 = call { ptr, ptr, ptr, i32 } %674({ ptr, ptr, ptr, i32 } %666, { ptr, ptr, ptr, i32 } %666, ptr nonnull %0) #25
  %.fca.0.extract836 = extractvalue { ptr, ptr, ptr, i32 } %675, 0
  %.fca.1.extract838 = extractvalue { ptr, ptr, ptr, i32 } %675, 1
  %.fca.2.extract840 = extractvalue { ptr, ptr, ptr, i32 } %675, 2
  %.fca.3.extract841 = extractvalue { ptr, ptr, ptr, i32 } %675, 3
  store ptr %.fca.0.extract836, ptr %84, align 8
  %676 = getelementptr inbounds i8, ptr %84, i64 8
  store ptr %.fca.1.extract838, ptr %676, align 8
  %677 = getelementptr inbounds i8, ptr %84, i64 16
  store ptr %.fca.2.extract840, ptr %677, align 8
  %678 = getelementptr inbounds i8, ptr %84, i64 24
  store i32 %.fca.3.extract841, ptr %678, align 8
  call void @set_offset(ptr nonnull %84, ptr nonnull @RangeIterator)
  %679 = load ptr, ptr %84, align 8
  store ptr %679, ptr %85, align 8
  %680 = getelementptr inbounds i8, ptr %85, i64 8
  %681 = load ptr, ptr %676, align 8
  store ptr %681, ptr %680, align 8
  %682 = getelementptr inbounds i8, ptr %85, i64 16
  %683 = load ptr, ptr %677, align 8
  store ptr %683, ptr %682, align 8
  %684 = getelementptr inbounds i8, ptr %85, i64 24
  %685 = load i32, ptr %678, align 8
  store i32 %685, ptr %684, align 8
  call void @set_offset(ptr nonnull %85, ptr nonnull @RangeIterator)
  %686 = load ptr, ptr %85, align 8
  %687 = load ptr, ptr %680, align 8
  %688 = load ptr, ptr %682, align 8
  %689 = load i32, ptr %684, align 8
  %690 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %686, 0
  %691 = insertvalue { ptr, ptr, ptr, i32 } %690, ptr %687, 1
  %692 = insertvalue { ptr, ptr, ptr, i32 } %691, ptr %688, 2
  %693 = insertvalue { ptr, ptr, ptr, i32 } %692, i32 %689, 3
  %694 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %695 = call ptr @llvm.invariant.start.p0(i64 88, ptr %686)
  %696 = sext i32 %689 to i64
  %697 = getelementptr ptr, ptr %686, i64 %696
  %698 = getelementptr i8, ptr %697, i64 40
  %699 = getelementptr inbounds i8, ptr %89, i64 8
  %700 = getelementptr inbounds i8, ptr %89, i64 16
  %701 = getelementptr inbounds i8, ptr %89, i64 24
  %702 = getelementptr inbounds i8, ptr %92, i64 8
  %703 = getelementptr inbounds i8, ptr %92, i64 16
  %704 = getelementptr inbounds i8, ptr %92, i64 24
  %705 = getelementptr inbounds i8, ptr %93, i64 8
  %706 = getelementptr inbounds i8, ptr %93, i64 16
  %707 = getelementptr inbounds i8, ptr %93, i64 24
  br label %._crit_edge7

._crit_edge7:                                     ; preds = %._crit_edge6, %._crit_edge5
  %.01145 = phi ptr [ %657, %._crit_edge5 ], [ %.11146, %._crit_edge6 ]
  %.01143 = phi ptr [ %658, %._crit_edge5 ], [ %.11144, %._crit_edge6 ]
  %.01141 = phi ptr [ %659, %._crit_edge5 ], [ %.11142, %._crit_edge6 ]
  %.01139 = phi i32 [ %660, %._crit_edge5 ], [ %.11140, %._crit_edge6 ]
  %708 = load ptr, ptr %698, align 8
  %709 = call ptr @behavior_wrapper(ptr %708, { ptr, ptr, ptr, i32 } %693, ptr nonnull %0)
  %710 = call { ptr, i160 } %709({ ptr, ptr, ptr, i32 } %693, { ptr, ptr, ptr, i32 } %693, ptr nonnull %0) #25
  %.fca.0.extract828 = extractvalue { ptr, i160 } %710, 0
  %711 = icmp ne ptr %.fca.0.extract828, @nil_typ
  %712 = icmp ne ptr %.fca.0.extract828, null
  %.not1152 = and i1 %711, %712
  br i1 %.not1152, label %713, label %._crit_edge6

713:                                              ; preds = %._crit_edge7
  %.fca.1.extract830 = extractvalue { ptr, i160 } %710, 1
  %.sroa.11189.8.extract.trunc = trunc i160 %.fca.1.extract830 to i32
  store ptr @ListNode, ptr %86, align 8
  %714 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_ListNode, ptr nonnull %86)
  %715 = extractvalue { i64, i64 } %714, 0
  %716 = call ptr @bump_malloc(i64 %715)
  %717 = insertvalue { ptr, ptr, ptr, i32 } { ptr @ListNode, ptr undef, ptr undef, i32 undef }, ptr %716, 1
  %718 = insertvalue { ptr, ptr, ptr, i32 } %717, ptr undef, 2
  %719 = insertvalue { ptr, ptr, ptr, i32 } %718, i32 10, 3
  store ptr @_parameterization_i32, ptr %87, align 8
  %720 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %87)
  %721 = call ptr @llvm.invariant.start.p0(i64 96, ptr nonnull @ListNode)
  store ptr @i32_typ, ptr %88, align 8
  %722 = call ptr @behavior_wrapper(ptr nonnull @ListNode_B_init_datai32, { ptr, ptr, ptr, i32 } %719, ptr nonnull %88)
  call void %722({ ptr, ptr, ptr, i32 } %719, { ptr, ptr, ptr, i32 } %719, ptr nonnull %87, i32 %.sroa.11189.8.extract.trunc) #25
  store ptr @ListNode, ptr %89, align 8
  store ptr %716, ptr %699, align 8
  store i32 10, ptr %701, align 8
  call void @set_offset(ptr nonnull %89, ptr nonnull @ListNode)
  %723 = load ptr, ptr %89, align 8
  %724 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %723, 0
  %725 = load ptr, ptr %699, align 8
  %726 = insertvalue { ptr, ptr, ptr, i32 } %724, ptr %725, 1
  %727 = load ptr, ptr %700, align 8
  %728 = insertvalue { ptr, ptr, ptr, i32 } %726, ptr %727, 2
  %729 = load i32, ptr %701, align 8
  %730 = insertvalue { ptr, ptr, ptr, i32 } %728, i32 %729, 3
  %731 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %.01145, 0
  %732 = insertvalue { ptr, ptr, ptr, i32 } %731, ptr %.01143, 1
  %733 = insertvalue { ptr, ptr, ptr, i32 } %732, ptr %.01141, 2
  %734 = insertvalue { ptr, ptr, ptr, i32 } %733, i32 %.01139, 3
  store ptr @_parameterization_ListNode, ptr %90, align 8
  %735 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %90)
  %736 = call ptr @llvm.invariant.start.p0(i64 96, ptr %.01145)
  %737 = sext i32 %.01139 to i64
  %738 = getelementptr ptr, ptr %.01145, i64 %737
  %739 = getelementptr i8, ptr %738, i64 24
  %740 = load ptr, ptr %739, align 8
  store ptr %723, ptr %91, align 8
  %741 = call ptr @behavior_wrapper(ptr %740, { ptr, ptr, ptr, i32 } %734, ptr nonnull %91)
  %742 = call { ptr, ptr, ptr, i32 } %741({ ptr, ptr, ptr, i32 } %734, { ptr, ptr, ptr, i32 } %734, ptr nonnull %90, { ptr, ptr, ptr, i32 } %730) #25
  %.fca.0.extract801 = extractvalue { ptr, ptr, ptr, i32 } %742, 0
  %.fca.1.extract803 = extractvalue { ptr, ptr, ptr, i32 } %742, 1
  %.fca.2.extract805 = extractvalue { ptr, ptr, ptr, i32 } %742, 2
  %.fca.3.extract806 = extractvalue { ptr, ptr, ptr, i32 } %742, 3
  store ptr %.fca.0.extract801, ptr %92, align 8
  store ptr %.fca.1.extract803, ptr %702, align 8
  store ptr %.fca.2.extract805, ptr %703, align 8
  store i32 %.fca.3.extract806, ptr %704, align 8
  call void @set_offset(ptr nonnull %92, ptr nonnull @ListNode)
  %743 = load ptr, ptr %92, align 8
  store ptr %743, ptr %93, align 8
  %744 = load ptr, ptr %702, align 8
  store ptr %744, ptr %705, align 8
  %745 = load ptr, ptr %703, align 8
  store ptr %745, ptr %706, align 8
  %746 = load i32, ptr %704, align 8
  store i32 %746, ptr %707, align 8
  call void @set_offset(ptr nonnull %93, ptr nonnull @ListNode)
  %747 = load ptr, ptr %93, align 8
  %748 = load ptr, ptr %705, align 8
  %749 = load ptr, ptr %706, align 8
  %750 = load i32, ptr %707, align 8
  br label %._crit_edge6

._crit_edge6:                                     ; preds = %713, %._crit_edge7
  %.11146 = phi ptr [ %747, %713 ], [ %.01145, %._crit_edge7 ]
  %.11144 = phi ptr [ %748, %713 ], [ %.01143, %._crit_edge7 ]
  %.11142 = phi ptr [ %749, %713 ], [ %.01141, %._crit_edge7 ]
  %.11140 = phi i32 [ %750, %713 ], [ %.01139, %._crit_edge7 ]
  br i1 %.not1152, label %._crit_edge7, label %751

751:                                              ; preds = %._crit_edge6
  %752 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %650, 0
  %753 = insertvalue { ptr, ptr, ptr, i32 } %752, ptr %651, 1
  %754 = insertvalue { ptr, ptr, ptr, i32 } %753, ptr %652, 2
  %755 = insertvalue { ptr, ptr, ptr, i32 } %754, i32 %653, 3
  %756 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %757 = call ptr @llvm.invariant.start.p0(i64 96, ptr %650)
  %758 = sext i32 %653 to i64
  %759 = getelementptr ptr, ptr %650, i64 %758
  %760 = getelementptr i8, ptr %759, i64 40
  %761 = load ptr, ptr %760, align 8
  %762 = call ptr @behavior_wrapper(ptr %761, { ptr, ptr, ptr, i32 } %755, ptr nonnull %0)
  %763 = call i32 %762({ ptr, ptr, ptr, i32 } %755, { ptr, ptr, ptr, i32 } %755, ptr nonnull %0) #25
  %.sroa.0798.0.insert.ext = zext i32 %763 to i160
  %764 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0798.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %94, align 8
  %765 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %94)
  %766 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %95, align 8
  %767 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %95)
  call void %767(ptr nonnull %94, { ptr, i160 } %764) #25
  %768 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %769 = call ptr @llvm.invariant.start.p0(i64 96, ptr %650)
  %770 = getelementptr i8, ptr %759, i64 48
  %771 = load ptr, ptr %770, align 8
  %772 = call ptr @behavior_wrapper(ptr %771, { ptr, ptr, ptr, i32 } %755, ptr nonnull %0)
  %773 = call { ptr, ptr, ptr, i32 } %772({ ptr, ptr, ptr, i32 } %755, { ptr, ptr, ptr, i32 } %755, ptr nonnull %0) #25
  %.fca.0.extract787 = extractvalue { ptr, ptr, ptr, i32 } %773, 0
  %.fca.1.extract789 = extractvalue { ptr, ptr, ptr, i32 } %773, 1
  %.fca.2.extract791 = extractvalue { ptr, ptr, ptr, i32 } %773, 2
  %.fca.3.extract792 = extractvalue { ptr, ptr, ptr, i32 } %773, 3
  store ptr %.fca.0.extract787, ptr %96, align 8
  %774 = getelementptr inbounds i8, ptr %96, i64 8
  store ptr %.fca.1.extract789, ptr %774, align 8
  %775 = getelementptr inbounds i8, ptr %96, i64 16
  store ptr %.fca.2.extract791, ptr %775, align 8
  %776 = getelementptr inbounds i8, ptr %96, i64 24
  store i32 %.fca.3.extract792, ptr %776, align 8
  call void @set_offset(ptr nonnull %96, ptr nonnull @ListIterator)
  %777 = load ptr, ptr %96, align 8
  store ptr %777, ptr %97, align 8
  %778 = getelementptr inbounds i8, ptr %97, i64 8
  %779 = load ptr, ptr %774, align 8
  store ptr %779, ptr %778, align 8
  %780 = getelementptr inbounds i8, ptr %97, i64 16
  %781 = load ptr, ptr %775, align 8
  store ptr %781, ptr %780, align 8
  %782 = getelementptr inbounds i8, ptr %97, i64 24
  %783 = load i32, ptr %776, align 8
  store i32 %783, ptr %782, align 8
  call void @set_offset(ptr nonnull %97, ptr nonnull @ListIterator)
  %784 = load ptr, ptr %97, align 8
  %785 = load ptr, ptr %778, align 8
  %786 = load ptr, ptr %780, align 8
  %787 = load i32, ptr %782, align 8
  %788 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %784, 0
  %789 = insertvalue { ptr, ptr, ptr, i32 } %788, ptr %785, 1
  %790 = insertvalue { ptr, ptr, ptr, i32 } %789, ptr %786, 2
  %791 = insertvalue { ptr, ptr, ptr, i32 } %790, i32 %787, 3
  %792 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %793 = call ptr @llvm.invariant.start.p0(i64 40, ptr %784)
  %794 = sext i32 %787 to i64
  %795 = getelementptr ptr, ptr %784, i64 %794
  %796 = getelementptr i8, ptr %795, i64 16
  %797 = load ptr, ptr %796, align 8
  %798 = call ptr @behavior_wrapper(ptr %797, { ptr, ptr, ptr, i32 } %791, ptr nonnull %0)
  %799 = call { ptr, i160 } %798({ ptr, ptr, ptr, i32 } %791, { ptr, ptr, ptr, i32 } %791, ptr nonnull %0) #25
  %.fca.0.extract7711211 = extractvalue { ptr, i160 } %799, 0
  %800 = icmp ne ptr %.fca.0.extract7711211, @nil_typ
  %801 = icmp ne ptr %.fca.0.extract7711211, null
  %.not11541212 = and i1 %800, %801
  br i1 %.not11541212, label %._crit_edge8.lr.ph, label %.critedge

._crit_edge8.lr.ph:                               ; preds = %751
  %802 = getelementptr inbounds i8, ptr %98, i64 8
  %.sroa_idx776 = getelementptr inbounds i8, ptr %98, i64 16
  %.sroa_idx777 = getelementptr inbounds i8, ptr %98, i64 24
  %803 = getelementptr inbounds i8, ptr %101, i64 8
  %804 = getelementptr inbounds i8, ptr %101, i64 16
  %805 = getelementptr inbounds i8, ptr %101, i64 24
  br label %._crit_edge8

._crit_edge8:                                     ; preds = %._crit_edge8, %._crit_edge8.lr.ph
  %.fca.0.extract7711213 = phi ptr [ %.fca.0.extract7711211, %._crit_edge8.lr.ph ], [ %.fca.0.extract771, %._crit_edge8 ]
  %806 = phi { ptr, i160 } [ %799, %._crit_edge8.lr.ph ], [ %833, %._crit_edge8 ]
  %.fca.1.extract773 = extractvalue { ptr, i160 } %806, 1
  %.sroa.9782.8.extract.shift = lshr i160 %.fca.1.extract773, 128
  %.sroa.9782.8.extract.trunc = trunc nuw i160 %.sroa.9782.8.extract.shift to i32
  %.sroa.7781.8.extract.shift = lshr i160 %.fca.1.extract773, 64
  %.sroa.7781.8.extract.trunc = trunc i160 %.sroa.7781.8.extract.shift to i64
  %.sroa.4780.8.extract.trunc = trunc i160 %.fca.1.extract773 to i64
  store ptr %.fca.0.extract7711213, ptr %98, align 8
  store i64 %.sroa.4780.8.extract.trunc, ptr %802, align 8
  store i64 %.sroa.7781.8.extract.trunc, ptr %.sroa_idx776, align 8
  store i32 %.sroa.9782.8.extract.trunc, ptr %.sroa_idx777, align 8
  call void @set_offset(ptr nonnull %98, ptr nonnull @ListNode)
  %807 = load ptr, ptr %98, align 8
  %808 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %807, 0
  %809 = load ptr, ptr %802, align 8
  %810 = insertvalue { ptr, ptr, ptr, i32 } %808, ptr %809, 1
  %811 = load ptr, ptr %.sroa_idx776, align 8
  %812 = insertvalue { ptr, ptr, ptr, i32 } %810, ptr %811, 2
  %813 = load i32, ptr %.sroa_idx777, align 8
  %814 = insertvalue { ptr, ptr, ptr, i32 } %812, i32 %813, 3
  %815 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %816 = call ptr @llvm.invariant.start.p0(i64 96, ptr %807)
  %817 = sext i32 %813 to i64
  %818 = getelementptr ptr, ptr %807, i64 %817
  %819 = getelementptr i8, ptr %818, i64 40
  %820 = load ptr, ptr %819, align 8
  %821 = call ptr @behavior_wrapper(ptr %820, { ptr, ptr, ptr, i32 } %814, ptr nonnull %0)
  %822 = call i32 %821({ ptr, ptr, ptr, i32 } %814, { ptr, ptr, ptr, i32 } %814, ptr nonnull %0) #25
  %.sroa.0767.0.insert.ext = zext i32 %822 to i160
  %823 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0767.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %99, align 8
  %824 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %99)
  %825 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %100, align 8
  %826 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %100)
  call void %826(ptr nonnull %99, { ptr, i160 } %823) #25
  %827 = load ptr, ptr %98, align 8
  store ptr %827, ptr %101, align 8
  %828 = load ptr, ptr %802, align 8
  store ptr %828, ptr %803, align 8
  %829 = load ptr, ptr %.sroa_idx776, align 8
  store ptr %829, ptr %804, align 8
  %830 = load i32, ptr %.sroa_idx777, align 8
  store i32 %830, ptr %805, align 8
  call void @set_offset(ptr nonnull %101, ptr nonnull @ListNode)
  %831 = load ptr, ptr %796, align 8
  %832 = call ptr @behavior_wrapper(ptr %831, { ptr, ptr, ptr, i32 } %791, ptr nonnull %0)
  %833 = call { ptr, i160 } %832({ ptr, ptr, ptr, i32 } %791, { ptr, ptr, ptr, i32 } %791, ptr nonnull %0) #25
  %.fca.0.extract771 = extractvalue { ptr, i160 } %833, 0
  %834 = icmp ne ptr %.fca.0.extract771, @nil_typ
  %835 = icmp ne ptr %.fca.0.extract771, null
  %.not1154 = and i1 %834, %835
  br i1 %.not1154, label %._crit_edge8, label %.critedge

.critedge:                                        ; preds = %._crit_edge8, %751
  %836 = call ptr @coroutine_create(ptr nonnull @print88, ptr nonnull @coroutine_uypqufbuwa_passer)
  call void @coroutine_call(ptr %836)
  store ptr @_parameterization_i32, ptr %102, align 8
  %837 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %102)
  %838 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %103, align 8
  %839 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %103)
  call void %839(ptr nonnull %102, { ptr, i160 } { ptr @i32_typ, i160 89 }) #25
  call void @coroutine_call(ptr %836)
  store ptr @Range, ptr %104, align 8
  %840 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Range, ptr nonnull %104)
  %841 = extractvalue { i64, i64 } %840, 0
  %842 = call ptr @bump_malloc(i64 %841)
  %843 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Range, ptr undef, ptr undef, i32 undef }, ptr %842, 1
  %844 = insertvalue { ptr, ptr, ptr, i32 } %843, ptr undef, 2
  %845 = insertvalue { ptr, ptr, ptr, i32 } %844, i32 10, 3
  store ptr @_parameterization_i32, ptr %105, align 8
  %846 = getelementptr inbounds i8, ptr %105, i64 8
  store ptr @_parameterization_i32, ptr %846, align 8
  %847 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %105)
  %848 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  store ptr @i32_typ, ptr %106, align 8
  %849 = getelementptr inbounds i8, ptr %106, i64 8
  store ptr @i32_typ, ptr %849, align 8
  %850 = call ptr @behavior_wrapper(ptr nonnull @Range_B_init_starti32_endi32, { ptr, ptr, ptr, i32 } %845, ptr nonnull %106)
  call void %850({ ptr, ptr, ptr, i32 } %845, { ptr, ptr, ptr, i32 } %845, ptr nonnull %105, i32 1, i32 10) #25
  %851 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %852 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  %853 = call ptr @behavior_wrapper(ptr nonnull @Range_B_iterator_, { ptr, ptr, ptr, i32 } %845, ptr nonnull %0)
  %854 = call { ptr, ptr, ptr, i32 } %853({ ptr, ptr, ptr, i32 } %845, { ptr, ptr, ptr, i32 } %845, ptr nonnull %0) #25
  %.fca.0.extract726 = extractvalue { ptr, ptr, ptr, i32 } %854, 0
  %.fca.1.extract728 = extractvalue { ptr, ptr, ptr, i32 } %854, 1
  %.fca.2.extract730 = extractvalue { ptr, ptr, ptr, i32 } %854, 2
  %.fca.3.extract731 = extractvalue { ptr, ptr, ptr, i32 } %854, 3
  store ptr %.fca.0.extract726, ptr %107, align 8
  %855 = getelementptr inbounds i8, ptr %107, i64 8
  store ptr %.fca.1.extract728, ptr %855, align 8
  %856 = getelementptr inbounds i8, ptr %107, i64 16
  store ptr %.fca.2.extract730, ptr %856, align 8
  %857 = getelementptr inbounds i8, ptr %107, i64 24
  store i32 %.fca.3.extract731, ptr %857, align 8
  call void @set_offset(ptr nonnull %107, ptr nonnull @RangeIterator)
  %858 = load ptr, ptr %107, align 8
  store ptr %858, ptr %108, align 8
  %859 = getelementptr inbounds i8, ptr %108, i64 8
  %860 = load ptr, ptr %855, align 8
  store ptr %860, ptr %859, align 8
  %861 = getelementptr inbounds i8, ptr %108, i64 16
  %862 = load ptr, ptr %856, align 8
  store ptr %862, ptr %861, align 8
  %863 = getelementptr inbounds i8, ptr %108, i64 24
  %864 = load i32, ptr %857, align 8
  store i32 %864, ptr %863, align 8
  call void @set_offset(ptr nonnull %108, ptr nonnull @RangeIterator)
  %865 = load ptr, ptr %108, align 8
  %866 = load ptr, ptr %859, align 8
  %867 = load ptr, ptr %861, align 8
  %868 = load i32, ptr %863, align 8
  %869 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %865, 0
  %870 = insertvalue { ptr, ptr, ptr, i32 } %869, ptr %866, 1
  %871 = insertvalue { ptr, ptr, ptr, i32 } %870, ptr %867, 2
  %872 = insertvalue { ptr, ptr, ptr, i32 } %871, i32 %868, 3
  %873 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %874 = call ptr @llvm.invariant.start.p0(i64 88, ptr %865)
  %875 = sext i32 %868 to i64
  %876 = getelementptr ptr, ptr %865, i64 %875
  %877 = getelementptr i8, ptr %876, i64 40
  %878 = load ptr, ptr %877, align 8
  %879 = call ptr @behavior_wrapper(ptr %878, { ptr, ptr, ptr, i32 } %872, ptr nonnull %0)
  %880 = call { ptr, i160 } %879({ ptr, ptr, ptr, i32 } %872, { ptr, ptr, ptr, i32 } %872, ptr nonnull %0) #25
  %.fca.0.extract7181214 = extractvalue { ptr, i160 } %880, 0
  %.fca.1.extract7201215 = extractvalue { ptr, i160 } %880, 1
  %.sroa.11184.8.extract.trunc1216 = trunc i160 %.fca.1.extract7201215 to i32
  %881 = icmp ne ptr %.fca.0.extract7181214, @nil_typ
  %882 = icmp ne ptr %.fca.0.extract7181214, null
  %.not11561217 = and i1 %881, %882
  %883 = icmp ne i32 %.sroa.11184.8.extract.trunc1216, 5
  %or.cond1218 = select i1 %.not11561217, i1 %883, i1 false
  br i1 %or.cond1218, label %._crit_edge10, label %.critedge1166

._crit_edge10:                                    ; preds = %._crit_edge10, %.critedge
  %.fca.1.extract7201219 = phi i160 [ %.fca.1.extract720, %._crit_edge10 ], [ %.fca.1.extract7201215, %.critedge ]
  %.sroa.0704.0.insert.ext = and i160 %.fca.1.extract7201219, 4294967295
  %884 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0704.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %109, align 8
  %885 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %109)
  %886 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %110, align 8
  %887 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %110)
  call void %887(ptr nonnull %109, { ptr, i160 } %884) #25
  %888 = load ptr, ptr %877, align 8
  %889 = call ptr @behavior_wrapper(ptr %888, { ptr, ptr, ptr, i32 } %872, ptr nonnull %0)
  %890 = call { ptr, i160 } %889({ ptr, ptr, ptr, i32 } %872, { ptr, ptr, ptr, i32 } %872, ptr nonnull %0) #25
  %.fca.0.extract718 = extractvalue { ptr, i160 } %890, 0
  %.fca.1.extract720 = extractvalue { ptr, i160 } %890, 1
  %.sroa.11184.8.extract.trunc = trunc i160 %.fca.1.extract720 to i32
  %891 = icmp ne ptr %.fca.0.extract718, @nil_typ
  %892 = icmp ne ptr %.fca.0.extract718, null
  %.not1156 = and i1 %891, %892
  %893 = icmp ne i32 %.sroa.11184.8.extract.trunc, 5
  %or.cond = select i1 %.not1156, i1 %893, i1 false
  br i1 %or.cond, label %._crit_edge10, label %.critedge1166

.critedge1166:                                    ; preds = %._crit_edge10, %.critedge
  %894 = call ptr @bump_malloc(i64 20)
  store i32 1, ptr %894, align 4
  %895 = getelementptr i8, ptr %894, i64 4
  store i32 2, ptr %895, align 4
  %896 = getelementptr i8, ptr %894, i64 8
  store i32 3, ptr %896, align 4
  %897 = getelementptr i8, ptr %894, i64 12
  store i32 4, ptr %897, align 4
  store ptr @Array, ptr %111, align 8
  %898 = getelementptr inbounds i8, ptr %111, i64 8
  store ptr @_parameterization_i32, ptr %898, align 8
  %899 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Array, ptr nonnull %111)
  %900 = extractvalue { i64, i64 } %899, 0
  %901 = call ptr @bump_malloc(i64 %900)
  store ptr @_parameterization_i32, ptr %901, align 8
  %902 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %901)
  %903 = insertvalue { ptr } undef, ptr %894, 0
  %904 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %901, 1
  %905 = insertvalue { ptr, ptr, ptr, i32 } %904, ptr undef, 2
  %906 = insertvalue { ptr, ptr, ptr, i32 } %905, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %112, align 8
  %907 = getelementptr inbounds i8, ptr %112, i64 8
  store ptr @_parameterization_i32, ptr %907, align 8
  %908 = getelementptr inbounds i8, ptr %112, i64 16
  store ptr @_parameterization_i32, ptr %908, align 8
  %909 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %112)
  %910 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %113, align 8
  %911 = getelementptr inbounds i8, ptr %113, i64 8
  store ptr @i32_typ, ptr %911, align 8
  %912 = getelementptr inbounds i8, ptr %113, i64 16
  store ptr @i32_typ, ptr %912, align 8
  %913 = call ptr @behavior_wrapper(ptr nonnull @Array_B_init_bufferBufferT_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %906, ptr nonnull %113)
  call void %913({ ptr, ptr, ptr, i32 } %906, { ptr, ptr, ptr, i32 } %906, ptr nonnull %112, { ptr } %903, i32 4, i32 5) #25
  store ptr @Array, ptr %114, align 8
  %914 = getelementptr inbounds i8, ptr %114, i64 8
  store ptr %901, ptr %914, align 8
  %915 = getelementptr inbounds i8, ptr %114, i64 16
  %916 = getelementptr inbounds i8, ptr %114, i64 24
  store i32 10, ptr %916, align 8
  call void @set_offset(ptr nonnull %114, ptr nonnull @Array)
  %917 = load ptr, ptr %114, align 8
  %918 = load ptr, ptr %914, align 8
  %919 = load ptr, ptr %915, align 8
  %920 = load i32, ptr %916, align 8
  %921 = call ptr @bump_malloc(i64 28)
  store i32 5, ptr %921, align 4
  %922 = getelementptr i8, ptr %921, i64 4
  store i32 6, ptr %922, align 4
  %923 = getelementptr i8, ptr %921, i64 8
  store i32 7, ptr %923, align 4
  %924 = getelementptr i8, ptr %921, i64 12
  store i32 8, ptr %924, align 4
  %925 = getelementptr i8, ptr %921, i64 16
  store i32 9, ptr %925, align 4
  %926 = getelementptr i8, ptr %921, i64 20
  store i32 10, ptr %926, align 4
  store ptr @Array, ptr %115, align 8
  %927 = getelementptr inbounds i8, ptr %115, i64 8
  store ptr @_parameterization_i32, ptr %927, align 8
  %928 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Array, ptr nonnull %115)
  %929 = extractvalue { i64, i64 } %928, 0
  %930 = call ptr @bump_malloc(i64 %929)
  store ptr @_parameterization_i32, ptr %930, align 8
  %931 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %930)
  %932 = insertvalue { ptr } undef, ptr %921, 0
  %933 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %930, 1
  %934 = insertvalue { ptr, ptr, ptr, i32 } %933, ptr undef, 2
  %935 = insertvalue { ptr, ptr, ptr, i32 } %934, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %116, align 8
  %936 = getelementptr inbounds i8, ptr %116, i64 8
  store ptr @_parameterization_i32, ptr %936, align 8
  %937 = getelementptr inbounds i8, ptr %116, i64 16
  store ptr @_parameterization_i32, ptr %937, align 8
  %938 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %116)
  %939 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %117, align 8
  %940 = getelementptr inbounds i8, ptr %117, i64 8
  store ptr @i32_typ, ptr %940, align 8
  %941 = getelementptr inbounds i8, ptr %117, i64 16
  store ptr @i32_typ, ptr %941, align 8
  %942 = call ptr @behavior_wrapper(ptr nonnull @Array_B_init_bufferBufferT_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %935, ptr nonnull %117)
  call void %942({ ptr, ptr, ptr, i32 } %935, { ptr, ptr, ptr, i32 } %935, ptr nonnull %116, { ptr } %932, i32 6, i32 7) #25
  store ptr @Array, ptr %118, align 8
  %943 = getelementptr inbounds i8, ptr %118, i64 8
  store ptr %930, ptr %943, align 8
  %944 = getelementptr inbounds i8, ptr %118, i64 16
  %945 = getelementptr inbounds i8, ptr %118, i64 24
  store i32 10, ptr %945, align 8
  call void @set_offset(ptr nonnull %118, ptr nonnull @Array)
  %946 = load ptr, ptr %118, align 8
  %947 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %946, 0
  %948 = load ptr, ptr %943, align 8
  %949 = insertvalue { ptr, ptr, ptr, i32 } %947, ptr %948, 1
  %950 = load ptr, ptr %944, align 8
  %951 = insertvalue { ptr, ptr, ptr, i32 } %949, ptr %950, 2
  %952 = load i32, ptr %945, align 8
  %953 = insertvalue { ptr, ptr, ptr, i32 } %951, i32 %952, 3
  %954 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %917, 0
  %955 = insertvalue { ptr, ptr, ptr, i32 } %954, ptr %918, 1
  %956 = insertvalue { ptr, ptr, ptr, i32 } %955, ptr %919, 2
  %957 = insertvalue { ptr, ptr, ptr, i32 } %956, i32 %920, 3
  store ptr @_parameterization_Arrayi32, ptr %119, align 8
  %958 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %119)
  %959 = call ptr @llvm.invariant.start.p0(i64 664, ptr %917)
  %960 = sext i32 %920 to i64
  %961 = getelementptr ptr, ptr %917, i64 %960
  %962 = getelementptr i8, ptr %961, i64 96
  %963 = load ptr, ptr %962, align 8
  store ptr %946, ptr %120, align 8
  %964 = call ptr @behavior_wrapper(ptr %963, { ptr, ptr, ptr, i32 } %957, ptr nonnull %120)
  %965 = call { ptr, ptr, ptr, i32 } %964({ ptr, ptr, ptr, i32 } %957, { ptr, ptr, ptr, i32 } %957, ptr nonnull %119, { ptr, ptr, ptr, i32 } %953) #25
  %.fca.0.extract624 = extractvalue { ptr, ptr, ptr, i32 } %965, 0
  %.fca.1.extract626 = extractvalue { ptr, ptr, ptr, i32 } %965, 1
  %.fca.2.extract628 = extractvalue { ptr, ptr, ptr, i32 } %965, 2
  %.fca.3.extract629 = extractvalue { ptr, ptr, ptr, i32 } %965, 3
  store ptr %.fca.0.extract624, ptr %121, align 8
  %966 = getelementptr inbounds i8, ptr %121, i64 8
  store ptr %.fca.1.extract626, ptr %966, align 8
  %967 = getelementptr inbounds i8, ptr %121, i64 16
  store ptr %.fca.2.extract628, ptr %967, align 8
  %968 = getelementptr inbounds i8, ptr %121, i64 24
  store i32 %.fca.3.extract629, ptr %968, align 8
  call void @set_offset(ptr nonnull %121, ptr nonnull @Array)
  store ptr @_parameterization_i32, ptr %122, align 8
  %969 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %122)
  %970 = call ptr @llvm.invariant.start.p0(i64 664, ptr %917)
  %971 = getelementptr i8, ptr %961, i64 112
  %972 = load ptr, ptr %971, align 8
  store ptr @i32_typ, ptr %123, align 8
  %973 = call ptr @behavior_wrapper(ptr %972, { ptr, ptr, ptr, i32 } %957, ptr nonnull %123)
  %974 = call { ptr, i160 } %973({ ptr, ptr, ptr, i32 } %957, { ptr, ptr, ptr, i32 } %957, ptr nonnull %122, i32 7) #25
  %.fca.1.extract618 = extractvalue { ptr, i160 } %974, 1
  %.sroa.0613.0.insert.ext = and i160 %.fca.1.extract618, 4294967295
  %975 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0613.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %124, align 8
  %976 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %124)
  %977 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %125, align 8
  %978 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %125)
  call void %978(ptr nonnull %124, { ptr, i160 } %975) #25
  %979 = call ptr @bump_malloc(i64 4)
  store ptr @Array, ptr %126, align 8
  %980 = getelementptr inbounds i8, ptr %126, i64 8
  store ptr @_parameterization_i32, ptr %980, align 8
  %981 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Array, ptr nonnull %126)
  %982 = extractvalue { i64, i64 } %981, 0
  %983 = call ptr @bump_malloc(i64 %982)
  store ptr @_parameterization_i32, ptr %983, align 8
  %984 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %983)
  %985 = insertvalue { ptr } undef, ptr %979, 0
  %986 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %983, 1
  %987 = insertvalue { ptr, ptr, ptr, i32 } %986, ptr undef, 2
  %988 = insertvalue { ptr, ptr, ptr, i32 } %987, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %127, align 8
  %989 = getelementptr inbounds i8, ptr %127, i64 8
  store ptr @_parameterization_i32, ptr %989, align 8
  %990 = getelementptr inbounds i8, ptr %127, i64 16
  store ptr @_parameterization_i32, ptr %990, align 8
  %991 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %127)
  %992 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %128, align 8
  %993 = getelementptr inbounds i8, ptr %128, i64 8
  store ptr @i32_typ, ptr %993, align 8
  %994 = getelementptr inbounds i8, ptr %128, i64 16
  store ptr @i32_typ, ptr %994, align 8
  %995 = call ptr @behavior_wrapper(ptr nonnull @Array_B_init_bufferBufferT_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %988, ptr nonnull %128)
  call void %995({ ptr, ptr, ptr, i32 } %988, { ptr, ptr, ptr, i32 } %988, ptr nonnull %127, { ptr } %985, i32 0, i32 1) #25
  store ptr @Array, ptr %129, align 8
  %996 = getelementptr inbounds i8, ptr %129, i64 8
  store ptr %983, ptr %996, align 8
  %997 = getelementptr inbounds i8, ptr %129, i64 16
  %998 = getelementptr inbounds i8, ptr %129, i64 24
  store i32 10, ptr %998, align 8
  call void @set_offset(ptr nonnull %129, ptr nonnull @Array)
  %999 = load ptr, ptr %129, align 8
  %1000 = load ptr, ptr %996, align 8
  %1001 = load ptr, ptr %997, align 8
  %1002 = load i32, ptr %998, align 8
  %1003 = call ptr @bump_malloc(i64 20)
  store i32 8, ptr %1003, align 4
  %1004 = getelementptr i8, ptr %1003, i64 4
  store i32 7, ptr %1004, align 4
  %1005 = getelementptr i8, ptr %1003, i64 8
  store i32 6, ptr %1005, align 4
  %1006 = getelementptr i8, ptr %1003, i64 12
  store i32 5, ptr %1006, align 4
  store ptr @Array, ptr %130, align 8
  %1007 = getelementptr inbounds i8, ptr %130, i64 8
  store ptr @_parameterization_i32, ptr %1007, align 8
  %1008 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Array, ptr nonnull %130)
  %1009 = extractvalue { i64, i64 } %1008, 0
  %1010 = call ptr @bump_malloc(i64 %1009)
  store ptr @_parameterization_i32, ptr %1010, align 8
  %1011 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %1010)
  %1012 = insertvalue { ptr } undef, ptr %1003, 0
  %1013 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %1010, 1
  %1014 = insertvalue { ptr, ptr, ptr, i32 } %1013, ptr undef, 2
  %1015 = insertvalue { ptr, ptr, ptr, i32 } %1014, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %131, align 8
  %1016 = getelementptr inbounds i8, ptr %131, i64 8
  store ptr @_parameterization_i32, ptr %1016, align 8
  %1017 = getelementptr inbounds i8, ptr %131, i64 16
  store ptr @_parameterization_i32, ptr %1017, align 8
  %1018 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %131)
  %1019 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %132, align 8
  %1020 = getelementptr inbounds i8, ptr %132, i64 8
  store ptr @i32_typ, ptr %1020, align 8
  %1021 = getelementptr inbounds i8, ptr %132, i64 16
  store ptr @i32_typ, ptr %1021, align 8
  %1022 = call ptr @behavior_wrapper(ptr nonnull @Array_B_init_bufferBufferT_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %1015, ptr nonnull %132)
  call void %1022({ ptr, ptr, ptr, i32 } %1015, { ptr, ptr, ptr, i32 } %1015, ptr nonnull %131, { ptr } %1012, i32 4, i32 5) #25
  store ptr @Array, ptr %133, align 8
  %1023 = getelementptr inbounds i8, ptr %133, i64 8
  store ptr %1010, ptr %1023, align 8
  %1024 = getelementptr inbounds i8, ptr %133, i64 16
  %1025 = getelementptr inbounds i8, ptr %133, i64 24
  store i32 10, ptr %1025, align 8
  call void @set_offset(ptr nonnull %133, ptr nonnull @Array)
  %1026 = load ptr, ptr %133, align 8
  %1027 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1026, 0
  %1028 = load ptr, ptr %1023, align 8
  %1029 = insertvalue { ptr, ptr, ptr, i32 } %1027, ptr %1028, 1
  %1030 = load ptr, ptr %1024, align 8
  %1031 = insertvalue { ptr, ptr, ptr, i32 } %1029, ptr %1030, 2
  %1032 = load i32, ptr %1025, align 8
  %1033 = insertvalue { ptr, ptr, ptr, i32 } %1031, i32 %1032, 3
  %1034 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %999, 0
  %1035 = insertvalue { ptr, ptr, ptr, i32 } %1034, ptr %1000, 1
  %1036 = insertvalue { ptr, ptr, ptr, i32 } %1035, ptr %1001, 2
  %1037 = insertvalue { ptr, ptr, ptr, i32 } %1036, i32 %1002, 3
  store ptr @_parameterization_Arrayi32, ptr %134, align 8
  %1038 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %134)
  %1039 = call ptr @llvm.invariant.start.p0(i64 664, ptr %999)
  %1040 = sext i32 %1002 to i64
  %1041 = getelementptr ptr, ptr %999, i64 %1040
  %1042 = getelementptr i8, ptr %1041, i64 96
  %1043 = load ptr, ptr %1042, align 8
  store ptr %1026, ptr %135, align 8
  %1044 = call ptr @behavior_wrapper(ptr %1043, { ptr, ptr, ptr, i32 } %1037, ptr nonnull %135)
  %1045 = call { ptr, ptr, ptr, i32 } %1044({ ptr, ptr, ptr, i32 } %1037, { ptr, ptr, ptr, i32 } %1037, ptr nonnull %134, { ptr, ptr, ptr, i32 } %1033) #25
  %.fca.0.extract556 = extractvalue { ptr, ptr, ptr, i32 } %1045, 0
  %.fca.1.extract558 = extractvalue { ptr, ptr, ptr, i32 } %1045, 1
  %.fca.2.extract560 = extractvalue { ptr, ptr, ptr, i32 } %1045, 2
  %.fca.3.extract561 = extractvalue { ptr, ptr, ptr, i32 } %1045, 3
  store ptr %.fca.0.extract556, ptr %136, align 8
  %1046 = getelementptr inbounds i8, ptr %136, i64 8
  store ptr %.fca.1.extract558, ptr %1046, align 8
  %1047 = getelementptr inbounds i8, ptr %136, i64 16
  store ptr %.fca.2.extract560, ptr %1047, align 8
  %1048 = getelementptr inbounds i8, ptr %136, i64 24
  store i32 %.fca.3.extract561, ptr %1048, align 8
  call void @set_offset(ptr nonnull %136, ptr nonnull @Array)
  store ptr @_parameterization_i32, ptr %137, align 8
  %1049 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %137)
  %1050 = call ptr @llvm.invariant.start.p0(i64 664, ptr %999)
  %1051 = getelementptr i8, ptr %1041, i64 112
  %1052 = load ptr, ptr %1051, align 8
  store ptr @i32_typ, ptr %138, align 8
  %1053 = call ptr @behavior_wrapper(ptr %1052, { ptr, ptr, ptr, i32 } %1037, ptr nonnull %138)
  %1054 = call { ptr, i160 } %1053({ ptr, ptr, ptr, i32 } %1037, { ptr, ptr, ptr, i32 } %1037, ptr nonnull %137, i32 3) #25
  %.fca.1.extract550 = extractvalue { ptr, i160 } %1054, 1
  %.sroa.0545.0.insert.ext = and i160 %.fca.1.extract550, 4294967295
  %1055 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0545.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %139, align 8
  %1056 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %139)
  %1057 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %140, align 8
  %1058 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %140)
  call void %1058(ptr nonnull %139, { ptr, i160 } %1055) #25
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %1)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %2)
  call void @llvm.lifetime.start.p0(i64 24, ptr nonnull %3)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %5)
  %1059 = call ptr @bump_malloc(i64 4)
  store <3 x i8> <i8 111, i8 110, i8 101>, ptr %1059, align 4
  store ptr @String, ptr %1, align 8
  %1060 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %1)
  %1061 = extractvalue { i64, i64 } %1060, 0
  %1062 = call ptr @bump_malloc(i64 %1061)
  %1063 = insertvalue { ptr } undef, ptr %1059, 0
  %1064 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %1062, 1
  %1065 = insertvalue { ptr, ptr, ptr, i32 } %1064, ptr undef, 2
  %1066 = insertvalue { ptr, ptr, ptr, i32 } %1065, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %2, align 8
  %1067 = getelementptr inbounds i8, ptr %2, i64 8
  store ptr @_parameterization_i32, ptr %1067, align 8
  %1068 = getelementptr inbounds i8, ptr %2, i64 16
  store ptr @_parameterization_i32, ptr %1068, align 8
  %1069 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %2)
  %1070 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %3, align 8
  %1071 = getelementptr inbounds i8, ptr %3, i64 8
  store ptr @i32_typ, ptr %1071, align 8
  %1072 = getelementptr inbounds i8, ptr %3, i64 16
  store ptr @i32_typ, ptr %1072, align 8
  %1073 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %1066, ptr nonnull %3)
  call void %1073({ ptr, ptr, ptr, i32 } %1066, { ptr, ptr, ptr, i32 } %1066, ptr nonnull %2, { ptr } %1063, i32 3, i32 4) #25
  %1074 = ptrtoint ptr %1062 to i64
  %.sroa.3.8.insert.ext.i = zext i64 %1074 to i160
  %.sroa.3.8.insert.insert.i = or disjoint i160 %.sroa.3.8.insert.ext.i, 3402823669209384634633746074317682114560
  %1075 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert.i, 1
  store ptr @_parameterization_String, ptr %4, align 8
  %1076 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %4)
  %1077 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @String, ptr %5, align 8
  %1078 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %5)
  call void %1078(ptr nonnull %4, { ptr, i160 } %1075) #25
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %1)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %2)
  call void @llvm.lifetime.end.p0(i64 24, ptr nonnull %3)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %5)
  %1079 = getelementptr i8, ptr %917, i64 8
  %1080 = getelementptr i8, ptr %917, i64 16
  %1081 = getelementptr i8, ptr %917, i64 24
  %1082 = getelementptr i8, ptr %917, i64 32
  %1083 = load i64, ptr %1079, align 4
  %1084 = load i64, ptr %1080, align 4
  %1085 = load ptr, ptr %1081, align 8
  %1086 = load ptr, ptr %1082, align 8
  %1087 = call i1 @subtype_test_wrapper(ptr %1085, i64 %1084, i64 %1083, i64 -5261542750394134544, i64 ptrtoint (ptr @Array to i64), ptr %1086)
  br i1 %1087, label %._crit_edge11, label %._crit_edge12

._crit_edge11:                                    ; preds = %.critedge1166
  store ptr @_parameterization_i32, ptr %141, align 8
  %1088 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %141)
  %1089 = call ptr @llvm.invariant.start.p0(i64 664, ptr %917)
  %1090 = load ptr, ptr %971, align 8
  store ptr @i32_typ, ptr %142, align 8
  %1091 = call ptr @behavior_wrapper(ptr %1090, { ptr, ptr, ptr, i32 } %957, ptr nonnull %142)
  %1092 = call { ptr, i160 } %1091({ ptr, ptr, ptr, i32 } %957, { ptr, ptr, ptr, i32 } %957, ptr nonnull %141, i32 0) #25
  %.fca.1.extract536 = extractvalue { ptr, i160 } %1092, 1
  %.sroa.1539.8.extract.trunc = trunc i160 %.fca.1.extract536 to i32
  %1093 = icmp eq i32 %.sroa.1539.8.extract.trunc, 5
  br i1 %1093, label %1094, label %._crit_edge12

1094:                                             ; preds = %._crit_edge11
  %1095 = call ptr @bump_malloc(i64 15)
  store <14 x i8> <i8 115, i8 111, i8 32, i8 105, i8 116, i8 32, i8 105, i8 115, i8 32, i8 116, i8 114, i8 117, i8 101, i8 33>, ptr %1095, align 16
  store ptr @String, ptr %143, align 8
  %1096 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %143)
  %1097 = extractvalue { i64, i64 } %1096, 0
  %1098 = call ptr @bump_malloc(i64 %1097)
  %1099 = insertvalue { ptr } undef, ptr %1095, 0
  %1100 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %1098, 1
  %1101 = insertvalue { ptr, ptr, ptr, i32 } %1100, ptr undef, 2
  %1102 = insertvalue { ptr, ptr, ptr, i32 } %1101, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %144, align 8
  %1103 = getelementptr inbounds i8, ptr %144, i64 8
  store ptr @_parameterization_i32, ptr %1103, align 8
  %1104 = getelementptr inbounds i8, ptr %144, i64 16
  store ptr @_parameterization_i32, ptr %1104, align 8
  %1105 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %144)
  %1106 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %145, align 8
  %1107 = getelementptr inbounds i8, ptr %145, i64 8
  store ptr @i32_typ, ptr %1107, align 8
  %1108 = getelementptr inbounds i8, ptr %145, i64 16
  store ptr @i32_typ, ptr %1108, align 8
  %1109 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %1102, ptr nonnull %145)
  call void %1109({ ptr, ptr, ptr, i32 } %1102, { ptr, ptr, ptr, i32 } %1102, ptr nonnull %144, { ptr } %1099, i32 14, i32 15) #25
  %1110 = ptrtoint ptr %1098 to i64
  %.sroa.3.8.insert.ext = zext i64 %1110 to i160
  %.sroa.3.8.insert.insert = or disjoint i160 %.sroa.3.8.insert.ext, 3402823669209384634633746074317682114560
  %1111 = insertvalue { ptr, i160 } { ptr @String, i160 undef }, i160 %.sroa.3.8.insert.insert, 1
  store ptr @_parameterization_String, ptr %146, align 8
  %1112 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %146)
  %1113 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @String, ptr %147, align 8
  %1114 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %147)
  call void %1114(ptr nonnull %146, { ptr, i160 } %1111) #25
  br label %._crit_edge12

._crit_edge12:                                    ; preds = %1094, %._crit_edge11, %.critedge1166
  store ptr @_parameterization_i64, ptr %148, align 8
  %1115 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %148)
  %1116 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i64_typ, ptr %149, align 8
  %1117 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %149)
  call void %1117(ptr nonnull %148, { ptr, i160 } { ptr @i64_typ, i160 5 }) #25
  store ptr @_parameterization_f64, ptr %150, align 8
  %1118 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %150)
  %1119 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @f64_typ, ptr %151, align 8
  %1120 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %151)
  call void %1120(ptr nonnull %150, { ptr, i160 } { ptr @f64_typ, i160 4617315517961601024 }) #25
  store ptr @Range, ptr %152, align 8
  %1121 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Range, ptr nonnull %152)
  %1122 = extractvalue { i64, i64 } %1121, 0
  %1123 = call ptr @bump_malloc(i64 %1122)
  %1124 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Range, ptr undef, ptr undef, i32 undef }, ptr %1123, 1
  %1125 = insertvalue { ptr, ptr, ptr, i32 } %1124, ptr undef, 2
  %1126 = insertvalue { ptr, ptr, ptr, i32 } %1125, i32 10, 3
  store ptr @_parameterization_i32, ptr %153, align 8
  %1127 = getelementptr inbounds i8, ptr %153, i64 8
  store ptr @_parameterization_i32, ptr %1127, align 8
  %1128 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %153)
  %1129 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  store ptr @i32_typ, ptr %154, align 8
  %1130 = getelementptr inbounds i8, ptr %154, i64 8
  store ptr @i32_typ, ptr %1130, align 8
  %1131 = call ptr @behavior_wrapper(ptr nonnull @Range_B_init_starti32_endi32, { ptr, ptr, ptr, i32 } %1126, ptr nonnull %154)
  call void %1131({ ptr, ptr, ptr, i32 } %1126, { ptr, ptr, ptr, i32 } %1126, ptr nonnull %153, i32 11, i32 14) #25
  %1132 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1133 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  %1134 = call ptr @behavior_wrapper(ptr nonnull @Range_B_iterator_, { ptr, ptr, ptr, i32 } %1126, ptr nonnull %0)
  %1135 = call { ptr, ptr, ptr, i32 } %1134({ ptr, ptr, ptr, i32 } %1126, { ptr, ptr, ptr, i32 } %1126, ptr nonnull %0) #25
  %.fca.0.extract489 = extractvalue { ptr, ptr, ptr, i32 } %1135, 0
  %.fca.1.extract491 = extractvalue { ptr, ptr, ptr, i32 } %1135, 1
  %.fca.2.extract493 = extractvalue { ptr, ptr, ptr, i32 } %1135, 2
  %.fca.3.extract494 = extractvalue { ptr, ptr, ptr, i32 } %1135, 3
  store ptr %.fca.0.extract489, ptr %155, align 8
  %1136 = getelementptr inbounds i8, ptr %155, i64 8
  store ptr %.fca.1.extract491, ptr %1136, align 8
  %1137 = getelementptr inbounds i8, ptr %155, i64 16
  store ptr %.fca.2.extract493, ptr %1137, align 8
  %1138 = getelementptr inbounds i8, ptr %155, i64 24
  store i32 %.fca.3.extract494, ptr %1138, align 8
  call void @set_offset(ptr nonnull %155, ptr nonnull @RangeIterator)
  %1139 = load ptr, ptr %155, align 8
  store ptr %1139, ptr %156, align 8
  %1140 = getelementptr inbounds i8, ptr %156, i64 8
  %1141 = load ptr, ptr %1136, align 8
  store ptr %1141, ptr %1140, align 8
  %1142 = getelementptr inbounds i8, ptr %156, i64 16
  %1143 = load ptr, ptr %1137, align 8
  store ptr %1143, ptr %1142, align 8
  %1144 = getelementptr inbounds i8, ptr %156, i64 24
  %1145 = load i32, ptr %1138, align 8
  store i32 %1145, ptr %1144, align 8
  call void @set_offset(ptr nonnull %156, ptr nonnull @RangeIterator)
  %1146 = load ptr, ptr %156, align 8
  %1147 = load ptr, ptr %1140, align 8
  %1148 = load ptr, ptr %1142, align 8
  %1149 = load i32, ptr %1144, align 8
  %1150 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1146, 0
  %1151 = insertvalue { ptr, ptr, ptr, i32 } %1150, ptr %1147, 1
  %1152 = insertvalue { ptr, ptr, ptr, i32 } %1151, ptr %1148, 2
  %1153 = insertvalue { ptr, ptr, ptr, i32 } %1152, i32 %1149, 3
  %1154 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1155 = call ptr @llvm.invariant.start.p0(i64 88, ptr %1146)
  %1156 = sext i32 %1149 to i64
  %1157 = getelementptr ptr, ptr %1146, i64 %1156
  %1158 = getelementptr i8, ptr %1157, i64 40
  %1159 = load ptr, ptr %1158, align 8
  %1160 = call ptr @behavior_wrapper(ptr %1159, { ptr, ptr, ptr, i32 } %1153, ptr nonnull %0)
  %1161 = call { ptr, i160 } %1160({ ptr, ptr, ptr, i32 } %1153, { ptr, ptr, ptr, i32 } %1153, ptr nonnull %0) #25
  %.fca.0.extract4811220 = extractvalue { ptr, i160 } %1161, 0
  %1162 = icmp ne ptr %.fca.0.extract4811220, @nil_typ
  %1163 = icmp ne ptr %.fca.0.extract4811220, null
  %.not11581221 = and i1 %1162, %1163
  br i1 %.not11581221, label %._crit_edge13, label %.critedge1169

._crit_edge13:                                    ; preds = %._crit_edge13, %._crit_edge12
  %1164 = phi { ptr, i160 } [ %1171, %._crit_edge13 ], [ %1161, %._crit_edge12 ]
  %.fca.1.extract483 = extractvalue { ptr, i160 } %1164, 1
  %.sroa.0470.0.insert.ext = and i160 %.fca.1.extract483, 4294967295
  %1165 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0470.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %157, align 8
  %1166 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %157)
  %1167 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %158, align 8
  %1168 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %158)
  call void %1168(ptr nonnull %157, { ptr, i160 } %1165) #25
  %1169 = load ptr, ptr %1158, align 8
  %1170 = call ptr @behavior_wrapper(ptr %1169, { ptr, ptr, ptr, i32 } %1153, ptr nonnull %0)
  %1171 = call { ptr, i160 } %1170({ ptr, ptr, ptr, i32 } %1153, { ptr, ptr, ptr, i32 } %1153, ptr nonnull %0) #25
  %.fca.0.extract481 = extractvalue { ptr, i160 } %1171, 0
  %1172 = icmp ne ptr %.fca.0.extract481, @nil_typ
  %1173 = icmp ne ptr %.fca.0.extract481, null
  %.not1158 = and i1 %1172, %1173
  br i1 %.not1158, label %._crit_edge13, label %.critedge1169

.critedge1169:                                    ; preds = %._crit_edge13, %._crit_edge12
  %1174 = call ptr @bump_malloc(i64 16)
  store i32 44, ptr %1174, align 4
  %1175 = getelementptr i8, ptr %1174, i64 4
  store i32 55, ptr %1175, align 4
  %1176 = getelementptr i8, ptr %1174, i64 8
  store i32 66, ptr %1176, align 4
  store ptr @Array, ptr %159, align 8
  %1177 = getelementptr inbounds i8, ptr %159, i64 8
  store ptr @_parameterization_i32, ptr %1177, align 8
  %1178 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Array, ptr nonnull %159)
  %1179 = extractvalue { i64, i64 } %1178, 0
  %1180 = call ptr @bump_malloc(i64 %1179)
  store ptr @_parameterization_i32, ptr %1180, align 8
  %1181 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %1180)
  %1182 = insertvalue { ptr } undef, ptr %1174, 0
  %1183 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %1180, 1
  %1184 = insertvalue { ptr, ptr, ptr, i32 } %1183, ptr undef, 2
  %1185 = insertvalue { ptr, ptr, ptr, i32 } %1184, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %160, align 8
  %1186 = getelementptr inbounds i8, ptr %160, i64 8
  store ptr @_parameterization_i32, ptr %1186, align 8
  %1187 = getelementptr inbounds i8, ptr %160, i64 16
  store ptr @_parameterization_i32, ptr %1187, align 8
  %1188 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %160)
  %1189 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %161, align 8
  %1190 = getelementptr inbounds i8, ptr %161, i64 8
  store ptr @i32_typ, ptr %1190, align 8
  %1191 = getelementptr inbounds i8, ptr %161, i64 16
  store ptr @i32_typ, ptr %1191, align 8
  %1192 = call ptr @behavior_wrapper(ptr nonnull @Array_B_init_bufferBufferT_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %1185, ptr nonnull %161)
  call void %1192({ ptr, ptr, ptr, i32 } %1185, { ptr, ptr, ptr, i32 } %1185, ptr nonnull %160, { ptr } %1182, i32 3, i32 4) #25
  %1193 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1194 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  %1195 = call ptr @behavior_wrapper(ptr nonnull @Array_B_iterator_, { ptr, ptr, ptr, i32 } %1185, ptr nonnull %0)
  %1196 = call { ptr, ptr, ptr, i32 } %1195({ ptr, ptr, ptr, i32 } %1185, { ptr, ptr, ptr, i32 } %1185, ptr nonnull %0) #25
  %.fca.0.extract437 = extractvalue { ptr, ptr, ptr, i32 } %1196, 0
  %.fca.1.extract439 = extractvalue { ptr, ptr, ptr, i32 } %1196, 1
  %.fca.2.extract441 = extractvalue { ptr, ptr, ptr, i32 } %1196, 2
  %.fca.3.extract442 = extractvalue { ptr, ptr, ptr, i32 } %1196, 3
  store ptr %.fca.0.extract437, ptr %162, align 8
  %1197 = getelementptr inbounds i8, ptr %162, i64 8
  store ptr %.fca.1.extract439, ptr %1197, align 8
  %1198 = getelementptr inbounds i8, ptr %162, i64 16
  store ptr %.fca.2.extract441, ptr %1198, align 8
  %1199 = getelementptr inbounds i8, ptr %162, i64 24
  store i32 %.fca.3.extract442, ptr %1199, align 8
  call void @set_offset(ptr nonnull %162, ptr nonnull @ArrayIterator)
  %1200 = load ptr, ptr %162, align 8
  store ptr %1200, ptr %163, align 8
  %1201 = getelementptr inbounds i8, ptr %163, i64 8
  %1202 = load ptr, ptr %1197, align 8
  store ptr %1202, ptr %1201, align 8
  %1203 = getelementptr inbounds i8, ptr %163, i64 16
  %1204 = load ptr, ptr %1198, align 8
  store ptr %1204, ptr %1203, align 8
  %1205 = getelementptr inbounds i8, ptr %163, i64 24
  %1206 = load i32, ptr %1199, align 8
  store i32 %1206, ptr %1205, align 8
  call void @set_offset(ptr nonnull %163, ptr nonnull @ArrayIterator)
  %1207 = load ptr, ptr %163, align 8
  %1208 = load ptr, ptr %1201, align 8
  %1209 = load ptr, ptr %1203, align 8
  %1210 = load i32, ptr %1205, align 8
  %1211 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1207, 0
  %1212 = insertvalue { ptr, ptr, ptr, i32 } %1211, ptr %1208, 1
  %1213 = insertvalue { ptr, ptr, ptr, i32 } %1212, ptr %1209, 2
  %1214 = insertvalue { ptr, ptr, ptr, i32 } %1213, i32 %1210, 3
  %1215 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1216 = call ptr @llvm.invariant.start.p0(i64 80, ptr %1207)
  %1217 = sext i32 %1210 to i64
  %1218 = getelementptr ptr, ptr %1207, i64 %1217
  %1219 = getelementptr i8, ptr %1218, i64 32
  %1220 = load ptr, ptr %1219, align 8
  %1221 = call ptr @behavior_wrapper(ptr %1220, { ptr, ptr, ptr, i32 } %1214, ptr nonnull %0)
  %1222 = call { ptr, i160 } %1221({ ptr, ptr, ptr, i32 } %1214, { ptr, ptr, ptr, i32 } %1214, ptr nonnull %0) #25
  %.fca.0.extract4291222 = extractvalue { ptr, i160 } %1222, 0
  %1223 = icmp ne ptr %.fca.0.extract4291222, @nil_typ
  %1224 = icmp ne ptr %.fca.0.extract4291222, null
  %.not11601223 = and i1 %1223, %1224
  br i1 %.not11601223, label %._crit_edge15, label %.critedge1170

._crit_edge15:                                    ; preds = %._crit_edge15, %.critedge1169
  %1225 = phi { ptr, i160 } [ %1232, %._crit_edge15 ], [ %1222, %.critedge1169 ]
  %.fca.1.extract431 = extractvalue { ptr, i160 } %1225, 1
  %.sroa.0418.0.insert.ext = and i160 %.fca.1.extract431, 4294967295
  %1226 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0418.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %164, align 8
  %1227 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %164)
  %1228 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %165, align 8
  %1229 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %165)
  call void %1229(ptr nonnull %164, { ptr, i160 } %1226) #25
  %1230 = load ptr, ptr %1219, align 8
  %1231 = call ptr @behavior_wrapper(ptr %1230, { ptr, ptr, ptr, i32 } %1214, ptr nonnull %0)
  %1232 = call { ptr, i160 } %1231({ ptr, ptr, ptr, i32 } %1214, { ptr, ptr, ptr, i32 } %1214, ptr nonnull %0) #25
  %.fca.0.extract429 = extractvalue { ptr, i160 } %1232, 0
  %1233 = icmp ne ptr %.fca.0.extract429, @nil_typ
  %1234 = icmp ne ptr %.fca.0.extract429, null
  %.not1160 = and i1 %1233, %1234
  br i1 %.not1160, label %._crit_edge15, label %.critedge1170

.critedge1170:                                    ; preds = %._crit_edge15, %.critedge1169
  store ptr @_parameterization_i8, ptr %166, align 8
  %1235 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %166)
  %1236 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i8_typ, ptr %167, align 8
  %1237 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %167)
  call void %1237(ptr nonnull %166, { ptr, i160 } { ptr @i8_typ, i160 3 }) #25
  %1238 = call ptr @bump_malloc(i64 6)
  store <5 x i8> <i8 98, i8 111, i8 111, i8 109, i8 33>, ptr %1238, align 8
  store ptr @String, ptr %168, align 8
  %1239 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %168)
  %1240 = extractvalue { i64, i64 } %1239, 0
  %1241 = call ptr @bump_malloc(i64 %1240)
  %1242 = insertvalue { ptr } undef, ptr %1238, 0
  %1243 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %1241, 1
  %1244 = insertvalue { ptr, ptr, ptr, i32 } %1243, ptr undef, 2
  %1245 = insertvalue { ptr, ptr, ptr, i32 } %1244, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %169, align 8
  %1246 = getelementptr inbounds i8, ptr %169, i64 8
  store ptr @_parameterization_i32, ptr %1246, align 8
  %1247 = getelementptr inbounds i8, ptr %169, i64 16
  store ptr @_parameterization_i32, ptr %1247, align 8
  %1248 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %169)
  %1249 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %170, align 8
  %1250 = getelementptr inbounds i8, ptr %170, i64 8
  store ptr @i32_typ, ptr %1250, align 8
  %1251 = getelementptr inbounds i8, ptr %170, i64 16
  store ptr @i32_typ, ptr %1251, align 8
  %1252 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %1245, ptr nonnull %170)
  call void %1252({ ptr, ptr, ptr, i32 } %1245, { ptr, ptr, ptr, i32 } %1245, ptr nonnull %169, { ptr } %1242, i32 5, i32 6) #25
  %1253 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1254 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  %1255 = call ptr @behavior_wrapper(ptr nonnull @String_B_iterator_, { ptr, ptr, ptr, i32 } %1245, ptr nonnull %0)
  %1256 = call { ptr, ptr, ptr, i32 } %1255({ ptr, ptr, ptr, i32 } %1245, { ptr, ptr, ptr, i32 } %1245, ptr nonnull %0) #25
  %.fca.0.extract388 = extractvalue { ptr, ptr, ptr, i32 } %1256, 0
  %.fca.1.extract390 = extractvalue { ptr, ptr, ptr, i32 } %1256, 1
  %.fca.2.extract392 = extractvalue { ptr, ptr, ptr, i32 } %1256, 2
  %.fca.3.extract393 = extractvalue { ptr, ptr, ptr, i32 } %1256, 3
  store ptr %.fca.0.extract388, ptr %171, align 8
  %1257 = getelementptr inbounds i8, ptr %171, i64 8
  store ptr %.fca.1.extract390, ptr %1257, align 8
  %1258 = getelementptr inbounds i8, ptr %171, i64 16
  store ptr %.fca.2.extract392, ptr %1258, align 8
  %1259 = getelementptr inbounds i8, ptr %171, i64 24
  store i32 %.fca.3.extract393, ptr %1259, align 8
  call void @set_offset(ptr nonnull %171, ptr nonnull @StringIterator)
  %1260 = load ptr, ptr %171, align 8
  store ptr %1260, ptr %172, align 8
  %1261 = getelementptr inbounds i8, ptr %172, i64 8
  %1262 = load ptr, ptr %1257, align 8
  store ptr %1262, ptr %1261, align 8
  %1263 = getelementptr inbounds i8, ptr %172, i64 16
  %1264 = load ptr, ptr %1258, align 8
  store ptr %1264, ptr %1263, align 8
  %1265 = getelementptr inbounds i8, ptr %172, i64 24
  %1266 = load i32, ptr %1259, align 8
  store i32 %1266, ptr %1265, align 8
  call void @set_offset(ptr nonnull %172, ptr nonnull @StringIterator)
  %1267 = load ptr, ptr %172, align 8
  %1268 = load ptr, ptr %1261, align 8
  %1269 = load ptr, ptr %1263, align 8
  %1270 = load i32, ptr %1265, align 8
  %1271 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1267, 0
  %1272 = insertvalue { ptr, ptr, ptr, i32 } %1271, ptr %1268, 1
  %1273 = insertvalue { ptr, ptr, ptr, i32 } %1272, ptr %1269, 2
  %1274 = insertvalue { ptr, ptr, ptr, i32 } %1273, i32 %1270, 3
  %1275 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1276 = call ptr @llvm.invariant.start.p0(i64 80, ptr %1267)
  %1277 = sext i32 %1270 to i64
  %1278 = getelementptr ptr, ptr %1267, i64 %1277
  %1279 = getelementptr i8, ptr %1278, i64 32
  %1280 = load ptr, ptr %1279, align 8
  %1281 = call ptr @behavior_wrapper(ptr %1280, { ptr, ptr, ptr, i32 } %1274, ptr nonnull %0)
  %1282 = call { ptr, i160 } %1281({ ptr, ptr, ptr, i32 } %1274, { ptr, ptr, ptr, i32 } %1274, ptr nonnull %0) #25
  %.fca.0.extract3741224 = extractvalue { ptr, i160 } %1282, 0
  %1283 = icmp ne ptr %.fca.0.extract3741224, @nil_typ
  %1284 = icmp ne ptr %.fca.0.extract3741224, null
  %.not11621225 = and i1 %1283, %1284
  br i1 %.not11621225, label %._crit_edge17.lr.ph, label %.critedge1171

._crit_edge17.lr.ph:                              ; preds = %.critedge1170
  %1285 = getelementptr inbounds i8, ptr %173, i64 8
  %.sroa_idx379 = getelementptr inbounds i8, ptr %173, i64 16
  %.sroa_idx380 = getelementptr inbounds i8, ptr %173, i64 24
  %1286 = getelementptr inbounds i8, ptr %176, i64 8
  %1287 = getelementptr inbounds i8, ptr %176, i64 16
  %1288 = getelementptr inbounds i8, ptr %176, i64 24
  br label %._crit_edge17

._crit_edge17:                                    ; preds = %._crit_edge17, %._crit_edge17.lr.ph
  %.fca.0.extract3741226 = phi ptr [ %.fca.0.extract3741224, %._crit_edge17.lr.ph ], [ %.fca.0.extract374, %._crit_edge17 ]
  %1289 = phi { ptr, i160 } [ %1282, %._crit_edge17.lr.ph ], [ %1303, %._crit_edge17 ]
  %.fca.1.extract376 = extractvalue { ptr, i160 } %1289, 1
  %.sroa.9.8.extract.shift = lshr i160 %.fca.1.extract376, 128
  %.sroa.9.8.extract.trunc = trunc nuw i160 %.sroa.9.8.extract.shift to i32
  %.sroa.7.8.extract.shift = lshr i160 %.fca.1.extract376, 64
  %.sroa.7.8.extract.trunc = trunc i160 %.sroa.7.8.extract.shift to i64
  %.sroa.4383.8.extract.trunc = trunc i160 %.fca.1.extract376 to i64
  store ptr %.fca.0.extract3741226, ptr %173, align 8
  store i64 %.sroa.4383.8.extract.trunc, ptr %1285, align 8
  store i64 %.sroa.7.8.extract.trunc, ptr %.sroa_idx379, align 8
  store i32 %.sroa.9.8.extract.trunc, ptr %.sroa_idx380, align 8
  call void @set_offset(ptr nonnull %173, ptr nonnull @Character)
  %1290 = load ptr, ptr %173, align 8
  %1291 = insertvalue { ptr, i160 } undef, ptr %1290, 0
  %1292 = load i160, ptr %1285, align 8
  %1293 = insertvalue { ptr, i160 } %1291, i160 %1292, 1
  store ptr @_parameterization_Character, ptr %174, align 8
  %1294 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %174)
  %1295 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr %1290, ptr %175, align 8
  %1296 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %175)
  call void %1296(ptr nonnull %174, { ptr, i160 } %1293) #25
  %1297 = load ptr, ptr %173, align 8
  store ptr %1297, ptr %176, align 8
  %1298 = load ptr, ptr %1285, align 8
  store ptr %1298, ptr %1286, align 8
  %1299 = load ptr, ptr %.sroa_idx379, align 8
  store ptr %1299, ptr %1287, align 8
  %1300 = load i32, ptr %.sroa_idx380, align 8
  store i32 %1300, ptr %1288, align 8
  call void @set_offset(ptr nonnull %176, ptr nonnull @Character)
  %1301 = load ptr, ptr %1279, align 8
  %1302 = call ptr @behavior_wrapper(ptr %1301, { ptr, ptr, ptr, i32 } %1274, ptr nonnull %0)
  %1303 = call { ptr, i160 } %1302({ ptr, ptr, ptr, i32 } %1274, { ptr, ptr, ptr, i32 } %1274, ptr nonnull %0) #25
  %.fca.0.extract374 = extractvalue { ptr, i160 } %1303, 0
  %1304 = icmp ne ptr %.fca.0.extract374, @nil_typ
  %1305 = icmp ne ptr %.fca.0.extract374, null
  %.not1162 = and i1 %1304, %1305
  br i1 %.not1162, label %._crit_edge17, label %.critedge1171

.critedge1171:                                    ; preds = %._crit_edge17, %.critedge1170
  %1306 = call ptr @bump_malloc(i64 16)
  store i32 1, ptr %1306, align 4
  %1307 = getelementptr i8, ptr %1306, i64 4
  store i32 2, ptr %1307, align 4
  %1308 = getelementptr i8, ptr %1306, i64 8
  store i32 3, ptr %1308, align 4
  store ptr @Array, ptr %177, align 8
  %1309 = getelementptr inbounds i8, ptr %177, i64 8
  store ptr @_parameterization_i32, ptr %1309, align 8
  %1310 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Array, ptr nonnull %177)
  %1311 = extractvalue { i64, i64 } %1310, 0
  %1312 = call ptr @bump_malloc(i64 %1311)
  store ptr @_parameterization_i32, ptr %1312, align 8
  %1313 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %1312)
  %1314 = insertvalue { ptr } undef, ptr %1306, 0
  %1315 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %1312, 1
  %1316 = insertvalue { ptr, ptr, ptr, i32 } %1315, ptr undef, 2
  %1317 = insertvalue { ptr, ptr, ptr, i32 } %1316, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %178, align 8
  %1318 = getelementptr inbounds i8, ptr %178, i64 8
  store ptr @_parameterization_i32, ptr %1318, align 8
  %1319 = getelementptr inbounds i8, ptr %178, i64 16
  store ptr @_parameterization_i32, ptr %1319, align 8
  %1320 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %178)
  %1321 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %179, align 8
  %1322 = getelementptr inbounds i8, ptr %179, i64 8
  store ptr @i32_typ, ptr %1322, align 8
  %1323 = getelementptr inbounds i8, ptr %179, i64 16
  store ptr @i32_typ, ptr %1323, align 8
  %1324 = call ptr @behavior_wrapper(ptr nonnull @Array_B_init_bufferBufferT_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %1317, ptr nonnull %179)
  call void %1324({ ptr, ptr, ptr, i32 } %1317, { ptr, ptr, ptr, i32 } %1317, ptr nonnull %178, { ptr } %1314, i32 3, i32 4) #25
  %1325 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1326 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  %1327 = call ptr @behavior_wrapper(ptr nonnull @Array_B_repr_, { ptr, ptr, ptr, i32 } %1317, ptr nonnull %0)
  %1328 = call { ptr, ptr, ptr, i32 } %1327({ ptr, ptr, ptr, i32 } %1317, { ptr, ptr, ptr, i32 } %1317, ptr nonnull %0) #25
  %.fca.0.extract341 = extractvalue { ptr, ptr, ptr, i32 } %1328, 0
  %.fca.1.extract343 = extractvalue { ptr, ptr, ptr, i32 } %1328, 1
  %.fca.2.extract345 = extractvalue { ptr, ptr, ptr, i32 } %1328, 2
  %.fca.3.extract346 = extractvalue { ptr, ptr, ptr, i32 } %1328, 3
  store ptr %.fca.0.extract341, ptr %180, align 8
  %1329 = getelementptr inbounds i8, ptr %180, i64 8
  store ptr %.fca.1.extract343, ptr %1329, align 8
  %1330 = getelementptr inbounds i8, ptr %180, i64 16
  store ptr %.fca.2.extract345, ptr %1330, align 8
  %1331 = getelementptr inbounds i8, ptr %180, i64 24
  store i32 %.fca.3.extract346, ptr %1331, align 8
  call void @set_offset(ptr nonnull %180, ptr nonnull @String)
  %1332 = load ptr, ptr %180, align 8
  %1333 = insertvalue { ptr, i160 } undef, ptr %1332, 0
  %1334 = load i160, ptr %1329, align 8
  %1335 = insertvalue { ptr, i160 } %1333, i160 %1334, 1
  store ptr @_parameterization_String, ptr %181, align 8
  %1336 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %181)
  %1337 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr %1332, ptr %182, align 8
  %1338 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %182)
  call void %1338(ptr nonnull %181, { ptr, i160 } %1335) #25
  store ptr @Integer2, ptr %183, align 8
  %1339 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Integer2, ptr nonnull %183)
  %1340 = extractvalue { i64, i64 } %1339, 0
  %1341 = call ptr @bump_malloc(i64 %1340)
  %1342 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Integer2, ptr undef, ptr undef, i32 undef }, ptr %1341, 1
  %1343 = insertvalue { ptr, ptr, ptr, i32 } %1342, ptr undef, 2
  %1344 = insertvalue { ptr, ptr, ptr, i32 } %1343, i32 10, 3
  store ptr @_parameterization_i32, ptr %184, align 8
  %1345 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %184)
  %1346 = call ptr @llvm.invariant.start.p0(i64 320, ptr nonnull @Integer2)
  store ptr @i32_typ, ptr %185, align 8
  %1347 = call ptr @behavior_wrapper(ptr nonnull @Integer2_B_init_valuei32, { ptr, ptr, ptr, i32 } %1344, ptr nonnull %185)
  call void %1347({ ptr, ptr, ptr, i32 } %1344, { ptr, ptr, ptr, i32 } %1344, ptr nonnull %184, i32 77) #25
  store ptr @Integer2, ptr %186, align 8
  %1348 = getelementptr inbounds i8, ptr %186, i64 8
  store ptr %1341, ptr %1348, align 8
  %1349 = getelementptr inbounds i8, ptr %186, i64 16
  %1350 = getelementptr inbounds i8, ptr %186, i64 24
  store i32 10, ptr %1350, align 8
  call void @set_offset(ptr nonnull %186, ptr nonnull @Integer2)
  %1351 = load ptr, ptr %186, align 8
  %1352 = load ptr, ptr %1348, align 8
  %1353 = load ptr, ptr %1349, align 8
  %1354 = load i32, ptr %1350, align 8
  %1355 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1351, 0
  %1356 = insertvalue { ptr, ptr, ptr, i32 } %1355, ptr %1352, 1
  %1357 = insertvalue { ptr, ptr, ptr, i32 } %1356, ptr %1353, 2
  %1358 = insertvalue { ptr, ptr, ptr, i32 } %1357, i32 %1354, 3
  %1359 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1360 = call ptr @llvm.invariant.start.p0(i64 320, ptr %1351)
  %1361 = sext i32 %1354 to i64
  %1362 = getelementptr ptr, ptr %1351, i64 %1361
  %1363 = getelementptr i8, ptr %1362, i64 56
  %1364 = load ptr, ptr %1363, align 8
  %1365 = call ptr @behavior_wrapper(ptr %1364, { ptr, ptr, ptr, i32 } %1358, ptr nonnull %0)
  call void %1365({ ptr, ptr, ptr, i32 } %1358, { ptr, ptr, ptr, i32 } %1358, ptr nonnull %0) #25
  %1366 = insertvalue { ptr, i160 } undef, ptr %1351, 0
  %1367 = ptrtoint ptr %1352 to i64
  %1368 = ptrtoint ptr %1353 to i64
  %.sroa.11.8.insert.ext = zext i32 %1354 to i160
  %.sroa.11.8.insert.shift = shl nuw i160 %.sroa.11.8.insert.ext, 128
  %.sroa.8.8.insert.ext = zext i64 %1368 to i160
  %.sroa.8.8.insert.shift = shl nuw nsw i160 %.sroa.8.8.insert.ext, 64
  %.sroa.8.8.insert.insert = or disjoint i160 %.sroa.11.8.insert.shift, %.sroa.8.8.insert.shift
  %.sroa.4327.8.insert.ext = zext i64 %1367 to i160
  %.sroa.4327.8.insert.insert = or disjoint i160 %.sroa.8.8.insert.insert, %.sroa.4327.8.insert.ext
  %1369 = insertvalue { ptr, i160 } %1366, i160 %.sroa.4327.8.insert.insert, 1
  store ptr @_parameterization_Integer2, ptr %187, align 8
  %1370 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %187)
  %1371 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr %1351, ptr %188, align 8
  %1372 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %188)
  call void %1372(ptr nonnull %187, { ptr, i160 } %1369) #25
  %1373 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1374 = call ptr @llvm.invariant.start.p0(i64 320, ptr %1351)
  %1375 = getelementptr i8, ptr %1362, i64 64
  %1376 = load ptr, ptr %1375, align 8
  %1377 = call ptr @behavior_wrapper(ptr %1376, { ptr, ptr, ptr, i32 } %1358, ptr nonnull %0)
  call void %1377({ ptr, ptr, ptr, i32 } %1358, { ptr, ptr, ptr, i32 } %1358, ptr nonnull %0) #25
  store ptr @Range, ptr %189, align 8
  %1378 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Range, ptr nonnull %189)
  %1379 = extractvalue { i64, i64 } %1378, 0
  %1380 = call ptr @bump_malloc(i64 %1379)
  %1381 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Range, ptr undef, ptr undef, i32 undef }, ptr %1380, 1
  %1382 = insertvalue { ptr, ptr, ptr, i32 } %1381, ptr undef, 2
  %1383 = insertvalue { ptr, ptr, ptr, i32 } %1382, i32 10, 3
  store ptr @_parameterization_i32, ptr %190, align 8
  %1384 = getelementptr inbounds i8, ptr %190, i64 8
  store ptr @_parameterization_i32, ptr %1384, align 8
  %1385 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %190)
  %1386 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  store ptr @i32_typ, ptr %191, align 8
  %1387 = getelementptr inbounds i8, ptr %191, i64 8
  store ptr @i32_typ, ptr %1387, align 8
  %1388 = call ptr @behavior_wrapper(ptr nonnull @Range_B_init_starti32_endi32, { ptr, ptr, ptr, i32 } %1383, ptr nonnull %191)
  call void %1388({ ptr, ptr, ptr, i32 } %1383, { ptr, ptr, ptr, i32 } %1383, ptr nonnull %190, i32 0, i32 25) #25
  store ptr @_parameterization_i32, ptr %192, align 8
  %1389 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %192)
  %1390 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  store ptr @i32_typ, ptr %193, align 8
  %1391 = call ptr @behavior_wrapper(ptr nonnull @Range_B_step_stepi32, { ptr, ptr, ptr, i32 } %1383, ptr nonnull %193)
  %1392 = call { ptr, ptr, ptr, i32 } %1391({ ptr, ptr, ptr, i32 } %1383, { ptr, ptr, ptr, i32 } %1383, ptr nonnull %192, i32 5) #25
  %.fca.0.extract303 = extractvalue { ptr, ptr, ptr, i32 } %1392, 0
  %.fca.1.extract305 = extractvalue { ptr, ptr, ptr, i32 } %1392, 1
  %.fca.2.extract307 = extractvalue { ptr, ptr, ptr, i32 } %1392, 2
  %.fca.3.extract308 = extractvalue { ptr, ptr, ptr, i32 } %1392, 3
  store ptr %.fca.0.extract303, ptr %194, align 8
  %1393 = getelementptr inbounds i8, ptr %194, i64 8
  store ptr %.fca.1.extract305, ptr %1393, align 8
  %1394 = getelementptr inbounds i8, ptr %194, i64 16
  store ptr %.fca.2.extract307, ptr %1394, align 8
  %1395 = getelementptr inbounds i8, ptr %194, i64 24
  store i32 %.fca.3.extract308, ptr %1395, align 8
  call void @set_offset(ptr nonnull %194, ptr nonnull @Range)
  %1396 = load ptr, ptr %194, align 8
  %1397 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1396, 0
  %1398 = load ptr, ptr %1393, align 8
  %1399 = insertvalue { ptr, ptr, ptr, i32 } %1397, ptr %1398, 1
  %1400 = load ptr, ptr %1394, align 8
  %1401 = insertvalue { ptr, ptr, ptr, i32 } %1399, ptr %1400, 2
  %1402 = load i32, ptr %1395, align 8
  %1403 = insertvalue { ptr, ptr, ptr, i32 } %1401, i32 %1402, 3
  %1404 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1405 = call ptr @llvm.invariant.start.p0(i64 440, ptr %1396)
  %1406 = sext i32 %1402 to i64
  %1407 = getelementptr ptr, ptr %1396, i64 %1406
  %1408 = getelementptr i8, ptr %1407, i64 56
  %1409 = load ptr, ptr %1408, align 8
  %1410 = call ptr @behavior_wrapper(ptr %1409, { ptr, ptr, ptr, i32 } %1403, ptr nonnull %0)
  %1411 = call { ptr, ptr, ptr, i32 } %1410({ ptr, ptr, ptr, i32 } %1403, { ptr, ptr, ptr, i32 } %1403, ptr nonnull %0) #25
  %.fca.0.extract293 = extractvalue { ptr, ptr, ptr, i32 } %1411, 0
  %.fca.1.extract295 = extractvalue { ptr, ptr, ptr, i32 } %1411, 1
  %.fca.2.extract297 = extractvalue { ptr, ptr, ptr, i32 } %1411, 2
  %.fca.3.extract298 = extractvalue { ptr, ptr, ptr, i32 } %1411, 3
  store ptr %.fca.0.extract293, ptr %195, align 8
  %1412 = getelementptr inbounds i8, ptr %195, i64 8
  store ptr %.fca.1.extract295, ptr %1412, align 8
  %1413 = getelementptr inbounds i8, ptr %195, i64 16
  store ptr %.fca.2.extract297, ptr %1413, align 8
  %1414 = getelementptr inbounds i8, ptr %195, i64 24
  store i32 %.fca.3.extract298, ptr %1414, align 8
  call void @set_offset(ptr nonnull %195, ptr nonnull @RangeIterator)
  %1415 = load ptr, ptr %195, align 8
  store ptr %1415, ptr %196, align 8
  %1416 = getelementptr inbounds i8, ptr %196, i64 8
  %1417 = load ptr, ptr %1412, align 8
  store ptr %1417, ptr %1416, align 8
  %1418 = getelementptr inbounds i8, ptr %196, i64 16
  %1419 = load ptr, ptr %1413, align 8
  store ptr %1419, ptr %1418, align 8
  %1420 = getelementptr inbounds i8, ptr %196, i64 24
  %1421 = load i32, ptr %1414, align 8
  store i32 %1421, ptr %1420, align 8
  call void @set_offset(ptr nonnull %196, ptr nonnull @RangeIterator)
  %1422 = load ptr, ptr %196, align 8
  %1423 = load ptr, ptr %1416, align 8
  %1424 = load ptr, ptr %1418, align 8
  %1425 = load i32, ptr %1420, align 8
  %1426 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1422, 0
  %1427 = insertvalue { ptr, ptr, ptr, i32 } %1426, ptr %1423, 1
  %1428 = insertvalue { ptr, ptr, ptr, i32 } %1427, ptr %1424, 2
  %1429 = insertvalue { ptr, ptr, ptr, i32 } %1428, i32 %1425, 3
  %1430 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1431 = call ptr @llvm.invariant.start.p0(i64 88, ptr %1422)
  %1432 = sext i32 %1425 to i64
  %1433 = getelementptr ptr, ptr %1422, i64 %1432
  %1434 = getelementptr i8, ptr %1433, i64 40
  %1435 = load ptr, ptr %1434, align 8
  %1436 = call ptr @behavior_wrapper(ptr %1435, { ptr, ptr, ptr, i32 } %1429, ptr nonnull %0)
  %1437 = call { ptr, i160 } %1436({ ptr, ptr, ptr, i32 } %1429, { ptr, ptr, ptr, i32 } %1429, ptr nonnull %0) #25
  %.fca.0.extract2871227 = extractvalue { ptr, i160 } %1437, 0
  %1438 = icmp ne ptr %.fca.0.extract2871227, @nil_typ
  %1439 = icmp ne ptr %.fca.0.extract2871227, null
  %.not11641228 = and i1 %1438, %1439
  br i1 %.not11641228, label %._crit_edge19, label %.critedge1172

._crit_edge19:                                    ; preds = %._crit_edge19, %.critedge1171
  %1440 = phi { ptr, i160 } [ %1447, %._crit_edge19 ], [ %1437, %.critedge1171 ]
  %.fca.1.extract288 = extractvalue { ptr, i160 } %1440, 1
  %.sroa.0280.0.insert.ext = and i160 %.fca.1.extract288, 4294967295
  %1441 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0280.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %197, align 8
  %1442 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %197)
  %1443 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %198, align 8
  %1444 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %198)
  call void %1444(ptr nonnull %197, { ptr, i160 } %1441) #25
  %1445 = load ptr, ptr %1434, align 8
  %1446 = call ptr @behavior_wrapper(ptr %1445, { ptr, ptr, ptr, i32 } %1429, ptr nonnull %0)
  %1447 = call { ptr, i160 } %1446({ ptr, ptr, ptr, i32 } %1429, { ptr, ptr, ptr, i32 } %1429, ptr nonnull %0) #25
  %.fca.0.extract287 = extractvalue { ptr, i160 } %1447, 0
  %1448 = icmp ne ptr %.fca.0.extract287, @nil_typ
  %1449 = icmp ne ptr %.fca.0.extract287, null
  %.not1164 = and i1 %1448, %1449
  br i1 %.not1164, label %._crit_edge19, label %.critedge1172

.critedge1172:                                    ; preds = %._crit_edge19, %.critedge1171
  %1450 = call ptr @bump_malloc(i64 24)
  call void @anoint_trampoline(ptr %1450)
  call void @llvm.init.trampoline(ptr %1450, ptr nonnull @gjeefxztyp, ptr nonnull @_functionliteral_aawmpodyms)
  %1451 = call ptr @adjust_trampoline(ptr %1450)
  %1452 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1450)
  %1453 = insertvalue { ptr } undef, ptr %1451, 0
  %1454 = call ptr @bump_malloc(i64 24)
  call void @anoint_trampoline(ptr %1454)
  call void @llvm.init.trampoline(ptr %1454, ptr nonnull @kmitoizdxb, ptr nonnull @_functionliteral_kgivmcmbfd)
  %1455 = call ptr @adjust_trampoline(ptr %1454)
  %1456 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1454)
  %1457 = insertvalue { ptr } undef, ptr %1455, 0
  %1458 = call ptr @bump_malloc(i64 20)
  store i32 1, ptr %1458, align 4
  %1459 = getelementptr i8, ptr %1458, i64 4
  store i32 2, ptr %1459, align 4
  %1460 = getelementptr i8, ptr %1458, i64 8
  store i32 3, ptr %1460, align 4
  %1461 = getelementptr i8, ptr %1458, i64 12
  store i32 4, ptr %1461, align 4
  store ptr @Array, ptr %199, align 8
  %1462 = getelementptr inbounds i8, ptr %199, i64 8
  store ptr @_parameterization_i32, ptr %1462, align 8
  %1463 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Array, ptr nonnull %199)
  %1464 = extractvalue { i64, i64 } %1463, 0
  %1465 = call ptr @bump_malloc(i64 %1464)
  store ptr @_parameterization_i32, ptr %1465, align 8
  %1466 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %1465)
  %1467 = insertvalue { ptr } undef, ptr %1458, 0
  %1468 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %1465, 1
  %1469 = insertvalue { ptr, ptr, ptr, i32 } %1468, ptr undef, 2
  %1470 = insertvalue { ptr, ptr, ptr, i32 } %1469, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %200, align 8
  %1471 = getelementptr inbounds i8, ptr %200, i64 8
  store ptr @_parameterization_i32, ptr %1471, align 8
  %1472 = getelementptr inbounds i8, ptr %200, i64 16
  store ptr @_parameterization_i32, ptr %1472, align 8
  %1473 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %200)
  %1474 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %201, align 8
  %1475 = getelementptr inbounds i8, ptr %201, i64 8
  store ptr @i32_typ, ptr %1475, align 8
  %1476 = getelementptr inbounds i8, ptr %201, i64 16
  store ptr @i32_typ, ptr %1476, align 8
  %1477 = call ptr @behavior_wrapper(ptr nonnull @Array_B_init_bufferBufferT_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %1470, ptr nonnull %201)
  call void %1477({ ptr, ptr, ptr, i32 } %1470, { ptr, ptr, ptr, i32 } %1470, ptr nonnull %200, { ptr } %1467, i32 4, i32 5) #25
  store ptr @_parameterization_Functioni32_to_i32, ptr %202, align 8
  %1478 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %202)
  %1479 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @function_typ, ptr %203, align 8
  %1480 = call ptr @behavior_wrapper(ptr nonnull @Array_B_map_fFunctionT_to_U, { ptr, ptr, ptr, i32 } %1470, ptr nonnull %203)
  %1481 = call { ptr, ptr, ptr, i32 } %1480({ ptr, ptr, ptr, i32 } %1470, { ptr, ptr, ptr, i32 } %1470, ptr nonnull %202, { ptr } %1457) #25
  %.fca.0.extract236 = extractvalue { ptr, ptr, ptr, i32 } %1481, 0
  %.fca.1.extract237 = extractvalue { ptr, ptr, ptr, i32 } %1481, 1
  %.fca.2.extract238 = extractvalue { ptr, ptr, ptr, i32 } %1481, 2
  %.fca.3.extract239 = extractvalue { ptr, ptr, ptr, i32 } %1481, 3
  store ptr %.fca.0.extract236, ptr %204, align 8
  %1482 = getelementptr inbounds i8, ptr %204, i64 8
  store ptr %.fca.1.extract237, ptr %1482, align 8
  %1483 = getelementptr inbounds i8, ptr %204, i64 16
  store ptr %.fca.2.extract238, ptr %1483, align 8
  %1484 = getelementptr inbounds i8, ptr %204, i64 24
  store i32 %.fca.3.extract239, ptr %1484, align 8
  call void @set_offset(ptr nonnull %204, ptr nonnull @MapIterable)
  %1485 = load ptr, ptr %204, align 8
  %1486 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1485, 0
  %1487 = load ptr, ptr %1482, align 8
  %1488 = insertvalue { ptr, ptr, ptr, i32 } %1486, ptr %1487, 1
  %1489 = load ptr, ptr %1483, align 8
  %1490 = insertvalue { ptr, ptr, ptr, i32 } %1488, ptr %1489, 2
  %1491 = load i32, ptr %1484, align 8
  %1492 = insertvalue { ptr, ptr, ptr, i32 } %1490, i32 %1491, 3
  store ptr @_parameterization_i32, ptr %205, align 8
  %1493 = getelementptr inbounds i8, ptr %205, i64 8
  store ptr @_parameterization_Functioni32._i32_to_i32, ptr %1493, align 8
  %1494 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %205)
  %1495 = call ptr @llvm.invariant.start.p0(i64 408, ptr %1485)
  %1496 = sext i32 %1491 to i64
  %1497 = getelementptr ptr, ptr %1485, i64 %1496
  %1498 = getelementptr i8, ptr %1497, i64 56
  %1499 = load ptr, ptr %1498, align 8
  store ptr @i32_typ, ptr %206, align 8
  %1500 = getelementptr inbounds i8, ptr %206, i64 8
  store ptr @function_typ, ptr %1500, align 8
  %1501 = call ptr @behavior_wrapper(ptr %1499, { ptr, ptr, ptr, i32 } %1492, ptr nonnull %206)
  %1502 = call { ptr, i160 } %1501({ ptr, ptr, ptr, i32 } %1492, { ptr, ptr, ptr, i32 } %1492, ptr nonnull %205, { ptr, i160 } { ptr @i32_typ, i160 0 }, { ptr } %1453) #25
  %.fca.1.extract230 = extractvalue { ptr, i160 } %1502, 1
  %.sroa.0226.0.insert.ext = and i160 %.fca.1.extract230, 4294967295
  %1503 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.0226.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %207, align 8
  %1504 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %207)
  %1505 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %208, align 8
  %1506 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %208)
  call void %1506(ptr nonnull %207, { ptr, i160 } %1503) #25
  %1507 = call ptr @bump_malloc(i64 24)
  call void @anoint_trampoline(ptr %1507)
  call void @llvm.init.trampoline(ptr %1507, ptr nonnull @avsqykeibf, ptr nonnull @_functionliteral_huabycyhfr)
  %1508 = call ptr @adjust_trampoline(ptr %1507)
  %1509 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1507)
  %1510 = insertvalue { ptr } undef, ptr %1508, 0
  %1511 = call ptr @bump_malloc(i64 20)
  store i32 5, ptr %1511, align 4
  %1512 = getelementptr i8, ptr %1511, i64 4
  store i32 6, ptr %1512, align 4
  %1513 = getelementptr i8, ptr %1511, i64 8
  store i32 7, ptr %1513, align 4
  %1514 = getelementptr i8, ptr %1511, i64 12
  store i32 8, ptr %1514, align 4
  store ptr @Array, ptr %209, align 8
  %1515 = getelementptr inbounds i8, ptr %209, i64 8
  store ptr @_parameterization_i32, ptr %1515, align 8
  %1516 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Array, ptr nonnull %209)
  %1517 = extractvalue { i64, i64 } %1516, 0
  %1518 = call ptr @bump_malloc(i64 %1517)
  store ptr @_parameterization_i32, ptr %1518, align 8
  %1519 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %1518)
  %1520 = insertvalue { ptr } undef, ptr %1511, 0
  %1521 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Array, ptr undef, ptr undef, i32 undef }, ptr %1518, 1
  %1522 = insertvalue { ptr, ptr, ptr, i32 } %1521, ptr undef, 2
  %1523 = insertvalue { ptr, ptr, ptr, i32 } %1522, i32 10, 3
  store ptr @_parameterization_Bufferi32, ptr %210, align 8
  %1524 = getelementptr inbounds i8, ptr %210, i64 8
  store ptr @_parameterization_i32, ptr %1524, align 8
  %1525 = getelementptr inbounds i8, ptr %210, i64 16
  store ptr @_parameterization_i32, ptr %1525, align 8
  %1526 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %210)
  %1527 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @buffer_typ, ptr %211, align 8
  %1528 = getelementptr inbounds i8, ptr %211, i64 8
  store ptr @i32_typ, ptr %1528, align 8
  %1529 = getelementptr inbounds i8, ptr %211, i64 16
  store ptr @i32_typ, ptr %1529, align 8
  %1530 = call ptr @behavior_wrapper(ptr nonnull @Array_B_init_bufferBufferT_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %1523, ptr nonnull %211)
  call void %1530({ ptr, ptr, ptr, i32 } %1523, { ptr, ptr, ptr, i32 } %1523, ptr nonnull %210, { ptr } %1520, i32 4, i32 5) #25
  store ptr @_parameterization_Functioni32_to_Nothing, ptr %212, align 8
  %1531 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %212)
  %1532 = call ptr @llvm.invariant.start.p0(i64 664, ptr nonnull @Array)
  store ptr @function_typ, ptr %213, align 8
  %1533 = call ptr @behavior_wrapper(ptr nonnull @Array_B_each_fFunctionT_to_Nothing, { ptr, ptr, ptr, i32 } %1523, ptr nonnull %213)
  call void %1533({ ptr, ptr, ptr, i32 } %1523, { ptr, ptr, ptr, i32 } %1523, ptr nonnull %212, { ptr } %1510) #25
  %1534 = call ptr @bump_malloc(i64 13)
  store <12 x i8> <i8 98, i8 105, i8 103, i8 116, i8 105, i8 110, i8 103, i8 115, i8 46, i8 116, i8 120, i8 116>, ptr %1534, align 16
  store ptr @String, ptr %214, align 8
  %1535 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %214)
  %1536 = extractvalue { i64, i64 } %1535, 0
  %1537 = call ptr @bump_malloc(i64 %1536)
  %1538 = insertvalue { ptr } undef, ptr %1534, 0
  %1539 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %1537, 1
  %1540 = insertvalue { ptr, ptr, ptr, i32 } %1539, ptr undef, 2
  %1541 = insertvalue { ptr, ptr, ptr, i32 } %1540, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %215, align 8
  %1542 = getelementptr inbounds i8, ptr %215, i64 8
  store ptr @_parameterization_i32, ptr %1542, align 8
  %1543 = getelementptr inbounds i8, ptr %215, i64 16
  store ptr @_parameterization_i32, ptr %1543, align 8
  %1544 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %215)
  %1545 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %216, align 8
  %1546 = getelementptr inbounds i8, ptr %216, i64 8
  store ptr @i32_typ, ptr %1546, align 8
  %1547 = getelementptr inbounds i8, ptr %216, i64 16
  store ptr @i32_typ, ptr %1547, align 8
  %1548 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %1541, ptr nonnull %216)
  call void %1548({ ptr, ptr, ptr, i32 } %1541, { ptr, ptr, ptr, i32 } %1541, ptr nonnull %215, { ptr } %1538, i32 12, i32 13) #25
  %1549 = call ptr @bump_malloc(i64 21)
  store <20 x i8> <i8 116, i8 104, i8 105, i8 115, i8 10, i8 105, i8 115, i8 32, i8 104, i8 111, i8 119, i8 10, i8 119, i8 101, i8 32, i8 100, i8 111, i8 10, i8 105, i8 116>, ptr %1549, align 32
  store ptr @String, ptr %217, align 8
  %1550 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %217)
  %1551 = extractvalue { i64, i64 } %1550, 0
  %1552 = call ptr @bump_malloc(i64 %1551)
  %1553 = insertvalue { ptr } undef, ptr %1549, 0
  %1554 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %1552, 1
  %1555 = insertvalue { ptr, ptr, ptr, i32 } %1554, ptr undef, 2
  %1556 = insertvalue { ptr, ptr, ptr, i32 } %1555, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %218, align 8
  %1557 = getelementptr inbounds i8, ptr %218, i64 8
  store ptr @_parameterization_i32, ptr %1557, align 8
  %1558 = getelementptr inbounds i8, ptr %218, i64 16
  store ptr @_parameterization_i32, ptr %1558, align 8
  %1559 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %218)
  %1560 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %219, align 8
  %1561 = getelementptr inbounds i8, ptr %219, i64 8
  store ptr @i32_typ, ptr %1561, align 8
  %1562 = getelementptr inbounds i8, ptr %219, i64 16
  store ptr @i32_typ, ptr %1562, align 8
  %1563 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %1556, ptr nonnull %219)
  call void %1563({ ptr, ptr, ptr, i32 } %1556, { ptr, ptr, ptr, i32 } %1556, ptr nonnull %218, { ptr } %1553, i32 20, i32 21) #25
  store ptr @String, ptr %220, align 8
  %1564 = getelementptr inbounds i8, ptr %220, i64 8
  store ptr %1537, ptr %1564, align 8
  %1565 = getelementptr inbounds i8, ptr %220, i64 16
  %1566 = getelementptr inbounds i8, ptr %220, i64 24
  store i32 10, ptr %1566, align 8
  call void @set_offset(ptr nonnull %220, ptr nonnull @String)
  %1567 = load ptr, ptr %220, align 8
  %1568 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1567, 0
  %1569 = load ptr, ptr %1564, align 8
  %1570 = insertvalue { ptr, ptr, ptr, i32 } %1568, ptr %1569, 1
  %1571 = load ptr, ptr %1565, align 8
  %1572 = insertvalue { ptr, ptr, ptr, i32 } %1570, ptr %1571, 2
  %1573 = load i32, ptr %1566, align 8
  %1574 = insertvalue { ptr, ptr, ptr, i32 } %1572, i32 %1573, 3
  store ptr @String, ptr %221, align 8
  %1575 = getelementptr inbounds i8, ptr %221, i64 8
  store ptr %1552, ptr %1575, align 8
  %1576 = getelementptr inbounds i8, ptr %221, i64 16
  %1577 = getelementptr inbounds i8, ptr %221, i64 24
  store i32 10, ptr %1577, align 8
  call void @set_offset(ptr nonnull %221, ptr nonnull @String)
  %1578 = load ptr, ptr %221, align 8
  %1579 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1578, 0
  %1580 = load ptr, ptr %1575, align 8
  %1581 = insertvalue { ptr, ptr, ptr, i32 } %1579, ptr %1580, 1
  %1582 = load ptr, ptr %1576, align 8
  %1583 = insertvalue { ptr, ptr, ptr, i32 } %1581, ptr %1582, 2
  %1584 = load i32, ptr %1577, align 8
  %1585 = insertvalue { ptr, ptr, ptr, i32 } %1583, i32 %1584, 3
  store ptr @_parameterization_String, ptr %222, align 8
  %1586 = getelementptr inbounds i8, ptr %222, i64 8
  store ptr @_parameterization_String, ptr %1586, align 8
  %1587 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %222)
  %1588 = call ptr @llvm.invariant.start.p0(i64 56, ptr nonnull @FileSystem)
  store ptr %1567, ptr %223, align 8
  %1589 = getelementptr inbounds i8, ptr %223, i64 8
  store ptr %1578, ptr %1589, align 8
  %1590 = call ptr @class_behavior_wrapper(ptr nonnull @FileSystem_B__Self_write_file_file_nameString_textString, ptr nonnull %223)
  call void %1590(ptr nonnull %222, { ptr, ptr, ptr, i32 } %1574, { ptr, ptr, ptr, i32 } %1585) #25
  %1591 = call ptr @bump_malloc(i64 13)
  store <12 x i8> <i8 98, i8 105, i8 103, i8 116, i8 105, i8 110, i8 103, i8 115, i8 46, i8 116, i8 120, i8 116>, ptr %1591, align 16
  store ptr @String, ptr %224, align 8
  %1592 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_String, ptr nonnull %224)
  %1593 = extractvalue { i64, i64 } %1592, 0
  %1594 = call ptr @bump_malloc(i64 %1593)
  %1595 = insertvalue { ptr } undef, ptr %1591, 0
  %1596 = insertvalue { ptr, ptr, ptr, i32 } { ptr @String, ptr undef, ptr undef, i32 undef }, ptr %1594, 1
  %1597 = insertvalue { ptr, ptr, ptr, i32 } %1596, ptr undef, 2
  %1598 = insertvalue { ptr, ptr, ptr, i32 } %1597, i32 10, 3
  store ptr @_parameterization_Bufferi8, ptr %225, align 8
  %1599 = getelementptr inbounds i8, ptr %225, i64 8
  store ptr @_parameterization_i32, ptr %1599, align 8
  %1600 = getelementptr inbounds i8, ptr %225, i64 16
  store ptr @_parameterization_i32, ptr %1600, align 8
  %1601 = call ptr @llvm.invariant.start.p0(i64 9, ptr nonnull %225)
  %1602 = call ptr @llvm.invariant.start.p0(i64 616, ptr nonnull @String)
  store ptr @buffer_typ, ptr %226, align 8
  %1603 = getelementptr inbounds i8, ptr %226, i64 8
  store ptr @i32_typ, ptr %1603, align 8
  %1604 = getelementptr inbounds i8, ptr %226, i64 16
  store ptr @i32_typ, ptr %1604, align 8
  %1605 = call ptr @behavior_wrapper(ptr nonnull @String_B_init_bytesBufferi8_lengthi32_capacityi32, { ptr, ptr, ptr, i32 } %1598, ptr nonnull %226)
  call void %1605({ ptr, ptr, ptr, i32 } %1598, { ptr, ptr, ptr, i32 } %1598, ptr nonnull %225, { ptr } %1595, i32 12, i32 13) #25
  store ptr @String, ptr %227, align 8
  %1606 = getelementptr inbounds i8, ptr %227, i64 8
  store ptr %1594, ptr %1606, align 8
  %1607 = getelementptr inbounds i8, ptr %227, i64 16
  %1608 = getelementptr inbounds i8, ptr %227, i64 24
  store i32 10, ptr %1608, align 8
  call void @set_offset(ptr nonnull %227, ptr nonnull @String)
  %1609 = load ptr, ptr %227, align 8
  %1610 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1609, 0
  %1611 = load ptr, ptr %1606, align 8
  %1612 = insertvalue { ptr, ptr, ptr, i32 } %1610, ptr %1611, 1
  %1613 = load ptr, ptr %1607, align 8
  %1614 = insertvalue { ptr, ptr, ptr, i32 } %1612, ptr %1613, 2
  %1615 = load i32, ptr %1608, align 8
  %1616 = insertvalue { ptr, ptr, ptr, i32 } %1614, i32 %1615, 3
  store ptr @_parameterization_String, ptr %228, align 8
  %1617 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %228)
  %1618 = call ptr @llvm.invariant.start.p0(i64 56, ptr nonnull @FileSystem)
  store ptr %1609, ptr %229, align 8
  %1619 = call ptr @class_behavior_wrapper(ptr nonnull @FileSystem_B__Self_read_file_file_nameString, ptr nonnull %229)
  %1620 = call { ptr, ptr, ptr, i32 } %1619(ptr nonnull %228, { ptr, ptr, ptr, i32 } %1616) #25
  %.fca.0.extract145 = extractvalue { ptr, ptr, ptr, i32 } %1620, 0
  %.fca.1.extract146 = extractvalue { ptr, ptr, ptr, i32 } %1620, 1
  %.fca.2.extract147 = extractvalue { ptr, ptr, ptr, i32 } %1620, 2
  %.fca.3.extract148 = extractvalue { ptr, ptr, ptr, i32 } %1620, 3
  store ptr %.fca.0.extract145, ptr %230, align 8
  %1621 = getelementptr inbounds i8, ptr %230, i64 8
  store ptr %.fca.1.extract146, ptr %1621, align 8
  %1622 = getelementptr inbounds i8, ptr %230, i64 16
  store ptr %.fca.2.extract147, ptr %1622, align 8
  %1623 = getelementptr inbounds i8, ptr %230, i64 24
  store i32 %.fca.3.extract148, ptr %1623, align 8
  call void @set_offset(ptr nonnull %230, ptr nonnull @String)
  %1624 = load ptr, ptr %230, align 8
  %1625 = insertvalue { ptr, i160 } undef, ptr %1624, 0
  %1626 = load i160, ptr %1621, align 8
  %1627 = insertvalue { ptr, i160 } %1625, i160 %1626, 1
  store ptr @_parameterization_String, ptr %231, align 8
  %1628 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %231)
  %1629 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr %1624, ptr %232, align 8
  %1630 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %232)
  call void %1630(ptr nonnull %231, { ptr, i160 } %1627) #25
  %1631 = call ptr @bump_malloc(i64 24)
  call void @anoint_trampoline(ptr %1631)
  call void @llvm.init.trampoline(ptr %1631, ptr nonnull @yaxkqtlxlj, ptr nonnull @_functionliteral_celgcexpvq)
  %1632 = call ptr @adjust_trampoline(ptr %1631)
  %1633 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1631)
  %1634 = insertvalue { ptr } undef, ptr %1632, 0
  store ptr @Range, ptr %233, align 8
  %1635 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Range, ptr nonnull %233)
  %1636 = extractvalue { i64, i64 } %1635, 0
  %1637 = call ptr @bump_malloc(i64 %1636)
  %1638 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Range, ptr undef, ptr undef, i32 undef }, ptr %1637, 1
  %1639 = insertvalue { ptr, ptr, ptr, i32 } %1638, ptr undef, 2
  %1640 = insertvalue { ptr, ptr, ptr, i32 } %1639, i32 10, 3
  store ptr @_parameterization_i32, ptr %234, align 8
  %1641 = getelementptr inbounds i8, ptr %234, i64 8
  store ptr @_parameterization_i32, ptr %1641, align 8
  %1642 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %234)
  %1643 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  store ptr @i32_typ, ptr %235, align 8
  %1644 = getelementptr inbounds i8, ptr %235, i64 8
  store ptr @i32_typ, ptr %1644, align 8
  %1645 = call ptr @behavior_wrapper(ptr nonnull @Range_B_init_starti32_endi32, { ptr, ptr, ptr, i32 } %1640, ptr nonnull %235)
  call void %1645({ ptr, ptr, ptr, i32 } %1640, { ptr, ptr, ptr, i32 } %1640, ptr nonnull %234, i32 2, i32 5) #25
  store ptr @_parameterization_Functioni32_to_Nothing, ptr %236, align 8
  %1646 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %236)
  %1647 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  store ptr @function_typ, ptr %237, align 8
  %1648 = call ptr @behavior_wrapper(ptr nonnull @Range_B_each_fFunctionT_to_Nothing, { ptr, ptr, ptr, i32 } %1640, ptr nonnull %237)
  call void %1648({ ptr, ptr, ptr, i32 } %1640, { ptr, ptr, ptr, i32 } %1640, ptr nonnull %236, { ptr } %1634) #25
  store ptr @_parameterization_i8, ptr %238, align 8
  %1649 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %238)
  %1650 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i8_typ, ptr %239, align 8
  %1651 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %239)
  call void %1651(ptr nonnull %238, { ptr, i160 } { ptr @i8_typ, i160 5 }) #25
  %1652 = call ptr @coroutine_create(ptr nonnull @_functionliteral_zckdguiuxy, ptr nonnull @coroutine_fvfimafigw_passer)
  %1653 = getelementptr i8, ptr %1652, i64 64
  %1654 = getelementptr i8, ptr %1652, i64 68
  store i32 6, ptr %1653, align 4
  store i32 4, ptr %1654, align 4
  %1655 = getelementptr i8, ptr %1652, i64 48
  store { ptr, i32 } { ptr @i32_typ, i32 2 }, ptr %1655, align 8
  call void @coroutine_call(ptr %1652)
  %1656 = load { ptr, i32 }, ptr %1655, align 8
  %.fca.0.extract112 = extractvalue { ptr, i32 } %1656, 0
  %.fca.1.extract113 = extractvalue { ptr, i32 } %1656, 1
  %1657 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract112, 0
  %.sroa.2110.8.insert.ext = zext i32 %.fca.1.extract113 to i160
  %1658 = insertvalue { ptr, i160 } %1657, i160 %.sroa.2110.8.insert.ext, 1
  store ptr @_parameterization_Nil_or_i32, ptr %240, align 8
  %1659 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %240)
  %1660 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr %.fca.0.extract112, ptr %241, align 8
  %1661 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %241)
  call void %1661(ptr nonnull %240, { ptr, i160 } %1658) #25
  store { ptr, i32 } { ptr @i32_typ, i32 3 }, ptr %1655, align 8
  call void @coroutine_call(ptr %1652)
  %1662 = load { ptr, i32 }, ptr %1655, align 8
  %.fca.0.extract102 = extractvalue { ptr, i32 } %1662, 0
  %.fca.1.extract103 = extractvalue { ptr, i32 } %1662, 1
  %1663 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract102, 0
  %.sroa.2100.8.insert.ext = zext i32 %.fca.1.extract103 to i160
  %1664 = insertvalue { ptr, i160 } %1663, i160 %.sroa.2100.8.insert.ext, 1
  store ptr @_parameterization_Nil_or_i32, ptr %242, align 8
  %1665 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %242)
  %1666 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr %.fca.0.extract102, ptr %243, align 8
  %1667 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %243)
  call void %1667(ptr nonnull %242, { ptr, i160 } %1664) #25
  %1668 = call ptr @coroutine_create(ptr nonnull @_functionliteral_fqsttylcbv, ptr nonnull @coroutine_luopxlwzzk_passer)
  call void @coroutine_call(ptr %1668)
  %1669 = getelementptr i8, ptr %1668, i64 48
  %1670 = load { ptr, i32 }, ptr %1669, align 8
  %.fca.0.extract88 = extractvalue { ptr, i32 } %1670, 0
  %.fca.1.extract89 = extractvalue { ptr, i32 } %1670, 1
  %1671 = insertvalue { ptr, i160 } undef, ptr %.fca.0.extract88, 0
  %.sroa.286.8.insert.ext = zext i32 %.fca.1.extract89 to i160
  %1672 = insertvalue { ptr, i160 } %1671, i160 %.sroa.286.8.insert.ext, 1
  store ptr @_parameterization_Nil_or_i32, ptr %244, align 8
  %1673 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %244)
  %1674 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr %.fca.0.extract88, ptr %245, align 8
  %1675 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %245)
  call void %1675(ptr nonnull %244, { ptr, i160 } %1672) #25
  store ptr @Channel, ptr %246, align 8
  %1676 = getelementptr inbounds i8, ptr %246, i64 8
  store ptr @_parameterization_i32, ptr %1676, align 8
  %1677 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Channel, ptr nonnull %246)
  %1678 = extractvalue { i64, i64 } %1677, 0
  %1679 = call ptr @bump_malloc(i64 %1678)
  store ptr @_parameterization_i32, ptr %1679, align 8
  %1680 = call ptr @llvm.invariant.start.p0(i64 8, ptr nonnull %1679)
  %1681 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Channel, ptr undef, ptr undef, i32 undef }, ptr %1679, 1
  %1682 = insertvalue { ptr, ptr, ptr, i32 } %1681, ptr undef, 2
  %1683 = insertvalue { ptr, ptr, ptr, i32 } %1682, i32 10, 3
  %1684 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1685 = call ptr @llvm.invariant.start.p0(i64 64, ptr nonnull @Channel)
  %1686 = call ptr @behavior_wrapper(ptr nonnull @Channel_B_init_, { ptr, ptr, ptr, i32 } %1683, ptr nonnull %0)
  call void %1686({ ptr, ptr, ptr, i32 } %1683, { ptr, ptr, ptr, i32 } %1683, ptr nonnull %0) #25
  store ptr @Channel, ptr %247, align 8
  %1687 = getelementptr inbounds i8, ptr %247, i64 8
  store ptr %1679, ptr %1687, align 8
  %1688 = getelementptr inbounds i8, ptr %247, i64 16
  %1689 = getelementptr inbounds i8, ptr %247, i64 24
  store i32 10, ptr %1689, align 8
  call void @set_offset(ptr nonnull %247, ptr nonnull @Channel)
  %1690 = load ptr, ptr %247, align 8
  %1691 = load ptr, ptr %1687, align 8
  %1692 = load ptr, ptr %1688, align 8
  %1693 = load i32, ptr %1689, align 8
  %1694 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1690, 0
  %1695 = insertvalue { ptr, ptr, ptr, i32 } %1694, ptr %1691, 1
  %1696 = insertvalue { ptr, ptr, ptr, i32 } %1695, ptr %1692, 2
  %1697 = insertvalue { ptr, ptr, ptr, i32 } %1696, i32 %1693, 3
  %1698 = call ptr @coroutine_create(ptr nonnull @_functionliteral_jfuijcegou, ptr nonnull @coroutine_rvyftlgybn_passer)
  %1699 = getelementptr i8, ptr %1698, i64 80
  store { ptr, ptr, ptr, i32 } %1697, ptr %1699, align 8
  call void @coroutine_call(ptr %1698)
  %1700 = call ptr @llvm.invariant.start.p0(i64 0, ptr nonnull %0)
  %1701 = call ptr @llvm.invariant.start.p0(i64 64, ptr %1690)
  %1702 = sext i32 %1693 to i64
  %1703 = getelementptr ptr, ptr %1690, i64 %1702
  %1704 = getelementptr i8, ptr %1703, i64 24
  %1705 = load ptr, ptr %1704, align 8
  %1706 = call ptr @behavior_wrapper(ptr %1705, { ptr, ptr, ptr, i32 } %1697, ptr nonnull %0)
  %1707 = call { ptr, i160 } %1706({ ptr, ptr, ptr, i32 } %1697, { ptr, ptr, ptr, i32 } %1697, ptr nonnull %0) #25
  %.fca.1.extract56 = extractvalue { ptr, i160 } %1707, 1
  %.sroa.052.0.insert.ext = and i160 %.fca.1.extract56, 4294967295
  %1708 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.052.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %248, align 8
  %1709 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %248)
  %1710 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %249, align 8
  %1711 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %249)
  call void %1711(ptr nonnull %248, { ptr, i160 } %1708) #25
  %1712 = call ptr @bump_malloc(i64 24)
  call void @anoint_trampoline(ptr %1712)
  call void @llvm.init.trampoline(ptr %1712, ptr nonnull @vpjwaexmjo, ptr nonnull @_functionliteral_aawmpodyms)
  %1713 = call ptr @adjust_trampoline(ptr %1712)
  %1714 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1712)
  %1715 = insertvalue { ptr } undef, ptr %1713, 0
  %1716 = call ptr @bump_malloc(i64 24)
  call void @anoint_trampoline(ptr %1716)
  call void @llvm.init.trampoline(ptr %1716, ptr nonnull @uubdoqxhvm, ptr nonnull @_functionliteral_iravxoewyu)
  %1717 = call ptr @adjust_trampoline(ptr %1716)
  %1718 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1716)
  %1719 = insertvalue { ptr } undef, ptr %1717, 0
  %1720 = call ptr @bump_malloc(i64 24)
  call void @anoint_trampoline(ptr %1720)
  call void @llvm.init.trampoline(ptr %1720, ptr nonnull @jthuxytxem, ptr nonnull @_functionliteral_mutpkxirlo)
  %1721 = call ptr @adjust_trampoline(ptr %1720)
  %1722 = call ptr @llvm.invariant.start.p0(i64 24, ptr %1720)
  %1723 = insertvalue { ptr } undef, ptr %1721, 0
  store ptr @Range, ptr %250, align 8
  %1724 = call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_Range, ptr nonnull %250)
  %1725 = extractvalue { i64, i64 } %1724, 0
  %1726 = call ptr @bump_malloc(i64 %1725)
  %1727 = insertvalue { ptr, ptr, ptr, i32 } { ptr @Range, ptr undef, ptr undef, i32 undef }, ptr %1726, 1
  %1728 = insertvalue { ptr, ptr, ptr, i32 } %1727, ptr undef, 2
  %1729 = insertvalue { ptr, ptr, ptr, i32 } %1728, i32 10, 3
  store ptr @_parameterization_i32, ptr %251, align 8
  %1730 = getelementptr inbounds i8, ptr %251, i64 8
  store ptr @_parameterization_i32, ptr %1730, align 8
  %1731 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %251)
  %1732 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  store ptr @i32_typ, ptr %252, align 8
  %1733 = getelementptr inbounds i8, ptr %252, i64 8
  store ptr @i32_typ, ptr %1733, align 8
  %1734 = call ptr @behavior_wrapper(ptr nonnull @Range_B_init_starti32_endi32, { ptr, ptr, ptr, i32 } %1729, ptr nonnull %252)
  call void %1734({ ptr, ptr, ptr, i32 } %1729, { ptr, ptr, ptr, i32 } %1729, ptr nonnull %251, i32 1, i32 15) #25
  store ptr @_parameterization_Functioni32_to_i32, ptr %253, align 8
  %1735 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %253)
  %1736 = call ptr @llvm.invariant.start.p0(i64 440, ptr nonnull @Range)
  store ptr @function_typ, ptr %254, align 8
  %1737 = call ptr @behavior_wrapper(ptr nonnull @Range_B_map_fFunctionT_to_U, { ptr, ptr, ptr, i32 } %1729, ptr nonnull %254)
  %1738 = call { ptr, ptr, ptr, i32 } %1737({ ptr, ptr, ptr, i32 } %1729, { ptr, ptr, ptr, i32 } %1729, ptr nonnull %253, { ptr } %1723) #25
  %.fca.0.extract24 = extractvalue { ptr, ptr, ptr, i32 } %1738, 0
  %.fca.1.extract25 = extractvalue { ptr, ptr, ptr, i32 } %1738, 1
  %.fca.2.extract26 = extractvalue { ptr, ptr, ptr, i32 } %1738, 2
  %.fca.3.extract27 = extractvalue { ptr, ptr, ptr, i32 } %1738, 3
  store ptr %.fca.0.extract24, ptr %255, align 8
  %1739 = getelementptr inbounds i8, ptr %255, i64 8
  store ptr %.fca.1.extract25, ptr %1739, align 8
  %1740 = getelementptr inbounds i8, ptr %255, i64 16
  store ptr %.fca.2.extract26, ptr %1740, align 8
  %1741 = getelementptr inbounds i8, ptr %255, i64 24
  store i32 %.fca.3.extract27, ptr %1741, align 8
  call void @set_offset(ptr nonnull %255, ptr nonnull @MapIterable)
  %1742 = load ptr, ptr %255, align 8
  %1743 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1742, 0
  %1744 = load ptr, ptr %1739, align 8
  %1745 = insertvalue { ptr, ptr, ptr, i32 } %1743, ptr %1744, 1
  %1746 = load ptr, ptr %1740, align 8
  %1747 = insertvalue { ptr, ptr, ptr, i32 } %1745, ptr %1746, 2
  %1748 = load i32, ptr %1741, align 8
  %1749 = insertvalue { ptr, ptr, ptr, i32 } %1747, i32 %1748, 3
  store ptr @_parameterization_Functioni32_to_i1, ptr %256, align 8
  %1750 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %256)
  %1751 = call ptr @llvm.invariant.start.p0(i64 408, ptr %1742)
  %1752 = sext i32 %1748 to i64
  %1753 = getelementptr ptr, ptr %1742, i64 %1752
  %1754 = getelementptr i8, ptr %1753, i64 88
  %1755 = load ptr, ptr %1754, align 8
  store ptr @function_typ, ptr %257, align 8
  %1756 = call ptr @behavior_wrapper(ptr %1755, { ptr, ptr, ptr, i32 } %1749, ptr nonnull %257)
  %1757 = call { ptr, ptr, ptr, i32 } %1756({ ptr, ptr, ptr, i32 } %1749, { ptr, ptr, ptr, i32 } %1749, ptr nonnull %256, { ptr } %1719) #25
  %.fca.0.extract21 = extractvalue { ptr, ptr, ptr, i32 } %1757, 0
  %.fca.1.extract22 = extractvalue { ptr, ptr, ptr, i32 } %1757, 1
  %.fca.2.extract = extractvalue { ptr, ptr, ptr, i32 } %1757, 2
  %.fca.3.extract = extractvalue { ptr, ptr, ptr, i32 } %1757, 3
  store ptr %.fca.0.extract21, ptr %258, align 8
  %1758 = getelementptr inbounds i8, ptr %258, i64 8
  store ptr %.fca.1.extract22, ptr %1758, align 8
  %1759 = getelementptr inbounds i8, ptr %258, i64 16
  store ptr %.fca.2.extract, ptr %1759, align 8
  %1760 = getelementptr inbounds i8, ptr %258, i64 24
  store i32 %.fca.3.extract, ptr %1760, align 8
  call void @set_offset(ptr nonnull %258, ptr nonnull @FilterIterable)
  %1761 = load ptr, ptr %258, align 8
  %1762 = insertvalue { ptr, ptr, ptr, i32 } undef, ptr %1761, 0
  %1763 = load ptr, ptr %1758, align 8
  %1764 = insertvalue { ptr, ptr, ptr, i32 } %1762, ptr %1763, 1
  %1765 = load ptr, ptr %1759, align 8
  %1766 = insertvalue { ptr, ptr, ptr, i32 } %1764, ptr %1765, 2
  %1767 = load i32, ptr %1760, align 8
  %1768 = insertvalue { ptr, ptr, ptr, i32 } %1766, i32 %1767, 3
  store ptr @_parameterization_i32, ptr %259, align 8
  %1769 = getelementptr inbounds i8, ptr %259, i64 8
  store ptr @_parameterization_Functioni32._i32_to_i32, ptr %1769, align 8
  %1770 = call ptr @llvm.invariant.start.p0(i64 4, ptr nonnull %259)
  %1771 = call ptr @llvm.invariant.start.p0(i64 400, ptr %1761)
  %1772 = sext i32 %1767 to i64
  %1773 = getelementptr ptr, ptr %1761, i64 %1772
  %1774 = getelementptr i8, ptr %1773, i64 48
  %1775 = load ptr, ptr %1774, align 8
  store ptr @i32_typ, ptr %260, align 8
  %1776 = getelementptr inbounds i8, ptr %260, i64 8
  store ptr @function_typ, ptr %1776, align 8
  %1777 = call ptr @behavior_wrapper(ptr %1775, { ptr, ptr, ptr, i32 } %1768, ptr nonnull %260)
  %1778 = call { ptr, i160 } %1777({ ptr, ptr, ptr, i32 } %1768, { ptr, ptr, ptr, i32 } %1768, ptr nonnull %259, { ptr, i160 } { ptr @i32_typ, i160 0 }, { ptr } %1715) #25
  %.fca.1.extract = extractvalue { ptr, i160 } %1778, 1
  %.sroa.013.0.insert.ext = and i160 %.fca.1.extract, 4294967295
  %1779 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.013.0.insert.ext, 1
  store ptr @_parameterization_i32, ptr %261, align 8
  %1780 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %261)
  %1781 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %262, align 8
  %1782 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %262)
  call void %1782(ptr nonnull %261, { ptr, i160 } %1779) #25
  store ptr @_parameterization_i32, ptr %263, align 8
  %1783 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %263)
  %1784 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %264, align 8
  %1785 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %264)
  call void %1785(ptr nonnull %263, { ptr, i160 } { ptr @i32_typ, i160 256 }) #25
  store ptr @_parameterization_i32, ptr %265, align 8
  %1786 = call ptr @llvm.invariant.start.p0(i64 1, ptr nonnull %265)
  %1787 = call ptr @llvm.invariant.start.p0(i64 80, ptr nonnull @IO)
  store ptr @i32_typ, ptr %266, align 8
  %1788 = call ptr @class_behavior_wrapper(ptr nonnull @IO_B__Self_print_xi32__Self_print_xi1__Self_print_xi8__Self_print_xCharacter__Self_print_xi64__Self_print_xNil__Self_print_xRepresentable__Self_print_xf64__Self_print_xString, ptr nonnull %266)
  call void %1788(ptr nonnull %265, { ptr, i160 } { ptr @i32_typ, i160 5 }) #25
  ret i32 0
}

define void @setup_landing_pad() {
  %region = call noalias ptr @VirtualAlloc(ptr null, i64 5368709120, i32 12288, i32 4) #30
  store ptr %region, ptr @current_ptr, align 8
  %buf_first_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 0
  %buf_second_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 1
  %buf_third_word = getelementptr [3 x ptr], ptr @into_caller_buf, i32 0, i32 2
  %sp = call ptr @llvm.stacksave.p0() #29
  store ptr %sp, ptr %buf_first_word, align 8
  store ptr blockaddress(@setup_landing_pad, %landing_pad), ptr %buf_second_word, align 8
  store ptr %sp, ptr %buf_third_word, align 8
  %current_coroutine = call ptr @coroutine_create(ptr @setup_landing_pad, ptr @arg_passer)
  store ptr %current_coroutine, ptr @current_coroutine, align 8
  %result = call i1 @returns_one()
  br i1 %result, label %exit, label %landing_pad

landing_pad:                                      ; preds = %0
  %ok = call i32 @printf(ptr @string_string, ptr @exception_message)
  %cc = load { ptr }, ptr @current_coroutine, align 8
  call void @report_exception({ ptr } %cc)
  call void @exit()
  unreachable

exit:                                             ; preds = %0
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

define ptr @coroutine_create(ptr %func, ptr %arg_passer) {
  %stack = call noalias ptr @VirtualAlloc(ptr null, i64 8388608, i32 12288, i32 4) #30
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 0
  store ptr %func, ptr %func_ptr, align 8
  %stack_top = getelementptr i8, ptr %stack, i64 8388608
  %stack_top_i64 = ptrtoint ptr %stack_top to i64
  %stack_top_aligned = and i64 %stack_top_i64, -16
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 1
  %arg_passer_slot = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 2
  %into_callee_first_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 0
  %into_callee_second_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 1
  %into_callee_third_word = getelementptr [3 x ptr], ptr %into_callee_buf, i32 0, i32 2
  store i64 %stack_top_aligned, ptr %into_callee_first_word, align 4
  store i64 %stack_top_aligned, ptr %into_callee_third_word, align 4
  store ptr %arg_passer, ptr %arg_passer_slot, align 8
  %is_finished = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %stack, i32 0, i32 3
  store i1 false, ptr %is_finished, align 1
  call void @coroutine_trampoline(ptr %into_callee_second_word)
  ret ptr %stack
}

define void @coroutine_call(ptr %coroutine) {
  %old_into_caller = load [3 x ptr], ptr @into_caller_buf, align 8
  %old_coroutine = load ptr, ptr @current_coroutine, align 8
  store ptr %coroutine, ptr @current_coroutine, align 8
  %into_callee_buf = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %coroutine, i32 0, i32 1
  call preserve_nonecc void @context_switch(ptr nocapture writeonly @into_caller_buf, ptr %into_callee_buf) #28
  store ptr %old_coroutine, ptr @current_coroutine, align 8
  store [3 x ptr] %old_into_caller, ptr @into_caller_buf, align 8
  ret void
}

define void @anoint_trampoline(ptr %tramp) {
  %oldProtect = alloca i32, align 4
  %result = call i32 @VirtualProtect(ptr %tramp, i64 16, i32 64, ptr %oldProtect) #20
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.init.trampoline(ptr nocapture writeonly, ptr readnone, ptr readnone) #3

define ptr @adjust_trampoline(ptr %tramp) {
  %ret = call ptr @llvm.adjust.trampoline(ptr %tramp) #31
  ret ptr %ret
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare ptr @llvm.adjust.trampoline(ptr) #19

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite)
declare i32 @VirtualProtect(ptr, i64, i32, ptr) #20

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1)
declare noalias ptr @VirtualAlloc(ptr, i64, i32, i32) #21

declare void @coroutine_trampoline(ptr)

define void @arg_passer(ptr %current_coroutine) {
  %func_ptr = getelementptr { ptr, [3 x ptr], ptr, i1 }, ptr %current_coroutine, i32 0, i32 0
  %func = load ptr, ptr %func_ptr, align 8
  call void %func()
  ret void
}

declare void @exit()

define { i64, i64 } @_data_size_tuple_typ(ptr %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %1
  %.in = phi i64 [ %22, %.lr.ph ], [ %3, %1 ]
  %5 = phi i64 [ %20, %.lr.ph ], [ 1, %1 ]
  %.reg2mem22.011 = phi i64 [ %19, %.lr.ph ], [ 0, %1 ]
  %.reg2mem20.010 = phi i64 [ %13, %.lr.ph ], [ 1, %1 ]
  %6 = inttoptr i64 %.in to ptr
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr i8, ptr %7, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { i64, i64 } %9(ptr nonnull %6)
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = extractvalue { i64, i64 } %10, 1
  %13 = tail call i64 @llvm.umax.i64(i64 %12, i64 %.reg2mem20.010)
  %14 = urem i64 %.reg2mem22.011, %12
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 %12, %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = add i64 %11, %.reg2mem22.011
  %19 = add i64 %18, %17
  %20 = add i64 %5, 1
  %21 = getelementptr ptr, ptr %0, i64 %20
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %1
  %.reg2mem20.0.lcssa = phi i64 [ 1, %1 ], [ %13, %.lr.ph ]
  %.reg2mem22.0.lcssa = phi i64 [ 0, %1 ], [ %19, %.lr.ph ]
  %24 = urem i64 %.reg2mem22.0.lcssa, %.reg2mem20.0.lcssa
  %25 = icmp eq i64 %24, 0
  %26 = sub i64 %.reg2mem20.0.lcssa, %24
  %27 = select i1 %25, i64 0, i64 %26
  %28 = add i64 %27, %.reg2mem22.0.lcssa
  %29 = insertvalue { i64, i64 } undef, i64 %28, 0
  %30 = insertvalue { i64, i64 } %29, i64 %.reg2mem20.0.lcssa, 1
  ret { i64, i64 } %30
}

define { i64, i64 } @_data_size_union_typ(ptr %0) {
  %2 = getelementptr i8, ptr %0, i64 8
  %3 = load i64, ptr %2, align 4
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %1
  %.in = phi i64 [ %22, %.lr.ph ], [ %3, %1 ]
  %5 = phi i64 [ %20, %.lr.ph ], [ 1, %1 ]
  %.reg2mem22.011 = phi i64 [ %19, %.lr.ph ], [ 0, %1 ]
  %.reg2mem20.010 = phi i64 [ %13, %.lr.ph ], [ 1, %1 ]
  %6 = inttoptr i64 %.in to ptr
  %7 = load ptr, ptr %6, align 8
  %8 = getelementptr i8, ptr %7, i64 72
  %9 = load ptr, ptr %8, align 8
  %10 = tail call { i64, i64 } %9(ptr nonnull %6)
  %11 = extractvalue { i64, i64 } %10, 0
  %12 = extractvalue { i64, i64 } %10, 1
  %13 = tail call i64 @llvm.umax.i64(i64 noundef %12, i64 noundef %.reg2mem20.010)
  %14 = urem i64 %.reg2mem22.011, %12
  %15 = icmp eq i64 %14, 0
  %16 = sub i64 %12, %14
  %17 = select i1 %15, i64 0, i64 %16
  %18 = tail call i64 @llvm.umax.i64(i64 noundef %11, i64 noundef %.reg2mem22.011)
  %19 = tail call i64 @llvm.umax.i64(i64 noundef %18, i64 noundef %17)
  %20 = add i64 %5, 1
  %21 = getelementptr ptr, ptr %0, i64 %20
  %22 = load i64, ptr %21, align 4
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %._crit_edge, label %.lr.ph

._crit_edge:                                      ; preds = %.lr.ph, %1
  %.reg2mem20.0.lcssa = phi i64 [ 1, %1 ], [ %13, %.lr.ph ]
  %.reg2mem22.0.lcssa = phi i64 [ 0, %1 ], [ %19, %.lr.ph ]
  %right_size = icmp eq i64 %.reg2mem22.0.lcssa, 32
  %flag_size = select i1 %right_size, i64 0, i64 8
  %final_size = add i64 %.reg2mem22.0.lcssa, %flag_size
  %24 = urem i64 %final_size, %.reg2mem20.0.lcssa
  %25 = icmp eq i64 %24, 0
  %26 = sub i64 %.reg2mem20.0.lcssa, %24
  %27 = select i1 %25, i64 0, i64 %26
  %28 = add i64 %27, %final_size
  %29 = insertvalue { i64, i64 } undef, i64 %28, 0
  %30 = insertvalue { i64, i64 } %29, i64 %.reg2mem20.0.lcssa, 1
  ret { i64, i64 } %30
}

define void @_unbox_union_typ({ ptr, i160 } %0, ptr %1, ptr %dest) {
  %3 = alloca { ptr, i160 }, align 8
  store { ptr, i160 } %0, ptr %3, align 8
  %4 = getelementptr { ptr, i160 }, ptr %3, i32 0, i32 1
  %5 = load ptr, ptr %4, align 8
  %6 = call { i64, i64 } @_data_size_union_typ(ptr %1)
  %size = extractvalue { i64, i64 } %6, 0
  %7 = icmp sle i64 %size, 16
  %8 = icmp eq i64 %size, 32
  %9 = select i1 %7, ptr %4, ptr %5
  %source = select i1 %8, ptr %3, ptr %9
  call void @llvm.memcpy.inline.p0.p0.i64(ptr %dest, ptr %source, i64 %size, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #22

define void @arg_buffer_filler(ptr %coroutine) {
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_bool_typ(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i1, ptr null, i32 1) to i64), i64 1 }
}

define { ptr, i160 } @_box_bool_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_bool_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @bool_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_bool_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_bool_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_any_typ(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 32, i64 8 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_Object(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 0, i64 1 }
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_i8_typ(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr (i8, ptr null, i32 1) to i64), i64 1 }
}

define { ptr, i160 } @_box_i8_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_i8_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @i8_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_i8_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_i8_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_i32_typ(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 4, i64 4 }
}

define { ptr, i160 } @_box_i32_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_i32_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @i32_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_i32_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_i32_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_i64_typ(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 8, i64 4 }
}

define { ptr, i160 } @_box_i64_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_i64_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @i64_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_i64_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_i64_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_f64_typ(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 8, i64 8 }
}

define { ptr, i160 } @_box_f64_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_f64_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @f64_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_f64_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_f64_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_nil_typ(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), i64 1 }
}

define { ptr, i160 } @_box_nil_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_nil_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @nil_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_nil_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_nil_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_nothing_typ(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 ptrtoint (ptr getelementptr ([0 x i8], ptr null, i32 1) to i64), i64 1 }
}

define { ptr, i160 } @_box_nothing_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_nothing_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @nothing_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_nothing_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_nothing_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_function_typ(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 8, i64 8 }
}

define { ptr, i160 } @_box_function_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_function_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @function_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_function_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_function_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
define { i64, i64 } @_data_size_buffer_typ(ptr nocapture readnone %0) #6 {
  ret { i64, i64 } { i64 8, i64 8 }
}

define { ptr, i160 } @_box_buffer_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.2 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_buffer_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp slt i64 %4, 17
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %7, ptr align 1 %0, i64 %4, i1 false)
  store ptr %7, ptr %.sroa.2, align 8
  br label %9

8:                                                ; preds = %2
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.2, ptr align 1 %0, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %8, %6
  %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8. = load i160, ptr %.sroa.2, align 8
  %10 = insertvalue { ptr, i160 } { ptr @buffer_typ, i160 undef }, i160 %.sroa.2.0..sroa.2.0..sroa.2.0..sroa.2.8., 1
  ret { ptr, i160 } %10
}

define void @_unbox_buffer_typ({ ptr, i160 } %0, ptr %1, ptr nocapture writeonly %2) {
  %4 = alloca { ptr, i160 }, align 8
  %.fca.0.extract = extractvalue { ptr, i160 } %0, 0
  store ptr %.fca.0.extract, ptr %4, align 8
  %.fca.1.extract = extractvalue { ptr, i160 } %0, 1
  %.fca.1.gep = getelementptr inbounds i8, ptr %4, i64 8
  store i160 %.fca.1.extract, ptr %.fca.1.gep, align 8
  %5 = load ptr, ptr %.fca.1.gep, align 8
  %6 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_buffer_typ, ptr %1)
  %7 = extractvalue { i64, i64 } %6, 0
  %8 = icmp slt i64 %7, 17
  %9 = select i1 %8, ptr %.fca.1.gep, ptr %5
  call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %2, ptr align 1 %9, i64 %7, i1 false)
  ret void
}

define { ptr, i160 } @_box_union_typ(ptr nocapture readonly %0, ptr %1) {
  %.sroa.3 = alloca [24 x i8], align 8
  %3 = tail call { i64, i64 } @size_wrapper(ptr nonnull @_data_size_union_typ, ptr %1)
  %4 = extractvalue { i64, i64 } %3, 0
  %5 = icmp eq i64 %4, 32
  br i1 %5, label %6, label %10

6:                                                ; preds = %2
  %7 = load ptr, ptr %0, align 8
  %8 = getelementptr i8, ptr %0, i64 8
  %9 = load i160, ptr %8, align 4
  store i160 %9, ptr %.sroa.3, align 8
  br label %15

10:                                               ; preds = %2
  %11 = icmp slt i64 %4, 17
  br i1 %11, label %14, label %12

12:                                               ; preds = %10
  %13 = tail call ptr @bump_malloc(i64 %4)
  tail call void @llvm.memcpy.inline.p0.p0.i64(ptr align 1 %13, ptr align 1 %0, i64 %4, i1 false)
  store ptr %13, ptr %.sroa.3, align 8
  br label %15

14:                                               ; preds = %10
  call void @llvm.memcpy.inline.p0.p0.i64(ptr nonnull align 8 %.sroa.3, ptr align 1 %0, i64 %4, i1 false)
  br label %15

15:                                               ; preds = %14, %12, %6
  %.sroa.0.0 = phi ptr [ %7, %6 ], [ @union_typ, %14 ], [ @union_typ, %12 ]
  %16 = insertvalue { ptr, i160 } undef, ptr %.sroa.0.0, 0
  %.sroa.3.0..sroa.3.0..sroa.3.0..sroa.3.8. = load i160, ptr %.sroa.3, align 8
  %17 = insertvalue { ptr, i160 } %16, i160 %.sroa.3.0..sroa.3.0..sroa.3.0..sroa.3.8., 1
  ret { ptr, i160 } %17
}

attributes #0 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(argmem: read) }
attributes #1 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: read) }
attributes #2 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, argmem: readwrite, inaccessiblemem: none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
attributes #7 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #8 = { mustprogress nofree norecurse nosync nounwind speculatable willreturn memory(read, inaccessiblemem: none) }
attributes #9 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) }
attributes #10 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #11 = { mustprogress nofree noinline nounwind willreturn allockind("alloc,zeroed") allocsize(0) "alloc-family"="malloc" }
attributes #12 = { noinline nounwind memory(readwrite) }
attributes #13 = { nocallback nofree nosync nounwind willreturn }
attributes #14 = { noreturn nounwind }
attributes #15 = { nofree nounwind }
attributes #16 = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) }
attributes #17 = { nofree nosync nounwind memory(none) }
attributes #18 = { noreturn }
attributes #19 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #20 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #21 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(1) "alloc-family"="malloc" }
attributes #22 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #23 = { nounwind willreturn memory(argmem: readwrite) }
attributes #24 = { nounwind willreturn memory(argmem: read, inaccessiblemem: readwrite) }
attributes #25 = { nounwind }
attributes #26 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) }
attributes #27 = { mustprogress nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #28 = { nounwind memory(readwrite) }
attributes #29 = { mustprogress nofree nosync nounwind willreturn }
attributes #30 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(1) "alloc-family"="malloc" }
attributes #31 = { mustprogress nofree nosync nounwind willreturn memory(argmem: read) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
