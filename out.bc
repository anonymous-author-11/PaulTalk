; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@int_string = internal constant [4 x i8] c"%d\0A\00"
@float_string = internal constant [4 x i8] c"%f\0A\00"
@string_string = internal constant [4 x i8] c"%s\0A\00"
@bool_typ = internal constant i8 0
@i32_typ = internal constant i8 0
@f64_typ = internal constant i8 0
@i64_typ = internal constant i8 0
@f32_typ = internal constant i8 0
@i128_typ = internal constant i8 0
@nil_typ = internal constant i8 0
@error_typ = internal constant i8 0
@Animal = internal constant [5 x ptr] [ptr @Animal_init_5, ptr @Animal_say_age_6, ptr @Animal_say_skill_7, ptr @Animal_say_8, ptr @Animal_do_nothing_9]
@Beaver = internal constant [1 x ptr] [ptr @Beaver_init_1]
@ListNode = internal constant [4 x ptr] [ptr @ListNode_init_4, ptr @ListNode_push_5, ptr @ListNode_next_6, ptr @ListNode_data_7]
@Range = internal constant [3 x ptr] [ptr @Range_init_2, ptr @Range_next_3, ptr @Range_next_4]

declare ptr @malloc(i64)

declare void @free(ptr)

declare ptr @coroutine_create(ptr, ptr)

declare void @coroutine_trampoline()

declare void @coroutine_yield()

declare void @coroutine_resume(ptr)

declare i32 @printf(ptr, ...)

define void @Animal_init_5({ ptr, ptr, i32 } %0, i32 %1, double %2, i32 %3) {
  %5 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 8, ptr %5)
  %7 = load { ptr, ptr, i32 }, ptr %5, align 8
  %8 = extractvalue { ptr, ptr, i32 } %7, 1
  %9 = getelementptr { i32, double, i32 }, ptr %8, i32 0, i32 0
  store i32 %1, ptr %9, align 4
  %10 = load { ptr, ptr, i32 }, ptr %5, align 8
  %11 = extractvalue { ptr, ptr, i32 } %10, 1
  %12 = getelementptr { i32, double, i32 }, ptr %11, i32 0, i32 1
  store double %2, ptr %12, align 8
  %13 = load { ptr, ptr, i32 }, ptr %5, align 8
  %14 = extractvalue { ptr, ptr, i32 } %13, 1
  %15 = getelementptr { i32, double, i32 }, ptr %14, i32 0, i32 2
  store i32 %3, ptr %15, align 4
  ret void
}

define void @Animal_say_age_6({ ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %2)
  %4 = load { ptr, ptr, i32 }, ptr %2, align 8
  %5 = extractvalue { ptr, ptr, i32 } %4, 1
  %6 = getelementptr { i32, double, i32 }, ptr %5, i32 0, i32 0
  %7 = load i32, ptr %6, align 4
  %8 = extractvalue { ptr, ptr, i32 } %4, 0
  %9 = call ptr @llvm.invariant.start.p0(i64 40, ptr %8)
  %10 = load [5 x ptr], ptr %8, align 8
  %11 = extractvalue [5 x ptr] %10, 3
  call void %11({ ptr, ptr, i32 } %4, i32 %7)
  %12 = load { ptr, ptr, i32 }, ptr %2, align 8
  %13 = extractvalue { ptr, ptr, i32 } %12, 1
  %14 = getelementptr { i32, double, i32 }, ptr %13, i32 0, i32 0
  %15 = load i32, ptr %14, align 4
  %16 = extractvalue { ptr, ptr, i32 } %12, 0
  %17 = call ptr @llvm.invariant.start.p0(i64 40, ptr %16)
  %18 = load [5 x ptr], ptr %16, align 8
  %19 = extractvalue [5 x ptr] %18, 3
  call void %19({ ptr, ptr, i32 } %12, i32 %15)
  ret void
}

define void @Animal_say_skill_7({ ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %2)
  %4 = load { ptr, ptr, i32 }, ptr %2, align 8
  %5 = extractvalue { ptr, ptr, i32 } %4, 1
  %6 = getelementptr { i32, double, i32 }, ptr %5, i32 0, i32 2
  br i1 true, label %7, label %11

7:                                                ; preds = %1
  %8 = load i32, ptr %6, align 4
  %9 = call i32 (ptr, ...) @printf(ptr @int_string, i32 %8)
  %10 = load i32, ptr %6, align 4
  store i32 %10, ptr %6, align 4
  br label %11

11:                                               ; preds = %7, %1
  ret void
}

define void @Animal_say_8({ ptr, ptr, i32 } %0, i32 %1) {
  %3 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %0, ptr %3, align 8
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %3)
  %5 = call i32 (ptr, ...) @printf(ptr @int_string, i32 %1)
  ret void
}

define { i128, i64 } @Animal_do_nothing_9({ ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %2)
  %4 = call ptr @malloc(i64 16)
  %5 = alloca { ptr, ptr, i32 }, align 8
  %6 = getelementptr { ptr, ptr, i32 }, ptr %5, i32 0, i32 1
  store ptr @Animal, ptr %5, align 8
  store ptr %4, ptr %6, align 8
  %7 = load { ptr, ptr, i32 }, ptr %5, align 8
  %8 = extractvalue { ptr, ptr, i32 } %7, 0
  %9 = call ptr @llvm.invariant.start.p0(i64 40, ptr %8)
  %10 = load [5 x ptr], ptr %8, align 8
  %11 = extractvalue [5 x ptr] %10, 0
  call void %11({ ptr, ptr, i32 } %7, i32 5, double 5.000000e+00, i32 5)
  %12 = alloca { i128, i64 }, align 8
  %13 = load { ptr, ptr, i32 }, ptr %5, align 8
  store { ptr, ptr, i32 } %13, ptr %12, align 8
  %14 = getelementptr { i128, i64 }, ptr %12, i32 0, i32 1
  store i64 ptrtoint (ptr @Animal to i64), ptr %14, align 4
  %15 = load { i128, i64 }, ptr %12, align 4
  ret { i128, i64 } %15
}

define void @Beaver_init_1({ ptr, ptr, i32 } %0, i32 %1, double %2) {
  %4 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %0, ptr %4, align 8
  %5 = call ptr @llvm.invariant.start.p0(i64 8, ptr %4)
  %6 = load { ptr, ptr, i32 }, ptr %4, align 8
  %7 = extractvalue { ptr, ptr, i32 } %6, 1
  %8 = getelementptr { i32, double }, ptr %7, i32 0, i32 0
  store i32 %1, ptr %8, align 4
  %9 = load { ptr, ptr, i32 }, ptr %4, align 8
  %10 = extractvalue { ptr, ptr, i32 } %9, 1
  %11 = getelementptr { i32, double }, ptr %10, i32 0, i32 1
  store double %2, ptr %11, align 8
  ret void
}

define void @ListNode_init_4({ ptr, ptr, i32 } %0, i32 %1) {
  %3 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %0, ptr %3, align 8
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %3)
  %5 = load { ptr, ptr, i32 }, ptr %3, align 8
  %6 = extractvalue { ptr, ptr, i32 } %5, 1
  %7 = getelementptr { i32, { i128, i64 } }, ptr %6, i32 0, i32 0
  store i32 %1, ptr %7, align 4
  ret void
}

define { ptr, ptr, i32 } @ListNode_push_5({ ptr, ptr, i32 } %0, { ptr, ptr, i32 } %1) {
  %3 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %1, ptr %3, align 8
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %3)
  %5 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %0, ptr %5, align 8
  %6 = call ptr @llvm.invariant.start.p0(i64 8, ptr %5)
  %7 = load { ptr, ptr, i32 }, ptr %5, align 8
  %8 = extractvalue { ptr, ptr, i32 } %7, 1
  %9 = getelementptr { i32, { i128, i64 } }, ptr %8, i32 0, i32 1
  %10 = load { ptr, ptr, i32 }, ptr %3, align 8
  store { ptr, ptr, i32 } %10, ptr %9, align 8
  %11 = getelementptr { i128, i64 }, ptr %9, i32 0, i32 1
  store i64 ptrtoint (ptr @ListNode to i64), ptr %11, align 4
  %12 = load { ptr, ptr, i32 }, ptr %3, align 8
  ret { ptr, ptr, i32 } %12
}

define { i128, i64 } @ListNode_next_6({ ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %2)
  %4 = load { ptr, ptr, i32 }, ptr %2, align 8
  %5 = extractvalue { ptr, ptr, i32 } %4, 1
  %6 = getelementptr { i32, { i128, i64 } }, ptr %5, i32 0, i32 1
  %7 = load { i128, i64 }, ptr %6, align 4
  ret { i128, i64 } %7
}

define i32 @ListNode_data_7({ ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %2)
  %4 = load { ptr, ptr, i32 }, ptr %2, align 8
  %5 = extractvalue { ptr, ptr, i32 } %4, 1
  %6 = getelementptr { i32, { i128, i64 } }, ptr %5, i32 0, i32 0
  %7 = load i32, ptr %6, align 4
  ret i32 %7
}

define void @make_em_speak({ ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %2)
  %4 = load { ptr, ptr, i32 }, ptr %2, align 8
  %5 = extractvalue { ptr, ptr, i32 } %4, 0
  %6 = call ptr @llvm.invariant.start.p0(i64 40, ptr %5)
  %7 = load [5 x ptr], ptr %5, align 8
  %8 = extractvalue [5 x ptr] %7, 1
  call void %8({ ptr, ptr, i32 } %4)
  ret void
}

define i32 @fibonacci(i32 %0) {
  %2 = icmp slt i32 %0, 2
  br i1 %2, label %3, label %4

3:                                                ; preds = %1
  br label %24

4:                                                ; preds = %1
  %5 = alloca i32, align 4
  store i32 2, ptr %5, align 4
  %6 = load i32, ptr %5, align 4
  %7 = sub i32 %0, %6
  %8 = alloca i32, align 4
  store i32 %7, ptr %8, align 4
  %9 = load i32, ptr %8, align 4
  %10 = call i32 @fibonacci(i32 %9)
  %11 = alloca i32, align 4
  store i32 %10, ptr %11, align 4
  %12 = alloca i32, align 4
  store i32 1, ptr %12, align 4
  %13 = load i32, ptr %12, align 4
  %14 = sub i32 %0, %13
  %15 = alloca i32, align 4
  store i32 %14, ptr %15, align 4
  %16 = load i32, ptr %15, align 4
  %17 = call i32 @fibonacci(i32 %16)
  %18 = alloca i32, align 4
  store i32 %17, ptr %18, align 4
  %19 = load i32, ptr %11, align 4
  %20 = load i32, ptr %18, align 4
  %21 = add i32 %19, %20
  %22 = alloca i32, align 4
  store i32 %21, ptr %22, align 4
  %23 = load i32, ptr %22, align 4
  br label %24

24:                                               ; preds = %3, %4
  %25 = phi i32 [ %23, %4 ], [ %0, %3 ]
  ret i32 %25
}

define i32 @factorial(i32 %0) {
  %2 = icmp slt i32 %0, 2
  br i1 %2, label %3, label %6

3:                                                ; preds = %1
  %4 = alloca i32, align 4
  store i32 1, ptr %4, align 4
  %5 = load i32, ptr %4, align 4
  br label %18

6:                                                ; preds = %1
  %7 = alloca i32, align 4
  store i32 1, ptr %7, align 4
  %8 = load i32, ptr %7, align 4
  %9 = sub i32 %0, %8
  %10 = alloca i32, align 4
  store i32 %9, ptr %10, align 4
  %11 = load i32, ptr %10, align 4
  %12 = call i32 @factorial(i32 %11)
  %13 = alloca i32, align 4
  store i32 %12, ptr %13, align 4
  %14 = load i32, ptr %13, align 4
  %15 = mul i32 %0, %14
  %16 = alloca i32, align 4
  store i32 %15, ptr %16, align 4
  %17 = load i32, ptr %16, align 4
  br label %18

18:                                               ; preds = %3, %6
  %19 = phi i32 [ %17, %6 ], [ %5, %3 ]
  ret i32 %19
}

define void @print88() {
  %1 = call i32 (ptr, ...) @printf(ptr @int_string, i32 88)
  call void @coroutine_yield()
  %2 = call i32 (ptr, ...) @printf(ptr @int_string, i32 90)
  ret void
}

define void @Range_init_2({ ptr, ptr, i32 } %0, i32 %1) {
  %3 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %0, ptr %3, align 8
  %4 = call ptr @llvm.invariant.start.p0(i64 8, ptr %3)
  %5 = load { ptr, ptr, i32 }, ptr %3, align 8
  %6 = extractvalue { ptr, ptr, i32 } %5, 1
  %7 = getelementptr { i32, i32 }, ptr %6, i32 0, i32 1
  store i32 %1, ptr %7, align 4
  %8 = load { ptr, ptr, i32 }, ptr %3, align 8
  %9 = extractvalue { ptr, ptr, i32 } %8, 1
  %10 = getelementptr { i32, i32 }, ptr %9, i32 0, i32 0
  store i32 0, ptr %10, align 4
  ret void
}

define { i32, i64 } @Range_next_3({ ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %2)
  %4 = load { ptr, ptr, i32 }, ptr %2, align 8
  %5 = extractvalue { ptr, ptr, i32 } %4, 1
  %6 = getelementptr { i32, i32 }, ptr %5, i32 0, i32 0
  %7 = load i32, ptr %6, align 4
  %8 = add i32 %7, 1
  store i32 %8, ptr %6, align 4
  %9 = load { ptr, ptr, i32 }, ptr %2, align 8
  %10 = extractvalue { ptr, ptr, i32 } %9, 1
  %11 = getelementptr { i32, i32 }, ptr %10, i32 0, i32 0
  %12 = getelementptr { i32, i32 }, ptr %10, i32 0, i32 1
  %13 = load i32, ptr %11, align 4
  %14 = load i32, ptr %12, align 4
  %15 = icmp eq i32 %13, %14
  %16 = alloca { i32, i64 }, align 8
  store i32 %13, ptr %16, align 4
  %17 = getelementptr { i32, i64 }, ptr %16, i32 0, i32 1
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %17, align 4
  br i1 %15, label %18, label %21

18:                                               ; preds = %1
  store [0 x i8] undef, ptr %16, align 1
  %19 = alloca i64, align 8
  store i64 ptrtoint (ptr @nil_typ to i64), ptr %19, align 4
  %20 = load i64, ptr %19, align 4
  store i64 %20, ptr %17, align 4
  br label %21

21:                                               ; preds = %18, %1
  %22 = load { i32, i64 }, ptr %16, align 4
  ret { i32, i64 } %22
}

define void @Range_next_4({ ptr, ptr, i32 } %0) {
  %2 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %0, ptr %2, align 8
  %3 = call ptr @llvm.invariant.start.p0(i64 8, ptr %2)
  ret void
}

define i32 @main() {
  %1 = call ptr @malloc(i64 16)
  %2 = alloca { ptr, ptr, i32 }, align 8
  %3 = getelementptr { ptr, ptr, i32 }, ptr %2, i32 0, i32 1
  store ptr @Animal, ptr %2, align 8
  store ptr %1, ptr %3, align 8
  %4 = load { ptr, ptr, i32 }, ptr %2, align 8
  %5 = extractvalue { ptr, ptr, i32 } %4, 0
  %6 = call ptr @llvm.invariant.start.p0(i64 40, ptr %5)
  %7 = load [5 x ptr], ptr %5, align 8
  %8 = extractvalue [5 x ptr] %7, 0
  call void %8({ ptr, ptr, i32 } %4, i32 55, double 8.000000e+00, i32 13)
  %9 = load { ptr, ptr, i32 }, ptr %2, align 8
  %10 = call ptr @malloc(i64 12)
  %11 = alloca { ptr, ptr, i32 }, align 8
  %12 = getelementptr { ptr, ptr, i32 }, ptr %11, i32 0, i32 1
  store ptr @Beaver, ptr %11, align 8
  store ptr %10, ptr %12, align 8
  %13 = load { ptr, ptr, i32 }, ptr %11, align 8
  %14 = extractvalue { ptr, ptr, i32 } %13, 0
  %15 = call ptr @llvm.invariant.start.p0(i64 8, ptr %14)
  %16 = load [1 x ptr], ptr %14, align 8
  %17 = extractvalue [1 x ptr] %16, 0
  call void %17({ ptr, ptr, i32 } %13, i32 10, double 1.000000e+01)
  call void @make_em_speak({ ptr, ptr, i32 } %9)
  %18 = extractvalue { ptr, ptr, i32 } %9, 0
  %19 = call ptr @llvm.invariant.start.p0(i64 40, ptr %18)
  %20 = load [5 x ptr], ptr %18, align 8
  %21 = extractvalue [5 x ptr] %20, 4
  %22 = call { i128, i64 } %21({ ptr, ptr, i32 } %9)
  %23 = alloca { i128, i64 }, align 8
  store i32 5, ptr %23, align 4
  %24 = getelementptr { i128, i64 }, ptr %23, i32 0, i32 1
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %24, align 4
  br label %25

25:                                               ; preds = %72, %0
  %26 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %26, align 4
  %27 = load i64, ptr %24, align 4
  %28 = load i64, ptr %26, align 4
  %29 = icmp eq i64 %27, %28
  %30 = alloca i1, align 1
  store i1 %29, ptr %30, align 1
  %31 = load i1, ptr %30, align 1
  br i1 %31, label %32, label %75

32:                                               ; preds = %25
  %33 = load i32, ptr %23, align 4
  %34 = call i32 (ptr, ...) @printf(ptr @int_string, i32 %33)
  %35 = alloca i32, align 4
  store i32 1, ptr %35, align 4
  %36 = load i32, ptr %23, align 4
  %37 = load i32, ptr %35, align 4
  %38 = add i32 %36, %37
  %39 = alloca i32, align 4
  store i32 %38, ptr %39, align 4
  %40 = load i32, ptr %39, align 4
  store i32 %40, ptr %23, align 4
  %41 = alloca i32, align 4
  store i32 9, ptr %41, align 4
  %42 = load i32, ptr %23, align 4
  %43 = load i32, ptr %41, align 4
  %44 = icmp eq i32 %42, %43
  %45 = alloca i1, align 1
  store i1 %44, ptr %45, align 1
  %46 = load i1, ptr %45, align 1
  %47 = alloca { i128, i64 }, align 8
  %48 = load i32, ptr %23, align 4
  store i32 %48, ptr %47, align 4
  %49 = getelementptr { i128, i64 }, ptr %47, i32 0, i32 1
  %50 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %50, align 4
  %51 = load i64, ptr %50, align 4
  store i64 %51, ptr %49, align 4
  br i1 %46, label %52, label %72

52:                                               ; preds = %32
  %53 = alloca i32, align 4
  store i32 65, ptr %53, align 4
  %54 = alloca double, align 8
  store double 1.800000e+01, ptr %54, align 8
  %55 = alloca i32, align 4
  store i32 23, ptr %55, align 4
  %56 = load i32, ptr %53, align 4
  %57 = load double, ptr %54, align 8
  %58 = load i32, ptr %55, align 4
  %59 = call ptr @malloc(i64 16)
  %60 = alloca { ptr, ptr, i32 }, align 8
  %61 = getelementptr { ptr, ptr, i32 }, ptr %60, i32 0, i32 1
  store ptr @Animal, ptr %60, align 8
  store ptr %59, ptr %61, align 8
  %62 = load { ptr, ptr, i32 }, ptr %60, align 8
  %63 = extractvalue { ptr, ptr, i32 } %62, 0
  %64 = call ptr @llvm.invariant.start.p0(i64 40, ptr %63)
  %65 = load [5 x ptr], ptr %63, align 8
  %66 = extractvalue [5 x ptr] %65, 0
  call void %66({ ptr, ptr, i32 } %62, i32 %56, double %57, i32 %58)
  %67 = load { ptr, ptr, i32 }, ptr %60, align 8
  %68 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %67, ptr %68, align 8
  %69 = load { ptr, ptr, i32 }, ptr %68, align 8
  store { ptr, ptr, i32 } %69, ptr %47, align 8
  %70 = alloca i64, align 8
  store i64 ptrtoint (ptr @Animal to i64), ptr %70, align 4
  %71 = load i64, ptr %70, align 4
  store i64 %71, ptr %49, align 4
  br label %72

72:                                               ; preds = %52, %32
  %73 = load i128, ptr %47, align 4
  store i128 %73, ptr %23, align 4
  %74 = load i64, ptr %49, align 4
  store i64 %74, ptr %24, align 4
  br label %25

75:                                               ; preds = %25
  %76 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %76, align 4
  %77 = load i64, ptr %24, align 4
  %78 = load i64, ptr %76, align 4
  %79 = icmp eq i64 %77, %78
  %80 = alloca i1, align 1
  store i1 %79, ptr %80, align 1
  %81 = load i1, ptr %80, align 1
  br i1 %81, label %82, label %86

82:                                               ; preds = %75
  %83 = load i32, ptr %23, align 4
  %84 = call i32 (ptr, ...) @printf(ptr @int_string, i32 %83)
  %85 = load i32, ptr %23, align 4
  store i32 %85, ptr %23, align 4
  br label %86

86:                                               ; preds = %82, %75
  %87 = alloca i64, align 8
  store i64 ptrtoint (ptr @Animal to i64), ptr %87, align 4
  %88 = load i64, ptr %24, align 4
  %89 = load i64, ptr %87, align 4
  %90 = icmp eq i64 %88, %89
  %91 = alloca i1, align 1
  store i1 %90, ptr %91, align 1
  %92 = load i1, ptr %91, align 1
  br i1 %92, label %93, label %96

93:                                               ; preds = %86
  %94 = load { ptr, ptr, i32 }, ptr %23, align 8
  call void @make_em_speak({ ptr, ptr, i32 } %94)
  %95 = load { ptr, ptr, i32 }, ptr %23, align 8
  store { ptr, ptr, i32 } %95, ptr %23, align 8
  br label %96

96:                                               ; preds = %93, %86
  %97 = call ptr @llvm.invariant.start.p0(i64 40, ptr %18)
  %98 = load [5 x ptr], ptr %18, align 8
  %99 = extractvalue [5 x ptr] %98, 2
  call void %99({ ptr, ptr, i32 } %9)
  %100 = alloca i32, align 4
  store i32 1, ptr %100, align 4
  %101 = alloca i32, align 4
  store i32 0, ptr %101, align 4
  %102 = load i32, ptr %101, align 4
  %103 = call ptr @malloc(i64 28)
  %104 = alloca { ptr, ptr, i32 }, align 8
  %105 = getelementptr { ptr, ptr, i32 }, ptr %104, i32 0, i32 1
  store ptr @ListNode, ptr %104, align 8
  store ptr %103, ptr %105, align 8
  %106 = load { ptr, ptr, i32 }, ptr %104, align 8
  %107 = extractvalue { ptr, ptr, i32 } %106, 0
  %108 = call ptr @llvm.invariant.start.p0(i64 32, ptr %107)
  %109 = load [4 x ptr], ptr %107, align 8
  %110 = extractvalue [4 x ptr] %109, 0
  call void %110({ ptr, ptr, i32 } %106, i32 %102)
  %111 = load { ptr, ptr, i32 }, ptr %104, align 8
  %112 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %111, ptr %112, align 8
  %113 = load { ptr, ptr, i32 }, ptr %112, align 8
  %114 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %113, ptr %114, align 8
  br label %115

115:                                              ; preds = %122, %96
  %116 = alloca i32, align 4
  store i32 10, ptr %116, align 4
  %117 = load i32, ptr %100, align 4
  %118 = load i32, ptr %116, align 4
  %119 = icmp slt i32 %117, %118
  %120 = alloca i1, align 1
  store i1 %119, ptr %120, align 1
  %121 = load i1, ptr %120, align 1
  br i1 %121, label %122, label %147

122:                                              ; preds = %115
  %123 = load i32, ptr %100, align 4
  %124 = call ptr @malloc(i64 28)
  %125 = alloca { ptr, ptr, i32 }, align 8
  %126 = getelementptr { ptr, ptr, i32 }, ptr %125, i32 0, i32 1
  store ptr @ListNode, ptr %125, align 8
  store ptr %124, ptr %126, align 8
  %127 = load { ptr, ptr, i32 }, ptr %125, align 8
  %128 = extractvalue { ptr, ptr, i32 } %127, 0
  %129 = call ptr @llvm.invariant.start.p0(i64 32, ptr %128)
  %130 = load [4 x ptr], ptr %128, align 8
  %131 = extractvalue [4 x ptr] %130, 0
  call void %131({ ptr, ptr, i32 } %127, i32 %123)
  %132 = load { ptr, ptr, i32 }, ptr %125, align 8
  %133 = load { ptr, ptr, i32 }, ptr %114, align 8
  %134 = extractvalue { ptr, ptr, i32 } %133, 0
  %135 = call ptr @llvm.invariant.start.p0(i64 32, ptr %134)
  %136 = load [4 x ptr], ptr %134, align 8
  %137 = extractvalue [4 x ptr] %136, 1
  %138 = call { ptr, ptr, i32 } %137({ ptr, ptr, i32 } %133, { ptr, ptr, i32 } %132)
  %139 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %138, ptr %139, align 8
  %140 = load { ptr, ptr, i32 }, ptr %139, align 8
  store { ptr, ptr, i32 } %140, ptr %114, align 8
  %141 = alloca i32, align 4
  store i32 1, ptr %141, align 4
  %142 = load i32, ptr %100, align 4
  %143 = load i32, ptr %141, align 4
  %144 = add i32 %142, %143
  %145 = alloca i32, align 4
  store i32 %144, ptr %145, align 4
  %146 = load i32, ptr %145, align 4
  store i32 %146, ptr %100, align 4
  br label %115

147:                                              ; preds = %115
  %148 = alloca i32, align 4
  store i32 0, ptr %148, align 4
  %149 = load i32, ptr %148, align 4
  store i32 %149, ptr %100, align 4
  %150 = load { ptr, ptr, i32 }, ptr %112, align 8
  %151 = extractvalue { ptr, ptr, i32 } %150, 0
  %152 = call ptr @llvm.invariant.start.p0(i64 32, ptr %151)
  %153 = load [4 x ptr], ptr %151, align 8
  %154 = extractvalue [4 x ptr] %153, 2
  %155 = call { i128, i64 } %154({ ptr, ptr, i32 } %150)
  %156 = alloca { i128, i64 }, align 8
  store { i128, i64 } %155, ptr %156, align 4
  br label %157

157:                                              ; preds = %165, %147
  %158 = getelementptr { i128, i64 }, ptr %156, i32 0, i32 1
  %159 = alloca i64, align 8
  store i64 ptrtoint (ptr @ListNode to i64), ptr %159, align 4
  %160 = load i64, ptr %158, align 4
  %161 = load i64, ptr %159, align 4
  %162 = icmp eq i64 %160, %161
  %163 = alloca i1, align 1
  store i1 %162, ptr %163, align 1
  %164 = load i1, ptr %163, align 1
  br i1 %164, label %165, label %185

165:                                              ; preds = %157
  %166 = load { ptr, ptr, i32 }, ptr %156, align 8
  %167 = extractvalue { ptr, ptr, i32 } %166, 0
  %168 = call ptr @llvm.invariant.start.p0(i64 32, ptr %167)
  %169 = load [4 x ptr], ptr %167, align 8
  %170 = extractvalue [4 x ptr] %169, 3
  %171 = call i32 %170({ ptr, ptr, i32 } %166)
  %172 = alloca i32, align 4
  store i32 %171, ptr %172, align 4
  %173 = load i32, ptr %172, align 4
  %174 = call i32 (ptr, ...) @printf(ptr @int_string, i32 %173)
  %175 = load { ptr, ptr, i32 }, ptr %156, align 8
  %176 = extractvalue { ptr, ptr, i32 } %175, 0
  %177 = call ptr @llvm.invariant.start.p0(i64 32, ptr %176)
  %178 = load [4 x ptr], ptr %176, align 8
  %179 = extractvalue [4 x ptr] %178, 2
  %180 = call { i128, i64 } %179({ ptr, ptr, i32 } %175)
  %181 = alloca { i128, i64 }, align 8
  store { i128, i64 } %180, ptr %181, align 4
  %182 = load i128, ptr %181, align 4
  %183 = getelementptr { i128, i64 }, ptr %181, i32 0, i32 1
  store i128 %182, ptr %156, align 4
  %184 = load i64, ptr %183, align 4
  store i64 %184, ptr %158, align 4
  br label %157

185:                                              ; preds = %157
  %186 = alloca i32, align 4
  store i32 20, ptr %186, align 4
  %187 = load i32, ptr %186, align 4
  %188 = call ptr @malloc(i64 8)
  %189 = alloca { ptr, ptr, i32 }, align 8
  %190 = getelementptr { ptr, ptr, i32 }, ptr %189, i32 0, i32 1
  store ptr @Range, ptr %189, align 8
  store ptr %188, ptr %190, align 8
  %191 = load { ptr, ptr, i32 }, ptr %189, align 8
  %192 = extractvalue { ptr, ptr, i32 } %191, 0
  %193 = call ptr @llvm.invariant.start.p0(i64 24, ptr %192)
  %194 = load [3 x ptr], ptr %192, align 8
  %195 = extractvalue [3 x ptr] %194, 0
  call void %195({ ptr, ptr, i32 } %191, i32 %187)
  %196 = load { ptr, ptr, i32 }, ptr %189, align 8
  %197 = alloca { ptr, ptr, i32 }, align 8
  store { ptr, ptr, i32 } %196, ptr %197, align 8
  %198 = load { ptr, ptr, i32 }, ptr %197, align 8
  %199 = extractvalue { ptr, ptr, i32 } %198, 0
  %200 = call ptr @llvm.invariant.start.p0(i64 24, ptr %199)
  %201 = load [3 x ptr], ptr %199, align 8
  %202 = extractvalue [3 x ptr] %201, 1
  %203 = call { i32, i64 } %202({ ptr, ptr, i32 } %198)
  %204 = alloca { i32, i64 }, align 8
  store { i32, i64 } %203, ptr %204, align 4
  br label %205

205:                                              ; preds = %213, %185
  %206 = getelementptr { i32, i64 }, ptr %204, i32 0, i32 1
  %207 = alloca i64, align 8
  store i64 ptrtoint (ptr @i32_typ to i64), ptr %207, align 4
  %208 = load i64, ptr %206, align 4
  %209 = load i64, ptr %207, align 4
  %210 = icmp eq i64 %208, %209
  %211 = alloca i1, align 1
  store i1 %210, ptr %211, align 1
  %212 = load i1, ptr %211, align 1
  br i1 %212, label %213, label %226

213:                                              ; preds = %205
  %214 = load i32, ptr %204, align 4
  %215 = call i32 (ptr, ...) @printf(ptr @int_string, i32 %214)
  %216 = load { ptr, ptr, i32 }, ptr %197, align 8
  %217 = extractvalue { ptr, ptr, i32 } %216, 0
  %218 = call ptr @llvm.invariant.start.p0(i64 24, ptr %217)
  %219 = load [3 x ptr], ptr %217, align 8
  %220 = extractvalue [3 x ptr] %219, 1
  %221 = call { i32, i64 } %220({ ptr, ptr, i32 } %216)
  %222 = alloca { i32, i64 }, align 8
  store { i32, i64 } %221, ptr %222, align 4
  %223 = load i32, ptr %222, align 4
  %224 = getelementptr { i32, i64 }, ptr %222, i32 0, i32 1
  store i32 %223, ptr %204, align 4
  %225 = load i64, ptr %224, align 4
  store i64 %225, ptr %206, align 4
  br label %205

226:                                              ; preds = %205
  %227 = alloca ptr, align 8
  %228 = call ptr @coroutine_create(ptr @print88, ptr @coroutine_trampoline)
  store ptr %228, ptr %227, align 8
  %229 = load ptr, ptr %227, align 8
  call void @coroutine_resume(ptr %229)
  %230 = alloca i32, align 4
  store i32 89, ptr %230, align 4
  %231 = load i32, ptr %230, align 4
  %232 = call i32 (ptr, ...) @printf(ptr @int_string, i32 %231)
  %233 = load ptr, ptr %227, align 8
  call void @coroutine_resume(ptr %233)
  ret i32 0
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare ptr @llvm.invariant.start.p0(i64 immarg, ptr nocapture) #0

attributes #0 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
