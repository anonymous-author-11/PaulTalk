
import core;
import io;

extern def fopen(name : Buffer[i8], mode : Buffer[i8]) -> Buffer[i32]
extern def fprintf(file : Buffer[i32], text : Buffer[i8]) -> i32
extern def fclose(file : Buffer[i32]) -> i32
extern def fgetc(file : Buffer[i32]) -> i32
extern def ferror(file : Buffer[i32]) -> i32
extern def perror(null : i64)

// don't worry, this compiles down to umax + trunci
// obviously once we implement good casting this will be unecessary
def i32toi8(x : i32) -> i8 {
    i = 0;
    sum : i8 = 0;
    one : i8 = 1;
    while i < x {
        sum = sum + one;
        i = i + 1;
    }
    return sum;
}

class FileSystemError extends Exception {}

class File {
	@name : String
	@mode : String
	@handle : Buffer[i32]
	@open : Bool

	def init(@name : String, @mode : String) {
		@handle = fopen(@name.c_string(), @mode.c_string());
		@open = true;
	}
	def mode=(@mode : String) {
		if not @open { return; }
		self.reopen();
	}
	def reopen() {
		self.close();
		@handle = fopen(@name.c_string(), @mode.c_string());
		@open = true;
	}
	def close() {
		if not @open { return; }
		int = fclose(@handle);
		@open = false;
		if int == -1 { yield(FileSystemError.new()); }
	}
	def get_byte() -> i8 | Nil {
		if not @open { return nil; }
		int = fgetc(@handle);
    	if int == -1 {
    		if ferror(@handle) != 0 { yield(FileSystemError.new()); }
    		return nil;
    	}
    	return i32toi8(int);
	}
	def write(text : String) -> i32 {
		if not @open { return -1; }
		int = fprintf(@handle, text.c_string());
		if int < 0 { yield(FileSystemError.new()); }
		return int;
	}
}

class FileProcessor[T] {
	abstract def process(file : File) -> T {
	}
}

class FileReader extends FileProcessor[String] {
	def init() {}
	def process(file : File) -> String {
		content = "";
		byte = file.get_byte();
		while byte is i8 {
			content.append(byte);
			byte = file.get_byte();
		}
	    return content;
	}
}

class FileWriter extends FileProcessor[i32] {
	@text : String
	def init(@text : String) {}
	def process(file : File) -> i32 {
		return file.write(@text);
	}
}

class FileSystem {

	def Self.process_file[T](file_name : String, mode: String, processor: FileProcessor[T]) -> T {
		file = File.new(file_name, mode);
		fn = (p : FileProcessor[T], f : File) => { p.process(f); };
		coro = Coroutine.new(fn, processor, file);
		possible_exception = coro.call();
		file.close();
		if possible_exception is Exception { yield(possible_exception); }
		result = coro.result();
		if result is T { return result; }
	}

	def Self.process_file[T](file_name : String, mode: String, processor: (File) -> T) -> T {
		file = File.new(file_name, mode);
		coro = Coroutine.new(processor, file);
		possible_exception = coro.call();
		file.close();
		if possible_exception is Exception { yield(possible_exception); }
		result = coro.result();
		if result is T { return result; }
	}

	def Self.read_file(file_name : String) -> String {
		return FileSystem.process_file(file_name, "r", FileReader.new());
	}

	def Self.write_file(file_name : String, text : String) {
		FileSystem.process_file(file_name, "w", FileWriter.new(text));
	}

}

FileSystem.write_file("bigtings.txt", "this\nis how\nwe do\nit");
IO.print(FileSystem.read_file("bigtings.txt"));